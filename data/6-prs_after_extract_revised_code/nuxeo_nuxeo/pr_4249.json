{"pr_number": 4249, "pr_title": "NXP-29504: runtime startup errors/warnings", "pr_createdAt": "2020-08-10T07:35:55Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4249", "timeline": [{"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "url": "https://github.com/nuxeo/nuxeo/commit/36ee98457b7e58c67635f0f971b59d34b97d14e0", "message": "NXP-29504: adapt usage of runtime messages api", "committedDate": "2020-08-10T16:47:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MjkyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468052923", "bodyText": "Shouldn't be getClass instead of ComponentManagerImpl.class?", "author": "kevinleturc", "createdAt": "2020-08-10T17:09:06Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {\n+        Framework.getRuntime().getMessageHandler().addMessage(level, message, ComponentManagerImpl.class.getName());", "originalCommit": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NjU3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468356573", "bodyText": "These are still registration errors, so if we want to cleanup them up on hot reload, they should be linked to the ComponentManager marker", "author": "atchertchian", "createdAt": "2020-08-11T06:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MjkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MzgwNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469143807", "bodyText": "source removed --> resolve", "author": "atchertchian", "createdAt": "2020-08-12T09:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MjkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex 83de768ac5d..35f2f0b9cc2 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n\n@@ -66,7 +66,7 @@ public class DefaultComponent implements Component, Adaptable {\n     }\n \n     protected void addRuntimeMessage(Level level, String message) {\n-        Framework.getRuntime().getMessageHandler().addMessage(level, message, ComponentManagerImpl.class.getName());\n+        Framework.getRuntime().getMessageHandler().addMessage(level, message, ComponentManagerImpl.class);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MzQ3Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468053477", "bodyText": "Can you introduce a dedicated clear method without argument and do not allow null as argument for this one?", "author": "kevinleturc", "createdAt": "2020-08-10T17:10:06Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        DEACTIVATING\n+    @Override\n+    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n+        return getMessages(predicate).stream()\n+                                     .map(RuntimeMessage::getMessage)\n+                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                                             Collections::unmodifiableList));\n+    }\n \n+    @Override\n+    public void clear(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "originalCommit": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NzYyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468357621", "bodyText": "I hesitated to avoid piling up new API (since nobody would call that clear() method) but i can add it if you fin it better", "author": "atchertchian", "createdAt": "2020-08-11T06:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MzQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MjE0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468362145", "bodyText": "Removed the null possibility", "author": "atchertchian", "createdAt": "2020-08-11T06:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MzQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\nindex 347ecb50db1..fb7c9b15f96 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n\n@@ -102,15 +102,10 @@ public class RuntimeMessageHandlerImpl implements RuntimeMessageHandler, Compone\n         addMessage(new RuntimeMessage(currentStep, level, message, source));\n     }\n \n-    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n-        return givenPredicate == null ? m -> true : givenPredicate;\n-    }\n-\n     @Override\n     public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n-        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n         return messages.stream()\n-                       .filter(msg -> p.test(msg))\n+                       .filter(msg -> predicate.test(msg))\n                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NDM3Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468054377", "bodyText": "Can you remove the null argument possibility?", "author": "kevinleturc", "createdAt": "2020-08-10T17:11:44Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "originalCommit": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NzczMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468357732", "bodyText": "See above comment (same reason)", "author": "atchertchian", "createdAt": "2020-08-11T06:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NDM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MjE5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468362197", "bodyText": "Removed the null possibility", "author": "atchertchian", "createdAt": "2020-08-11T06:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NDM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\nindex 347ecb50db1..fb7c9b15f96 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n\n@@ -102,15 +102,10 @@ public class RuntimeMessageHandlerImpl implements RuntimeMessageHandler, Compone\n         addMessage(new RuntimeMessage(currentStep, level, message, source));\n     }\n \n-    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n-        return givenPredicate == null ? m -> true : givenPredicate;\n-    }\n-\n     @Override\n     public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n-        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n         return messages.stream()\n-                       .filter(msg -> p.test(msg))\n+                       .filter(msg -> predicate.test(msg))\n                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTAyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468055021", "bodyText": "Just p doesn't work?", "author": "kevinleturc", "createdAt": "2020-08-10T17:12:50Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))", "originalCommit": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1Nzg5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468357898", "bodyText": "Indeed, got confused by error when i tried to redefine the predicate parameter directly", "author": "atchertchian", "createdAt": "2020-08-11T06:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\nindex 347ecb50db1..fb7c9b15f96 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n\n@@ -102,15 +102,10 @@ public class RuntimeMessageHandlerImpl implements RuntimeMessageHandler, Compone\n         addMessage(new RuntimeMessage(currentStep, level, message, source));\n     }\n \n-    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n-        return givenPredicate == null ? m -> true : givenPredicate;\n-    }\n-\n     @Override\n     public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n-        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n         return messages.stream()\n-                       .filter(msg -> p.test(msg))\n+                       .filter(msg -> predicate.test(msg))\n                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468055486", "bodyText": "Does it make sense to have instead/in addition an api with Class<? > as source type?", "author": "kevinleturc", "createdAt": "2020-08-10T17:13:37Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {", "originalCommit": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1ODAzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468358034", "bodyText": "Instead makes sense given the usage \ud83d\udc4d", "author": "atchertchian", "createdAt": "2020-08-11T06:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MjYwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468362600", "bodyText": "Will check the DeploymentPreprocessor use case (only usage based on a String for now)", "author": "atchertchian", "createdAt": "2020-08-11T06:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNDEzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468424130", "bodyText": "Made the changed and used the addMessage(RuntimeMessage) api for the DeploymentPreprocessor use case (as nuxeo-runtime cannot depend on nuxeo-runtime-deploy module without producing a dependency cycle)", "author": "atchertchian", "createdAt": "2020-08-11T08:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\nindex 347ecb50db1..fb7c9b15f96 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n\n@@ -102,15 +102,10 @@ public class RuntimeMessageHandlerImpl implements RuntimeMessageHandler, Compone\n         addMessage(new RuntimeMessage(currentStep, level, message, source));\n     }\n \n-    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n-        return givenPredicate == null ? m -> true : givenPredicate;\n-    }\n-\n     @Override\n     public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n-        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n         return messages.stream()\n-                       .filter(msg -> p.test(msg))\n+                       .filter(msg -> predicate.test(msg))\n                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzYwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468057601", "bodyText": "Forgotten System.err?", "author": "kevinleturc", "createdAt": "2020-08-10T17:17:34Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +49,47 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getErrors();\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+            System.err.println(Framework.getRuntime().getMessageHandler().getMessages(null).get(0).getSource());", "originalCommit": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1ODEwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468358102", "bodyText": "Indeed thanks!", "author": "atchertchian", "createdAt": "2020-08-11T06:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\nindex e75dd8161e6..1ccf89300e6 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\n\n@@ -53,7 +53,6 @@ public class RuntimeInitializationTest {\n         List<String> errors = Framework.getRuntime().getMessageHandler().getErrors();\n         if (detected) {\n             assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n-            System.err.println(Framework.getRuntime().getMessageHandler().getMessages(null).get(0).getSource());\n         } else {\n             assertEquals(0, errors.size());\n         }\n"}}, {"oid": "0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "url": "https://github.com/nuxeo/nuxeo/commit/0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "message": "NXP-29504: adapt usage of runtime messages api", "committedDate": "2020-08-11T06:50:20Z", "type": "forcePushed"}, {"oid": "a66a102369d6801d2e9b2e58ee00f63be5fc6f52", "url": "https://github.com/nuxeo/nuxeo/commit/a66a102369d6801d2e9b2e58ee00f63be5fc6f52", "message": "NXP-29504: adapt usage of runtime messages api", "committedDate": "2020-08-11T06:55:36Z", "type": "forcePushed"}, {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "url": "https://github.com/nuxeo/nuxeo/commit/430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "message": "NXP-29504: adapt usage of runtime messages api", "committedDate": "2020-08-11T08:45:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468562484", "bodyText": "Not needed.", "author": "troger", "createdAt": "2020-08-11T13:04:00Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NTg3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468585871", "bodyText": "Needed for the DeploymentPreprocessor use case, see comments on resolved conversation above", "author": "atchertchian", "createdAt": "2020-08-11T13:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MTk3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468591971", "bodyText": "\ud83e\udd14\nI was just talking about the super();, not the whole constructor (?)", "author": "troger", "createdAt": "2020-08-11T13:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5Mjk1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468592959", "bodyText": "ah ok", "author": "atchertchian", "createdAt": "2020-08-11T13:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\ndeleted file mode 100644\nindex a330294c30d..00000000000\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/*\n- * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Kevin Leturc <kleturc@nuxeo.com>\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime;\n-\n-import java.util.logging.Level;\n-\n-/**\n- * @since 11.3\n- */\n-public class RuntimeMessage {\n-\n-    protected final ComponentManagerStep step;\n-\n-    protected final Level level;\n-\n-    protected final String message;\n-\n-    protected final String source;\n-\n-    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n-        this(step, level, message, null);\n-    }\n-\n-    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n-        super();\n-        this.step = step;\n-        this.level = level;\n-        this.message = message;\n-        this.source = source;\n-    }\n-\n-    public ComponentManagerStep getStep() {\n-        return step;\n-    }\n-\n-    public Level getLevel() {\n-        return level;\n-    }\n-\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    public String getSource() {\n-        return source;\n-    }\n-\n-    protected enum ComponentManagerStep {\n-\n-        /**\n-         * Pseudo state when listener has not been called yet.\n-         *\n-         * @since 11.3\n-         */\n-        INITIALIZING,\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n-\n-        STOPPING,\n-\n-        DEACTIVATING\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468563034", "bodyText": "Which listener?", "author": "troger", "createdAt": "2020-08-11T13:04:50Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NjM1NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468586354", "bodyText": "RuntimeMessageHandler is a runtime listener. Maybe we don't need this info anymore, wdyt @kevinleturc ?", "author": "atchertchian", "createdAt": "2020-08-11T13:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5Njg2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468596866", "bodyText": "We can get rid of the listener aspect there indeed.\nThe new state INITIALIZING represents the ComponentManager state before it starts its activation and it is only reachable just after the ComponentManager instantiation right?\nWe can reword the comment in this way \ud83d\udc4d .", "author": "kevinleturc", "createdAt": "2020-08-11T13:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5OTcxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468599717", "bodyText": "If we don't need this to be a listener, i'll get rid of the whole \"step\" information anyway. So which is it? Do you think we'll need to know at which step the message has been added?\nMy understanding is that this info was added to handle dupe messages in case of hotreload, but the strategy is not working anyway, that's why i added the notion of source instead.", "author": "atchertchian", "createdAt": "2020-08-11T13:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0Mjg5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468642897", "bodyText": "If we don't need this to be a listener, i'll get rid of the whole \"step\" information anyway. So which is it? Do you think we'll need to know at which step the message has been added?\n\nWe don't really need to know precisely the step, in fact we need to know if it happens during ACTIVATING + STARTING, or before RUNNING in order to not clean them before displaying them.\nThe source approach is interesting but it requires to manipulate the stack of messages outside of the handler which is not great to handle all usages (runtime/hotreload/test) and requires additional API for this. In addition, see one of my comments, it requires to put ComponentManagerImpl as a source for all Component. Is it really source? We won't be able to use this new field to know which component reported the message, or am I missing something?", "author": "kevinleturc", "createdAt": "2020-08-11T14:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1MDE0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468650141", "bodyText": "I cannot finely know which component provided the registration without changing the DescriptorRegistry api, that's why i limited changes here by cleaning up all messages from the ComponentManager source, even if i'm not happy with these changes. We're not relying on the step at all anymore: calls to #applyStash is the current criterion i'm using.\nI chose to go this way for now because at least we're not hiding important problems at startup anymore: it fixes the duplicate component name detection at startup (and you confirmed on slack that hotreload messages about reloaded components are enough, we don't need the complete list of messages -- that fixes the dupe messages on hotreload, still).\nNow if we want sthg finer, i'll postpone all this work until i get a go to fix the registration in general (as current code is nonsense): this will take time and bring more questions/issues, so this may not happen any time soon.", "author": "atchertchian", "createdAt": "2020-08-11T15:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NDY1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469144657", "bodyText": "relying on RUNNING state to clear messages fixed it --> cleaned up the step on messages, but kept the listener logics to be able to clear all messages when previous step was RUNNING", "author": "atchertchian", "createdAt": "2020-08-12T09:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\ndeleted file mode 100644\nindex a330294c30d..00000000000\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/*\n- * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Kevin Leturc <kleturc@nuxeo.com>\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime;\n-\n-import java.util.logging.Level;\n-\n-/**\n- * @since 11.3\n- */\n-public class RuntimeMessage {\n-\n-    protected final ComponentManagerStep step;\n-\n-    protected final Level level;\n-\n-    protected final String message;\n-\n-    protected final String source;\n-\n-    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n-        this(step, level, message, null);\n-    }\n-\n-    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n-        super();\n-        this.step = step;\n-        this.level = level;\n-        this.message = message;\n-        this.source = source;\n-    }\n-\n-    public ComponentManagerStep getStep() {\n-        return step;\n-    }\n-\n-    public Level getLevel() {\n-        return level;\n-    }\n-\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    public String getSource() {\n-        return source;\n-    }\n-\n-    protected enum ComponentManagerStep {\n-\n-        /**\n-         * Pseudo state when listener has not been called yet.\n-         *\n-         * @since 11.3\n-         */\n-        INITIALIZING,\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n-\n-        STOPPING,\n-\n-        DEACTIVATING\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzI1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468563252", "bodyText": "Not needed, the whole class is @since 11.3.", "author": "troger", "createdAt": "2020-08-11T13:05:09Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.\n+         *\n+         * @since 11.3", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NjYyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468586622", "bodyText": "Yes but still a new behaviour compared to previous states, anyway i can remove it.", "author": "atchertchian", "createdAt": "2020-08-11T13:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\ndeleted file mode 100644\nindex a330294c30d..00000000000\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/*\n- * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Kevin Leturc <kleturc@nuxeo.com>\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime;\n-\n-import java.util.logging.Level;\n-\n-/**\n- * @since 11.3\n- */\n-public class RuntimeMessage {\n-\n-    protected final ComponentManagerStep step;\n-\n-    protected final Level level;\n-\n-    protected final String message;\n-\n-    protected final String source;\n-\n-    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n-        this(step, level, message, null);\n-    }\n-\n-    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n-        super();\n-        this.step = step;\n-        this.level = level;\n-        this.message = message;\n-        this.source = source;\n-    }\n-\n-    public ComponentManagerStep getStep() {\n-        return step;\n-    }\n-\n-    public Level getLevel() {\n-        return level;\n-    }\n-\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    public String getSource() {\n-        return source;\n-    }\n-\n-    protected enum ComponentManagerStep {\n-\n-        /**\n-         * Pseudo state when listener has not been called yet.\n-         *\n-         * @since 11.3\n-         */\n-        INITIALIZING,\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n-\n-        STOPPING,\n-\n-        DEACTIVATING\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2Njc5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468566795", "bodyText": "Missing Javadoc/since.", "author": "troger", "createdAt": "2020-08-11T13:10:41Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 1343f4a0671..ba2cce6c94e 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -48,11 +41,7 @@ public interface RuntimeMessageHandler {\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n-     *\n-     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n-     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n-    @Deprecated\n     void addError(String message);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NjkyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468566923", "bodyText": "It's not a free string identifier :)", "author": "troger", "createdAt": "2020-08-11T13:10:55Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzA5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468587099", "bodyText": "Forgot to update the javadoc after latest changes indeed", "author": "atchertchian", "createdAt": "2020-08-11T13:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NjkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 1343f4a0671..ba2cce6c94e 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -48,11 +41,7 @@ public interface RuntimeMessageHandler {\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n-     *\n-     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n-     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n-    @Deprecated\n     void addError(String message);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468567352", "bodyText": "Predicate could be null, like for #getMessages?", "author": "troger", "createdAt": "2020-08-11T13:11:37Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzQ1NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468587454", "bodyText": "Not anymore, see previous comments from Kevin: i removed this possibility", "author": "atchertchian", "createdAt": "2020-08-11T13:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4ODY2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468688661", "bodyText": "So this need to be removed, right?\nhttps://github.com/nuxeo/nuxeo/pull/4249/files#diff-ea74bf978f35cfe86fc57284c8fc0567R78", "author": "troger", "createdAt": "2020-08-11T15:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5MTQ1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468691451", "bodyText": "Yes, thanks, i will review javadoc once we agree on the rest.", "author": "atchertchian", "createdAt": "2020-08-11T16:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 1343f4a0671..ba2cce6c94e 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -48,11 +41,7 @@ public interface RuntimeMessageHandler {\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n-     *\n-     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n-     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n-    @Deprecated\n     void addError(String message);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2ODM3Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468568377", "bodyText": "What if predicate is null?", "author": "troger", "createdAt": "2020-08-11T13:13:17Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessageStrings(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Clears messages filtered by following predicate.", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzYyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468587622", "bodyText": "see previous comments", "author": "atchertchian", "createdAt": "2020-08-11T13:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2ODM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 1343f4a0671..ba2cce6c94e 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -48,11 +41,7 @@ public interface RuntimeMessageHandler {\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n-     *\n-     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n-     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n-    @Deprecated\n     void addError(String message);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3MzE4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468573184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                   .filter(msg -> predicate.test(msg))\n          \n          \n            \n                                   .filter(predicate)\n          \n      \n    \n    \n  \n\n?", "author": "troger", "createdAt": "2020-08-11T13:20:30Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\nindex bc67e33795c..2eb55eb6ccf 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n\n@@ -89,37 +86,56 @@ public class RuntimeMessageHandlerImpl implements RuntimeMessageHandler, Compone\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        this.currentStep = step;\n+        messages.removeIf(msg -> step.equals(msg.getStep()));\n+        this.step = step;\n     }\n \n-    @Override\n-    public void addMessage(RuntimeMessage message) {\n-        messages.add(message);\n-    }\n+    /**\n+     * @since 9.10\n+     */\n+    protected static class Message {\n \n-    @Override\n-    public void addMessage(Level level, String message, Class<?> source) {\n-        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n-    }\n+        protected final ComponentManagerStep step;\n \n-    @Override\n-    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n-        return messages.stream()\n-                       .filter(msg -> predicate.test(msg))\n-                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n-    }\n+        protected final Level level;\n+\n+        protected final String message;\n+\n+        public Message(ComponentManagerStep step, Level level, String message) {\n+            this.step = step;\n+            this.level = level;\n+            this.message = message;\n+        }\n+\n+        public ComponentManagerStep getStep() {\n+            return step;\n+        }\n+\n+        public Level getLevel() {\n+            return level;\n+        }\n+\n+        public String getMessage() {\n+            return message;\n+        }\n \n-    @Override\n-    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n-        return getMessages(predicate).stream()\n-                                     .map(RuntimeMessage::getMessage)\n-                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n-                                             Collections::unmodifiableList));\n     }\n \n-    @Override\n-    public void clear(Predicate<RuntimeMessage> predicate) {\n-        messages.removeIf(msg -> predicate.test(msg));\n+    /**\n+     * @since 9.10\n+     */\n+    protected enum ComponentManagerStep {\n+\n+        ACTIVATING,\n+\n+        STARTING,\n+\n+        RUNNING,\n+\n+        STOPPING,\n+\n+        DEACTIVATING\n+\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3MzM1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468573350", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    messages.removeIf(msg -> predicate.test(msg));\n          \n          \n            \n                    messages.removeIf(predicate);", "author": "troger", "createdAt": "2020-08-11T13:20:44Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        DEACTIVATING\n+    @Override\n+    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n+        return getMessages(predicate).stream()\n+                                     .map(RuntimeMessage::getMessage)\n+                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                                             Collections::unmodifiableList));\n+    }\n \n+    @Override\n+    public void clear(Predicate<RuntimeMessage> predicate) {\n+        messages.removeIf(msg -> predicate.test(msg));", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\nindex bc67e33795c..2eb55eb6ccf 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n\n@@ -89,37 +86,56 @@ public class RuntimeMessageHandlerImpl implements RuntimeMessageHandler, Compone\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        this.currentStep = step;\n+        messages.removeIf(msg -> step.equals(msg.getStep()));\n+        this.step = step;\n     }\n \n-    @Override\n-    public void addMessage(RuntimeMessage message) {\n-        messages.add(message);\n-    }\n+    /**\n+     * @since 9.10\n+     */\n+    protected static class Message {\n \n-    @Override\n-    public void addMessage(Level level, String message, Class<?> source) {\n-        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n-    }\n+        protected final ComponentManagerStep step;\n \n-    @Override\n-    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n-        return messages.stream()\n-                       .filter(msg -> predicate.test(msg))\n-                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n-    }\n+        protected final Level level;\n+\n+        protected final String message;\n+\n+        public Message(ComponentManagerStep step, Level level, String message) {\n+            this.step = step;\n+            this.level = level;\n+            this.message = message;\n+        }\n+\n+        public ComponentManagerStep getStep() {\n+            return step;\n+        }\n+\n+        public Level getLevel() {\n+            return level;\n+        }\n+\n+        public String getMessage() {\n+            return message;\n+        }\n \n-    @Override\n-    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n-        return getMessages(predicate).stream()\n-                                     .map(RuntimeMessage::getMessage)\n-                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n-                                             Collections::unmodifiableList));\n     }\n \n-    @Override\n-    public void clear(Predicate<RuntimeMessage> predicate) {\n-        messages.removeIf(msg -> predicate.test(msg));\n+    /**\n+     * @since 9.10\n+     */\n+    protected enum ComponentManagerStep {\n+\n+        ACTIVATING,\n+\n+        STARTING,\n+\n+        RUNNING,\n+\n+        STOPPING,\n+\n+        DEACTIVATING\n+\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDY1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468574652", "bodyText": "Why not using #getClass() like in other changes?", "author": "troger", "createdAt": "2020-08-11T13:22:43Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -501,7 +496,9 @@ public synchronized void unregisterServices(RegistrationInfo ri) {\n \n     protected static void handleError(String message, Exception e) {\n         log.error(message, e);\n-        Framework.getRuntime().getMessageHandler().addWarning(message);\n+        Framework.getRuntime()\n+                 .getMessageHandler()\n+                 .addMessage(Level.SEVERE, message, ComponentManagerImpl.class);", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4OTIxMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468589211", "bodyText": "because it's a static method", "author": "atchertchian", "createdAt": "2020-08-11T13:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 3d80b0d16b1..4542a10c1f6 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n\n@@ -496,9 +501,7 @@ public class ComponentManagerImpl implements ComponentManager {\n \n     protected static void handleError(String message, Exception e) {\n         log.error(message, e);\n-        Framework.getRuntime()\n-                 .getMessageHandler()\n-                 .addMessage(Level.SEVERE, message, ComponentManagerImpl.class);\n+        Framework.getRuntime().getMessageHandler().addWarning(message);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3ODUzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468578536", "bodyText": "Seems not clear to me why we are using ComponentManagerImpl.class here instead of #getClass() or RegistrationInfoImpl.java.", "author": "troger", "createdAt": "2020-08-11T13:28:20Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,7 +343,9 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n+            Framework.getRuntime()\n+                     .getMessageHandler()\n+                     .addMessage(Level.SEVERE, msg, ComponentManagerImpl.class);", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MTk0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468591943", "bodyText": "because we need to clear all these in case of hotreload/tests, but i can reference both classes here if you prefer: https://github.com/nuxeo/nuxeo/blob/fix-NXP-29504-runtime-startup-errors/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java#L899\nnote i'll need to rework this anyway for https://jira.nuxeo.com/browse/NXP-28948, i was trying to merge minimal changes before refactoring the DescriptorRegistry api to handle things more finely (if we want to).", "author": "atchertchian", "createdAt": "2020-08-11T13:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3ODUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NTI3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469145271", "bodyText": "source removed -> resolve", "author": "atchertchian", "createdAt": "2020-08-12T09:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3ODUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java\nindex 77d629086ba..b21eef79ece 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java\n\n@@ -343,9 +342,7 @@ public class RegistrationInfoImpl implements RegistrationInfo {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime()\n-                     .getMessageHandler()\n-                     .addMessage(Level.SEVERE, msg, ComponentManagerImpl.class);\n+            Framework.getRuntime().getMessageHandler().addError(msg);\n             throw e;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0Mjg4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468942888", "bodyText": "I'm good with using java.util.logging.Level in this API, as it's a JDK class.", "author": "efge", "createdAt": "2020-08-12T00:48:47Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {", "originalCommit": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3OTgzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469079830", "bodyText": "My issue is that we are mixing 2 logging API (even if it's just for a LogLevel...) in all classes using this API - I don't find it clear.", "author": "troger", "createdAt": "2020-08-12T08:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0Mjg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NTYyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469145620", "bodyText": "Introduced a specific level for this, to still avoid duplicating error-related and warning-related api, and hopefully keeping clear semantics", "author": "atchertchian", "createdAt": "2020-08-12T09:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0Mjg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex 35f2f0b9cc2..fd9b98c5ed5 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n\n@@ -65,10 +63,6 @@ public class DefaultComponent implements Component, Adaptable {\n         setModifiedNow();\n     }\n \n-    protected void addRuntimeMessage(Level level, String message) {\n-        Framework.getRuntime().getMessageHandler().addMessage(level, message, ComponentManagerImpl.class);\n-    }\n-\n     @Override\n     public void registerExtension(Extension extension) {\n         Object[] contribs = extension.getContributions();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0NDg2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468944867", "bodyText": "I know it's a refactoring of pre-existing code, but FYI since Java 10 you can directly do .collect(Collectors.toUnmodifiableList())", "author": "efge", "createdAt": "2020-08-12T00:56:19Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));", "originalCommit": "afb3b63f41ae2805772e93cfe70ce7a6123d7320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NjI1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469146255", "bodyText": "\ud83d\udc4d", "author": "atchertchian", "createdAt": "2020-08-12T09:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0NDg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\nindex bc67e33795c..2eb55eb6ccf 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java\n\n@@ -89,37 +86,56 @@ public class RuntimeMessageHandlerImpl implements RuntimeMessageHandler, Compone\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        this.currentStep = step;\n+        messages.removeIf(msg -> step.equals(msg.getStep()));\n+        this.step = step;\n     }\n \n-    @Override\n-    public void addMessage(RuntimeMessage message) {\n-        messages.add(message);\n-    }\n+    /**\n+     * @since 9.10\n+     */\n+    protected static class Message {\n \n-    @Override\n-    public void addMessage(Level level, String message, Class<?> source) {\n-        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n-    }\n+        protected final ComponentManagerStep step;\n \n-    @Override\n-    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n-        return messages.stream()\n-                       .filter(msg -> predicate.test(msg))\n-                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n-    }\n+        protected final Level level;\n+\n+        protected final String message;\n+\n+        public Message(ComponentManagerStep step, Level level, String message) {\n+            this.step = step;\n+            this.level = level;\n+            this.message = message;\n+        }\n+\n+        public ComponentManagerStep getStep() {\n+            return step;\n+        }\n+\n+        public Level getLevel() {\n+            return level;\n+        }\n+\n+        public String getMessage() {\n+            return message;\n+        }\n \n-    @Override\n-    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n-        return getMessages(predicate).stream()\n-                                     .map(RuntimeMessage::getMessage)\n-                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n-                                             Collections::unmodifiableList));\n     }\n \n-    @Override\n-    public void clear(Predicate<RuntimeMessage> predicate) {\n-        messages.removeIf(msg -> predicate.test(msg));\n+    /**\n+     * @since 9.10\n+     */\n+    protected enum ComponentManagerStep {\n+\n+        ACTIVATING,\n+\n+        STARTING,\n+\n+        RUNNING,\n+\n+        STOPPING,\n+\n+        DEACTIVATING\n+\n     }\n \n }\n"}}, {"oid": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "url": "https://github.com/nuxeo/nuxeo/commit/8690cf6c6ad7727d8a71053aaba8177ce303ed27", "message": "NXP-29504: cleanup/format", "committedDate": "2020-08-12T08:57:06Z", "type": "commit"}, {"oid": "05e8f2a798006935dfa0347a6f3d1b312c2e41ed", "url": "https://github.com/nuxeo/nuxeo/commit/05e8f2a798006935dfa0347a6f3d1b312c2e41ed", "message": "NXP-29504: remove duplicate loading of bundle org.nuxeo.runtime bundle components\n\nAllows removing hacky code in startup duplicate components detection.", "committedDate": "2020-08-12T08:57:06Z", "type": "commit"}, {"oid": "9752129a8503db80abf4a7360cb12dc9758b6733", "url": "https://github.com/nuxeo/nuxeo/commit/9752129a8503db80abf4a7360cb12dc9758b6733", "message": "NXP-29504: adapt usage of runtime messages api", "committedDate": "2020-08-12T09:52:10Z", "type": "forcePushed"}, {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3", "url": "https://github.com/nuxeo/nuxeo/commit/d04bacb6c456728a82e66a2c1de08899c712fbf3", "message": "NXP-29504: adapt usage of runtime messages api", "committedDate": "2020-08-12T09:57:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODIxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348210", "bodyText": "Worth adding a convenient method #getMessages(Level) to ease the replacement of #getErrors and #getWarnings methods? Make sens to me as we have #addMessage(Level, String).", "author": "troger", "createdAt": "2020-08-12T15:32:24Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getRuntimeMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);", "originalCommit": "d04bacb6c456728a82e66a2c1de08899c712fbf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4Njk4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469786980", "bodyText": "Added this api for convenience", "author": "atchertchian", "createdAt": "2020-08-13T08:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "6346e5522c76f1e55dee69852d2dca4f4cb05763", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 360d3f139e5..86a8f4a5a6a 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -31,6 +31,27 @@ import org.nuxeo.runtime.RuntimeMessage.Level;\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODQxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348417", "bodyText": "Cannot be null, right? \ud83d\ude43", "author": "troger", "createdAt": "2020-08-12T15:32:41Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.", "originalCommit": "d04bacb6c456728a82e66a2c1de08899c712fbf3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6346e5522c76f1e55dee69852d2dca4f4cb05763", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 360d3f139e5..86a8f4a5a6a 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -31,6 +31,27 @@ import org.nuxeo.runtime.RuntimeMessage.Level;\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDUwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469350508", "bodyText": "Seems this method is not used anymore? Do we need it (right now)?", "author": "troger", "createdAt": "2020-08-12T15:35:38Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getRuntimeMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Clears messages filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    void clear(Predicate<RuntimeMessage> predicate);", "originalCommit": "d04bacb6c456728a82e66a2c1de08899c712fbf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4Njc2OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469786769", "bodyText": "Removed all api that was not needed right-away", "author": "atchertchian", "createdAt": "2020-08-13T08:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "6346e5522c76f1e55dee69852d2dca4f4cb05763", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 360d3f139e5..86a8f4a5a6a 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -31,6 +31,27 @@ import org.nuxeo.runtime.RuntimeMessage.Level;\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODc4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348783", "bodyText": "Former javadoc comment I think (?)", "author": "kevinleturc", "createdAt": "2020-08-12T15:33:12Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.", "originalCommit": "d04bacb6c456728a82e66a2c1de08899c712fbf3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6346e5522c76f1e55dee69852d2dca4f4cb05763", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 360d3f139e5..86a8f4a5a6a 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -31,6 +31,27 @@ import org.nuxeo.runtime.RuntimeMessage.Level;\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDQ4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469350483", "bodyText": "Thanks for the RuntimeMessage#step cleanup, I didn't see any usage except the RuntimeMessageHandlerImpl, does it worth to leave this class over there?", "author": "kevinleturc", "createdAt": "2020-08-12T15:35:36Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+/**\n+ * Represents a message to be held by the Runtime framework.\n+ * <p>\n+ * Allows detecting and displaying errors and warnings at server startup and when hot-reloading.\n+ *\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    public RuntimeMessage(Level level, String message) {\n+        this.level = level;\n+        this.message = message;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public enum Level {\n+\n+        ERROR,\n+\n+        WARNING\n+\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        ACTIVATING,\n+\n+        STARTING,\n+\n+        RUNNING,\n+\n+        STOPPING,\n+\n+        DEACTIVATING\n+\n+    }", "originalCommit": "d04bacb6c456728a82e66a2c1de08899c712fbf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NjQxMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469786411", "bodyText": "Will move it to RuntimeMessageHandlerImpl \ud83d\udc4d", "author": "atchertchian", "createdAt": "2020-08-13T08:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6346e5522c76f1e55dee69852d2dca4f4cb05763", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\nindex 7b8899c3c11..2a675fa2595 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java\n\n@@ -53,18 +53,4 @@ public class RuntimeMessage {\n \n     }\n \n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n-\n-        STOPPING,\n-\n-        DEACTIVATING\n-\n-    }\n-\n }\n"}}, {"oid": "6346e5522c76f1e55dee69852d2dca4f4cb05763", "url": "https://github.com/nuxeo/nuxeo/commit/6346e5522c76f1e55dee69852d2dca4f4cb05763", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator", "committedDate": "2020-08-13T14:31:51Z", "type": "forcePushed"}, {"oid": "234e0d47582207ea5aa09d35578465b609e51261", "url": "https://github.com/nuxeo/nuxeo/commit/234e0d47582207ea5aa09d35578465b609e51261", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator", "committedDate": "2020-08-13T14:51:43Z", "type": "forcePushed"}, {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c", "url": "https://github.com/nuxeo/nuxeo/commit/306dc46b24bd780d4b48500f9fee14c097ef5d1c", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator", "committedDate": "2020-08-13T14:55:32Z", "type": "forcePushed"}, {"oid": "aa37139c103d09d8e8631fbfa557809b80222300", "url": "https://github.com/nuxeo/nuxeo/commit/aa37139c103d09d8e8631fbfa557809b80222300", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator", "committedDate": "2020-08-13T15:01:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNjA3NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470016075", "bodyText": "Should be in the cleanup/format commit.", "author": "troger", "createdAt": "2020-08-13T14:58:21Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesLoader.java", "diffHunk": "@@ -144,4 +144,4 @@ protected Module onModule() {\n         };\n     }\n \n-}\n\\ No newline at end of file\n+}", "originalCommit": "82d8c0fbd58acedbae7c3841e384c023a933ac2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa37139c103d09d8e8631fbfa557809b80222300", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesLoader.java b/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesLoader.java\nindex f00e7cc07bd..eb6f88b3ed3 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesLoader.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesLoader.java\n\n@@ -144,4 +144,4 @@ class FeaturesLoader {\n         };\n     }\n \n-}\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNjE1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470016151", "bodyText": "Should be in the cleanup/format commit.", "author": "troger", "createdAt": "2020-08-13T14:58:26Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/Deploys.java", "diffHunk": "@@ -45,4 +45,4 @@\n \n     Deploy[] value();\n \n-}\n\\ No newline at end of file\n+}", "originalCommit": "82d8c0fbd58acedbae7c3841e384c023a933ac2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa37139c103d09d8e8631fbfa557809b80222300", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/Deploys.java b/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/Deploys.java\nindex 26db78fbf4b..26aee7a3532 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/Deploys.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/Deploys.java\n\n@@ -45,4 +45,4 @@ public @interface Deploys {\n \n     Deploy[] value();\n \n-}\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzkwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470017909", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RuntimeInitializationMockFeature implements RunnerFeature {\n          \n          \n            \n            public class RuntimeInitializationErrorMockFeature implements RunnerFeature {\n          \n      \n    \n    \n  \n\nMaybe? To make it clear it adds/generates errors.", "author": "troger", "createdAt": "2020-08-13T15:00:43Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationMockFeature.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.nuxeo.runtime.RuntimeMessage.Level;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RunnerFeature;\n+\n+import com.google.inject.Binder;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeInitializationMockFeature implements RunnerFeature {", "originalCommit": "306dc46b24bd780d4b48500f9fee14c097ef5d1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationMockFeature.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationMockFeature.java\ndeleted file mode 100644\nindex 6d3df1dc954..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationMockFeature.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import java.util.List;\n-\n-import org.nuxeo.runtime.RuntimeMessage.Level;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.test.runner.FeaturesRunner;\n-import org.nuxeo.runtime.test.runner.RunnerFeature;\n-\n-import com.google.inject.Binder;\n-\n-/**\n- * @since 11.3\n- */\n-public class RuntimeInitializationMockFeature implements RunnerFeature {\n-\n-    protected void addDeploymentError(String message) {\n-        String value = System.getProperty(\"org.nuxeo.runtime.deployment.errors\");\n-        if (value == null) {\n-            value = \"\";\n-        }\n-        value += message + \"\\n\";\n-        System.setProperty(\"org.nuxeo.runtime.deployment.errors\", value);\n-    }\n-\n-    @Override\n-    public void initialize(FeaturesRunner runner) throws Exception {\n-        addDeploymentError(\"Runtime test feature init error\");\n-    }\n-\n-    @Override\n-    public void start(FeaturesRunner runner) throws Exception {\n-        addDeploymentError(\"Runtime test start error\");\n-    }\n-\n-    @Override\n-    public void configure(FeaturesRunner runner, Binder binder) {\n-        List<String> errors = Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR);\n-        assertEquals(2, errors.size());\n-        assertEquals(\"Runtime test feature init error\", errors.get(0));\n-        assertEquals(\"Runtime test start error\", errors.get(1));\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxODg2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470018862", "bodyText": "Worth checking there are no messages?", "author": "troger", "createdAt": "2020-08-13T15:01:41Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    public void testDeploymentPreprocessorErrors() throws Exception {\n+        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature", "originalCommit": "306dc46b24bd780d4b48500f9fee14c097ef5d1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1NTI5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470055290", "bodyText": "Was indeed worth checking: some messages have been ignored, some not.", "author": "atchertchian", "createdAt": "2020-08-13T15:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxODg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java\ndeleted file mode 100644\nindex 364e1fed0bb..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime;\n-\n-import javax.inject.Inject;\n-\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.nuxeo.runtime.test.runner.Features;\n-import org.nuxeo.runtime.test.runner.FeaturesRunner;\n-import org.nuxeo.runtime.test.runner.HotDeployer;\n-import org.nuxeo.runtime.test.runner.RuntimeFeature;\n-\n-@RunWith(FeaturesRunner.class)\n-@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n-public class RuntimeInitializationPreprocessorTest {\n-\n-    @Inject\n-    protected HotDeployer hotDeployer;\n-\n-    @Test\n-    public void testDeploymentPreprocessorErrors() throws Exception {\n-        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxODk2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470018960", "bodyText": "Not used.", "author": "troger", "createdAt": "2020-08-13T15:01:48Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;", "originalCommit": "306dc46b24bd780d4b48500f9fee14c097ef5d1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java\ndeleted file mode 100644\nindex 364e1fed0bb..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime;\n-\n-import javax.inject.Inject;\n-\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.nuxeo.runtime.test.runner.Features;\n-import org.nuxeo.runtime.test.runner.FeaturesRunner;\n-import org.nuxeo.runtime.test.runner.HotDeployer;\n-import org.nuxeo.runtime.test.runner.RuntimeFeature;\n-\n-@RunWith(FeaturesRunner.class)\n-@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n-public class RuntimeInitializationPreprocessorTest {\n-\n-    @Inject\n-    protected HotDeployer hotDeployer;\n-\n-    @Test\n-    public void testDeploymentPreprocessorErrors() throws Exception {\n-        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjA2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470022062", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(List.of(), Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));\n          \n          \n            \n                    assertTrue(Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING).isEmpty());\n          \n      \n    \n    \n  \n\nSame for others assertEquals(List.of(), ...)", "author": "troger", "createdAt": "2020-08-13T15:06:16Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +50,111 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR);\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+        } else {\n+            assertEquals(0, errors.size());\n+        }\n+    }\n+\n     @Test\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n-    @Ignore(\"Deactivated for now since duplicate contributions are still allowed.\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\")\n     public void testContributionsWithDuplicateComponent() throws Exception {\n-        boolean success = false;\n-        try {\n-            hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n-            success = true;\n-        } catch (AssertionError e) {\n-            // OK.\n-        }\n-        assertFalse(\"An exception should have been raised.\", success);\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFile() throws Exception {\n+        // dupe annotation on tests not detected (?)\n+        checkDupe(false);\n     }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFileHotReload() throws Exception {\n+        hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\");\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentHotReload() throws Exception {\n+        hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:invalid-component-activate-message.xml\")\n+    public void testInvalidComponentActivateMessage() throws Exception {\n+        assertEquals(List.of(\"Error message on activate\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR));\n+        assertEquals(List.of(\"Warn message on activate\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:invalid-component.xml\")\n+    public void testInvalidComponent() throws Exception {\n+        assertEquals(List.of(\n+                \"Bad extension declaration (no target attribute specified) on component 'service:invalid.comp'\",\n+                \"Warning: target extension point 'xp' of 'invalid.comp' is unknown. Check your extension in component service:invalid.comp\",\n+                \"Warning: target extension point 'null' of 'invalid.comp' is unknown. Check your extension in component service:invalid.comp\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR));\n+        assertEquals(List.of(), Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));", "originalCommit": "aa37139c103d09d8e8631fbfa557809b80222300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\nindex 8633363aa80..d719a51e8ef 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\n\n@@ -46,7 +47,7 @@ public class RuntimeInitializationTest {\n     @Test\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n-    public void testContributions() throws Exception {\n+    public void testContributions() {\n         // do nothing\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyNTY2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470025668", "bodyText": "Seems that all the throws Exception in methods not using the hotDeployer can be removed.", "author": "troger", "createdAt": "2020-08-13T15:11:33Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +50,111 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR);\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+        } else {\n+            assertEquals(0, errors.size());\n+        }\n+    }\n+\n     @Test\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n-    @Ignore(\"Deactivated for now since duplicate contributions are still allowed.\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\")\n     public void testContributionsWithDuplicateComponent() throws Exception {\n-        boolean success = false;\n-        try {\n-            hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n-            success = true;\n-        } catch (AssertionError e) {\n-            // OK.\n-        }\n-        assertFalse(\"An exception should have been raised.\", success);\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFile() throws Exception {", "originalCommit": "aa37139c103d09d8e8631fbfa557809b80222300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\nindex 8633363aa80..d719a51e8ef 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java\n\n@@ -46,7 +47,7 @@ public class RuntimeInitializationTest {\n     @Test\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n-    public void testContributions() throws Exception {\n+    public void testContributions() {\n         // do nothing\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzQ2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033468", "bodyText": "I would have linked to #getMessages(Level).", "author": "troger", "createdAt": "2020-08-13T15:22:12Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -27,26 +31,57 @@\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead", "originalCommit": "aa37139c103d09d8e8631fbfa557809b80222300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 86a8f4a5a6a..fd56f1dfb5f 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -62,7 +62,7 @@ public interface RuntimeMessageHandler {\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n-     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n+     * @deprecated since 11.3, use {@link #getMessages(Level)} instead\n      */\n     @Deprecated\n     List<String> getWarnings();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzU1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033550", "bodyText": "I would have linked to #getMessages(Level).", "author": "troger", "createdAt": "2020-08-13T15:22:19Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -27,26 +31,57 @@\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead", "originalCommit": "aa37139c103d09d8e8631fbfa557809b80222300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\nindex 86a8f4a5a6a..fd56f1dfb5f 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java\n\n@@ -62,7 +62,7 @@ public interface RuntimeMessageHandler {\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n-     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n+     * @deprecated since 11.3, use {@link #getMessages(Level)} instead\n      */\n     @Deprecated\n     List<String> getWarnings();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMTg2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470031860", "bodyText": "Unused.", "author": "kevinleturc", "createdAt": "2020-08-13T15:20:05Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;", "originalCommit": "aa37139c103d09d8e8631fbfa557809b80222300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java\ndeleted file mode 100644\nindex 364e1fed0bb..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime;\n-\n-import javax.inject.Inject;\n-\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.nuxeo.runtime.test.runner.Features;\n-import org.nuxeo.runtime.test.runner.FeaturesRunner;\n-import org.nuxeo.runtime.test.runner.HotDeployer;\n-import org.nuxeo.runtime.test.runner.RuntimeFeature;\n-\n-@RunWith(FeaturesRunner.class)\n-@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n-public class RuntimeInitializationPreprocessorTest {\n-\n-    @Inject\n-    protected HotDeployer hotDeployer;\n-\n-    @Test\n-    public void testDeploymentPreprocessorErrors() throws Exception {\n-        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzUxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033512", "bodyText": "What about putting the feature as a static class here? It will improve readability.", "author": "kevinleturc", "createdAt": "2020-08-13T15:22:15Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    public void testDeploymentPreprocessorErrors() throws Exception {\n+        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature", "originalCommit": "aa37139c103d09d8e8631fbfa557809b80222300", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEwNTk5Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470105996", "bodyText": "I reverted that change as maven test fails on FeaturesLoader usage of the static inner class:\njava.lang.IllegalAccessException: class org.nuxeo.runtime.test.runner.FeaturesLoader$Holder cannot access a member of class org.nuxeo.runtime.RuntimeInitializationPreprocessorTest$ErrorFeature with modifiers \"public\"\n\tat java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)\n\tat java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:591)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)\n\tat org.nuxeo.runtime.test.runner.FeaturesLoader$Holder.<init>(FeaturesLoader.java:54)\n\tat org.nuxeo.runtime.test.runner.FeaturesLoader.loadFeature(FeaturesLoader.java:124)\n\tat org.nuxeo.runtime.test.runner.FeaturesLoader.loadFeatures(FeaturesLoader.java:100)\n\tat org.nuxeo.runtime.test.runner.FeaturesRunner.<init>(FeaturesRunner.java:106)", "author": "atchertchian", "createdAt": "2020-08-13T17:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java\ndeleted file mode 100644\nindex 364e1fed0bb..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime;\n-\n-import javax.inject.Inject;\n-\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.nuxeo.runtime.test.runner.Features;\n-import org.nuxeo.runtime.test.runner.FeaturesRunner;\n-import org.nuxeo.runtime.test.runner.HotDeployer;\n-import org.nuxeo.runtime.test.runner.RuntimeFeature;\n-\n-@RunWith(FeaturesRunner.class)\n-@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n-public class RuntimeInitializationPreprocessorTest {\n-\n-    @Inject\n-    protected HotDeployer hotDeployer;\n-\n-    @Test\n-    public void testDeploymentPreprocessorErrors() throws Exception {\n-        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzNTAwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470035004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { // error at activation will bubble up\n          \n          \n            \n                                                                                         // and will not be caught by message\n          \n          \n            \n                                                                                         // handler --> skip it\n          \n          \n            \n                        throw new RuntimeException(\"Fail on \" + actionTypeOn);\n          \n          \n            \n                    // error at activation will bubble up and will not be caught by message handler --> skip it\n          \n          \n            \n                    if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { \n          \n          \n            \n                        throw new RuntimeException(\"Fail on \" + actionTypeOn);", "author": "kevinleturc", "createdAt": "2020-08-13T15:24:27Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTestComponent.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import org.nuxeo.runtime.RuntimeMessage.Level;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeInitializationTestComponent extends DefaultComponent {\n+\n+    protected String actionType;\n+\n+    protected String actionTypeOn;\n+\n+    @Override\n+    public void activate(ComponentContext context) {\n+        actionType = (String) context.getPropertyValue(\"actionType\");\n+        actionTypeOn = (String) context.getPropertyValue(\"actionTypeOn\");\n+\n+        actOn(\"activate\");\n+    }\n+\n+    @Override\n+    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n+        actOn(\"register\");\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        actOn(\"start\");\n+    }\n+\n+    protected void actOn(String action) {\n+        if (!action.equals(actionTypeOn)) {\n+            return;\n+        }\n+        if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { // error at activation will bubble up\n+                                                                             // and will not be caught by message\n+                                                                             // handler --> skip it\n+            throw new RuntimeException(\"Fail on \" + actionTypeOn);", "originalCommit": "aa37139c103d09d8e8631fbfa557809b80222300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTestComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTestComponent.java\ndeleted file mode 100644\nindex 7546fd7bec3..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTestComponent.java\n+++ /dev/null\n\n@@ -1,69 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime;\n-\n-import org.nuxeo.runtime.RuntimeMessage.Level;\n-import org.nuxeo.runtime.model.ComponentContext;\n-import org.nuxeo.runtime.model.ComponentInstance;\n-import org.nuxeo.runtime.model.DefaultComponent;\n-\n-/**\n- * @since 11.3\n- */\n-public class RuntimeInitializationTestComponent extends DefaultComponent {\n-\n-    protected String actionType;\n-\n-    protected String actionTypeOn;\n-\n-    @Override\n-    public void activate(ComponentContext context) {\n-        actionType = (String) context.getPropertyValue(\"actionType\");\n-        actionTypeOn = (String) context.getPropertyValue(\"actionTypeOn\");\n-\n-        actOn(\"activate\");\n-    }\n-\n-    @Override\n-    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        actOn(\"register\");\n-    }\n-\n-    @Override\n-    public void start(ComponentContext context) {\n-        actOn(\"start\");\n-    }\n-\n-    protected void actOn(String action) {\n-        if (!action.equals(actionTypeOn)) {\n-            return;\n-        }\n-        if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { // error at activation will bubble up\n-                                                                             // and will not be caught by message\n-                                                                             // handler --> skip it\n-            throw new RuntimeException(\"Fail on \" + actionTypeOn);\n-        }\n-        if (\"message\".equals(actionType)) {\n-            addRuntimeMessage(Level.ERROR, \"Error message on \" + actionTypeOn);\n-            addRuntimeMessage(Level.WARNING, \"Warn message on \" + actionTypeOn);\n-        }\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470049528", "bodyText": "I don't like null,  they are often error prone. What do you think about moving the content of this method in the activate method?\nAs it we drop the null thing + we have the full error management (with the early return) at the same place.\nWdyt?", "author": "kevinleturc", "createdAt": "2020-08-13T15:46:14Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,8 +343,8 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n-            throw e;\n+            Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n+            return null;", "originalCommit": "aa37139c103d09d8e8631fbfa557809b80222300", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTUwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470069509", "bodyText": "Ok but if so, it appears even more consistent to catch an error at component activation too... (as all the logics are in the same method one after the other).\nThat will change the behaviour described in the RuntimeInitializationTestComponent (see \"error at activation will bubble up and will not be caught by message handler\" in my test comments).\nWe would have in the final RegistrationInfo#activate method the following process:\n\ntry/catch on component instantiation (add error to runtime if so and return)\ntry/catch on activation (new behaviour: add error to runtime if so and return instead of bubbling up the error)\ntry/catch on each of the extensions contributions\ntry/catch on each of the pending contributions\n\nWDYT?", "author": "atchertchian", "createdAt": "2020-08-13T16:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3MjI0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470072243", "bodyText": "I will include the change so that you can see what it looks like, i can revert it if we're not happy with it or if there are unexpected impacts.", "author": "atchertchian", "createdAt": "2020-08-13T16:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3ODc5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470078792", "bodyText": "(pushed)", "author": "atchertchian", "createdAt": "2020-08-13T16:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NTU5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470465593", "bodyText": "I like it \ud83d\udc4d", "author": "kevinleturc", "createdAt": "2020-08-14T07:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "chunk": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java\nindex 046c56eaf8d..76d0a182343 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java\n\n@@ -344,7 +344,7 @@ public class RegistrationInfoImpl implements RegistrationInfo {\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n             Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n-            return null;\n+            throw e;\n         }\n     }\n \n"}}, {"oid": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "url": "https://github.com/nuxeo/nuxeo/commit/a7b17b603abe0cfda4800fcd063c9836d42e5841", "message": "NXP-29504: rework runtime messages management\n\nFixes duplicate component names detection at startup, and stores more detailed information that can be used by explorer.", "committedDate": "2020-08-13T16:31:59Z", "type": "commit"}, {"oid": "360e927be1dd762e56b872a70d93bc10bf5b8d03", "url": "https://github.com/nuxeo/nuxeo/commit/360e927be1dd762e56b872a70d93bc10bf5b8d03", "message": "NXP-29504: adapt usage of runtime messages api", "committedDate": "2020-08-13T16:31:59Z", "type": "commit"}, {"oid": "0e3bca59abaf4899ec2782e86bc8be4a8eba0f8e", "url": "https://github.com/nuxeo/nuxeo/commit/0e3bca59abaf4899ec2782e86bc8be4a8eba0f8e", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator", "committedDate": "2020-08-13T16:31:59Z", "type": "forcePushed"}, {"oid": "84c4b4760dbddc1cae54672ea0d79bdb8bba7d2e", "url": "https://github.com/nuxeo/nuxeo/commit/84c4b4760dbddc1cae54672ea0d79bdb8bba7d2e", "message": "NXP-29504: add more unit tests, fix related RegistrationInfoImpl behaviour (setting aside NXP-29547)", "committedDate": "2020-08-13T17:12:24Z", "type": "commit"}, {"oid": "24a189ea62a211e14c2735cc59ec4cd802de8fe1", "url": "https://github.com/nuxeo/nuxeo/commit/24a189ea62a211e14c2735cc59ec4cd802de8fe1", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator", "committedDate": "2020-08-13T17:12:24Z", "type": "commit"}, {"oid": "24a189ea62a211e14c2735cc59ec4cd802de8fe1", "url": "https://github.com/nuxeo/nuxeo/commit/24a189ea62a211e14c2735cc59ec4cd802de8fe1", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator", "committedDate": "2020-08-13T17:12:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5OTM5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470499397", "bodyText": "Nice, I didn't realize this had been added in Java 11, it's indeed cleaner-looking than .toArray(new Extension[0])", "author": "efge", "createdAt": "2020-08-14T08:56:12Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -574,15 +579,24 @@ public String getImplementation() {\n         return implementation;\n     }\n \n-    public void checkExtensions() {\n+    /**\n+     * Checks extensions and returns only valid ones.\n+     *\n+     * @since 11.3\n+     */\n+    protected Extension[] checkExtensions() {\n+        var validExtensions = new ArrayList<Extension>();\n         for (ExtensionImpl xt : extensions) {\n             if (xt.target == null) {\n                 String msg = String.format(\n-                        \"Bad extension declaration (no target attribute specified) on component 's%'\", getName());\n-                Framework.getRuntime().getMessageHandler().addMessage(Level.WARNING, msg);\n+                        \"Bad extension declaration (no target attribute specified) on component '%s'\", getName());\n+                Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n                 continue;\n+            } else {\n+                validExtensions.add(xt);\n             }\n         }\n+        return validExtensions.toArray(Extension[]::new);", "originalCommit": "84c4b4760dbddc1cae54672ea0d79bdb8bba7d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}