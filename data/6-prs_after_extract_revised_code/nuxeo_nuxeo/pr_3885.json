{"pr_number": 3885, "pr_title": "NXP-26704: allow storing fulltext in blobs", "pr_createdAt": "2020-04-02T17:40:22Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3885", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMjU4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402822584", "bodyText": "Since 11.1.", "author": "troger", "createdAt": "2020-04-03T08:19:30Z", "path": "modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSRepositoryDescriptor.java", "diffHunk": "@@ -70,6 +70,11 @@ public void setFulltextDisabled(boolean disabled) {\n         fulltextDescriptor.setFulltextDisabled(disabled);\n     }\n \n+    @XNode(\"fulltext@storedInBlob\")\n+    public void setFulltextStoredInBlob(boolean storedInBlob) {", "originalCommit": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "chunk": "diff --git a/modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSRepositoryDescriptor.java b/modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSRepositoryDescriptor.java\nindex 01461b8917a..41e2c9e71fe 100644\n--- a/modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSRepositoryDescriptor.java\n+++ b/modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSRepositoryDescriptor.java\n\n@@ -70,11 +70,6 @@ public class DBSRepositoryDescriptor implements Cloneable {\n         fulltextDescriptor.setFulltextDisabled(disabled);\n     }\n \n-    @XNode(\"fulltext@storedInBlob\")\n-    public void setFulltextStoredInBlob(boolean storedInBlob) {\n-        fulltextDescriptor.setFulltextStoredInBlob(storedInBlob);\n-    }\n-\n     @XNode(\"fulltext@searchDisabled\")\n     public void setFulltextSearchDisabled(boolean disabled) {\n         fulltextDescriptor.setFulltextSearchDisabled(disabled);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNDQxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402824410", "bodyText": "What about:\nif (fulltextStoredInBlob && fulltext != null)", "author": "troger", "createdAt": "2020-04-03T08:21:34Z", "path": "modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSSession.java", "diffHunk": "@@ -1547,10 +1554,29 @@ protected static ACP memToAcp(Serializable acpSer) {\n         return acp;\n     }\n \n+    @Override\n+    public boolean isFulltextStoredInBlob() {\n+        return fulltextStoredInBlob;\n+    }\n+\n     @Override\n     public Map<String, String> getBinaryFulltext(String id) {\n         State state = transaction.getStateForRead(id);\n         String fulltext = (String) state.get(KEY_FULLTEXT_BINARY);\n+        if (fulltextStoredInBlob) {\n+            String key = fulltext;\n+            if (key != null) {", "originalCommit": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "chunk": "diff --git a/modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSSession.java b/modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSSession.java\nindex 66578256c80..0bafd020601 100644\n--- a/modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSSession.java\n+++ b/modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSSession.java\n\n@@ -1554,29 +1547,10 @@ public class DBSSession implements Session<QueryFilter> {\n         return acp;\n     }\n \n-    @Override\n-    public boolean isFulltextStoredInBlob() {\n-        return fulltextStoredInBlob;\n-    }\n-\n     @Override\n     public Map<String, String> getBinaryFulltext(String id) {\n         State state = transaction.getStateForRead(id);\n         String fulltext = (String) state.get(KEY_FULLTEXT_BINARY);\n-        if (fulltextStoredInBlob) {\n-            String key = fulltext;\n-            if (key != null) {\n-                DocumentBlobManager blobManager = Framework.getService(DocumentBlobManager.class);\n-                try {\n-                    BlobInfo blobInfo = new BlobInfo();\n-                    blobInfo.key = key;\n-                    Blob blob = blobManager.readBlob(blobInfo, getRepositoryName());\n-                    fulltext = blob.getString();\n-                } catch (IOException e) {\n-                    throw new PropertyException(\"Cannot read fulltext blob for doc: \" + id, e);\n-                }\n-            }\n-        }\n         return Collections.singletonMap(\"binarytext\", fulltext);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTQ4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402901482", "bodyText": "Since 11.1", "author": "troger", "createdAt": "2020-04-03T10:11:10Z", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/RepositoryDescriptor.java", "diffHunk": "@@ -318,6 +318,11 @@ public void setFulltextDisabled(boolean disabled) {\n         fulltextDescriptor.setFulltextDisabled(disabled);\n     }\n \n+    @XNode(\"indexing/fulltext@storedInBlob\")\n+    public void setFulltextStoredInBlob(boolean storedInBlob) {", "originalCommit": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "chunk": "diff --git a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/RepositoryDescriptor.java b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/RepositoryDescriptor.java\nindex c13df758889..a8b3ad474e1 100644\n--- a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/RepositoryDescriptor.java\n+++ b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/RepositoryDescriptor.java\n\n@@ -318,11 +318,6 @@ public class RepositoryDescriptor {\n         fulltextDescriptor.setFulltextDisabled(disabled);\n     }\n \n-    @XNode(\"indexing/fulltext@storedInBlob\")\n-    public void setFulltextStoredInBlob(boolean storedInBlob) {\n-        fulltextDescriptor.setFulltextStoredInBlob(storedInBlob);\n-    }\n-\n     @XNode(\"indexing/fulltext@searchDisabled\")\n     public void setFulltextSearchDisabled(boolean disabled) {\n         fulltextDescriptor.setFulltextSearchDisabled(disabled);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzM4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402903384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (fulltextDescriptor.getFulltextStoredInBlob()) {\n          \n          \n            \n                        String key = map.get(\"binarytext\");\n          \n          \n            \n                        if (key != null) {\n          \n          \n            \n                    String key = map.get(\"binarytext\");\n          \n          \n            \n                    if (fulltextDescriptor.getFulltextStoredInBlob() && key != null) {", "author": "troger", "createdAt": "2020-04-03T10:14:58Z", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java", "diffHunk": "@@ -1475,13 +1484,34 @@ public long getCacheSelectionSize() {\n         return context.getCacheSelectionSize();\n     }\n \n+    @Override\n+    public boolean isFulltextStoredInBlob() {\n+        return fulltextDescriptor.getFulltextStoredInBlob();\n+    }\n+\n     @Override\n     public Map<String, String> getBinaryFulltext(Serializable id) {\n-        if (repository.getRepositoryDescriptor().getFulltextDescriptor().getFulltextDisabled()) {\n+        if (fulltextDescriptor.getFulltextDisabled()) {\n             return null;\n         }\n         RowId rowId = new RowId(Model.FULLTEXT_TABLE_NAME, id);\n-        return mapper.getBinaryFulltext(rowId);\n+        Map<String, String> map = mapper.getBinaryFulltext(rowId);\n+        if (fulltextDescriptor.getFulltextStoredInBlob()) {\n+            String key = map.get(\"binarytext\");\n+            if (key != null) {", "originalCommit": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "chunk": "diff --git a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java\nindex 3a7182f0542..c1782f54d1f 100644\n--- a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java\n+++ b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java\n\n@@ -1484,34 +1475,13 @@ public class SessionImpl implements Session, XAResource {\n         return context.getCacheSelectionSize();\n     }\n \n-    @Override\n-    public boolean isFulltextStoredInBlob() {\n-        return fulltextDescriptor.getFulltextStoredInBlob();\n-    }\n-\n     @Override\n     public Map<String, String> getBinaryFulltext(Serializable id) {\n-        if (fulltextDescriptor.getFulltextDisabled()) {\n+        if (repository.getRepositoryDescriptor().getFulltextDescriptor().getFulltextDisabled()) {\n             return null;\n         }\n         RowId rowId = new RowId(Model.FULLTEXT_TABLE_NAME, id);\n-        Map<String, String> map = mapper.getBinaryFulltext(rowId);\n-        if (fulltextDescriptor.getFulltextStoredInBlob()) {\n-            String key = map.get(\"binarytext\");\n-            if (key != null) {\n-                DocumentBlobManager blobManager = Framework.getService(DocumentBlobManager.class);\n-                try {\n-                    BlobInfo blobInfo = new BlobInfo();\n-                    blobInfo.key = key;\n-                    Blob blob = blobManager.readBlob(blobInfo, getRepositoryName());\n-                    String fulltext = blob.getString();\n-                    map.put(\"binarytext\", fulltext);\n-                } catch (IOException e) {\n-                    throw new PropertyException(\"Cannot read fulltext blob for doc: \" + id, e);\n-                }\n-            }\n-        }\n-        return map;\n+        return mapper.getBinaryFulltext(rowId);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzgzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402903834", "bodyText": "Worth updating the class to log4j 2, nop?", "author": "troger", "createdAt": "2020-04-03T10:15:52Z", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/JDBCBackend.java", "diffHunk": "@@ -126,8 +126,9 @@ public Model initialize(RepositoryImpl repository) {\n         }\n         if (log.isDebugEnabled()) {\n             FulltextDescriptor fulltextDescriptor = repositoryDescriptor.getFulltextDescriptor();\n-            log.debug(String.format(\"Database ready, fulltext: disabled=%b searchDisabled=%b.\",\n-                    fulltextDescriptor.getFulltextDisabled(), fulltextDescriptor.getFulltextSearchDisabled()));\n+            log.debug(String.format(\"Database ready, fulltext: disabled=%b storedInBlob=%b searchDisabled=%b.\",\n+                    fulltextDescriptor.getFulltextDisabled(), fulltextDescriptor.getFulltextStoredInBlob(),\n+                    fulltextDescriptor.getFulltextSearchDisabled()));", "originalCommit": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MTg1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402971850", "bodyText": "Sure but later :)\nNote that this debug log is only seen once at startup so no performance-critical.", "author": "efge", "createdAt": "2020-04-03T12:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "chunk": "diff --git a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/JDBCBackend.java b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/JDBCBackend.java\nindex 7e3e4452d44..09424748763 100644\n--- a/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/JDBCBackend.java\n+++ b/modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/JDBCBackend.java\n\n@@ -126,9 +126,8 @@ public class JDBCBackend implements RepositoryBackend {\n         }\n         if (log.isDebugEnabled()) {\n             FulltextDescriptor fulltextDescriptor = repositoryDescriptor.getFulltextDescriptor();\n-            log.debug(String.format(\"Database ready, fulltext: disabled=%b storedInBlob=%b searchDisabled=%b.\",\n-                    fulltextDescriptor.getFulltextDisabled(), fulltextDescriptor.getFulltextStoredInBlob(),\n-                    fulltextDescriptor.getFulltextSearchDisabled()));\n+            log.debug(String.format(\"Database ready, fulltext: disabled=%b searchDisabled=%b.\",\n+                    fulltextDescriptor.getFulltextDisabled(), fulltextDescriptor.getFulltextSearchDisabled()));\n         }\n \n         return model;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNjM1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402906350", "bodyText": "Since 11.1.", "author": "troger", "createdAt": "2020-04-03T10:20:37Z", "path": "modules/core/nuxeo-core-storage/src/main/java/org/nuxeo/ecm/core/storage/FulltextDescriptor.java", "diffHunk": "@@ -111,10 +111,20 @@ public void setFulltextDisabled(boolean disabled) {\n         fulltextDisabled = Boolean.valueOf(disabled);\n     }\n \n+    private Boolean fulltextStoredInBlob;\n+\n+    public boolean getFulltextStoredInBlob() {\n+        return defaultFalse(fulltextStoredInBlob);\n+    }\n+\n+    public void setFulltextStoredInBlob(boolean storedInBlob) {", "originalCommit": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "chunk": "diff --git a/modules/core/nuxeo-core-storage/src/main/java/org/nuxeo/ecm/core/storage/FulltextDescriptor.java b/modules/core/nuxeo-core-storage/src/main/java/org/nuxeo/ecm/core/storage/FulltextDescriptor.java\nindex 9015e67231a..962bce77f17 100644\n--- a/modules/core/nuxeo-core-storage/src/main/java/org/nuxeo/ecm/core/storage/FulltextDescriptor.java\n+++ b/modules/core/nuxeo-core-storage/src/main/java/org/nuxeo/ecm/core/storage/FulltextDescriptor.java\n\n@@ -111,20 +111,10 @@ public class FulltextDescriptor {\n         fulltextDisabled = Boolean.valueOf(disabled);\n     }\n \n-    private Boolean fulltextStoredInBlob;\n-\n-    public boolean getFulltextStoredInBlob() {\n-        return defaultFalse(fulltextStoredInBlob);\n-    }\n-\n-    public void setFulltextStoredInBlob(boolean storedInBlob) {\n-        fulltextStoredInBlob = Boolean.valueOf(storedInBlob);\n-    }\n-\n     private Boolean fulltextSearchDisabled;\n \n     public boolean getFulltextSearchDisabled() {\n-        if (getFulltextDisabled() || getFulltextStoredInBlob()) {\n+        if (getFulltextDisabled()) {\n             return true;\n         }\n         return defaultFalse(fulltextSearchDisabled);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzM0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402907340", "bodyText": "Missing blank line?", "author": "troger", "createdAt": "2020-04-03T10:22:36Z", "path": "modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/FulltextStoredInBlobFeature.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.ecm.core.test;\n+\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RunnerFeature;\n+\n+public class FulltextStoredInBlobFeature implements RunnerFeature {\n+    private static final String KEY = \"nuxeo.test.fulltext.storedInBlob\";", "originalCommit": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "chunk": "diff --git a/modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/FulltextStoredInBlobFeature.java b/modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/FulltextStoredInBlobFeature.java\ndeleted file mode 100644\nindex 92f02689693..00000000000\n--- a/modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/FulltextStoredInBlobFeature.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Florent Guillaume\n- */\n-package org.nuxeo.ecm.core.test;\n-\n-import org.nuxeo.runtime.test.runner.FeaturesRunner;\n-import org.nuxeo.runtime.test.runner.RunnerFeature;\n-\n-public class FulltextStoredInBlobFeature implements RunnerFeature {\n-    private static final String KEY = \"nuxeo.test.fulltext.storedInBlob\";\n-\n-    private String flag;\n-\n-    @Override\n-    public void initialize(FeaturesRunner runner) {\n-        flag = System.setProperty(KEY, \"true\");\n-    }\n-\n-    @Override\n-    public void stop(FeaturesRunner runner) {\n-        if (flag == null) {\n-            System.clearProperty(KEY);\n-        } else {\n-            System.setProperty(KEY, flag);\n-        }\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzY0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402923645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(1, esRet.totalSize());\n          \n          \n            \n                    assertEquals(1, esRet.totalSize());\n          \n      \n    \n    \n  \n\nThere's another one in the class.", "author": "kevinleturc", "createdAt": "2020-04-03T10:54:54Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/TestFulltextStoredInBlob.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * (C) Copyright 2015-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Benoit Delbosc\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.elasticsearch.test;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.query.QueryParseException;\n+import org.nuxeo.ecm.core.test.FulltextStoredInBlobFeature;\n+import org.nuxeo.elasticsearch.query.NxQueryBuilder;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ FulltextStoredInBlobFeature.class, RepositoryElasticSearchFeature.class })\n+@Deploy(\"org.nuxeo.elasticsearch.core:elasticsearch-test-contrib.xml\")\n+public class TestFulltextStoredInBlob extends TestFulltextEnabled {\n+\n+    @Override\n+    @Test\n+    public void testFulltext() throws Exception {\n+        createFileWithBlob();\n+        // binary fulltext extraction is done\n+        String nxql = \"SELECT * FROM Document WHERE ecm:fulltext='search'\";\n+        DocumentModelList esRet = ess.query(new NxQueryBuilder(session).nxql(nxql));\n+        Assert.assertEquals(1, esRet.totalSize());", "originalCommit": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MjY4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402972682", "bodyText": "This class is actually essentially a copy of an existing one but you're right, I'll clean it up.", "author": "efge", "createdAt": "2020-04-03T12:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "chunk": "diff --git a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/TestFulltextStoredInBlob.java b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/TestFulltextStoredInBlob.java\ndeleted file mode 100644\nindex 99168672b5f..00000000000\n--- a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/TestFulltextStoredInBlob.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/*\n- * (C) Copyright 2015-2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Benoit Delbosc\n- *     Florent Guillaume\n- */\n-package org.nuxeo.elasticsearch.test;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentModelList;\n-import org.nuxeo.ecm.core.query.QueryParseException;\n-import org.nuxeo.ecm.core.test.FulltextStoredInBlobFeature;\n-import org.nuxeo.elasticsearch.query.NxQueryBuilder;\n-import org.nuxeo.runtime.test.runner.Deploy;\n-import org.nuxeo.runtime.test.runner.Features;\n-import org.nuxeo.runtime.test.runner.FeaturesRunner;\n-\n-@RunWith(FeaturesRunner.class)\n-@Features({ FulltextStoredInBlobFeature.class, RepositoryElasticSearchFeature.class })\n-@Deploy(\"org.nuxeo.elasticsearch.core:elasticsearch-test-contrib.xml\")\n-public class TestFulltextStoredInBlob extends TestFulltextEnabled {\n-\n-    @Override\n-    @Test\n-    public void testFulltext() throws Exception {\n-        createFileWithBlob();\n-        // binary fulltext extraction is done\n-        String nxql = \"SELECT * FROM Document WHERE ecm:fulltext='search'\";\n-        DocumentModelList esRet = ess.query(new NxQueryBuilder(session).nxql(nxql));\n-        Assert.assertEquals(1, esRet.totalSize());\n-\n-        // fulltext search with core is not allowed\n-        exception.expect(QueryParseException.class);\n-        session.query(nxql);\n-    }\n-\n-    @Override\n-    @Test\n-    public void testFulltextOnProxy() throws Exception {\n-        DocumentModel doc = createFileWithBlob();\n-        createSectionAndPublishFile(doc);\n-        // binary fulltext extraction is done\n-        String nxql = \"SELECT * FROM Document WHERE ecm:fulltext='search' AND ecm:isProxy = 1\";\n-        DocumentModelList esRet = ess.query(new NxQueryBuilder(session).nxql(nxql));\n-        Assert.assertEquals(1, esRet.totalSize());\n-\n-        // fulltext search with core is not allowed\n-        exception.expect(QueryParseException.class);\n-        session.query(nxql);\n-    }\n-\n-}\n"}}, {"oid": "be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "url": "https://github.com/nuxeo/nuxeo/commit/be8c5e5f9ab9b4d0abba77e3c0ff7189e7d5d84d", "message": "NXP-26704: move fulltext-related test features to nuxeo-core-test", "committedDate": "2020-04-03T12:36:41Z", "type": "commit"}, {"oid": "c607f41fc2814bec77380f1f9e8c49efa81673f5", "url": "https://github.com/nuxeo/nuxeo/commit/c607f41fc2814bec77380f1f9e8c49efa81673f5", "message": "NXP-26704: align internal property names in VCS and DBS, for simpler blob dispatcher config", "committedDate": "2020-04-03T12:36:41Z", "type": "commit"}, {"oid": "a19e2826ed843387ed1c586a95631cca82813a30", "url": "https://github.com/nuxeo/nuxeo/commit/a19e2826ed843387ed1c586a95631cca82813a30", "message": "NXP-26704: allow storing fulltext in blobs", "committedDate": "2020-04-03T12:36:41Z", "type": "commit"}, {"oid": "a19e2826ed843387ed1c586a95631cca82813a30", "url": "https://github.com/nuxeo/nuxeo/commit/a19e2826ed843387ed1c586a95631cca82813a30", "message": "NXP-26704: allow storing fulltext in blobs", "committedDate": "2020-04-03T12:36:41Z", "type": "forcePushed"}, {"oid": "b846e4ce35bb673096a7a357eb9859788a8d9b56", "url": "https://github.com/nuxeo/nuxeo/commit/b846e4ce35bb673096a7a357eb9859788a8d9b56", "message": "NXP-26704: use constant for binarytext key in map", "committedDate": "2020-04-03T12:57:58Z", "type": "commit"}]}