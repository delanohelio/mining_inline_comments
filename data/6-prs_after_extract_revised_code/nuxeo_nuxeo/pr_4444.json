{"pr_number": 4444, "pr_title": "NXP-29587: Scroller produces records downstream depending on a thres\u2026", "pr_createdAt": "2020-11-06T16:41:04Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4444", "timeline": [{"oid": "cdf3174a2286d338edaad5025e80e2f7b4bfe4b2", "url": "https://github.com/nuxeo/nuxeo/commit/cdf3174a2286d338edaad5025e80e2f7b4bfe4b2", "message": "NXP-29587: Scroller produces records downstream depending on a threshold\n\nIf the bulk scroller materialize more than 1m ids, records are sent\ndownstream to prevent a possible OOM.", "committedDate": "2020-11-06T16:41:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5MzkwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4444#discussion_r519693906", "bodyText": "This constant isn't used...", "author": "efge", "createdAt": "2020-11-09T10:14:07Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkAdminServiceImpl.java", "diffHunk": "@@ -47,6 +47,13 @@\n \n     public static final String BULK_SCROLL_PRODUCE_IMMEDIATE_PROPERTY = \"nuxeo.core.bulk.scroller.produceImmediate\";\n \n+    // @since 11.4\n+    public static final String BULK_SCROLL_PRODUCE_IMMEDIATE_THRESHOLD_PROPERTY = \"nuxeo.core.bulk.scroller.produceImmediateThreshold\";\n+\n+    // by default switch to produce immediate when there are more than 1m ids\n+    // @since 11.4\n+    public static final int DEFAULT_PRODUCE_IMMEDIATE_THRESHOLD_PROPERTY = 1_000_000;", "originalCommit": "cdf3174a2286d338edaad5025e80e2f7b4bfe4b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkxMzU1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4444#discussion_r519913550", "bodyText": "yes thanks, the pr has been reworked a bit to fix this and to flush accumulated records downstream when reaching the threshold avoiding a reordering of ids.", "author": "bdelbosc", "createdAt": "2020-11-09T15:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5MzkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "cc0e27e76576c943ba250f12becbbd0d23b237fa", "chunk": "diff --git a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkAdminServiceImpl.java b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkAdminServiceImpl.java\nindex 16d5bd68fe0..6baa8682670 100644\n--- a/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkAdminServiceImpl.java\n+++ b/modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkAdminServiceImpl.java\n\n@@ -52,7 +52,7 @@ public class BulkAdminServiceImpl implements BulkAdminService {\n \n     // by default switch to produce immediate when there are more than 1m ids\n     // @since 11.4\n-    public static final int DEFAULT_PRODUCE_IMMEDIATE_THRESHOLD_PROPERTY = 1_000_000;\n+    public static final int DEFAULT_PRODUCE_IMMEDIATE_THRESHOLD_PROPERTY = 2;\n \n     public static final int DEFAULT_SCROLL_SIZE = 100;\n \n"}}, {"oid": "cc0e27e76576c943ba250f12becbbd0d23b237fa", "url": "https://github.com/nuxeo/nuxeo/commit/cc0e27e76576c943ba250f12becbbd0d23b237fa", "message": "NXP-29587: Scroller produces records downstream depending on a threshold\n\nIf the bulk scroller materialize more than 1m ids, records are sent\ndownstream to prevent a possible OOM.", "committedDate": "2020-11-09T15:39:28Z", "type": "forcePushed"}, {"oid": "35d169e86307fe2d141b0846460a3ed05ee5d9f7", "url": "https://github.com/nuxeo/nuxeo/commit/35d169e86307fe2d141b0846460a3ed05ee5d9f7", "message": "NXP-29587: Scroller produces records downstream depending on a threshold\n\nIf the bulk scroller materialize more than 1m ids, records are sent\ndownstream to prevent a possible OOM.", "committedDate": "2020-11-09T15:40:53Z", "type": "commit"}, {"oid": "35d169e86307fe2d141b0846460a3ed05ee5d9f7", "url": "https://github.com/nuxeo/nuxeo/commit/35d169e86307fe2d141b0846460a3ed05ee5d9f7", "message": "NXP-29587: Scroller produces records downstream depending on a threshold\n\nIf the bulk scroller materialize more than 1m ids, records are sent\ndownstream to prevent a possible OOM.", "committedDate": "2020-11-09T15:40:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMTY3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4444#discussion_r519931678", "bodyText": "Isn't it worth considering a builder pattern, given the number of parameters that we now pass at construction?", "author": "efge", "createdAt": "2020-11-09T16:11:17Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -111,10 +114,18 @@ public BulkScrollerComputation(String name, int nbOutputStreams, int scrollBatch\n     // @since 11.2\n     public BulkScrollerComputation(String name, int nbOutputStreams, int scrollBatchSize, int scrollKeepAliveSeconds,\n             Duration transactionTimeout, boolean produceImmediate) {\n+        this(name, nbOutputStreams, scrollBatchSize, scrollKeepAliveSeconds, DEFAULT_SCROLL_TRANSACTION_TIMEOUT,\n+                produceImmediate, 0);\n+    }\n+\n+    // @since 11.4\n+    public BulkScrollerComputation(String name, int nbOutputStreams, int scrollBatchSize, int scrollKeepAliveSeconds,\n+            Duration transactionTimeout, boolean produceImmediate, int produceImmediateThreshold) {", "originalCommit": "35d169e86307fe2d141b0846460a3ed05ee5d9f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0ODM5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4444#discussion_r519948391", "bodyText": "maybe, but this constructor is only used in one place and is not intended to be used elsewhere", "author": "bdelbosc", "createdAt": "2020-11-09T16:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMTY3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNDQxMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4444#discussion_r519934411", "bodyText": "Can we put contextImpl.getRecords(actionStream) in a local variable or is the semantic wrong for that?", "author": "efge", "createdAt": "2020-11-09T16:15:04Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -272,17 +283,30 @@ protected void updateStatusAfterScroll(ComputationContext context, String comman\n     /**\n      * Produces a bucket as a record to appropriate bulk action stream.\n      */\n-    protected void produceBucket(ComputationContext context, String commandId, int bucketSize, long bucketNumber) {\n+    protected void produceBucket(ComputationContext context, String commandId, int bucketSize, long bucketNumber,\n+            long documentCount) {\n         List<String> ids = documentIds.subList(0, min(bucketSize, documentIds.size()));\n         BulkBucket bucket = new BulkBucket(commandId, ids);\n         String key = commandId + \":\" + Long.toString(bucketNumber);\n         Record record = Record.of(key, BulkCodecs.getBucketCodec().encode(bucket));\n-        if (produceImmediate) {\n-            ((ComputationContextImpl) context).produceRecordImmediate(actionStream, record);\n+        if (produceImmediate || (produceImmediateThreshold > 0 && documentCount > produceImmediateThreshold)) {\n+            ComputationContextImpl contextImpl = (ComputationContextImpl) context;\n+            if (!contextImpl.getRecords(actionStream).isEmpty()) {\n+                flushRecords(contextImpl, commandId);\n+            }\n+            contextImpl.produceRecordImmediate(actionStream, record);\n         } else {\n             context.produceRecord(actionStream, record);\n         }\n         ids.clear(); // this clear the documentIds part that has been sent\n     }\n \n+    protected void flushRecords(ComputationContextImpl contextImpl, String commandId) {\n+        log.warn(\"Scroller records threshold reached ({}) for action: {} on command: {}, flushing records downstream\",\n+                produceImmediateThreshold, actionStream, commandId);\n+        contextImpl.getRecords(actionStream)\n+                   .forEach(record -> contextImpl.produceRecordImmediate(actionStream, record));\n+        contextImpl.getRecords(actionStream).clear();", "originalCommit": "35d169e86307fe2d141b0846460a3ed05ee5d9f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MzAyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4444#discussion_r519953026", "bodyText": "we could will it be more readable not sure", "author": "bdelbosc", "createdAt": "2020-11-09T16:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNDQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2NTk1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4444#discussion_r519965955", "bodyText": "It is more readable, you're just not used to it \ud83d\ude00 With a local variable it's immediately clear that we're acting twice on the same object instead of re-doing a call to getRecords that may return different things... Which was a question I asked myself when I read this!", "author": "efge", "createdAt": "2020-11-09T16:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNDQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyMjM2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4444#discussion_r520122368", "bodyText": "Here, for the reasons I mentioned, the code would have been better with a local variable. Please don't ignore reviewer's comments and requests for changes.", "author": "efge", "createdAt": "2020-11-09T21:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNDQxMQ=="}], "type": "inlineReview", "revised_code": null}]}