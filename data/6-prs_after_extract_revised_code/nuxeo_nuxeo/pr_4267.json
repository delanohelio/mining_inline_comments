{"pr_number": 4267, "pr_title": "NXP-28474: add management endpoints", "pr_createdAt": "2020-08-19T13:27:07Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4267", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMDI0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473030245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(\"dummy data\", result);\n          \n          \n            \n                    assertTrue(result.contains(\"dummy data\"));\n          \n          \n            \n                    assertEquals(\"dummy data\", result);", "author": "kevinleturc", "createdAt": "2020-08-19T13:30:18Z", "path": "modules/platform/nuxeo-automation/nuxeo-automation-test/src/test/java/org/nuxeo/ecm/automation/core/context/TestHttpHelpers.java", "diffHunk": "@@ -87,49 +87,51 @@ protected String getBaseURL() {\n         int port = servletContainerFeature.getPort();\n         return \"http://localhost:\" + port;\n     }\n+\n     @Test\n     public void canUseHttpHelperGET() throws OperationException, IOException {\n         Map<String, Object> params = new HashMap<>();\n-        params.put(\"script\", \"Context.result = HTTP.call(\\\"Administrator\\\",\\\"Administrator\\\",\\\"GET\\\", \\\"\"\n-                + getBaseURL() + \"/api/v1/path/default-domain\\\");\");\n+        params.put(\"script\", \"Context.result = HTTP.call(\\\"Administrator\\\",\\\"Administrator\\\",\\\"GET\\\", \\\"\" + getBaseURL()\n+                + \"/dummy/string\\\");\");\n         automationService.run(ctx, \"RunScript\", params);\n         String result = ((Blob) ctx.get(\"result\")).getString();\n         assertNotEquals(\"Internal Server Error\", result);\n-        assertTrue(result.contains(\"entity-type\"));\n+        assertEquals(\"dummy\", result);\n     }\n \n     @Test\n     public void canUseHttpHelperPOST() throws OperationException, IOException {\n-        String data = \"{\\\"entity-type\\\": \\\"document\\\",\\\"type\\\": \\\"Workspace\\\",\\\"name\\\":\\\"newName\\\",\\\"properties\\\": {\\\"dc:title\\\":\\\"My title\\\",\\\"dc:description\\\":\\\" \\\"}}\";\n+        String data = \"dummy data\";\n         Map<String, String> headers = new HashMap<>();\n         headers.put(\"Content-type\", MediaType.APPLICATION_JSON);\n         Map<String, Object> params = new HashMap<>();\n         ctx.put(\"data\", data);\n         ctx.put(\"headers\", headers);\n         params.put(\"script\", \"Context.result = HTTP.call(\\\"Administrator\\\",\\\"Administrator\\\",\\\"POST\\\", \\\"\"\n-                + getBaseURL() + \"/api/v1/path/default-domain\\\", Context.data, Context.headers);\");\n+                + getBaseURL() + \"/dummy/post\\\", Context.data, Context.headers);\");\n         automationService.run(ctx, \"RunScript\", params);\n         String result = ((Blob) ctx.get(\"result\")).getString();\n         assertNotEquals(\"Internal Server Error\", result);\n-        assertTrue(result.contains(\"entity-type\"));\n+        assertEquals(\"dummy data\", result);\n+        assertTrue(result.contains(\"dummy data\"));", "originalCommit": "3f633a4dfa50a98cad04f3b61f2074019a333aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3f29a8ddc695745b2e9178115f4657ce3fc4917", "chunk": "diff --git a/modules/platform/nuxeo-automation/nuxeo-automation-test/src/test/java/org/nuxeo/ecm/automation/core/context/TestHttpHelpers.java b/modules/platform/nuxeo-automation/nuxeo-automation-test/src/test/java/org/nuxeo/ecm/automation/core/context/TestHttpHelpers.java\nindex fb36c87bcf5..5528bde7aef 100644\n--- a/modules/platform/nuxeo-automation/nuxeo-automation-test/src/test/java/org/nuxeo/ecm/automation/core/context/TestHttpHelpers.java\n+++ b/modules/platform/nuxeo-automation/nuxeo-automation-test/src/test/java/org/nuxeo/ecm/automation/core/context/TestHttpHelpers.java\n\n@@ -95,7 +95,6 @@ public class TestHttpHelpers {\n                 + \"/dummy/string\\\");\");\n         automationService.run(ctx, \"RunScript\", params);\n         String result = ((Blob) ctx.get(\"result\")).getString();\n-        assertNotEquals(\"Internal Server Error\", result);\n         assertEquals(\"dummy\", result);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNTU4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473035588", "bodyText": "What about throwing an exception instead of returning a Response? We have this pattern in the BulkObject.\nFurthermore, we recently saw an issue when using the Response pattern in JSONDocumentObject. The  Response has application/json as content type whereas the entity is a simple String.", "author": "kevinleturc", "createdAt": "2020-08-19T13:37:42Z", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/BinariesObject.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static javax.ws.rs.core.Response.Status.CONFLICT;\n+\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.nuxeo.ecm.core.blob.DocumentBlobManager;\n+import org.nuxeo.ecm.core.blob.binary.BinaryManagerStatus;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Endpoint to manage the binaries.\n+ *\n+ * @since 11.3\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"binaries\")\n+@Produces(APPLICATION_JSON)\n+public class BinariesObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    /**\n+     * Garbage collect the unused (orphaned) binaries.\n+     * \n+     * @return {@link BinaryManagerStatus} if no gc is in progress, otherwise a\n+     *         {@link javax.ws.rs.core.Response.Status#CONFLICT}\n+     */\n+    @DELETE\n+    @Path(\"orphaned\")\n+    public Response garbageCollectBinaries() {\n+        DocumentBlobManager documentBlobManager = Framework.getService(DocumentBlobManager.class);\n+\n+        if (!documentBlobManager.isBinariesGarbageCollectionInProgress()) {\n+            BinaryManagerStatus binaryManagerStatus = documentBlobManager.garbageCollectBinaries(true);\n+            return Response.ok(binaryManagerStatus).build();\n+        }\n+\n+        return Response.status(CONFLICT).build();\n+    }", "originalCommit": "46d0b7462fc6752424e76a030f5b56adc7cdd769", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3f29a8ddc695745b2e9178115f4657ce3fc4917", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/BinariesObject.java b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/BinariesObject.java\nindex f86ba2a038f..83f9c33481d 100644\n--- a/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/BinariesObject.java\n+++ b/modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/BinariesObject.java\n\n@@ -20,13 +20,13 @@\n package org.nuxeo.ecm.restapi.server.jaxrs.management;\n \n import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n-import static javax.ws.rs.core.Response.Status.CONFLICT;\n \n+import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n-import javax.ws.rs.core.Response;\n \n+import org.nuxeo.ecm.core.api.NuxeoException;\n import org.nuxeo.ecm.core.blob.DocumentBlobManager;\n import org.nuxeo.ecm.core.blob.binary.BinaryManagerStatus;\n import org.nuxeo.ecm.webengine.model.WebObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0Mzg0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473043841", "bodyText": "To remove?", "author": "kevinleturc", "createdAt": "2020-08-19T13:49:19Z", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/ManagementBAFTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_COMMAND_ID;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus.State;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+/**\n+ * @since 11.3\n+ */\n+public abstract class ManagementBAFTest extends ManagementBaseTest {", "originalCommit": "46d0b7462fc6752424e76a030f5b56adc7cdd769", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3f29a8ddc695745b2e9178115f4657ce3fc4917", "chunk": "diff --git a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/ManagementBAFTest.java b/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/ManagementBAFTest.java\ndeleted file mode 100644\nindex 8177b9e8b93..00000000000\n--- a/modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/ManagementBAFTest.java\n+++ /dev/null\n\n@@ -1,78 +0,0 @@\n-/*\n- * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Nour AL KOTOB\n- */\n-package org.nuxeo.ecm.restapi.server.jaxrs.management;\n-\n-import static javax.servlet.http.HttpServletResponse.SC_OK;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_COMMAND_ID;\n-\n-import java.io.IOException;\n-import java.time.Instant;\n-\n-import javax.inject.Inject;\n-import javax.ws.rs.core.MultivaluedMap;\n-\n-import org.nuxeo.ecm.core.bulk.message.BulkStatus.State;\n-import org.nuxeo.jaxrs.test.CloseableClientResponse;\n-import org.nuxeo.runtime.test.runner.TransactionalFeature;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-\n-/**\n- * @since 11.3\n- */\n-public abstract class ManagementBAFTest extends ManagementBaseTest {\n-\n-    protected static final String BULK_PATH = MANAGEMENT_PATH + \"bulk/\";\n-\n-    @Inject\n-    protected TransactionalFeature txFeature;\n-\n-    protected JsonNode runBulkAction(String path, MultivaluedMap<String, String> formData) throws IOException {\n-        String commandId;\n-        try (CloseableClientResponse response = httpClientRule.post(path, formData)) {\n-            JsonNode result = getOkBulkStatusAsJson(response);\n-            commandId = result.get(STATUS_COMMAND_ID).asText();\n-        }\n-        return waitAndSeeBAF(commandId);\n-    }\n-\n-    protected JsonNode waitAndSeeBAF(String commandId) throws IOException {\n-        // waiting for the asynchronous BAF task to finish\n-        txFeature.nextTransaction();\n-\n-        // checking the bulk action is completed\n-        try (CloseableClientResponse response = httpClientRule.get(BULK_PATH + commandId)) {\n-            JsonNode result = getOkBulkStatusAsJson(response);\n-            assertEquals(State.COMPLETED.name(), result.get(\"state\").asText());\n-            Instant completed = Instant.parse(result.get(\"completed\").asText());\n-            assertTrue(completed.isBefore(Instant.now()));\n-            assertNotNull(result.get(\"processingMillis\"));\n-            return result;\n-        }\n-    }\n-\n-    protected JsonNode getOkBulkStatusAsJson(CloseableClientResponse response) throws IOException {\n-        assertEquals(SC_OK, response.getStatus());\n-        return mapper.readTree(response.getEntityInputStream());\n-    }\n-\n-}\n"}}, {"oid": "e3f29a8ddc695745b2e9178115f4657ce3fc4917", "url": "https://github.com/nuxeo/nuxeo/commit/e3f29a8ddc695745b2e9178115f4657ce3fc4917", "message": "NXP-28474: add management endpoints", "committedDate": "2020-08-19T14:25:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Mzc4Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473063787", "bodyText": "shouldn't be in the cleanup / format commit since there is one ?", "author": "NourNuxeo", "createdAt": "2020-08-19T14:16:53Z", "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureBlobHolder.java", "diffHunk": "@@ -93,12 +88,14 @@ public void testBlobHolder() throws Exception {\n         DocumentModel picturebook = session.createDocumentModel(\"/\", \"picturebook\", PICTUREBOOK_TYPE_NAME);\n         session.createDocument(picturebook);\n         DocumentModel picture = session.createDocumentModel(picturebook.getPathAsString(), \"pic1\", PICTURE_TYPE_NAME);\n-        picture.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(\n-                getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null, \"mysample.jpg\"));\n+        picture.setPropertyValue(\"file:content\",\n+                (Serializable) Blobs.createBlob(getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null,\n+                        \"mysample.jpg\"));\n         picture = session.createDocument(picture);\n         DocumentModel picture2 = session.createDocumentModel(picturebook.getPathAsString(), \"pic2\", PICTURE_TYPE_NAME);\n-        picture2.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(\n-                getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null, \"mysample.jpg\"));\n+        picture2.setPropertyValue(\"file:content\",\n+                (Serializable) Blobs.createBlob(getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null,\n+                        \"mysample.jpg\"));", "originalCommit": "5abd74b2bbd8c8f3379182969250301e7ef4542c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4OTYwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473089601", "bodyText": "Yes, will do that on #4260 so :)", "author": "troger", "createdAt": "2020-08-19T14:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Mzc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5NzM3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473097379", "bodyText": "Done.", "author": "troger", "createdAt": "2020-08-19T15:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Mzc4Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "aed60d7309e606ddee15c2521fd2bc57c1c83a6c", "url": "https://github.com/nuxeo/nuxeo/commit/aed60d7309e606ddee15c2521fd2bc57c1c83a6c", "message": "NXP-28474: add imaging management endpoint", "committedDate": "2020-08-19T15:55:20Z", "type": "forcePushed"}, {"oid": "f8f76f90041769f8dd86862c9a8d5df45b7de40b", "url": "https://github.com/nuxeo/nuxeo/commit/f8f76f90041769f8dd86862c9a8d5df45b7de40b", "message": "NXP-28474: add elasticsearch management endpoint", "committedDate": "2020-08-19T16:59:59Z", "type": "forcePushed"}, {"oid": "614e3d906a262550d735aa2f3222c27c9cb5eaf8", "url": "https://github.com/nuxeo/nuxeo/commit/614e3d906a262550d735aa2f3222c27c9cb5eaf8", "message": "NXP-28474: add elasticsearch management endpoint", "committedDate": "2020-08-19T19:43:08Z", "type": "forcePushed"}, {"oid": "0e87cf8a36da78c8d4cb35be259106aa3f35d37e", "url": "https://github.com/nuxeo/nuxeo/commit/0e87cf8a36da78c8d4cb35be259106aa3f35d37e", "message": "NXP-28474: add elasticsearch management endpoint", "committedDate": "2020-08-20T09:07:41Z", "type": "forcePushed"}, {"oid": "171ad61d4e9c23f246a1c8eb5358e554360406fb", "url": "https://github.com/nuxeo/nuxeo/commit/171ad61d4e9c23f246a1c8eb5358e554360406fb", "message": "NXP-29535: make nuxeo-automation-test not depend on nuxeo-rest-api-server", "committedDate": "2020-08-20T09:12:59Z", "type": "commit"}, {"oid": "7f9cb8d7ad5862ef1296b2220cdd62183ba35f26", "url": "https://github.com/nuxeo/nuxeo/commit/7f9cb8d7ad5862ef1296b2220cdd62183ba35f26", "message": "NXP-28474: add elasticsearch management endpoint", "committedDate": "2020-08-20T09:13:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyOTQ5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473929495", "bodyText": "It should be higher in the import list.", "author": "kevinleturc", "createdAt": "2020-08-20T12:24:02Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/ServletContainerFeature.java", "diffHunk": "@@ -23,8 +23,11 @@\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.server.ServerComponent;\n \n+import static org.nuxeo.launcher.config.ConfigurationGenerator.PARAM_HTTP_PORT;", "originalCommit": "7f9cb8d7ad5862ef1296b2220cdd62183ba35f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40832ae1a5ec4608e27b7d68caa510669c20ec55", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/ServletContainerFeature.java b/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/ServletContainerFeature.java\nindex c35249779e9..f2646e77e13 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/ServletContainerFeature.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/ServletContainerFeature.java\n\n@@ -18,16 +18,15 @@\n  */\n package org.nuxeo.runtime.test.runner;\n \n+import static org.nuxeo.launcher.config.ConfigurationGenerator.PARAM_HTTP_PORT;\n+\n import java.io.IOException;\n import java.net.ServerSocket;\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.server.ServerComponent;\n \n-import static org.nuxeo.launcher.config.ConfigurationGenerator.PARAM_HTTP_PORT;\n-\n /**\n  * Runs an embedded servlet container.\n  */\n"}}, {"oid": "40832ae1a5ec4608e27b7d68caa510669c20ec55", "url": "https://github.com/nuxeo/nuxeo/commit/40832ae1a5ec4608e27b7d68caa510669c20ec55", "message": "NXP-28474: add elasticsearch management endpoint", "committedDate": "2020-08-20T13:47:35Z", "type": "forcePushed"}, {"oid": "96b62851dc63f79950f1c7d2320e056cb4e871b9", "url": "https://github.com/nuxeo/nuxeo/commit/96b62851dc63f79950f1c7d2320e056cb4e871b9", "message": "NXP-28474: add elasticsearch management endpoint", "committedDate": "2020-08-20T13:53:34Z", "type": "forcePushed"}, {"oid": "e5303ec275a97e9184e6bd0a7d1e307c4019526a", "url": "https://github.com/nuxeo/nuxeo/commit/e5303ec275a97e9184e6bd0a7d1e307c4019526a", "message": "NXP-28474: add elasticsearch management endpoint", "committedDate": "2020-08-21T09:49:01Z", "type": "forcePushed"}, {"oid": "e094520f41755418febf9a5d862ab4251736b5c9", "url": "https://github.com/nuxeo/nuxeo/commit/e094520f41755418febf9a5d862ab4251736b5c9", "message": "NXP-28474: add management endpoints", "committedDate": "2020-08-24T14:42:55Z", "type": "commit"}, {"oid": "bbf312634a895851d27e13020a2abb5a3baeea0f", "url": "https://github.com/nuxeo/nuxeo/commit/bbf312634a895851d27e13020a2abb5a3baeea0f", "message": "NXP-28474: add imaging management endpoint", "committedDate": "2020-08-24T14:42:55Z", "type": "commit"}, {"oid": "076f386b756a091a6deb75dd764e01cb7cc9139d", "url": "https://github.com/nuxeo/nuxeo/commit/076f386b756a091a6deb75dd764e01cb7cc9139d", "message": "NXP-28474: add elasticsearch management endpoint", "committedDate": "2020-08-24T14:42:55Z", "type": "commit"}, {"oid": "bb9567ab7a281561028c9d201de750a7591bf9bb", "url": "https://github.com/nuxeo/nuxeo/commit/bb9567ab7a281561028c9d201de750a7591bf9bb", "message": "NXP-28474: Change exception when parsing NXQL in DBS in order to be caught by BAF scroller", "committedDate": "2020-08-24T14:42:55Z", "type": "commit"}, {"oid": "bb9567ab7a281561028c9d201de750a7591bf9bb", "url": "https://github.com/nuxeo/nuxeo/commit/bb9567ab7a281561028c9d201de750a7591bf9bb", "message": "NXP-28474: Change exception when parsing NXQL in DBS in order to be caught by BAF scroller", "committedDate": "2020-08-24T14:42:55Z", "type": "forcePushed"}]}