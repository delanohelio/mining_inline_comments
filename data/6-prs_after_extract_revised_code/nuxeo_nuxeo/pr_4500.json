{"pr_number": 4500, "pr_title": "NXP-29815: add an endpoint to recompute video renditions", "pr_createdAt": "2020-12-01T14:51:02Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4500", "timeline": [{"oid": "930e8508482307bb4eba8e9fbdc2846b1fd90d2e", "url": "https://github.com/nuxeo/nuxeo/commit/930e8508482307bb4eba8e9fbdc2846b1fd90d2e", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-01T14:52:11Z", "type": "forcePushed"}, {"oid": "74967fa4e0781df710ee975a6522599209f986b5", "url": "https://github.com/nuxeo/nuxeo/commit/74967fa4e0781df710ee975a6522599209f986b5", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-03T13:06:25Z", "type": "forcePushed"}, {"oid": "274fb1db36130308caca65d25be80ef813110cc3", "url": "https://github.com/nuxeo/nuxeo/commit/274fb1db36130308caca65d25be80ef813110cc3", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-03T13:44:57Z", "type": "forcePushed"}, {"oid": "0235b9691f109e5945ba8f668a22f9e73c0b4246", "url": "https://github.com/nuxeo/nuxeo/commit/0235b9691f109e5945ba8f668a22f9e73c0b4246", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-07T09:23:15Z", "type": "forcePushed"}, {"oid": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "url": "https://github.com/nuxeo/nuxeo/commit/3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-08T09:40:32Z", "type": "forcePushed"}, {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "url": "https://github.com/nuxeo/nuxeo/commit/a7522df455603dbe82fedf2a23d2dd2a6286232a", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-09T14:02:46Z", "type": "forcePushed"}, {"oid": "546c26be19a84e2e1ce193fca771662957ee0008", "url": "https://github.com/nuxeo/nuxeo/commit/546c26be19a84e2e1ce193fca771662957ee0008", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-09T15:44:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMxNTYzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539315639", "bodyText": "You'll need to change all your since since we're now on the 11.5 track.", "author": "kevinleturc", "createdAt": "2020-12-09T13:42:52Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_XPATH;\n+\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+\n+/**\n+ * @since 11.4", "originalCommit": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java\ndeleted file mode 100644\nindex f6d05554612..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_CONVERSION_NAME;\n-import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_XPATH;\n-\n-import java.util.List;\n-\n-import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-\n-/**\n- * @since 11.4\n- */\n-public class RecomputeRenditionActionValidation extends AbstractBulkActionValidation {\n-\t@Override\n-\tprotected List<String> getParametersToValidate() {\n-\t\treturn List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n-\t}\n-\n-\t@Override\n-\tprotected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n-\t\tString xpath = command.getParam(PARAM_XPATH);\n-\t\tvalidateXpath(PARAM_XPATH, xpath, command);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyMDEzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539320137", "bodyText": "Could you validate that the conversion exists here? As it, unknown conversions will be rejected on command submission and therefore such error during processing will be avoided.", "author": "kevinleturc", "createdAt": "2020-12-09T13:48:50Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_XPATH;\n+\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+\n+/**\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionActionValidation extends AbstractBulkActionValidation {\n+\t@Override\n+\tprotected List<String> getParametersToValidate() {\n+\t\treturn List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+\t}\n+\n+\t@Override\n+\tprotected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\t\tString xpath = command.getParam(PARAM_XPATH);\n+\t\tvalidateXpath(PARAM_XPATH, xpath, command);\n+\t}", "originalCommit": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java\ndeleted file mode 100644\nindex f6d05554612..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_CONVERSION_NAME;\n-import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_XPATH;\n-\n-import java.util.List;\n-\n-import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-\n-/**\n- * @since 11.4\n- */\n-public class RecomputeRenditionActionValidation extends AbstractBulkActionValidation {\n-\t@Override\n-\tprotected List<String> getParametersToValidate() {\n-\t\treturn List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n-\t}\n-\n-\t@Override\n-\tprotected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n-\t\tString xpath = command.getParam(PARAM_XPATH);\n-\t\tvalidateXpath(PARAM_XPATH, xpath, command);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyMDkyNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539320924", "bodyText": "You're using tabs in this file, can you convert them to spaces?", "author": "kevinleturc", "createdAt": "2020-12-09T13:49:49Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {", "originalCommit": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\ndeleted file mode 100644\nindex f3d283849e3..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\n+++ /dev/null\n\n@@ -1,179 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoConstants;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described\n- * by the given xpath.\n- *\n- * @since 11.4\n- */\n-public class RecomputeRenditionsAction implements StreamProcessorTopology {\n-\n-\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n-\n-\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n-\n-\t// @since 11.4\n-\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-\tpublic static final String PARAM_XPATH = \"xpath\";\n-\n-\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n-\n-\t@Override\n-\tpublic Topology getTopology(Map<String, String> options) {\n-\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n-\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n-\t}\n-\n-\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n-\n-\t\tprotected String xpath;\n-\n-\t\tprotected String conversionName;\n-\n-\t\tpublic RecomputeRenditionsComputation() {\n-\t\t\tsuper(ACTION_FULL_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void startBucket(String bucketKey) {\n-\t\t\tBulkCommand command = getCurrentCommand();\n-\t\t\txpath = command.getParam(PARAM_XPATH);\n-\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n-\t\t\tfor (String docId : ids) {\n-\t\t\t\tif (!session.exists(new IdRef(docId))) {\n-\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n-\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n-\t\t\t\tif (blob == null) {\n-\t\t\t\t\t// do nothing\n-\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tString title = workingDocument.getTitle();\n-\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n-\t\t\t\t\tVideo video = videoDoc.getVideo();\n-\n-\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n-\n-\t\t\t\t\tif (\"*\".equals(conversionName)) {\n-\t\t\t\t\t\t// Recomputing all available renditions\n-\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Recomputing wanted renditions\n-\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition list\n-\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n-\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n-\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition\n-\t\t\t\t\t\t\tconversionNames.add(conversionName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (String conversion : conversionNames) {\n-\t\t\t\t\t\tconversionName = conversion;\n-\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n-\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n-\n-\t\t\t\t\t}\n-\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n-\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n-\t\t\t\t\tsession.saveDocument(workingDocument);\n-\t\t\t\t} catch (DocumentNotFoundException e) {\n-\t\t\t\t\t// a parent of the document may have been deleted.\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tif (workingDocument.isVersion()) {\n-\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-\t\t\t\t}\n-\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n-\t\t\t\tsession.saveDocument(workingDocument);\n-\n-\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-\t\t\t\tEvent event = ctx.newEvent(\"\");\n-\t\t\t\tFramework.getService(EventService.class).fireEvent(event);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM0MjczNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539342737", "bodyText": "recomputeRenditions looks a bit too generic to me, what about recomputeVideo or recomputeTranscodedVideo or recomputeVideoConversion?\nThe change should also be done to classes.", "author": "kevinleturc", "createdAt": "2020-12-09T14:17:52Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";", "originalCommit": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\ndeleted file mode 100644\nindex f3d283849e3..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\n+++ /dev/null\n\n@@ -1,179 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoConstants;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described\n- * by the given xpath.\n- *\n- * @since 11.4\n- */\n-public class RecomputeRenditionsAction implements StreamProcessorTopology {\n-\n-\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n-\n-\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n-\n-\t// @since 11.4\n-\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-\tpublic static final String PARAM_XPATH = \"xpath\";\n-\n-\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n-\n-\t@Override\n-\tpublic Topology getTopology(Map<String, String> options) {\n-\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n-\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n-\t}\n-\n-\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n-\n-\t\tprotected String xpath;\n-\n-\t\tprotected String conversionName;\n-\n-\t\tpublic RecomputeRenditionsComputation() {\n-\t\t\tsuper(ACTION_FULL_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void startBucket(String bucketKey) {\n-\t\t\tBulkCommand command = getCurrentCommand();\n-\t\t\txpath = command.getParam(PARAM_XPATH);\n-\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n-\t\t\tfor (String docId : ids) {\n-\t\t\t\tif (!session.exists(new IdRef(docId))) {\n-\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n-\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n-\t\t\t\tif (blob == null) {\n-\t\t\t\t\t// do nothing\n-\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tString title = workingDocument.getTitle();\n-\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n-\t\t\t\t\tVideo video = videoDoc.getVideo();\n-\n-\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n-\n-\t\t\t\t\tif (\"*\".equals(conversionName)) {\n-\t\t\t\t\t\t// Recomputing all available renditions\n-\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Recomputing wanted renditions\n-\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition list\n-\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n-\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n-\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition\n-\t\t\t\t\t\t\tconversionNames.add(conversionName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (String conversion : conversionNames) {\n-\t\t\t\t\t\tconversionName = conversion;\n-\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n-\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n-\n-\t\t\t\t\t}\n-\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n-\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n-\t\t\t\t\tsession.saveDocument(workingDocument);\n-\t\t\t\t} catch (DocumentNotFoundException e) {\n-\t\t\t\t\t// a parent of the document may have been deleted.\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tif (workingDocument.isVersion()) {\n-\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-\t\t\t\t}\n-\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n-\t\t\t\tsession.saveDocument(workingDocument);\n-\n-\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-\t\t\t\tEvent event = ctx.newEvent(\"\");\n-\t\t\t\tFramework.getService(EventService.class).fireEvent(event);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM5NzAxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539397013", "bodyText": "The conversionName parameter value should be a List like CSVProjectionComputation#PARAM_SCHEMAS to avoid splitting.\nThe empty list case should represent Compute all conversions case.", "author": "kevinleturc", "createdAt": "2020-12-09T15:21:53Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n+\t\t\t\t\tVideo video = videoDoc.getVideo();\n+\n+\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n+\n+\t\t\t\t\tif (\"*\".equals(conversionName)) {\n+\t\t\t\t\t\t// Recomputing all available renditions\n+\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// Recomputing wanted renditions\n+\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition list\n+\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n+\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n+\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition\n+\t\t\t\t\t\t\tconversionNames.add(conversionName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}", "originalCommit": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\ndeleted file mode 100644\nindex f3d283849e3..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\n+++ /dev/null\n\n@@ -1,179 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoConstants;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described\n- * by the given xpath.\n- *\n- * @since 11.4\n- */\n-public class RecomputeRenditionsAction implements StreamProcessorTopology {\n-\n-\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n-\n-\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n-\n-\t// @since 11.4\n-\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-\tpublic static final String PARAM_XPATH = \"xpath\";\n-\n-\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n-\n-\t@Override\n-\tpublic Topology getTopology(Map<String, String> options) {\n-\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n-\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n-\t}\n-\n-\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n-\n-\t\tprotected String xpath;\n-\n-\t\tprotected String conversionName;\n-\n-\t\tpublic RecomputeRenditionsComputation() {\n-\t\t\tsuper(ACTION_FULL_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void startBucket(String bucketKey) {\n-\t\t\tBulkCommand command = getCurrentCommand();\n-\t\t\txpath = command.getParam(PARAM_XPATH);\n-\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n-\t\t\tfor (String docId : ids) {\n-\t\t\t\tif (!session.exists(new IdRef(docId))) {\n-\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n-\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n-\t\t\t\tif (blob == null) {\n-\t\t\t\t\t// do nothing\n-\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tString title = workingDocument.getTitle();\n-\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n-\t\t\t\t\tVideo video = videoDoc.getVideo();\n-\n-\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n-\n-\t\t\t\t\tif (\"*\".equals(conversionName)) {\n-\t\t\t\t\t\t// Recomputing all available renditions\n-\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Recomputing wanted renditions\n-\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition list\n-\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n-\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n-\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition\n-\t\t\t\t\t\t\tconversionNames.add(conversionName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (String conversion : conversionNames) {\n-\t\t\t\t\t\tconversionName = conversion;\n-\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n-\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n-\n-\t\t\t\t\t}\n-\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n-\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n-\t\t\t\t\tsession.saveDocument(workingDocument);\n-\t\t\t\t} catch (DocumentNotFoundException e) {\n-\t\t\t\t\t// a parent of the document may have been deleted.\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tif (workingDocument.isVersion()) {\n-\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-\t\t\t\t}\n-\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n-\t\t\t\tsession.saveDocument(workingDocument);\n-\n-\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-\t\t\t\tEvent event = ctx.newEvent(\"\");\n-\t\t\t\tFramework.getService(EventService.class).fireEvent(event);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM5ODgxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539398812", "bodyText": "You could use the code below to avoid the Serializable cast on line 156:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n          \n          \n            \n            \t\t\t\tvar transcodedVideos = new ArrayList<Map<String, Serializable>>();", "author": "kevinleturc", "createdAt": "2020-12-09T15:23:56Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();", "originalCommit": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\ndeleted file mode 100644\nindex f3d283849e3..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\n+++ /dev/null\n\n@@ -1,179 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoConstants;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described\n- * by the given xpath.\n- *\n- * @since 11.4\n- */\n-public class RecomputeRenditionsAction implements StreamProcessorTopology {\n-\n-\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n-\n-\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n-\n-\t// @since 11.4\n-\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-\tpublic static final String PARAM_XPATH = \"xpath\";\n-\n-\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n-\n-\t@Override\n-\tpublic Topology getTopology(Map<String, String> options) {\n-\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n-\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n-\t}\n-\n-\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n-\n-\t\tprotected String xpath;\n-\n-\t\tprotected String conversionName;\n-\n-\t\tpublic RecomputeRenditionsComputation() {\n-\t\t\tsuper(ACTION_FULL_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void startBucket(String bucketKey) {\n-\t\t\tBulkCommand command = getCurrentCommand();\n-\t\t\txpath = command.getParam(PARAM_XPATH);\n-\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n-\t\t\tfor (String docId : ids) {\n-\t\t\t\tif (!session.exists(new IdRef(docId))) {\n-\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n-\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n-\t\t\t\tif (blob == null) {\n-\t\t\t\t\t// do nothing\n-\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tString title = workingDocument.getTitle();\n-\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n-\t\t\t\t\tVideo video = videoDoc.getVideo();\n-\n-\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n-\n-\t\t\t\t\tif (\"*\".equals(conversionName)) {\n-\t\t\t\t\t\t// Recomputing all available renditions\n-\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Recomputing wanted renditions\n-\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition list\n-\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n-\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n-\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition\n-\t\t\t\t\t\t\tconversionNames.add(conversionName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (String conversion : conversionNames) {\n-\t\t\t\t\t\tconversionName = conversion;\n-\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n-\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n-\n-\t\t\t\t\t}\n-\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n-\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n-\t\t\t\t\tsession.saveDocument(workingDocument);\n-\t\t\t\t} catch (DocumentNotFoundException e) {\n-\t\t\t\t\t// a parent of the document may have been deleted.\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tif (workingDocument.isVersion()) {\n-\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-\t\t\t\t}\n-\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n-\t\t\t\tsession.saveDocument(workingDocument);\n-\n-\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-\t\t\t\tEvent event = ctx.newEvent(\"\");\n-\t\t\t\tFramework.getService(EventService.class).fireEvent(event);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxMTg2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539411867", "bodyText": "As conversion could be very long on video, we need to commitOrRollback the transaction just before starting the conversion and start a new one after.", "author": "kevinleturc", "createdAt": "2020-12-09T15:39:01Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n+\t\t\t\t\tVideo video = videoDoc.getVideo();\n+\n+\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n+\n+\t\t\t\t\tif (\"*\".equals(conversionName)) {\n+\t\t\t\t\t\t// Recomputing all available renditions\n+\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// Recomputing wanted renditions\n+\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition list\n+\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n+\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n+\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition\n+\t\t\t\t\t\t\tconversionNames.add(conversionName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (String conversion : conversionNames) {\n+\t\t\t\t\t\tconversionName = conversion;\n+\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n+\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n+\n+\t\t\t\t\t}", "originalCommit": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\ndeleted file mode 100644\nindex f3d283849e3..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\n+++ /dev/null\n\n@@ -1,179 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoConstants;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described\n- * by the given xpath.\n- *\n- * @since 11.4\n- */\n-public class RecomputeRenditionsAction implements StreamProcessorTopology {\n-\n-\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n-\n-\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n-\n-\t// @since 11.4\n-\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-\tpublic static final String PARAM_XPATH = \"xpath\";\n-\n-\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n-\n-\t@Override\n-\tpublic Topology getTopology(Map<String, String> options) {\n-\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n-\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n-\t}\n-\n-\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n-\n-\t\tprotected String xpath;\n-\n-\t\tprotected String conversionName;\n-\n-\t\tpublic RecomputeRenditionsComputation() {\n-\t\t\tsuper(ACTION_FULL_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void startBucket(String bucketKey) {\n-\t\t\tBulkCommand command = getCurrentCommand();\n-\t\t\txpath = command.getParam(PARAM_XPATH);\n-\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n-\t\t\tfor (String docId : ids) {\n-\t\t\t\tif (!session.exists(new IdRef(docId))) {\n-\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n-\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n-\t\t\t\tif (blob == null) {\n-\t\t\t\t\t// do nothing\n-\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tString title = workingDocument.getTitle();\n-\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n-\t\t\t\t\tVideo video = videoDoc.getVideo();\n-\n-\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n-\n-\t\t\t\t\tif (\"*\".equals(conversionName)) {\n-\t\t\t\t\t\t// Recomputing all available renditions\n-\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Recomputing wanted renditions\n-\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition list\n-\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n-\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n-\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition\n-\t\t\t\t\t\t\tconversionNames.add(conversionName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (String conversion : conversionNames) {\n-\t\t\t\t\t\tconversionName = conversion;\n-\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n-\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n-\n-\t\t\t\t\t}\n-\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n-\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n-\t\t\t\t\tsession.saveDocument(workingDocument);\n-\t\t\t\t} catch (DocumentNotFoundException e) {\n-\t\t\t\t\t// a parent of the document may have been deleted.\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tif (workingDocument.isVersion()) {\n-\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-\t\t\t\t}\n-\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n-\t\t\t\tsession.saveDocument(workingDocument);\n-\n-\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-\t\t\t\tEvent event = ctx.newEvent(\"\");\n-\t\t\t\tFramework.getService(EventService.class).fireEvent(event);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxMzcyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539413723", "bodyText": "I didn't find any relevant events to fire, you can delete this part.", "author": "kevinleturc", "createdAt": "2020-12-09T15:41:06Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n+\t\t\t\t\tVideo video = videoDoc.getVideo();\n+\n+\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n+\n+\t\t\t\t\tif (\"*\".equals(conversionName)) {\n+\t\t\t\t\t\t// Recomputing all available renditions\n+\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// Recomputing wanted renditions\n+\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition list\n+\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n+\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n+\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition\n+\t\t\t\t\t\t\tconversionNames.add(conversionName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (String conversion : conversionNames) {\n+\t\t\t\t\t\tconversionName = conversion;\n+\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n+\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n+\n+\t\t\t\t\t}\n+\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n+\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n+\t\t\t\t\tsession.saveDocument(workingDocument);\n+\t\t\t\t} catch (DocumentNotFoundException e) {\n+\t\t\t\t\t// a parent of the document may have been deleted.\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (workingDocument.isVersion()) {\n+\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+\t\t\t\t}\n+\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n+\t\t\t\tsession.saveDocument(workingDocument);\n+\n+\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n+\t\t\t\tEvent event = ctx.newEvent(\"\");\n+\t\t\t\tFramework.getService(EventService.class).fireEvent(event);", "originalCommit": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\ndeleted file mode 100644\nindex f3d283849e3..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\n+++ /dev/null\n\n@@ -1,179 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoConstants;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described\n- * by the given xpath.\n- *\n- * @since 11.4\n- */\n-public class RecomputeRenditionsAction implements StreamProcessorTopology {\n-\n-\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n-\n-\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n-\n-\t// @since 11.4\n-\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-\tpublic static final String PARAM_XPATH = \"xpath\";\n-\n-\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n-\n-\t@Override\n-\tpublic Topology getTopology(Map<String, String> options) {\n-\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n-\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n-\t}\n-\n-\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n-\n-\t\tprotected String xpath;\n-\n-\t\tprotected String conversionName;\n-\n-\t\tpublic RecomputeRenditionsComputation() {\n-\t\t\tsuper(ACTION_FULL_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void startBucket(String bucketKey) {\n-\t\t\tBulkCommand command = getCurrentCommand();\n-\t\t\txpath = command.getParam(PARAM_XPATH);\n-\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n-\t\t\tfor (String docId : ids) {\n-\t\t\t\tif (!session.exists(new IdRef(docId))) {\n-\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n-\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n-\t\t\t\tif (blob == null) {\n-\t\t\t\t\t// do nothing\n-\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tString title = workingDocument.getTitle();\n-\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n-\t\t\t\t\tVideo video = videoDoc.getVideo();\n-\n-\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n-\n-\t\t\t\t\tif (\"*\".equals(conversionName)) {\n-\t\t\t\t\t\t// Recomputing all available renditions\n-\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Recomputing wanted renditions\n-\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition list\n-\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n-\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n-\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition\n-\t\t\t\t\t\t\tconversionNames.add(conversionName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (String conversion : conversionNames) {\n-\t\t\t\t\t\tconversionName = conversion;\n-\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n-\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n-\n-\t\t\t\t\t}\n-\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n-\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n-\t\t\t\t\tsession.saveDocument(workingDocument);\n-\t\t\t\t} catch (DocumentNotFoundException e) {\n-\t\t\t\t\t// a parent of the document may have been deleted.\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tif (workingDocument.isVersion()) {\n-\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-\t\t\t\t}\n-\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n-\t\t\t\tsession.saveDocument(workingDocument);\n-\n-\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-\t\t\t\tEvent event = ctx.newEvent(\"\");\n-\t\t\t\tFramework.getService(EventService.class).fireEvent(event);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNDcxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539414712", "bodyText": "To delete?", "author": "kevinleturc", "createdAt": "2020-12-09T15:42:10Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n+\t\t\t\t\tVideo video = videoDoc.getVideo();\n+\n+\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n+\n+\t\t\t\t\tif (\"*\".equals(conversionName)) {\n+\t\t\t\t\t\t// Recomputing all available renditions\n+\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// Recomputing wanted renditions\n+\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition list\n+\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n+\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n+\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition\n+\t\t\t\t\t\t\tconversionNames.add(conversionName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (String conversion : conversionNames) {\n+\t\t\t\t\t\tconversionName = conversion;\n+\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n+\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n+\n+\t\t\t\t\t}\n+\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n+\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n+\t\t\t\t\tsession.saveDocument(workingDocument);\n+\t\t\t\t} catch (DocumentNotFoundException e) {\n+\t\t\t\t\t// a parent of the document may have been deleted.\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (workingDocument.isVersion()) {\n+\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+\t\t\t\t}\n+\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);", "originalCommit": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\ndeleted file mode 100644\nindex f3d283849e3..00000000000\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java\n+++ /dev/null\n\n@@ -1,179 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoConstants;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described\n- * by the given xpath.\n- *\n- * @since 11.4\n- */\n-public class RecomputeRenditionsAction implements StreamProcessorTopology {\n-\n-\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n-\n-\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n-\n-\t// @since 11.4\n-\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-\tpublic static final String PARAM_XPATH = \"xpath\";\n-\n-\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n-\n-\t@Override\n-\tpublic Topology getTopology(Map<String, String> options) {\n-\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n-\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n-\t}\n-\n-\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n-\n-\t\tprotected String xpath;\n-\n-\t\tprotected String conversionName;\n-\n-\t\tpublic RecomputeRenditionsComputation() {\n-\t\t\tsuper(ACTION_FULL_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void startBucket(String bucketKey) {\n-\t\t\tBulkCommand command = getCurrentCommand();\n-\t\t\txpath = command.getParam(PARAM_XPATH);\n-\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n-\t\t\tfor (String docId : ids) {\n-\t\t\t\tif (!session.exists(new IdRef(docId))) {\n-\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n-\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n-\t\t\t\tif (blob == null) {\n-\t\t\t\t\t// do nothing\n-\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tString title = workingDocument.getTitle();\n-\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n-\t\t\t\t\tVideo video = videoDoc.getVideo();\n-\n-\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n-\n-\t\t\t\t\tif (\"*\".equals(conversionName)) {\n-\t\t\t\t\t\t// Recomputing all available renditions\n-\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Recomputing wanted renditions\n-\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition list\n-\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n-\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n-\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// Recomputing a specific rendition\n-\t\t\t\t\t\t\tconversionNames.add(conversionName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (String conversion : conversionNames) {\n-\t\t\t\t\t\tconversionName = conversion;\n-\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n-\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n-\n-\t\t\t\t\t}\n-\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n-\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n-\t\t\t\t\tsession.saveDocument(workingDocument);\n-\t\t\t\t} catch (DocumentNotFoundException e) {\n-\t\t\t\t\t// a parent of the document may have been deleted.\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tif (workingDocument.isVersion()) {\n-\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-\t\t\t\t}\n-\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n-\t\t\t\tsession.saveDocument(workingDocument);\n-\n-\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-\t\t\t\tEvent event = ctx.newEvent(\"\");\n-\t\t\t\tFramework.getService(EventService.class).fireEvent(event);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMzI5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539423297", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Path(\"recompute/{conversionName}/\")\n          \n          \n            \n            \t@Path(\"recompute/{conversionName}\")", "author": "kevinleturc", "createdAt": "2020-12-09T15:51:55Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+\tpublic static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\n+\tpublic static final String VIDEOS_DEFAULT_CONVERSION = \"*\";\n+\n+\t/**\n+\t * Recomputes video renditions for the documents matching the given query or\n+\t * {@link #VIDEOS_DEFAULT_QUERY} if not provided.\n+\t *\n+\t * @param query a custom query to specify which videos should be processed\n+\t * @return the {@link BulkStatus} of the command\n+\t */\n+\t@POST\n+\t@Path(\"recompute/{conversionName}/\")", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 9bd0018181a..d7159cf11c3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -21,17 +21,20 @@ package org.nuxeo.ecm.restapi.server.jaxrs.management;\n import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n \n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n import javax.ws.rs.FormParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n \n import org.apache.commons.lang3.StringUtils;\n import org.nuxeo.ecm.core.bulk.BulkService;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n-import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n import org.nuxeo.ecm.webengine.model.WebObject;\n import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMzQ0Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539423446", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Path(\"recompute/\")\n          \n          \n            \n            \t@Path(\"recompute\")", "author": "kevinleturc", "createdAt": "2020-12-09T15:52:04Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+\tpublic static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\n+\tpublic static final String VIDEOS_DEFAULT_CONVERSION = \"*\";\n+\n+\t/**\n+\t * Recomputes video renditions for the documents matching the given query or\n+\t * {@link #VIDEOS_DEFAULT_QUERY} if not provided.\n+\t *\n+\t * @param query a custom query to specify which videos should be processed\n+\t * @return the {@link BulkStatus} of the command\n+\t */\n+\t@POST\n+\t@Path(\"recompute/{conversionName}/\")\n+\tpublic BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+\t\t\t@PathParam(\"conversionName\") String conversionName) {\n+\t\tString finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n+\t\tString finalConversions = StringUtils.defaultIfBlank(conversionName, VIDEOS_DEFAULT_CONVERSION);\n+\t\tBulkService bulkService = Framework.getService(BulkService.class);\n+\t\tString commandId = bulkService\n+\t\t\t\t.submit(new BulkCommand.Builder(RecomputeRenditionsAction.ACTION_NAME, finalQuery, SYSTEM_USERNAME)\n+\t\t\t\t\t\t.repository(ctx.getCoreSession().getRepositoryName())\n+\t\t\t\t\t\t.param(RecomputeRenditionsAction.PARAM_XPATH, \"file:content\")\n+\t\t\t\t\t\t.param(RecomputeRenditionsAction.PARAM_CONVERSION_NAME, finalConversions).build());\n+\t\treturn bulkService.getStatus(commandId);\n+\t}\n+\n+\t@POST\n+\t@Path(\"recompute/\")", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 9bd0018181a..d7159cf11c3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -21,17 +21,20 @@ package org.nuxeo.ecm.restapi.server.jaxrs.management;\n import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n \n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n import javax.ws.rs.FormParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n \n import org.apache.commons.lang3.StringUtils;\n import org.nuxeo.ecm.core.bulk.BulkService;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n-import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n import org.nuxeo.ecm.webengine.model.WebObject;\n import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNjYyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539426620", "bodyText": "PathParam should be a FormParam and you can use a List<String> as type.", "author": "kevinleturc", "createdAt": "2020-12-09T15:55:39Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+\tpublic static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\n+\tpublic static final String VIDEOS_DEFAULT_CONVERSION = \"*\";\n+\n+\t/**\n+\t * Recomputes video renditions for the documents matching the given query or\n+\t * {@link #VIDEOS_DEFAULT_QUERY} if not provided.\n+\t *\n+\t * @param query a custom query to specify which videos should be processed\n+\t * @return the {@link BulkStatus} of the command\n+\t */\n+\t@POST\n+\t@Path(\"recompute/{conversionName}/\")\n+\tpublic BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+\t\t\t@PathParam(\"conversionName\") String conversionName) {", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 9bd0018181a..d7159cf11c3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -21,17 +21,20 @@ package org.nuxeo.ecm.restapi.server.jaxrs.management;\n import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n \n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n import javax.ws.rs.FormParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n \n import org.apache.commons.lang3.StringUtils;\n import org.nuxeo.ecm.core.bulk.BulkService;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n-import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n import org.nuxeo.ecm.webengine.model.WebObject;\n import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNjk0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539426947", "bodyText": "Format/indentation issue.", "author": "kevinleturc", "createdAt": "2020-12-09T15:56:02Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+\tpublic static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\n+\tpublic static final String VIDEOS_DEFAULT_CONVERSION = \"*\";\n+\n+\t/**\n+\t * Recomputes video renditions for the documents matching the given query or\n+\t * {@link #VIDEOS_DEFAULT_QUERY} if not provided.\n+\t *\n+\t * @param query a custom query to specify which videos should be processed\n+\t * @return the {@link BulkStatus} of the command\n+\t */\n+\t@POST\n+\t@Path(\"recompute/{conversionName}/\")\n+\tpublic BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+\t\t\t@PathParam(\"conversionName\") String conversionName) {\n+\t\tString finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n+\t\tString finalConversions = StringUtils.defaultIfBlank(conversionName, VIDEOS_DEFAULT_CONVERSION);\n+\t\tBulkService bulkService = Framework.getService(BulkService.class);\n+\t\tString commandId = bulkService\n+\t\t\t\t.submit(new BulkCommand.Builder(RecomputeRenditionsAction.ACTION_NAME, finalQuery, SYSTEM_USERNAME)\n+\t\t\t\t\t\t.repository(ctx.getCoreSession().getRepositoryName())\n+\t\t\t\t\t\t.param(RecomputeRenditionsAction.PARAM_XPATH, \"file:content\")\n+\t\t\t\t\t\t.param(RecomputeRenditionsAction.PARAM_CONVERSION_NAME, finalConversions).build());\n+\t\treturn bulkService.getStatus(commandId);", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 9bd0018181a..d7159cf11c3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -21,17 +21,20 @@ package org.nuxeo.ecm.restapi.server.jaxrs.management;\n import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n \n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n import javax.ws.rs.FormParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n \n import org.apache.commons.lang3.StringUtils;\n import org.nuxeo.ecm.core.bulk.BulkService;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n-import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n import org.nuxeo.ecm.webengine.model.WebObject;\n import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyODgyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539428822", "bodyText": "To remove?", "author": "kevinleturc", "createdAt": "2020-12-09T15:58:06Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex 786320ae812..e4e22311e07 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -19,6 +19,7 @@\n \n package org.nuxeo.ecm.restapi.server.jaxrs.management;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzMDc4NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539430785", "bodyText": "Extra space.", "author": "kevinleturc", "createdAt": "2020-12-09T16:00:21Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+\t@Inject\n+\tprotected CoreSession session;\n+\n+\tprotected DocumentRef docRef;\n+\n+\t@Before\n+\tpublic void createDocument() throws IOException {\n+\n+\t\tDocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+\t\tBlob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+\t\t\t\tStandardCharsets.UTF_8.name(), \"video.mpg\");\n+\t\tdoc.setPropertyValue(\"file:content\", (Serializable) blob);\n+\t\tdoc = session.createDocument(doc);\n+\t\ttxFeature.nextTransaction();\n+\t\tdoc = session.getDocument(doc.getRef());\n+\t\tdocRef = doc.getRef();\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosNoQuery() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 3);\n+\t}\n+\n+", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex 786320ae812..e4e22311e07 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -19,6 +19,7 @@\n \n package org.nuxeo.ecm.restapi.server.jaxrs.management;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzMTUxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539431512", "bodyText": "This file contains also tabs, could you check all files in this PR to remove tabs?", "author": "kevinleturc", "createdAt": "2020-12-09T16:01:13Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex 786320ae812..e4e22311e07 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -19,6 +19,7 @@\n \n package org.nuxeo.ecm.restapi.server.jaxrs.management;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0MDE3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539440178", "bodyText": "expectedRenditions should be a List or a String to improve readability.", "author": "kevinleturc", "createdAt": "2020-12-09T16:11:40Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+\t@Inject\n+\tprotected CoreSession session;\n+\n+\tprotected DocumentRef docRef;\n+\n+\t@Before\n+\tpublic void createDocument() throws IOException {\n+\n+\t\tDocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+\t\tBlob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+\t\t\t\tStandardCharsets.UTF_8.name(), \"video.mpg\");\n+\t\tdoc.setPropertyValue(\"file:content\", (Serializable) blob);\n+\t\tdoc = session.createDocument(doc);\n+\t\ttxFeature.nextTransaction();\n+\t\tdoc = session.getDocument(doc.getRef());\n+\t\tdocRef = doc.getRef();\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosNoQuery() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 3);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testRecomputeVideosValidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\t\tdoTestRecomputeVideos(query, true, 3);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRendition() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 1);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRenditionsList() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 2);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosInvalidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM nowhere\";\n+\t\tdoTestRecomputeVideos(query, false, 0);\n+\t}\n+\n+\tprotected void doTestRecomputeVideos(String query, boolean success, int expectedRenditions) throws IOException {", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex 786320ae812..e4e22311e07 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -19,6 +19,7 @@\n \n package org.nuxeo.ecm.restapi.server.jaxrs.management;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0OTA1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539449051", "bodyText": "It should be next to its initialization.", "author": "kevinleturc", "createdAt": "2020-12-09T16:22:09Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+\t@Inject\n+\tprotected CoreSession session;\n+\n+\tprotected DocumentRef docRef;\n+\n+\t@Before\n+\tpublic void createDocument() throws IOException {\n+\n+\t\tDocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+\t\tBlob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+\t\t\t\tStandardCharsets.UTF_8.name(), \"video.mpg\");\n+\t\tdoc.setPropertyValue(\"file:content\", (Serializable) blob);\n+\t\tdoc = session.createDocument(doc);\n+\t\ttxFeature.nextTransaction();\n+\t\tdoc = session.getDocument(doc.getRef());\n+\t\tdocRef = doc.getRef();\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosNoQuery() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 3);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testRecomputeVideosValidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\t\tdoTestRecomputeVideos(query, true, 3);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRendition() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 1);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRenditionsList() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 2);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosInvalidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM nowhere\";\n+\t\tdoTestRecomputeVideos(query, false, 0);\n+\t}\n+\n+\tprotected void doTestRecomputeVideos(String query, boolean success, int expectedRenditions) throws IOException {\n+\n+\t\t// Test there is no already generated renditions\n+\t\tDocumentModel doc = session.getDocument(docRef);\n+\t\tList<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc\n+\t\t\t\t.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+\t\tassertTrue(transcodedVideos.isEmpty());\n+\n+\t\t// generating new video renditions\n+\t\tMultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\t\tif (query != null) {\n+\t\t\tformData.add(\"query\", query);\n+\t\t}\n+\t\tString commandId;", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex 786320ae812..e4e22311e07 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -19,6 +19,7 @@\n \n package org.nuxeo.ecm.restapi.server.jaxrs.management;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1MTk5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539451999", "bodyText": "Could you add the conversion doesn't exist case?", "author": "kevinleturc", "createdAt": "2020-12-09T16:25:38Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+\t@Inject\n+\tprotected CoreSession session;\n+\n+\tprotected DocumentRef docRef;\n+\n+\t@Before\n+\tpublic void createDocument() throws IOException {\n+\n+\t\tDocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+\t\tBlob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+\t\t\t\tStandardCharsets.UTF_8.name(), \"video.mpg\");\n+\t\tdoc.setPropertyValue(\"file:content\", (Serializable) blob);\n+\t\tdoc = session.createDocument(doc);\n+\t\ttxFeature.nextTransaction();\n+\t\tdoc = session.getDocument(doc.getRef());\n+\t\tdocRef = doc.getRef();\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosNoQuery() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 3);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testRecomputeVideosValidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\t\tdoTestRecomputeVideos(query, true, 3);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRendition() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 1);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRenditionsList() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 2);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosInvalidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM nowhere\";\n+\t\tdoTestRecomputeVideos(query, false, 0);\n+\t}\n+\n+\tprotected void doTestRecomputeVideos(String query, boolean success, int expectedRenditions) throws IOException {\n+\n+\t\t// Test there is no already generated renditions\n+\t\tDocumentModel doc = session.getDocument(docRef);\n+\t\tList<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc\n+\t\t\t\t.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+\t\tassertTrue(transcodedVideos.isEmpty());\n+\n+\t\t// generating new video renditions\n+\t\tMultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\t\tif (query != null) {\n+\t\t\tformData.add(\"query\", query);\n+\t\t}\n+\t\tString commandId;\n+\t\tString post = \"/management/videos/recompute/\";\n+\t\tswitch (expectedRenditions) {\n+\t\tcase 1:\n+\t\t\t// Recompute only the WebM rendition to test the conversionName parameter\n+\t\t\tpost += \"WebM 480p\";\n+\t\t\tbreak;\n+\t\tcase 2:\n+\t\t\t// Recompute the WebM and MP4 renditions to test a list a converters\n+\t\t\tpost += \"WebM 480p-MP4 480p\";\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\t// Recompute all renditions to test the wildcard\n+\t\t\tpost += \"*\";\n+\t\t\tbreak;\n+\t\t}\n+\t\tpost += \"/\";\n+\t\ttry (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+\t\t\tassertEquals(SC_OK, response.getStatus());\n+\t\t\tJsonNode node = mapper.readTree(response.getEntityInputStream());\n+\t\t\tassertBulkStatusScheduled(node);\n+\t\t\tcommandId = getBulkCommandId(node);\n+\t\t}\n+\n+\t\t// waiting for the asynchronous video renditions recompute task\n+\t\ttxFeature.nextTransaction();\n+\n+\t\ttry (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+\t\t\tJsonNode node = mapper.readTree(response.getEntityInputStream());\n+\t\t\tassertEquals(SC_OK, response.getStatus());\n+\n+\t\t\tassertBulkStatusCompleted(node);\n+\t\t\tdoc = session.getDocument(docRef);\n+\n+\t\t\ttranscodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+\t\t\tassertNotNull(transcodedVideos);\n+\t\t\tif (success) {\n+\t\t\t\tassertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+\t\t\t\tassertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+\t\t\t\tassertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+\t\t\t\tassertEquals(1, node.get(STATUS_TOTAL).asInt());\n+\t\t\t\tassertEquals(expectedRenditions, transcodedVideos.size());\n+\t\t\t\tswitch (expectedRenditions) {\n+\t\t\t\tcase 1:\n+\t\t\t\t\tassertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 2:\n+\t\t\t\t\tassertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\t\t\t\t\tassertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tassertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\t\t\t\t\tassertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+\t\t\t\t\tassertEquals(\"Ogg 480p\", transcodedVideos.get(2).get(\"name\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tassertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+\t\t\t\tassertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+\t\t\t\tassertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+\t\t\t\tassertEquals(0, node.get(STATUS_TOTAL).asInt());\n+\t\t\t\tassertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+\n+\t\t\t\tassertTrue(transcodedVideos.isEmpty());", "originalCommit": "546c26be19a84e2e1ce193fca771662957ee0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98aea378ae4747b3e9636debb934cfb77baa2b47", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex 786320ae812..e4e22311e07 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -19,6 +19,7 @@\n \n package org.nuxeo.ecm.restapi.server.jaxrs.management;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n"}}, {"oid": "98aea378ae4747b3e9636debb934cfb77baa2b47", "url": "https://github.com/nuxeo/nuxeo/commit/98aea378ae4747b3e9636debb934cfb77baa2b47", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-14T16:42:50Z", "type": "forcePushed"}, {"oid": "cda665a4d5d9a715c9b327f91baa16468e2b3fc9", "url": "https://github.com/nuxeo/nuxeo/commit/cda665a4d5d9a715c9b327f91baa16468e2b3fc9", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-14T16:47:02Z", "type": "forcePushed"}, {"oid": "9680ad7592bed5581e47170b58cea86fcb11c77b", "url": "https://github.com/nuxeo/nuxeo/commit/9680ad7592bed5581e47170b58cea86fcb11c77b", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-15T09:17:46Z", "type": "forcePushed"}, {"oid": "dc13e88b0e88c1ea09674ada802f866235a7c5b8", "url": "https://github.com/nuxeo/nuxeo/commit/dc13e88b0e88c1ea09674ada802f866235a7c5b8", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-17T16:23:12Z", "type": "forcePushed"}, {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "url": "https://github.com/nuxeo/nuxeo/commit/fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2020-12-18T08:48:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0NjA1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r545946051", "bodyText": "This is independent of the document, you could put this outside of the loop.\nstartBucket method looks like a good candidate to put this code.\nNote: you can put the service in a field as it is done in AutomationComputation.", "author": "kevinleturc", "createdAt": "2020-12-18T16:29:22Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 93893ee48ed..1c5042486b5 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,6 +87,10 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n         public RecomputeRenditionsComputation() {\n             super(ACTION_FULL_NAME);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMjQ5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546602498", "bodyText": "It shouldn't be needed as we're saving the renditions one by one.\nFurthermore, you should put the same context data in the saveRendition method.", "author": "kevinleturc", "createdAt": "2020-12-21T09:37:20Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 93893ee48ed..1c5042486b5 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,6 +87,10 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n         public RecomputeRenditionsComputation() {\n             super(ACTION_FULL_NAME);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMzIzNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546603235", "bodyText": "You could use var to declare transcodedVideos .", "author": "kevinleturc", "createdAt": "2020-12-21T09:39:00Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(DocumentModel doc, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 93893ee48ed..1c5042486b5 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,6 +87,10 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n         public RecomputeRenditionsComputation() {\n             super(ACTION_FULL_NAME);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNTM3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546605379", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for (Map<String, Serializable> tv : transcodedVideos) {\n          \n          \n            \n                                if (tv.get(\"name\") == conversionName) {\n          \n          \n            \n                                    transcodedVideos.remove(tv);\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));", "author": "kevinleturc", "createdAt": "2020-12-21T09:43:43Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(DocumentModel doc, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        if (transcodedVideos == null) {\n+            transcodedVideos = new ArrayList<>();\n+        } else {\n+            if (transcodedVideo == null) {\n+                for (Map<String, Serializable> tv : transcodedVideos) {\n+                    if (tv.get(\"name\") == conversionName) {\n+                        transcodedVideos.remove(tv);\n+                    }\n+                }", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNzIzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546607236", "bodyText": "Furthermore, we don't need to do a check on transcodedVideo nullity as we want to do the same thing in both cases.", "author": "kevinleturc", "createdAt": "2020-12-21T09:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNTM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 93893ee48ed..1c5042486b5 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,6 +87,10 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n         public RecomputeRenditionsComputation() {\n             super(ACTION_FULL_NAME);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwOTQxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546609410", "bodyText": "The doc parameter should be a docId/docRef that you first get from DB and finally save.", "author": "kevinleturc", "createdAt": "2020-12-21T09:52:01Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(DocumentModel doc, String conversionName, TranscodedVideo transcodedVideo,", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 93893ee48ed..1c5042486b5 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,6 +87,10 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n         public RecomputeRenditionsComputation() {\n             super(ACTION_FULL_NAME);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxMTA4OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546611089", "bodyText": "Could you add a finally block to start the transaction if it is not active? Otherwise, we could end by committing a non-existing transaction at the beginning of the loop.", "author": "kevinleturc", "createdAt": "2020-12-21T09:55:13Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4ODk5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556388990", "bodyText": "Could you check if the transaction is active to start it?", "author": "kevinleturc", "createdAt": "2021-01-13T09:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxMTA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 93893ee48ed..1c5042486b5 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,6 +87,10 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n         public RecomputeRenditionsComputation() {\n             super(ACTION_FULL_NAME);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNTYzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546625633", "bodyText": "Could you follow the \"style\" of validateCommand code that we can found in others bulk action validation?\nIe: one bloc per parameter, separated by a blank line.", "author": "kevinleturc", "createdAt": "2020-12-21T10:24:41Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\nindex f080a4d52aa..346cece3e51 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n\n@@ -39,9 +39,14 @@ public class RecomputeVideoConversionsActionValidation extends AbstractBulkActio\n \n     @Override\n     protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n         String xpath = command.getParam(PARAM_XPATH);\n-        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n         validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAME, command);\n+        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n         // recompute all renditions\n         if (conversionNames.isEmpty()) {\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNTg2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546625862", "bodyText": "You should first do a call to validateList.", "author": "kevinleturc", "createdAt": "2020-12-21T10:25:10Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+        String xpath = command.getParam(PARAM_XPATH);\n+        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\nindex f080a4d52aa..346cece3e51 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n\n@@ -39,9 +39,14 @@ public class RecomputeVideoConversionsActionValidation extends AbstractBulkActio\n \n     @Override\n     protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n         String xpath = command.getParam(PARAM_XPATH);\n-        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n         validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAME, command);\n+        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n         // recompute all renditions\n         if (conversionNames.isEmpty()) {\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNzY1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546627650", "bodyText": "This could be replaced by a call to conversionNames.removeAll(videoService.getAvailableVideoConversions()) + an empty check on the resulting List.", "author": "kevinleturc", "createdAt": "2020-12-21T10:28:35Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+        String xpath = command.getParam(PARAM_XPATH);\n+        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        List<String> conversionNamesArray = new ArrayList<>();\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNamesArray.add(conversion.getName());\n+        }\n+\n+        for (String conversion : conversionNames) {\n+            if (!conversionNamesArray.contains(conversion)) {\n+                throw new IllegalArgumentException(String.format(\"The conversion %s is not supported.\", conversion));\n+            }\n+        }", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\nindex f080a4d52aa..346cece3e51 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n\n@@ -39,9 +39,14 @@ public class RecomputeVideoConversionsActionValidation extends AbstractBulkActio\n \n     @Override\n     protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n         String xpath = command.getParam(PARAM_XPATH);\n-        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n         validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAME, command);\n+        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n         // recompute all renditions\n         if (conversionNames.isEmpty()) {\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyODExNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546628115", "bodyText": "Forgotten comment?", "author": "kevinleturc", "createdAt": "2020-12-21T10:29:34Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";\n+    //AND vid:transcodedVideos IS NULL AND ecm:isVersion = 0 AND ecm:isProxy = 0", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 69f2519684d..d4ac10c2287 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -48,8 +48,12 @@ import org.nuxeo.runtime.api.Framework;\n public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n \n     // By default we only recompute renditions for document without any renditions\n-    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";\n-    //AND vid:transcodedVideos IS NULL AND ecm:isVersion = 0 AND ecm:isProxy = 0\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' AND ecm:isProxy = 0 AND ecm:isVersion = 0\";\n+\n+    /**\n+     * @TODO Default query should only recompute rendition for videos with no recomputed renditions\n+     *       (vid:transcodedVideos is NULL)\n+     */\n \n     /**\n      * Recomputes video renditions for the documents matching the given query or {@link #VIDEOS_DEFAULT_QUERY} if not\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyODM5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546628395", "bodyText": "We may want to exclude proxy, no?", "author": "kevinleturc", "createdAt": "2020-12-21T10:30:12Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 69f2519684d..d4ac10c2287 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -48,8 +48,12 @@ import org.nuxeo.runtime.api.Framework;\n public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n \n     // By default we only recompute renditions for document without any renditions\n-    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";\n-    //AND vid:transcodedVideos IS NULL AND ecm:isVersion = 0 AND ecm:isProxy = 0\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' AND ecm:isProxy = 0 AND ecm:isVersion = 0\";\n+\n+    /**\n+     * @TODO Default query should only recompute rendition for videos with no recomputed renditions\n+     *       (vid:transcodedVideos is NULL)\n+     */\n \n     /**\n      * Recomputes video renditions for the documents matching the given query or {@link #VIDEOS_DEFAULT_QUERY} if not\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyOTkzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546629933", "bodyText": "Every bulk action should handle a missing parameter, we don't need to give an empty List for this one.", "author": "kevinleturc", "createdAt": "2020-12-21T10:33:45Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";\n+    //AND vid:transcodedVideos IS NULL AND ecm:isVersion = 0 AND ecm:isProxy = 0\n+\n+    /**\n+     * Recomputes video renditions for the documents matching the given query or {@link #VIDEOS_DEFAULT_QUERY} if not\n+     * provided.\n+     *\n+     * @param query a custom query to specify which videos should be processed\n+     * @return the {@link BulkStatus} of the command\n+     */\n+    @POST\n+    @Path(\"recompute\")\n+    public BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+            @FormParam(\"conversionName\") List<String> conversionName) {\n+        String finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n+        List<String> finalConversions = conversionName;\n+        if (conversionName == null) {\n+            conversionName = new ArrayList<>();\n+        }", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 69f2519684d..d4ac10c2287 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -48,8 +48,12 @@ import org.nuxeo.runtime.api.Framework;\n public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n \n     // By default we only recompute renditions for document without any renditions\n-    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";\n-    //AND vid:transcodedVideos IS NULL AND ecm:isVersion = 0 AND ecm:isProxy = 0\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' AND ecm:isProxy = 0 AND ecm:isVersion = 0\";\n+\n+    /**\n+     * @TODO Default query should only recompute rendition for videos with no recomputed renditions\n+     *       (vid:transcodedVideos is NULL)\n+     */\n \n     /**\n      * Recomputes video renditions for the documents matching the given query or {@link #VIDEOS_DEFAULT_QUERY} if not\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMzQ2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546633460", "bodyText": "This method is very long, we should consider refactoring if possible.\nI would sort the parameters as below:\n\nquery / because is the first action parameter\nrenditions / because is the second action parameter\nmissingConversion\nsuccess", "author": "kevinleturc", "createdAt": "2020-12-21T10:41:08Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex dd13acfdece..6a1f1f4c83e 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -35,6 +35,7 @@ import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROP\n import java.io.IOException;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMzU4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546633583", "bodyText": "Could be declared as var.", "author": "kevinleturc", "createdAt": "2020-12-21T10:41:28Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex dd13acfdece..6a1f1f4c83e 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -35,6 +35,7 @@ import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROP\n import java.io.IOException;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNDA0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546634043", "bodyText": "No need for this local variable.", "author": "kevinleturc", "createdAt": "2020-12-21T10:42:28Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex dd13acfdece..6a1f1f4c83e 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -35,6 +35,7 @@ import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROP\n import java.io.IOException;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNDU5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546634591", "bodyText": "MultivaluedMap is a Map of List, you should be able to use the put method with the list directly.", "author": "kevinleturc", "createdAt": "2020-12-21T10:43:36Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            for (String rendition : expectedRenditions) {\n+                formData.add(\"conversionName\", rendition);\n+            }", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex dd13acfdece..6a1f1f4c83e 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -35,6 +35,7 @@ import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROP\n import java.io.IOException;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzOTk4Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546639987", "bodyText": "This could be extracted to a method such as assertTranscodedVideos taking as parameters:\n\nthe expectedRenditions, in case the list is null, you should retrieve the available conversions from video service\nthe actualTranscodedVideos\n\nThe whole logic based on the List size should be reworked to assert directly against the expectedRenditions List.\nOccurrences of conversion names should disappear.", "author": "kevinleturc", "createdAt": "2020-12-21T10:55:16Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            for (String rendition : expectedRenditions) {\n+                formData.add(\"conversionName\", rendition);\n+            }\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+            if (impossibleConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            doc = session.getDocument(docRef);\n+\n+            transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                int nbExpectedRenditions;\n+                if (expectedRenditions == null) {\n+                    nbExpectedRenditions = 3;\n+                } else {\n+                    nbExpectedRenditions = expectedRenditions.size();\n+                }\n+\n+                assertEquals(nbExpectedRenditions, transcodedVideos.size());\n+                switch (nbExpectedRenditions) {\n+                case 1:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\n+                    break;\n+                case 2:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    break;\n+\n+                default:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    assertEquals(\"Ogg 480p\", transcodedVideos.get(2).get(\"name\"));\n+                    break;\n+                }", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex dd13acfdece..6a1f1f4c83e 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -35,6 +35,7 @@ import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROP\n import java.io.IOException;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MDI1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546640252", "bodyText": "Forgotten Sys out?", "author": "kevinleturc", "createdAt": "2020-12-21T10:55:50Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            for (String rendition : expectedRenditions) {\n+                formData.add(\"conversionName\", rendition);\n+            }\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+            if (impossibleConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            doc = session.getDocument(docRef);\n+\n+            transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                int nbExpectedRenditions;\n+                if (expectedRenditions == null) {\n+                    nbExpectedRenditions = 3;\n+                } else {\n+                    nbExpectedRenditions = expectedRenditions.size();\n+                }\n+\n+                assertEquals(nbExpectedRenditions, transcodedVideos.size());\n+                switch (nbExpectedRenditions) {\n+                case 1:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\n+                    break;\n+                case 2:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    break;\n+\n+                default:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    assertEquals(\"Ogg 480p\", transcodedVideos.get(2).get(\"name\"));\n+                    break;\n+                }\n+            } else {\n+                assertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+                assertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(0, node.get(STATUS_TOTAL).asInt());\n+                assertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+                assertTrue(transcodedVideos.isEmpty());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+        DocumentModel doc = session.getDocument(docRef);\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating all default video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            doc = session.getDocument(docRef);\n+\n+            List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                    TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            System.out.println(\"Round 1->\"+transcodedVideos);", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex dd13acfdece..6a1f1f4c83e 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -35,6 +35,7 @@ import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROP\n import java.io.IOException;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MDk5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546640994", "bodyText": "Why not using doTestRecomputeVideos for the first computation?", "author": "kevinleturc", "createdAt": "2020-12-21T10:57:28Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            for (String rendition : expectedRenditions) {\n+                formData.add(\"conversionName\", rendition);\n+            }\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+            if (impossibleConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            doc = session.getDocument(docRef);\n+\n+            transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                int nbExpectedRenditions;\n+                if (expectedRenditions == null) {\n+                    nbExpectedRenditions = 3;\n+                } else {\n+                    nbExpectedRenditions = expectedRenditions.size();\n+                }\n+\n+                assertEquals(nbExpectedRenditions, transcodedVideos.size());\n+                switch (nbExpectedRenditions) {\n+                case 1:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\n+                    break;\n+                case 2:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    break;\n+\n+                default:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    assertEquals(\"Ogg 480p\", transcodedVideos.get(2).get(\"name\"));\n+                    break;\n+                }\n+            } else {\n+                assertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+                assertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(0, node.get(STATUS_TOTAL).asInt());\n+                assertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+                assertTrue(transcodedVideos.isEmpty());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+        DocumentModel doc = session.getDocument(docRef);\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating all default video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {", "originalCommit": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15b0441d21213c5e5071de70ccaca068b6646a00", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex dd13acfdece..6a1f1f4c83e 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -35,6 +35,7 @@ import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROP\n import java.io.IOException;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"oid": "15b0441d21213c5e5071de70ccaca068b6646a00", "url": "https://github.com/nuxeo/nuxeo/commit/15b0441d21213c5e5071de70ccaca068b6646a00", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-04T10:57:58Z", "type": "forcePushed"}, {"oid": "0347c3aaca99af9c23808e3620296e32cf70c025", "url": "https://github.com/nuxeo/nuxeo/commit/0347c3aaca99af9c23808e3620296e32cf70c025", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-04T11:31:43Z", "type": "forcePushed"}, {"oid": "041193bf95d7f05824e89f839649f5fea4db23bb", "url": "https://github.com/nuxeo/nuxeo/commit/041193bf95d7f05824e89f839649f5fea4db23bb", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-04T11:37:20Z", "type": "forcePushed"}, {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "url": "https://github.com/nuxeo/nuxeo/commit/639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-12T13:52:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNTE0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555825149", "bodyText": "You probably don't need a second List, does something as below looks ok?\nconversionNames = command.getParam(PARAM_CONVERSION_NAME);\nif (conversionNames.isEmpty()) {\n    conversionNames = videoService.getAvailableVideoConversions().stream().map(VideoConversion::getName).collect(Collectors.toList());\n}", "author": "kevinleturc", "createdAt": "2021-01-12T14:45:34Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            conversionNamesArray = new ArrayList<>();\n+            if (conversionNames.isEmpty()) {\n+                // Recomputing all available renditions\n+                for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                    conversionNamesArray.add(conversion.getName());\n+                }\n+            } else {\n+                // Recomputing wanted renditions\n+                conversionNamesArray.addAll(conversionNames);\n+            }", "originalCommit": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "448a459f720c21642bb4621bae6d32ba5b2b4b81", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 52dd79efaa7..3945e2b4564 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -100,15 +100,11 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n             BulkCommand command = getCurrentCommand();\n             xpath = command.getParam(PARAM_XPATH);\n             conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n-            conversionNamesArray = new ArrayList<>();\n             if (conversionNames.isEmpty()) {\n                 // Recomputing all available renditions\n                 for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-                    conversionNamesArray.add(conversion.getName());\n+                    conversionNames.add(conversion.getName());\n                 }\n-            } else {\n-                // Recomputing wanted renditions\n-                conversionNamesArray.addAll(conversionNames);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNjMwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555826306", "bodyText": "Twice the same bloc.", "author": "kevinleturc", "createdAt": "2021-01-12T14:47:00Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            conversionNamesArray = new ArrayList<>();\n+            if (conversionNames.isEmpty()) {\n+                // Recomputing all available renditions\n+                for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                    conversionNamesArray.add(conversion.getName());\n+                }\n+            } else {\n+                // Recomputing wanted renditions\n+                conversionNamesArray.addAll(conversionNames);\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(new IdRef(workingDocument.getId()), conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    TransactionHelper.startTransaction();\n+                }\n+\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(IdRef docId, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        DocumentModel doc = session.getDocument(docId);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+        transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n+        if (transcodedVideo != null) {\n+            transcodedVideos.add(transcodedVideo.toMap());\n+        }\n+        doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n+        if (doc.isVersion()) {\n+            doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+        }\n+        if (doc.isVersion()) {\n+            doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+        }", "originalCommit": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "448a459f720c21642bb4621bae6d32ba5b2b4b81", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 52dd79efaa7..3945e2b4564 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -100,15 +100,11 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n             BulkCommand command = getCurrentCommand();\n             xpath = command.getParam(PARAM_XPATH);\n             conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n-            conversionNamesArray = new ArrayList<>();\n             if (conversionNames.isEmpty()) {\n                 // Recomputing all available renditions\n                 for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-                    conversionNamesArray.add(conversion.getName());\n+                    conversionNames.add(conversion.getName());\n                 }\n-            } else {\n-                // Recomputing wanted renditions\n-                conversionNamesArray.addAll(conversionNames);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNzk1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555827955", "bodyText": "Can you move the TODO on the query and write it as a regular comment (not a javadoc one).", "author": "kevinleturc", "createdAt": "2021-01-12T14:49:12Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' AND ecm:isProxy = 0 AND ecm:isVersion = 0\";\n+\n+    /**\n+     * @TODO Default query should only recompute rendition for videos with no recomputed renditions\n+     *       (vid:transcodedVideos is NULL)\n+     */", "originalCommit": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "448a459f720c21642bb4621bae6d32ba5b2b4b81", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex d4ac10c2287..f9b4ee4a070 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -67,13 +67,12 @@ public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n     public BulkStatus doPostVideos(@FormParam(\"query\") String query,\n             @FormParam(\"conversionName\") List<String> conversionName) {\n         String finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n-        List<String> finalConversions = conversionName;\n         BulkService bulkService = Framework.getService(BulkService.class);\n         String commandId = bulkService.submit(new BulkCommand.Builder(RecomputeVideoConversionsAction.ACTION_NAME,\n                 finalQuery, SYSTEM_USERNAME).repository(ctx.getCoreSession().getRepositoryName())\n                                             .param(RecomputeVideoConversionsAction.PARAM_XPATH, \"file:content\")\n                                             .param(RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME,\n-                                                    (Serializable) finalConversions)\n+                                                    (Serializable) conversionName)\n                                             .build());\n         return bulkService.getStatus(commandId);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyODQzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555828432", "bodyText": "Why do we need this variable?", "author": "kevinleturc", "createdAt": "2021-01-12T14:49:49Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' AND ecm:isProxy = 0 AND ecm:isVersion = 0\";\n+\n+    /**\n+     * @TODO Default query should only recompute rendition for videos with no recomputed renditions\n+     *       (vid:transcodedVideos is NULL)\n+     */\n+\n+    /**\n+     * Recomputes video renditions for the documents matching the given query or {@link #VIDEOS_DEFAULT_QUERY} if not\n+     * provided.\n+     *\n+     * @param query a custom query to specify which videos should be processed\n+     * @return the {@link BulkStatus} of the command\n+     */\n+    @POST\n+    @Path(\"recompute\")\n+    public BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+            @FormParam(\"conversionName\") List<String> conversionName) {\n+        String finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n+        List<String> finalConversions = conversionName;", "originalCommit": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MDcwMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555870703", "bodyText": "We don't need it", "author": "charlesboidot", "createdAt": "2021-01-12T15:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyODQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "448a459f720c21642bb4621bae6d32ba5b2b4b81", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex d4ac10c2287..f9b4ee4a070 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -67,13 +67,12 @@ public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n     public BulkStatus doPostVideos(@FormParam(\"query\") String query,\n             @FormParam(\"conversionName\") List<String> conversionName) {\n         String finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n-        List<String> finalConversions = conversionName;\n         BulkService bulkService = Framework.getService(BulkService.class);\n         String commandId = bulkService.submit(new BulkCommand.Builder(RecomputeVideoConversionsAction.ACTION_NAME,\n                 finalQuery, SYSTEM_USERNAME).repository(ctx.getCoreSession().getRepositoryName())\n                                             .param(RecomputeVideoConversionsAction.PARAM_XPATH, \"file:content\")\n                                             .param(RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME,\n-                                                    (Serializable) finalConversions)\n+                                                    (Serializable) conversionName)\n                                             .build());\n         return bulkService.getStatus(commandId);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyOTQ1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555829450", "bodyText": "Here you can remove the conversion from conversionNames, as it you don't have to maintain another List.", "author": "kevinleturc", "createdAt": "2021-01-12T14:51:12Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAME, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        List<String> conversionNamesArray = new ArrayList<>();\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNamesArray.add(conversion.getName());", "originalCommit": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "448a459f720c21642bb4621bae6d32ba5b2b4b81", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\nindex dce66d76be1..f6e49162251 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n\n@@ -52,11 +52,9 @@ public class RecomputeVideoConversionsActionValidation extends AbstractBulkActio\n             return;\n         }\n         VideoService videoService = Framework.getService(VideoService.class);\n-        List<String> conversionNamesArray = new ArrayList<>();\n         for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n-            conversionNamesArray.add(conversion.getName());\n+            conversionNames.remove(conversion.getName());\n         }\n-        conversionNames.removeAll(conversionNamesArray);\n         if(!conversionNames.isEmpty()) {\n             throw new IllegalArgumentException(String.format(\"The conversions: %s are not supported.\", conversionNames));\n         }\n"}}, {"oid": "448a459f720c21642bb4621bae6d32ba5b2b4b81", "url": "https://github.com/nuxeo/nuxeo/commit/448a459f720c21642bb4621bae6d32ba5b2b4b81", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-12T16:12:23Z", "type": "forcePushed"}, {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "url": "https://github.com/nuxeo/nuxeo/commit/7d26739df4d242db57a18ac5fcef1e425b722f2e", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-12T16:33:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4NDExMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556384112", "bodyText": "Not needed.", "author": "kevinleturc", "createdAt": "2021-01-13T09:37:35Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();", "originalCommit": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "363846a23521e031dcb98833729a35724b5c3682", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 3d35fb12ddd..212aeffb8bd 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,8 +87,6 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n-        protected List<String> conversionNamesArray = new ArrayList<>();\n-\n         protected VideoService videoService = Framework.getService(VideoService.class);\n \n         public RecomputeRenditionsComputation() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4NDgzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556384834", "bodyText": "new ArrayList is not needed as we're not editing the list.\nIt was needed before, when the code had a conversionNames.addAll(...).", "author": "kevinleturc", "createdAt": "2021-01-13T09:38:44Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));", "originalCommit": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "363846a23521e031dcb98833729a35724b5c3682", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 3d35fb12ddd..212aeffb8bd 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,8 +87,6 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n-        protected List<String> conversionNamesArray = new ArrayList<>();\n-\n         protected VideoService videoService = Framework.getService(VideoService.class);\n \n         public RecomputeRenditionsComputation() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4NTcxNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556385715", "bodyText": "Line exceeds 120 characters.", "author": "kevinleturc", "createdAt": "2021-01-13T09:40:10Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions().stream().map(VideoConversion::getName).collect(Collectors.toList());", "originalCommit": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "363846a23521e031dcb98833729a35724b5c3682", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 3d35fb12ddd..212aeffb8bd 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,8 +87,6 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n-        protected List<String> conversionNamesArray = new ArrayList<>();\n-\n         protected VideoService videoService = Framework.getService(VideoService.class);\n \n         public RecomputeRenditionsComputation() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM5MzQ3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556393478", "bodyText": "Could you put the session as the first parameter?", "author": "kevinleturc", "createdAt": "2021-01-13T09:52:08Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions().stream().map(VideoConversion::getName).collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(new IdRef(workingDocument.getId()), conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    TransactionHelper.startTransaction();\n+                }\n+\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(IdRef docId, String conversionName, TranscodedVideo transcodedVideo,", "originalCommit": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "363846a23521e031dcb98833729a35724b5c3682", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 3d35fb12ddd..212aeffb8bd 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,8 +87,6 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n-        protected List<String> conversionNamesArray = new ArrayList<>();\n-\n         protected VideoService videoService = Framework.getService(VideoService.class);\n \n         public RecomputeRenditionsComputation() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM5MzczMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556393732", "bodyText": "Could you add @SuppressWarnings(\"unchecked\") to the method to avoid a cast warning in IDE?", "author": "kevinleturc", "createdAt": "2021-01-13T09:52:31Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions().stream().map(VideoConversion::getName).collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(new IdRef(workingDocument.getId()), conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    TransactionHelper.startTransaction();\n+                }\n+\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(IdRef docId, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        DocumentModel doc = session.getDocument(docId);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);", "originalCommit": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "363846a23521e031dcb98833729a35724b5c3682", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 3d35fb12ddd..212aeffb8bd 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -87,8 +87,6 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n \n         protected List<String> conversionNames;\n \n-        protected List<String> conversionNamesArray = new ArrayList<>();\n-\n         protected VideoService videoService = Framework.getService(VideoService.class);\n \n         public RecomputeRenditionsComputation() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM5NDMxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556394318", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!conversionNames.isEmpty()) {\n          \n          \n            \n                    if (!conversionNames.isEmpty()) {", "author": "kevinleturc", "createdAt": "2021-01-13T09:53:21Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAME, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNames.remove(conversion.getName());\n+        }\n+        if(!conversionNames.isEmpty()) {", "originalCommit": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "363846a23521e031dcb98833729a35724b5c3682", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\nindex f6e49162251..c05a0547bbb 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n\n@@ -55,8 +55,9 @@ public class RecomputeVideoConversionsActionValidation extends AbstractBulkActio\n         for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n             conversionNames.remove(conversion.getName());\n         }\n-        if(!conversionNames.isEmpty()) {\n-            throw new IllegalArgumentException(String.format(\"The conversions: %s are not supported.\", conversionNames));\n+        if (!conversionNames.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"The conversions: %s are not supported.\", conversionNames));\n         }\n     }\n }\n"}}, {"oid": "363846a23521e031dcb98833729a35724b5c3682", "url": "https://github.com/nuxeo/nuxeo/commit/363846a23521e031dcb98833729a35724b5c3682", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-13T10:51:52Z", "type": "forcePushed"}, {"oid": "e067be8fd87ce2ca408b1375832debf94a111fe0", "url": "https://github.com/nuxeo/nuxeo/commit/e067be8fd87ce2ca408b1375832debf94a111fe0", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-13T10:55:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzODA2OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556438069", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if(!TransactionHelper.isTransactionActive()) {\n          \n          \n            \n                                if (!TransactionHelper.isTransactionActive()) {", "author": "kevinleturc", "createdAt": "2021-01-13T11:04:08Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        if(!TransactionHelper.isTransactionActive()) {\n+                            TransactionHelper.startTransaction();\n+                        }\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if(!TransactionHelper.isTransactionActive()) {", "originalCommit": "e067be8fd87ce2ca408b1375832debf94a111fe0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 96a4f14a714..ba735391a48 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -133,7 +133,7 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n                         } catch (ConversionException e) {\n                             log.warn(\"Conversion to {} has failed\", conversion);\n                         }\n-                        if(!TransactionHelper.isTransactionActive()) {\n+                        if (!TransactionHelper.isTransactionActive()) {\n                             TransactionHelper.startTransaction();\n                         }\n                         saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzOTE1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556439150", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * since 11.4\n          \n          \n            \n             * @since 11.5", "author": "kevinleturc", "createdAt": "2021-01-13T11:05:59Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4", "originalCommit": "e067be8fd87ce2ca408b1375832debf94a111fe0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 33c3ac98f2d..9a1207a52bf 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -40,7 +40,7 @@ import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n import org.nuxeo.runtime.api.Framework;\n \n /**\n- * since 11.4\n+ * since 11.5\n  */\n @WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n @Produces(APPLICATION_JSON)\n"}}, {"oid": "c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "url": "https://github.com/nuxeo/nuxeo/commit/c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-13T11:07:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNTIxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556635212", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * since 11.5\n          \n          \n            \n             * @since 11.5", "author": "kevinleturc", "createdAt": "2021-01-13T15:56:53Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.5", "originalCommit": "c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "755d6215a4cc20af12cdd079fe750c761053acc9", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\nindex 9a1207a52bf..ddd9ef9c430 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java\n\n@@ -40,7 +40,7 @@ import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n import org.nuxeo.runtime.api.Framework;\n \n /**\n- * since 11.5\n+ * @since 11.5\n  */\n @WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n @Produces(APPLICATION_JSON)\n"}}, {"oid": "755d6215a4cc20af12cdd079fe750c761053acc9", "url": "https://github.com/nuxeo/nuxeo/commit/755d6215a4cc20af12cdd079fe750c761053acc9", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-13T16:02:21Z", "type": "forcePushed"}, {"oid": "6403c956ba3acbe40efa1342280c3508506788f6", "url": "https://github.com/nuxeo/nuxeo/commit/6403c956ba3acbe40efa1342280c3508506788f6", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-14T15:04:02Z", "type": "forcePushed"}, {"oid": "0036f2b4fcc3aa20768cb3482426de32c2dd7f28", "url": "https://github.com/nuxeo/nuxeo/commit/0036f2b4fcc3aa20768cb3482426de32c2dd7f28", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-15T16:00:18Z", "type": "forcePushed"}, {"oid": "d41c8a0c185dbab3106fc8ffcb957df2f84d5a92", "url": "https://github.com/nuxeo/nuxeo/commit/d41c8a0c185dbab3106fc8ffcb957df2f84d5a92", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-19T09:45:30Z", "type": "forcePushed"}, {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5", "url": "https://github.com/nuxeo/nuxeo/commit/cb93ee1409a99913dd7401610b84dafbafe825b5", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-20T14:36:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxMDM3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561710378", "bodyText": "2021 now, but well, detail", "author": "ataillefer", "createdAt": "2021-01-21T09:10:10Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex ba735391a48..364829ac2e0 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxMjk1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561712953", "bodyText": "Unused.\nDo we want to fire such an event for the video conversions, as it is done for the picture views recomputation: https://github.com/nuxeo/nuxeo/blob/master/modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/java/org/nuxeo/ecm/platform/picture/recompute/RecomputeViewsAction.java#L134\n@kevinleturc ? Regrading #4500 (comment) maybe.", "author": "ataillefer", "createdAt": "2021-01-21T09:14:07Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc3Mzg3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561773873", "bodyText": "We could add one indeed.", "author": "kevinleturc", "createdAt": "2021-01-21T10:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxMjk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex ba735391a48..364829ac2e0 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxMzU4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561713586", "bodyText": "Is it OK/a good practice to cache the service here? @kevinleturc", "author": "ataillefer", "createdAt": "2021-01-21T09:15:07Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc3NTEzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561775136", "bodyText": "In such context, it is, because the field belongs to the computation which is initialized during the stream/BAF startup or topic rebalance.", "author": "kevinleturc", "createdAt": "2021-01-21T10:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxMzU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex ba735391a48..364829ac2e0 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxNjAwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561716004", "bodyText": "Do we want to handle the case where the xpath doesn't match a Blob property?\nBy logging a warning and continuing for instance.", "author": "ataillefer", "createdAt": "2021-01-21T09:18:47Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex ba735391a48..364829ac2e0 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxNjgxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561716817", "bodyText": "Can you please add comment to say that we commit the transaction since the video conversion can be very long.", "author": "ataillefer", "createdAt": "2021-01-21T09:19:54Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex ba735391a48..364829ac2e0 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxODAyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561718020", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        log.warn(\"Conversion to {} has failed\", conversion);\n          \n          \n            \n                                        log.warn(\"Conversion {} of doc id {} has failed\", conversion, docId);", "author": "ataillefer", "createdAt": "2021-01-21T09:21:46Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex ba735391a48..364829ac2e0 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxOTk0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561719947", "bodyText": "Why static?", "author": "ataillefer", "createdAt": "2021-01-21T09:24:43Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        if (!TransactionHelper.isTransactionActive()) {\n+                            TransactionHelper.startTransaction();\n+                        }\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected static void saveRendition(CoreSession session, IdRef docId, String conversionName,", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex ba735391a48..364829ac2e0 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc2MjM2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561762361", "bodyText": "not sure why this is needed", "author": "ataillefer", "createdAt": "2021-01-21T10:26:25Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex 42690cbdd24..346249f5ba6 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc2NjIyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561766226", "bodyText": "seems unneeded", "author": "ataillefer", "createdAt": "2021-01-21T10:31:51Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+        DocumentModel doc = session.getDocument(docRef);", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex 42690cbdd24..346249f5ba6 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc3MTU0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561771547", "bodyText": "Shouldn't it be conversionNames?", "author": "ataillefer", "createdAt": "2021-01-21T10:39:48Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";", "originalCommit": "cb93ee1409a99913dd7401610b84dafbafe825b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73547e0988a727c366a23e6408e95422787a0e99", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex ba735391a48..364829ac2e0 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"oid": "73547e0988a727c366a23e6408e95422787a0e99", "url": "https://github.com/nuxeo/nuxeo/commit/73547e0988a727c366a23e6408e95422787a0e99", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-22T10:47:03Z", "type": "forcePushed"}, {"oid": "b53c206e514ab6501b33d80c27dbee90b36c6c2a", "url": "https://github.com/nuxeo/nuxeo/commit/b53c206e514ab6501b33d80c27dbee90b36c6c2a", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-22T12:54:14Z", "type": "forcePushed"}, {"oid": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "url": "https://github.com/nuxeo/nuxeo/commit/3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-25T10:40:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzYzNzg4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r563637883", "bodyText": "Shouldn't this be done after all renditions have been saved for a given document?\nSo, probably after this line: https://github.com/nuxeo/nuxeo/pull/4500/files#diff-bc4a7bfecdae732db5ff4d4d6a3e452a5f53018ca76157e70f1edc8b0c0734baR155.", "author": "ataillefer", "createdAt": "2021-01-25T11:04:21Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion {} of doc id {} has failed\", conversion, docId);\n+                        }\n+                        if (!TransactionHelper.isTransactionActive()) {\n+                            TransactionHelper.startTransaction();\n+                        }\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n+                TranscodedVideo transcodedVideo) {\n+            DocumentModel doc = session.getDocument(docId);\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n+            if (transcodedVideo != null) {\n+                transcodedVideos.add(transcodedVideo.toMap());\n+            }\n+            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n+            if (doc.isVersion()) {\n+                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+            }\n+            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+            session.saveDocument(doc);\n+\n+            DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+            Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);", "originalCommit": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 364829ac2e0..c6e24b79e89 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -118,7 +118,7 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n                 DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n                 Property fileProp = workingDocument.getProperty(xpath);\n                 if (!(fileProp instanceof Blob)) {\n-                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n                 }\n                 Blob blob = (Blob) fileProp.getValue();\n                 if (blob == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzYzOTE3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r563639179", "bodyText": "Please try to keep the usual format with :\nfoo: {}...\n\nAnd parameters docId and xpath are inverted.", "author": "ataillefer", "createdAt": "2021-01-25T11:06:29Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);", "originalCommit": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 364829ac2e0..c6e24b79e89 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -118,7 +118,7 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n                 DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n                 Property fileProp = workingDocument.getProperty(xpath);\n                 if (!(fileProp instanceof Blob)) {\n-                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n                 }\n                 Blob blob = (Blob) fileProp.getValue();\n                 if (blob == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzY0MDA5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r563640091", "bodyText": "In fact, I've suggested this but, for consistency, should be:\nConversion: {} of doc id: {} has failed\"", "author": "ataillefer", "createdAt": "2021-01-25T11:07:53Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion {} of doc id {} has failed\", conversion, docId);", "originalCommit": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex 364829ac2e0..c6e24b79e89 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -118,7 +118,7 @@ public class RecomputeVideoConversionsAction implements StreamProcessorTopology\n                 DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n                 Property fileProp = workingDocument.getProperty(xpath);\n                 if (!(fileProp instanceof Blob)) {\n-                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n                 }\n                 Blob blob = (Blob) fileProp.getValue();\n                 if (blob == null) {\n"}}, {"oid": "42050154003d3a74c758280b926490803c7f180e", "url": "https://github.com/nuxeo/nuxeo/commit/42050154003d3a74c758280b926490803c7f180e", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-25T13:55:11Z", "type": "forcePushed"}, {"oid": "5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "url": "https://github.com/nuxeo/nuxeo/commit/5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-25T14:02:15Z", "type": "forcePushed"}, {"oid": "9379766d42a370db938b24cf1dac2d3e97c19fbf", "url": "https://github.com/nuxeo/nuxeo/commit/9379766d42a370db938b24cf1dac2d3e97c19fbf", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-25T14:54:39Z", "type": "forcePushed"}, {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "url": "https://github.com/nuxeo/nuxeo/commit/1bdde940e842dae14bf9d28de7d430db60ec39e3", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-27T13:19:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5NDA3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565394079", "bodyText": "Isn't there missing a continue?", "author": "kevinleturc", "createdAt": "2021-01-27T15:19:11Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }", "originalCommit": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26866635103093ec7625fa2dec80842ee0979489", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex c6e24b79e89..00e339ac7d3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -41,6 +41,7 @@ import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n import org.nuxeo.ecm.core.api.IdRef;\n import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.convert.api.ConversionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5NTI0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565395243", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 11.4\n          \n          \n            \n             * @since 11.5", "author": "kevinleturc", "createdAt": "2021-01-27T15:20:37Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4", "originalCommit": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26866635103093ec7625fa2dec80842ee0979489", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex df55f784b5d..e6da5e7c7f4 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -63,7 +63,7 @@ import com.fasterxml.jackson.databind.JsonNode;\n import com.sun.jersey.core.util.MultivaluedMapImpl;\n \n /**\n- * @since 11.4\n+ * @since 11.5\n  */\n @Features(VideoFeature.class)\n @Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk0MTA0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565941047", "bodyText": "Not needed as the whole class is @since 11.5", "author": "troger", "createdAt": "2021-01-28T09:28:37Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4", "originalCommit": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26866635103093ec7625fa2dec80842ee0979489", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex c6e24b79e89..00e339ac7d3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -41,6 +41,7 @@ import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n import org.nuxeo.ecm.core.api.IdRef;\n import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.convert.api.ConversionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk1ODg0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565958844", "bodyText": "Worth listing also the conversionNames list?", "author": "troger", "createdAt": "2021-01-28T09:54:45Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);", "originalCommit": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26866635103093ec7625fa2dec80842ee0979489", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex c6e24b79e89..00e339ac7d3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -41,6 +41,7 @@ import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n import org.nuxeo.ecm.core.api.IdRef;\n import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.convert.api.ConversionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2MTUzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565961539", "bodyText": "Is there a reason to log the whole document here instead of the id?", "author": "troger", "createdAt": "2021-01-28T09:58:23Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);", "originalCommit": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc0NDE3Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r566744177", "bodyText": "No there isn't", "author": "charlesboidot", "createdAt": "2021-01-29T11:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2MTUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "26866635103093ec7625fa2dec80842ee0979489", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex c6e24b79e89..00e339ac7d3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -41,6 +41,7 @@ import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n import org.nuxeo.ecm.core.api.IdRef;\n import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.convert.api.ConversionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2MjE4Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565962187", "bodyText": "Worth checking there is actually an active transaction before committing it? (cc @kevinleturc )", "author": "troger", "createdAt": "2021-01-28T09:59:20Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();", "originalCommit": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMxNjYwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r566316602", "bodyText": "I think this is not needed, the compute method is by definition in a transactional context, and there are no error cases where we will end up in this code path without a transaction.", "author": "kevinleturc", "createdAt": "2021-01-28T18:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2MjE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "26866635103093ec7625fa2dec80842ee0979489", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex c6e24b79e89..00e339ac7d3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -41,6 +41,7 @@ import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n import org.nuxeo.ecm.core.api.IdRef;\n import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.convert.api.ConversionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk3NzIyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565977226", "bodyText": "in which case the transaction could be active here?", "author": "troger", "createdAt": "2021-01-28T10:21:37Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        if (!TransactionHelper.isTransactionActive()) {", "originalCommit": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMzMTYzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r566331637", "bodyText": "I haven't reviewed this PR at all but Thomas makes a good point about transactions. Usually in Nuxeo we are in a context where as an invariant a transaction is already active, so this kind of if is redundant and confusing. If we're not in a context where we know whether or not we're in a transaction, then it's rare and should be documented.", "author": "efge", "createdAt": "2021-01-28T18:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk3NzIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "26866635103093ec7625fa2dec80842ee0979489", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex c6e24b79e89..00e339ac7d3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -41,6 +41,7 @@ import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n import org.nuxeo.ecm.core.api.IdRef;\n import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.convert.api.ConversionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk3ODg0Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565978842", "bodyText": "Not sure saving the document here is needed, as it's done in the #saveRendition method.\nYou could maybe just use workingDocument.refresh() or refetch the document.\nWDYT @kevinleturc ?", "author": "troger", "createdAt": "2021-01-28T10:24:07Z", "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        if (!TransactionHelper.isTransactionActive()) {\n+                            TransactionHelper.startTransaction();\n+                        }\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                workingDocument = session.saveDocument(workingDocument);", "originalCommit": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMxNDUxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r566314517", "bodyText": "I agree.", "author": "kevinleturc", "createdAt": "2021-01-28T18:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk3ODg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "26866635103093ec7625fa2dec80842ee0979489", "chunk": "diff --git a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\nindex c6e24b79e89..00e339ac7d3 100644\n--- a/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ b/modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n\n@@ -41,6 +41,7 @@ import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n import org.nuxeo.ecm.core.api.IdRef;\n import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n import org.nuxeo.ecm.core.convert.api.ConversionException;\n"}}, {"oid": "26866635103093ec7625fa2dec80842ee0979489", "url": "https://github.com/nuxeo/nuxeo/commit/26866635103093ec7625fa2dec80842ee0979489", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-01-29T14:36:14Z", "type": "forcePushed"}, {"oid": "f3c43b436936115c04e34e7f2ade8b84cc31fefd", "url": "https://github.com/nuxeo/nuxeo/commit/f3c43b436936115c04e34e7f2ade8b84cc31fefd", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-02-02T10:59:12Z", "type": "forcePushed"}, {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "url": "https://github.com/nuxeo/nuxeo/commit/55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-02-02T15:37:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwNTcxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569805712", "bodyText": "The encoding is only needed for MIME types that are text/<something>, so leave it null.", "author": "efge", "createdAt": "2021-02-03T22:46:16Z", "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex e6da5e7c7f4..ea082db12d9 100644\n--- a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -33,9 +33,9 @@ import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwNTk3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569805973", "bodyText": "The empty lines at method start/end don't really help readability.", "author": "efge", "createdAt": "2021-02-03T22:46:48Z", "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex e6da5e7c7f4..ea082db12d9 100644\n--- a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -33,9 +33,9 @@ import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwODczNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569808737", "bodyText": "Use try-with-resources for response.getEntityInputStream() to avoid close the stream properly (I know other existing tests don't do that but we should try to improve new code).\nThis one can actually be merged with the enclosing try-with-resources.\nYour IDE should a warning of a resource leak if it's not closed; if it doesn't, check your IDE config to activate it.", "author": "efge", "createdAt": "2021-02-03T22:52:25Z", "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex e6da5e7c7f4..ea082db12d9 100644\n--- a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -33,9 +33,9 @@ import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwOTk3MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569809970", "bodyText": "The assertNotNull could be pushed down into assertTranscodedVideos. Or just skipped if it's really not expected to fail, and a NPE if it fails should be clear enough anyway. Also there are other places below where you don't check for null.", "author": "efge", "createdAt": "2021-02-03T22:55:12Z", "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc4MzEyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r572783121", "bodyText": "I deleted it as an NPE will fail the test.", "author": "charlesboidot", "createdAt": "2021-02-09T10:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwOTk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex e6da5e7c7f4..ea082db12d9 100644\n--- a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -33,9 +33,9 @@ import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxMTcyOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569811728", "bodyText": "Rename missingConversionError -> expectMissingConversionError and success -> expectSuccess", "author": "efge", "createdAt": "2021-02-03T22:58:45Z", "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);\n+        }\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, List<String> expectedRenditions, boolean missingConversionError,\n+            boolean success) throws IOException {", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex e6da5e7c7f4..ea082db12d9 100644\n--- a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -33,9 +33,9 @@ import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxMTk2OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569811969", "bodyText": "-> expectSuccess", "author": "efge", "createdAt": "2021-02-03T22:59:10Z", "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);\n+        }\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, List<String> expectedRenditions, boolean missingConversionError,\n+            boolean success) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            formData.put(\"conversionNames\", expectedRenditions);\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            if (missingConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+        assertResponse(commandId, expectedRenditions, success);\n+\n+    }\n+\n+    protected void assertResponse(String commandId, List<String> expectedRenditions, boolean success)", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex e6da5e7c7f4..ea082db12d9 100644\n--- a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -33,9 +33,9 @@ import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxMjQ1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569812450", "bodyText": "This can be an @Injected field.", "author": "efge", "createdAt": "2021-02-03T23:00:08Z", "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);\n+        }\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, List<String> expectedRenditions, boolean missingConversionError,\n+            boolean success) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            formData.put(\"conversionNames\", expectedRenditions);\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            if (missingConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+        assertResponse(commandId, expectedRenditions, success);\n+\n+    }\n+\n+    protected void assertResponse(String commandId, List<String> expectedRenditions, boolean success)\n+            throws IOException {\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                assertTranscodedVideos(expectedRenditions, transcodedVideos);\n+            } else {\n+                assertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+                assertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(0, node.get(STATUS_TOTAL).asInt());\n+                assertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+                assertTrue(transcodedVideos.isEmpty());\n+            }\n+        }\n+    }\n+\n+    protected void assertTranscodedVideos(List<String> expectedRenditions,\n+            List<Map<String, Serializable>> transcodedVideos) {\n+        if (expectedRenditions == null) {\n+            VideoService videoService = Framework.getService(VideoService.class);", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex e6da5e7c7f4..ea082db12d9 100644\n--- a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -33,9 +33,9 @@ import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxMzcxNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569813715", "bodyText": "expectedRenditions = videoService.getAvailableVideoConversions()\n                                 .stream()\n                                 .map(VideoConversion::getName)\n                                 .collect(Collectors.toList())\n\nWhich is the way you actually wrote it in RecomputeRenditionsComputation btw \ud83d\ude00\nAnd personally I like to do a static import of Collectors.toList but it's up to you.", "author": "efge", "createdAt": "2021-02-03T23:03:05Z", "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);\n+        }\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, List<String> expectedRenditions, boolean missingConversionError,\n+            boolean success) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            formData.put(\"conversionNames\", expectedRenditions);\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            if (missingConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+        assertResponse(commandId, expectedRenditions, success);\n+\n+    }\n+\n+    protected void assertResponse(String commandId, List<String> expectedRenditions, boolean success)\n+            throws IOException {\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                assertTranscodedVideos(expectedRenditions, transcodedVideos);\n+            } else {\n+                assertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+                assertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(0, node.get(STATUS_TOTAL).asInt());\n+                assertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+                assertTrue(transcodedVideos.isEmpty());\n+            }\n+        }\n+    }\n+\n+    protected void assertTranscodedVideos(List<String> expectedRenditions,\n+            List<Map<String, Serializable>> transcodedVideos) {\n+        if (expectedRenditions == null) {\n+            VideoService videoService = Framework.getService(VideoService.class);\n+            expectedRenditions = new ArrayList<>();\n+            for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                expectedRenditions.add(conversion.getName());\n+            }", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\nindex e6da5e7c7f4..ea082db12d9 100644\n--- a/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n+++ b/modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java\n\n@@ -33,9 +33,9 @@ import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxNDUxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569814519", "bodyText": "Could be List.of", "author": "efge", "createdAt": "2021-02-03T23:04:59Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\ndeleted file mode 100644\nindex 00e339ac7d3..00000000000\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ /dev/null\n\n@@ -1,181 +0,0 @@\n-/*\n- * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n-import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.convert.api.ConversionException;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described by the given xpath.\n- *\n- * @since 11.5\n- */\n-public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n-\n-    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n-\n-    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n-\n-    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-    public static final String PARAM_XPATH = \"xpath\";\n-\n-    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n-\n-    @Override\n-    public Topology getTopology(Map<String, String> options) {\n-        return Topology.builder()\n-                       .addComputation(RecomputeRenditionsComputation::new, //\n-                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n-                       .build();\n-    }\n-\n-    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-        protected String xpath;\n-\n-        protected List<String> conversionNames;\n-\n-        protected VideoService videoService = Framework.getService(VideoService.class);\n-\n-        public RecomputeRenditionsComputation() {\n-            super(ACTION_FULL_NAME);\n-        }\n-\n-        @Override\n-        public void startBucket(String bucketKey) {\n-            BulkCommand command = getCurrentCommand();\n-            xpath = command.getParam(PARAM_XPATH);\n-            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n-            if (conversionNames.isEmpty()) {\n-                conversionNames = videoService.getAvailableVideoConversions()\n-                                              .stream()\n-                                              .map(VideoConversion::getName)\n-                                              .collect(Collectors.toList());\n-            }\n-        }\n-\n-        @Override\n-        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n-                    ids);\n-            for (String docId : ids) {\n-                if (!session.exists(new IdRef(docId))) {\n-                    log.debug(\"Doc id doesn't exist: {}\", docId);\n-                    continue;\n-                }\n-\n-                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-                Property fileProp = workingDocument.getProperty(xpath);\n-                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n-                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n-                    continue;\n-                }\n-                Blob blob = (Blob) fileProp.getValue();\n-                if (blob == null) {\n-                    // do nothing\n-                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n-                    continue;\n-                }\n-                try {\n-                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-                    Video video = videoDoc.getVideo();\n-\n-                    for (String conversion : conversionNames) {\n-                        // here we want to commit the transaction since the video conversion can be very long\n-                        TransactionHelper.commitOrRollbackTransaction();\n-                        TranscodedVideo transcodedVideo = null;\n-                        try {\n-                            transcodedVideo = videoService.convert(video, conversion);\n-                        } catch (ConversionException e) {\n-                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n-                        }\n-                        TransactionHelper.startTransaction();\n-                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n-                    }\n-                } catch (DocumentNotFoundException e) {\n-                    // a parent of the document may have been deleted.\n-                    continue;\n-                } finally {\n-                    if (!TransactionHelper.isTransactionActive()) {\n-                        TransactionHelper.startTransaction();\n-                    }\n-                }\n-                workingDocument.refresh();\n-                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n-                Framework.getService(EventService.class).fireEvent(event);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n-                TranscodedVideo transcodedVideo) {\n-            DocumentModel doc = session.getDocument(docId);\n-            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n-            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n-            if (transcodedVideo != null) {\n-                transcodedVideos.add(transcodedVideo.toMap());\n-            }\n-            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n-            if (doc.isVersion()) {\n-                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-            }\n-            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-            session.saveDocument(doc);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxNTczNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569815734", "bodyText": "Put new IdRef(docId) in a local variable, it's used twice.", "author": "efge", "createdAt": "2021-02-03T23:07:42Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\ndeleted file mode 100644\nindex 00e339ac7d3..00000000000\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ /dev/null\n\n@@ -1,181 +0,0 @@\n-/*\n- * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n-import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.convert.api.ConversionException;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described by the given xpath.\n- *\n- * @since 11.5\n- */\n-public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n-\n-    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n-\n-    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n-\n-    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-    public static final String PARAM_XPATH = \"xpath\";\n-\n-    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n-\n-    @Override\n-    public Topology getTopology(Map<String, String> options) {\n-        return Topology.builder()\n-                       .addComputation(RecomputeRenditionsComputation::new, //\n-                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n-                       .build();\n-    }\n-\n-    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-        protected String xpath;\n-\n-        protected List<String> conversionNames;\n-\n-        protected VideoService videoService = Framework.getService(VideoService.class);\n-\n-        public RecomputeRenditionsComputation() {\n-            super(ACTION_FULL_NAME);\n-        }\n-\n-        @Override\n-        public void startBucket(String bucketKey) {\n-            BulkCommand command = getCurrentCommand();\n-            xpath = command.getParam(PARAM_XPATH);\n-            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n-            if (conversionNames.isEmpty()) {\n-                conversionNames = videoService.getAvailableVideoConversions()\n-                                              .stream()\n-                                              .map(VideoConversion::getName)\n-                                              .collect(Collectors.toList());\n-            }\n-        }\n-\n-        @Override\n-        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n-                    ids);\n-            for (String docId : ids) {\n-                if (!session.exists(new IdRef(docId))) {\n-                    log.debug(\"Doc id doesn't exist: {}\", docId);\n-                    continue;\n-                }\n-\n-                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-                Property fileProp = workingDocument.getProperty(xpath);\n-                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n-                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n-                    continue;\n-                }\n-                Blob blob = (Blob) fileProp.getValue();\n-                if (blob == null) {\n-                    // do nothing\n-                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n-                    continue;\n-                }\n-                try {\n-                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-                    Video video = videoDoc.getVideo();\n-\n-                    for (String conversion : conversionNames) {\n-                        // here we want to commit the transaction since the video conversion can be very long\n-                        TransactionHelper.commitOrRollbackTransaction();\n-                        TranscodedVideo transcodedVideo = null;\n-                        try {\n-                            transcodedVideo = videoService.convert(video, conversion);\n-                        } catch (ConversionException e) {\n-                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n-                        }\n-                        TransactionHelper.startTransaction();\n-                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n-                    }\n-                } catch (DocumentNotFoundException e) {\n-                    // a parent of the document may have been deleted.\n-                    continue;\n-                } finally {\n-                    if (!TransactionHelper.isTransactionActive()) {\n-                        TransactionHelper.startTransaction();\n-                    }\n-                }\n-                workingDocument.refresh();\n-                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n-                Framework.getService(EventService.class).fireEvent(event);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n-                TranscodedVideo transcodedVideo) {\n-            DocumentModel doc = session.getDocument(docId);\n-            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n-            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n-            if (transcodedVideo != null) {\n-                transcodedVideos.add(transcodedVideo.toMap());\n-            }\n-            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n-            if (doc.isVersion()) {\n-                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-            }\n-            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-            session.saveDocument(doc);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxNjg3MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569816870", "bodyText": "Remove extra parentheses: if (!(fileProp instanceof Blob || fileProp instanceof BlobProperty))\nBut fileProp instanceof Blob is not possible, we always get a kind Property not a value.", "author": "efge", "createdAt": "2021-02-03T23:10:28Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\ndeleted file mode 100644\nindex 00e339ac7d3..00000000000\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ /dev/null\n\n@@ -1,181 +0,0 @@\n-/*\n- * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n-import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.convert.api.ConversionException;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described by the given xpath.\n- *\n- * @since 11.5\n- */\n-public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n-\n-    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n-\n-    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n-\n-    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-    public static final String PARAM_XPATH = \"xpath\";\n-\n-    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n-\n-    @Override\n-    public Topology getTopology(Map<String, String> options) {\n-        return Topology.builder()\n-                       .addComputation(RecomputeRenditionsComputation::new, //\n-                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n-                       .build();\n-    }\n-\n-    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-        protected String xpath;\n-\n-        protected List<String> conversionNames;\n-\n-        protected VideoService videoService = Framework.getService(VideoService.class);\n-\n-        public RecomputeRenditionsComputation() {\n-            super(ACTION_FULL_NAME);\n-        }\n-\n-        @Override\n-        public void startBucket(String bucketKey) {\n-            BulkCommand command = getCurrentCommand();\n-            xpath = command.getParam(PARAM_XPATH);\n-            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n-            if (conversionNames.isEmpty()) {\n-                conversionNames = videoService.getAvailableVideoConversions()\n-                                              .stream()\n-                                              .map(VideoConversion::getName)\n-                                              .collect(Collectors.toList());\n-            }\n-        }\n-\n-        @Override\n-        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n-                    ids);\n-            for (String docId : ids) {\n-                if (!session.exists(new IdRef(docId))) {\n-                    log.debug(\"Doc id doesn't exist: {}\", docId);\n-                    continue;\n-                }\n-\n-                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-                Property fileProp = workingDocument.getProperty(xpath);\n-                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n-                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n-                    continue;\n-                }\n-                Blob blob = (Blob) fileProp.getValue();\n-                if (blob == null) {\n-                    // do nothing\n-                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n-                    continue;\n-                }\n-                try {\n-                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-                    Video video = videoDoc.getVideo();\n-\n-                    for (String conversion : conversionNames) {\n-                        // here we want to commit the transaction since the video conversion can be very long\n-                        TransactionHelper.commitOrRollbackTransaction();\n-                        TranscodedVideo transcodedVideo = null;\n-                        try {\n-                            transcodedVideo = videoService.convert(video, conversion);\n-                        } catch (ConversionException e) {\n-                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n-                        }\n-                        TransactionHelper.startTransaction();\n-                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n-                    }\n-                } catch (DocumentNotFoundException e) {\n-                    // a parent of the document may have been deleted.\n-                    continue;\n-                } finally {\n-                    if (!TransactionHelper.isTransactionActive()) {\n-                        TransactionHelper.startTransaction();\n-                    }\n-                }\n-                workingDocument.refresh();\n-                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n-                Framework.getService(EventService.class).fireEvent(event);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n-                TranscodedVideo transcodedVideo) {\n-            DocumentModel doc = session.getDocument(docId);\n-            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n-            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n-            if (transcodedVideo != null) {\n-                transcodedVideos.add(transcodedVideo.toMap());\n-            }\n-            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n-            if (doc.isVersion()) {\n-                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-            }\n-            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-            session.saveDocument(doc);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxOTMyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569819320", "bodyText": "Instead of this try/finally block that has to do a check, it's better to enclose the inner par that needs to be outside a transaction with\n                 TransactionHelper.commitOrRollbackTransaction();\n                 try {\n                     TranscodedVideo transcodedVideo = null;\n                     try {\n                         transcodedVideo = videoService.convert(video, conversion);\n                     } catch (ConversionException e) {\n                         log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n                     }\n                 } finally {\n                     TransactionHelper.startTransaction();\n                 }\n\nWhich can be even reduced to:\n                 TranscodedVideo transcodedVideo;\n                 TransactionHelper.commitOrRollbackTransaction();\n                 try {\n                     transcodedVideo = videoService.convert(video, conversion);\n                 } catch (ConversionException e) {\n                     log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n                     transcodedVideo = null;\n                 } finally {\n                     TransactionHelper.startTransaction();\n                 }", "author": "efge", "createdAt": "2021-02-03T23:16:21Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                    continue;\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\ndeleted file mode 100644\nindex 00e339ac7d3..00000000000\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ /dev/null\n\n@@ -1,181 +0,0 @@\n-/*\n- * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n-import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.convert.api.ConversionException;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described by the given xpath.\n- *\n- * @since 11.5\n- */\n-public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n-\n-    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n-\n-    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n-\n-    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-    public static final String PARAM_XPATH = \"xpath\";\n-\n-    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n-\n-    @Override\n-    public Topology getTopology(Map<String, String> options) {\n-        return Topology.builder()\n-                       .addComputation(RecomputeRenditionsComputation::new, //\n-                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n-                       .build();\n-    }\n-\n-    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-        protected String xpath;\n-\n-        protected List<String> conversionNames;\n-\n-        protected VideoService videoService = Framework.getService(VideoService.class);\n-\n-        public RecomputeRenditionsComputation() {\n-            super(ACTION_FULL_NAME);\n-        }\n-\n-        @Override\n-        public void startBucket(String bucketKey) {\n-            BulkCommand command = getCurrentCommand();\n-            xpath = command.getParam(PARAM_XPATH);\n-            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n-            if (conversionNames.isEmpty()) {\n-                conversionNames = videoService.getAvailableVideoConversions()\n-                                              .stream()\n-                                              .map(VideoConversion::getName)\n-                                              .collect(Collectors.toList());\n-            }\n-        }\n-\n-        @Override\n-        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n-                    ids);\n-            for (String docId : ids) {\n-                if (!session.exists(new IdRef(docId))) {\n-                    log.debug(\"Doc id doesn't exist: {}\", docId);\n-                    continue;\n-                }\n-\n-                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-                Property fileProp = workingDocument.getProperty(xpath);\n-                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n-                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n-                    continue;\n-                }\n-                Blob blob = (Blob) fileProp.getValue();\n-                if (blob == null) {\n-                    // do nothing\n-                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n-                    continue;\n-                }\n-                try {\n-                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-                    Video video = videoDoc.getVideo();\n-\n-                    for (String conversion : conversionNames) {\n-                        // here we want to commit the transaction since the video conversion can be very long\n-                        TransactionHelper.commitOrRollbackTransaction();\n-                        TranscodedVideo transcodedVideo = null;\n-                        try {\n-                            transcodedVideo = videoService.convert(video, conversion);\n-                        } catch (ConversionException e) {\n-                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n-                        }\n-                        TransactionHelper.startTransaction();\n-                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n-                    }\n-                } catch (DocumentNotFoundException e) {\n-                    // a parent of the document may have been deleted.\n-                    continue;\n-                } finally {\n-                    if (!TransactionHelper.isTransactionActive()) {\n-                        TransactionHelper.startTransaction();\n-                    }\n-                }\n-                workingDocument.refresh();\n-                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n-                Framework.getService(EventService.class).fireEvent(event);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n-                TranscodedVideo transcodedVideo) {\n-            DocumentModel doc = session.getDocument(docId);\n-            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n-            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n-            if (transcodedVideo != null) {\n-                transcodedVideos.add(transcodedVideo.toMap());\n-            }\n-            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n-            if (doc.isVersion()) {\n-                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-            }\n-            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-            session.saveDocument(doc);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyMDM0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569820343", "bodyText": "new IdRef(workingDocument.getId()) -> workingDocument.getRef() but it's actually even simpler to use the local variable I suggested before, it's the same value.", "author": "efge", "createdAt": "2021-02-03T23:18:29Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                    continue;\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\ndeleted file mode 100644\nindex 00e339ac7d3..00000000000\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ /dev/null\n\n@@ -1,181 +0,0 @@\n-/*\n- * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n-import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.convert.api.ConversionException;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described by the given xpath.\n- *\n- * @since 11.5\n- */\n-public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n-\n-    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n-\n-    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n-\n-    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-    public static final String PARAM_XPATH = \"xpath\";\n-\n-    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n-\n-    @Override\n-    public Topology getTopology(Map<String, String> options) {\n-        return Topology.builder()\n-                       .addComputation(RecomputeRenditionsComputation::new, //\n-                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n-                       .build();\n-    }\n-\n-    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-        protected String xpath;\n-\n-        protected List<String> conversionNames;\n-\n-        protected VideoService videoService = Framework.getService(VideoService.class);\n-\n-        public RecomputeRenditionsComputation() {\n-            super(ACTION_FULL_NAME);\n-        }\n-\n-        @Override\n-        public void startBucket(String bucketKey) {\n-            BulkCommand command = getCurrentCommand();\n-            xpath = command.getParam(PARAM_XPATH);\n-            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n-            if (conversionNames.isEmpty()) {\n-                conversionNames = videoService.getAvailableVideoConversions()\n-                                              .stream()\n-                                              .map(VideoConversion::getName)\n-                                              .collect(Collectors.toList());\n-            }\n-        }\n-\n-        @Override\n-        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n-                    ids);\n-            for (String docId : ids) {\n-                if (!session.exists(new IdRef(docId))) {\n-                    log.debug(\"Doc id doesn't exist: {}\", docId);\n-                    continue;\n-                }\n-\n-                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-                Property fileProp = workingDocument.getProperty(xpath);\n-                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n-                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n-                    continue;\n-                }\n-                Blob blob = (Blob) fileProp.getValue();\n-                if (blob == null) {\n-                    // do nothing\n-                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n-                    continue;\n-                }\n-                try {\n-                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-                    Video video = videoDoc.getVideo();\n-\n-                    for (String conversion : conversionNames) {\n-                        // here we want to commit the transaction since the video conversion can be very long\n-                        TransactionHelper.commitOrRollbackTransaction();\n-                        TranscodedVideo transcodedVideo = null;\n-                        try {\n-                            transcodedVideo = videoService.convert(video, conversion);\n-                        } catch (ConversionException e) {\n-                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n-                        }\n-                        TransactionHelper.startTransaction();\n-                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n-                    }\n-                } catch (DocumentNotFoundException e) {\n-                    // a parent of the document may have been deleted.\n-                    continue;\n-                } finally {\n-                    if (!TransactionHelper.isTransactionActive()) {\n-                        TransactionHelper.startTransaction();\n-                    }\n-                }\n-                workingDocument.refresh();\n-                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n-                Framework.getService(EventService.class).fireEvent(event);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n-                TranscodedVideo transcodedVideo) {\n-            DocumentModel doc = session.getDocument(docId);\n-            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n-            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n-            if (transcodedVideo != null) {\n-                transcodedVideos.add(transcodedVideo.toMap());\n-            }\n-            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n-            if (doc.isVersion()) {\n-                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-            }\n-            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-            session.saveDocument(doc);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyMDg5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569820894", "bodyText": "The service could be put in a field of the computation as you did for videoService (which is allowed because computations aren't long-lived).", "author": "efge", "createdAt": "2021-02-03T23:19:49Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                    continue;\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                workingDocument.refresh();\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n+                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n+                Framework.getService(EventService.class).fireEvent(event);", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\ndeleted file mode 100644\nindex 00e339ac7d3..00000000000\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ /dev/null\n\n@@ -1,181 +0,0 @@\n-/*\n- * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n-import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.convert.api.ConversionException;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described by the given xpath.\n- *\n- * @since 11.5\n- */\n-public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n-\n-    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n-\n-    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n-\n-    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-    public static final String PARAM_XPATH = \"xpath\";\n-\n-    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n-\n-    @Override\n-    public Topology getTopology(Map<String, String> options) {\n-        return Topology.builder()\n-                       .addComputation(RecomputeRenditionsComputation::new, //\n-                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n-                       .build();\n-    }\n-\n-    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-        protected String xpath;\n-\n-        protected List<String> conversionNames;\n-\n-        protected VideoService videoService = Framework.getService(VideoService.class);\n-\n-        public RecomputeRenditionsComputation() {\n-            super(ACTION_FULL_NAME);\n-        }\n-\n-        @Override\n-        public void startBucket(String bucketKey) {\n-            BulkCommand command = getCurrentCommand();\n-            xpath = command.getParam(PARAM_XPATH);\n-            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n-            if (conversionNames.isEmpty()) {\n-                conversionNames = videoService.getAvailableVideoConversions()\n-                                              .stream()\n-                                              .map(VideoConversion::getName)\n-                                              .collect(Collectors.toList());\n-            }\n-        }\n-\n-        @Override\n-        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n-                    ids);\n-            for (String docId : ids) {\n-                if (!session.exists(new IdRef(docId))) {\n-                    log.debug(\"Doc id doesn't exist: {}\", docId);\n-                    continue;\n-                }\n-\n-                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-                Property fileProp = workingDocument.getProperty(xpath);\n-                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n-                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n-                    continue;\n-                }\n-                Blob blob = (Blob) fileProp.getValue();\n-                if (blob == null) {\n-                    // do nothing\n-                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n-                    continue;\n-                }\n-                try {\n-                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-                    Video video = videoDoc.getVideo();\n-\n-                    for (String conversion : conversionNames) {\n-                        // here we want to commit the transaction since the video conversion can be very long\n-                        TransactionHelper.commitOrRollbackTransaction();\n-                        TranscodedVideo transcodedVideo = null;\n-                        try {\n-                            transcodedVideo = videoService.convert(video, conversion);\n-                        } catch (ConversionException e) {\n-                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n-                        }\n-                        TransactionHelper.startTransaction();\n-                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n-                    }\n-                } catch (DocumentNotFoundException e) {\n-                    // a parent of the document may have been deleted.\n-                    continue;\n-                } finally {\n-                    if (!TransactionHelper.isTransactionActive()) {\n-                        TransactionHelper.startTransaction();\n-                    }\n-                }\n-                workingDocument.refresh();\n-                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n-                Framework.getService(EventService.class).fireEvent(event);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n-                TranscodedVideo transcodedVideo) {\n-            DocumentModel doc = session.getDocument(docId);\n-            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n-            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n-            if (transcodedVideo != null) {\n-                transcodedVideos.add(transcodedVideo.toMap());\n-            }\n-            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n-            if (doc.isVersion()) {\n-                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-            }\n-            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-            session.saveDocument(doc);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyMTQ2OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569821469", "bodyText": "Please set the @SuppressWarnings on the smallest possible scope, which I guess is the var transcodedVideos definition bellow.", "author": "efge", "createdAt": "2021-02-03T23:21:07Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                    continue;\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                workingDocument.refresh();\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n+                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n+                Framework.getService(EventService.class).fireEvent(event);\n+            }\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\ndeleted file mode 100644\nindex 00e339ac7d3..00000000000\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java\n+++ /dev/null\n\n@@ -1,181 +0,0 @@\n-/*\n- * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Charles Boidot\n- */\n-package org.nuxeo.ecm.platform.video.service;\n-\n-import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n-import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n-import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n-import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n-import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n-import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n-import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.nuxeo.ecm.core.api.Blob;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n-import org.nuxeo.ecm.core.api.IdRef;\n-import org.nuxeo.ecm.core.api.model.Property;\n-import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n-import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n-import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.core.convert.api.ConversionException;\n-import org.nuxeo.ecm.core.event.Event;\n-import org.nuxeo.ecm.core.event.EventService;\n-import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n-import org.nuxeo.ecm.platform.video.TranscodedVideo;\n-import org.nuxeo.ecm.platform.video.Video;\n-import org.nuxeo.ecm.platform.video.VideoDocument;\n-import org.nuxeo.lib.stream.computation.Topology;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.stream.StreamProcessorTopology;\n-import org.nuxeo.runtime.transaction.TransactionHelper;\n-\n-/**\n- * BAF Computation that fills video renditions for the blob property described by the given xpath.\n- *\n- * @since 11.5\n- */\n-public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n-\n-    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n-\n-    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n-\n-    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n-\n-    public static final String PARAM_XPATH = \"xpath\";\n-\n-    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n-\n-    @Override\n-    public Topology getTopology(Map<String, String> options) {\n-        return Topology.builder()\n-                       .addComputation(RecomputeRenditionsComputation::new, //\n-                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n-                       .build();\n-    }\n-\n-    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n-\n-        protected String xpath;\n-\n-        protected List<String> conversionNames;\n-\n-        protected VideoService videoService = Framework.getService(VideoService.class);\n-\n-        public RecomputeRenditionsComputation() {\n-            super(ACTION_FULL_NAME);\n-        }\n-\n-        @Override\n-        public void startBucket(String bucketKey) {\n-            BulkCommand command = getCurrentCommand();\n-            xpath = command.getParam(PARAM_XPATH);\n-            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n-            if (conversionNames.isEmpty()) {\n-                conversionNames = videoService.getAvailableVideoConversions()\n-                                              .stream()\n-                                              .map(VideoConversion::getName)\n-                                              .collect(Collectors.toList());\n-            }\n-        }\n-\n-        @Override\n-        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n-            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n-                    ids);\n-            for (String docId : ids) {\n-                if (!session.exists(new IdRef(docId))) {\n-                    log.debug(\"Doc id doesn't exist: {}\", docId);\n-                    continue;\n-                }\n-\n-                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n-                Property fileProp = workingDocument.getProperty(xpath);\n-                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n-                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n-                    continue;\n-                }\n-                Blob blob = (Blob) fileProp.getValue();\n-                if (blob == null) {\n-                    // do nothing\n-                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n-                    continue;\n-                }\n-                try {\n-                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n-                    Video video = videoDoc.getVideo();\n-\n-                    for (String conversion : conversionNames) {\n-                        // here we want to commit the transaction since the video conversion can be very long\n-                        TransactionHelper.commitOrRollbackTransaction();\n-                        TranscodedVideo transcodedVideo = null;\n-                        try {\n-                            transcodedVideo = videoService.convert(video, conversion);\n-                        } catch (ConversionException e) {\n-                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n-                        }\n-                        TransactionHelper.startTransaction();\n-                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n-                    }\n-                } catch (DocumentNotFoundException e) {\n-                    // a parent of the document may have been deleted.\n-                    continue;\n-                } finally {\n-                    if (!TransactionHelper.isTransactionActive()) {\n-                        TransactionHelper.startTransaction();\n-                    }\n-                }\n-                workingDocument.refresh();\n-                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n-                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n-                Framework.getService(EventService.class).fireEvent(event);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n-                TranscodedVideo transcodedVideo) {\n-            DocumentModel doc = session.getDocument(docId);\n-            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n-            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n-            if (transcodedVideo != null) {\n-                transcodedVideos.add(transcodedVideo.toMap());\n-            }\n-            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n-            if (doc.isVersion()) {\n-                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n-            }\n-            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n-            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n-            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n-            session.saveDocument(doc);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyMjIzOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569822239", "bodyText": "Add a blank line between these two.", "author": "efge", "createdAt": "2021-02-03T23:23:03Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\nsimilarity index 73%\nrename from modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\nrename to modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\nindex 01be7b10d65..abf996f1357 100644\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n+++ b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\n\n@@ -16,29 +16,35 @@\n  * Contributors:\n  *     Charles Boidot\n  */\n-package org.nuxeo.ecm.platform.video.service;\n+package org.nuxeo.ecm.platform.video.action;\n \n-import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAMES;\n-import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeTranscodedVideosComputation.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeTranscodedVideosComputation.PARAM_XPATH;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeVideoInfoComputation.ONLY_RECOMPUTE_MISSING_VIDEO_INFO;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n import org.nuxeo.runtime.api.Framework;\n \n /**\n  * @since 11.5\n  */\n public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+\n     @Override\n     protected List<String> getParametersToValidate() {\n-        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES);\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES, ONLY_RECOMPUTE_MISSING_VIDEO_INFO);\n     }\n \n     @Override\n     protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+        // Check generateVidInfoOnMissingOnly\n+        validateBoolean(ONLY_RECOMPUTE_MISSING_VIDEO_INFO, command);\n \n         // Check XPath\n         String xpath = command.getParam(PARAM_XPATH);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNDg1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569824850", "bodyText": "Could use streams too\nvideoService.getAvailableVideoConversions()\n            .stream()\n            .map(VideoConversion::getName)\n            .forEach(conversionNames::remove);", "author": "efge", "createdAt": "2021-02-03T23:29:26Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAMES, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAMES));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNames.remove(conversion.getName());\n+        }", "originalCommit": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNTc4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569825782", "bodyText": "As this stream pattern is being used a lot, maybe it's worth adding a new videoService.getAvailableVideoConversionNames() method...\n@troger @kevinleturc @ataillefer what do you think?", "author": "efge", "createdAt": "2021-02-03T23:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNDg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc4NzUzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r572787537", "bodyText": "A new method was added in VideoService -> videoService.getAvailableVideoConversionNames() to get a List of the conversion names.", "author": "charlesboidot", "createdAt": "2021-02-09T10:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNDg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "5630ba95c98c8c5bca233d302a37580fba70b42b", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\nsimilarity index 73%\nrename from modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\nrename to modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\nindex 01be7b10d65..abf996f1357 100644\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java\n+++ b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\n\n@@ -16,29 +16,35 @@\n  * Contributors:\n  *     Charles Boidot\n  */\n-package org.nuxeo.ecm.platform.video.service;\n+package org.nuxeo.ecm.platform.video.action;\n \n-import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAMES;\n-import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeTranscodedVideosComputation.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeTranscodedVideosComputation.PARAM_XPATH;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeVideoInfoComputation.ONLY_RECOMPUTE_MISSING_VIDEO_INFO;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n import org.nuxeo.runtime.api.Framework;\n \n /**\n  * @since 11.5\n  */\n public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+\n     @Override\n     protected List<String> getParametersToValidate() {\n-        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES);\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES, ONLY_RECOMPUTE_MISSING_VIDEO_INFO);\n     }\n \n     @Override\n     protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+        // Check generateVidInfoOnMissingOnly\n+        validateBoolean(ONLY_RECOMPUTE_MISSING_VIDEO_INFO, command);\n \n         // Check XPath\n         String xpath = command.getParam(PARAM_XPATH);\n"}}, {"oid": "5630ba95c98c8c5bca233d302a37580fba70b42b", "url": "https://github.com/nuxeo/nuxeo/commit/5630ba95c98c8c5bca233d302a37580fba70b42b", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-02-08T16:28:14Z", "type": "forcePushed"}, {"oid": "7ca3de2bf95b62c1d0273be6e15841f8f8cbedca", "url": "https://github.com/nuxeo/nuxeo/commit/7ca3de2bf95b62c1d0273be6e15841f8f8cbedca", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-02-08T16:39:21Z", "type": "forcePushed"}, {"oid": "76a9749ac1f7feb219eb96fcd8cf35b6bb2374b5", "url": "https://github.com/nuxeo/nuxeo/commit/76a9749ac1f7feb219eb96fcd8cf35b6bb2374b5", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-02-09T09:51:29Z", "type": "forcePushed"}, {"oid": "93be7968929ff73aa91f9685641ce3b78e3129e8", "url": "https://github.com/nuxeo/nuxeo/commit/93be7968929ff73aa91f9685641ce3b78e3129e8", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-02-09T10:42:09Z", "type": "forcePushed"}, {"oid": "7f65296ffe4d856b9b645436d34096d54cbce94c", "url": "https://github.com/nuxeo/nuxeo/commit/7f65296ffe4d856b9b645436d34096d54cbce94c", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-02-09T12:57:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY5MDUwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r575690500", "bodyText": "conversionNames.removeAll(videoService.getAvailableVideoConversionsNames())", "author": "efge", "createdAt": "2021-02-13T17:18:58Z", "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.action;\n+\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeTranscodedVideosComputation.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeTranscodedVideosComputation.PARAM_XPATH;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeVideoInfoComputation.ONLY_RECOMPUTE_MISSING_VIDEO_INFO;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES, ONLY_RECOMPUTE_MISSING_VIDEO_INFO);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+        // Check generateVidInfoOnMissingOnly\n+        validateBoolean(ONLY_RECOMPUTE_MISSING_VIDEO_INFO, command);\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAMES, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAMES));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNames.remove(conversion.getName());\n+        }", "originalCommit": "7f65296ffe4d856b9b645436d34096d54cbce94c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "69f2e7ed22e8ecfbd1984848a9e43424236d5548", "chunk": "diff --git a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\nindex abf996f1357..170172aadcf 100644\n--- a/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\n+++ b/modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java\n\n@@ -27,7 +27,6 @@ import java.util.List;\n \n import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n-import org.nuxeo.ecm.platform.video.service.VideoConversion;\n import org.nuxeo.ecm.platform.video.service.VideoService;\n import org.nuxeo.runtime.api.Framework;\n \n"}}, {"oid": "69f2e7ed22e8ecfbd1984848a9e43424236d5548", "url": "https://github.com/nuxeo/nuxeo/commit/69f2e7ed22e8ecfbd1984848a9e43424236d5548", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-06-14T12:50:04Z", "type": "forcePushed"}, {"oid": "b56b2705f081f88fa84dacc6015b84644709fbf9", "url": "https://github.com/nuxeo/nuxeo/commit/b56b2705f081f88fa84dacc6015b84644709fbf9", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-06-14T13:00:46Z", "type": "forcePushed"}, {"oid": "08e8d86a2b8677fa27497b6a6e45aaa0d9a0a44c", "url": "https://github.com/nuxeo/nuxeo/commit/08e8d86a2b8677fa27497b6a6e45aaa0d9a0a44c", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-07-06T14:37:44Z", "type": "forcePushed"}, {"oid": "10a000305a1536ee906847ea8b4abedcf0e5e185", "url": "https://github.com/nuxeo/nuxeo/commit/10a000305a1536ee906847ea8b4abedcf0e5e185", "message": "NXP-29815: cleanup / format", "committedDate": "2021-07-07T10:18:36Z", "type": "commit"}, {"oid": "d5864e6bd3d0551538403fc8509072f4f8042d6e", "url": "https://github.com/nuxeo/nuxeo/commit/d5864e6bd3d0551538403fc8509072f4f8042d6e", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-07-07T10:18:47Z", "type": "forcePushed"}, {"oid": "a3ae205d3a5129d6b802d26857b3755f9764bf49", "url": "https://github.com/nuxeo/nuxeo/commit/a3ae205d3a5129d6b802d26857b3755f9764bf49", "message": "NXP-29815: Add a way to customize the transaction timeout in a bulk computation", "committedDate": "2021-07-07T14:08:38Z", "type": "commit"}, {"oid": "080504ce6efa51a9443ba92bff69a8dc904a2e16", "url": "https://github.com/nuxeo/nuxeo/commit/080504ce6efa51a9443ba92bff69a8dc904a2e16", "message": "NXP-29815: Add a method to get the available conversions names", "committedDate": "2021-07-07T14:08:38Z", "type": "commit"}, {"oid": "cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c", "url": "https://github.com/nuxeo/nuxeo/commit/cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-07-07T14:08:40Z", "type": "commit"}, {"oid": "cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c", "url": "https://github.com/nuxeo/nuxeo/commit/cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c", "message": "NXP-29815: add an endpoint to recompute video renditions", "committedDate": "2021-07-07T14:08:40Z", "type": "forcePushed"}]}