{"pr_number": 4540, "pr_title": "10.10-HF/fix-NXP-25485-take-into-account-local-configuration-subtypes", "pr_createdAt": "2020-12-11T14:40:59Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4540", "timeline": [{"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "url": "https://github.com/nuxeo/nuxeo/commit/af6bd2624af6feb56528cf83e4631a5da2402ae4", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-14T09:35:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwNzAxMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544907011", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 11.4\n          \n          \n            \n             * @since 11.5", "author": "troger", "createdAt": "2020-12-17T08:41:25Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.4", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\nindex 55ea5664afb..0d829adcd66 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n\n@@ -43,7 +43,7 @@ import com.fasterxml.jackson.core.JsonGenerator;\n  * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n  * document taking account the local configuration.\n  *\n- * @since 11.4\n+ * @since 11.5\n  */\n @Setup(mode = SINGLETON, priority = REFERENCE)\n public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyMTkwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544921901", "bodyText": "What about extracting this logic in a dedicated protected method? So that people can easily extend this enricher without having to copy/paste the whole code.", "author": "troger", "createdAt": "2020-12-17T09:04:20Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.4\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        Collection<String> subtypes = new HashSet<String>();\n+\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+            if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+                String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                        UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+                String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                        UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+\n+                List<String> allowedTypes = new ArrayList<>();\n+                List<String> deniedTypes = new ArrayList<>();\n+                if (allowedTypesProperty != null) {\n+                    allowedTypes = Arrays.asList(allowedTypesProperty);\n+                }\n+                if (deniedTypesProperty != null) {\n+                    deniedTypes = Arrays.asList(deniedTypesProperty);\n+                }\n+                if (!(allowedTypes.isEmpty() && deniedTypes.isEmpty())) {\n+                    for (String subtype : defaultSubtypes) {\n+                        if (!deniedTypes.contains(subtype)\n+                                && (allowedTypes.isEmpty() || allowedTypes.contains(subtype))) {\n+                            subtypes.add(subtype);\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            subtypes.addAll(defaultSubtypes);\n+        }", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\nindex 55ea5664afb..0d829adcd66 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n\n@@ -43,7 +43,7 @@ import com.fasterxml.jackson.core.JsonGenerator;\n  * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n  * document taking account the local configuration.\n  *\n- * @since 11.4\n+ * @since 11.5\n  */\n @Setup(mode = SINGLETON, priority = REFERENCE)\n public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMDM3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544930371", "bodyText": "Remove blank line.", "author": "troger", "createdAt": "2020-12-17T09:17:22Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -59,10 +67,15 @@ public void setup() {\n \n     }\n \n+    /**\n+     * @since 11.5\n+     */\n+", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java b/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\nindex e79d985de22..8269b8fae37 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\n\n@@ -70,7 +69,6 @@ public class SubtypesJsonEnricherTest extends AbstractJsonWriterTest.Local<Docum\n     /**\n      * @since 11.5\n      */\n-\n     @Test\n     public void testSubtypes() throws Exception {\n         DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMDcyNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544930724", "bodyText": "Remove blank line.", "author": "troger", "createdAt": "2020-12-17T09:17:56Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -95,4 +108,20 @@ public void test() throws Exception {\n         json.childrenContains(\"type\", \"DummyDoc\");\n     }\n \n-}\n\\ No newline at end of file\n+    @Test\n+    public void testSubtypesWithLocalConfiguration() throws Exception {\n+", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java b/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\nindex e79d985de22..8269b8fae37 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\n\n@@ -109,13 +107,57 @@ public class SubtypesJsonEnricherTest extends AbstractJsonWriterTest.Local<Docum\n     }\n \n     @Test\n-    public void testSubtypesWithLocalConfiguration() throws Exception {\n+    public void testLocalConfigurationAllowedSubtypes() throws Exception {\n+        DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n+        folderRoot.addFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET);\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY,\n+                (Serializable) Arrays.asList(\"MyFolder\"));\n+        RenderingContext ctx = RenderingContext.CtxBuilder.enrichDoc(\"subtypes\").get();\n+        JsonAssert json = jsonAssert(folderRoot, ctx);\n+        json = json.has(\"contextParameters\").isObject();\n+        json.properties(1);\n+        json = json.has(\"subtypes\").isArray();\n+        json = json.length(1);\n+        json.childrenContains(\"type\", \"MyFolder\");\n+    }\n \n+    @Test\n+    public void testLocalConfigurationDeniedSubtypes() throws Exception {\n         DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n-        folderRoot.addFacet(UI_TYPES_CONFIGURATION_FACET);\n-        folderRoot.setPropertyValue(UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY,\n+        folderRoot.addFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET);\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY,\n                 (Serializable) Arrays.asList(\"MyFolder\"));\n+        RenderingContext ctx = RenderingContext.CtxBuilder.enrichDoc(\"subtypes\").get();\n+        JsonAssert json = jsonAssert(folderRoot, ctx);\n+        json = json.has(\"contextParameters\").isObject();\n+        json.properties(1);\n+        json = json.has(\"subtypes\").isArray();\n+        json = json.length(1);\n+        json.childrenContains(\"type\", \"MyFolder2\");\n+    }\n \n+    @Test\n+    public void testLocalConfigurationDenyAllSubtypes() throws Exception {\n+        DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n+        folderRoot.addFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET);\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY,\n+                Boolean.TRUE);\n+        RenderingContext ctx = RenderingContext.CtxBuilder.enrichDoc(\"subtypes\").get();\n+        JsonAssert json = jsonAssert(folderRoot, ctx);\n+        json = json.has(\"contextParameters\").isObject();\n+        json.properties(1);\n+        json = json.has(\"subtypes\").isArray();\n+        json = json.length(0);\n+    }\n+\n+    @Test\n+    public void testLocalConfigurationSubtypes() throws Exception {\n+        DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n+        folderRoot.addFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET);\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY,\n+                (Serializable) Arrays.asList(\"MyFolder\"));\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY,\n+                (Serializable) Arrays.asList(\"MyFolder2\"));\n         RenderingContext ctx = RenderingContext.CtxBuilder.enrichDoc(\"subtypes\").get();\n         JsonAssert json = jsonAssert(folderRoot, ctx);\n         json = json.has(\"contextParameters\").isObject();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMjMyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544932323", "bodyText": "Worth adding more tests to validate the whole enricher:\n\ndenyAllTypes\nallowedTypes\ndeniedTypes\nmix of properties", "author": "troger", "createdAt": "2020-12-17T09:20:19Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -95,4 +108,20 @@ public void test() throws Exception {\n         json.childrenContains(\"type\", \"DummyDoc\");\n     }\n \n-}\n\\ No newline at end of file\n+    @Test\n+    public void testSubtypesWithLocalConfiguration() throws Exception {", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java b/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\nindex e79d985de22..8269b8fae37 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\n\n@@ -109,13 +107,57 @@ public class SubtypesJsonEnricherTest extends AbstractJsonWriterTest.Local<Docum\n     }\n \n     @Test\n-    public void testSubtypesWithLocalConfiguration() throws Exception {\n+    public void testLocalConfigurationAllowedSubtypes() throws Exception {\n+        DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n+        folderRoot.addFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET);\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY,\n+                (Serializable) Arrays.asList(\"MyFolder\"));\n+        RenderingContext ctx = RenderingContext.CtxBuilder.enrichDoc(\"subtypes\").get();\n+        JsonAssert json = jsonAssert(folderRoot, ctx);\n+        json = json.has(\"contextParameters\").isObject();\n+        json.properties(1);\n+        json = json.has(\"subtypes\").isArray();\n+        json = json.length(1);\n+        json.childrenContains(\"type\", \"MyFolder\");\n+    }\n \n+    @Test\n+    public void testLocalConfigurationDeniedSubtypes() throws Exception {\n         DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n-        folderRoot.addFacet(UI_TYPES_CONFIGURATION_FACET);\n-        folderRoot.setPropertyValue(UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY,\n+        folderRoot.addFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET);\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY,\n                 (Serializable) Arrays.asList(\"MyFolder\"));\n+        RenderingContext ctx = RenderingContext.CtxBuilder.enrichDoc(\"subtypes\").get();\n+        JsonAssert json = jsonAssert(folderRoot, ctx);\n+        json = json.has(\"contextParameters\").isObject();\n+        json.properties(1);\n+        json = json.has(\"subtypes\").isArray();\n+        json = json.length(1);\n+        json.childrenContains(\"type\", \"MyFolder2\");\n+    }\n \n+    @Test\n+    public void testLocalConfigurationDenyAllSubtypes() throws Exception {\n+        DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n+        folderRoot.addFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET);\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY,\n+                Boolean.TRUE);\n+        RenderingContext ctx = RenderingContext.CtxBuilder.enrichDoc(\"subtypes\").get();\n+        JsonAssert json = jsonAssert(folderRoot, ctx);\n+        json = json.has(\"contextParameters\").isObject();\n+        json.properties(1);\n+        json = json.has(\"subtypes\").isArray();\n+        json = json.length(0);\n+    }\n+\n+    @Test\n+    public void testLocalConfigurationSubtypes() throws Exception {\n+        DocumentModel folderRoot = session.getDocument(new PathRef(\"/folder_root\"));\n+        folderRoot.addFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET);\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY,\n+                (Serializable) Arrays.asList(\"MyFolder\"));\n+        folderRoot.setPropertyValue(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY,\n+                (Serializable) Arrays.asList(\"MyFolder2\"));\n         RenderingContext ctx = RenderingContext.CtxBuilder.enrichDoc(\"subtypes\").get();\n         JsonAssert json = jsonAssert(folderRoot, ctx);\n         json = json.has(\"contextParameters\").isObject();\n"}}, {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "url": "https://github.com/nuxeo/nuxeo/commit/82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-17T10:32:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMTUxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545221519", "bodyText": "You can use Set directly instead of Collection, furthermore, there's no need to declare the type in the HashSet implementation, this line would be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collection<String> subtypes = new HashSet<String>();\n          \n          \n            \n                    Set<String> subtypes = new HashSet<>();", "author": "kevinleturc", "createdAt": "2020-12-17T16:23:45Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();", "originalCommit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37603cc31c53f87a078d0130f2d4f10e2c8f8090", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\nindex 0d829adcd66..953e0c99ff3 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n\n@@ -19,14 +19,14 @@\n \n package org.nuxeo.ecm.platform.types;\n \n+import static java.util.stream.Collectors.toSet;\n import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.HashSet;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.commons.lang3.BooleanUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyOTk2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545229961", "bodyText": "You could use a ternary expression such as below:\nList<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);", "author": "kevinleturc", "createdAt": "2020-12-17T16:35:00Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = new ArrayList<>();\n+            List<String> deniedTypes = new ArrayList<>();\n+            if (allowedTypesProperty != null) {\n+                allowedTypes = Arrays.asList(allowedTypesProperty);\n+            }\n+            if (deniedTypesProperty != null) {\n+                deniedTypes = Arrays.asList(deniedTypesProperty);\n+            }", "originalCommit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37603cc31c53f87a078d0130f2d4f10e2c8f8090", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\nindex 0d829adcd66..953e0c99ff3 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n\n@@ -19,14 +19,14 @@\n \n package org.nuxeo.ecm.platform.types;\n \n+import static java.util.stream.Collectors.toSet;\n import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.HashSet;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.commons.lang3.BooleanUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjI2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545236266", "bodyText": "allowedTypes.isEmpty() in the second if is always false, you can remove it.\nWe could use the Stream API there, with something such as below:\nimport static java.util.stream.Collectors.toSet;\n\nreturn defaultSubtypes.stream().filter(s -> !deniedTypes.contains(s)).filter(allowedTypes::contains).collect(toSet());\nThe proposed return will make the subtypes useless, you can replace the last return with a Collections.emptySet().", "author": "kevinleturc", "createdAt": "2020-12-17T16:43:10Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = new ArrayList<>();\n+            List<String> deniedTypes = new ArrayList<>();\n+            if (allowedTypesProperty != null) {\n+                allowedTypes = Arrays.asList(allowedTypesProperty);\n+            }\n+            if (deniedTypesProperty != null) {\n+                deniedTypes = Arrays.asList(deniedTypesProperty);\n+            }\n+            if (!(allowedTypes.isEmpty() && deniedTypes.isEmpty())) {\n+                for (String subtype : defaultSubtypes) {\n+                    if (!deniedTypes.contains(subtype) && (allowedTypes.isEmpty() || allowedTypes.contains(subtype))) {\n+                        subtypes.add(subtype);\n+                    }\n+                }\n+            }", "originalCommit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1NzIxNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545757215", "bodyText": "allowedTypes.isEmpty() could be true if we only put deniedTypes so this case has to be considered. In the case where allowedTypes is empty we need to consider all the subtypes defined by the document type.", "author": "charlesboidot", "createdAt": "2020-12-18T10:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "37603cc31c53f87a078d0130f2d4f10e2c8f8090", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\nindex 0d829adcd66..953e0c99ff3 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n\n@@ -19,14 +19,14 @@\n \n package org.nuxeo.ecm.platform.types;\n \n+import static java.util.stream.Collectors.toSet;\n import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.HashSet;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.commons.lang3.BooleanUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjY5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545236691", "bodyText": "Could you put fields before the constructor?", "author": "kevinleturc", "createdAt": "2020-12-17T16:43:45Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2016 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Gabriel Barata <gbarata@nuxeo.com>\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.JsonAssert;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+/**\n+ * @since 8.4\n+ */\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.core.io:OSGI-INF/doc-type-contrib.xml\")\n+public class SubtypesJsonEnricherTest extends AbstractJsonWriterTest.Local<DocumentModelJsonWriter, DocumentModel> {\n+\n+    public SubtypesJsonEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    private CoreSession session;", "originalCommit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37603cc31c53f87a078d0130f2d4f10e2c8f8090", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java b/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\nindex 8269b8fae37..e896ad5a6e7 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java\n\n@@ -48,13 +48,13 @@ import org.nuxeo.runtime.test.runner.Features;\n @Deploy(\"org.nuxeo.ecm.core.io:OSGI-INF/doc-type-contrib.xml\")\n public class SubtypesJsonEnricherTest extends AbstractJsonWriterTest.Local<DocumentModelJsonWriter, DocumentModel> {\n \n+    @Inject\n+    private CoreSession session;\n+\n     public SubtypesJsonEnricherTest() {\n         super(DocumentModelJsonWriter.class, DocumentModel.class);\n     }\n \n-    @Inject\n-    private CoreSession session;\n-\n     @Before\n     public void setup() {\n         DocumentModel document = session.createDocumentModel(\"/\", \"folder_root\", \"MyFolderRoot\");\n"}}, {"oid": "37603cc31c53f87a078d0130f2d4f10e2c8f8090", "url": "https://github.com/nuxeo/nuxeo/commit/37603cc31c53f87a078d0130f2d4f10e2c8f8090", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-18T10:48:50Z", "type": "forcePushed"}, {"oid": "0611dd0928203d419f00b0172b3ce59f9b4f7a78", "url": "https://github.com/nuxeo/nuxeo/commit/0611dd0928203d419f00b0172b3ce59f9b4f7a78", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-18T10:56:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgxMzc0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545813745", "bodyText": "Could you format/indent the class?", "author": "kevinleturc", "createdAt": "2020-12-18T12:56:23Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static java.util.stream.Collectors.toSet;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);\n+            List<String> deniedTypes = deniedTypesProperty == null ? Collections.emptyList() : Arrays.asList(deniedTypesProperty);\n+            return defaultSubtypes.stream().filter(s -> !deniedTypes.contains(s)).filter(s -> allowedTypes.contains(s) || allowedTypes.isEmpty()).collect(toSet());\n+        }\n+        return Collections.emptySet();\n+    }", "originalCommit": "0611dd0928203d419f00b0172b3ce59f9b4f7a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "chunk": "diff --git a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\nindex 6c45871001e..512da0b68d1 100644\n--- a/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n+++ b/nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java\n\n@@ -90,9 +90,14 @@ public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n                     UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n             String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n                     UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n-            List<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);\n-            List<String> deniedTypes = deniedTypesProperty == null ? Collections.emptyList() : Arrays.asList(deniedTypesProperty);\n-            return defaultSubtypes.stream().filter(s -> !deniedTypes.contains(s)).filter(s -> allowedTypes.contains(s) || allowedTypes.isEmpty()).collect(toSet());\n+            List<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList()\n+                    : Arrays.asList(allowedTypesProperty);\n+            List<String> deniedTypes = deniedTypesProperty == null ? Collections.emptyList()\n+                    : Arrays.asList(deniedTypesProperty);\n+            return defaultSubtypes.stream()\n+                                  .filter(s -> !deniedTypes.contains(s))\n+                                  .filter(s -> allowedTypes.contains(s) || allowedTypes.isEmpty())\n+                                  .collect(toSet());\n         }\n         return Collections.emptySet();\n     }\n"}}, {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "url": "https://github.com/nuxeo/nuxeo/commit/f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-18T12:58:09Z", "type": "commit"}, {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "url": "https://github.com/nuxeo/nuxeo/commit/f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-18T12:58:09Z", "type": "forcePushed"}]}