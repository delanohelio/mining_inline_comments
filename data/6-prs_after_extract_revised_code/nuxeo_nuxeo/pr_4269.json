{"pr_number": 4269, "pr_title": "Feature nxp 22843 checkers es kafka", "pr_createdAt": "2020-08-20T12:55:25Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4269", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1Mjk1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r473952950", "bodyText": "What about replacing current logger by the Log4j2 one and using the lambda feature?", "author": "kevinleturc", "createdAt": "2020-08-20T13:04:28Z", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java", "diffHunk": "@@ -132,31 +132,45 @@ protected RetryPolicy buildRetryPolicy() {\n \n         if (checkers == null) {\n             checkers = new HashSet<>();\n-\n-            for (String template : configurationGenerator.getTemplateList()) {\n+            List<String> items = configurationGenerator.getTemplateList();\n+            // Add backing without template\n+            items.add(\"elasticsearch\");\n+            items.add(\"kafka\");\n+            for (String item : items) {\n                 try {\n-                    File templateDir = configurationGenerator.getTemplateDirectory(template);\n-                    String classPath = getClasspathForTemplate(template);\n+                    log.debug(\"checker: \" + item);\n+                    File templateDir = getTemplateDir(item);\n+                    String classPath = getClasspathForTemplate(item);\n                     String checkClass = configurationGenerator.getUserConfig()\n-                                                              .getProperty(template + PARAM_CHECK_SUFFIX);\n-\n+                                                              .getProperty(item + PARAM_CHECK_SUFFIX);\n                     Optional<URLClassLoader> ucl = getClassLoaderForTemplate(templateDir, classPath);\n                     if (ucl.isPresent()) {\n                         Class<?> klass = Class.forName(checkClass, true, ucl.get());\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Adding checker \" + item + \" with class path: \"\n+                                    + Arrays.toString(ucl.get().getURLs()));\n+                        }", "originalCommit": "5c302822fbebc5587839f7e3a764920d319f3b57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMDQwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r474500402", "bodyText": "good point added a commit for that", "author": "bdelbosc", "createdAt": "2020-08-21T08:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1Mjk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java b/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\nindex 83e5755d8b0..a5d45cdb280 100644\n--- a/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\n+++ b/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\n\n@@ -138,7 +138,7 @@ public class BackingServiceConfigurator {\n             items.add(\"kafka\");\n             for (String item : items) {\n                 try {\n-                    log.debug(\"checker: \" + item);\n+                    log.debug(\"checker: {}\", item);\n                     File templateDir = getTemplateDir(item);\n                     String classPath = getClasspathForTemplate(item);\n                     String checkClass = configurationGenerator.getUserConfig()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMTU4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476421584", "bodyText": "missing newline", "author": "ataillefer", "createdAt": "2020-08-25T12:49:27Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);", "originalCommit": "faf79d2c8cd306649700c43e9e9589926ea7b64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwODQ5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r477108499", "bodyText": "are you sure? my editor doesn't do that after a class, looks like common practice on others files", "author": "bdelbosc", "createdAt": "2020-08-26T07:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMTU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0ODE2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r477148164", "bodyText": "if we want this behavior it needs to be enforced by our formatting rules", "author": "bdelbosc", "createdAt": "2020-08-26T09:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMTU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\nindex ceae624337e..142c9332bea 100644\n--- a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n+++ b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n\n@@ -43,9 +43,9 @@ import org.nuxeo.launcher.config.backingservices.BackingChecker;\n public class ElasticSearchChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n \n-    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+    protected static final String ELASTIC_ENABLED_PROP = \"elasticsearch.enabled\";\n \n-    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+    protected static final String ELASTIC_REST_CLIENT_PROP = \"elasticsearch.client\";\n \n     protected static final String ADDRESS_LIST_OPT = \"addressList\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyNTY5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476425692", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n          \n          \n            \n                    if (!Boolean.valueOf(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {", "author": "ataillefer", "createdAt": "2020-08-25T12:55:24Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {", "originalCommit": "faf79d2c8cd306649700c43e9e9589926ea7b64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzMDg0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476530848", "bodyText": "Actually Boolean.valueOf -> Boolean.parseBoolean", "author": "efge", "createdAt": "2020-08-25T15:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyNTY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMDkwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r477120905", "bodyText": "Using Boolean.parseBoolean will trigger the checker for value likeTrue or TRUE,\nbut in our template system, the feature will not be activated (only true is taken in account)\nthis will lead to buggy behavior.", "author": "bdelbosc", "createdAt": "2020-08-26T08:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyNTY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyNTk0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r477325945", "bodyText": "Worth a comment though, so that others don't refactor the code later in the way we just suggested here...", "author": "efge", "createdAt": "2020-08-26T14:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyNTY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\nindex ceae624337e..142c9332bea 100644\n--- a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n+++ b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n\n@@ -43,9 +43,9 @@ import org.nuxeo.launcher.config.backingservices.BackingChecker;\n public class ElasticSearchChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n \n-    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+    protected static final String ELASTIC_ENABLED_PROP = \"elasticsearch.enabled\";\n \n-    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+    protected static final String ELASTIC_REST_CLIENT_PROP = \"elasticsearch.client\";\n \n     protected static final String ADDRESS_LIST_OPT = \"addressList\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyNjUzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476426533", "bodyText": "ELASTIC_ENABLED_PROPERTY or ELASTIC_ENABLED_PROP?", "author": "ataillefer", "createdAt": "2020-08-25T12:56:11Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";", "originalCommit": "faf79d2c8cd306649700c43e9e9589926ea7b64f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\nindex ceae624337e..142c9332bea 100644\n--- a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n+++ b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n\n@@ -43,9 +43,9 @@ import org.nuxeo.launcher.config.backingservices.BackingChecker;\n public class ElasticSearchChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n \n-    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+    protected static final String ELASTIC_ENABLED_PROP = \"elasticsearch.enabled\";\n \n-    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+    protected static final String ELASTIC_REST_CLIENT_PROP = \"elasticsearch.client\";\n \n     protected static final String ADDRESS_LIST_OPT = \"addressList\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyODU3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476428578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (addressList == null || addressList.isEmpty()) {\n          \n          \n            \n                    if (StringUtils.isEmpty(addressList)) {\n          \n      \n    \n    \n  \n\ncommons-lang3 is in the module's dependencies", "author": "ataillefer", "createdAt": "2020-08-25T12:59:11Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because elasticsearch is disabled\");\n+            return false;\n+        }\n+        if (!\"RestClient\".equals(cg.getUserConfig().getProperty(ELASTIC_REST_CLIENT_OPT))) {\n+            log.debug(\"Checker skipped because not using a rest client\");\n+            return false;\n+        }\n+        log.debug(\"Checker accepted\");\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        ElasticSearchClientConfig config = getConfig(cg);\n+        String addressList = config.getOption(ADDRESS_LIST_OPT);\n+        if (addressList == null || addressList.isEmpty()) {", "originalCommit": "faf79d2c8cd306649700c43e9e9589926ea7b64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyNjE4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r477126188", "bodyText": "yes I will do that if there is more than one usage", "author": "bdelbosc", "createdAt": "2020-08-26T08:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyODU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\nindex ceae624337e..142c9332bea 100644\n--- a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n+++ b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n\n@@ -43,9 +43,9 @@ import org.nuxeo.launcher.config.backingservices.BackingChecker;\n public class ElasticSearchChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n \n-    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+    protected static final String ELASTIC_ENABLED_PROP = \"elasticsearch.enabled\";\n \n-    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+    protected static final String ELASTIC_REST_CLIENT_PROP = \"elasticsearch.client\";\n \n     protected static final String ADDRESS_LIST_OPT = \"addressList\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyOTMwMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476429303", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"Check elastic config skipped on embedded configuration\");\n          \n          \n            \n                        log.debug(\"Elasticsearch config check skipped on embedded configuration\");", "author": "ataillefer", "createdAt": "2020-08-25T13:00:18Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because elasticsearch is disabled\");\n+            return false;\n+        }\n+        if (!\"RestClient\".equals(cg.getUserConfig().getProperty(ELASTIC_REST_CLIENT_OPT))) {\n+            log.debug(\"Checker skipped because not using a rest client\");\n+            return false;\n+        }\n+        log.debug(\"Checker accepted\");\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        ElasticSearchClientConfig config = getConfig(cg);\n+        String addressList = config.getOption(ADDRESS_LIST_OPT);\n+        if (addressList == null || addressList.isEmpty()) {\n+            log.debug(\"Check elastic config skipped on embedded configuration\");", "originalCommit": "faf79d2c8cd306649700c43e9e9589926ea7b64f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\nindex ceae624337e..142c9332bea 100644\n--- a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n+++ b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n\n@@ -43,9 +43,9 @@ import org.nuxeo.launcher.config.backingservices.BackingChecker;\n public class ElasticSearchChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n \n-    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+    protected static final String ELASTIC_ENABLED_PROP = \"elasticsearch.enabled\";\n \n-    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+    protected static final String ELASTIC_REST_CLIENT_PROP = \"elasticsearch.client\";\n \n     protected static final String ADDRESS_LIST_OPT = \"addressList\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMzg0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476433848", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ConfigurationException(\"Unable to connect to Elasticsearch \" + config.getOption(ADDRESS_LIST_OPT),\n          \n          \n            \n                        throw new ConfigurationException(\"Unable to connect to Elasticsearch: \" + config.getOption(ADDRESS_LIST_OPT),", "author": "ataillefer", "createdAt": "2020-08-25T13:07:38Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because elasticsearch is disabled\");\n+            return false;\n+        }\n+        if (!\"RestClient\".equals(cg.getUserConfig().getProperty(ELASTIC_REST_CLIENT_OPT))) {\n+            log.debug(\"Checker skipped because not using a rest client\");\n+            return false;\n+        }\n+        log.debug(\"Checker accepted\");\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        ElasticSearchClientConfig config = getConfig(cg);\n+        String addressList = config.getOption(ADDRESS_LIST_OPT);\n+        if (addressList == null || addressList.isEmpty()) {\n+            log.debug(\"Check elastic config skipped on embedded configuration\");\n+            return;\n+        }\n+        log.debug(\"Check elastic config: {}\", config);\n+        ClusterHealthStatus status = getHealthStatus(config);\n+        switch (status) {\n+        case GREEN:\n+        case YELLOW:\n+            log.debug(\"check is ok, cluster health is {}\", status);\n+            return;\n+        default:\n+            throw new ConfigurationException(\"Elasticsearch cluster is not healthy: \" + status);\n+        }\n+    }\n+\n+    protected ClusterHealthStatus getHealthStatus(ElasticSearchClientConfig config) throws ConfigurationException {\n+        try {\n+            ESClient client = getClient(config);\n+            return client.getHealthStatus(null);\n+        } catch (Exception e) {\n+            throw new ConfigurationException(\"Unable to connect to Elasticsearch \" + config.getOption(ADDRESS_LIST_OPT),", "originalCommit": "faf79d2c8cd306649700c43e9e9589926ea7b64f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\nindex ceae624337e..142c9332bea 100644\n--- a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n+++ b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n\n@@ -43,9 +43,9 @@ import org.nuxeo.launcher.config.backingservices.BackingChecker;\n public class ElasticSearchChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n \n-    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+    protected static final String ELASTIC_ENABLED_PROP = \"elasticsearch.enabled\";\n \n-    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+    protected static final String ELASTIC_REST_CLIENT_PROP = \"elasticsearch.client\";\n \n     protected static final String ADDRESS_LIST_OPT = \"addressList\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzNzQ4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476437488", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ConfigurationException(\"Fail to load ElasticSearchClientConfig from \" + file.getAbsolutePath(),\n          \n          \n            \n                        throw new ConfigurationException(\"Failed to load ElasticSearchClientConfig from \" + file.getAbsolutePath(),", "author": "ataillefer", "createdAt": "2020-08-25T13:13:03Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because elasticsearch is disabled\");\n+            return false;\n+        }\n+        if (!\"RestClient\".equals(cg.getUserConfig().getProperty(ELASTIC_REST_CLIENT_OPT))) {\n+            log.debug(\"Checker skipped because not using a rest client\");\n+            return false;\n+        }\n+        log.debug(\"Checker accepted\");\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        ElasticSearchClientConfig config = getConfig(cg);\n+        String addressList = config.getOption(ADDRESS_LIST_OPT);\n+        if (addressList == null || addressList.isEmpty()) {\n+            log.debug(\"Check elastic config skipped on embedded configuration\");\n+            return;\n+        }\n+        log.debug(\"Check elastic config: {}\", config);\n+        ClusterHealthStatus status = getHealthStatus(config);\n+        switch (status) {\n+        case GREEN:\n+        case YELLOW:\n+            log.debug(\"check is ok, cluster health is {}\", status);\n+            return;\n+        default:\n+            throw new ConfigurationException(\"Elasticsearch cluster is not healthy: \" + status);\n+        }\n+    }\n+\n+    protected ClusterHealthStatus getHealthStatus(ElasticSearchClientConfig config) throws ConfigurationException {\n+        try {\n+            ESClient client = getClient(config);\n+            return client.getHealthStatus(null);\n+        } catch (Exception e) {\n+            throw new ConfigurationException(\"Unable to connect to Elasticsearch \" + config.getOption(ADDRESS_LIST_OPT),\n+                    e);\n+        }\n+    }\n+\n+    protected ESClient getClient(ElasticSearchClientConfig config) {\n+        ESClientFactory clientFactory = new ESRestClientFactory();\n+        return clientFactory.create(null, config);\n+    }\n+\n+    protected ElasticSearchClientConfig getConfig(ConfigurationGenerator cg) throws ConfigurationException {\n+        File configFile = new File(cg.getConfigDir(), CONFIG_NAME);\n+        if (!configFile.exists()) {\n+            throw new ConfigurationException(\"Cannot find Elasticsearch configuration: \" + CONFIG_NAME);\n+        }\n+        return getDescriptor(configFile);\n+    }\n+\n+    protected ElasticSearchClientConfig getDescriptor(File file) throws ConfigurationException {\n+        XMap xmap = new XMap();\n+        xmap.register(ElasticSearchClientConfig.class);\n+        try {\n+            // avoid XMap to fail when trying to load class value by removing class attribute\n+            String content = Files.readString(file.toPath(), StandardCharsets.UTF_8);\n+            content = content.replace(\"class=\", \"ignore=\");\n+            InputStream inStream = new ByteArrayInputStream(content.getBytes());\n+            Object[] nodes = xmap.loadAll(inStream);\n+            for (Object node : nodes) {\n+                if (node != null) {\n+                    return (ElasticSearchClientConfig) node;\n+                }\n+            }\n+            throw new ConfigurationException(\"No ElasticSearchClientConfig found in \" + file.getAbsolutePath());\n+        } catch (IOException e) {\n+            throw new ConfigurationException(\"Fail to load ElasticSearchClientConfig from \" + file.getAbsolutePath(),", "originalCommit": "faf79d2c8cd306649700c43e9e9589926ea7b64f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\nindex ceae624337e..142c9332bea 100644\n--- a/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n+++ b/modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java\n\n@@ -43,9 +43,9 @@ import org.nuxeo.launcher.config.backingservices.BackingChecker;\n public class ElasticSearchChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n \n-    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+    protected static final String ELASTIC_ENABLED_PROP = \"elasticsearch.enabled\";\n \n-    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+    protected static final String ELASTIC_REST_CLIENT_PROP = \"elasticsearch.client\";\n \n     protected static final String ADDRESS_LIST_OPT = \"addressList\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MDk5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476440992", "bodyText": "missing newline", "author": "ataillefer", "createdAt": "2020-08-25T13:18:23Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.kafka;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class KafkaChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(KafkaChecker.class);", "originalCommit": "5c302822fbebc5587839f7e3a764920d319f3b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java b/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\nindex 21c8e9b1a4b..102befff07f 100644\n--- a/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\n+++ b/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\n\n@@ -38,13 +38,13 @@ import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n public class KafkaChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n \n-    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";\n+    private static final String KAFKA_ENABLED_PROP = \"kafka.enabled\";\n \n     private static final String CONFIG_NAME = \"kafka-config.xml\";\n \n     @Override\n     public boolean accepts(ConfigurationGenerator cg) {\n-        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_PROP))) {\n             log.debug(\"Checker skipped because Kafka is disabled\");\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTYxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476441613", "bodyText": "KAFKA_ENABLED_PROPERTY or KAFKA_ENABLED_PROP?", "author": "ataillefer", "createdAt": "2020-08-25T13:19:21Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.kafka;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class KafkaChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n+\n+    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";", "originalCommit": "5c302822fbebc5587839f7e3a764920d319f3b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java b/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\nindex 21c8e9b1a4b..102befff07f 100644\n--- a/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\n+++ b/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\n\n@@ -38,13 +38,13 @@ import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n public class KafkaChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n \n-    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";\n+    private static final String KAFKA_ENABLED_PROP = \"kafka.enabled\";\n \n     private static final String CONFIG_NAME = \"kafka-config.xml\";\n \n     @Override\n     public boolean accepts(ConfigurationGenerator cg) {\n-        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_PROP))) {\n             log.debug(\"Checker skipped because Kafka is disabled\");\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTc5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476441792", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {\n          \n          \n            \n                    if (!Boolean.valueOf(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {", "author": "ataillefer", "createdAt": "2020-08-25T13:19:37Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.kafka;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class KafkaChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n+\n+    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";\n+\n+    private static final String CONFIG_NAME = \"kafka-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {", "originalCommit": "5c302822fbebc5587839f7e3a764920d319f3b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java b/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\nindex 21c8e9b1a4b..102befff07f 100644\n--- a/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\n+++ b/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\n\n@@ -38,13 +38,13 @@ import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n public class KafkaChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n \n-    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";\n+    private static final String KAFKA_ENABLED_PROP = \"kafka.enabled\";\n \n     private static final String CONFIG_NAME = \"kafka-config.xml\";\n \n     @Override\n     public boolean accepts(ConfigurationGenerator cg) {\n-        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_PROP))) {\n             log.debug(\"Checker skipped because Kafka is disabled\");\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NTExNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476445115", "bodyText": "Maybe align with Elasticsearch?\nFailed to load KafkaConfigDescriptor from \" + configFile.getAbsolutePath()", "author": "ataillefer", "createdAt": "2020-08-25T13:24:32Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.kafka;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class KafkaChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n+\n+    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";\n+\n+    private static final String CONFIG_NAME = \"kafka-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because Kafka is disabled\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        KafkaConfigDescriptor config = getConfig(cg);\n+        try (KafkaLogManager manager = new KafkaLogManager(config.topicPrefix, config.producerProperties.properties,\n+                config.consumerProperties.properties)) {\n+            manager.exists(Name.ofUrn(\"input/null\"));\n+        } catch (Exception e) {\n+            throw new ConfigurationException(\"Unable to reach Kafka using: \" + config.producerProperties.properties, e);\n+        }\n+    }\n+\n+    protected KafkaConfigDescriptor getConfig(ConfigurationGenerator cg) throws ConfigurationException {\n+        File configFile = new File(cg.getConfigDir(), CONFIG_NAME);\n+        if (!configFile.exists()) {\n+            throw new ConfigurationException(\"Cannot find Kafka configuration: \" + CONFIG_NAME);\n+        }\n+        XMap xmap = new XMap();\n+        xmap.register(KafkaConfigDescriptor.class);\n+        try (InputStream inStream = new FileInputStream(configFile)) {\n+            Object[] nodes = xmap.loadAll(inStream);\n+            for (Object node : nodes) {\n+                if (node != null) {\n+                    return (KafkaConfigDescriptor) node;\n+                }\n+            }\n+            throw new ConfigurationException(\"No KafkaConfigDescriptor found in \" + configFile.getAbsolutePath());\n+        } catch (IOException e) {\n+            throw new ConfigurationException(\"Unable to load the configuration for KafkaConfigDescriptor\", e);", "originalCommit": "5c302822fbebc5587839f7e3a764920d319f3b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java b/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\nindex 21c8e9b1a4b..102befff07f 100644\n--- a/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\n+++ b/modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java\n\n@@ -38,13 +38,13 @@ import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n public class KafkaChecker implements BackingChecker {\n     private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n \n-    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";\n+    private static final String KAFKA_ENABLED_PROP = \"kafka.enabled\";\n \n     private static final String CONFIG_NAME = \"kafka-config.xml\";\n \n     @Override\n     public boolean accepts(ConfigurationGenerator cg) {\n-        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_PROP))) {\n             log.debug(\"Checker skipped because Kafka is disabled\");\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjEwMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476446103", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log.debug(\"Adding checker {} with class path: {}\", () -> item,\n          \n          \n            \n                                    log.debug(\"Adding checker: {} with class path: {}\", () -> item,", "author": "ataillefer", "createdAt": "2020-08-25T13:25:59Z", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java", "diffHunk": "@@ -138,22 +138,20 @@ protected RetryPolicy buildRetryPolicy() {\n             items.add(\"kafka\");\n             for (String item : items) {\n                 try {\n-                    log.debug(\"checker: \" + item);\n+                    log.debug(\"checker: {}\", item);\n                     File templateDir = getTemplateDir(item);\n                     String classPath = getClasspathForTemplate(item);\n                     String checkClass = configurationGenerator.getUserConfig()\n                                                               .getProperty(item + PARAM_CHECK_SUFFIX);\n                     Optional<URLClassLoader> ucl = getClassLoaderForTemplate(templateDir, classPath);\n                     if (ucl.isPresent()) {\n                         Class<?> klass = Class.forName(checkClass, true, ucl.get());\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(\"Adding checker \" + item + \" with class path: \"\n-                                    + Arrays.toString(ucl.get().getURLs()));\n-                        }\n+                        log.debug(\"Adding checker {} with class path: {}\", () -> item,", "originalCommit": "ec4231c4b830f1ff78077285f4e5ed7bea637d23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java b/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\nindex ec1be48d01a..a5d45cdb280 100644\n--- a/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\n+++ b/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\n\n@@ -146,7 +146,7 @@ public class BackingServiceConfigurator {\n                     Optional<URLClassLoader> ucl = getClassLoaderForTemplate(templateDir, classPath);\n                     if (ucl.isPresent()) {\n                         Class<?> klass = Class.forName(checkClass, true, ucl.get());\n-                        log.debug(\"Adding checker {} with class path: {}\", () -> item,\n+                        log.debug(\"Adding checker: {} with class path: {}\", () -> item,\n                                 () -> Arrays.toString(ucl.get().getURLs()));\n                         checkers.add((BackingChecker) klass.getDeclaredConstructor().newInstance());\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0OTk3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476449974", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"adding url: {}\", file.getPath());\n          \n          \n            \n                                log.debug(\"Adding url: {}\", file.getPath());", "author": "ataillefer", "createdAt": "2020-08-25T13:31:25Z", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java", "diffHunk": "@@ -209,7 +207,7 @@ String getClasspathForTemplate(String template) {\n             for (File file : files) {\n                 try {\n                     urlsList.add(new URL(\"jar:file:\" + file.getPath() + \"!/\"));\n-                    log.debug(\"Added \" + file.getPath());\n+                    log.debug(\"adding url: {}\", file.getPath());", "originalCommit": "ec4231c4b830f1ff78077285f4e5ed7bea637d23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "chunk": "diff --git a/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java b/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\nindex ec1be48d01a..a5d45cdb280 100644\n--- a/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\n+++ b/modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java\n\n@@ -207,7 +207,7 @@ public class BackingServiceConfigurator {\n             for (File file : files) {\n                 try {\n                     urlsList.add(new URL(\"jar:file:\" + file.getPath() + \"!/\"));\n-                    log.debug(\"adding url: {}\", file.getPath());\n+                    log.debug(\"Adding url: {}\", file.getPath());\n                 } catch (MalformedURLException e) {\n                     log.error(e);\n                 }\n"}}, {"oid": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "url": "https://github.com/nuxeo/nuxeo/commit/bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "message": "NXP-22843: Use Log4j2", "committedDate": "2020-08-26T08:55:45Z", "type": "forcePushed"}, {"oid": "67246ce8f7b96d3a50cf7ef796f10c7525f4812f", "url": "https://github.com/nuxeo/nuxeo/commit/67246ce8f7b96d3a50cf7ef796f10c7525f4812f", "message": "NXP-22843: Add an Elasticsearch checker\n\nOnly the RestClient mode is supported", "committedDate": "2020-08-27T12:55:48Z", "type": "commit"}, {"oid": "a3255448e77098e4de232a1b341cf30e1e8e0bab", "url": "https://github.com/nuxeo/nuxeo/commit/a3255448e77098e4de232a1b341cf30e1e8e0bab", "message": "NXP-22844: Add a Kafka checker", "committedDate": "2020-08-27T12:55:48Z", "type": "commit"}, {"oid": "2d469decc163216ef9ec537d0e37d47c0f8ac2dd", "url": "https://github.com/nuxeo/nuxeo/commit/2d469decc163216ef9ec537d0e37d47c0f8ac2dd", "message": "NXP-22843: Use Log4j2", "committedDate": "2020-08-27T12:55:48Z", "type": "commit"}, {"oid": "2d469decc163216ef9ec537d0e37d47c0f8ac2dd", "url": "https://github.com/nuxeo/nuxeo/commit/2d469decc163216ef9ec537d0e37d47c0f8ac2dd", "message": "NXP-22843: Use Log4j2", "committedDate": "2020-08-27T12:55:48Z", "type": "forcePushed"}]}