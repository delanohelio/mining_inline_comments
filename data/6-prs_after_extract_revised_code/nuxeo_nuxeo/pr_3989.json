{"pr_number": 3989, "pr_title": " NXP-28995: remove documentation feature on explorer", "pr_createdAt": "2020-04-30T17:18:33Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3989", "timeline": [{"oid": "eb25e8deb2ab36f000dc66c7fdff4c93d6d59e3d", "url": "https://github.com/nuxeo/nuxeo/commit/eb25e8deb2ab36f000dc66c7fdff4c93d6d59e3d", "message": "add TODO for readme tests and display", "committedDate": "2020-05-11T10:11:34Z", "type": "forcePushed"}, {"oid": "a20764c207193190c0f77255c05952e633fc51ea", "url": "https://github.com/nuxeo/nuxeo/commit/a20764c207193190c0f77255c05952e633fc51ea", "message": "readme fixes + tests", "committedDate": "2020-05-12T09:11:50Z", "type": "forcePushed"}, {"oid": "8da9a5ea6370ff71da4f5274290b52bf38888252", "url": "https://github.com/nuxeo/nuxeo/commit/8da9a5ea6370ff71da4f5274290b52bf38888252", "message": "readme fixes + tests", "committedDate": "2020-05-12T09:15:36Z", "type": "forcePushed"}, {"oid": "24799f84c10d02c3c211d4a412702f4002b5820b", "url": "https://github.com/nuxeo/nuxeo/commit/24799f84c10d02c3c211d4a412702f4002b5820b", "message": "operation tests", "committedDate": "2020-05-12T18:24:14Z", "type": "forcePushed"}, {"oid": "901cd5fcd1917480b86dc734c76fd95dd1657a5b", "url": "https://github.com/nuxeo/nuxeo/commit/901cd5fcd1917480b86dc734c76fd95dd1657a5b", "message": "NXP-28995: extract content utilities in tests", "committedDate": "2020-05-13T17:34:36Z", "type": "commit"}, {"oid": "c7d36fd409e23e773f81597cabdccf97447adc88", "url": "https://github.com/nuxeo/nuxeo/commit/c7d36fd409e23e773f81597cabdccf97447adc88", "message": "NXP-28995: allow generating reference export in tests", "committedDate": "2020-05-13T17:34:36Z", "type": "commit"}, {"oid": "2a54628f5a29e08ccc5283b3356ef42699c7f68f", "url": "https://github.com/nuxeo/nuxeo/commit/2a54628f5a29e08ccc5283b3356ef42699c7f68f", "message": "NXP-28995: make json export deterministic", "committedDate": "2020-05-13T17:34:36Z", "type": "commit"}, {"oid": "7f5ab5825048c05fd3205333aa173bdcc82f917b", "url": "https://github.com/nuxeo/nuxeo/commit/7f5ab5825048c05fd3205333aa173bdcc82f917b", "message": "NXP-28995: improve all sorts of remaining doc + add tests", "committedDate": "2020-05-13T17:34:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyODU5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424928593", "bodyText": "You can use StandardCharsets instead of guava.", "author": "kevinleturc", "createdAt": "2020-05-14T07:34:46Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java", "diffHunk": "@@ -18,21 +18,26 @@\n  */\n package org.nuxeo.apidoc.adapters;\n \n+import java.io.IOException;\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.nuxeo.apidoc.api.BaseNuxeoArtifact;\n import org.nuxeo.apidoc.api.NuxeoArtifact;\n import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n import org.nuxeo.common.utils.IdUtils;\n import org.nuxeo.common.utils.Path;\n+import org.nuxeo.ecm.core.api.Blob;\n import org.nuxeo.ecm.core.api.CoreSession;\n import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.PathRef;\n import org.nuxeo.ecm.core.api.PropertyException;\n \n+import com.google.common.base.Charsets;", "originalCommit": "7f5ab5825048c05fd3205333aa173bdcc82f917b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "263e84631db57b6dd50df904e4cb0965f78a7a6d", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java\nindex bdb01efe806..af14bfa25b4 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java\n\n@@ -19,6 +19,7 @@\n package org.nuxeo.apidoc.adapters;\n \n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzMTM5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424931394", "bodyText": "You can use var to declare only once ArrayList (and to avoid implementation type declaration for List).", "author": "kevinleturc", "createdAt": "2020-05-14T07:40:14Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BundleGroupDocAdapter.java", "diffHunk": "@@ -49,6 +53,13 @@ public static BundleGroupDocAdapter create(BundleGroup bundleGroup, CoreSession\n         doc.setPropertyValue(NuxeoArtifact.TITLE_PROPERTY_PATH, bundleGroup.getName());\n         doc.setPropertyValue(PROP_GROUP_NAME, bundleGroup.getName());\n         doc.setPropertyValue(PROP_KEY, bundleGroup.getId());\n+        ArrayList<Map<String, Serializable>> files = new ArrayList<>();", "originalCommit": "7f5ab5825048c05fd3205333aa173bdcc82f917b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "263e84631db57b6dd50df904e4cb0965f78a7a6d", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BundleGroupDocAdapter.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BundleGroupDocAdapter.java\nindex fe2e0a5d09f..5a47695f368 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BundleGroupDocAdapter.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BundleGroupDocAdapter.java\n\n@@ -53,13 +49,6 @@ public class BundleGroupDocAdapter extends BaseNuxeoArtifactDocAdapter implement\n         doc.setPropertyValue(NuxeoArtifact.TITLE_PROPERTY_PATH, bundleGroup.getName());\n         doc.setPropertyValue(PROP_GROUP_NAME, bundleGroup.getName());\n         doc.setPropertyValue(PROP_KEY, bundleGroup.getId());\n-        ArrayList<Map<String, Serializable>> files = new ArrayList<>();\n-        for (Blob blob : bundleGroup.getReadmes()) {\n-            Map<String, Serializable> item = new HashMap<>();\n-            item.put(\"file\", (Serializable) blob);\n-            files.add(item);\n-        }\n-        doc.setPropertyValue(PROP_READMES, files);\n         if (exist) {\n             doc = session.saveDocument(doc);\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzODEyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424938126", "bodyText": "LogManager from log4j2 should be used instead.", "author": "kevinleturc", "createdAt": "2020-05-14T07:51:56Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -60,13 +62,16 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.PrettyPrinter;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectReader;\n import com.fasterxml.jackson.databind.ObjectWriter;\n \n public class RuntimeSnapshot extends BaseNuxeoArtifact implements DistributionSnapshot {\n \n+    private static final Log log = LogFactory.getLog(RuntimeSnapshot.class);", "originalCommit": "7f5ab5825048c05fd3205333aa173bdcc82f917b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "263e84631db57b6dd50df904e4cb0965f78a7a6d", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java\nindex d94e2ce8b7d..e802c239931 100755\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java\n\n@@ -70,8 +68,6 @@ import com.fasterxml.jackson.databind.ObjectWriter;\n \n public class RuntimeSnapshot extends BaseNuxeoArtifact implements DistributionSnapshot {\n \n-    private static final Log log = LogFactory.getLog(RuntimeSnapshot.class);\n-\n     public static final String VIRTUAL_BUNDLE_GROUP = \"grp:org.nuxeo.misc\";\n \n     protected final Date created;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0MzAyNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424943024", "bodyText": "StringUtils.isEmpty can be used.", "author": "kevinleturc", "createdAt": "2020-05-14T08:00:17Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java", "diffHunk": "@@ -48,44 +50,24 @@ public NuxeoArtifact getNxArtifact() {\n         return getTargetComponentInfo();\n     }\n \n-    protected String[] getInputs(OperationInfo op) {\n-        String[] signature = op.getSignature();\n-        if (signature == null || signature.length == 0) {\n-            return new String[0];\n-        }\n-        String[] result = new String[signature.length / 2];\n-        for (int i = 0, k = 0; i < signature.length; i += 2, k++) {\n-            result[k] = signature[i];\n-        }\n-        return result;\n-    }\n-\n-    protected String[] getOutputs(OperationInfo op) {\n-        String[] signature = op.getSignature();\n-        if (signature == null || signature.length == 0) {\n-            return new String[0];\n+    protected String getSignatureInfo(OperationInfo op, boolean isInput) {\n+        List<String> signature = op.getSignature();\n+        if (signature == null || signature.isEmpty()) {", "originalCommit": "7f5ab5825048c05fd3205333aa173bdcc82f917b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0OTk4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424949982", "bodyText": "even if it's a list?", "author": "atchertchian", "createdAt": "2020-05-14T08:12:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0MzAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1MDMzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424950337", "bodyText": "Indeed, sorry for noise.", "author": "kevinleturc", "createdAt": "2020-05-14T08:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0MzAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "263e84631db57b6dd50df904e4cb0965f78a7a6d", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java\nindex b8e11cd02f4..0e0d3572062 100755\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java\n\n@@ -50,24 +48,44 @@ public class OperationWO extends NuxeoArtifactWebObject {\n         return getTargetComponentInfo();\n     }\n \n-    protected String getSignatureInfo(OperationInfo op, boolean isInput) {\n-        List<String> signature = op.getSignature();\n-        if (signature == null || signature.isEmpty()) {\n-            return \"void\";\n+    protected String[] getInputs(OperationInfo op) {\n+        String[] signature = op.getSignature();\n+        if (signature == null || signature.length == 0) {\n+            return new String[0];\n         }\n-        List<String> result = new ArrayList<>();\n-        for (int i = (isInput ? 0 : 1); i < signature.size(); i += 2) {\n-            result.add(signature.get(i));\n+        String[] result = new String[signature.length / 2];\n+        for (int i = 0, k = 0; i < signature.length; i += 2, k++) {\n+            result[k] = signature[i];\n         }\n-        return StringUtils.join(result, \", \");\n+        return result;\n+    }\n+\n+    protected String[] getOutputs(OperationInfo op) {\n+        String[] signature = op.getSignature();\n+        if (signature == null || signature.length == 0) {\n+            return new String[0];\n+        }\n+        String[] result = new String[signature.length / 2];\n+        for (int i = 1, k = 0; i < signature.length; i += 2, k++) {\n+            result[k] = signature[i];\n+        }\n+        return result;\n     }\n \n     public String getInputsAsString(OperationInfo op) {\n-        return getSignatureInfo(op, true);\n+        String[] result = getInputs(op);\n+        if (result == null || result.length == 0) {\n+            return \"void\";\n+        }\n+        return StringUtils.join(result, \", \");\n     }\n \n     public String getOutputsAsString(OperationInfo op) {\n-        return getSignatureInfo(op, false);\n+        String[] result = getOutputs(op);\n+        if (result == null || result.length == 0) {\n+            return \"void\";\n+        }\n+        return StringUtils.join(result, \", \");\n     }\n \n     public String getParamDefaultValue(Param param) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0MzUxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424943516", "bodyText": "String.join from JDK can be used.", "author": "kevinleturc", "createdAt": "2020-05-14T08:01:06Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java", "diffHunk": "@@ -48,44 +50,24 @@ public NuxeoArtifact getNxArtifact() {\n         return getTargetComponentInfo();\n     }\n \n-    protected String[] getInputs(OperationInfo op) {\n-        String[] signature = op.getSignature();\n-        if (signature == null || signature.length == 0) {\n-            return new String[0];\n-        }\n-        String[] result = new String[signature.length / 2];\n-        for (int i = 0, k = 0; i < signature.length; i += 2, k++) {\n-            result[k] = signature[i];\n-        }\n-        return result;\n-    }\n-\n-    protected String[] getOutputs(OperationInfo op) {\n-        String[] signature = op.getSignature();\n-        if (signature == null || signature.length == 0) {\n-            return new String[0];\n+    protected String getSignatureInfo(OperationInfo op, boolean isInput) {\n+        List<String> signature = op.getSignature();\n+        if (signature == null || signature.isEmpty()) {\n+            return \"void\";\n         }\n-        String[] result = new String[signature.length / 2];\n-        for (int i = 1, k = 0; i < signature.length; i += 2, k++) {\n-            result[k] = signature[i];\n+        List<String> result = new ArrayList<>();\n+        for (int i = (isInput ? 0 : 1); i < signature.size(); i += 2) {\n+            result.add(signature.get(i));\n         }\n-        return result;\n+        return StringUtils.join(result, \", \");", "originalCommit": "7f5ab5825048c05fd3205333aa173bdcc82f917b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "263e84631db57b6dd50df904e4cb0965f78a7a6d", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java\nindex b8e11cd02f4..0e0d3572062 100755\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/OperationWO.java\n\n@@ -50,24 +48,44 @@ public class OperationWO extends NuxeoArtifactWebObject {\n         return getTargetComponentInfo();\n     }\n \n-    protected String getSignatureInfo(OperationInfo op, boolean isInput) {\n-        List<String> signature = op.getSignature();\n-        if (signature == null || signature.isEmpty()) {\n-            return \"void\";\n+    protected String[] getInputs(OperationInfo op) {\n+        String[] signature = op.getSignature();\n+        if (signature == null || signature.length == 0) {\n+            return new String[0];\n         }\n-        List<String> result = new ArrayList<>();\n-        for (int i = (isInput ? 0 : 1); i < signature.size(); i += 2) {\n-            result.add(signature.get(i));\n+        String[] result = new String[signature.length / 2];\n+        for (int i = 0, k = 0; i < signature.length; i += 2, k++) {\n+            result[k] = signature[i];\n         }\n-        return StringUtils.join(result, \", \");\n+        return result;\n+    }\n+\n+    protected String[] getOutputs(OperationInfo op) {\n+        String[] signature = op.getSignature();\n+        if (signature == null || signature.length == 0) {\n+            return new String[0];\n+        }\n+        String[] result = new String[signature.length / 2];\n+        for (int i = 1, k = 0; i < signature.length; i += 2, k++) {\n+            result[k] = signature[i];\n+        }\n+        return result;\n     }\n \n     public String getInputsAsString(OperationInfo op) {\n-        return getSignatureInfo(op, true);\n+        String[] result = getInputs(op);\n+        if (result == null || result.length == 0) {\n+            return \"void\";\n+        }\n+        return StringUtils.join(result, \", \");\n     }\n \n     public String getOutputsAsString(OperationInfo op) {\n-        return getSignatureInfo(op, false);\n+        String[] result = getOutputs(op);\n+        if (result == null || result.length == 0) {\n+            return \"void\";\n+        }\n+        return StringUtils.join(result, \", \");\n     }\n \n     public String getParamDefaultValue(Param param) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2OTQzNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424969435", "bodyText": "This test seems a bit too optimist; as everything starting by readme matches. Like readme-test.md, readme-sample.ascidoc, etc.", "author": "akervern", "createdAt": "2020-05-14T08:43:41Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/EmbeddedDocExtractor.java", "diffHunk": "@@ -18,68 +18,116 @@\n  */\n package org.nuxeo.apidoc.introspection;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipFile;\n \n import org.apache.commons.io.IOUtils;\n-import org.nuxeo.apidoc.documentation.DefaultDocumentationType;\n-import org.nuxeo.apidoc.documentation.ResourceDocumentationItem;\n import org.nuxeo.common.utils.Path;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.impl.blob.StringBlob;\n \n public class EmbeddedDocExtractor {\n \n     public static final String DOC_PREFIX = \"doc/\";\n \n     public static final String PARENT_DOC_PREFIX = \"doc-parent/\";\n \n-    public static void extractEmbeddedDoc(ZipFile jarFile, BundleInfoImpl bi) throws IOException {\n+    /**\n+     * Hardcoded parent readme filename for tests.\n+     *\n+     * @since 11.1\n+     */\n+    protected static final String README = \"ReadMe.md\";\n \n-        Enumeration<? extends ZipEntry> entries = jarFile.entries();\n+    /**\n+     * Navigates hierarchy to find target file.\n+     *\n+     * @since 11.1\n+     */\n+    public static File findFile(File jarFile, String subPath) {\n+        File up = new File(jarFile, \"..\");\n+        File file = new File(up, subPath);\n+        if (!file.exists()) {\n+            file = new File(new File(up, \"..\"), subPath);\n+            if (!file.exists()) {\n+                file = null;\n+            }\n+        }\n+        return file;\n+    }\n \n-        Map<String, ResourceDocumentationItem> localDocs = new HashMap<>();\n-        Map<String, ResourceDocumentationItem> parentDocs = new HashMap<>();\n+    public static void extractEmbeddedDoc(ZipFile jarFile, BundleInfoImpl bi) throws IOException {\n+        Enumeration<? extends ZipEntry> entries = jarFile.entries();\n         while (entries.hasMoreElements()) {\n             ZipEntry entry = entries.nextElement();\n-\n-            try (InputStream is = jarFile.getInputStream(entry)) {\n-                if (entry.getName().startsWith(PARENT_DOC_PREFIX) && !entry.isDirectory()) {\n-                    String content = IOUtils.toString(is, StandardCharsets.UTF_8);\n-                    String name = new Path(entry.getName()).lastSegment();\n-                    if (name.length() >= 6 && name.substring(0, 6).equalsIgnoreCase(\"readme\")) {\n-\n-                        ResourceDocumentationItem docItem = new ResourceDocumentationItem(name, content,\n-                                DefaultDocumentationType.DESCRIPTION.toString(), bi);\n-\n-                        parentDocs.put(DefaultDocumentationType.DESCRIPTION.toString(), docItem);\n-                    } else {\n-                        ResourceDocumentationItem docItem = new ResourceDocumentationItem(name, content,\n-                                DefaultDocumentationType.HOW_TO.toString(), bi);\n-                        parentDocs.put(DefaultDocumentationType.HOW_TO.toString(), docItem);\n-                    }\n+            if (entry.isDirectory()) {\n+                continue;\n+            }\n+            int isReadme = isReadme(entry.getName());\n+            if (isReadme > 0) {\n+                Blob content = null;\n+                String name = new Path(entry.getName()).lastSegment();\n+                try (InputStream is = jarFile.getInputStream(entry)) {\n+                    content = getReadme(name, is);\n                 }\n-                if (entry.getName().startsWith(DOC_PREFIX) && !entry.isDirectory()) {\n-                    String content = IOUtils.toString(is, StandardCharsets.UTF_8);\n-                    String name = new Path(entry.getName()).lastSegment();\n-                    if (name.length() >= 6 && name.substring(0, 6).equalsIgnoreCase(\"readme\")) {\n-\n-                        ResourceDocumentationItem docItem = new ResourceDocumentationItem(name, content,\n-                                DefaultDocumentationType.DESCRIPTION.toString(), bi);\n-                        localDocs.put(DefaultDocumentationType.DESCRIPTION.toString(), docItem);\n-                    } else {\n-                        ResourceDocumentationItem docItem = new ResourceDocumentationItem(name, content,\n-                                DefaultDocumentationType.HOW_TO.toString(), bi);\n-                        localDocs.put(DefaultDocumentationType.HOW_TO.toString(), docItem);\n-                    }\n+                if (isReadme == 1) {\n+                    bi.setReadme(content);\n+                } else {\n+                    bi.setParentReadme(content);\n                 }\n             }\n+            if (bi.getReadme() != null && bi.getParentReadme() != null) {\n+                break;\n+            }\n         }\n-        bi.setLiveDoc(localDocs);\n-        bi.setParentLiveDoc(parentDocs);\n     }\n+\n+    /**\n+     * Mimicks extaction of readme file for tests.\n+     *\n+     * @implNote maven is in charge of copying doc files to the target server: this needs to be done here for tests to\n+     *           still take readmes into account in Eclipse for instance.\n+     * @since 11.1\n+     */\n+    public static void extractEmbeddedDoc(File dirFile, BundleInfoImpl bi) throws IOException {\n+        File readme = findFile(dirFile, README);\n+        if (readme != null) {\n+            try (InputStream is = new FileInputStream(readme)) {\n+                bi.setReadme(getReadme(README, is));\n+            }\n+        }\n+        File parentReadme = findFile(new File(dirFile, \"../..\"), README);\n+        if (parentReadme != null) {\n+            try (InputStream is = new FileInputStream(parentReadme)) {\n+                bi.setParentReadme(getReadme(README, is));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns 0 if not a doc, 1 if local doc, 2 if parent doc.\n+     */\n+    protected static int isReadme(String name) {\n+        boolean isDoc = name.startsWith(DOC_PREFIX);\n+        boolean isParentDoc = name.startsWith(PARENT_DOC_PREFIX);\n+        if (isDoc || isParentDoc) {\n+            String filename = new Path(name).lastSegment();\n+            if (filename.length() >= 6 && filename.substring(0, 6).equalsIgnoreCase(\"readme\")) {", "originalCommit": "a8db9ff702916b594b0cd42f7bb580a83dd56e40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDI3NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3989#discussion_r424984275", "bodyText": "Indeed, i had kept the old logics but i changed it so that it better represents what's extracted.\nNote that in practice \"readme-sample.ascidoc\" would not be retrieved by the maven plugin configuration, though, and that readme-test.md is actually accepted.\nNote also that in practice, here's what we have in the nuxeo repository:\nmodules/runtime/nuxeo-runtime-stream/README.md\nmodules/runtime/nuxeo-stream/README.md\nmodules/runtime/nuxeo-runtime-metrics/README.md\nmodules/core/nuxeo-core-bulk/README.md\nmodules/platform/nuxeo-platform-video/README.md\nmodules/platform/nuxeo-platform-lang-ext/README.md\nmodules/platform/nuxeo-automation/nuxeo-automation-scripting/Readme.md\nmodules/platform/nuxeo-platform-document-routing/nuxeo-routing-default/README.md\nmodules/platform/nuxeo-platform-mail/README.md\nmodules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-seqgen/README.md\nmodules/platform/nuxeo-elasticsearch/README.md\nmodules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-audit/README.md\nmodules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-http-read-only/README.md\nmodules/platform/nuxeo-elasticsearch/scripts/README.md\nmodules/platform/nuxeo-usermapper/README.md\nmodules/platform/nuxeo-template-rendering/nuxeo-template-rendering-xdocreport/ReadMe.md\nmodules/platform/nuxeo-template-rendering/nuxeo-template-rendering-jod/ReadMe.md\nmodules/platform/nuxeo-template-rendering/ReadMe.md\nmodules/platform/nuxeo-template-rendering/nuxeo-template-rendering-sandbox/ReadMe.md\nmodules/platform/nuxeo-template-rendering/nuxeo-template-rendering-jaxrs/ReadMe.md\nmodules/platform/nuxeo-template-rendering/nuxeo-template-rendering-jxls/ReadMe.md\nmodules/platform/nuxeo-template-rendering/nuxeo-template-rendering-api/ReadMe.md\nmodules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/ReadMe.md\nmodules/platform/nuxeo-template-rendering/nuxeo-template-rendering-deckjs/README.md\nmodules/platform/nuxeo-platform-userworkspace/ReadMe.md\nmodules/platform/nuxeo-signature/README.md\nmodules/platform/nuxeo-scim-server/ReadMe.md\nmodules/platform/nuxeo-fsexporter/README.md\nmodules/platform/nuxeo-liveconnect/nuxeo-liveconnect-google-drive-core/README.md\nmodules/platform/nuxeo-liveconnect/nuxeo-liveconnect-dropbox-core/README.md\nmodules/platform/nuxeo-liveconnect/README.md\nmodules/platform/nuxeo-liveconnect/nuxeo-liveconnect-box-core/README.md\nmodules/platform/nuxeo-platform-pdf-utils/README.md\nmodules/platform/login/nuxeo-platform-login-openid/ReadMe.md\nmodules/platform/login/nuxeo-platform-login-saml2/sample/README.md\nmodules/platform/login/nuxeo-platform-login-saml2/README.md\nmodules/platform/login/nuxeo-platform-login-token/README.md\nmodules/platform/login/nuxeo-platform-login-keycloak/README.md\nmodules/platform/nuxeo-quota/README.md\nmodules/platform/nuxeo-platform-importer/nuxeo-importer-xml-parser/ReadMe.md\nmodules/platform/nuxeo-platform-importer/README.md\nmodules/platform/nuxeo-platform-importer/nuxeo-importer-stream/README.md\nmodules/platform/nuxeo-audit-storage-directory/README.md\nmodules/platform/nuxeo-drive-server/README.md\nmodules/platform/nuxeo-drive-server/nuxeo-drive-bench/README.md\nmodules/platform/nuxeo-apidoc-server/ReadMe.md\nmodules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/ReadMe.md\nmodules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/ReadMe.md\nmodules/platform/nuxeo-jsf-to-web-ui/README.md\nmodules/platform/nuxeo-duoweb-authentication/README.md\nmodules/platform/nuxeo-platform-3d/README.md", "author": "atchertchian", "createdAt": "2020-05-14T09:06:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2OTQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "263e84631db57b6dd50df904e4cb0965f78a7a6d", "chunk": "diff --git a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/EmbeddedDocExtractor.java b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/EmbeddedDocExtractor.java\nindex c0063d0ea0e..75685008cce 100644\n--- a/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/EmbeddedDocExtractor.java\n+++ b/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/EmbeddedDocExtractor.java\n\n@@ -18,8 +18,6 @@\n  */\n package org.nuxeo.apidoc.introspection;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n"}}, {"oid": "263e84631db57b6dd50df904e4cb0965f78a7a6d", "url": "https://github.com/nuxeo/nuxeo/commit/263e84631db57b6dd50df904e4cb0965f78a7a6d", "message": "NXP-28995: remove documentation feature on explorer", "committedDate": "2020-05-14T09:47:30Z", "type": "commit"}, {"oid": "17fc1a182fa0f7e9aee18b7493787b55c851fdcd", "url": "https://github.com/nuxeo/nuxeo/commit/17fc1a182fa0f7e9aee18b7493787b55c851fdcd", "message": "NXP-28995: cleanup explorer operation api for consistency", "committedDate": "2020-05-14T09:47:30Z", "type": "commit"}, {"oid": "0cbe9fe4936d21c777acaeb8ac396e2041ecd763", "url": "https://github.com/nuxeo/nuxeo/commit/0cbe9fe4936d21c777acaeb8ac396e2041ecd763", "message": "NXP-28995: improve all sorts of remaining doc + add tests", "committedDate": "2020-05-14T09:47:30Z", "type": "forcePushed"}, {"oid": "e49a4b3c2a5f998f1f2178218647695711f60218", "url": "https://github.com/nuxeo/nuxeo/commit/e49a4b3c2a5f998f1f2178218647695711f60218", "message": "NXP-28995: keep readmes retrieval + handle display + add ftests", "committedDate": "2020-05-14T12:13:45Z", "type": "commit"}, {"oid": "df6219e9b1b891fa7c56b072dec579c1703cd177", "url": "https://github.com/nuxeo/nuxeo/commit/df6219e9b1b891fa7c56b072dec579c1703cd177", "message": "NXP-28995: better check on readme extraction", "committedDate": "2020-05-14T12:13:45Z", "type": "commit"}, {"oid": "4dadde8b130f11002492b88aec79d7ae75ca73bb", "url": "https://github.com/nuxeo/nuxeo/commit/4dadde8b130f11002492b88aec79d7ae75ca73bb", "message": "NXP-28995: fix bundle group retrieval on persisted distributions.\nRevealed by new unit tests.", "committedDate": "2020-05-14T12:13:45Z", "type": "commit"}, {"oid": "58d5dee9b647dadc1dec23a9691e723a8f0d90a5", "url": "https://github.com/nuxeo/nuxeo/commit/58d5dee9b647dadc1dec23a9691e723a8f0d90a5", "message": "NXP-28995: improve all sorts of remaining doc + add tests", "committedDate": "2020-05-14T12:13:45Z", "type": "commit"}, {"oid": "58d5dee9b647dadc1dec23a9691e723a8f0d90a5", "url": "https://github.com/nuxeo/nuxeo/commit/58d5dee9b647dadc1dec23a9691e723a8f0d90a5", "message": "NXP-28995: improve all sorts of remaining doc + add tests", "committedDate": "2020-05-14T12:13:45Z", "type": "forcePushed"}]}