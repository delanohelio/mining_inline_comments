{"pr_number": 5121, "pr_title": "RM#26300 : Sales : new chart", "pr_createdAt": "2020-03-12T17:19:32Z", "pr_url": "https://github.com/axelor/axelor-open-suite/pull/5121", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzMTQzMg==", "url": "https://github.com/axelor/axelor-open-suite/pull/5121#discussion_r395631432", "bodyText": "Use variable in repository instead of hard coded values", "author": "ale-axelor", "createdAt": "2020-03-20T13:22:23Z", "path": "axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java", "diffHunk": "@@ -97,4 +102,43 @@ public PartnerSaleServiceImpl(PartnerRepository partnerRepo, AppBaseService appB\n             + \"OR (email.relatedTo2Select = 'com.axelor.apps.sale.db.SaleOrder' AND email.relatedTo2SelectId = so.id))\";\n     return JPA.em().createQuery(query).getResultList();\n   }\n+\n+  public List<Product> getProductBoughtByCustomer(Partner customer) {\n+    String domain =\n+        \"self.id in (SELECT line.product\"\n+            + \" FROM SaleOrderLine line join SaleOrder sale on line.saleOrder = sale.id\"\n+            + \" WHERE sale.statusSelect IN (3, 4)\"", "originalCommit": "3ee5387c72d72d416a0fd089b814dc915fe72656", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f2bf964b6d156dd9079c5a3e39780dba17c61bf", "chunk": "diff --git a/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java b/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\nindex 7fb98aa110..d9264d9df9 100644\n--- a/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\n+++ b/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\n\n@@ -107,7 +109,11 @@ public class PartnerSaleServiceImpl extends PartnerServiceImpl implements Partne\n     String domain =\n         \"self.id in (SELECT line.product\"\n             + \" FROM SaleOrderLine line join SaleOrder sale on line.saleOrder = sale.id\"\n-            + \" WHERE sale.statusSelect IN (3, 4)\"\n+            + \" WHERE sale.statusSelect IN (\"\n+            + SaleOrderRepository.STATUS_ORDER_CONFIRMED\n+            + \", \"\n+            + SaleOrderRepository.STATUS_ORDER_COMPLETED\n+            + \")\"\n             + \" AND sale.clientPartner = \"\n             + customer.getId()\n             + \")\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzMjMwNg==", "url": "https://github.com/axelor/axelor-open-suite/pull/5121#discussion_r395632306", "bodyText": "Use variable in repository instead of hard coded values", "author": "ale-axelor", "createdAt": "2020-03-20T13:23:51Z", "path": "axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java", "diffHunk": "@@ -97,4 +102,43 @@ public PartnerSaleServiceImpl(PartnerRepository partnerRepo, AppBaseService appB\n             + \"OR (email.relatedTo2Select = 'com.axelor.apps.sale.db.SaleOrder' AND email.relatedTo2SelectId = so.id))\";\n     return JPA.em().createQuery(query).getResultList();\n   }\n+\n+  public List<Product> getProductBoughtByCustomer(Partner customer) {\n+    String domain =\n+        \"self.id in (SELECT line.product\"\n+            + \" FROM SaleOrderLine line join SaleOrder sale on line.saleOrder = sale.id\"\n+            + \" WHERE sale.statusSelect IN (3, 4)\"\n+            + \" AND sale.clientPartner = \"\n+            + customer.getId()\n+            + \")\";\n+\n+    ProductRepository productRepo = Beans.get(ProductRepository.class);\n+    List<Product> productList = productRepo.all().filter(domain).fetch();\n+\n+    return productList;\n+  }\n+\n+  public HashMap<String, BigDecimal> getTotalSaleQuantityAndPrice(\n+      Partner customer, Product product) {\n+    String query =\n+        \"SELECT line\"\n+            + \" FROM SaleOrderLine line join SaleOrder sale on line.saleOrder = sale.id\"\n+            + \" WHERE sale.statusSelect IN (3, 4)\"", "originalCommit": "3ee5387c72d72d416a0fd089b814dc915fe72656", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f2bf964b6d156dd9079c5a3e39780dba17c61bf", "chunk": "diff --git a/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java b/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\nindex 7fb98aa110..d9264d9df9 100644\n--- a/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\n+++ b/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\n\n@@ -107,7 +109,11 @@ public class PartnerSaleServiceImpl extends PartnerServiceImpl implements Partne\n     String domain =\n         \"self.id in (SELECT line.product\"\n             + \" FROM SaleOrderLine line join SaleOrder sale on line.saleOrder = sale.id\"\n-            + \" WHERE sale.statusSelect IN (3, 4)\"\n+            + \" WHERE sale.statusSelect IN (\"\n+            + SaleOrderRepository.STATUS_ORDER_CONFIRMED\n+            + \", \"\n+            + SaleOrderRepository.STATUS_ORDER_COMPLETED\n+            + \")\"\n             + \" AND sale.clientPartner = \"\n             + customer.getId()\n             + \")\";\n"}}, {"oid": "7f2bf964b6d156dd9079c5a3e39780dba17c61bf", "url": "https://github.com/axelor/axelor-open-suite/commit/7f2bf964b6d156dd9079c5a3e39780dba17c61bf", "message": "Sales : new chart\n\nAdd 2 new charts in customer dashbord (from sales):\n- Average markup per customer\n- Avergae margin rate per customer\nOn the customer form view added a new indicator of products bought by the customer\nAdd translations\n\nRM#26300", "committedDate": "2020-03-23T14:33:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzOTM1Mg==", "url": "https://github.com/axelor/axelor-open-suite/pull/5121#discussion_r397039352", "bodyText": "Directly use SUM() in the query instead of using java to sum.", "author": "ale-axelor", "createdAt": "2020-03-24T10:14:12Z", "path": "axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java", "diffHunk": "@@ -97,4 +104,90 @@ public PartnerSaleServiceImpl(PartnerRepository partnerRepo, AppBaseService appB\n             + \"OR (email.relatedTo2Select = 'com.axelor.apps.sale.db.SaleOrder' AND email.relatedTo2SelectId = so.id))\";\n     return JPA.em().createQuery(query).getResultList();\n   }\n+\n+  public List<Product> getProductBoughtByCustomer(Partner customer) {\n+    String domain =\n+        \"self.id in (SELECT line.product\"\n+            + \" FROM SaleOrderLine line join SaleOrder sale on line.saleOrder = sale.id\"\n+            + \" WHERE sale.statusSelect IN (\"\n+            + SaleOrderRepository.STATUS_ORDER_CONFIRMED\n+            + \", \"\n+            + SaleOrderRepository.STATUS_ORDER_COMPLETED\n+            + \")\"\n+            + \" AND sale.clientPartner = \"\n+            + customer.getId()\n+            + \")\";\n+\n+    ProductRepository productRepo = Beans.get(ProductRepository.class);\n+    List<Product> productList = productRepo.all().filter(domain).fetch();\n+\n+    return productList;\n+  }\n+\n+  public HashMap<String, BigDecimal> getTotalSaleQuantityAndPrice(", "originalCommit": "7f2bf964b6d156dd9079c5a3e39780dba17c61bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec78f4d6d9ff25b450485892422d72484b4934aa", "chunk": "diff --git a/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java b/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\nindex d9264d9df9..4bbb460606 100644\n--- a/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\n+++ b/axelor-sale/src/main/java/com/axelor/apps/sale/service/PartnerSaleServiceImpl.java\n\n@@ -126,9 +125,11 @@ public class PartnerSaleServiceImpl extends PartnerServiceImpl implements Partne\n \n   public HashMap<String, BigDecimal> getTotalSaleQuantityAndPrice(\n       Partner customer, Product product) {\n-    String query =\n-        \"SELECT line\"\n-            + \" FROM SaleOrderLine line join SaleOrder sale on line.saleOrder = sale.id\"\n+\n+    String qtySelection = \"SELECT SUM(line.qty)\";\n+    String priceSelection = \"SELECT SUM(line.subTotalCostPrice)\";\n+    String endQuery =\n+        \" FROM SaleOrderLine line join SaleOrder sale on line.saleOrder = sale.id\"\n             + \" WHERE sale.statusSelect IN (\"\n             + SaleOrderRepository.STATUS_ORDER_CONFIRMED\n             + \", \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MTkyMg==", "url": "https://github.com/axelor/axelor-open-suite/pull/5121#discussion_r397051922", "bodyText": "In all java controller, every process must be inside a : try { // Something } catch(Exception e) { TraceBackService.trace(response, e); }.", "author": "ale-axelor", "createdAt": "2020-03-24T10:35:14Z", "path": "axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Axelor Business Solutions\n+ *\n+ * Copyright (C) 2020 Axelor (<http://axelor.com>).\n+ *\n+ * This program is free software: you can redistribute it and/or  modify\n+ * it under the terms of the GNU Affero General Public License, version 3,\n+ * as published by the Free Software Foundation.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package com.axelor.apps.sale.web;\n+\n+import com.axelor.apps.base.db.Partner;\n+import com.axelor.apps.base.db.Product;\n+import com.axelor.apps.base.db.repo.PartnerRepository;\n+import com.axelor.apps.sale.service.PartnerSaleService;\n+import com.axelor.exception.service.TraceBackService;\n+import com.axelor.inject.Beans;\n+import com.axelor.rpc.ActionRequest;\n+import com.axelor.rpc.ActionResponse;\n+import com.axelor.rpc.Context;\n+import com.google.inject.Singleton;\n+import java.math.BigDecimal;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+@Singleton\n+public class PartnerSaleController {\n+\n+  public void displayValues(ActionRequest request, ActionResponse response) {", "originalCommit": "7f2bf964b6d156dd9079c5a3e39780dba17c61bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec78f4d6d9ff25b450485892422d72484b4934aa", "chunk": "diff --git a/axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java b/axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java\nindex b718987e54..4616218e3f 100644\n--- a/axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java\n+++ b/axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java\n\n@@ -40,34 +40,40 @@ public class PartnerSaleController {\n \n   public void displayValues(ActionRequest request, ActionResponse response) {\n     Partner customer = request.getContext().asType(Partner.class);\n-    customer = Beans.get(PartnerRepository.class).find(customer.getId());\n \n-    SortedSet<Map<String, Object>> saleDetailsByProduct =\n-        new TreeSet<Map<String, Object>>(Comparator.comparing(m -> (String) m.get(\"name\")));\n+    try {\n \n-    PartnerSaleService partnerSaleService = Beans.get(PartnerSaleService.class);\n-    List<Product> productList = partnerSaleService.getProductBoughtByCustomer(customer);\n+      customer = Beans.get(PartnerRepository.class).find(customer.getId());\n \n-    if (productList.isEmpty()) {\n-      response.setAttr(\"$saleDetailsByProduct\", \"hidden\", true);\n-      return;\n-    }\n+      SortedSet<Map<String, Object>> saleDetailsByProduct =\n+          new TreeSet<Map<String, Object>>(Comparator.comparing(m -> (String) m.get(\"name\")));\n \n-    response.setAttr(\"$saleDetailsByProduct\", \"hidden\", false);\n+      PartnerSaleService partnerSaleService = Beans.get(PartnerSaleService.class);\n+      List<Product> productList = partnerSaleService.getProductBoughtByCustomer(customer);\n \n-    HashMap<String, BigDecimal> qtyAndPrice;\n+      if (productList.isEmpty()) {\n+        response.setAttr(\"$saleDetailsByProduct\", \"hidden\", true);\n+        return;\n+      }\n \n-    for (Product product : productList) {\n-      qtyAndPrice = partnerSaleService.getTotalSaleQuantityAndPrice(customer, product);\n-      Map<String, Object> map = new HashMap<String, Object>();\n-      map.put(\"name\", product.getName());\n-      map.put(\"$quantitySold\", qtyAndPrice.get(\"qty\"));\n-      map.put(\"$totalPrice\", qtyAndPrice.get(\"price\"));\n-      map.put(\"$averagePrice\", qtyAndPrice.get(\"price\").divide(qtyAndPrice.get(\"qty\")));\n-      saleDetailsByProduct.add(map);\n-    }\n+      response.setAttr(\"$saleDetailsByProduct\", \"hidden\", false);\n+\n+      HashMap<String, BigDecimal> qtyAndPrice;\n \n-    response.setValue(\"$saleDetailsByProduct\", saleDetailsByProduct);\n+      for (Product product : productList) {\n+        qtyAndPrice = partnerSaleService.getTotalSaleQuantityAndPrice(customer, product);\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"name\", product.getName());\n+        map.put(\"$quantitySold\", qtyAndPrice.get(\"qty\"));\n+        map.put(\"$totalPrice\", qtyAndPrice.get(\"price\"));\n+        map.put(\"$averagePrice\", qtyAndPrice.get(\"price\").divide(qtyAndPrice.get(\"qty\")));\n+        saleDetailsByProduct.add(map);\n+      }\n+\n+      response.setValue(\"$saleDetailsByProduct\", saleDetailsByProduct);\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n+    }\n   }\n \n   public void averageByCustomer(\n"}}, {"oid": "ec78f4d6d9ff25b450485892422d72484b4934aa", "url": "https://github.com/axelor/axelor-open-suite/commit/ec78f4d6d9ff25b450485892422d72484b4934aa", "message": "Sales : new chart\n\nAdd 2 new charts in customer dashbord (from sales):\n- Average markup per customer\n- Avergae margin rate per customer\nOn the customer form view added a new indicator of products bought by the customer\nAdd translations\n\nRM#26300", "committedDate": "2020-03-27T12:24:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNDk5OQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5121#discussion_r399314999", "bodyText": "divide must always have a roundingmode argument and a scale to avoid throwing exception if the exact quotient cannot be represented", "author": "ale-axelor", "createdAt": "2020-03-27T14:42:53Z", "path": "axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Axelor Business Solutions\n+ *\n+ * Copyright (C) 2020 Axelor (<http://axelor.com>).\n+ *\n+ * This program is free software: you can redistribute it and/or  modify\n+ * it under the terms of the GNU Affero General Public License, version 3,\n+ * as published by the Free Software Foundation.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package com.axelor.apps.sale.web;\n+\n+import com.axelor.apps.base.db.Partner;\n+import com.axelor.apps.base.db.Product;\n+import com.axelor.apps.base.db.repo.PartnerRepository;\n+import com.axelor.apps.sale.service.PartnerSaleService;\n+import com.axelor.exception.service.TraceBackService;\n+import com.axelor.inject.Beans;\n+import com.axelor.rpc.ActionRequest;\n+import com.axelor.rpc.ActionResponse;\n+import com.axelor.rpc.Context;\n+import com.google.inject.Singleton;\n+import java.math.BigDecimal;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+@Singleton\n+public class PartnerSaleController {\n+\n+  public void displayValues(ActionRequest request, ActionResponse response) {\n+    Partner customer = request.getContext().asType(Partner.class);\n+\n+    try {\n+\n+      customer = Beans.get(PartnerRepository.class).find(customer.getId());\n+\n+      SortedSet<Map<String, Object>> saleDetailsByProduct =\n+          new TreeSet<Map<String, Object>>(Comparator.comparing(m -> (String) m.get(\"name\")));\n+\n+      PartnerSaleService partnerSaleService = Beans.get(PartnerSaleService.class);\n+      List<Product> productList = partnerSaleService.getProductBoughtByCustomer(customer);\n+\n+      if (productList.isEmpty()) {\n+        response.setAttr(\"$saleDetailsByProduct\", \"hidden\", true);\n+        return;\n+      }\n+\n+      response.setAttr(\"$saleDetailsByProduct\", \"hidden\", false);\n+\n+      HashMap<String, BigDecimal> qtyAndPrice;\n+\n+      for (Product product : productList) {\n+        qtyAndPrice = partnerSaleService.getTotalSaleQuantityAndPrice(customer, product);\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"name\", product.getName());\n+        map.put(\"$quantitySold\", qtyAndPrice.get(\"qty\"));\n+        map.put(\"$totalPrice\", qtyAndPrice.get(\"price\"));\n+        map.put(\"$averagePrice\", qtyAndPrice.get(\"price\").divide(qtyAndPrice.get(\"qty\")));", "originalCommit": "ec78f4d6d9ff25b450485892422d72484b4934aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ad68b86e39b53f4bfd0e2a2335bcb6678de074e", "chunk": "diff --git a/axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java b/axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java\nindex 4616218e3f..cc7c3461d7 100644\n--- a/axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java\n+++ b/axelor-sale/src/main/java/com/axelor/apps/sale/web/PartnerSaleController.java\n\n@@ -20,6 +20,7 @@ package com.axelor.apps.sale.web;\n import com.axelor.apps.base.db.Partner;\n import com.axelor.apps.base.db.Product;\n import com.axelor.apps.base.db.repo.PartnerRepository;\n+import com.axelor.apps.base.service.app.AppBaseService;\n import com.axelor.apps.sale.service.PartnerSaleService;\n import com.axelor.exception.service.TraceBackService;\n import com.axelor.inject.Beans;\n"}}, {"oid": "5ad68b86e39b53f4bfd0e2a2335bcb6678de074e", "url": "https://github.com/axelor/axelor-open-suite/commit/5ad68b86e39b53f4bfd0e2a2335bcb6678de074e", "message": "Sales : new chart\n\nAdd 2 new charts in customer dashbord (from sales):\n- Average markup per customer\n- Avergae margin rate per customer\nOn the customer form view added a new indicator of products bought by the customer\nAdd translations\n\nRM#26300", "committedDate": "2020-04-06T13:29:34Z", "type": "forcePushed"}, {"oid": "fcc87affb1ebcadb63852e5709f23f5176b06348", "url": "https://github.com/axelor/axelor-open-suite/commit/fcc87affb1ebcadb63852e5709f23f5176b06348", "message": "Sales : new chart\n\nAdd 2 new charts in customer dashbord (from sales):\n- Average markup per customer\n- Avergae margin rate per customer\nOn the customer form view added a new indicator of products bought by the customer\nAdd translations\n\nRM#26300", "committedDate": "2020-05-04T15:06:16Z", "type": "forcePushed"}, {"oid": "5c17aeabc158cfa557f2fe25efe7ad1b17f188d2", "url": "https://github.com/axelor/axelor-open-suite/commit/5c17aeabc158cfa557f2fe25efe7ad1b17f188d2", "message": "Sales : new chart\n\nAdd 2 new charts in customer dashbord (from sales):\n- Average markup per customer\n- Avergae margin rate per customer\nOn the customer form view added a new indicator of products bought by the customer\nAdd translations\n\nRM#26300", "committedDate": "2020-05-05T08:33:23Z", "type": "forcePushed"}, {"oid": "8521531205b62af604e722969d3538bfcca6b2a6", "url": "https://github.com/axelor/axelor-open-suite/commit/8521531205b62af604e722969d3538bfcca6b2a6", "message": "Sales : new chart\n\nAdd 2 new charts in customer dashbord (from sales):\n- Average markup per customer\n- Avergae margin rate per customer\nOn the customer form view added a new indicator of products bought by the customer\nAdd translations\n\nRM#26300", "committedDate": "2020-05-05T08:35:00Z", "type": "commit"}, {"oid": "8521531205b62af604e722969d3538bfcca6b2a6", "url": "https://github.com/axelor/axelor-open-suite/commit/8521531205b62af604e722969d3538bfcca6b2a6", "message": "Sales : new chart\n\nAdd 2 new charts in customer dashbord (from sales):\n- Average markup per customer\n- Avergae margin rate per customer\nOn the customer form view added a new indicator of products bought by the customer\nAdd translations\n\nRM#26300", "committedDate": "2020-05-05T08:35:00Z", "type": "forcePushed"}]}