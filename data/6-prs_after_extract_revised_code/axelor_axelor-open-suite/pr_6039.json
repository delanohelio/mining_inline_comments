{"pr_number": 6039, "pr_title": "Anomaly #32387 Analytic Move Line : change project depending of the state of parent Order or Invoice", "pr_createdAt": "2020-10-30T13:30:54Z", "pr_url": "https://github.com/axelor/axelor-open-suite/pull/6039", "timeline": [{"oid": "451f7a0fefabff5537a99e13f0cd8558e339818a", "url": "https://github.com/axelor/axelor-open-suite/commit/451f7a0fefabff5537a99e13f0cd8558e339818a", "message": "First work on change requested", "committedDate": "2020-11-03T17:00:59Z", "type": "commit"}, {"oid": "25f4b0245d05b7400ebc6cc89cead86482110c17", "url": "https://github.com/axelor/axelor-open-suite/commit/25f4b0245d05b7400ebc6cc89cead86482110c17", "message": "Analytic Move Line : changing project now updates linked analytic move line\n\nAnomaly #32387", "committedDate": "2020-11-04T11:59:21Z", "type": "commit"}, {"oid": "25f4b0245d05b7400ebc6cc89cead86482110c17", "url": "https://github.com/axelor/axelor-open-suite/commit/25f4b0245d05b7400ebc6cc89cead86482110c17", "message": "Analytic Move Line : changing project now updates linked analytic move line\n\nAnomaly #32387", "committedDate": "2020-11-04T11:59:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExNjkwNg==", "url": "https://github.com/axelor/axelor-open-suite/pull/6039#discussion_r518116906", "bodyText": "Do not inject using beans.get in a loop, use injection in constructor to get AnalyticMoveLineRepository", "author": "ale-axelor", "createdAt": "2020-11-05T15:00:21Z", "path": "axelor-business-production/src/main/java/com/axelor/apps/businessproduction/service/SaleOrderWorkflowServiceBusinessProductionImpl.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.axelor.apps.businessproduction.service;\n+\n+import com.axelor.apps.account.db.AnalyticMoveLine;\n+import com.axelor.apps.account.db.repo.AnalyticMoveLineRepository;\n+import com.axelor.apps.base.db.CancelReason;\n+import com.axelor.apps.base.db.repo.PartnerRepository;\n+import com.axelor.apps.base.service.administration.SequenceService;\n+import com.axelor.apps.base.service.user.UserService;\n+import com.axelor.apps.production.service.SaleOrderWorkflowServiceProductionImpl;\n+import com.axelor.apps.production.service.app.AppProductionService;\n+import com.axelor.apps.production.service.productionorder.ProductionOrderSaleOrderService;\n+import com.axelor.apps.sale.db.SaleOrder;\n+import com.axelor.apps.sale.db.SaleOrderLine;\n+import com.axelor.apps.sale.db.repo.SaleOrderRepository;\n+import com.axelor.apps.sale.service.app.AppSaleService;\n+import com.axelor.apps.supplychain.service.AccountingSituationSupplychainService;\n+import com.axelor.apps.supplychain.service.SaleOrderPurchaseService;\n+import com.axelor.apps.supplychain.service.SaleOrderStockService;\n+import com.axelor.apps.supplychain.service.app.AppSupplychainService;\n+import com.axelor.inject.Beans;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+\n+public class SaleOrderWorkflowServiceBusinessProductionImpl\n+    extends SaleOrderWorkflowServiceProductionImpl {\n+\n+  @Inject\n+  public SaleOrderWorkflowServiceBusinessProductionImpl(\n+      SequenceService sequenceService,\n+      PartnerRepository partnerRepo,\n+      SaleOrderRepository saleOrderRepo,\n+      AppSaleService appSaleService,\n+      UserService userService,\n+      SaleOrderStockService saleOrderStockService,\n+      SaleOrderPurchaseService saleOrderPurchaseService,\n+      AppSupplychainService appSupplychainService,\n+      AccountingSituationSupplychainService accountingSituationSupplychainService,\n+      ProductionOrderSaleOrderService productionOrderSaleOrderService,\n+      AppProductionService appProductionService) {\n+    super(\n+        sequenceService,\n+        partnerRepo,\n+        saleOrderRepo,\n+        appSaleService,\n+        userService,\n+        saleOrderStockService,\n+        saleOrderPurchaseService,\n+        appSupplychainService,\n+        accountingSituationSupplychainService,\n+        productionOrderSaleOrderService,\n+        appProductionService);\n+  }\n+\n+  @Override\n+  @Transactional(rollbackOn = Exception.class)\n+  public void cancelSaleOrder(\n+      SaleOrder saleOrder, CancelReason cancelReason, String cancelReasonStr) {\n+    super.cancelSaleOrder(saleOrder, cancelReason, cancelReasonStr);\n+    for (SaleOrderLine saleOrderLine : saleOrder.getSaleOrderLineList()) {\n+      for (AnalyticMoveLine analyticMoveLine : saleOrderLine.getAnalyticMoveLineList()) {\n+        analyticMoveLine.setProject(null);\n+        Beans.get(AnalyticMoveLineRepository.class).save(analyticMoveLine);", "originalCommit": "25f4b0245d05b7400ebc6cc89cead86482110c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e18f14a1e2e61d887407913fedc600ff83c819c", "chunk": "diff --git a/axelor-business-production/src/main/java/com/axelor/apps/businessproduction/service/SaleOrderWorkflowServiceBusinessProductionImpl.java b/axelor-business-production/src/main/java/com/axelor/apps/businessproduction/service/SaleOrderWorkflowServiceBusinessProductionImpl.java\nindex 8032905e80..b822aad068 100644\n--- a/axelor-business-production/src/main/java/com/axelor/apps/businessproduction/service/SaleOrderWorkflowServiceBusinessProductionImpl.java\n+++ b/axelor-business-production/src/main/java/com/axelor/apps/businessproduction/service/SaleOrderWorkflowServiceBusinessProductionImpl.java\n\n@@ -17,13 +17,14 @@ import com.axelor.apps.supplychain.service.AccountingSituationSupplychainService\n import com.axelor.apps.supplychain.service.SaleOrderPurchaseService;\n import com.axelor.apps.supplychain.service.SaleOrderStockService;\n import com.axelor.apps.supplychain.service.app.AppSupplychainService;\n-import com.axelor.inject.Beans;\n import com.google.inject.Inject;\n import com.google.inject.persist.Transactional;\n \n public class SaleOrderWorkflowServiceBusinessProductionImpl\n     extends SaleOrderWorkflowServiceProductionImpl {\n \n+  private AnalyticMoveLineRepository analyticMoveLineRepository;\n+\n   @Inject\n   public SaleOrderWorkflowServiceBusinessProductionImpl(\n       SequenceService sequenceService,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0MTA3Mw==", "url": "https://github.com/axelor/axelor-open-suite/pull/6039#discussion_r518141073", "bodyText": "surround everything in a try catch to trace any exception", "author": "ale-axelor", "createdAt": "2020-11-05T15:32:23Z", "path": "axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java", "diffHunk": "@@ -322,10 +321,7 @@ public void exportAnnex(ActionRequest request, ActionResponse response) throws A\n   public void updateLines(ActionRequest request, ActionResponse response) throws AxelorException {", "originalCommit": "25f4b0245d05b7400ebc6cc89cead86482110c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e18f14a1e2e61d887407913fedc600ff83c819c", "chunk": "diff --git a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java\nindex d6ce067b66..45c81741f2 100644\n--- a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java\n+++ b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java\n\n@@ -319,9 +320,13 @@ public class InvoiceController {\n   }\n \n   public void updateLines(ActionRequest request, ActionResponse response) throws AxelorException {\n-    Invoice invoice = request.getContext().asType(Invoice.class);\n-    invoice = Beans.get(InvoiceRepository.class).find(invoice.getId());\n-    invoice = Beans.get(InvoiceServiceProjectImpl.class).updateLines(invoice);\n-    response.setValue(\"invoiceLineList\", invoice.getInvoiceLineList());\n+    try {\n+      Invoice invoice = request.getContext().asType(Invoice.class);\n+      invoice = Beans.get(InvoiceRepository.class).find(invoice.getId());\n+      invoice = Beans.get(InvoiceServiceProject.class).updateLines(invoice);\n+      response.setValue(\"invoiceLineList\", invoice.getInvoiceLineList());\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0MjA5Mw==", "url": "https://github.com/axelor/axelor-open-suite/pull/6039#discussion_r518142093", "bodyText": "Create a new interface InvoiceServiceProject that will be implemented by InvoiceServiceProjectImpl and inject it, in order to inject interface and not the implementation.", "author": "ale-axelor", "createdAt": "2020-11-05T15:33:28Z", "path": "axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java", "diffHunk": "@@ -322,10 +321,7 @@ public void exportAnnex(ActionRequest request, ActionResponse response) throws A\n   public void updateLines(ActionRequest request, ActionResponse response) throws AxelorException {\n     Invoice invoice = request.getContext().asType(Invoice.class);\n     invoice = Beans.get(InvoiceRepository.class).find(invoice.getId());\n-\n-    for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-      invoiceLine.setProject(invoice.getProject());\n-    }\n+    invoice = Beans.get(InvoiceServiceProjectImpl.class).updateLines(invoice);", "originalCommit": "25f4b0245d05b7400ebc6cc89cead86482110c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e18f14a1e2e61d887407913fedc600ff83c819c", "chunk": "diff --git a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java\nindex d6ce067b66..45c81741f2 100644\n--- a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java\n+++ b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceController.java\n\n@@ -319,9 +320,13 @@ public class InvoiceController {\n   }\n \n   public void updateLines(ActionRequest request, ActionResponse response) throws AxelorException {\n-    Invoice invoice = request.getContext().asType(Invoice.class);\n-    invoice = Beans.get(InvoiceRepository.class).find(invoice.getId());\n-    invoice = Beans.get(InvoiceServiceProjectImpl.class).updateLines(invoice);\n-    response.setValue(\"invoiceLineList\", invoice.getInvoiceLineList());\n+    try {\n+      Invoice invoice = request.getContext().asType(Invoice.class);\n+      invoice = Beans.get(InvoiceRepository.class).find(invoice.getId());\n+      invoice = Beans.get(InvoiceServiceProject.class).updateLines(invoice);\n+      response.setValue(\"invoiceLineList\", invoice.getInvoiceLineList());\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1NDMxMQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/6039#discussion_r518154311", "bodyText": "surround everything in a try catch to trace any exception", "author": "ale-axelor", "createdAt": "2020-11-05T15:46:57Z", "path": "axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceLineProjectController.java", "diffHunk": "@@ -147,4 +149,15 @@ public void unsetSupplierInvoiceLineProject(ActionRequest request, ActionRespons\n       TraceBackService.trace(e);\n     }\n   }\n+\n+  public void setProjectToAnalyticDistribution(ActionRequest request, ActionResponse response) {", "originalCommit": "25f4b0245d05b7400ebc6cc89cead86482110c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e18f14a1e2e61d887407913fedc600ff83c819c", "chunk": "diff --git a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceLineProjectController.java b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceLineProjectController.java\nindex af88e5d495..bbf94c55ee 100644\n--- a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceLineProjectController.java\n+++ b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/InvoiceLineProjectController.java\n\n@@ -151,13 +151,17 @@ public class InvoiceLineProjectController {\n   }\n \n   public void setProjectToAnalyticDistribution(ActionRequest request, ActionResponse response) {\n-    InvoiceLine invoiceLine = request.getContext().asType(InvoiceLine.class);\n-    List<AnalyticMoveLine> analyticMoveLines = invoiceLine.getAnalyticMoveLineList();\n-    if (analyticMoveLines != null) {\n-      response.setValue(\n-          \"analyticMoveLineList\",\n-          Beans.get(InvoiceLineProjectService.class)\n-              .setProjectToAnalyticDistribution(invoiceLine, analyticMoveLines));\n+    try {\n+      InvoiceLine invoiceLine = request.getContext().asType(InvoiceLine.class);\n+      List<AnalyticMoveLine> analyticMoveLines = invoiceLine.getAnalyticMoveLineList();\n+      if (analyticMoveLines != null) {\n+        response.setValue(\n+            \"analyticMoveLineList\",\n+            Beans.get(InvoiceLineProjectService.class)\n+                .setProjectToAnalyticDistribution(invoiceLine, analyticMoveLines));\n+      }\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1NDg3OQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/6039#discussion_r518154879", "bodyText": "surround everything in a try catch to trace any exception", "author": "ale-axelor", "createdAt": "2020-11-05T15:47:39Z", "path": "axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/PurchaseOrderLineProjectController.java", "diffHunk": "@@ -113,4 +114,16 @@ public void updateToInvoice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void updateAnalyticDistributionWithProject(ActionRequest request, ActionResponse response)", "originalCommit": "25f4b0245d05b7400ebc6cc89cead86482110c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e18f14a1e2e61d887407913fedc600ff83c819c", "chunk": "diff --git a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/PurchaseOrderLineProjectController.java b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/PurchaseOrderLineProjectController.java\nindex 9d71081054..986ae6801b 100644\n--- a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/PurchaseOrderLineProjectController.java\n+++ b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/PurchaseOrderLineProjectController.java\n\n@@ -117,13 +117,17 @@ public class PurchaseOrderLineProjectController {\n \n   public void updateAnalyticDistributionWithProject(ActionRequest request, ActionResponse response)\n       throws AxelorException {\n-    PurchaseOrderLine purchaseOrderLine = request.getContext().asType(PurchaseOrderLine.class);\n-    if (purchaseOrderLine.getAnalyticMoveLineList() == null) {\n-      return;\n+    try {\n+      PurchaseOrderLine purchaseOrderLine = request.getContext().asType(PurchaseOrderLine.class);\n+      if (purchaseOrderLine.getAnalyticMoveLineList() == null) {\n+        return;\n+      }\n+      purchaseOrderLine =\n+          Beans.get(PurchaseOrderLineProjectService.class)\n+              .updateAnalyticDistributionWithProject(purchaseOrderLine);\n+      response.setValue(\"analyticMoveLineList\", purchaseOrderLine.getAnalyticMoveLineList());\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n     }\n-    purchaseOrderLine =\n-        Beans.get(PurchaseOrderLineProjectService.class)\n-            .updateAnalyticDistributionWithProject(purchaseOrderLine);\n-    response.setValue(\"analyticMoveLineList\", purchaseOrderLine.getAnalyticMoveLineList());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1NTIxOA==", "url": "https://github.com/axelor/axelor-open-suite/pull/6039#discussion_r518155218", "bodyText": "surround everything in a try catch to trace any exception", "author": "ale-axelor", "createdAt": "2020-11-05T15:48:08Z", "path": "axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/SaleOrderLineProjectController.java", "diffHunk": "@@ -110,4 +111,16 @@ public void updateToInvoice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void updateAnalyticDistributionWithProject(ActionRequest request, ActionResponse response)", "originalCommit": "25f4b0245d05b7400ebc6cc89cead86482110c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e18f14a1e2e61d887407913fedc600ff83c819c", "chunk": "diff --git a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/SaleOrderLineProjectController.java b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/SaleOrderLineProjectController.java\nindex eadee4d8e3..ad8192311a 100644\n--- a/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/SaleOrderLineProjectController.java\n+++ b/axelor-business-project/src/main/java/com/axelor/apps/businessproject/web/SaleOrderLineProjectController.java\n\n@@ -114,13 +114,17 @@ public class SaleOrderLineProjectController {\n \n   public void updateAnalyticDistributionWithProject(ActionRequest request, ActionResponse response)\n       throws AxelorException {\n-    SaleOrderLine saleOrderLine = request.getContext().asType(SaleOrderLine.class);\n-    if (saleOrderLine.getAnalyticMoveLineList() == null) {\n-      return;\n+    try {\n+      SaleOrderLine saleOrderLine = request.getContext().asType(SaleOrderLine.class);\n+      if (saleOrderLine.getAnalyticMoveLineList() == null) {\n+        return;\n+      }\n+      saleOrderLine =\n+          Beans.get(SaleOrderLineProjectService.class)\n+              .updateAnalyticDistributionWithProject(saleOrderLine);\n+      response.setValue(\"analyticMoveLineList\", saleOrderLine.getAnalyticMoveLineList());\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n     }\n-    saleOrderLine =\n-        Beans.get(SaleOrderLineProjectService.class)\n-            .updateAnalyticDistributionWithProject(saleOrderLine);\n-    response.setValue(\"analyticMoveLineList\", saleOrderLine.getAnalyticMoveLineList());\n   }\n }\n"}}, {"oid": "3c45d80c42be1c9487629b1859bbf6b29a6d36ab", "url": "https://github.com/axelor/axelor-open-suite/commit/3c45d80c42be1c9487629b1859bbf6b29a6d36ab", "message": "Merge branch '5.4-dev' of github.com:axelor/axelor-open-suite into 5.4-dev-32387", "committedDate": "2020-11-05T16:13:07Z", "type": "commit"}, {"oid": "0e18f14a1e2e61d887407913fedc600ff83c819c", "url": "https://github.com/axelor/axelor-open-suite/commit/0e18f14a1e2e61d887407913fedc600ff83c819c", "message": "Add change requested", "committedDate": "2020-11-05T16:31:10Z", "type": "commit"}]}