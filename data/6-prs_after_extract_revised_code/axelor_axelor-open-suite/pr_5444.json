{"pr_number": 5444, "pr_title": "RM26851 : Add custom report types for accounting report", "pr_createdAt": "2020-05-14T12:38:52Z", "pr_url": "https://github.com/axelor/axelor-open-suite/pull/5444", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMTM2Ng==", "url": "https://github.com/axelor/axelor-open-suite/pull/5444#discussion_r482121366", "bodyText": "Please do not use import wildcards", "author": "ale-axelor", "createdAt": "2020-09-02T14:38:38Z", "path": "axelor-account/src/main/java/com/axelor/apps/account/module/AccountModule.java", "diffHunk": "@@ -52,48 +52,7 @@\n import com.axelor.apps.account.db.repo.ReconcileRepository;\n import com.axelor.apps.account.db.repo.SubrogationReleaseManagementRepository;\n import com.axelor.apps.account.db.repo.SubrogationReleaseRepository;\n-import com.axelor.apps.account.service.AccountManagementAccountService;\n-import com.axelor.apps.account.service.AccountManagementServiceAccountImpl;\n-import com.axelor.apps.account.service.AccountingCloseAnnualService;\n-import com.axelor.apps.account.service.AccountingCloseAnnualServiceImpl;\n-import com.axelor.apps.account.service.AccountingReportService;\n-import com.axelor.apps.account.service.AccountingReportServiceImpl;\n-import com.axelor.apps.account.service.AccountingSituationService;\n-import com.axelor.apps.account.service.AccountingSituationServiceImpl;\n-import com.axelor.apps.account.service.AddressServiceAccountImpl;\n-import com.axelor.apps.account.service.AnalyticMoveLineService;\n-import com.axelor.apps.account.service.AnalyticMoveLineServiceImpl;\n-import com.axelor.apps.account.service.BankDetailsServiceAccountImpl;\n-import com.axelor.apps.account.service.DepositSlipService;\n-import com.axelor.apps.account.service.DepositSlipServiceImpl;\n-import com.axelor.apps.account.service.FiscalPositionAccountService;\n-import com.axelor.apps.account.service.FiscalPositionAccountServiceImpl;\n-import com.axelor.apps.account.service.FixedAssetLineService;\n-import com.axelor.apps.account.service.FixedAssetLineServiceImpl;\n-import com.axelor.apps.account.service.FixedAssetService;\n-import com.axelor.apps.account.service.FixedAssetServiceImpl;\n-import com.axelor.apps.account.service.MoveLineExportService;\n-import com.axelor.apps.account.service.MoveLineExportServiceImpl;\n-import com.axelor.apps.account.service.NotificationService;\n-import com.axelor.apps.account.service.NotificationServiceImpl;\n-import com.axelor.apps.account.service.PaymentScheduleLineService;\n-import com.axelor.apps.account.service.PaymentScheduleLineServiceImpl;\n-import com.axelor.apps.account.service.PaymentScheduleService;\n-import com.axelor.apps.account.service.PaymentScheduleServiceImpl;\n-import com.axelor.apps.account.service.PeriodServiceAccount;\n-import com.axelor.apps.account.service.PeriodServiceAccountImpl;\n-import com.axelor.apps.account.service.ReconcileGroupSequenceService;\n-import com.axelor.apps.account.service.ReconcileGroupSequenceServiceImpl;\n-import com.axelor.apps.account.service.ReconcileGroupService;\n-import com.axelor.apps.account.service.ReconcileGroupServiceImpl;\n-import com.axelor.apps.account.service.ReconcileService;\n-import com.axelor.apps.account.service.ReconcileServiceImpl;\n-import com.axelor.apps.account.service.SubrogationReleaseService;\n-import com.axelor.apps.account.service.SubrogationReleaseServiceImpl;\n-import com.axelor.apps.account.service.TaxPaymentMoveLineService;\n-import com.axelor.apps.account.service.TaxPaymentMoveLineServiceImpl;\n-import com.axelor.apps.account.service.TemplateMessageAccountService;\n-import com.axelor.apps.account.service.TemplateMessageAccountServiceImpl;\n+import com.axelor.apps.account.service.*;", "originalCommit": "3065186431787248d1653b8894631bb431f46dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5f3d621da8fdea920b10363b622dc8adb4ac49", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/apps/account/module/AccountModule.java b/axelor-account/src/main/java/com/axelor/apps/account/module/AccountModule.java\nindex b73580350a..b0822adac6 100644\n--- a/axelor-account/src/main/java/com/axelor/apps/account/module/AccountModule.java\n+++ b/axelor-account/src/main/java/com/axelor/apps/account/module/AccountModule.java\n\n@@ -52,7 +52,50 @@ import com.axelor.apps.account.db.repo.ReconcileManagementRepository;\n import com.axelor.apps.account.db.repo.ReconcileRepository;\n import com.axelor.apps.account.db.repo.SubrogationReleaseManagementRepository;\n import com.axelor.apps.account.db.repo.SubrogationReleaseRepository;\n-import com.axelor.apps.account.service.*;\n+import com.axelor.apps.account.service.AccountManagementAccountService;\n+import com.axelor.apps.account.service.AccountManagementServiceAccountImpl;\n+import com.axelor.apps.account.service.AccountingCloseAnnualService;\n+import com.axelor.apps.account.service.AccountingCloseAnnualServiceImpl;\n+import com.axelor.apps.account.service.AccountingReportService;\n+import com.axelor.apps.account.service.AccountingReportServiceImpl;\n+import com.axelor.apps.account.service.AccountingReportTypeService;\n+import com.axelor.apps.account.service.AccountingReportTypeServiceImpl;\n+import com.axelor.apps.account.service.AccountingSituationService;\n+import com.axelor.apps.account.service.AccountingSituationServiceImpl;\n+import com.axelor.apps.account.service.AddressServiceAccountImpl;\n+import com.axelor.apps.account.service.AnalyticMoveLineService;\n+import com.axelor.apps.account.service.AnalyticMoveLineServiceImpl;\n+import com.axelor.apps.account.service.BankDetailsServiceAccountImpl;\n+import com.axelor.apps.account.service.DepositSlipService;\n+import com.axelor.apps.account.service.DepositSlipServiceImpl;\n+import com.axelor.apps.account.service.FiscalPositionAccountService;\n+import com.axelor.apps.account.service.FiscalPositionAccountServiceImpl;\n+import com.axelor.apps.account.service.FixedAssetLineService;\n+import com.axelor.apps.account.service.FixedAssetLineServiceImpl;\n+import com.axelor.apps.account.service.FixedAssetService;\n+import com.axelor.apps.account.service.FixedAssetServiceImpl;\n+import com.axelor.apps.account.service.MoveLineExportService;\n+import com.axelor.apps.account.service.MoveLineExportServiceImpl;\n+import com.axelor.apps.account.service.NotificationService;\n+import com.axelor.apps.account.service.NotificationServiceImpl;\n+import com.axelor.apps.account.service.PaymentScheduleLineService;\n+import com.axelor.apps.account.service.PaymentScheduleLineServiceImpl;\n+import com.axelor.apps.account.service.PaymentScheduleService;\n+import com.axelor.apps.account.service.PaymentScheduleServiceImpl;\n+import com.axelor.apps.account.service.PeriodServiceAccount;\n+import com.axelor.apps.account.service.PeriodServiceAccountImpl;\n+import com.axelor.apps.account.service.ReconcileGroupSequenceService;\n+import com.axelor.apps.account.service.ReconcileGroupSequenceServiceImpl;\n+import com.axelor.apps.account.service.ReconcileGroupService;\n+import com.axelor.apps.account.service.ReconcileGroupServiceImpl;\n+import com.axelor.apps.account.service.ReconcileService;\n+import com.axelor.apps.account.service.ReconcileServiceImpl;\n+import com.axelor.apps.account.service.SubrogationReleaseService;\n+import com.axelor.apps.account.service.SubrogationReleaseServiceImpl;\n+import com.axelor.apps.account.service.TaxPaymentMoveLineService;\n+import com.axelor.apps.account.service.TaxPaymentMoveLineServiceImpl;\n+import com.axelor.apps.account.service.TemplateMessageAccountService;\n+import com.axelor.apps.account.service.TemplateMessageAccountServiceImpl;\n import com.axelor.apps.account.service.app.AppAccountService;\n import com.axelor.apps.account.service.app.AppAccountServiceImpl;\n import com.axelor.apps.account.service.extract.ExtractContextMoveService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NjEzNg==", "url": "https://github.com/axelor/axelor-open-suite/pull/5444#discussion_r482176136", "bodyText": "please check if this todo needs to be addressed", "author": "ale-axelor", "createdAt": "2020-09-02T15:47:07Z", "path": "axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java", "diffHunk": "@@ -330,22 +345,39 @@ public String getSequence(AccountingReport accountingReport) throws AxelorExcept\n             accountingReport.getCompany().getName());\n       }\n       return seq;\n+    } else if (accountingReportTypeSelect >= 3000) {\n+      // todo \u00e0 changer", "originalCommit": "3065186431787248d1653b8894631bb431f46dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c89a8b713022ffa750756e5d91d1f01a78daad38", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java b/axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java\nindex 7e4fd2808a..6e5a31d15e 100644\n--- a/axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java\n+++ b/axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java\n\n@@ -345,15 +345,14 @@ public class AccountingReportServiceImpl implements AccountingReportService {\n             accountingReport.getCompany().getName());\n       }\n       return seq;\n-    } else if (accountingReportTypeSelect >= 3000) {\n-      // todo \u00e0 changer\n+    } else if (accountingReportTypeSelect == 3000) {\n       String seq =\n           sequenceService.getSequenceNumber(\n-              SequenceRepository.ACCOUNTING_REPORT, accountingReport.getCompany());\n+              SequenceRepository.CUSTOM_ACCOUNTING_REPORT, accountingReport.getCompany());\n       if (seq == null) {\n         throw new AxelorException(\n             TraceBackRepository.CATEGORY_CONFIGURATION_ERROR,\n-            I18n.get(IExceptionMessage.ACCOUNTING_REPORT_1),\n+            I18n.get(IExceptionMessage.ACCOUNTING_REPORT_7),\n             I18n.get(com.axelor.apps.base.exceptions.IExceptionMessage.EXCEPTION),\n             accountingReport.getCompany().getName());\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMDIxOA==", "url": "https://github.com/axelor/axelor-open-suite/pull/5444#discussion_r483000218", "bodyText": "Please do not use import wildcards", "author": "ale-axelor", "createdAt": "2020-09-03T13:59:59Z", "path": "axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java", "diffHunk": "@@ -17,20 +17,13 @@\n  */\n package com.axelor.apps.account.service;\n \n+import com.axelor.app.AppSettings;\n import com.axelor.apps.ReportFactory;\n import com.axelor.apps.account.db.Account;\n import com.axelor.apps.account.db.AccountConfig;\n import com.axelor.apps.account.db.AccountingReport;\n import com.axelor.apps.account.db.JournalType;\n-import com.axelor.apps.account.db.repo.AccountRepository;\n-import com.axelor.apps.account.db.repo.AccountingReportRepository;\n-import com.axelor.apps.account.db.repo.AnalyticMoveLineRepository;\n-import com.axelor.apps.account.db.repo.FixedAssetRepository;\n-import com.axelor.apps.account.db.repo.MoveLineRepository;\n-import com.axelor.apps.account.db.repo.MoveRepository;\n-import com.axelor.apps.account.db.repo.PaymentModeRepository;\n-import com.axelor.apps.account.db.repo.TaxPaymentMoveLineRepository;\n-import com.axelor.apps.account.db.repo.TaxRepository;\n+import com.axelor.apps.account.db.repo.*;", "originalCommit": "3065186431787248d1653b8894631bb431f46dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5f3d621da8fdea920b10363b622dc8adb4ac49", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java b/axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java\nindex 7e4fd2808a..61404a2342 100644\n--- a/axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java\n+++ b/axelor-account/src/main/java/com/axelor/apps/account/service/AccountingReportServiceImpl.java\n\n@@ -23,7 +23,15 @@ import com.axelor.apps.account.db.Account;\n import com.axelor.apps.account.db.AccountConfig;\n import com.axelor.apps.account.db.AccountingReport;\n import com.axelor.apps.account.db.JournalType;\n-import com.axelor.apps.account.db.repo.*;\n+import com.axelor.apps.account.db.repo.AccountRepository;\n+import com.axelor.apps.account.db.repo.AccountingReportRepository;\n+import com.axelor.apps.account.db.repo.AnalyticMoveLineRepository;\n+import com.axelor.apps.account.db.repo.FixedAssetRepository;\n+import com.axelor.apps.account.db.repo.MoveLineRepository;\n+import com.axelor.apps.account.db.repo.MoveRepository;\n+import com.axelor.apps.account.db.repo.PaymentModeRepository;\n+import com.axelor.apps.account.db.repo.TaxPaymentMoveLineRepository;\n+import com.axelor.apps.account.db.repo.TaxRepository;\n import com.axelor.apps.account.exception.IExceptionMessage;\n import com.axelor.apps.account.report.IReport;\n import com.axelor.apps.account.service.app.AppAccountService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzA4Nw==", "url": "https://github.com/axelor/axelor-open-suite/pull/5444#discussion_r483007087", "bodyText": "Please use injection in constructor", "author": "ale-axelor", "createdAt": "2020-09-03T14:09:20Z", "path": "axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.axelor.csv.script;\n+\n+import com.axelor.apps.account.db.Account;\n+import com.axelor.apps.account.db.AccountType;\n+import com.axelor.apps.account.db.AccountingReportConfigLine;\n+import com.axelor.apps.account.db.repo.AccountRepository;\n+import com.axelor.apps.account.db.repo.AccountTypeRepository;\n+import com.axelor.apps.account.db.repo.AccountingReportConfigLineRepository;\n+import com.axelor.exception.AxelorException;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class ImportAccountingReportConfigLine {\n+    @Inject private AccountRepository accountRepo;\n+\n+    @Inject private AccountTypeRepository accountTypeRepo;\n+\n+    @Inject private AccountingReportConfigLineRepository accountingReportConfigLineRepo;", "originalCommit": "3065186431787248d1653b8894631bb431f46dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c89a8b713022ffa750756e5d91d1f01a78daad38", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java b/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java\nindex 5e3225ef70..6d7889a2e7 100644\n--- a/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java\n+++ b/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java\n\n@@ -9,97 +9,98 @@ import com.axelor.apps.account.db.repo.AccountingReportConfigLineRepository;\n import com.axelor.exception.AxelorException;\n import com.google.inject.Inject;\n import com.google.inject.persist.Transactional;\n-\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n public class ImportAccountingReportConfigLine {\n-    @Inject private AccountRepository accountRepo;\n-\n-    @Inject private AccountTypeRepository accountTypeRepo;\n-\n-    @Inject private AccountingReportConfigLineRepository accountingReportConfigLineRepo;\n-\n-    @Transactional(rollbackOn = {Exception.class})\n-    public Object setAccounts(Object bean, Map<String, Object> values) throws AxelorException {\n-        assert bean instanceof AccountingReportConfigLine;\n-        AccountingReportConfigLine configLine = (AccountingReportConfigLine) bean;\n-\n-        if (configLine.getRuleTypeSelect() == 2) {\n-            String accountTypeValues = (String) values.get(\"accountType\");\n-            if (accountTypeValues != null && !accountTypeValues.isEmpty()) {\n-                String[] types = accountTypeValues.split(\"\\\\|\");\n-                Set<AccountType> accountTypes = new HashSet<>();\n-                AccountType typeToAdd;\n-                for (String type: types) {\n-                    typeToAdd =\n-                            accountTypeRepo.all()\n-                                    .filter(\"self.importId = :importId\")\n-                                    .bind(\"importId\", type)\n-                                    .fetchOne();\n-                    if (typeToAdd != null) {\n-                        accountTypes.add(typeToAdd);\n-                    }\n-                }\n-                configLine.setAccountTypeSet(accountTypes);\n-            }\n-\n-            String accountValues = (String) values.get(\"accountCode\");\n-            if (accountValues != null && !accountValues.isEmpty()) {\n-                String[] codes = accountValues.split(\"\\\\|\");\n-                Set<Account> accounts = new HashSet<>();\n-                Account accountToAdd;\n-                List<Account> fetched;\n-                for (String code: codes) {\n-                    accountToAdd =\n-                            accountRepo.all()\n-                                    .filter(\"self.code = :code\")\n-                                    .bind(\"code\", code)\n-                                    .fetchOne();\n-\n-                    if (accountToAdd == null) {\n-                        fetched = accountRepo.all().fetch();\n-                        for (Account account: fetched) {\n-                            if (compareCodes(account.getCode(), code)) {\n-                                accountToAdd = account;\n-                                break;\n-                            }\n-                        }\n-                    }\n-\n-                    if (accountToAdd != null) {\n-                        accounts.add(accountToAdd);\n-                    }\n-                }\n-                configLine.setAccountSet(accounts);\n+  private AccountRepository accountRepo;\n+  private AccountTypeRepository accountTypeRepo;\n+  private AccountingReportConfigLineRepository accountingReportConfigLineRepo;\n+\n+  @Inject\n+  public ImportAccountingReportConfigLine(AccountRepository accountRepo, AccountTypeRepository accountTypeRepo, AccountingReportConfigLineRepository accountingReportConfigLineRepo) {\n+    this.accountRepo = accountRepo;\n+    this.accountTypeRepo = accountTypeRepo;\n+    this.accountingReportConfigLineRepo = accountingReportConfigLineRepo;\n+  }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public Object setAccounts(Object bean, Map<String, Object> values) throws AxelorException {\n+    assert bean instanceof AccountingReportConfigLine;\n+    AccountingReportConfigLine configLine = (AccountingReportConfigLine) bean;\n+\n+    if (configLine.getRuleTypeSelect() == AccountingReportConfigLineRepository.RULE_TYPE_SUM_OF_ACCOUNTS) {\n+      String accountTypeValues = (String) values.get(\"accountType\");\n+      if (accountTypeValues != null && !accountTypeValues.isEmpty()) {\n+        String[] types = accountTypeValues.split(\"\\\\|\");\n+        Set<AccountType> accountTypes = new HashSet<>();\n+        AccountType typeToAdd;\n+        for (String type : types) {\n+          typeToAdd =\n+              accountTypeRepo\n+                  .all()\n+                  .filter(\"self.importId = :importId\")\n+                  .bind(\"importId\", type)\n+                  .fetchOne();\n+          if (typeToAdd != null) {\n+            accountTypes.add(typeToAdd);\n+          }\n+        }\n+        configLine.setAccountTypeSet(accountTypes);\n+      }\n+\n+      String accountValues = (String) values.get(\"accountCode\");\n+      if (accountValues != null && !accountValues.isEmpty()) {\n+        String[] codes = accountValues.split(\"\\\\|\");\n+        Set<Account> accounts = new HashSet<>();\n+        Account accountToAdd;\n+        List<Account> fetched;\n+        for (String code : codes) {\n+          accountToAdd =\n+              accountRepo.all().filter(\"self.code = :code\").bind(\"code\", code).fetchOne();\n+\n+          if (accountToAdd == null) {\n+            fetched = accountRepo.all().fetch();\n+            for (Account account : fetched) {\n+              if (compareCodes(account.getCode(), code)) {\n+                accountToAdd = account;\n+                break;\n+              }\n             }\n+          }\n \n-            accountingReportConfigLineRepo.save(configLine);\n+          if (accountToAdd != null) {\n+            accounts.add(accountToAdd);\n+          }\n         }\n+        configLine.setAccountSet(accounts);\n+      }\n \n-        return configLine;\n+      accountingReportConfigLineRepo.save(configLine);\n     }\n \n-    private boolean compareCodes(String code1, String code2) {\n-        code1 = removeZeros(code1);\n-        code2 = removeZeros(code2);\n-        return code1.equals(code2);\n-    }\n+    return configLine;\n+  }\n \n-    private String removeZeros(String code) {\n-        StringBuffer sb = new StringBuffer(code);\n-        sb.reverse();\n-        code = sb.toString();\n+  private boolean compareCodes(String code1, String code2) {\n+    code1 = removeZeros(code1);\n+    code2 = removeZeros(code2);\n+    return code1.equals(code2);\n+  }\n \n-        int i = 0;\n-        while (i < code.length() && code.charAt(i) == '0')\n-            i++;\n+  private String removeZeros(String code) {\n+    StringBuffer sb = new StringBuffer(code);\n+    sb.reverse();\n+    code = sb.toString();\n \n-        sb = new StringBuffer(code);\n-        sb.replace(0, i, \"\");\n+    int i = 0;\n+    while (i < code.length() && code.charAt(i) == '0') i++;\n \n-        return sb.reverse().toString();\n-    }\n+    sb = new StringBuffer(code);\n+    sb.replace(0, i, \"\");\n+\n+    return sb.reverse().toString();\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAxMjU4MA==", "url": "https://github.com/axelor/axelor-open-suite/pull/5444#discussion_r483012580", "bodyText": "Use constant defined in repository instead of hard coded value", "author": "ale-axelor", "createdAt": "2020-09-03T14:16:57Z", "path": "axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.axelor.csv.script;\n+\n+import com.axelor.apps.account.db.Account;\n+import com.axelor.apps.account.db.AccountType;\n+import com.axelor.apps.account.db.AccountingReportConfigLine;\n+import com.axelor.apps.account.db.repo.AccountRepository;\n+import com.axelor.apps.account.db.repo.AccountTypeRepository;\n+import com.axelor.apps.account.db.repo.AccountingReportConfigLineRepository;\n+import com.axelor.exception.AxelorException;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class ImportAccountingReportConfigLine {\n+    @Inject private AccountRepository accountRepo;\n+\n+    @Inject private AccountTypeRepository accountTypeRepo;\n+\n+    @Inject private AccountingReportConfigLineRepository accountingReportConfigLineRepo;\n+\n+    @Transactional(rollbackOn = {Exception.class})\n+    public Object setAccounts(Object bean, Map<String, Object> values) throws AxelorException {\n+        assert bean instanceof AccountingReportConfigLine;\n+        AccountingReportConfigLine configLine = (AccountingReportConfigLine) bean;\n+\n+        if (configLine.getRuleTypeSelect() == 2) {", "originalCommit": "3065186431787248d1653b8894631bb431f46dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c89a8b713022ffa750756e5d91d1f01a78daad38", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java b/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java\nindex 5e3225ef70..6d7889a2e7 100644\n--- a/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java\n+++ b/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportConfigLine.java\n\n@@ -9,97 +9,98 @@ import com.axelor.apps.account.db.repo.AccountingReportConfigLineRepository;\n import com.axelor.exception.AxelorException;\n import com.google.inject.Inject;\n import com.google.inject.persist.Transactional;\n-\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n public class ImportAccountingReportConfigLine {\n-    @Inject private AccountRepository accountRepo;\n-\n-    @Inject private AccountTypeRepository accountTypeRepo;\n-\n-    @Inject private AccountingReportConfigLineRepository accountingReportConfigLineRepo;\n-\n-    @Transactional(rollbackOn = {Exception.class})\n-    public Object setAccounts(Object bean, Map<String, Object> values) throws AxelorException {\n-        assert bean instanceof AccountingReportConfigLine;\n-        AccountingReportConfigLine configLine = (AccountingReportConfigLine) bean;\n-\n-        if (configLine.getRuleTypeSelect() == 2) {\n-            String accountTypeValues = (String) values.get(\"accountType\");\n-            if (accountTypeValues != null && !accountTypeValues.isEmpty()) {\n-                String[] types = accountTypeValues.split(\"\\\\|\");\n-                Set<AccountType> accountTypes = new HashSet<>();\n-                AccountType typeToAdd;\n-                for (String type: types) {\n-                    typeToAdd =\n-                            accountTypeRepo.all()\n-                                    .filter(\"self.importId = :importId\")\n-                                    .bind(\"importId\", type)\n-                                    .fetchOne();\n-                    if (typeToAdd != null) {\n-                        accountTypes.add(typeToAdd);\n-                    }\n-                }\n-                configLine.setAccountTypeSet(accountTypes);\n-            }\n-\n-            String accountValues = (String) values.get(\"accountCode\");\n-            if (accountValues != null && !accountValues.isEmpty()) {\n-                String[] codes = accountValues.split(\"\\\\|\");\n-                Set<Account> accounts = new HashSet<>();\n-                Account accountToAdd;\n-                List<Account> fetched;\n-                for (String code: codes) {\n-                    accountToAdd =\n-                            accountRepo.all()\n-                                    .filter(\"self.code = :code\")\n-                                    .bind(\"code\", code)\n-                                    .fetchOne();\n-\n-                    if (accountToAdd == null) {\n-                        fetched = accountRepo.all().fetch();\n-                        for (Account account: fetched) {\n-                            if (compareCodes(account.getCode(), code)) {\n-                                accountToAdd = account;\n-                                break;\n-                            }\n-                        }\n-                    }\n-\n-                    if (accountToAdd != null) {\n-                        accounts.add(accountToAdd);\n-                    }\n-                }\n-                configLine.setAccountSet(accounts);\n+  private AccountRepository accountRepo;\n+  private AccountTypeRepository accountTypeRepo;\n+  private AccountingReportConfigLineRepository accountingReportConfigLineRepo;\n+\n+  @Inject\n+  public ImportAccountingReportConfigLine(AccountRepository accountRepo, AccountTypeRepository accountTypeRepo, AccountingReportConfigLineRepository accountingReportConfigLineRepo) {\n+    this.accountRepo = accountRepo;\n+    this.accountTypeRepo = accountTypeRepo;\n+    this.accountingReportConfigLineRepo = accountingReportConfigLineRepo;\n+  }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public Object setAccounts(Object bean, Map<String, Object> values) throws AxelorException {\n+    assert bean instanceof AccountingReportConfigLine;\n+    AccountingReportConfigLine configLine = (AccountingReportConfigLine) bean;\n+\n+    if (configLine.getRuleTypeSelect() == AccountingReportConfigLineRepository.RULE_TYPE_SUM_OF_ACCOUNTS) {\n+      String accountTypeValues = (String) values.get(\"accountType\");\n+      if (accountTypeValues != null && !accountTypeValues.isEmpty()) {\n+        String[] types = accountTypeValues.split(\"\\\\|\");\n+        Set<AccountType> accountTypes = new HashSet<>();\n+        AccountType typeToAdd;\n+        for (String type : types) {\n+          typeToAdd =\n+              accountTypeRepo\n+                  .all()\n+                  .filter(\"self.importId = :importId\")\n+                  .bind(\"importId\", type)\n+                  .fetchOne();\n+          if (typeToAdd != null) {\n+            accountTypes.add(typeToAdd);\n+          }\n+        }\n+        configLine.setAccountTypeSet(accountTypes);\n+      }\n+\n+      String accountValues = (String) values.get(\"accountCode\");\n+      if (accountValues != null && !accountValues.isEmpty()) {\n+        String[] codes = accountValues.split(\"\\\\|\");\n+        Set<Account> accounts = new HashSet<>();\n+        Account accountToAdd;\n+        List<Account> fetched;\n+        for (String code : codes) {\n+          accountToAdd =\n+              accountRepo.all().filter(\"self.code = :code\").bind(\"code\", code).fetchOne();\n+\n+          if (accountToAdd == null) {\n+            fetched = accountRepo.all().fetch();\n+            for (Account account : fetched) {\n+              if (compareCodes(account.getCode(), code)) {\n+                accountToAdd = account;\n+                break;\n+              }\n             }\n+          }\n \n-            accountingReportConfigLineRepo.save(configLine);\n+          if (accountToAdd != null) {\n+            accounts.add(accountToAdd);\n+          }\n         }\n+        configLine.setAccountSet(accounts);\n+      }\n \n-        return configLine;\n+      accountingReportConfigLineRepo.save(configLine);\n     }\n \n-    private boolean compareCodes(String code1, String code2) {\n-        code1 = removeZeros(code1);\n-        code2 = removeZeros(code2);\n-        return code1.equals(code2);\n-    }\n+    return configLine;\n+  }\n \n-    private String removeZeros(String code) {\n-        StringBuffer sb = new StringBuffer(code);\n-        sb.reverse();\n-        code = sb.toString();\n+  private boolean compareCodes(String code1, String code2) {\n+    code1 = removeZeros(code1);\n+    code2 = removeZeros(code2);\n+    return code1.equals(code2);\n+  }\n \n-        int i = 0;\n-        while (i < code.length() && code.charAt(i) == '0')\n-            i++;\n+  private String removeZeros(String code) {\n+    StringBuffer sb = new StringBuffer(code);\n+    sb.reverse();\n+    code = sb.toString();\n \n-        sb = new StringBuffer(code);\n-        sb.replace(0, i, \"\");\n+    int i = 0;\n+    while (i < code.length() && code.charAt(i) == '0') i++;\n \n-        return sb.reverse().toString();\n-    }\n+    sb = new StringBuffer(code);\n+    sb.replace(0, i, \"\");\n+\n+    return sb.reverse().toString();\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAxMzg3OQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5444#discussion_r483013879", "bodyText": "Please use injection in constructor", "author": "ale-axelor", "createdAt": "2020-09-03T14:18:47Z", "path": "axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.axelor.csv.script;\n+\n+import com.axelor.apps.account.db.Account;\n+import com.axelor.apps.account.db.AccountType;\n+import com.axelor.apps.account.db.AccountingReportConfigLine;\n+import com.axelor.apps.account.db.AccountingReportType;\n+import com.axelor.apps.account.db.repo.AccountRepository;\n+import com.axelor.apps.account.db.repo.AccountingReportConfigLineRepository;\n+import com.axelor.apps.account.db.repo.AccountingReportTypeRepository;\n+import com.axelor.exception.AxelorException;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+\n+import java.util.*;\n+\n+public class ImportAccountingReportType {\n+    @Inject private AccountingReportTypeRepository reportTypeRepo;\n+\n+    @Inject private AccountingReportConfigLineRepository configLineRepo;", "originalCommit": "3065186431787248d1653b8894631bb431f46dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c89a8b713022ffa750756e5d91d1f01a78daad38", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java b/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java\nindex aacc03caa8..f5ad99ba54 100644\n--- a/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java\n+++ b/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java\n\n@@ -1,44 +1,47 @@\n package com.axelor.csv.script;\n \n-import com.axelor.apps.account.db.Account;\n-import com.axelor.apps.account.db.AccountType;\n import com.axelor.apps.account.db.AccountingReportConfigLine;\n import com.axelor.apps.account.db.AccountingReportType;\n-import com.axelor.apps.account.db.repo.AccountRepository;\n import com.axelor.apps.account.db.repo.AccountingReportConfigLineRepository;\n import com.axelor.apps.account.db.repo.AccountingReportTypeRepository;\n import com.axelor.exception.AxelorException;\n import com.google.inject.Inject;\n import com.google.inject.persist.Transactional;\n-\n import java.util.*;\n \n public class ImportAccountingReportType {\n-    @Inject private AccountingReportTypeRepository reportTypeRepo;\n-\n-    @Inject private AccountingReportConfigLineRepository configLineRepo;\n-\n-    @Transactional(rollbackOn = {Exception.class})\n-    public Object setRules(Object bean, Map<String, Object> values) throws AxelorException {\n-        assert bean instanceof AccountingReportType;\n-        AccountingReportType reportType = (AccountingReportType) bean;\n-\n-        String configLineValues = (String) values.get(\"rules\");\n-        if (configLineValues != null && !configLineValues.isEmpty()) {\n-            String[] rules = configLineValues.split(\"\\\\|\");\n-            List<AccountingReportConfigLine> configLines = new ArrayList<>();\n-            for (String rule: rules) {\n-            configLines.add(\n-                configLineRepo.all()\n+\n+  private AccountingReportTypeRepository reportTypeRepo;\n+  private AccountingReportConfigLineRepository configLineRepo;\n+\n+  @Inject\n+  public ImportAccountingReportType(AccountingReportTypeRepository reportTypeRepo, AccountingReportConfigLineRepository configLineRepo) {\n+    this.reportTypeRepo = reportTypeRepo;\n+    this.configLineRepo = configLineRepo;\n+  }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public Object setRules(Object bean, Map<String, Object> values) throws AxelorException {\n+    assert bean instanceof AccountingReportType;\n+    AccountingReportType reportType = (AccountingReportType) bean;\n+\n+    String configLineValues = (String) values.get(\"rules\");\n+    if (configLineValues != null && !configLineValues.isEmpty()) {\n+      String[] rules = configLineValues.split(\"\\\\|\");\n+      List<AccountingReportConfigLine> configLines = new ArrayList<>();\n+      for (String rule : rules) {\n+        configLines.add(\n+            configLineRepo\n+                .all()\n                 .filter(\"self.importId = :importId\")\n                 .bind(\"importId\", rule)\n                 .fetchOne());\n-            }\n-            reportType.setAccountingReportConfigLineList(configLines);\n-        }\n+      }\n+      reportType.setAccountingReportConfigLineList(configLines);\n+    }\n \n-        reportTypeRepo.save(reportType);\n+    reportTypeRepo.save(reportType);\n \n-        return reportType;\n-    }\n+    return reportType;\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAxNDMzNw==", "url": "https://github.com/axelor/axelor-open-suite/pull/5444#discussion_r483014337", "bodyText": "Please do not use import wildcards", "author": "ale-axelor", "createdAt": "2020-09-03T14:19:20Z", "path": "axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.axelor.csv.script;\n+\n+import com.axelor.apps.account.db.Account;\n+import com.axelor.apps.account.db.AccountType;\n+import com.axelor.apps.account.db.AccountingReportConfigLine;\n+import com.axelor.apps.account.db.AccountingReportType;\n+import com.axelor.apps.account.db.repo.AccountRepository;\n+import com.axelor.apps.account.db.repo.AccountingReportConfigLineRepository;\n+import com.axelor.apps.account.db.repo.AccountingReportTypeRepository;\n+import com.axelor.exception.AxelorException;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+\n+import java.util.*;", "originalCommit": "3065186431787248d1653b8894631bb431f46dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c89a8b713022ffa750756e5d91d1f01a78daad38", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java b/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java\nindex aacc03caa8..f5ad99ba54 100644\n--- a/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java\n+++ b/axelor-account/src/main/java/com/axelor/csv/script/ImportAccountingReportType.java\n\n@@ -1,44 +1,47 @@\n package com.axelor.csv.script;\n \n-import com.axelor.apps.account.db.Account;\n-import com.axelor.apps.account.db.AccountType;\n import com.axelor.apps.account.db.AccountingReportConfigLine;\n import com.axelor.apps.account.db.AccountingReportType;\n-import com.axelor.apps.account.db.repo.AccountRepository;\n import com.axelor.apps.account.db.repo.AccountingReportConfigLineRepository;\n import com.axelor.apps.account.db.repo.AccountingReportTypeRepository;\n import com.axelor.exception.AxelorException;\n import com.google.inject.Inject;\n import com.google.inject.persist.Transactional;\n-\n import java.util.*;\n \n public class ImportAccountingReportType {\n-    @Inject private AccountingReportTypeRepository reportTypeRepo;\n-\n-    @Inject private AccountingReportConfigLineRepository configLineRepo;\n-\n-    @Transactional(rollbackOn = {Exception.class})\n-    public Object setRules(Object bean, Map<String, Object> values) throws AxelorException {\n-        assert bean instanceof AccountingReportType;\n-        AccountingReportType reportType = (AccountingReportType) bean;\n-\n-        String configLineValues = (String) values.get(\"rules\");\n-        if (configLineValues != null && !configLineValues.isEmpty()) {\n-            String[] rules = configLineValues.split(\"\\\\|\");\n-            List<AccountingReportConfigLine> configLines = new ArrayList<>();\n-            for (String rule: rules) {\n-            configLines.add(\n-                configLineRepo.all()\n+\n+  private AccountingReportTypeRepository reportTypeRepo;\n+  private AccountingReportConfigLineRepository configLineRepo;\n+\n+  @Inject\n+  public ImportAccountingReportType(AccountingReportTypeRepository reportTypeRepo, AccountingReportConfigLineRepository configLineRepo) {\n+    this.reportTypeRepo = reportTypeRepo;\n+    this.configLineRepo = configLineRepo;\n+  }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public Object setRules(Object bean, Map<String, Object> values) throws AxelorException {\n+    assert bean instanceof AccountingReportType;\n+    AccountingReportType reportType = (AccountingReportType) bean;\n+\n+    String configLineValues = (String) values.get(\"rules\");\n+    if (configLineValues != null && !configLineValues.isEmpty()) {\n+      String[] rules = configLineValues.split(\"\\\\|\");\n+      List<AccountingReportConfigLine> configLines = new ArrayList<>();\n+      for (String rule : rules) {\n+        configLines.add(\n+            configLineRepo\n+                .all()\n                 .filter(\"self.importId = :importId\")\n                 .bind(\"importId\", rule)\n                 .fetchOne());\n-            }\n-            reportType.setAccountingReportConfigLineList(configLines);\n-        }\n+      }\n+      reportType.setAccountingReportConfigLineList(configLines);\n+    }\n \n-        reportTypeRepo.save(reportType);\n+    reportTypeRepo.save(reportType);\n \n-        return reportType;\n-    }\n+    return reportType;\n+  }\n }\n"}}, {"oid": "c89a8b713022ffa750756e5d91d1f01a78daad38", "url": "https://github.com/axelor/axelor-open-suite/commit/c89a8b713022ffa750756e5d91d1f01a78daad38", "message": "RM26851 : Add custom report types for accounting report", "committedDate": "2020-09-21T09:05:54Z", "type": "commit"}, {"oid": "c89a8b713022ffa750756e5d91d1f01a78daad38", "url": "https://github.com/axelor/axelor-open-suite/commit/c89a8b713022ffa750756e5d91d1f01a78daad38", "message": "RM26851 : Add custom report types for accounting report", "committedDate": "2020-09-21T09:05:54Z", "type": "forcePushed"}, {"oid": "109b226cabfb109a00164f52666d376aceafa296", "url": "https://github.com/axelor/axelor-open-suite/commit/109b226cabfb109a00164f52666d376aceafa296", "message": "Merge branch 'wip-6.1' into wip-6.1-26851", "committedDate": "2020-09-21T11:07:25Z", "type": "commit"}, {"oid": "9c3bce725a9c836953d19f3f68b2026f93e04190", "url": "https://github.com/axelor/axelor-open-suite/commit/9c3bce725a9c836953d19f3f68b2026f93e04190", "message": "RM26851 : Add missing translations", "committedDate": "2020-09-24T07:20:50Z", "type": "forcePushed"}, {"oid": "ef5f3d621da8fdea920b10363b622dc8adb4ac49", "url": "https://github.com/axelor/axelor-open-suite/commit/ef5f3d621da8fdea920b10363b622dc8adb4ac49", "message": "RM26851 : Add missing translations", "committedDate": "2020-09-25T09:47:20Z", "type": "commit"}, {"oid": "ef5f3d621da8fdea920b10363b622dc8adb4ac49", "url": "https://github.com/axelor/axelor-open-suite/commit/ef5f3d621da8fdea920b10363b622dc8adb4ac49", "message": "RM26851 : Add missing translations", "committedDate": "2020-09-25T09:47:20Z", "type": "forcePushed"}]}