{"pr_number": 4982, "pr_title": "RM22812 Invoicing graphics involving revenue based both sales and refunds.", "pr_createdAt": "2020-02-25T14:42:16Z", "pr_url": "https://github.com/axelor/axelor-open-suite/pull/4982", "timeline": [{"oid": "6a58e7eb6c673049aa049099e1d61113c5e702ea", "url": "https://github.com/axelor/axelor-open-suite/commit/6a58e7eb6c673049aa049099e1d61113c5e702ea", "message": "Adding customer assets in the turnover calculation", "committedDate": "2020-02-24T10:42:27Z", "type": "commit"}, {"oid": "78d16468643fd5252f437053ee206fc6972bb994", "url": "https://github.com/axelor/axelor-open-suite/commit/78d16468643fd5252f437053ee206fc6972bb994", "message": "Correction for customer assets on revenue graphs", "committedDate": "2020-02-25T14:35:10Z", "type": "commit"}, {"oid": "689a7a99f3221965f7bcf0a1a099a93db9c25cc0", "url": "https://github.com/axelor/axelor-open-suite/commit/689a7a99f3221965f7bcf0a1a099a93db9c25cc0", "message": "spotlessApply", "committedDate": "2020-02-25T14:36:56Z", "type": "commit"}, {"oid": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c", "url": "https://github.com/axelor/axelor-open-suite/commit/2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c", "message": "Merge branch '5.2-dev' into dev-22812", "committedDate": "2020-02-26T11:11:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5OTU1Ng==", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386399556", "bodyText": "Create a JPQL query using SUM instead of computing the sum in java", "author": "ale-axelor", "createdAt": "2020-03-02T13:44:15Z", "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(\n+      ActionRequest request, ActionResponse response) {\n+    List<Map<String, Object>> dataList = new ArrayList<>();\n+    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n+    BigDecimal salesThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal salesLastYear =\n+        repo.all()", "originalCommit": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3OTcwMw==", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386879703", "bodyText": "used SQL query instead for every charts", "author": "erg-axelor", "createdAt": "2020-03-03T09:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5OTU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "824dff2b76b7e9a7c9d947da6c4a40603912a86a", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java b/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\nindex 7e18f654a6..e648dc19ef 100644\n--- a/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\n+++ b/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\n\n@@ -68,259 +68,4 @@ public class AccountChartController {\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n-\n-  public void chartInvoicedTurnoverThisYearVsLastyear(\n-      ActionRequest request, ActionResponse response) {\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n-    BigDecimal salesThisYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add);\n-    BigDecimal salesLastYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add);\n-    BigDecimal totalThisYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add)\n-            .negate()\n-            .add(salesThisYear);\n-    BigDecimal totalLastYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add)\n-            .negate()\n-            .add(salesLastYear);\n-    if (!totalLastYear.equals(BigDecimal.ZERO)) {\n-      Map<String, Object> dataMap = new HashMap<>();\n-      dataMap.put(\"_year\", LocalDate.now().getYear() - 1);\n-      dataMap.put(\"_turn_over\", totalLastYear);\n-      dataList.add(dataMap);\n-    }\n-    if (!totalThisYear.equals(BigDecimal.ZERO)) {\n-      Map<String, Object> dataMap = new HashMap<>();\n-      dataMap.put(\"_year\", LocalDate.now().getYear());\n-      dataMap.put(\"_turn_over\", totalThisYear);\n-      dataList.add(dataMap);\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartInvoiceTurnoverCustHistory(ActionRequest request, ActionResponse response) {\n-    Context context = request.getContext();\n-    LocalDate fromDate, toDate;\n-    try {\n-      String[] fromDateTab = context.get(\"fromDate\").toString().split(\"-\");\n-      fromDate =\n-          LocalDate.of(\n-              Integer.parseInt(fromDateTab[0]),\n-              Integer.parseInt(fromDateTab[1]),\n-              Integer.parseInt(fromDateTab[2]));\n-      String monthSelect = context.get(\"monthSelect\").toString();\n-      if (monthSelect.equals(\"0\")) {\n-        toDate = LocalDate.now();\n-      } else {\n-        toDate = fromDate.plusMonths(Integer.parseInt(monthSelect));\n-      }\n-    } catch (Exception e) {\n-      fromDate = LocalDate.MIN;\n-      toDate = LocalDate.MAX;\n-    }\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-    List<String> productList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4 ) and (self.invoiceDate BETWEEN DATE(:fromDate) and DATE(:toDate))\")\n-            .bind(\"fromDate\", fromDate)\n-            .bind(\"toDate\", toDate)\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!productList.contains(invoiceLine.getProduct().getProductCategory().getName())) {\n-          productList.add(invoiceLine.getProduct().getProductCategory().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          LocalDate formatedDate =\n-              LocalDate.of(\n-                  invoiceLine.getInvoice().getInvoiceDate().getYear(),\n-                  invoiceLine.getInvoice().getInvoiceDate().getMonth(),\n-                  1);\n-          dataMap.put(\"_month_no\", formatedDate);\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_turn_over\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_turn_over\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\"product\", invoiceLine.getProduct().getProductCategory().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue((invoiceLine.getProduct().getProductCategory().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_turn_over\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_turn_over\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_turn_over\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_turn_over\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartInvoiceTotalRevenueByProduct(ActionRequest request, ActionResponse response) {\n-    Context context = request.getContext();\n-    LocalDate fromDate, toDate;\n-    try {\n-      String[] fromDateTab = context.get(\"fromDate\").toString().split(\"-\");\n-      fromDate =\n-          LocalDate.of(\n-              Integer.parseInt(fromDateTab[0]),\n-              Integer.parseInt(fromDateTab[1]),\n-              Integer.parseInt(fromDateTab[2]));\n-      String[] toDateTab = context.get(\"toDate\").toString().split(\"-\");\n-      toDate =\n-          LocalDate.of(\n-              Integer.parseInt(toDateTab[0]),\n-              Integer.parseInt(toDateTab[1]),\n-              Integer.parseInt(toDateTab[2]));\n-      ;\n-    } catch (Exception e) {\n-      fromDate = LocalDate.MIN;\n-      toDate = LocalDate.MAX;\n-    }\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-\n-    List<String> productList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4) and (self.invoiceDate BETWEEN DATE(:fromDate) and DATE(:toDate))\")\n-            .bind(\"fromDate\", fromDate)\n-            .bind(\"toDate\", toDate)\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!productList.contains(invoiceLine.getProduct().getProductCategory().getName())) {\n-          productList.add(invoiceLine.getProduct().getProductCategory().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\"_product_category\", invoiceLine.getProduct().getProductCategory().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue((invoiceLine.getProduct().getProductCategory().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartTotalRevenueByGeoRegion(ActionRequest request, ActionResponse response) {\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-\n-    List<String> countryList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4)\")\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!countryList.contains(\n-            invoiceLine.getInvoice().getAddress().getAddressL7Country().getName())) {\n-          countryList.add(invoiceLine.getInvoice().getAddress().getAddressL7Country().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\n-              \"_geo_region\", invoiceLine.getInvoice().getAddress().getAddressL7Country().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue(\n-                (invoiceLine.getInvoice().getAddress().getAddressL7Country().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDIwNg==", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386400206", "bodyText": "Please refactor this controller to use a service", "author": "ale-axelor", "createdAt": "2020-03-02T13:45:36Z", "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(", "originalCommit": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "824dff2b76b7e9a7c9d947da6c4a40603912a86a", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java b/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\nindex 7e18f654a6..e648dc19ef 100644\n--- a/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\n+++ b/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\n\n@@ -68,259 +68,4 @@ public class AccountChartController {\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n-\n-  public void chartInvoicedTurnoverThisYearVsLastyear(\n-      ActionRequest request, ActionResponse response) {\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n-    BigDecimal salesThisYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add);\n-    BigDecimal salesLastYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add);\n-    BigDecimal totalThisYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add)\n-            .negate()\n-            .add(salesThisYear);\n-    BigDecimal totalLastYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add)\n-            .negate()\n-            .add(salesLastYear);\n-    if (!totalLastYear.equals(BigDecimal.ZERO)) {\n-      Map<String, Object> dataMap = new HashMap<>();\n-      dataMap.put(\"_year\", LocalDate.now().getYear() - 1);\n-      dataMap.put(\"_turn_over\", totalLastYear);\n-      dataList.add(dataMap);\n-    }\n-    if (!totalThisYear.equals(BigDecimal.ZERO)) {\n-      Map<String, Object> dataMap = new HashMap<>();\n-      dataMap.put(\"_year\", LocalDate.now().getYear());\n-      dataMap.put(\"_turn_over\", totalThisYear);\n-      dataList.add(dataMap);\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartInvoiceTurnoverCustHistory(ActionRequest request, ActionResponse response) {\n-    Context context = request.getContext();\n-    LocalDate fromDate, toDate;\n-    try {\n-      String[] fromDateTab = context.get(\"fromDate\").toString().split(\"-\");\n-      fromDate =\n-          LocalDate.of(\n-              Integer.parseInt(fromDateTab[0]),\n-              Integer.parseInt(fromDateTab[1]),\n-              Integer.parseInt(fromDateTab[2]));\n-      String monthSelect = context.get(\"monthSelect\").toString();\n-      if (monthSelect.equals(\"0\")) {\n-        toDate = LocalDate.now();\n-      } else {\n-        toDate = fromDate.plusMonths(Integer.parseInt(monthSelect));\n-      }\n-    } catch (Exception e) {\n-      fromDate = LocalDate.MIN;\n-      toDate = LocalDate.MAX;\n-    }\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-    List<String> productList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4 ) and (self.invoiceDate BETWEEN DATE(:fromDate) and DATE(:toDate))\")\n-            .bind(\"fromDate\", fromDate)\n-            .bind(\"toDate\", toDate)\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!productList.contains(invoiceLine.getProduct().getProductCategory().getName())) {\n-          productList.add(invoiceLine.getProduct().getProductCategory().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          LocalDate formatedDate =\n-              LocalDate.of(\n-                  invoiceLine.getInvoice().getInvoiceDate().getYear(),\n-                  invoiceLine.getInvoice().getInvoiceDate().getMonth(),\n-                  1);\n-          dataMap.put(\"_month_no\", formatedDate);\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_turn_over\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_turn_over\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\"product\", invoiceLine.getProduct().getProductCategory().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue((invoiceLine.getProduct().getProductCategory().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_turn_over\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_turn_over\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_turn_over\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_turn_over\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartInvoiceTotalRevenueByProduct(ActionRequest request, ActionResponse response) {\n-    Context context = request.getContext();\n-    LocalDate fromDate, toDate;\n-    try {\n-      String[] fromDateTab = context.get(\"fromDate\").toString().split(\"-\");\n-      fromDate =\n-          LocalDate.of(\n-              Integer.parseInt(fromDateTab[0]),\n-              Integer.parseInt(fromDateTab[1]),\n-              Integer.parseInt(fromDateTab[2]));\n-      String[] toDateTab = context.get(\"toDate\").toString().split(\"-\");\n-      toDate =\n-          LocalDate.of(\n-              Integer.parseInt(toDateTab[0]),\n-              Integer.parseInt(toDateTab[1]),\n-              Integer.parseInt(toDateTab[2]));\n-      ;\n-    } catch (Exception e) {\n-      fromDate = LocalDate.MIN;\n-      toDate = LocalDate.MAX;\n-    }\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-\n-    List<String> productList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4) and (self.invoiceDate BETWEEN DATE(:fromDate) and DATE(:toDate))\")\n-            .bind(\"fromDate\", fromDate)\n-            .bind(\"toDate\", toDate)\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!productList.contains(invoiceLine.getProduct().getProductCategory().getName())) {\n-          productList.add(invoiceLine.getProduct().getProductCategory().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\"_product_category\", invoiceLine.getProduct().getProductCategory().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue((invoiceLine.getProduct().getProductCategory().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartTotalRevenueByGeoRegion(ActionRequest request, ActionResponse response) {\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-\n-    List<String> countryList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4)\")\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!countryList.contains(\n-            invoiceLine.getInvoice().getAddress().getAddressL7Country().getName())) {\n-          countryList.add(invoiceLine.getInvoice().getAddress().getAddressL7Country().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\n-              \"_geo_region\", invoiceLine.getInvoice().getAddress().getAddressL7Country().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue(\n-                (invoiceLine.getInvoice().getAddress().getAddressL7Country().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDM5OQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386400399", "bodyText": "use signum() to check if a big decimal is equal to 0", "author": "ale-axelor", "createdAt": "2020-03-02T13:45:58Z", "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(\n+      ActionRequest request, ActionResponse response) {\n+    List<Map<String, Object>> dataList = new ArrayList<>();\n+    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n+    BigDecimal salesThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal salesLastYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal totalThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add)\n+            .negate()\n+            .add(salesThisYear);\n+    BigDecimal totalLastYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add)\n+            .negate()\n+            .add(salesLastYear);\n+    if (!totalLastYear.equals(BigDecimal.ZERO)) {", "originalCommit": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "824dff2b76b7e9a7c9d947da6c4a40603912a86a", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java b/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\nindex 7e18f654a6..e648dc19ef 100644\n--- a/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\n+++ b/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\n\n@@ -68,259 +68,4 @@ public class AccountChartController {\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n-\n-  public void chartInvoicedTurnoverThisYearVsLastyear(\n-      ActionRequest request, ActionResponse response) {\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n-    BigDecimal salesThisYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add);\n-    BigDecimal salesLastYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add);\n-    BigDecimal totalThisYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add)\n-            .negate()\n-            .add(salesThisYear);\n-    BigDecimal totalLastYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add)\n-            .negate()\n-            .add(salesLastYear);\n-    if (!totalLastYear.equals(BigDecimal.ZERO)) {\n-      Map<String, Object> dataMap = new HashMap<>();\n-      dataMap.put(\"_year\", LocalDate.now().getYear() - 1);\n-      dataMap.put(\"_turn_over\", totalLastYear);\n-      dataList.add(dataMap);\n-    }\n-    if (!totalThisYear.equals(BigDecimal.ZERO)) {\n-      Map<String, Object> dataMap = new HashMap<>();\n-      dataMap.put(\"_year\", LocalDate.now().getYear());\n-      dataMap.put(\"_turn_over\", totalThisYear);\n-      dataList.add(dataMap);\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartInvoiceTurnoverCustHistory(ActionRequest request, ActionResponse response) {\n-    Context context = request.getContext();\n-    LocalDate fromDate, toDate;\n-    try {\n-      String[] fromDateTab = context.get(\"fromDate\").toString().split(\"-\");\n-      fromDate =\n-          LocalDate.of(\n-              Integer.parseInt(fromDateTab[0]),\n-              Integer.parseInt(fromDateTab[1]),\n-              Integer.parseInt(fromDateTab[2]));\n-      String monthSelect = context.get(\"monthSelect\").toString();\n-      if (monthSelect.equals(\"0\")) {\n-        toDate = LocalDate.now();\n-      } else {\n-        toDate = fromDate.plusMonths(Integer.parseInt(monthSelect));\n-      }\n-    } catch (Exception e) {\n-      fromDate = LocalDate.MIN;\n-      toDate = LocalDate.MAX;\n-    }\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-    List<String> productList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4 ) and (self.invoiceDate BETWEEN DATE(:fromDate) and DATE(:toDate))\")\n-            .bind(\"fromDate\", fromDate)\n-            .bind(\"toDate\", toDate)\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!productList.contains(invoiceLine.getProduct().getProductCategory().getName())) {\n-          productList.add(invoiceLine.getProduct().getProductCategory().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          LocalDate formatedDate =\n-              LocalDate.of(\n-                  invoiceLine.getInvoice().getInvoiceDate().getYear(),\n-                  invoiceLine.getInvoice().getInvoiceDate().getMonth(),\n-                  1);\n-          dataMap.put(\"_month_no\", formatedDate);\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_turn_over\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_turn_over\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\"product\", invoiceLine.getProduct().getProductCategory().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue((invoiceLine.getProduct().getProductCategory().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_turn_over\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_turn_over\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_turn_over\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_turn_over\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartInvoiceTotalRevenueByProduct(ActionRequest request, ActionResponse response) {\n-    Context context = request.getContext();\n-    LocalDate fromDate, toDate;\n-    try {\n-      String[] fromDateTab = context.get(\"fromDate\").toString().split(\"-\");\n-      fromDate =\n-          LocalDate.of(\n-              Integer.parseInt(fromDateTab[0]),\n-              Integer.parseInt(fromDateTab[1]),\n-              Integer.parseInt(fromDateTab[2]));\n-      String[] toDateTab = context.get(\"toDate\").toString().split(\"-\");\n-      toDate =\n-          LocalDate.of(\n-              Integer.parseInt(toDateTab[0]),\n-              Integer.parseInt(toDateTab[1]),\n-              Integer.parseInt(toDateTab[2]));\n-      ;\n-    } catch (Exception e) {\n-      fromDate = LocalDate.MIN;\n-      toDate = LocalDate.MAX;\n-    }\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-\n-    List<String> productList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4) and (self.invoiceDate BETWEEN DATE(:fromDate) and DATE(:toDate))\")\n-            .bind(\"fromDate\", fromDate)\n-            .bind(\"toDate\", toDate)\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!productList.contains(invoiceLine.getProduct().getProductCategory().getName())) {\n-          productList.add(invoiceLine.getProduct().getProductCategory().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\"_product_category\", invoiceLine.getProduct().getProductCategory().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue((invoiceLine.getProduct().getProductCategory().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartTotalRevenueByGeoRegion(ActionRequest request, ActionResponse response) {\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-\n-    List<String> countryList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4)\")\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!countryList.contains(\n-            invoiceLine.getInvoice().getAddress().getAddressL7Country().getName())) {\n-          countryList.add(invoiceLine.getInvoice().getAddress().getAddressL7Country().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\n-              \"_geo_region\", invoiceLine.getInvoice().getAddress().getAddressL7Country().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue(\n-                (invoiceLine.getInvoice().getAddress().getAddressL7Country().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMTM0MA==", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386401340", "bodyText": "please replace LocalDate.now() by appBaseService.getTodayDate()", "author": "ale-axelor", "createdAt": "2020-03-02T13:47:54Z", "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(\n+      ActionRequest request, ActionResponse response) {\n+    List<Map<String, Object>> dataList = new ArrayList<>();\n+    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n+    BigDecimal salesThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal salesLastYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal totalThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add)\n+            .negate()\n+            .add(salesThisYear);\n+    BigDecimal totalLastYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add)\n+            .negate()\n+            .add(salesLastYear);\n+    if (!totalLastYear.equals(BigDecimal.ZERO)) {\n+      Map<String, Object> dataMap = new HashMap<>();\n+      dataMap.put(\"_year\", LocalDate.now().getYear() - 1);", "originalCommit": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "824dff2b76b7e9a7c9d947da6c4a40603912a86a", "chunk": "diff --git a/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java b/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\nindex 7e18f654a6..e648dc19ef 100644\n--- a/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\n+++ b/axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java\n\n@@ -68,259 +68,4 @@ public class AccountChartController {\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n-\n-  public void chartInvoicedTurnoverThisYearVsLastyear(\n-      ActionRequest request, ActionResponse response) {\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n-    BigDecimal salesThisYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add);\n-    BigDecimal salesLastYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add);\n-    BigDecimal totalThisYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add)\n-            .negate()\n-            .add(salesThisYear);\n-    BigDecimal totalLastYear =\n-        repo.all()\n-            .filter(\n-                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n-            .fetchStream()\n-            .map(i -> i.getExTaxTotal())\n-            .reduce(BigDecimal.ZERO, BigDecimal::add)\n-            .negate()\n-            .add(salesLastYear);\n-    if (!totalLastYear.equals(BigDecimal.ZERO)) {\n-      Map<String, Object> dataMap = new HashMap<>();\n-      dataMap.put(\"_year\", LocalDate.now().getYear() - 1);\n-      dataMap.put(\"_turn_over\", totalLastYear);\n-      dataList.add(dataMap);\n-    }\n-    if (!totalThisYear.equals(BigDecimal.ZERO)) {\n-      Map<String, Object> dataMap = new HashMap<>();\n-      dataMap.put(\"_year\", LocalDate.now().getYear());\n-      dataMap.put(\"_turn_over\", totalThisYear);\n-      dataList.add(dataMap);\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartInvoiceTurnoverCustHistory(ActionRequest request, ActionResponse response) {\n-    Context context = request.getContext();\n-    LocalDate fromDate, toDate;\n-    try {\n-      String[] fromDateTab = context.get(\"fromDate\").toString().split(\"-\");\n-      fromDate =\n-          LocalDate.of(\n-              Integer.parseInt(fromDateTab[0]),\n-              Integer.parseInt(fromDateTab[1]),\n-              Integer.parseInt(fromDateTab[2]));\n-      String monthSelect = context.get(\"monthSelect\").toString();\n-      if (monthSelect.equals(\"0\")) {\n-        toDate = LocalDate.now();\n-      } else {\n-        toDate = fromDate.plusMonths(Integer.parseInt(monthSelect));\n-      }\n-    } catch (Exception e) {\n-      fromDate = LocalDate.MIN;\n-      toDate = LocalDate.MAX;\n-    }\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-    List<String> productList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4 ) and (self.invoiceDate BETWEEN DATE(:fromDate) and DATE(:toDate))\")\n-            .bind(\"fromDate\", fromDate)\n-            .bind(\"toDate\", toDate)\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!productList.contains(invoiceLine.getProduct().getProductCategory().getName())) {\n-          productList.add(invoiceLine.getProduct().getProductCategory().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          LocalDate formatedDate =\n-              LocalDate.of(\n-                  invoiceLine.getInvoice().getInvoiceDate().getYear(),\n-                  invoiceLine.getInvoice().getInvoiceDate().getMonth(),\n-                  1);\n-          dataMap.put(\"_month_no\", formatedDate);\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_turn_over\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_turn_over\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\"product\", invoiceLine.getProduct().getProductCategory().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue((invoiceLine.getProduct().getProductCategory().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_turn_over\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_turn_over\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_turn_over\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_turn_over\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartInvoiceTotalRevenueByProduct(ActionRequest request, ActionResponse response) {\n-    Context context = request.getContext();\n-    LocalDate fromDate, toDate;\n-    try {\n-      String[] fromDateTab = context.get(\"fromDate\").toString().split(\"-\");\n-      fromDate =\n-          LocalDate.of(\n-              Integer.parseInt(fromDateTab[0]),\n-              Integer.parseInt(fromDateTab[1]),\n-              Integer.parseInt(fromDateTab[2]));\n-      String[] toDateTab = context.get(\"toDate\").toString().split(\"-\");\n-      toDate =\n-          LocalDate.of(\n-              Integer.parseInt(toDateTab[0]),\n-              Integer.parseInt(toDateTab[1]),\n-              Integer.parseInt(toDateTab[2]));\n-      ;\n-    } catch (Exception e) {\n-      fromDate = LocalDate.MIN;\n-      toDate = LocalDate.MAX;\n-    }\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-\n-    List<String> productList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4) and (self.invoiceDate BETWEEN DATE(:fromDate) and DATE(:toDate))\")\n-            .bind(\"fromDate\", fromDate)\n-            .bind(\"toDate\", toDate)\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!productList.contains(invoiceLine.getProduct().getProductCategory().getName())) {\n-          productList.add(invoiceLine.getProduct().getProductCategory().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\"_product_category\", invoiceLine.getProduct().getProductCategory().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue((invoiceLine.getProduct().getProductCategory().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n-\n-  public void chartTotalRevenueByGeoRegion(ActionRequest request, ActionResponse response) {\n-    List<Map<String, Object>> dataList = new ArrayList<>();\n-\n-    List<String> countryList = new ArrayList<String>();\n-    InvoiceRepository invoiceRepo = Beans.get(InvoiceRepository.class);\n-    List<Invoice> invoiceList =\n-        invoiceRepo\n-            .all()\n-            .filter(\n-                \"self.statusSelect != 1 and (self.operationTypeSelect = 3 OR self.operationTypeSelect = 4)\")\n-            .fetch();\n-    for (Invoice invoice : invoiceList) {\n-      invoice = invoiceRepo.find(invoice.getId());\n-      for (InvoiceLine invoiceLine : invoice.getInvoiceLineList()) {\n-        if (!countryList.contains(\n-            invoiceLine.getInvoice().getAddress().getAddressL7Country().getName())) {\n-          countryList.add(invoiceLine.getInvoice().getAddress().getAddressL7Country().getName());\n-          Map<String, Object> dataMap = new HashMap<>();\n-          if (invoiceLine.getInvoice().getOperationTypeSelect()\n-              == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal());\n-          } else {\n-            dataMap.put(\"_revenue\", invoiceLine.getExTaxTotal().negate());\n-          }\n-          dataMap.put(\n-              \"_geo_region\", invoiceLine.getInvoice().getAddress().getAddressL7Country().getName());\n-          dataList.add(dataMap);\n-        } else {\n-          for (Map<String, Object> dataTemp : dataList) {\n-            if (dataTemp.containsValue(\n-                (invoiceLine.getInvoice().getAddress().getAddressL7Country().getName()))) {\n-              if (invoiceLine.getInvoice().getOperationTypeSelect()\n-                  == InvoiceRepository.OPERATION_TYPE_CLIENT_SALE) {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine.getExTaxTotal().add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              } else {\n-                dataTemp.put(\n-                    \"_revenue\",\n-                    invoiceLine\n-                        .getExTaxTotal()\n-                        .negate()\n-                        .add((BigDecimal) dataTemp.remove(\"_revenue\")));\n-              }\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      JPA.clear();\n-    }\n-    response.setData(dataList);\n-  }\n }\n"}}, {"oid": "824dff2b76b7e9a7c9d947da6c4a40603912a86a", "url": "https://github.com/axelor/axelor-open-suite/commit/824dff2b76b7e9a7c9d947da6c4a40603912a86a", "message": "Getting chart back from rpc dataset to sql", "committedDate": "2020-03-03T08:59:53Z", "type": "commit"}, {"oid": "70acfbfe444184f642b861434123243019d22271", "url": "https://github.com/axelor/axelor-open-suite/commit/70acfbfe444184f642b861434123243019d22271", "message": "Merge branch 'dev-22812' of github.com:erg-axelor/axelor-open-suite into dev-22812", "committedDate": "2020-03-03T09:00:17Z", "type": "commit"}, {"oid": "77b34725583347327465e7c543769b9e997d3ac9", "url": "https://github.com/axelor/axelor-open-suite/commit/77b34725583347327465e7c543769b9e997d3ac9", "message": "spotlessApply", "committedDate": "2020-03-03T09:02:54Z", "type": "commit"}, {"oid": "10629d9f6c009cb15180c7eec0c0c2f87f4d5d9d", "url": "https://github.com/axelor/axelor-open-suite/commit/10629d9f6c009cb15180c7eec0c0c2f87f4d5d9d", "message": "Merge branch '5.2-dev' into dev-22812", "committedDate": "2020-03-03T09:05:29Z", "type": "commit"}, {"oid": "158ec874292ca3a00cdfaec0b6c5d5a27cff1d99", "url": "https://github.com/axelor/axelor-open-suite/commit/158ec874292ca3a00cdfaec0b6c5d5a27cff1d99", "message": "Merge branch '5.2-dev' into dev-22812", "committedDate": "2020-03-03T15:11:38Z", "type": "commit"}]}