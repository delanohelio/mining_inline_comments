{"pr_number": 4995, "pr_title": "Decouple server instance id with hostname/port config.", "pr_createdAt": "2020-01-17T21:44:57Z", "pr_url": "https://github.com/apache/pinot/pull/4995", "timeline": [{"oid": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e", "url": "https://github.com/apache/pinot/commit/9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e", "message": "Decouple server instance id and hostname/port config.", "committedDate": "2020-01-17T21:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDIxMg==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368160212", "bodyText": "Following code looks like its repeated in every test. Consider refactoring ?", "author": "icefury71", "createdAt": "2020-01-17T22:20:50Z", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.ZkStarter;\n+import org.apache.pinot.controller.helix.ControllerTest;\n+import org.apache.pinot.server.starter.helix.HelixServerStarter;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT;\n+import static org.apache.pinot.common.utils.CommonConstants.Server.CONFIG_OF_INSTANCE_ID;\n+import static org.apache.pinot.common.utils.CommonConstants.Server.CONFIG_OF_USE_LOGICAL_INSTANCE_ID;\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ServerStarterIntegrationTest extends ControllerTest {\n+  public static final String DEFAULT_SERVER_ID = \"Server_127.0.0.1_8098\";\n+  public static final String SERVER1 = \"Server1\";\n+  @BeforeClass\n+  public void setUp()\n+      throws Exception {\n+    startZk();\n+    startController();\n+  }\n+\n+  @AfterClass\n+  public void tearDown()\n+      throws Exception {\n+    stopController();\n+    stopZk();\n+  }\n+\n+  @Test\n+  public void testWithNoInstanceIdNoHostnamePort()\n+      throws Exception {\n+    // Test the behavior when no instance id nor hostname/port is specified in server conf.\n+    Configuration serverConf = new PropertiesConfiguration();\n+    // Start the server\n+    HelixServerStarter helixServerStarter =\n+        new HelixServerStarter(getHelixClusterName(), ZkStarter.DEFAULT_ZK_STR, serverConf);\n+\n+    // Verify the serverId, host and port are set correctly in Zk.\n+    HelixManager helixManager = helixServerStarter.getHelixManager();\n+    PropertyKey.Builder keyBuilder = helixManager.getHelixDataAccessor().keyBuilder();\n+    InstanceConfig config =  helixManager.getHelixDataAccessor().getProperty(keyBuilder.instanceConfig(DEFAULT_SERVER_ID));\n+    helixServerStarter.stop();\n+\n+    assertEquals(config.getInstanceName(), DEFAULT_SERVER_ID);\n+    // By default (auto joined instances), server instance name is of format: {@code Server_<hostname>_<port>}, e.g.\n+    // {@code Server_localhost_12345}, hostname is of format: {@code Server_<hostname>}, e.g. {@code Server_localhost}.\n+    // More details refer to the class ServerInstance.\n+    assertEquals(config.getHostName(), \"Server_127.0.0.1\");\n+    assertEquals(config.getPort(), \"8098\");\n+  }\n+\n+  @Test\n+  public void testWithNoInstanceIdButWithHostnamePort()\n+      throws Exception {\n+    // Test the behavior when no instance id specified but hostname/port is specified in server conf.\n+    Configuration serverConf = new PropertiesConfiguration();\n+    serverConf.setProperty(KEY_OF_SERVER_NETTY_HOST, \"host1\");\n+    serverConf.setProperty(KEY_OF_SERVER_NETTY_PORT, 10001);\n+    // Start the server\n+    HelixServerStarter helixServerStarter =", "originalCommit": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3MDQxMg==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368170412", "bodyText": "Code refactored to remove duplicate codes.", "author": "chenboat", "createdAt": "2020-01-17T22:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "481f5e1a7e493d4312698bcfb856da72bcee6787", "chunk": "diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java\nindex 61950e867c..d0cc37d177 100644\n--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java\n+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java\n\n@@ -18,7 +18,6 @@\n  */\n package org.apache.pinot.integration.tests;\n \n-\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.helix.HelixManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDUzMQ==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368160531", "bodyText": "Why do we need this ? I think we will always use the Zk info to look up host and port (whether logical id is enabled or not).", "author": "icefury71", "createdAt": "2020-01-17T22:21:57Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -192,6 +192,9 @@ public ServerType getServerType() {\n     public static final String CONFIG_OF_REQUEST_HANDLER_FACTORY_CLASS = \"pinot.server.requestHandlerFactory.class\";\n     public static final String CONFIG_OF_NETTY_PORT = \"pinot.server.netty.port\";\n     public static final String CONFIG_OF_ADMIN_API_PORT = \"pinot.server.adminapi.port\";\n+    // A logical instance id is one which does not contain server host name and/or port info. E.g., server1.\n+    // It is by default disabled.\n+    public static final String CONFIG_OF_USE_LOGICAL_INSTANCE_ID = \"pinot.server.logical.instance.id.enabled\";", "originalCommit": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3MjQxOA==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368172418", "bodyText": "This config flag is used only for server start and  mainly used for backward compatibility. It controls if we want to overwrite the host/port info in zk using those found server config. The current behavior is to extract hostname from instance id if instance id is found in server config. We do not want to break these use cases for now.", "author": "chenboat", "createdAt": "2020-01-17T23:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f87cd46ef0aced62d5e5741439a55452c1e91fc7", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\nindex 284e0e8efd..ee4d8566e5 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\n\n@@ -192,9 +192,6 @@ public class CommonConstants {\n     public static final String CONFIG_OF_REQUEST_HANDLER_FACTORY_CLASS = \"pinot.server.requestHandlerFactory.class\";\n     public static final String CONFIG_OF_NETTY_PORT = \"pinot.server.netty.port\";\n     public static final String CONFIG_OF_ADMIN_API_PORT = \"pinot.server.adminapi.port\";\n-    // A logical instance id is one which does not contain server host name and/or port info. E.g., server1.\n-    // It is by default disabled.\n-    public static final String CONFIG_OF_USE_LOGICAL_INSTANCE_ID = \"pinot.server.logical.instance.id.enabled\";\n \n     public static final String CONFIG_OF_SEGMENT_FORMAT_VERSION = \"pinot.server.instance.segment.format.version\";\n     public static final String CONFIG_OF_ENABLE_SPLIT_COMMIT = \"pinot.server.instance.enable.split.commit\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDc5Mw==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368160793", "bodyText": "You could also simply look up if the server config has instance id set ?", "author": "icefury71", "createdAt": "2020-01-17T22:22:41Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -145,6 +146,11 @@ public HelixServerStarter(String helixClusterName, String zkServer, Configuratio\n \n     LOGGER.info(\"Connecting Helix manager\");\n     _helixManager.connect();\n+    // Overwrite the server netty host and port.\n+    if (_serverConf.getBoolean(CONFIG_OF_USE_LOGICAL_INSTANCE_ID, false)) {", "originalCommit": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3MjYyMw==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368172623", "bodyText": "Similar consideration as above.", "author": "chenboat", "createdAt": "2020-01-17T23:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f87cd46ef0aced62d5e5741439a55452c1e91fc7", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\nindex a0b932ca91..1b7a5f539f 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n\n@@ -146,8 +146,10 @@ public class HelixServerStarter {\n \n     LOGGER.info(\"Connecting Helix manager\");\n     _helixManager.connect();\n-    // Overwrite the server netty host and port.\n-    if (_serverConf.getBoolean(CONFIG_OF_USE_LOGICAL_INSTANCE_ID, false)) {\n+    // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n+    // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n+    // Use serverConf instead of _serverConf as the latter has been modified.\n+    if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n       overwriteServerHostInfo();\n     }\n \n"}}, {"oid": "481f5e1a7e493d4312698bcfb856da72bcee6787", "url": "https://github.com/apache/pinot/commit/481f5e1a7e493d4312698bcfb856da72bcee6787", "message": "Fix a test failure due to using local ip address. Refactor tests.", "committedDate": "2020-01-17T22:56:49Z", "type": "commit"}, {"oid": "22e740466d494129d2d7e4628313bbb6b857744e", "url": "https://github.com/apache/pinot/commit/22e740466d494129d2d7e4628313bbb6b857744e", "message": "Fix a test failure due to using local ip address.", "committedDate": "2020-01-17T23:25:57Z", "type": "commit"}, {"oid": "8fec862ee108a5948e8d0aefc7df37c94dd2eff9", "url": "https://github.com/apache/pinot/commit/8fec862ee108a5948e8d0aefc7df37c94dd2eff9", "message": "Fix test failure due to hostname.", "committedDate": "2020-01-19T05:52:41Z", "type": "commit"}, {"oid": "f87cd46ef0aced62d5e5741439a55452c1e91fc7", "url": "https://github.com/apache/pinot/commit/f87cd46ef0aced62d5e5741439a55452c1e91fc7", "message": "Remove config flags about instance id overwrite.", "committedDate": "2020-01-21T23:06:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1NTU1OA==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r371455558", "bodyText": "Can you combine this with addInstanceTagIfNeeded() as both of them need to access the InstanceConfig to reduce the overhead?", "author": "Jackie-Jiang", "createdAt": "2020-01-27T20:06:25Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -186,6 +194,16 @@ public HelixServerStarter(String helixClusterName, String zkServer, Configuratio\n     serverMetrics.addCallbackGauge(\"memory.allocationFailureCount\", PinotDataBuffer::getAllocationFailureCount);\n   }\n \n+  private void overwriteServerHostInfo() {", "originalCommit": "f87cd46ef0aced62d5e5741439a55452c1e91fc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72e620b97f2c64dbe28691e5de63ad5c35f2ab62", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\nindex 1b7a5f539f..5ddc517cf3 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n\n@@ -194,16 +186,6 @@ public class HelixServerStarter {\n     serverMetrics.addCallbackGauge(\"memory.allocationFailureCount\", PinotDataBuffer::getAllocationFailureCount);\n   }\n \n-  private void overwriteServerHostInfo() {\n-    // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n-    // field in zk.\n-    PropertyKey.Builder keyBuilder = _helixManager.getHelixDataAccessor().keyBuilder();\n-    InstanceConfig config = _helixManager.getHelixDataAccessor().getProperty(keyBuilder.instanceConfig(_instanceId));\n-    config.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n-    config.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n-    _helixManager.getHelixDataAccessor().setProperty(keyBuilder.instanceConfig(_instanceId), config);\n-  }\n-\n   /**\n    * Fetches the resources to monitor and registers the {@link org.apache.pinot.common.utils.ServiceStatus.ServiceStatusCallback}s\n    */\n"}}, {"oid": "72e620b97f2c64dbe28691e5de63ad5c35f2ab62", "url": "https://github.com/apache/pinot/commit/72e620b97f2c64dbe28691e5de63ad5c35f2ab62", "message": "Revise based on comments.", "committedDate": "2020-01-28T00:56:34Z", "type": "commit"}, {"oid": "326560301f2cefeeb94e7b68971e036b63f19576", "url": "https://github.com/apache/pinot/commit/326560301f2cefeeb94e7b68971e036b63f19576", "message": "Add more log for server config udpates.", "committedDate": "2020-01-28T01:00:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzE5OQ==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r371587199", "bodyText": "_helixAdmin.addInstanceTag() can be simplified to instanceTags.add()", "author": "Jackie-Jiang", "createdAt": "2020-01-28T02:44:52Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,7 +266,7 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n     if (instanceTags == null || instanceTags.size() == 0) {", "originalCommit": "326560301f2cefeeb94e7b68971e036b63f19576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwNTUwOA==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372005508", "bodyText": "_helixAdmin.addInstanceTag() writes to zk. InstanceTag.add() does not do that -- instanceTag is merely a reference. I do not think the former can be simplified to latter. Did I miss anything here?", "author": "chenboat", "createdAt": "2020-01-28T19:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMDA5NA==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372120094", "bodyText": "That is why I suggested adding a flag to track whether we need to update and write the instance config back to ZK. Each _helixAdmin.addInstanceTag() reads the instance config and writes it back, which can be saved with the flag. Overall we should only read the instance config once, and write it back once if it needs to be updated.", "author": "Jackie-Jiang", "createdAt": "2020-01-28T23:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0OTk1Ng==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372149956", "bodyText": "Got it. Revised.", "author": "chenboat", "createdAt": "2020-01-29T01:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a0ef497364c7593120b2173d59e8990f0be8c9e7", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\nindex 40a9838a2f..55edc2a1ae 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n\n@@ -269,33 +270,39 @@ public class HelixServerStarter {\n   private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n+    boolean toUpdateHelixRecord = false;\n     if (instanceTags == null || instanceTags.size() == 0) {\n       if (ZKMetadataProvider.getClusterTenantIsolationEnabled(_helixManager.getHelixPropertyStore())) {\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, TagNameUtils.getOfflineTagForTenant(null));\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, TagNameUtils.getRealtimeTagForTenant(null));\n+        instanceConfig.addTag(TagNameUtils.getOfflineTagForTenant(null));\n+        instanceConfig.addTag(TagNameUtils.getRealtimeTagForTenant(null));\n       } else {\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, UNTAGGED_SERVER_INSTANCE);\n+        instanceConfig.addTag(UNTAGGED_SERVER_INSTANCE);\n       }\n+      toUpdateHelixRecord = true;\n     }\n \n     // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n     // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n     // Use serverConf instead of _serverConf as the latter has been modified.\n     if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n+      toUpdateHelixRecord = true;\n       // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n       // field in zk.\n       instanceConfig.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n       instanceConfig.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n-      // Use setProperty instead of _helixAdmin.setInstanceConfig because the latter explicitly forbids instance host\n-      // port modification.\n-      if(_helixManager.getHelixDataAccessor().setProperty(\n-          _helixManager.getHelixDataAccessor().keyBuilder().instanceConfig(instanceName), instanceConfig)) {\n-        LOGGER.info(\"Updated server hostname/port successfully for server id {} to {}:\", instanceName, instanceConfig);\n-      } else {\n-        LOGGER.error(\"Failed to update hostname/port for instance: {}\", instanceName);\n-        // Treat this is as a fatal error.\n-        System.exit(1);\n-      }\n+    }\n+    if (!toUpdateHelixRecord) {\n+      return;\n+    }\n+    // Use setProperty instead of _helixAdmin.setInstanceConfig because the latter explicitly forbids instance host\n+    // port modification.\n+    if(_helixManager.getHelixDataAccessor().setProperty(\n+        _helixManager.getHelixDataAccessor().keyBuilder().instanceConfig(instanceName), instanceConfig)) {\n+      LOGGER.info(\"Updated server hostname/port successfully for server id {} to {}:\", instanceName, instanceConfig);\n+    } else {\n+      LOGGER.error(\"Failed to update hostname/port for instance: {}\", instanceName);\n+      // Treat this is as a fatal error.\n+      throw new HelixException(\"Failed to update hostname/port for instance \" + instanceName);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzM3NA==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r371587374", "bodyText": "Add a boolean flag to track whether the instance config needs to be updated", "author": "Jackie-Jiang", "createdAt": "2020-01-28T02:45:48Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,7 +266,7 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);", "originalCommit": "326560301f2cefeeb94e7b68971e036b63f19576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwODMzMw==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372008333", "bodyText": "What is the use of a boolean flag here? We have to read from the zk anyway because to update tags needs to the current number of tags. As for writing to zk, the current boolean conditions already check for cases we do not need to write to zk.\nThere could be an optimization to combine two zk writes into one -- but there seems to be many logics specific to instance tag update already. I wonder if it is worthwhile to do this optimization. Instance updates to zk are start only events and the performance impact here should be fine, right?", "author": "chenboat", "createdAt": "2020-01-28T19:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "a0ef497364c7593120b2173d59e8990f0be8c9e7", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\nindex 40a9838a2f..55edc2a1ae 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n\n@@ -269,33 +270,39 @@ public class HelixServerStarter {\n   private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n+    boolean toUpdateHelixRecord = false;\n     if (instanceTags == null || instanceTags.size() == 0) {\n       if (ZKMetadataProvider.getClusterTenantIsolationEnabled(_helixManager.getHelixPropertyStore())) {\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, TagNameUtils.getOfflineTagForTenant(null));\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, TagNameUtils.getRealtimeTagForTenant(null));\n+        instanceConfig.addTag(TagNameUtils.getOfflineTagForTenant(null));\n+        instanceConfig.addTag(TagNameUtils.getRealtimeTagForTenant(null));\n       } else {\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, UNTAGGED_SERVER_INSTANCE);\n+        instanceConfig.addTag(UNTAGGED_SERVER_INSTANCE);\n       }\n+      toUpdateHelixRecord = true;\n     }\n \n     // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n     // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n     // Use serverConf instead of _serverConf as the latter has been modified.\n     if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n+      toUpdateHelixRecord = true;\n       // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n       // field in zk.\n       instanceConfig.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n       instanceConfig.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n-      // Use setProperty instead of _helixAdmin.setInstanceConfig because the latter explicitly forbids instance host\n-      // port modification.\n-      if(_helixManager.getHelixDataAccessor().setProperty(\n-          _helixManager.getHelixDataAccessor().keyBuilder().instanceConfig(instanceName), instanceConfig)) {\n-        LOGGER.info(\"Updated server hostname/port successfully for server id {} to {}:\", instanceName, instanceConfig);\n-      } else {\n-        LOGGER.error(\"Failed to update hostname/port for instance: {}\", instanceName);\n-        // Treat this is as a fatal error.\n-        System.exit(1);\n-      }\n+    }\n+    if (!toUpdateHelixRecord) {\n+      return;\n+    }\n+    // Use setProperty instead of _helixAdmin.setInstanceConfig because the latter explicitly forbids instance host\n+    // port modification.\n+    if(_helixManager.getHelixDataAccessor().setProperty(\n+        _helixManager.getHelixDataAccessor().keyBuilder().instanceConfig(instanceName), instanceConfig)) {\n+      LOGGER.info(\"Updated server hostname/port successfully for server id {} to {}:\", instanceName, instanceConfig);\n+    } else {\n+      LOGGER.error(\"Failed to update hostname/port for instance: {}\", instanceName);\n+      // Treat this is as a fatal error.\n+      throw new HelixException(\"Failed to update hostname/port for instance \" + instanceName);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzU5OQ==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r371587599", "bodyText": "Don't use System.exit() for production code. Throwing an exception is good enough to abort", "author": "Jackie-Jiang", "createdAt": "2020-01-28T02:47:13Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -277,6 +277,26 @@ private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n         _helixAdmin.addInstanceTag(clusterName, instanceName, UNTAGGED_SERVER_INSTANCE);\n       }\n     }\n+\n+    // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n+    // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n+    // Use serverConf instead of _serverConf as the latter has been modified.\n+    if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n+      // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n+      // field in zk.\n+      instanceConfig.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n+      instanceConfig.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n+      // Use setProperty instead of _helixAdmin.setInstanceConfig because the latter explicitly forbids instance host\n+      // port modification.\n+      if(_helixManager.getHelixDataAccessor().setProperty(\n+          _helixManager.getHelixDataAccessor().keyBuilder().instanceConfig(instanceName), instanceConfig)) {\n+        LOGGER.info(\"Updated server hostname/port successfully for server id {} to {}:\", instanceName, instanceConfig);\n+      } else {\n+        LOGGER.error(\"Failed to update hostname/port for instance: {}\", instanceName);\n+        // Treat this is as a fatal error.\n+        System.exit(1);", "originalCommit": "326560301f2cefeeb94e7b68971e036b63f19576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwMzc2Nw==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372003767", "bodyText": "Done.Good point.", "author": "chenboat", "createdAt": "2020-01-28T19:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "11ff501d94a359bdea15b891f05bacc0d6a57fb9", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\nindex 40a9838a2f..fc9d54aa6a 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n\n@@ -294,7 +295,7 @@ public class HelixServerStarter {\n       } else {\n         LOGGER.error(\"Failed to update hostname/port for instance: {}\", instanceName);\n         // Treat this is as a fatal error.\n-        System.exit(1);\n+        throw new HelixException(\"Failed to update hostname/port for instance \" + instanceName);\n       }\n     }\n   }\n"}}, {"oid": "11ff501d94a359bdea15b891f05bacc0d6a57fb9", "url": "https://github.com/apache/pinot/commit/11ff501d94a359bdea15b891f05bacc0d6a57fb9", "message": "Update based on reviews.", "committedDate": "2020-01-28T19:17:29Z", "type": "commit"}, {"oid": "a0ef497364c7593120b2173d59e8990f0be8c9e7", "url": "https://github.com/apache/pinot/commit/a0ef497364c7593120b2173d59e8990f0be8c9e7", "message": "Update the zk only once.", "committedDate": "2020-01-29T01:35:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MzI2MA==", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372163260", "bodyText": "Compare then set:\nif (serverConf.containsKey(CONFIG_OF_INSTANCE_ID)) {\n  String hostName = _serverConf.getString(KEY_OF_SERVER_NETTY_HOST);\n  if (hostName != null && !hostName.equals(instanceConfig.getHostName())) {\n    instanceConfig.setHostName(hostName);\n    toUpdateHelixRecord = true;\n  }\n  String port = _serverConf.getString(KEY_OF_SERVER_NETTY_PORT);\n  if (port != null && !port.equals(instanceConfig.getPort())) {\n    instanceConfig.setPort(port);\n    toUpdateHelixRecord = true;\n  }\n}", "author": "Jackie-Jiang", "createdAt": "2020-01-29T02:37:19Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,16 +267,42 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n+    boolean toUpdateHelixRecord = false;\n     if (instanceTags == null || instanceTags.size() == 0) {\n       if (ZKMetadataProvider.getClusterTenantIsolationEnabled(_helixManager.getHelixPropertyStore())) {\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, TagNameUtils.getOfflineTagForTenant(null));\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, TagNameUtils.getRealtimeTagForTenant(null));\n+        instanceConfig.addTag(TagNameUtils.getOfflineTagForTenant(null));\n+        instanceConfig.addTag(TagNameUtils.getRealtimeTagForTenant(null));\n       } else {\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, UNTAGGED_SERVER_INSTANCE);\n+        instanceConfig.addTag(UNTAGGED_SERVER_INSTANCE);\n       }\n+      toUpdateHelixRecord = true;\n+    }\n+\n+    // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n+    // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n+    // Use serverConf instead of _serverConf as the latter has been modified.\n+    if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n+      toUpdateHelixRecord = true;\n+      // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n+      // field in zk.\n+      instanceConfig.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n+      instanceConfig.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n+    }", "originalCommit": "a0ef497364c7593120b2173d59e8990f0be8c9e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae8ce3bec2e7086cf81931cf3cda7fd4fafc542c", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\nindex 55edc2a1ae..48c4949416 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java\n\n@@ -284,12 +284,19 @@ public class HelixServerStarter {\n     // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n     // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n     // Use serverConf instead of _serverConf as the latter has been modified.\n-    if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n-      toUpdateHelixRecord = true;\n+    if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID)) {\n       // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n       // field in zk.\n-      instanceConfig.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n-      instanceConfig.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n+      String hostName = _serverConf.getString(KEY_OF_SERVER_NETTY_HOST);\n+      if (hostName != null && !hostName.equals(instanceConfig.getHostName())) {\n+        instanceConfig.setHostName(hostName);\n+        toUpdateHelixRecord = true;\n+      }\n+      String port = _serverConf.getString(KEY_OF_SERVER_NETTY_PORT);\n+      if (port != null && !port.equals(instanceConfig.getPort())) {\n+        instanceConfig.setPort(port);\n+        toUpdateHelixRecord = true;\n+      }\n     }\n     if (!toUpdateHelixRecord) {\n       return;\n"}}, {"oid": "ae8ce3bec2e7086cf81931cf3cda7fd4fafc542c", "url": "https://github.com/apache/pinot/commit/ae8ce3bec2e7086cf81931cf3cda7fd4fafc542c", "message": "Revised based on comments.", "committedDate": "2020-01-29T05:56:21Z", "type": "commit"}, {"oid": "fe501e570dc21ad016655e4d432da438ed1a339d", "url": "https://github.com/apache/pinot/commit/fe501e570dc21ad016655e4d432da438ed1a339d", "message": "Port is an integer in the config.", "committedDate": "2020-01-29T06:37:45Z", "type": "commit"}, {"oid": "ef6ce8a42453b823762dac33a171e23776e21853", "url": "https://github.com/apache/pinot/commit/ef6ce8a42453b823762dac33a171e23776e21853", "message": "Port is an integer in the config.", "committedDate": "2020-01-29T07:37:03Z", "type": "commit"}]}