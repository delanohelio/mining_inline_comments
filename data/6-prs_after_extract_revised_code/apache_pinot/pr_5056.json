{"pr_number": 5056, "pr_title": "[TE] [data-availability] Scheduling of data availability tasks & some clean up", "pr_createdAt": "2020-02-06T23:55:31Z", "pr_url": "https://github.com/apache/pinot/pull/5056", "timeline": [{"oid": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "url": "https://github.com/apache/pinot/commit/62ab78915f0f429e15b9ed73baa7877c0fc9896b", "message": "Test", "committedDate": "2020-02-06T23:39:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NDc3MQ==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376154771", "bodyText": "I think these name changes are great for adding clarity and consistency", "author": "harleyjj", "createdAt": "2020-02-07T00:19:08Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java", "diffHunk": "@@ -41,8 +41,8 @@\n import org.apache.pinot.thirdeye.datasource.DAORegistry;\n import org.apache.pinot.thirdeye.datasource.ThirdEyeCacheRegistry;\n import org.apache.pinot.thirdeye.datasource.pinot.resources.PinotDataSourceResource;\n-import org.apache.pinot.thirdeye.detection.DetectionPipelineScheduler;\n-import org.apache.pinot.thirdeye.detection.alert.DetectionAlertScheduler;\n+import org.apache.pinot.thirdeye.scheduler.DetectionScheduler;\n+import org.apache.pinot.thirdeye.scheduler.SubscriptionScheduler;", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1MDcwNw==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376550707", "bodyText": "Do you suggest to change the naming convention?\nFrom DetectionAlert -> Subscription? We have detection_alert_config_index table and all the subscription tasks are with the name \"detection_alert_xxx\".", "author": "xiaohui-sun", "createdAt": "2020-02-07T18:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NDc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzOTkwOA==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376639908", "bodyText": "DetectionScheduler can probably be changed to DetectionCronScheduler, since it is not the only scheduler to schedule detection tasks and it is the only cron based scheduler for detection.", "author": "vincentchenjl", "createdAt": "2020-02-07T22:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NDc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTg3MQ==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377941871", "bodyText": "@xiaohui-sun, yes, I have been consistently trying to enforce the usage of subscription rather than detection_alert in our code (this pr and in the past). detection_alert is a very confusing term.\nThe database still holds the references as detection_alert which is a little harder to migrate but eventually we should.", "author": "akshayrai", "createdAt": "2020-02-11T22:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NDc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\nindex dfb41bbb6e..2677cae8eb 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\n\n@@ -41,8 +41,8 @@ import org.apache.pinot.thirdeye.dashboard.resources.EmailResource;\n import org.apache.pinot.thirdeye.datasource.DAORegistry;\n import org.apache.pinot.thirdeye.datasource.ThirdEyeCacheRegistry;\n import org.apache.pinot.thirdeye.datasource.pinot.resources.PinotDataSourceResource;\n-import org.apache.pinot.thirdeye.scheduler.DetectionScheduler;\n-import org.apache.pinot.thirdeye.scheduler.SubscriptionScheduler;\n+import org.apache.pinot.thirdeye.scheduler.DetectionCronScheduler;\n+import org.apache.pinot.thirdeye.scheduler.SubscriptionCronScheduler;\n import org.apache.pinot.thirdeye.detector.email.filter.AlertFilterFactory;\n import org.apache.pinot.thirdeye.detector.function.AnomalyFunctionFactory;\n import org.apache.pinot.thirdeye.tracking.RequestStatisticsLogger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NjAxMg==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376556012", "bodyText": "\"DataAvailability\" is a heavily overloaded term now.\nWe have DataAvailabilityTaskScheduler which is actually \"EventTriggerTaskScheduler\".\nHere we have another \"data availability\" task. It is too confusing.\nCan you do a refactoring?\nAlso @vincentchenjl  FYI", "author": "xiaohui-sun", "createdAt": "2020-02-07T19:04:31Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java", "diffHunk": "@@ -176,35 +198,43 @@ private void populateDetectionMapAndDatasetConfigMap(\n     return res;\n   }\n \n-  private long createDetectionTask(DetectionConfigDTO detectionConfig) throws JsonProcessingException {\n-    long detectionConfigId = detectionConfig.getId();\n+  private DetectionPipelineTaskInfo getDetectionPipelineTaskInfo(DetectionConfigDTO detectionConfig, long end) {\n     // Make sure start time is not out of DETECTION_TASK_MAX_LOOKBACK_WINDOW\n-    long end = System.currentTimeMillis();\n     long start = Math.max(detectionConfig.getLastTimestamp(),\n         end - ThirdEyeUtils.DETECTION_TASK_MAX_LOOKBACK_WINDOW);\n-    DetectionPipelineTaskInfo taskInfo = new DetectionPipelineTaskInfo(detectionConfigId, start, end);\n+\n+    return new DetectionPipelineTaskInfo(detectionConfig.getId(), start, end);\n+  }\n+\n+  private long createTask(TaskConstants.TaskType taskType, DetectionConfigDTO detectionConfig, long end)\n+      throws JsonProcessingException {\n+    DetectionPipelineTaskInfo taskInfo = getDetectionPipelineTaskInfo(detectionConfig, end);\n     String taskInfoJson = OBJECT_MAPPER.writeValueAsString(taskInfo);\n-    TaskDTO taskDTO = new TaskDTO();\n-    taskDTO.setTaskType(TaskConstants.TaskType.DETECTION);\n-    taskDTO.setJobName(TaskConstants.TaskType.DETECTION.toString() + \"_\" + detectionConfigId);\n-    taskDTO.setStatus(TaskConstants.TaskStatus.WAITING);\n-    taskDTO.setTaskInfo(taskInfoJson);\n-    long taskId = taskDAO.save(taskDTO);\n-    LOG.info(\"Created detection pipeline task {} with taskId {}\", taskDTO, taskId);\n-    taskLastCreateTimeMap.put(detectionConfigId, end);\n-    return taskId;\n+    TaskDTO taskDTO = TaskUtils.buildTask(detectionConfig.getId(), taskInfoJson, taskType);\n+    long id = taskDAO.save(taskDTO);\n+    LOG.info(\"Created {} task {} with taskId {}\", taskType, taskDTO, id);\n+    return id;\n+  }\n+\n+  private long createDetectionTask(DetectionConfigDTO detectionConfig, long end) throws JsonProcessingException {\n+    return createTask(TaskConstants.TaskType.DETECTION, detectionConfig, end);\n+  }\n+\n+  private long createDataAvailabilityTask(DetectionConfigDTO detectionConfig, long end) throws JsonProcessingException {", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MzYyNw==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376643627", "bodyText": "My thought here is that we keep DataAvailabilityTaskScheduler here, because all these tasks are scheduled based on data availability.  I agree that createDataAvailabilityTask is still confusing with the DataAvailabilityTaskScheduler, so maybe we can change it to createDataSLACheckTask, which is more descriptive.", "author": "vincentchenjl", "createdAt": "2020-02-07T22:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NjAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTkwMw==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377941903", "bodyText": "@vincentchenjl agreed. Let's use data availability term for referring to the event (data available or not) and use Data SLA for the alerts that are setup based on these data availability events.\nI will update accordingly.", "author": "akshayrai", "createdAt": "2020-02-11T22:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NjAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1MjM0OQ==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r378052349", "bodyText": "I like the term SLA since it is easy to understand.", "author": "xiaohui-sun", "createdAt": "2020-02-12T05:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NjAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\nindex aa1f64dee3..4ed594cfef 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n\n@@ -220,8 +218,8 @@ public class DataAvailabilityTaskScheduler implements Runnable {\n     return createTask(TaskConstants.TaskType.DETECTION, detectionConfig, end);\n   }\n \n-  private long createDataAvailabilityTask(DetectionConfigDTO detectionConfig, long end) throws JsonProcessingException {\n-    return createTask(TaskConstants.TaskType.DATA_AVAILABILITY, detectionConfig, end);\n+  private long createDataSLACheckTask(DetectionConfigDTO detectionConfig, long end) throws JsonProcessingException {\n+    return createTask(TaskConstants.TaskType.DATA_SLA, detectionConfig, end);\n   }\n \n   private void loadLatestTaskCreateTime(DetectionConfigDTO detectionConfig) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1ODQ4MA==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376558480", "bodyText": "Why changing the interface to add endtime?", "author": "xiaohui-sun", "createdAt": "2020-02-07T19:10:07Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java", "diffHunk": "@@ -95,16 +103,30 @@ public void run() {\n           if (isAllDatasetUpdated(detectionConfig, detection2DatasetMap.get(detectionConfig), datasetConfigMap)) {\n             if (isWithinSchedulingWindow(detection2DatasetMap.get(detectionConfig), datasetConfigMap)) {\n               //TODO: additional check is required if detection is based on aggregated value across multiple data points\n-              createDetectionTask(detectionConfig);\n+              long endtime = System.currentTimeMillis();\n+              createDetectionTask(detectionConfig, endtime);", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NTUyNg==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377945526", "bodyText": "This is just a utility method ensuring both the detection and SLA task have the same end time.", "author": "akshayrai", "createdAt": "2020-02-11T22:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1ODQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1MjYxMA==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r378052610", "bodyText": "It is an overkill to add one additional parameter just for \"ensuring both the detection and SLA task have the same end time\".\nPeople look at the util function will probably wonder - \"why there is only endtime not starttime\".", "author": "xiaohui-sun", "createdAt": "2020-02-12T05:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1ODQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\nindex aa1f64dee3..4ed594cfef 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n\n@@ -105,7 +103,7 @@ public class DataAvailabilityTaskScheduler implements Runnable {\n               //TODO: additional check is required if detection is based on aggregated value across multiple data points\n               long endtime = System.currentTimeMillis();\n               createDetectionTask(detectionConfig, endtime);\n-              detectionIdToWatermarkMap.put(detectionConfig.getId(), endtime);\n+              detectionIdToLastTaskEndTimeMap.put(detectionConfig.getId(), endtime);\n               ThirdeyeMetricsUtil.eventScheduledTaskCounter.inc();\n               taskCount++;\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MDE3Ng==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376560176", "bodyText": "Do you create data availability task elsewhere? Is this the only place to trigger data availability task?", "author": "xiaohui-sun", "createdAt": "2020-02-07T19:14:04Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java", "diffHunk": "@@ -95,16 +103,30 @@ public void run() {\n           if (isAllDatasetUpdated(detectionConfig, detection2DatasetMap.get(detectionConfig), datasetConfigMap)) {\n             if (isWithinSchedulingWindow(detection2DatasetMap.get(detectionConfig), datasetConfigMap)) {\n               //TODO: additional check is required if detection is based on aggregated value across multiple data points\n-              createDetectionTask(detectionConfig);\n+              long endtime = System.currentTimeMillis();\n+              createDetectionTask(detectionConfig, endtime);\n+              detectionIdToWatermarkMap.put(detectionConfig.getId(), endtime);\n               ThirdeyeMetricsUtil.eventScheduledTaskCounter.inc();\n               taskCount++;\n             } else {\n               LOG.warn(\"Unable to schedule a task for {}, because it is out of scheduling window.\", detectionConfigId);\n             }\n           }\n+\n+          // Note: Fallback SLA & Data availability SLA are independent of each other.\n+          // For example, if an event doesn't arrive within 24 hours, do a fallback.\n+          // On the other hand, a user can setup an SLA alert if there is no data for 3 days.\n           if (needFallback(detectionConfig)) {\n             LOG.info(\"Scheduling a task for detection {} due to the fallback mechanism.\", detectionConfigId);\n-            createDetectionTask(detectionConfig);\n+            long endtime = System.currentTimeMillis();\n+            createDetectionTask(detectionConfig, endtime);\n+\n+            if (DetectionUtils.isDataAvailabilityCheckEnabled(detectionConfig)) {\n+              createDataAvailabilityTask(detectionConfig, endtime);", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTkzMg==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377941932", "bodyText": "Discussed offline. Data SLA task will be created in 2 cases.\na. Whenever the DetectionCronScheduler schedules a detection task.\nb. Whenever the DataAvailabilityTaskScheduler does a fallback.\nNote that we do not need to schedule a Data SLA task when a Data availability event arrives.", "author": "akshayrai", "createdAt": "2020-02-11T22:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MDE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\nindex aa1f64dee3..4ed594cfef 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n\n@@ -105,7 +103,7 @@ public class DataAvailabilityTaskScheduler implements Runnable {\n               //TODO: additional check is required if detection is based on aggregated value across multiple data points\n               long endtime = System.currentTimeMillis();\n               createDetectionTask(detectionConfig, endtime);\n-              detectionIdToWatermarkMap.put(detectionConfig.getId(), endtime);\n+              detectionIdToLastTaskEndTimeMap.put(detectionConfig.getId(), endtime);\n               ThirdeyeMetricsUtil.eventScheduledTaskCounter.inc();\n               taskCount++;\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MTI0Ng==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376561246", "bodyText": "Do we only run availability detection together with the normal detection job?", "author": "xiaohui-sun", "createdAt": "2020-02-07T19:16:36Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionScheduler.java", "diffHunk": "@@ -120,34 +126,41 @@ public void run() {\n           LOG.error(\"Error removing job key {}\", jobKey);\n         }\n       }\n-\n     } catch (SchedulerException e) {\n       LOG.error(\"Error while scheduling detection pipeline\", e);\n     }\n   }\n \n-  private boolean jobUpdated(DetectionConfigDTO config, JobKey key) throws SchedulerException {\n-    List<Trigger> triggers = (List<Trigger>) scheduler.getTriggersOfJob(key);\n-    CronTrigger cronTrigger = (CronTrigger) triggers.get(0);\n-    String cronInSchedule = cronTrigger.getCronExpression();\n+  @Override\n+  public Set<JobKey> getScheduledJobs() throws SchedulerException {\n+    return this.scheduler.getJobKeys(GroupMatcher.jobGroupEquals(TaskConstants.TaskType.DETECTION.toString()));\n+  }\n \n-    if (!config.getCron().equals(cronInSchedule)) {\n-      LOG.info(\"Cron expression for detection pipeline {} has been changed from {}  to {}. \" + \"Restarting schedule\",\n-          config.getId(), cronInSchedule, config.getCron());\n-      return true;\n-    }\n-    return false;\n+  @Override\n+  public void shutdown() throws SchedulerException {\n+    AnomalyUtils.safelyShutdownExecutionService(executorService, this.getClass());\n+    scheduler.shutdown();\n   }\n \n-  private void startJob(DetectionConfigDTO config, JobKey key) throws SchedulerException {\n-    Trigger trigger =\n-        TriggerBuilder.newTrigger().withSchedule(CronScheduleBuilder.cronSchedule(config.getCron())).build();\n-    JobDetail job = JobBuilder.newJob(DetectionPipelineJob.class).withIdentity(key).build();\n-    this.scheduler.scheduleJob(job, trigger);\n-    LOG.info(String.format(\"scheduled detection pipeline job %s.\", key.getName()));\n+  @Override\n+  public void startJob(AbstractBean config, JobKey key) throws SchedulerException {\n+    Trigger trigger = TriggerBuilder.newTrigger().withSchedule(\n+        CronScheduleBuilder.cronSchedule(((DetectionConfigBean) config).getCron())).build();\n+    JobDetail detectionJob = JobBuilder.newJob(DetectionPipelineJob.class).withIdentity(key).build();\n+\n+    this.scheduler.scheduleJob(detectionJob, trigger);\n+    LOG.info(String.format(\"scheduled detection pipeline job %s\", detectionJob.getKey().getName()));\n+\n+    // Data availability alerts will be scheduled only when enabled by the user.\n+    if (DetectionUtils.isDataAvailabilityCheckEnabled((DetectionConfigDTO) config)) {", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MjA0Mw==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377942043", "bodyText": "In this PR yes. This PR is only addressing the availability of data for detection jobs. In the next phase, we will have a DataSLACronScheduler which will allow users to define custom SLAs independent of detection.\nUpdated description to reflect this.", "author": "akshayrai", "createdAt": "2020-02-11T22:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MTI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionScheduler.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionCronScheduler.java\nsimilarity index 92%\nrename from thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionScheduler.java\nrename to thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionCronScheduler.java\nindex 98559b5bca..bf20427f46 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionScheduler.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionCronScheduler.java\n\n@@ -151,11 +151,11 @@ public class DetectionScheduler implements ThirdEyeScheduler {\n     this.scheduler.scheduleJob(detectionJob, trigger);\n     LOG.info(String.format(\"scheduled detection pipeline job %s\", detectionJob.getKey().getName()));\n \n-    // Data availability alerts will be scheduled only when enabled by the user.\n+    // Data SLA alerts will be scheduled only when enabled by the user.\n     if (DetectionUtils.isDataAvailabilityCheckEnabled((DetectionConfigDTO) config)) {\n-      JobDetail dataAvailabilityJob = JobBuilder.newJob(DetectionDataAvailabilityJob.class).withIdentity(key).build();\n-      this.scheduler.scheduleJob(dataAvailabilityJob, trigger);\n-      LOG.info(String.format(\"scheduled data availability jobs %s\", dataAvailabilityJob.getKey().getName()));\n+      JobDetail dataSLAJob = JobBuilder.newJob(DetectionDataSLAJob.class).withIdentity(key).build();\n+      this.scheduler.scheduleJob(dataSLAJob, trigger);\n+      LOG.info(String.format(\"scheduled data availability jobs %s\", dataSLAJob.getKey().getName()));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4OTc3NA==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376589774", "bodyText": "Maybe we can rename it to something like detectionIdToLastTaskCreateTimeMap? Because I think watermark is also overloaded in the context.  \ud83d\ude42\nNot clear whether it's the detection last time stamp, task create time or the latest data point.", "author": "jihaozh", "createdAt": "2020-02-07T20:22:40Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java", "diffHunk": "@@ -74,7 +82,7 @@ public DataAvailabilityTaskScheduler(long delayInSec, long fallBackTimeInSec, lo\n     this.delayInSec = delayInSec;\n     this.fallBackTimeInSec = fallBackTimeInSec;\n     this.schedulingWindowInSec = schedulingWindowInSec;\n-    this.taskLastCreateTimeMap = new HashMap<>();\n+    this.detectionIdToWatermarkMap = new HashMap<>();", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzNzU3Ng==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376637576", "bodyText": "+1\nThe only case that it stores watermark is when there is no task for the detection at all, which should be minor case.", "author": "vincentchenjl", "createdAt": "2020-02-07T22:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4OTc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MjYyMg==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377942622", "bodyText": "Done", "author": "akshayrai", "createdAt": "2020-02-11T22:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4OTc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\nindex aa1f64dee3..4ed594cfef 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n\n@@ -82,7 +80,7 @@ public class DataAvailabilityTaskScheduler implements Runnable {\n     this.delayInSec = delayInSec;\n     this.fallBackTimeInSec = fallBackTimeInSec;\n     this.schedulingWindowInSec = schedulingWindowInSec;\n-    this.detectionIdToWatermarkMap = new HashMap<>();\n+    this.detectionIdToLastTaskEndTimeMap = new HashMap<>();\n     this.executorService = Executors.newSingleThreadScheduledExecutor();\n     this.taskDAO = DAORegistry.getInstance().getTaskDAO();\n     this.detectionConfigDAO = DAORegistry.getInstance().getDetectionConfigManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMDcyMw==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376630723", "bodyText": "Does the availability task and the detection task share the same cron?", "author": "jihaozh", "createdAt": "2020-02-07T22:09:09Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionScheduler.java", "diffHunk": "@@ -120,34 +126,41 @@ public void run() {\n           LOG.error(\"Error removing job key {}\", jobKey);\n         }\n       }\n-\n     } catch (SchedulerException e) {\n       LOG.error(\"Error while scheduling detection pipeline\", e);\n     }\n   }\n \n-  private boolean jobUpdated(DetectionConfigDTO config, JobKey key) throws SchedulerException {\n-    List<Trigger> triggers = (List<Trigger>) scheduler.getTriggersOfJob(key);\n-    CronTrigger cronTrigger = (CronTrigger) triggers.get(0);\n-    String cronInSchedule = cronTrigger.getCronExpression();\n+  @Override\n+  public Set<JobKey> getScheduledJobs() throws SchedulerException {\n+    return this.scheduler.getJobKeys(GroupMatcher.jobGroupEquals(TaskConstants.TaskType.DETECTION.toString()));\n+  }\n \n-    if (!config.getCron().equals(cronInSchedule)) {\n-      LOG.info(\"Cron expression for detection pipeline {} has been changed from {}  to {}. \" + \"Restarting schedule\",\n-          config.getId(), cronInSchedule, config.getCron());\n-      return true;\n-    }\n-    return false;\n+  @Override\n+  public void shutdown() throws SchedulerException {\n+    AnomalyUtils.safelyShutdownExecutionService(executorService, this.getClass());\n+    scheduler.shutdown();\n   }\n \n-  private void startJob(DetectionConfigDTO config, JobKey key) throws SchedulerException {\n-    Trigger trigger =\n-        TriggerBuilder.newTrigger().withSchedule(CronScheduleBuilder.cronSchedule(config.getCron())).build();\n-    JobDetail job = JobBuilder.newJob(DetectionPipelineJob.class).withIdentity(key).build();\n-    this.scheduler.scheduleJob(job, trigger);\n-    LOG.info(String.format(\"scheduled detection pipeline job %s.\", key.getName()));\n+  @Override\n+  public void startJob(AbstractBean config, JobKey key) throws SchedulerException {\n+    Trigger trigger = TriggerBuilder.newTrigger().withSchedule(\n+        CronScheduleBuilder.cronSchedule(((DetectionConfigBean) config).getCron())).build();\n+    JobDetail detectionJob = JobBuilder.newJob(DetectionPipelineJob.class).withIdentity(key).build();\n+\n+    this.scheduler.scheduleJob(detectionJob, trigger);\n+    LOG.info(String.format(\"scheduled detection pipeline job %s\", detectionJob.getKey().getName()));\n+\n+    // Data availability alerts will be scheduled only when enabled by the user.\n+    if (DetectionUtils.isDataAvailabilityCheckEnabled((DetectionConfigDTO) config)) {\n+      JobDetail dataAvailabilityJob = JobBuilder.newJob(DetectionDataAvailabilityJob.class).withIdentity(key).build();\n+      this.scheduler.scheduleJob(dataAvailabilityJob, trigger);", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzIzNA==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377943234", "bodyText": "Yes. This PR is only addressing the availability of data for detection jobs. In the next phase, we will have a DataSLACronScheduler which can have a different cron schedule.", "author": "akshayrai", "createdAt": "2020-02-11T22:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMDcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1Mjk5NA==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r378052994", "bodyText": "DataAvailabilityScheduler should be used for it. Probably we don't need another scheduler.", "author": "xiaohui-sun", "createdAt": "2020-02-12T05:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMDcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionScheduler.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionCronScheduler.java\nsimilarity index 92%\nrename from thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionScheduler.java\nrename to thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionCronScheduler.java\nindex 98559b5bca..bf20427f46 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionScheduler.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/DetectionCronScheduler.java\n\n@@ -151,11 +151,11 @@ public class DetectionScheduler implements ThirdEyeScheduler {\n     this.scheduler.scheduleJob(detectionJob, trigger);\n     LOG.info(String.format(\"scheduled detection pipeline job %s\", detectionJob.getKey().getName()));\n \n-    // Data availability alerts will be scheduled only when enabled by the user.\n+    // Data SLA alerts will be scheduled only when enabled by the user.\n     if (DetectionUtils.isDataAvailabilityCheckEnabled((DetectionConfigDTO) config)) {\n-      JobDetail dataAvailabilityJob = JobBuilder.newJob(DetectionDataAvailabilityJob.class).withIdentity(key).build();\n-      this.scheduler.scheduleJob(dataAvailabilityJob, trigger);\n-      LOG.info(String.format(\"scheduled data availability jobs %s\", dataAvailabilityJob.getKey().getName()));\n+      JobDetail dataSLAJob = JobBuilder.newJob(DetectionDataSLAJob.class).withIdentity(key).build();\n+      this.scheduler.scheduleJob(dataSLAJob, trigger);\n+      LOG.info(String.format(\"scheduled data availability jobs %s\", dataSLAJob.getKey().getName()));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0Mzk1NQ==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376643955", "bodyText": "Why this line is only executed whenDetectionUtils.isDataAvailabilityCheckEnabled(detectionConfig) is true?", "author": "vincentchenjl", "createdAt": "2020-02-07T22:50:22Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java", "diffHunk": "@@ -95,16 +103,30 @@ public void run() {\n           if (isAllDatasetUpdated(detectionConfig, detection2DatasetMap.get(detectionConfig), datasetConfigMap)) {\n             if (isWithinSchedulingWindow(detection2DatasetMap.get(detectionConfig), datasetConfigMap)) {\n               //TODO: additional check is required if detection is based on aggregated value across multiple data points\n-              createDetectionTask(detectionConfig);\n+              long endtime = System.currentTimeMillis();\n+              createDetectionTask(detectionConfig, endtime);\n+              detectionIdToWatermarkMap.put(detectionConfig.getId(), endtime);\n               ThirdeyeMetricsUtil.eventScheduledTaskCounter.inc();\n               taskCount++;\n             } else {\n               LOG.warn(\"Unable to schedule a task for {}, because it is out of scheduling window.\", detectionConfigId);\n             }\n           }\n+\n+          // Note: Fallback SLA & Data availability SLA are independent of each other.\n+          // For example, if an event doesn't arrive within 24 hours, do a fallback.\n+          // On the other hand, a user can setup an SLA alert if there is no data for 3 days.\n           if (needFallback(detectionConfig)) {\n             LOG.info(\"Scheduling a task for detection {} due to the fallback mechanism.\", detectionConfigId);\n-            createDetectionTask(detectionConfig);\n+            long endtime = System.currentTimeMillis();\n+            createDetectionTask(detectionConfig, endtime);\n+\n+            if (DetectionUtils.isDataAvailabilityCheckEnabled(detectionConfig)) {\n+              createDataAvailabilityTask(detectionConfig, endtime);\n+              LOG.info(\"Scheduling a task for data availability {} due to the fallback mechanism.\", detectionConfigId);", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MDYyNw==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377960627", "bodyText": "This is a flag to enable/disable data sla checks.", "author": "akshayrai", "createdAt": "2020-02-11T23:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0Mzk1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\nindex aa1f64dee3..4ed594cfef 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/detection/trigger/DataAvailabilityTaskScheduler.java\n\n@@ -105,7 +103,7 @@ public class DataAvailabilityTaskScheduler implements Runnable {\n               //TODO: additional check is required if detection is based on aggregated value across multiple data points\n               long endtime = System.currentTimeMillis();\n               createDetectionTask(detectionConfig, endtime);\n-              detectionIdToWatermarkMap.put(detectionConfig.getId(), endtime);\n+              detectionIdToLastTaskEndTimeMap.put(detectionConfig.getId(), endtime);\n               ThirdeyeMetricsUtil.eventScheduledTaskCounter.inc();\n               taskCount++;\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0OTUxNA==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r376649514", "bodyText": "Should we can call it ThirdEyeCronScheduler to be more specific? I am not sure the interfaces defined here apply to any scheduler that listens to external events, data availability for instance. Even we can put the instance of Quatz scheuler here.", "author": "vincentchenjl", "createdAt": "2020-02-07T23:08:18Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/ThirdEyeScheduler.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *\n+ *  * Licensed to the Apache Software Foundation (ASF) under one\n+ *  * or more contributor license agreements.  See the NOTICE file\n+ *  * distributed with this work for additional information\n+ *  * regarding copyright ownership.  The ASF licenses this file\n+ *  * to you under the Apache License, Version 2.0 (the\n+ *  * \"License\"); you may not use this file except in compliance\n+ *  * with the License.  You may obtain a copy of the License at\n+ *  *\n+ *  *   http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing,\n+ *  * software distributed under the License is distributed on an\n+ *  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  * KIND, either express or implied.  See the License for the\n+ *  * specific language governing permissions and limitations\n+ *  * under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.pinot.thirdeye.scheduler;\n+\n+import java.util.Set;\n+import org.apache.pinot.thirdeye.datalayer.pojo.AbstractBean;\n+import org.quartz.JobKey;\n+import org.quartz.SchedulerException;\n+\n+\n+/**\n+ * Interface for ThirdEye's scheduling components\n+ */\n+public interface ThirdEyeScheduler extends Runnable {", "originalCommit": "62ab78915f0f429e15b9ed73baa7877c0fc9896b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NTg0Ng==", "url": "https://github.com/apache/pinot/pull/5056#discussion_r377945846", "bodyText": "Makes sense. Updated it.", "author": "akshayrai", "createdAt": "2020-02-11T22:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0OTUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/ThirdEyeScheduler.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/ThirdEyeCronScheduler.java\nsimilarity index 96%\nrename from thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/ThirdEyeScheduler.java\nrename to thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/ThirdEyeCronScheduler.java\nindex 70bfd8ade9..eb3549c253 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/ThirdEyeScheduler.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/scheduler/ThirdEyeCronScheduler.java\n\n@@ -31,7 +31,7 @@ import org.quartz.SchedulerException;\n /**\n  * Interface for ThirdEye's scheduling components\n  */\n-public interface ThirdEyeScheduler extends Runnable {\n+public interface ThirdEyeCronScheduler extends Runnable {\n \n   // Initialize and prepare the scheduler\n   void start() throws SchedulerException;\n"}}, {"oid": "ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "url": "https://github.com/apache/pinot/commit/ac2f5cb3fd7b6b4dd1f4e55c24931b2f0854e623", "message": "[TE] renaming classes and introduce some naming convention", "committedDate": "2020-02-11T23:27:52Z", "type": "commit"}]}