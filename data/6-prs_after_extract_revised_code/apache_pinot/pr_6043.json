{"pr_number": 6043, "pr_title": "Add IN_PARTITIONED_SUBQUERY support", "pr_createdAt": "2020-09-22T04:36:11Z", "pr_url": "https://github.com/apache/pinot/pull/6043", "timeline": [{"oid": "49f09fb7ca84ce83284232d281bc33ab0c765767", "url": "https://github.com/apache/pinot/commit/49f09fb7ca84ce83284232d281bc33ab0c765767", "message": "Add IN_PARTITIONED_SUBQUERY support", "committedDate": "2020-09-22T23:39:26Z", "type": "forcePushed"}, {"oid": "18ad00fa0c1cc938969839dacf8ada5c754a9f61", "url": "https://github.com/apache/pinot/commit/18ad00fa0c1cc938969839dacf8ada5c754a9f61", "message": "Add IN_PARTITIONED_SUBQUERY support", "committedDate": "2020-10-08T04:50:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1Njc0OQ==", "url": "https://github.com/apache/pinot/pull/6043#discussion_r502756749", "bodyText": "add java docs on what this method is doing", "author": "kishoreg", "createdAt": "2020-10-10T07:03:27Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java", "diffHunk": "@@ -277,4 +253,112 @@ public DataTable processQuery(ServerQueryRequest queryRequest, ExecutorService e\n     LOGGER.debug(\"InstanceResponse for request Id - {}: {}\", requestId, dataTable);\n     return dataTable;\n   }\n+\n+  private DataTable processQuery(List<IndexSegment> indexSegments, QueryContext queryContext, TimerContext timerContext,\n+      ExecutorService executorService, @Nullable StreamObserver<Server.ServerResponse> responseObserver, long endTimeMs,\n+      boolean enableStreaming)\n+      throws Exception {\n+    handleSubquery(queryContext, indexSegments, timerContext, executorService, endTimeMs);\n+\n+    // Compute total docs for the table before pruning the segments\n+    long numTotalDocs = 0;\n+    for (IndexSegment indexSegment : indexSegments) {\n+      numTotalDocs += indexSegment.getSegmentMetadata().getTotalDocs();\n+    }\n+\n+    TimerContext.Timer segmentPruneTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.SEGMENT_PRUNING);\n+    List<IndexSegment> selectedSegments = _segmentPrunerService.prune(indexSegments, queryContext);\n+    segmentPruneTimer.stopAndRecord();\n+    int numSelectedSegments = selectedSegments.size();\n+    LOGGER.debug(\"Matched {} segments after pruning\", numSelectedSegments);\n+    if (numSelectedSegments == 0) {\n+      // Only return metadata for streaming query\n+      DataTable dataTable = enableStreaming ? new DataTableImplV2() : DataTableUtils.buildEmptyDataTable(queryContext);\n+      Map<String, String> metadata = dataTable.getMetadata();\n+      metadata.put(DataTable.TOTAL_DOCS_METADATA_KEY, String.valueOf(numTotalDocs));\n+      metadata.put(DataTable.NUM_DOCS_SCANNED_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_ENTRIES_SCANNED_IN_FILTER_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_ENTRIES_SCANNED_POST_FILTER_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_SEGMENTS_PROCESSED, \"0\");\n+      metadata.put(DataTable.NUM_SEGMENTS_MATCHED, \"0\");\n+      return dataTable;\n+    } else {\n+      TimerContext.Timer planBuildTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.BUILD_QUERY_PLAN);\n+      Plan queryPlan = enableStreaming ? _planMaker\n+          .makeStreamingInstancePlan(selectedSegments, queryContext, executorService, responseObserver, endTimeMs)\n+          : _planMaker.makeInstancePlan(selectedSegments, queryContext, executorService, endTimeMs);\n+      planBuildTimer.stopAndRecord();\n+\n+      TimerContext.Timer planExecTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.QUERY_PLAN_EXECUTION);\n+      DataTable dataTable = queryPlan.execute();\n+      planExecTimer.stopAndRecord();\n+\n+      // Update the total docs in the metadata based on the un-pruned segments\n+      dataTable.getMetadata().put(DataTable.TOTAL_DOCS_METADATA_KEY, Long.toString(numTotalDocs));\n+\n+      return dataTable;\n+    }\n+  }\n+\n+  /**\n+   * Handles the subquery in the given query.\n+   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   */\n+  private void handleSubquery(QueryContext queryContext, List<IndexSegment> indexSegments, TimerContext timerContext,\n+      ExecutorService executorService, long endTimeMs)\n+      throws Exception {\n+    FilterContext filter = queryContext.getFilter();\n+    if (filter != null) {\n+      handleSubquery(filter, indexSegments, timerContext, executorService, endTimeMs);\n+    }\n+  }\n+\n+  /**\n+   * Handles the subquery in the filter.\n+   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   */\n+  private void handleSubquery(FilterContext filter, List<IndexSegment> indexSegments, TimerContext timerContext,\n+      ExecutorService executorService, long endTimeMs)\n+      throws Exception {\n+    Predicate predicate = filter.getPredicate();\n+    if (predicate != null) {\n+      handleSubquery(predicate.getLhs(), indexSegments, timerContext, executorService, endTimeMs);\n+    } else {\n+      for (FilterContext child : filter.getChildren()) {\n+        handleSubquery(child, indexSegments, timerContext, executorService, endTimeMs);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Handles the subquery in the given expression.\n+   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   */\n+  private void handleSubquery(ExpressionContext expression, List<IndexSegment> indexSegments, TimerContext timerContext,", "originalCommit": "18ad00fa0c1cc938969839dacf8ada5c754a9f61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMjQxMg==", "url": "https://github.com/apache/pinot/pull/6043#discussion_r504232412", "bodyText": "Done", "author": "Jackie-Jiang", "createdAt": "2020-10-13T20:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1Njc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9466ab4504fa73584e9bc10caf8761518ee2e584", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java b/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\nindex 827d2f4bc8..bf26cbbd4e 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\n\n@@ -302,7 +301,7 @@ public class ServerQueryExecutorV1Impl implements QueryExecutor {\n \n   /**\n    * Handles the subquery in the given query.\n-   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   * <p>Currently only supports subquery within the filter.\n    */\n   private void handleSubquery(QueryContext queryContext, List<IndexSegment> indexSegments, TimerContext timerContext,\n       ExecutorService executorService, long endTimeMs)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1Njk2Mg==", "url": "https://github.com/apache/pinot/pull/6043#discussion_r502756962", "bodyText": "docs, isn't it better to check for filter.getChildren and invert the if statement?", "author": "kishoreg", "createdAt": "2020-10-10T07:05:51Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java", "diffHunk": "@@ -277,4 +253,112 @@ public DataTable processQuery(ServerQueryRequest queryRequest, ExecutorService e\n     LOGGER.debug(\"InstanceResponse for request Id - {}: {}\", requestId, dataTable);\n     return dataTable;\n   }\n+\n+  private DataTable processQuery(List<IndexSegment> indexSegments, QueryContext queryContext, TimerContext timerContext,\n+      ExecutorService executorService, @Nullable StreamObserver<Server.ServerResponse> responseObserver, long endTimeMs,\n+      boolean enableStreaming)\n+      throws Exception {\n+    handleSubquery(queryContext, indexSegments, timerContext, executorService, endTimeMs);\n+\n+    // Compute total docs for the table before pruning the segments\n+    long numTotalDocs = 0;\n+    for (IndexSegment indexSegment : indexSegments) {\n+      numTotalDocs += indexSegment.getSegmentMetadata().getTotalDocs();\n+    }\n+\n+    TimerContext.Timer segmentPruneTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.SEGMENT_PRUNING);\n+    List<IndexSegment> selectedSegments = _segmentPrunerService.prune(indexSegments, queryContext);\n+    segmentPruneTimer.stopAndRecord();\n+    int numSelectedSegments = selectedSegments.size();\n+    LOGGER.debug(\"Matched {} segments after pruning\", numSelectedSegments);\n+    if (numSelectedSegments == 0) {\n+      // Only return metadata for streaming query\n+      DataTable dataTable = enableStreaming ? new DataTableImplV2() : DataTableUtils.buildEmptyDataTable(queryContext);\n+      Map<String, String> metadata = dataTable.getMetadata();\n+      metadata.put(DataTable.TOTAL_DOCS_METADATA_KEY, String.valueOf(numTotalDocs));\n+      metadata.put(DataTable.NUM_DOCS_SCANNED_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_ENTRIES_SCANNED_IN_FILTER_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_ENTRIES_SCANNED_POST_FILTER_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_SEGMENTS_PROCESSED, \"0\");\n+      metadata.put(DataTable.NUM_SEGMENTS_MATCHED, \"0\");\n+      return dataTable;\n+    } else {\n+      TimerContext.Timer planBuildTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.BUILD_QUERY_PLAN);\n+      Plan queryPlan = enableStreaming ? _planMaker\n+          .makeStreamingInstancePlan(selectedSegments, queryContext, executorService, responseObserver, endTimeMs)\n+          : _planMaker.makeInstancePlan(selectedSegments, queryContext, executorService, endTimeMs);\n+      planBuildTimer.stopAndRecord();\n+\n+      TimerContext.Timer planExecTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.QUERY_PLAN_EXECUTION);\n+      DataTable dataTable = queryPlan.execute();\n+      planExecTimer.stopAndRecord();\n+\n+      // Update the total docs in the metadata based on the un-pruned segments\n+      dataTable.getMetadata().put(DataTable.TOTAL_DOCS_METADATA_KEY, Long.toString(numTotalDocs));\n+\n+      return dataTable;\n+    }\n+  }\n+\n+  /**\n+   * Handles the subquery in the given query.\n+   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   */\n+  private void handleSubquery(QueryContext queryContext, List<IndexSegment> indexSegments, TimerContext timerContext,\n+      ExecutorService executorService, long endTimeMs)\n+      throws Exception {\n+    FilterContext filter = queryContext.getFilter();\n+    if (filter != null) {\n+      handleSubquery(filter, indexSegments, timerContext, executorService, endTimeMs);\n+    }\n+  }\n+\n+  /**\n+   * Handles the subquery in the filter.\n+   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   */\n+  private void handleSubquery(FilterContext filter, List<IndexSegment> indexSegments, TimerContext timerContext,\n+      ExecutorService executorService, long endTimeMs)\n+      throws Exception {\n+    Predicate predicate = filter.getPredicate();\n+    if (predicate != null) {", "originalCommit": "18ad00fa0c1cc938969839dacf8ada5c754a9f61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzODQyMg==", "url": "https://github.com/apache/pinot/pull/6043#discussion_r504238422", "bodyText": "Done", "author": "Jackie-Jiang", "createdAt": "2020-10-13T20:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1Njk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9466ab4504fa73584e9bc10caf8761518ee2e584", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java b/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\nindex 827d2f4bc8..bf26cbbd4e 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\n\n@@ -302,7 +301,7 @@ public class ServerQueryExecutorV1Impl implements QueryExecutor {\n \n   /**\n    * Handles the subquery in the given query.\n-   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   * <p>Currently only supports subquery within the filter.\n    */\n   private void handleSubquery(QueryContext queryContext, List<IndexSegment> indexSegments, TimerContext timerContext,\n       ExecutorService executorService, long endTimeMs)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzM1MQ==", "url": "https://github.com/apache/pinot/pull/6043#discussion_r502757351", "bodyText": "more javadocs", "author": "kishoreg", "createdAt": "2020-10-10T07:10:25Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java", "diffHunk": "@@ -277,4 +253,112 @@ public DataTable processQuery(ServerQueryRequest queryRequest, ExecutorService e\n     LOGGER.debug(\"InstanceResponse for request Id - {}: {}\", requestId, dataTable);\n     return dataTable;\n   }\n+\n+  private DataTable processQuery(List<IndexSegment> indexSegments, QueryContext queryContext, TimerContext timerContext,\n+      ExecutorService executorService, @Nullable StreamObserver<Server.ServerResponse> responseObserver, long endTimeMs,\n+      boolean enableStreaming)\n+      throws Exception {\n+    handleSubquery(queryContext, indexSegments, timerContext, executorService, endTimeMs);\n+\n+    // Compute total docs for the table before pruning the segments\n+    long numTotalDocs = 0;\n+    for (IndexSegment indexSegment : indexSegments) {\n+      numTotalDocs += indexSegment.getSegmentMetadata().getTotalDocs();\n+    }\n+\n+    TimerContext.Timer segmentPruneTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.SEGMENT_PRUNING);\n+    List<IndexSegment> selectedSegments = _segmentPrunerService.prune(indexSegments, queryContext);\n+    segmentPruneTimer.stopAndRecord();\n+    int numSelectedSegments = selectedSegments.size();\n+    LOGGER.debug(\"Matched {} segments after pruning\", numSelectedSegments);\n+    if (numSelectedSegments == 0) {\n+      // Only return metadata for streaming query\n+      DataTable dataTable = enableStreaming ? new DataTableImplV2() : DataTableUtils.buildEmptyDataTable(queryContext);\n+      Map<String, String> metadata = dataTable.getMetadata();\n+      metadata.put(DataTable.TOTAL_DOCS_METADATA_KEY, String.valueOf(numTotalDocs));\n+      metadata.put(DataTable.NUM_DOCS_SCANNED_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_ENTRIES_SCANNED_IN_FILTER_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_ENTRIES_SCANNED_POST_FILTER_METADATA_KEY, \"0\");\n+      metadata.put(DataTable.NUM_SEGMENTS_PROCESSED, \"0\");\n+      metadata.put(DataTable.NUM_SEGMENTS_MATCHED, \"0\");\n+      return dataTable;\n+    } else {\n+      TimerContext.Timer planBuildTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.BUILD_QUERY_PLAN);\n+      Plan queryPlan = enableStreaming ? _planMaker\n+          .makeStreamingInstancePlan(selectedSegments, queryContext, executorService, responseObserver, endTimeMs)\n+          : _planMaker.makeInstancePlan(selectedSegments, queryContext, executorService, endTimeMs);\n+      planBuildTimer.stopAndRecord();\n+\n+      TimerContext.Timer planExecTimer = timerContext.startNewPhaseTimer(ServerQueryPhase.QUERY_PLAN_EXECUTION);\n+      DataTable dataTable = queryPlan.execute();\n+      planExecTimer.stopAndRecord();\n+\n+      // Update the total docs in the metadata based on the un-pruned segments\n+      dataTable.getMetadata().put(DataTable.TOTAL_DOCS_METADATA_KEY, Long.toString(numTotalDocs));\n+\n+      return dataTable;\n+    }\n+  }\n+\n+  /**\n+   * Handles the subquery in the given query.\n+   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   */\n+  private void handleSubquery(QueryContext queryContext, List<IndexSegment> indexSegments, TimerContext timerContext,\n+      ExecutorService executorService, long endTimeMs)\n+      throws Exception {\n+    FilterContext filter = queryContext.getFilter();\n+    if (filter != null) {\n+      handleSubquery(filter, indexSegments, timerContext, executorService, endTimeMs);\n+    }\n+  }\n+\n+  /**\n+   * Handles the subquery in the filter.\n+   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   */\n+  private void handleSubquery(FilterContext filter, List<IndexSegment> indexSegments, TimerContext timerContext,\n+      ExecutorService executorService, long endTimeMs)\n+      throws Exception {\n+    Predicate predicate = filter.getPredicate();\n+    if (predicate != null) {\n+      handleSubquery(predicate.getLhs(), indexSegments, timerContext, executorService, endTimeMs);\n+    } else {\n+      for (FilterContext child : filter.getChildren()) {\n+        handleSubquery(child, indexSegments, timerContext, executorService, endTimeMs);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Handles the subquery in the given expression.\n+   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   */\n+  private void handleSubquery(ExpressionContext expression, List<IndexSegment> indexSegments, TimerContext timerContext,\n+      ExecutorService executorService, long endTimeMs)\n+      throws Exception {\n+    FunctionContext function = expression.getFunction();\n+    if (function == null) {\n+      return;\n+    }\n+    List<ExpressionContext> arguments = function.getArguments();\n+    if (StringUtils.remove(function.getFunctionName(), '_').equalsIgnoreCase(IN_PARTITIONED_SUBQUERY)) {\n+      Preconditions\n+          .checkState(arguments.size() == 2, \"IN_PARTITIONED_SUBQUERY requires 2 arguments: expression, subquery\");\n+      ExpressionContext subqueryExpression = arguments.get(1);\n+      Preconditions.checkState(subqueryExpression.getType() == ExpressionContext.Type.LITERAL,\n+          \"Second argument of IN_PARTITIONED_SUBQUERY must be a literal (subquery)\");\n+      QueryContext subquery = QueryContextConverterUtils.getQueryContextFromSQL(subqueryExpression.getLiteral());\n+      DataTable dataTable =", "originalCommit": "18ad00fa0c1cc938969839dacf8ada5c754a9f61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTE4NA==", "url": "https://github.com/apache/pinot/pull/6043#discussion_r504239184", "bodyText": "Done", "author": "Jackie-Jiang", "createdAt": "2020-10-13T20:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9466ab4504fa73584e9bc10caf8761518ee2e584", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java b/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\nindex 827d2f4bc8..bf26cbbd4e 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/executor/ServerQueryExecutorV1Impl.java\n\n@@ -302,7 +301,7 @@ public class ServerQueryExecutorV1Impl implements QueryExecutor {\n \n   /**\n    * Handles the subquery in the given query.\n-   * <p>Currently only supports subquery within IN_PARTITIONED_SUBQUERY function.\n+   * <p>Currently only supports subquery within the filter.\n    */\n   private void handleSubquery(QueryContext queryContext, List<IndexSegment> indexSegments, TimerContext timerContext,\n       ExecutorService executorService, long endTimeMs)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzcyNw==", "url": "https://github.com/apache/pinot/pull/6043#discussion_r502757727", "bodyText": "why is this a public method? who is invoking this and from where", "author": "kishoreg", "createdAt": "2020-10-10T07:15:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/QueryContext.java", "diffHunk": "@@ -372,5 +399,46 @@ private static void getAggregations(FilterContext filter, List<FunctionContext>\n         getAggregations(filter.getPredicate().getLhs(), aggregations);\n       }\n     }\n+\n+    /**\n+     * Helper method to extract the columns (IDENTIFIER expressions) for the query.\n+     */\n+    public void extractColumns(QueryContext query) {", "originalCommit": "18ad00fa0c1cc938969839dacf8ada5c754a9f61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTU5OA==", "url": "https://github.com/apache/pinot/pull/6043#discussion_r504239598", "bodyText": "Good catch, changed to private", "author": "Jackie-Jiang", "createdAt": "2020-10-13T20:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "9466ab4504fa73584e9bc10caf8761518ee2e584", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/request/context/QueryContext.java b/pinot-core/src/main/java/org/apache/pinot/core/query/request/context/QueryContext.java\nindex 807a52d092..4ae36775de 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/request/context/QueryContext.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/request/context/QueryContext.java\n\n@@ -403,7 +403,7 @@ public class QueryContext {\n     /**\n      * Helper method to extract the columns (IDENTIFIER expressions) for the query.\n      */\n-    public void extractColumns(QueryContext query) {\n+    private void extractColumns(QueryContext query) {\n       Set<String> columns = new HashSet<>();\n \n       for (ExpressionContext expression : query._selectExpressions) {\n"}}, {"oid": "9466ab4504fa73584e9bc10caf8761518ee2e584", "url": "https://github.com/apache/pinot/commit/9466ab4504fa73584e9bc10caf8761518ee2e584", "message": "Add IN_PARTITIONED_SUBQUERY support", "committedDate": "2020-10-13T20:31:13Z", "type": "forcePushed"}, {"oid": "97ff7a6deb1dd1384f4c47ef896f606c045e152f", "url": "https://github.com/apache/pinot/commit/97ff7a6deb1dd1384f4c47ef896f606c045e152f", "message": "Add IN_PARTITIONED_SUBQUERY support", "committedDate": "2020-10-13T20:45:35Z", "type": "forcePushed"}, {"oid": "95c4496da2263f5a2b2c32b00d5d0b688931314d", "url": "https://github.com/apache/pinot/commit/95c4496da2263f5a2b2c32b00d5d0b688931314d", "message": "Add IN_PARTITIONED_SUBQUERY support", "committedDate": "2020-10-13T22:12:17Z", "type": "forcePushed"}, {"oid": "b729442d2ef9cfc736254159b0227cd9014d214b", "url": "https://github.com/apache/pinot/commit/b729442d2ef9cfc736254159b0227cd9014d214b", "message": "Add IN_PARTITIONED_SUBQUERY support", "committedDate": "2020-10-21T23:22:35Z", "type": "commit"}, {"oid": "b729442d2ef9cfc736254159b0227cd9014d214b", "url": "https://github.com/apache/pinot/commit/b729442d2ef9cfc736254159b0227cd9014d214b", "message": "Add IN_PARTITIONED_SUBQUERY support", "committedDate": "2020-10-21T23:22:35Z", "type": "forcePushed"}]}