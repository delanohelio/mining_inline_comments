{"pr_number": 4979, "pr_title": "Update quota manager to reduce zk access", "pr_createdAt": "2020-01-14T02:17:08Z", "pr_url": "https://github.com/apache/pinot/pull/4979", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMTUyNA==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366131524", "bodyText": "You may cache it at class level as a member variable", "author": "Jackie-Jiang", "createdAt": "2020-01-14T02:53:11Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -78,17 +81,18 @@ public void initTableQueryQuota(TableConfig tableConfig, ExternalView brokerReso\n     String tableNameWithType = tableConfig.getTableName();\n     String rawTableName = TableNameBuilder.extractRawTableName(tableNameWithType);\n     LOGGER.info(\"Initializing rate limiter for table {}\", tableNameWithType);\n+    ZkHelixPropertyStore<ZNRecord> propertyStore = _helixManager.getHelixPropertyStore();", "originalCommit": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6972473860cd915e0bc93e4e763ee963932131d", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex 9fbecf60e8..eb6997c855 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -81,7 +80,6 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n     String tableNameWithType = tableConfig.getTableName();\n     String rawTableName = TableNameBuilder.extractRawTableName(tableNameWithType);\n     LOGGER.info(\"Initializing rate limiter for table {}\", tableNameWithType);\n-    ZkHelixPropertyStore<ZNRecord> propertyStore = _helixManager.getHelixPropertyStore();\n \n     // Check whether qps quotas from both tables are the same.\n     QuotaConfig offlineQuotaConfig;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMjM0Ng==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366132346", "bodyText": "Could this message flood the log?", "author": "Jackie-Jiang", "createdAt": "2020-01-14T02:56:35Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +322,34 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n+      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (onlineBrokerCount == queryQuotaConfig.getNumOnlineBrokers() && stat.getVersion() == queryQuotaConfig\n+          .getTableConfigStatVersion()) {\n+        LOGGER.info(", "originalCommit": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNDMyOQ==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r367724329", "bodyText": "Removed.", "author": "jackjlli", "createdAt": "2020-01-17T00:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMjM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e6972473860cd915e0bc93e4e763ee963932131d", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex 9fbecf60e8..eb6997c855 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -323,33 +321,42 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n       // Get stat from property store\n-      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n-      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n-      if (onlineBrokerCount == queryQuotaConfig.getNumOnlineBrokers() && stat.getVersion() == queryQuotaConfig\n-          .getTableConfigStatVersion()) {\n-        LOGGER.info(\n-            \"Number of brokers remains the same. Table config remains the same. No need to update quota for Table {}.\",\n-            tableNameWithType);\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        it.remove();\n         continue;\n       }\n \n-      // Get latest quota config for table.\n-      QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(propertyStore, rawTableName, tableType);\n-      if (quotaConfig == null || quotaConfig.getMaxQueriesPerSecond() == null || !quotaConfig\n-          .isMaxQueriesPerSecondValid()) {\n-        LOGGER.info(\"No query quota config or the config is invalid for Table {}. Removing its rate limit.\",\n-            tableNameWithType);\n-        it.remove();\n+      // If number of online brokers and table config don't get changed, there is no need to re-calculate the dynamic rate.\n+      if (onlineBrokerCount == queryQuotaEntity.getNumOnlineBrokers() && stat.getVersion() == queryQuotaEntity\n+          .getTableConfigStatVersion()) {\n         continue;\n       }\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      double overallRate;\n+      // Get latest quota config only if stat don't match.\n+      if (stat.getVersion() != queryQuotaEntity.getTableConfigStatVersion()) {\n+        QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(rawTableName, tableType);\n+        if (quotaConfig == null || quotaConfig.getMaxQueriesPerSecond() == null || !quotaConfig\n+            .isMaxQueriesPerSecondValid()) {\n+          LOGGER.info(\"No query quota config or the config is invalid for Table {}. Removing its rate limit.\",\n+              tableNameWithType);\n+          it.remove();\n+          continue;\n+        }\n+        overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      } else {\n+        overallRate = queryQuotaEntity.getOverallRate();\n+      }\n       double latestRate = overallRate / onlineBrokerCount;\n-      double previousRate = queryQuotaConfig.getRateLimiter().getRate();\n+      double previousRate = queryQuotaEntity.getRateLimiter().getRate();\n       if (Math.abs(latestRate - previousRate) > 0.001) {\n-        queryQuotaConfig.getRateLimiter().setRate(latestRate);\n-        queryQuotaConfig.setNumOnlineBrokers(onlineBrokerCount);\n-        queryQuotaConfig.setTableConfigStatVersion(stat.getVersion());\n+        queryQuotaEntity.getRateLimiter().setRate(latestRate);\n+        queryQuotaEntity.setNumOnlineBrokers(onlineBrokerCount);\n+        queryQuotaEntity.setOverallRate(overallRate);\n+        queryQuotaEntity.setTableConfigStatVersion(stat.getVersion());\n         LOGGER.info(\n             \"Rate limiter for table: {} has been updated. Overall rate: {}. Previous per-broker rate: {}. New per-broker rate: {}. Number of online broker instances: {}\",\n             tableNameWithType, overallRate, previousRate, latestRate, onlineBrokerCount);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMzk3MQ==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366133971", "bodyText": "This might be null if table got deleted", "author": "Jackie-Jiang", "createdAt": "2020-01-14T03:05:41Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +322,34 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n+      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);", "originalCommit": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNDI4MQ==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r367724281", "bodyText": "Updated.", "author": "jackjlli", "createdAt": "2020-01-17T00:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMzk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e6972473860cd915e0bc93e4e763ee963932131d", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex 9fbecf60e8..eb6997c855 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -323,33 +321,42 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n       // Get stat from property store\n-      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n-      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n-      if (onlineBrokerCount == queryQuotaConfig.getNumOnlineBrokers() && stat.getVersion() == queryQuotaConfig\n-          .getTableConfigStatVersion()) {\n-        LOGGER.info(\n-            \"Number of brokers remains the same. Table config remains the same. No need to update quota for Table {}.\",\n-            tableNameWithType);\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        it.remove();\n         continue;\n       }\n \n-      // Get latest quota config for table.\n-      QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(propertyStore, rawTableName, tableType);\n-      if (quotaConfig == null || quotaConfig.getMaxQueriesPerSecond() == null || !quotaConfig\n-          .isMaxQueriesPerSecondValid()) {\n-        LOGGER.info(\"No query quota config or the config is invalid for Table {}. Removing its rate limit.\",\n-            tableNameWithType);\n-        it.remove();\n+      // If number of online brokers and table config don't get changed, there is no need to re-calculate the dynamic rate.\n+      if (onlineBrokerCount == queryQuotaEntity.getNumOnlineBrokers() && stat.getVersion() == queryQuotaEntity\n+          .getTableConfigStatVersion()) {\n         continue;\n       }\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      double overallRate;\n+      // Get latest quota config only if stat don't match.\n+      if (stat.getVersion() != queryQuotaEntity.getTableConfigStatVersion()) {\n+        QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(rawTableName, tableType);\n+        if (quotaConfig == null || quotaConfig.getMaxQueriesPerSecond() == null || !quotaConfig\n+            .isMaxQueriesPerSecondValid()) {\n+          LOGGER.info(\"No query quota config or the config is invalid for Table {}. Removing its rate limit.\",\n+              tableNameWithType);\n+          it.remove();\n+          continue;\n+        }\n+        overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      } else {\n+        overallRate = queryQuotaEntity.getOverallRate();\n+      }\n       double latestRate = overallRate / onlineBrokerCount;\n-      double previousRate = queryQuotaConfig.getRateLimiter().getRate();\n+      double previousRate = queryQuotaEntity.getRateLimiter().getRate();\n       if (Math.abs(latestRate - previousRate) > 0.001) {\n-        queryQuotaConfig.getRateLimiter().setRate(latestRate);\n-        queryQuotaConfig.setNumOnlineBrokers(onlineBrokerCount);\n-        queryQuotaConfig.setTableConfigStatVersion(stat.getVersion());\n+        queryQuotaEntity.getRateLimiter().setRate(latestRate);\n+        queryQuotaEntity.setNumOnlineBrokers(onlineBrokerCount);\n+        queryQuotaEntity.setOverallRate(overallRate);\n+        queryQuotaEntity.setTableConfigStatVersion(stat.getVersion());\n         LOGGER.info(\n             \"Rate limiter for table: {} has been updated. Overall rate: {}. Previous per-broker rate: {}. New per-broker rate: {}. Number of online broker instances: {}\",\n             tableNameWithType, overallRate, previousRate, latestRate, onlineBrokerCount);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzNDE4OA==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366134188", "bodyText": "You don't need to fetch a new quota config if version matches but numOnlineBrokers changed", "author": "Jackie-Jiang", "createdAt": "2020-01-14T03:06:56Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +322,34 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n+      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (onlineBrokerCount == queryQuotaConfig.getNumOnlineBrokers() && stat.getVersion() == queryQuotaConfig\n+          .getTableConfigStatVersion()) {\n+        LOGGER.info(\n+            \"Number of brokers remains the same. Table config remains the same. No need to update quota for Table {}.\",\n+            tableNameWithType);\n+        continue;\n+      }\n+\n+      // Get latest quota config for table.\n+      QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(propertyStore, rawTableName, tableType);", "originalCommit": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNDIyMQ==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r367724221", "bodyText": "Good idea. \ud83d\udc4d Done.", "author": "jackjlli", "createdAt": "2020-01-17T00:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzNDE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "e6972473860cd915e0bc93e4e763ee963932131d", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex 9fbecf60e8..eb6997c855 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -323,33 +321,42 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n       // Get stat from property store\n-      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n-      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n-      if (onlineBrokerCount == queryQuotaConfig.getNumOnlineBrokers() && stat.getVersion() == queryQuotaConfig\n-          .getTableConfigStatVersion()) {\n-        LOGGER.info(\n-            \"Number of brokers remains the same. Table config remains the same. No need to update quota for Table {}.\",\n-            tableNameWithType);\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        it.remove();\n         continue;\n       }\n \n-      // Get latest quota config for table.\n-      QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(propertyStore, rawTableName, tableType);\n-      if (quotaConfig == null || quotaConfig.getMaxQueriesPerSecond() == null || !quotaConfig\n-          .isMaxQueriesPerSecondValid()) {\n-        LOGGER.info(\"No query quota config or the config is invalid for Table {}. Removing its rate limit.\",\n-            tableNameWithType);\n-        it.remove();\n+      // If number of online brokers and table config don't get changed, there is no need to re-calculate the dynamic rate.\n+      if (onlineBrokerCount == queryQuotaEntity.getNumOnlineBrokers() && stat.getVersion() == queryQuotaEntity\n+          .getTableConfigStatVersion()) {\n         continue;\n       }\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      double overallRate;\n+      // Get latest quota config only if stat don't match.\n+      if (stat.getVersion() != queryQuotaEntity.getTableConfigStatVersion()) {\n+        QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(rawTableName, tableType);\n+        if (quotaConfig == null || quotaConfig.getMaxQueriesPerSecond() == null || !quotaConfig\n+            .isMaxQueriesPerSecondValid()) {\n+          LOGGER.info(\"No query quota config or the config is invalid for Table {}. Removing its rate limit.\",\n+              tableNameWithType);\n+          it.remove();\n+          continue;\n+        }\n+        overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      } else {\n+        overallRate = queryQuotaEntity.getOverallRate();\n+      }\n       double latestRate = overallRate / onlineBrokerCount;\n-      double previousRate = queryQuotaConfig.getRateLimiter().getRate();\n+      double previousRate = queryQuotaEntity.getRateLimiter().getRate();\n       if (Math.abs(latestRate - previousRate) > 0.001) {\n-        queryQuotaConfig.getRateLimiter().setRate(latestRate);\n-        queryQuotaConfig.setNumOnlineBrokers(onlineBrokerCount);\n-        queryQuotaConfig.setTableConfigStatVersion(stat.getVersion());\n+        queryQuotaEntity.getRateLimiter().setRate(latestRate);\n+        queryQuotaEntity.setNumOnlineBrokers(onlineBrokerCount);\n+        queryQuotaEntity.setOverallRate(overallRate);\n+        queryQuotaEntity.setTableConfigStatVersion(stat.getVersion());\n         LOGGER.info(\n             \"Rate limiter for table: {} has been updated. Overall rate: {}. Previous per-broker rate: {}. New per-broker rate: {}. Number of online broker instances: {}\",\n             tableNameWithType, overallRate, previousRate, latestRate, onlineBrokerCount);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzNDM4Ng==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366134386", "bodyText": "(nit) remove the nonnull annotation", "author": "Jackie-Jiang", "createdAt": "2020-01-14T03:08:24Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaConfig.java", "diffHunk": "@@ -20,16 +20,21 @@\n \n import com.google.common.util.concurrent.RateLimiter;\n import javax.annotation.Nonnull;\n+import org.apache.pinot.common.utils.CommonConstants;\n \n \n public class QueryQuotaConfig {\n \n   private RateLimiter _rateLimiter;\n   private HitCounter _hitCounter;\n+  private int _numOnlineBrokers;\n+  private int _tableConfigStatVersion;\n \n-  public QueryQuotaConfig(@Nonnull RateLimiter rateLimiter, @Nonnull HitCounter hitCounter) {\n+  public QueryQuotaConfig(@Nonnull RateLimiter rateLimiter, @Nonnull HitCounter hitCounter, @Nonnull int numOnlineBrokers, @Nonnull int tableConfigStatVersion) {", "originalCommit": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNDE2OA==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r367724168", "bodyText": "Done.", "author": "jackjlli", "createdAt": "2020-01-17T00:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzNDM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e6972473860cd915e0bc93e4e763ee963932131d", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaConfig.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaEntity.java\nsimilarity index 81%\nrename from pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaConfig.java\nrename to pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaEntity.java\nindex e3b1401718..40a2c967ae 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaConfig.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaEntity.java\n\n@@ -19,21 +19,22 @@\n package org.apache.pinot.broker.queryquota;\n \n import com.google.common.util.concurrent.RateLimiter;\n-import javax.annotation.Nonnull;\n-import org.apache.pinot.common.utils.CommonConstants;\n \n \n-public class QueryQuotaConfig {\n+public class QueryQuotaEntity {\n \n   private RateLimiter _rateLimiter;\n   private HitCounter _hitCounter;\n   private int _numOnlineBrokers;\n+  private double _overallRate;\n   private int _tableConfigStatVersion;\n \n-  public QueryQuotaConfig(@Nonnull RateLimiter rateLimiter, @Nonnull HitCounter hitCounter, @Nonnull int numOnlineBrokers, @Nonnull int tableConfigStatVersion) {\n+  public QueryQuotaEntity(RateLimiter rateLimiter, HitCounter hitCounter, int numOnlineBrokers, double overallRate,\n+      int tableConfigStatVersion) {\n     _rateLimiter = rateLimiter;\n     _hitCounter = hitCounter;\n     _numOnlineBrokers = numOnlineBrokers;\n+    _overallRate = overallRate;\n     _tableConfigStatVersion = tableConfigStatVersion;\n   }\n \n"}}, {"oid": "e22b6091a11950b5b0122e536c64e8451793a07b", "url": "https://github.com/apache/pinot/commit/e22b6091a11950b5b0122e536c64e8451793a07b", "message": "Update quota manager to reduce zk access", "committedDate": "2020-01-17T00:24:26Z", "type": "commit"}, {"oid": "e6972473860cd915e0bc93e4e763ee963932131d", "url": "https://github.com/apache/pinot/commit/e6972473860cd915e0bc93e4e763ee963932131d", "message": "Address PR comments", "committedDate": "2020-01-17T00:55:24Z", "type": "forcePushed"}, {"oid": "8e4ab63c585078a656dcdc3071fc5604c8f1181f", "url": "https://github.com/apache/pinot/commit/8e4ab63c585078a656dcdc3071fc5604c8f1181f", "message": "Address PR comments", "committedDate": "2020-01-17T01:04:17Z", "type": "forcePushed"}, {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d", "url": "https://github.com/apache/pinot/commit/003d35ce828f1025a805704e3faf0d44bacbca1d", "message": "Address PR comments", "committedDate": "2020-01-17T01:31:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyODQ5NA==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368328494", "bodyText": "I remember some discussions from before that the property store handle is stale if helix loses zk connection. Has that assumption changed (or is my recollection wrong)? Helix code seems to be resetting the handle on disconnect() as well.", "author": "mcvsubbu", "createdAt": "2020-01-19T22:33:59Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -122,15 +133,11 @@ private void removeRateLimiter(String tableNameWithType) {\n \n   /**\n    * Get QuotaConfig from property store.\n-   * @param rawTableName table name without table type.\n-   * @param tableType table type: offline or real-time.\n+   * @param tableNameWithType table name with table type.\n    * @return QuotaConfig, which could be null.\n    */\n-  private QuotaConfig getQuotaConfigFromPropertyStore(String rawTableName, CommonConstants.Helix.TableType tableType) {\n-    ZkHelixPropertyStore<ZNRecord> propertyStore = _helixManager.getHelixPropertyStore();\n-\n-    String tableNameWithType = TableNameBuilder.forType(tableType).tableNameWithType(rawTableName);\n-    TableConfig tableConfig = ZKMetadataProvider.getTableConfig(propertyStore, tableNameWithType);\n+  private QuotaConfig getQuotaConfigFromPropertyStore(String tableNameWithType) {\n+    TableConfig tableConfig = ZKMetadataProvider.getTableConfig(_propertyStore, tableNameWithType);", "originalCommit": "003d35ce828f1025a805704e3faf0d44bacbca1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NDMwNQ==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r369154305", "bodyText": "Even when the zk connection is lost, some exceptions will be thrown. In that case, nothing change in this class. So it'd be fine here.", "author": "jackjlli", "createdAt": "2020-01-21T17:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyODQ5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyODY4OA==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368328688", "bodyText": "Add the version to the log line below", "author": "mcvsubbu", "createdAt": "2020-01-19T22:37:22Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -180,10 +187,15 @@ private void createRateLimiter(String tableNameWithType, ExternalView brokerReso\n       return;\n     }\n \n+    // Get stat from property store\n+    String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+    Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+\n     double perBrokerRate = overallRate / onlineCount;\n-    QueryQuotaConfig queryQuotaConfig =\n-        new QueryQuotaConfig(RateLimiter.create(perBrokerRate), new HitCounter(TIME_RANGE_IN_SECOND));\n-    _rateLimiterMap.put(tableNameWithType, queryQuotaConfig);\n+    QueryQuotaEntity queryQuotaEntity =\n+        new QueryQuotaEntity(RateLimiter.create(perBrokerRate), new HitCounter(TIME_RANGE_IN_SECOND), onlineCount,\n+            overallRate, stat.getVersion());\n+    _rateLimiterMap.put(tableNameWithType, queryQuotaEntity);", "originalCommit": "003d35ce828f1025a805704e3faf0d44bacbca1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d7b62294cb5ad855f12eb710a8f756223387662", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex b0306ed301..02619145f8 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -197,8 +197,8 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n             overallRate, stat.getVersion());\n     _rateLimiterMap.put(tableNameWithType, queryQuotaEntity);\n     LOGGER.info(\n-        \"Rate limiter for table: {} has been initialized. Overall rate: {}. Per-broker rate: {}. Number of online broker instances: {}\",\n-        tableNameWithType, overallRate, perBrokerRate, onlineCount);\n+        \"Rate limiter for table: {} has been initialized. Overall rate: {}. Per-broker rate: {}. Number of online broker instances: {}. Table config stat version: {}\",\n+        tableNameWithType, overallRate, perBrokerRate, onlineCount, stat.getVersion());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyODk5Ng==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368328996", "bodyText": "suggest rename currentBrokerResource to brokerResourceEV", "author": "mcvsubbu", "createdAt": "2020-01-19T22:41:57Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -39,34 +41,43 @@\n import org.apache.pinot.common.metrics.BrokerMetrics;\n import org.apache.pinot.common.utils.CommonConstants;\n import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.apache.pinot.common.utils.CommonConstants.Helix.BROKER_RESOURCE_INSTANCE;\n-import static org.apache.pinot.common.utils.CommonConstants.Helix.TableType;\n-\n \n+/**\n+ * This class is to support the qps quota feature.\n+ * It depends on the broker source change to update the dynamic rate limit,\n+ *  which means it only gets updated when a new table added or a broker restarted.\n+ * TODO: support adding new rate limiter for existing tables without restarting the broker.\n+ */\n public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHandler, QueryQuotaManager {\n   private static final Logger LOGGER = LoggerFactory.getLogger(HelixExternalViewBasedQueryQuotaManager.class);\n   private static final int TIME_RANGE_IN_SECOND = 1;\n \n   private final AtomicInteger _lastKnownBrokerResourceVersion = new AtomicInteger(-1);\n-  private final Map<String, QueryQuotaConfig> _rateLimiterMap = new ConcurrentHashMap<>();\n+  private final Map<String, QueryQuotaEntity> _rateLimiterMap = new ConcurrentHashMap<>();\n \n   private HelixManager _helixManager;\n+  private ZkHelixPropertyStore<ZNRecord> _propertyStore;\n   private BrokerMetrics _brokerMetrics;\n \n   @Override\n   public void init(HelixManager helixManager) {\n     Preconditions.checkState(_helixManager == null, \"HelixExternalViewBasedQueryQuotaManager is already initialized\");\n     _helixManager = helixManager;\n+    _propertyStore = _helixManager.getHelixPropertyStore();\n   }\n \n   @Override\n   public void processClusterChange(HelixConstants.ChangeType changeType) {\n     Preconditions\n         .checkState(changeType == HelixConstants.ChangeType.EXTERNAL_VIEW, \"Illegal change type: \" + changeType);\n-    processQueryQuotaChange();\n+    ExternalView currentBrokerResource = HelixHelper", "originalCommit": "003d35ce828f1025a805704e3faf0d44bacbca1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d7b62294cb5ad855f12eb710a8f756223387662", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex b0306ed301..02619145f8 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -74,10 +74,10 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n   public void processClusterChange(HelixConstants.ChangeType changeType) {\n     Preconditions\n         .checkState(changeType == HelixConstants.ChangeType.EXTERNAL_VIEW, \"Illegal change type: \" + changeType);\n-    ExternalView currentBrokerResource = HelixHelper\n+    ExternalView brokerResourceEV = HelixHelper\n         .getExternalViewForResource(_helixManager.getClusterManagmentTool(), _helixManager.getClusterName(),\n             CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);\n-    processQueryQuotaChange(currentBrokerResource);\n+    processQueryQuotaChange(brokerResourceEV);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyOTM3Nw==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368329377", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n          \n          \n            \n                    LOGGER.info(\"Table {} has been deleted from property store. Removing its rate limit.\", tableNameWithType);", "author": "mcvsubbu", "createdAt": "2020-01-19T22:47:10Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +321,43 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);", "originalCommit": "003d35ce828f1025a805704e3faf0d44bacbca1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d7b62294cb5ad855f12eb710a8f756223387662", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex b0306ed301..02619145f8 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -325,7 +325,7 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n       String tableConfigPath = constructTableConfigPath(tableNameWithType);\n       Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n       if (stat == null) {\n-        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        LOGGER.info(\"Table {} has been deleted from property store. Removing its rate limit.\", tableNameWithType);\n         it.remove();\n         continue;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyOTYzNw==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368329637", "bodyText": "It may be useful to add a log line here with the version", "author": "mcvsubbu", "createdAt": "2020-01-19T22:50:52Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +321,43 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        it.remove();\n+        continue;\n+      }\n+\n+      // If number of online brokers and table config don't change, there is no need to re-calculate the dynamic rate.\n+      if (onlineBrokerCount == queryQuotaEntity.getNumOnlineBrokers() && stat.getVersion() == queryQuotaEntity\n+          .getTableConfigStatVersion()) {\n+        continue;", "originalCommit": "003d35ce828f1025a805704e3faf0d44bacbca1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTk3Mg==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368771972", "bodyText": "It'll flush the log as there might be a lot of tables having qps quotas and their dynamic rate limiters don't need to be changed.", "author": "jackjlli", "createdAt": "2020-01-21T01:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyOTYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "3d7b62294cb5ad855f12eb710a8f756223387662", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex b0306ed301..02619145f8 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -325,7 +325,7 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n       String tableConfigPath = constructTableConfigPath(tableNameWithType);\n       Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n       if (stat == null) {\n-        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        LOGGER.info(\"Table {} has been deleted from property store. Removing its rate limit.\", tableNameWithType);\n         it.remove();\n         continue;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMzMDA5Mg==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368330092", "bodyText": "Even if we don't update the rate due to small difference, should we not update the tableConfigStatVersion?", "author": "mcvsubbu", "createdAt": "2020-01-19T22:56:00Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +321,43 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        it.remove();\n+        continue;\n+      }\n+\n+      // If number of online brokers and table config don't change, there is no need to re-calculate the dynamic rate.\n+      if (onlineBrokerCount == queryQuotaEntity.getNumOnlineBrokers() && stat.getVersion() == queryQuotaEntity\n+          .getTableConfigStatVersion()) {\n+        continue;\n+      }\n+\n+      double overallRate;\n+      // Get latest quota config only if stat don't match.\n+      if (stat.getVersion() != queryQuotaEntity.getTableConfigStatVersion()) {\n+        QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(tableNameWithType);\n+        if (quotaConfig == null || quotaConfig.getMaxQueriesPerSecond() == null || !quotaConfig\n+            .isMaxQueriesPerSecondValid()) {\n+          LOGGER.info(\"No query quota config or the config is invalid for Table {}. Removing its rate limit.\",\n+              tableNameWithType);\n+          it.remove();\n+          continue;\n+        }\n+        overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      } else {\n+        overallRate = queryQuotaEntity.getOverallRate();\n+      }\n       double latestRate = overallRate / onlineBrokerCount;\n-      double previousRate = queryQuotaConfig.getRateLimiter().getRate();\n+      double previousRate = queryQuotaEntity.getRateLimiter().getRate();\n       if (Math.abs(latestRate - previousRate) > 0.001) {\n-        queryQuotaConfig.getRateLimiter().setRate(latestRate);\n+        queryQuotaEntity.getRateLimiter().setRate(latestRate);\n+        queryQuotaEntity.setNumOnlineBrokers(onlineBrokerCount);\n+        queryQuotaEntity.setOverallRate(overallRate);\n+        queryQuotaEntity.setTableConfigStatVersion(stat.getVersion());", "originalCommit": "003d35ce828f1025a805704e3faf0d44bacbca1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MzUyNA==", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368773524", "bodyText": "Table config change won't trigger qps limiter change. Only when there's a broker resource change should this method be triggered, i.e. when broker resource change happens triggered by either broker online/offline or new table added, this method will check the stat and update the stat version. There is no need to keep the stat version update all the time, because there's no listener on table configs, nor it isn't a good idea to have a table config listener.", "author": "jackjlli", "createdAt": "2020-01-21T01:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMzMDA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3d7b62294cb5ad855f12eb710a8f756223387662", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\nindex b0306ed301..02619145f8 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java\n\n@@ -325,7 +325,7 @@ public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHan\n       String tableConfigPath = constructTableConfigPath(tableNameWithType);\n       Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n       if (stat == null) {\n-        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        LOGGER.info(\"Table {} has been deleted from property store. Removing its rate limit.\", tableNameWithType);\n         it.remove();\n         continue;\n       }\n"}}, {"oid": "3d7b62294cb5ad855f12eb710a8f756223387662", "url": "https://github.com/apache/pinot/commit/3d7b62294cb5ad855f12eb710a8f756223387662", "message": "Address PR comments", "committedDate": "2020-01-21T01:24:08Z", "type": "commit"}, {"oid": "3d7b62294cb5ad855f12eb710a8f756223387662", "url": "https://github.com/apache/pinot/commit/3d7b62294cb5ad855f12eb710a8f756223387662", "message": "Address PR comments", "committedDate": "2020-01-21T01:24:08Z", "type": "forcePushed"}]}