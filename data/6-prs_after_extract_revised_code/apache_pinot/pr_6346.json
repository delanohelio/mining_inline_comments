{"pr_number": 6346, "pr_title": "Introduce DimensionTableDataManager", "pr_createdAt": "2020-12-11T05:42:22Z", "pr_url": "https://github.com/apache/pinot/pull/6346", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2MjY4Mg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542962682", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private DimensionTableDataManager() {}\n          \n          \n            \n              private DimensionTableDataManager() {\n          \n          \n            \n              }", "author": "Jackie-Jiang", "createdAt": "2020-12-15T00:56:23Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2Mjg2MA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542962860", "bodyText": "For clarity\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n          \n          \n            \n              public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {", "author": "Jackie-Jiang", "createdAt": "2020-12-15T00:56:49Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MDM0MA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543770340", "bodyText": "Done", "author": "cbalci", "createdAt": "2020-12-15T23:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2Mjg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2Mjk4Mw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542962983", "bodyText": "For clarity\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static DimensionTableDataManager getInstanceByTableName(String tableName) {\n          \n          \n            \n              public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {", "author": "Jackie-Jiang", "createdAt": "2020-12-15T00:57:06Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableName) {", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MTU5MQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543771591", "bodyText": "Done", "author": "cbalci", "createdAt": "2020-12-15T23:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2Mjk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NDE4OQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542964189", "bodyText": "Always create a new one instead of reusing the existing one (there should be no existing one normally)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n          \n          \n            \n                return _instances.get(tableName);\n          \n          \n            \n                DimensionTableDataManager instance = new DimensionTableDataManager();\n          \n          \n            \n                _instances.put(tableNameWithType, instance);\n          \n          \n            \n                return instance;", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:00:10Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5Njc5NA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543796794", "bodyText": "Updated as suggested, however now this method is technically non thread-safe. It doesn't look like this method will ever be called from multiple threads, but let me know if you think this is something we should address.", "author": "cbalci", "createdAt": "2020-12-16T00:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgwMDI5OA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543800298", "bodyText": "It is still thread-safe unless multiple threads are trying to get the instance for the same table. But to be completely thread-safe, you may use:\nreturn _instances.computeIfAbsent(tableName, k -> new DimensionTableDataManager());\nThe difference is that this method won't always create a new instance of the data manager.", "author": "Jackie-Jiang", "createdAt": "2020-12-16T01:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAzMzA2Mg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544033062", "bodyText": "Hmm, this is actually what I wanted to do with putIfAbsent. computeIfAbsent seems more succinct anyways, updating accordingly. \ud83d\udc4d", "author": "cbalci", "createdAt": "2020-12-16T06:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NDE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NTc4Nw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542965787", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  _logger.info(\"Successfully loaded lookup table for {}\", getTableName());\n          \n          \n            \n                  _logger.info(\"Successfully loaded lookup table: {}\", getTableName());", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:04:20Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableName) {\n+    return _instances.get(tableName);\n+  }\n+\n+  /*\n+   * DimensionTableDataManager Instance Properties/Methods\n+   */\n+\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table for {}\", getTableName());", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MDQzNw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543770437", "bodyText": "Done", "author": "cbalci", "createdAt": "2020-12-15T23:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NTc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NjUxNg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542966516", "bodyText": "(nit) reformat", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:06:06Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableName) {\n+    return _instances.get(tableName);\n+  }\n+\n+  /*\n+   * DimensionTableDataManager Instance Properties/Methods\n+   */\n+\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error loading lookup table: %s\", getTableName()),e);", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MDU3OA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543770578", "bodyText": "Done", "author": "cbalci", "createdAt": "2020-12-15T23:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NjUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NjY1OA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542966658", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  _logger.info(\"Successfully removed segment and reloaded lookup table for {}\", getTableName());\n          \n          \n            \n                  _logger.info(\"Successfully removed segment and reloaded lookup table: {}\", getTableName());", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:06:26Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableName) {\n+    return _instances.get(tableName);\n+  }\n+\n+  /*\n+   * DimensionTableDataManager Instance Properties/Methods\n+   */\n+\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error loading lookup table: %s\", getTableName()),e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table for {}\", getTableName());", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MDYzOA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543770638", "bodyText": "Done", "author": "cbalci", "createdAt": "2020-12-15T23:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NjY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2Njg4Mg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542966882", "bodyText": "Wrap it into a RuntimeException and throw it", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:07:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableName) {\n+    return _instances.get(tableName);\n+  }\n+\n+  /*\n+   * DimensionTableDataManager Instance Properties/Methods\n+   */\n+\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error loading lookup table: %s\", getTableName()),e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      _logger.error(\"Error reloading lookup table after segment remove for table {}\", getTableName());", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MDcxOA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543770718", "bodyText": "Done", "author": "cbalci", "createdAt": "2020-12-15T23:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2Njg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTIyNg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542971226", "bodyText": "To simplify the logic, clear the lookup table first, then load it", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:18:28Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableName) {\n+    return _instances.get(tableName);\n+  }\n+\n+  /*\n+   * DimensionTableDataManager Instance Properties/Methods\n+   */\n+\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error loading lookup table: %s\", getTableName()),e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      _logger.error(\"Error reloading lookup table after segment remove for table {}\", getTableName());\n+    }\n+  }\n+\n+  /*\n+   * `loadLookupTable()` reads contents of the DimensionTable into _lookupTable HashMap for fast lookup.\n+   */\n+  private void loadLookupTable() throws Exception {\n+    _lookupTableWriteLock.lock();\n+    try {", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MDE2Nw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543770167", "bodyText": "Applied your suggestion, however I think the older way was safer in the case where loading of the segment is interrupted with an exception in segment reader. Now, if an exception happens, older content is lost. Let me know if you think this is some edge case worth thinking about.", "author": "cbalci", "createdAt": "2020-12-15T23:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5ODAyMQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543798021", "bodyText": "I think it is the same as the loading happens after you clear the map even in the old code. If it throws exception, segment will get into ERROR state, and we'll have to wait until the next segment triggers this method again.", "author": "Jackie-Jiang", "createdAt": "2020-12-16T00:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAzNDk5NQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544034995", "bodyText": "Agreed that the previous approach doesn't save a lot either. Leaving as is, thanks.", "author": "cbalci", "createdAt": "2020-12-16T06:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTI5Nw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542971297", "bodyText": "Remove", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:18:39Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableName) {\n+    return _instances.get(tableName);\n+  }\n+\n+  /*\n+   * DimensionTableDataManager Instance Properties/Methods\n+   */\n+\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error loading lookup table: %s\", getTableName()),e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      _logger.error(\"Error reloading lookup table after segment remove for table {}\", getTableName());\n+    }\n+  }\n+\n+  /*\n+   * `loadLookupTable()` reads contents of the DimensionTable into _lookupTable HashMap for fast lookup.\n+   */\n+  private void loadLookupTable() throws Exception {\n+    _lookupTableWriteLock.lock();\n+    try {\n+      List<SegmentDataManager> segmentManagers = acquireAllSegments();\n+      if (segmentManagers.size() == 0) {\n+        _lookupTable.clear();\n+        return;\n+      }\n+\n+      List<File> indexDirs = new ArrayList<>();\n+      for (SegmentDataManager segmentManager: segmentManagers) {\n+        IndexSegment indexSegment = segmentManager.getSegment();\n+        System.out.println(indexSegment.getSegmentName());", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MDgyNw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543770827", "bodyText": "\ud83d\udc4d", "author": "cbalci", "createdAt": "2020-12-15T23:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTY5Nw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542971697", "bodyText": "No need to use MultiplePinotSegmentRecordReader here, use PinotSegmentRecordReader instead on each segment. Use try-with-resource to close the reader after the reading", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:19:46Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {}\n+\n+  public static DimensionTableDataManager createInstanceByTableName(String tableName) {\n+    _instances.putIfAbsent(tableName, new DimensionTableDataManager());\n+    return _instances.get(tableName);\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableName) {\n+    return _instances.get(tableName);\n+  }\n+\n+  /*\n+   * DimensionTableDataManager Instance Properties/Methods\n+   */\n+\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error loading lookup table: %s\", getTableName()),e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table for {}\", getTableName());\n+    } catch (Exception e) {\n+      _logger.error(\"Error reloading lookup table after segment remove for table {}\", getTableName());\n+    }\n+  }\n+\n+  /*\n+   * `loadLookupTable()` reads contents of the DimensionTable into _lookupTable HashMap for fast lookup.\n+   */\n+  private void loadLookupTable() throws Exception {\n+    _lookupTableWriteLock.lock();\n+    try {\n+      List<SegmentDataManager> segmentManagers = acquireAllSegments();\n+      if (segmentManagers.size() == 0) {\n+        _lookupTable.clear();\n+        return;\n+      }\n+\n+      List<File> indexDirs = new ArrayList<>();\n+      for (SegmentDataManager segmentManager: segmentManagers) {\n+        IndexSegment indexSegment = segmentManager.getSegment();\n+        System.out.println(indexSegment.getSegmentName());\n+        indexDirs.add(indexSegment.getSegmentMetadata().getIndexDir());\n+      }\n+      MultiplePinotSegmentRecordReader reader = new MultiplePinotSegmentRecordReader(indexDirs);", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MTI2OQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543771269", "bodyText": "Good suggestion, ended up cleaning the code a bit, thanks.", "author": "cbalci", "createdAt": "2020-12-15T23:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex c2a88d5acd..9ae47d370d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjAzNg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542972036", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @BeforeSuite\n          \n          \n            \n              @BeforeClass", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:20:33Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.yammer.metrics.core.MetricsRegistry;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.metrics.ServerMetrics;\n+import org.apache.pinot.common.segment.ReadMode;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.manager.config.TableDataManagerConfig;\n+import org.apache.pinot.core.indexsegment.generator.SegmentGeneratorConfig;\n+import org.apache.pinot.core.indexsegment.generator.SegmentVersion;\n+import org.apache.pinot.core.segment.creator.SegmentIndexCreationDriver;\n+import org.apache.pinot.core.segment.creator.impl.SegmentCreationDriverFactory;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.core.segment.index.loader.LoaderTest;\n+import org.apache.pinot.segments.v1.creator.SegmentTestUtils;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterSuite;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import static org.mockito.Mockito.*;\n+\n+\n+public class DimensionTableDataManagerTest {\n+  private static final String TABLE_NAME = \"dimBaseballTeams\";\n+  private static final File INDEX_DIR = new File(LoaderTest.class.getName());\n+  private static final String AVRO_DATA_PATH = \"data/dimBaseballTeams.avro\";\n+\n+  private File _indexDir;\n+  private IndexLoadingConfig _indexLoadingConfig;\n+\n+  @BeforeSuite", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MTM2OA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543771368", "bodyText": "Done", "author": "cbalci", "createdAt": "2020-12-15T23:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java\nindex b3e2889b10..76e4a71600 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java\n\n@@ -42,8 +42,8 @@ import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.readers.GenericRow;\n import org.apache.pinot.spi.data.readers.PrimaryKey;\n import org.testng.Assert;\n-import org.testng.annotations.AfterSuite;\n-import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import static org.mockito.Mockito.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjA4MQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r542972081", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @AfterSuite\n          \n          \n            \n              @AfterClass", "author": "Jackie-Jiang", "createdAt": "2020-12-15T01:20:42Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.yammer.metrics.core.MetricsRegistry;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.metrics.ServerMetrics;\n+import org.apache.pinot.common.segment.ReadMode;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.manager.config.TableDataManagerConfig;\n+import org.apache.pinot.core.indexsegment.generator.SegmentGeneratorConfig;\n+import org.apache.pinot.core.indexsegment.generator.SegmentVersion;\n+import org.apache.pinot.core.segment.creator.SegmentIndexCreationDriver;\n+import org.apache.pinot.core.segment.creator.impl.SegmentCreationDriverFactory;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.core.segment.index.loader.LoaderTest;\n+import org.apache.pinot.segments.v1.creator.SegmentTestUtils;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterSuite;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import static org.mockito.Mockito.*;\n+\n+\n+public class DimensionTableDataManagerTest {\n+  private static final String TABLE_NAME = \"dimBaseballTeams\";\n+  private static final File INDEX_DIR = new File(LoaderTest.class.getName());\n+  private static final String AVRO_DATA_PATH = \"data/dimBaseballTeams.avro\";\n+\n+  private File _indexDir;\n+  private IndexLoadingConfig _indexLoadingConfig;\n+\n+  @BeforeSuite\n+  public void setUp()\n+      throws Exception {\n+    // prepare segment data\n+    URL resourceUrl = getClass().getClassLoader().getResource(AVRO_DATA_PATH);\n+    Assert.assertNotNull(resourceUrl);\n+    File avroFile = new File(resourceUrl.getFile());\n+\n+    // create segment\n+    SegmentGeneratorConfig segmentGeneratorConfig =\n+        SegmentTestUtils.getSegmentGeneratorConfigWithoutTimeColumn(avroFile, INDEX_DIR, TABLE_NAME);\n+    segmentGeneratorConfig.setSegmentVersion(SegmentVersion.v3);\n+    SegmentIndexCreationDriver driver = SegmentCreationDriverFactory.get(null);\n+    driver.init(segmentGeneratorConfig);\n+    driver.build();\n+    _indexDir = new File(INDEX_DIR, driver.getSegmentName());\n+\n+    _indexLoadingConfig = new IndexLoadingConfig();\n+    _indexLoadingConfig.setReadMode(ReadMode.mmap);\n+    _indexLoadingConfig.setSegmentVersion(SegmentVersion.v3);\n+  }\n+\n+  @AfterSuite", "originalCommit": "bab13425162cdf0ae15230c6c2b11f627ce6374c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MTM1Ng==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543771356", "bodyText": "Done", "author": "cbalci", "createdAt": "2020-12-15T23:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "620d311ec62a15ab26bf8a3833482a99b29a8263", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java\nindex b3e2889b10..76e4a71600 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManagerTest.java\n\n@@ -42,8 +42,8 @@ import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.readers.GenericRow;\n import org.apache.pinot.spi.data.readers.PrimaryKey;\n import org.testng.Assert;\n-import org.testng.annotations.AfterSuite;\n-import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import static org.mockito.Mockito.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3ODgzMA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543778830", "bodyText": "Use @link to reference classes and methods. The nice thing is that IDE can help you track it and refactor it.", "author": "yupeng9", "createdAt": "2020-12-16T00:07:56Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /*\n+   * `createInstanceByTableName` should only be used by the `TableDataManagerProvider` and the returned instance", "originalCommit": "a94ab18b974e810d50c4ff9ab20c2be9cde30f5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5MjEyOA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543792128", "bodyText": "Updated, thanks for the tip!", "author": "cbalci", "createdAt": "2020-12-16T00:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3ODgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 9ae47d370d..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3ODk2MA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543778960", "bodyText": "extra line", "author": "yupeng9", "createdAt": "2020-12-16T00:08:20Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via `getInstanceByTableName` static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /*\n+   * `createInstanceByTableName` should only be used by the `TableDataManagerProvider` and the returned instance\n+   * should be properly initialized via `TableDataManager::init` method before using.\n+   */\n+  public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {\n+    DimensionTableDataManager instance = new DimensionTableDataManager();\n+    _instances.put(tableNameWithType, instance);\n+    return instance;\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {\n+    return _instances.get(tableNameWithType);\n+  }\n+\n+  /*\n+   * DimensionTableDataManager Instance Properties/Methods\n+   */\n+", "originalCommit": "a94ab18b974e810d50c4ff9ab20c2be9cde30f5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5MjIyMw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543792223", "bodyText": "Cleaned", "author": "cbalci", "createdAt": "2020-12-16T00:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3ODk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 9ae47d370d..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -33,7 +33,7 @@ import javax.annotation.concurrent.ThreadSafe;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.core.data.manager.SegmentDataManager;\n-import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.data.readers.MultiplePinotSegmentRecordReader;\n import org.apache.pinot.core.indexsegment.IndexSegment;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.spi.data.FieldSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDIyMw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543784223", "bodyText": "nit: use else to be clearer", "author": "yupeng9", "createdAt": "2020-12-16T00:21:52Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/TableDataManagerProvider.java", "diffHunk": "@@ -53,6 +53,11 @@ public static TableDataManager getTableDataManager(@Nonnull TableDataManagerConf\n     TableDataManager tableDataManager;\n     switch (TableType.valueOf(tableDataManagerConfig.getTableDataManagerType())) {\n       case OFFLINE:\n+        if (tableDataManagerConfig.isDimTable()) {\n+          tableDataManager =\n+              DimensionTableDataManager.createInstanceByTableName(tableDataManagerConfig.getTableName());\n+          break;\n+        }", "originalCommit": "a94ab18b974e810d50c4ff9ab20c2be9cde30f5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5MjI2Nw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543792267", "bodyText": "Updated", "author": "cbalci", "createdAt": "2020-12-16T00:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "e3606ae7e17dad3931112ca4f7d10d49cae25aa6", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/TableDataManagerProvider.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/TableDataManagerProvider.java\nindex 001c5d8443..010d872cdb 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/TableDataManagerProvider.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/TableDataManagerProvider.java\n\n@@ -56,9 +56,9 @@ public class TableDataManagerProvider {\n         if (tableDataManagerConfig.isDimTable()) {\n           tableDataManager =\n               DimensionTableDataManager.createInstanceByTableName(tableDataManagerConfig.getTableName());\n-          break;\n+        } else {\n+          tableDataManager = new OfflineTableDataManager();\n         }\n-        tableDataManager = new OfflineTableDataManager();\n         break;\n       case REALTIME:\n         tableDataManager = new RealtimeTableDataManager(_segmentBuildSemaphore);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5ODY4Mg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r543798682", "bodyText": "(Critical) release these segment data managers after reading them", "author": "Jackie-Jiang", "createdAt": "2020-12-16T00:59:35Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via {@link #getInstanceByTableName} static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /**\n+   * `createInstanceByTableName` should only be used by the {@link TableDataManagerProvider} and the returned\n+   * instance should be properly initialized via {@link #init} method before using.\n+   */\n+  public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {\n+    DimensionTableDataManager instance = new DimensionTableDataManager();\n+    _instances.put(tableNameWithType, instance);\n+    return instance;\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {\n+    return _instances.get(tableNameWithType);\n+  }\n+\n+  /**\n+   * Instance properties/methods\n+   */\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table: {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(String.format(\"Error loading lookup table: %s\", getTableName()), e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table: {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error reloading lookup table after segment remove for table: {}\", getTableName()), e);\n+    }\n+  }\n+\n+  /**\n+   * `loadLookupTable()` reads contents of the DimensionTable into _lookupTable HashMap for fast lookup.\n+   */\n+  private void loadLookupTable()\n+      throws Exception {\n+    _lookupTableWriteLock.lock();\n+    try {\n+      _lookupTable.clear();\n+      List<SegmentDataManager> segmentManagers = acquireAllSegments();\n+      if (segmentManagers.size() == 0) {\n+        return;\n+      }\n+\n+      for (SegmentDataManager segmentManager : segmentManagers) {", "originalCommit": "c8fd8bfa22ee0e9c17b5870c97292cfa96c03d46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAyMTA3NA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544021074", "bodyText": "Good catch, \ud83d\udc4d. Updated to release the segment after usage. Also added an assertion to the unit test to make sure reference count is preserved.", "author": "cbalci", "createdAt": "2020-12-16T06:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5ODY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 10af1f198b..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.core.data.manager.offline;\n \n import com.google.common.base.Preconditions;\n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxNzEwNw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544617107", "bodyText": "We might want to put release in the finally block so that it is always released even with exceptions:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    releaseSegment(segmentManager);\n          \n          \n            \n              try {\n          \n          \n            \n                for (SegmentDataManager segmentManager : segmentManagers) {\n          \n          \n            \n                  ...\n          \n          \n            \n                }\n          \n          \n            \n              } finally {\n          \n          \n            \n                for (SegmentDataManager segmentManager : segmentManagers) {\n          \n          \n            \n                  releaseSegment(segmentManager);\n          \n          \n            \n                }\n          \n          \n            \n              }", "author": "Jackie-Jiang", "createdAt": "2020-12-16T20:56:26Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via {@link #getInstanceByTableName} static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /**\n+   * `createInstanceByTableName` should only be used by the {@link TableDataManagerProvider} and the returned\n+   * instance should be properly initialized via {@link #init} method before using.\n+   */\n+  public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {\n+    return _instances.computeIfAbsent(tableNameWithType, k -> new DimensionTableDataManager());\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {\n+    return _instances.get(tableNameWithType);\n+  }\n+\n+  /**\n+   * Instance properties/methods\n+   */\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table: {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(String.format(\"Error loading lookup table: %s\", getTableName()), e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table: {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error reloading lookup table after segment remove for table: {}\", getTableName()), e);\n+    }\n+  }\n+\n+  /**\n+   * `loadLookupTable()` reads contents of the DimensionTable into _lookupTable HashMap for fast lookup.\n+   */\n+  private void loadLookupTable()\n+      throws Exception {\n+    _lookupTableWriteLock.lock();\n+    try {\n+      _lookupTable.clear();\n+      List<SegmentDataManager> segmentManagers = acquireAllSegments();\n+      if (segmentManagers.size() == 0) {\n+        return;\n+      }\n+\n+      for (SegmentDataManager segmentManager : segmentManagers) {\n+        IndexSegment indexSegment = segmentManager.getSegment();\n+        try (PinotSegmentRecordReader reader =\n+            new PinotSegmentRecordReader(indexSegment.getSegmentMetadata().getIndexDir())) {\n+          while (reader.hasNext()) {\n+            GenericRow row = reader.next();\n+            _lookupTable.put(row.getPrimaryKey(_primaryKeyColumns), row);\n+          }\n+        }\n+        releaseSegment(segmentManager);", "originalCommit": "9f671a4094b9093a7f57114bad84e12a1c4ccd9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzMzg4OA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544633888", "bodyText": "Good suggestion. How about creating the try..finally block inside the for loop like:\nfor (SegmentDataManager segmentManager: segmentManagers) {\n  try {\n     //... read contents...\n  } finally {\n    releaseSegment(segmentManager);\n  }\n}", "author": "cbalci", "createdAt": "2020-12-16T21:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxNzEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDg2OQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545314869", "bodyText": "This won't work because if the loading throws exception, it will only release one segment manager", "author": "Jackie-Jiang", "createdAt": "2020-12-17T18:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxNzEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MzkyMw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545493923", "bodyText": "Oh, you're right, missed that completely. Updating as suggested.", "author": "cbalci", "createdAt": "2020-12-18T00:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxNzEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 060e1a38e5..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.core.data.manager.offline;\n \n import com.google.common.base.Preconditions;\n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMzI2Mg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544713262", "bodyText": "Please annotate as visiblefortesting.", "author": "mcvsubbu", "createdAt": "2020-12-17T00:08:06Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via {@link #getInstanceByTableName} static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /**\n+   * `createInstanceByTableName` should only be used by the {@link TableDataManagerProvider} and the returned\n+   * instance should be properly initialized via {@link #init} method before using.\n+   */\n+  public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {\n+    return _instances.computeIfAbsent(tableNameWithType, k -> new DimensionTableDataManager());\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {\n+    return _instances.get(tableNameWithType);\n+  }\n+\n+  /**\n+   * Instance properties/methods\n+   */\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table: {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(String.format(\"Error loading lookup table: %s\", getTableName()), e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table: {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\n+          String.format(\"Error reloading lookup table after segment remove for table: {}\", getTableName()), e);\n+    }\n+  }\n+\n+  /**\n+   * `loadLookupTable()` reads contents of the DimensionTable into _lookupTable HashMap for fast lookup.\n+   */\n+  private void loadLookupTable()\n+      throws Exception {\n+    _lookupTableWriteLock.lock();\n+    try {\n+      _lookupTable.clear();\n+      List<SegmentDataManager> segmentManagers = acquireAllSegments();\n+      if (segmentManagers.size() == 0) {\n+        return;\n+      }\n+\n+      for (SegmentDataManager segmentManager : segmentManagers) {\n+        IndexSegment indexSegment = segmentManager.getSegment();\n+        try (PinotSegmentRecordReader reader =\n+            new PinotSegmentRecordReader(indexSegment.getSegmentMetadata().getIndexDir())) {\n+          while (reader.hasNext()) {\n+            GenericRow row = reader.next();\n+            _lookupTable.put(row.getPrimaryKey(_primaryKeyColumns), row);\n+          }\n+        }\n+        releaseSegment(segmentManager);\n+      }\n+    } finally {\n+      _lookupTableWriteLock.unlock();\n+    }\n+  }\n+\n+  public GenericRow lookupRowByPrimaryKey(PrimaryKey pk) {\n+    _lookupTableReadLock.lock();\n+    try {\n+      return _lookupTable.get(pk);\n+    } finally {\n+      _lookupTableReadLock.unlock();\n+    }\n+  }\n+\n+  public FieldSpec getColumnFieldSpec(String columnName) {", "originalCommit": "353d70d64d225b9bab08c51b08766532bdebae96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5NTg1MA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545495850", "bodyText": "Hi Subbu! This is actually one of the two public methods which, the proposed LookupUDF will use. So it is not visible for testing only. To see how the UDF will interact, please take a look at the POC implementation here.", "author": "cbalci", "createdAt": "2020-12-18T00:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMzI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwODA1Mg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545508052", "bodyText": "OK", "author": "mcvsubbu", "createdAt": "2020-12-18T01:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMzI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 060e1a38e5..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.core.data.manager.offline;\n \n import com.google.common.base.Preconditions;\n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMzUwNg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544713506", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  _logger.info(\"Successfully loaded lookup table: {}\", getTableName());\n          \n          \n            \n                  _logger.info(\"Successfully added segment {} and loaded lookup table: {}\", getTableName());", "author": "mcvsubbu", "createdAt": "2020-12-17T00:08:45Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via {@link #getInstanceByTableName} static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /**\n+   * `createInstanceByTableName` should only be used by the {@link TableDataManagerProvider} and the returned\n+   * instance should be properly initialized via {@link #init} method before using.\n+   */\n+  public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {\n+    return _instances.computeIfAbsent(tableNameWithType, k -> new DimensionTableDataManager());\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {\n+    return _instances.get(tableNameWithType);\n+  }\n+\n+  /**\n+   * Instance properties/methods\n+   */\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table: {}\", getTableName());", "originalCommit": "353d70d64d225b9bab08c51b08766532bdebae96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwNDgxNw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545504817", "bodyText": "Added", "author": "cbalci", "createdAt": "2020-12-18T01:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMzUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 060e1a38e5..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.core.data.manager.offline;\n \n import com.google.common.base.Preconditions;\n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMzU1Nw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544713557", "bodyText": "Good to add segment name in the log", "author": "mcvsubbu", "createdAt": "2020-12-17T00:08:56Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via {@link #getInstanceByTableName} static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /**\n+   * `createInstanceByTableName` should only be used by the {@link TableDataManagerProvider} and the returned\n+   * instance should be properly initialized via {@link #init} method before using.\n+   */\n+  public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {\n+    return _instances.computeIfAbsent(tableNameWithType, k -> new DimensionTableDataManager());\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {\n+    return _instances.get(tableNameWithType);\n+  }\n+\n+  /**\n+   * Instance properties/methods\n+   */\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully loaded lookup table: {}\", getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(String.format(\"Error loading lookup table: %s\", getTableName()), e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment and reloaded lookup table: {}\", getTableName());", "originalCommit": "353d70d64d225b9bab08c51b08766532bdebae96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwNDgyOQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545504829", "bodyText": "Added", "author": "cbalci", "createdAt": "2020-12-18T01:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMzU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 060e1a38e5..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.core.data.manager.offline;\n \n import com.google.common.base.Preconditions;\n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNjEwNg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544716106", "bodyText": "Please move this check to the table creation code in the controller.\nAlso ensure that the other checks are there as well:\n(1) table type must be OFFLINE\n(2) table ingestion should be REFRESH", "author": "mcvsubbu", "createdAt": "2020-12-17T00:15:38Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via {@link #getInstanceByTableName} static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /**\n+   * `createInstanceByTableName` should only be used by the {@link TableDataManagerProvider} and the returned\n+   * instance should be properly initialized via {@link #init} method before using.\n+   */\n+  public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {\n+    return _instances.computeIfAbsent(tableNameWithType, k -> new DimensionTableDataManager());\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {\n+    return _instances.get(tableNameWithType);\n+  }\n+\n+  /**\n+   * Instance properties/methods\n+   */\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);", "originalCommit": "353d70d64d225b9bab08c51b08766532bdebae96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU0MDc4NA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545540784", "bodyText": "Good points Subbu. This is actually something @yupeng9 also mentioned in the original POC review, but seems like I forgot to add in this PR.\nNow, I added validations to TableConfigUtils to capture 'TableType', 'IngestionType' and 'PrimaryKey' requirements for Dimension tables. Please take a look.\nAlso, I would prefer to keep the 'PrimaryKey' precondition here, since I think it documents the constraint very well and is better than doing a null check deep down. Let me know what you think.\nThanks", "author": "cbalci", "createdAt": "2020-12-18T02:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNjEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3MjU0MA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545972540", "bodyText": "If we already check at the time of adding the table config, then it should never be null here, right?", "author": "mcvsubbu", "createdAt": "2020-12-18T17:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNjEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMzk1Mw==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r546023953", "bodyText": "Yeah, guess you're right, it looks a bit too defensive now. Removing.", "author": "cbalci", "createdAt": "2020-12-18T18:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNjEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 060e1a38e5..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.core.data.manager.offline;\n \n import com.google.common.base.Preconditions;\n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyNzA1OA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r544727058", "bodyText": "is this table going to use heap or non-heap memory?", "author": "chenboat", "createdAt": "2020-12-17T00:44:43Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.", "originalCommit": "9f671a4094b9093a7f57114bad84e12a1c4ccd9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5NDQwOQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545494409", "bodyText": "This is going to be in-heap, using the _lookupTable HashMap declared below.", "author": "cbalci", "createdAt": "2020-12-18T00:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyNzA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwODQ5OQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545508499", "bodyText": "I think @chenboat  is asking if the loadMode setting is going to be HEAP or MMAP. Perhaps the answer is that it does not matter, since the contents are instantiated into the hash table.", "author": "mcvsubbu", "createdAt": "2020-12-18T01:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyNzA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 060e1a38e5..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.core.data.manager.offline;\n \n import com.google.common.base.Preconditions;\n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3MzM4Ng==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r545973386", "bodyText": "Since we want that a lookup table should be small, it may be worth asserting that the table has to be in one segment?", "author": "mcvsubbu", "createdAt": "2020-12-18T17:16:52Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.offline;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.readers.PinotSegmentRecordReader;\n+import org.apache.pinot.core.indexsegment.IndexSegment;\n+import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.PrimaryKey;\n+\n+\n+/**\n+ * Dimension Table is a special type of OFFLINE table which is assigned to all servers\n+ * in a tenant and is used to execute a LOOKUP Transform Function. DimensionTableDataManager\n+ * loads the contents into a HashMap for faster access thus the size should be small\n+ * enough to easily fit in memory.\n+ *\n+ * DimensionTableDataManager uses Registry of Singletons pattern to store one instance per table\n+ * which can be accessed via {@link #getInstanceByTableName} static method.\n+ */\n+@ThreadSafe\n+public class DimensionTableDataManager extends OfflineTableDataManager {\n+  // Storing singletons per table in a HashMap\n+  private static final Map<String, DimensionTableDataManager> _instances = new ConcurrentHashMap<>();\n+\n+  private DimensionTableDataManager() {\n+  }\n+\n+  /**\n+   * `createInstanceByTableName` should only be used by the {@link TableDataManagerProvider} and the returned\n+   * instance should be properly initialized via {@link #init} method before using.\n+   */\n+  public static DimensionTableDataManager createInstanceByTableName(String tableNameWithType) {\n+    return _instances.computeIfAbsent(tableNameWithType, k -> new DimensionTableDataManager());\n+  }\n+\n+  public static DimensionTableDataManager getInstanceByTableName(String tableNameWithType) {\n+    return _instances.get(tableNameWithType);\n+  }\n+\n+  /**\n+   * Instance properties/methods\n+   */\n+  private final ReadWriteLock _rwl = new ReentrantReadWriteLock();\n+  private final Lock _lookupTableReadLock = _rwl.readLock();\n+  private final Lock _lookupTableWriteLock = _rwl.writeLock();\n+\n+  // _lookupTable is a HashMap used for storing/serving records for a table keyed by table PK\n+  @GuardedBy(\"_rwl\")\n+  private final Map<PrimaryKey, GenericRow> _lookupTable = new HashMap<>();\n+  private Schema _tableSchema;\n+  private List<String> _primaryKeyColumns;\n+\n+  @Override\n+  protected void doInit() {\n+    super.doInit();\n+\n+    _tableSchema = ZKMetadataProvider.getTableSchema(_propertyStore, _tableNameWithType);\n+    Preconditions.checkState(_tableSchema != null, \"Failed to find schema for table: %s\", _tableNameWithType);\n+    _primaryKeyColumns = _tableSchema.getPrimaryKeyColumns();\n+    Preconditions.checkState(!CollectionUtils.isEmpty(_primaryKeyColumns),\n+        \"Primary key columns must be configured for dimension table: %s\", _tableNameWithType);\n+  }\n+\n+  @Override\n+  public void addSegment(File indexDir, IndexLoadingConfig indexLoadingConfig)\n+      throws Exception {\n+    super.addSegment(indexDir, indexLoadingConfig);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully added segment {} and loaded lookup table: {}\", indexDir.getName(), getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(String.format(\"Error loading lookup table: %s\", getTableName()), e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeSegment(String segmentName) {\n+    super.removeSegment(segmentName);\n+    try {\n+      loadLookupTable();\n+      _logger.info(\"Successfully removed segment {} and reloaded lookup table: {}\", segmentName, getTableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(String\n+          .format(\"Error reloading lookup table after segment remove ({}) for table: {}\", segmentName, getTableName()),\n+          e);\n+    }\n+  }\n+\n+  /**\n+   * `loadLookupTable()` reads contents of the DimensionTable into _lookupTable HashMap for fast lookup.\n+   */\n+  private void loadLookupTable()\n+      throws Exception {\n+    _lookupTableWriteLock.lock();\n+    try {\n+      _lookupTable.clear();\n+      List<SegmentDataManager> segmentManagers = acquireAllSegments();\n+      if (segmentManagers.size() == 0) {\n+        return;\n+      }\n+\n+      try {\n+        for (SegmentDataManager segmentManager : segmentManagers) {", "originalCommit": "3ae2beda4f452345f9d30603cd8401f7ac7728aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzMTU0Mg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r546031542", "bodyText": "Right, I listed the table size issue in the description as one of the things I'd like to addresses subsequently.\nWhat I'm thinking is putting a 'default maximum' value for Dimension table size quota, say something like 200MB. But I also think this value should be configurable via server config (by the Pinot admin, not the user). This should allow use cases for larger tables if you have the hardware resources to handle them. I think restricting the table to be a single segment is somewhat arbitrary and doesn't help us that much. Happy to hear you and @Jackie-Jiang 's thoughts though.", "author": "cbalci", "createdAt": "2020-12-18T19:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3MzM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3NjA4MQ==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r546176081", "bodyText": "OK yes, we can address it later.", "author": "mcvsubbu", "createdAt": "2020-12-19T02:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3MzM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "be6656561f2d0682167ccd71a38c9c66522a7939", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\nindex 5097d8297e..c2a88d5acd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/DimensionTableDataManager.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.core.data.manager.offline;\n \n import com.google.common.base.Preconditions;\n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"oid": "be6656561f2d0682167ccd71a38c9c66522a7939", "url": "https://github.com/apache/pinot/commit/be6656561f2d0682167ccd71a38c9c66522a7939", "message": "Add DimensionTableData manager", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "620d311ec62a15ab26bf8a3833482a99b29a8263", "url": "https://github.com/apache/pinot/commit/620d311ec62a15ab26bf8a3833482a99b29a8263", "message": "Address review comments.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "296171cf7dbd7cf0292625a4f807ea4e0857804e", "url": "https://github.com/apache/pinot/commit/296171cf7dbd7cf0292625a4f807ea4e0857804e", "message": "CLose reader after using.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "e3606ae7e17dad3931112ca4f7d10d49cae25aa6", "url": "https://github.com/apache/pinot/commit/e3606ae7e17dad3931112ca4f7d10d49cae25aa6", "message": "Revisit javadocs.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "5663a6170f4afb185e30946c493c3d9c807d76f7", "url": "https://github.com/apache/pinot/commit/5663a6170f4afb185e30946c493c3d9c807d76f7", "message": "Release segment after use.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "23cdc917f0f5739192a65f197c7029fd94e06752", "url": "https://github.com/apache/pinot/commit/23cdc917f0f5739192a65f197c7029fd94e06752", "message": "Touch up instance instantiation.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "88905e815e0914b8b6f3eead4ef116ba1fb4b9c5", "url": "https://github.com/apache/pinot/commit/88905e815e0914b8b6f3eead4ef116ba1fb4b9c5", "message": "Cleanup segment in test.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "e428485e5deb0ff931bce8c61d7da6265e4ad0f0", "url": "https://github.com/apache/pinot/commit/e428485e5deb0ff931bce8c61d7da6265e4ad0f0", "message": "Release segments in \"finally\" block.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "1f458a8cdd378dca9e1bdad2c01612d8e3b49cdf", "url": "https://github.com/apache/pinot/commit/1f458a8cdd378dca9e1bdad2c01612d8e3b49cdf", "message": "Update logs.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "d0726be0cfbab32e7c17f94eeeb2210bf3cf2f61", "url": "https://github.com/apache/pinot/commit/d0726be0cfbab32e7c17f94eeeb2210bf3cf2f61", "message": "Add TableConfig validations for Dim Tables.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "36b07a8d1112a731eb29672bcf22fe2c8d066c2f", "url": "https://github.com/apache/pinot/commit/36b07a8d1112a731eb29672bcf22fe2c8d066c2f", "message": "Seperate IngestionConfigTests for dim tables.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "3881b95d2a2ed4b67c4ae51f390dae7569f2ac17", "url": "https://github.com/apache/pinot/commit/3881b95d2a2ed4b67c4ae51f390dae7569f2ac17", "message": "Remove defensive null checks.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "8281dc121ba8ab3a97dc133e1e4f48a111487b6b", "url": "https://github.com/apache/pinot/commit/8281dc121ba8ab3a97dc133e1e4f48a111487b6b", "message": "Fix github action profile name.", "committedDate": "2020-12-18T21:16:56Z", "type": "commit"}, {"oid": "8281dc121ba8ab3a97dc133e1e4f48a111487b6b", "url": "https://github.com/apache/pinot/commit/8281dc121ba8ab3a97dc133e1e4f48a111487b6b", "message": "Fix github action profile name.", "committedDate": "2020-12-18T21:16:56Z", "type": "forcePushed"}, {"oid": "b47465c9e193a83feaa22fcee35568c9f42bc14b", "url": "https://github.com/apache/pinot/commit/b47465c9e193a83feaa22fcee35568c9f42bc14b", "message": "Fix ingestionTest dependencies.", "committedDate": "2020-12-18T21:22:43Z", "type": "commit"}, {"oid": "f719a847c811ee35d6af68e1724c69004d36c7e8", "url": "https://github.com/apache/pinot/commit/f719a847c811ee35d6af68e1724c69004d36c7e8", "message": "Undo the gihub-actions mvn profile name fix.", "committedDate": "2020-12-18T21:45:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3NjI4Mg==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r546176282", "bodyText": "I hope this API is still only for testing. The API does not make sense in production since the ref count could change any time after you get it. Please confirm.", "author": "mcvsubbu", "createdAt": "2020-12-19T02:13:58Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/SegmentDataManager.java", "diffHunk": "@@ -29,7 +29,7 @@\n   private int _referenceCount = 1;\n \n   @VisibleForTesting\n-  synchronized int getReferenceCount() {\n+  public synchronized int getReferenceCount() {", "originalCommit": "f719a847c811ee35d6af68e1724c69004d36c7e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3NzAyMA==", "url": "https://github.com/apache/pinot/pull/6346#discussion_r546177020", "bodyText": "Yes, we are using for testing only, to assert that the DimensionTable correctly releases segments after loading.", "author": "cbalci", "createdAt": "2020-12-19T02:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3NjI4Mg=="}], "type": "inlineReview", "revised_code": null}]}