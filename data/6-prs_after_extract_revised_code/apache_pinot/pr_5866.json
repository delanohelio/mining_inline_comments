{"pr_number": 5866, "pr_title": "[TE] add anomaly detection as a service - new table for storing ad-hoc data", "pr_createdAt": "2020-08-14T18:14:24Z", "pr_url": "https://github.com/apache/pinot/pull/5866", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwOTU1Nw==", "url": "https://github.com/apache/pinot/pull/5866#discussion_r470809557", "bodyText": "@jasonyanwenl This code looks good.  Are there docs that tell users the formatting for adhoc data, or is that future work for Thirdeye?", "author": "harleyjj", "createdAt": "2020-08-14T18:50:06Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java", "diffHunk": "@@ -464,6 +420,38 @@ TaskDTO generateTaskConfig(DetectionConfigDTO detectionConfigDTO,\n     return taskDTO;\n   }\n \n+  long saveOnlineDetectionData(JsonNode payloadNode,\n+      DatasetConfigDTO datasetConfigDTO, MetricConfigDTO metricConfigDTO)\n+        throws JsonProcessingException {\n+    JsonNode dataNode = payloadNode.get(DATA_FIELD);\n+    String timeColumnName = datasetConfigDTO.getTimeColumn();\n+    String datasetName = datasetConfigDTO.getDataset();\n+    String metricName = metricConfigDTO.getName();\n+", "originalCommit": "3b85273f88c20fa49ff075a6715be9ea14b56cd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzM0Mw==", "url": "https://github.com/apache/pinot/pull/5866#discussion_r470827343", "bodyText": "Thanks Harley! Yeah, the formatting for the ad-hoc data will be explained in the API doc. I am currently writing that. I will share it when I finished it.", "author": "jasonyanwenl", "createdAt": "2020-08-14T19:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwOTU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "31ec241c489a22b0a60ef8da6ee5d14ca92d5a91", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\nindex 15af58935e..ac3d863e46 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\n\n@@ -420,7 +430,7 @@ public class AnomalyDetectionResource {\n     return taskDTO;\n   }\n \n-  long saveOnlineDetectionData(JsonNode payloadNode,\n+  OnlineDetectionDataDTO saveOnlineDetectionData(JsonNode payloadNode,\n       DatasetConfigDTO datasetConfigDTO, MetricConfigDTO metricConfigDTO)\n         throws JsonProcessingException {\n     JsonNode dataNode = payloadNode.get(DATA_FIELD);\n"}}, {"oid": "c118b16a4a4a85ece30cd241c5c2e5f770ccd2eb", "url": "https://github.com/apache/pinot/commit/c118b16a4a4a85ece30cd241c5c2e5f770ccd2eb", "message": "add a separate table for storing online data", "committedDate": "2020-08-18T00:34:39Z", "type": "commit"}, {"oid": "c118b16a4a4a85ece30cd241c5c2e5f770ccd2eb", "url": "https://github.com/apache/pinot/commit/c118b16a4a4a85ece30cd241c5c2e5f770ccd2eb", "message": "add a separate table for storing online data", "committedDate": "2020-08-18T00:34:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4OTkzOQ==", "url": "https://github.com/apache/pinot/pull/5866#discussion_r472489939", "bodyText": "Any reason we need to hardcode this here?", "author": "vincentchenjl", "createdAt": "2020-08-18T20:59:52Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java", "diffHunk": "@@ -345,18 +323,15 @@ DatasetConfigDTO generateDatasetConfig(JsonNode payloadNode, String suffix) {\n     return datasetConfigDTO;\n   }\n \n-  MetricConfigDTO generateMetricConfig(JsonNode payloadNode, String suffix,\n-        DatasetConfigDTO datasetConfigDTO)\n-      throws JsonProcessingException {\n+  MetricConfigDTO generateMetricConfig(JsonNode payloadNode, String suffix) {\n     MetricConfigDTO metricConfigDTO = new MetricConfigDTO();\n-    JsonNode dataNode = payloadNode.get(DATA_FIELD);\n \n     // Default configuration\n-    metricConfigDTO.setName(DEFAULT_METRIC_NAME + suffix);\n+    metricConfigDTO.setName(DEFAULT_METRIC_NAME);", "originalCommit": "c118b16a4a4a85ece30cd241c5c2e5f770ccd2eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTE0NQ==", "url": "https://github.com/apache/pinot/pull/5866#discussion_r473085145", "bodyText": "This is the default name of the metric. We firstly set the metric name to be the default one. Then we check if the user provides a metric configuration. If so, we will use the customized metric name given by the user.", "author": "jasonyanwenl", "createdAt": "2020-08-19T14:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4OTkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "31ec241c489a22b0a60ef8da6ee5d14ca92d5a91", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\nindex 15af58935e..ac3d863e46 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\n\n@@ -338,18 +359,7 @@ public class AnomalyDetectionResource {\n \n     // Customized configuration\n     if (payloadNode.has(METRIC_FIELD)) {\n-      Map<String, Object> metricYaml =\n-          ConfigUtils.getMap(yaml.load(payloadNode.get(METRIC_FIELD).textValue()));\n-\n-      // Customized metric name\n-      if (metricYaml.containsKey(\"metricColumn\")) {\n-        metricConfigDTO.setName((String) metricYaml.get(\"metricColumn\"));\n-      }\n-\n-      if (metricYaml.containsKey(\"datatype\")) {\n-        metricConfigDTO\n-            .setDatatype(MetricType.valueOf((String) metricYaml.get(\"datatype\")));\n-      }\n+      updateMetricCustomFields(payloadNode, metricConfigDTO);\n     }\n \n     metricConfigDAO.save(metricConfigDTO);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMTU2Mw==", "url": "https://github.com/apache/pinot/pull/5866#discussion_r472501563", "bodyText": "If we store the ad-hoc data, do we still want store the metadata in normalized form? Since we clean up the dataset every time, we can store all the metadata into the ad hoc data table.", "author": "vincentchenjl", "createdAt": "2020-08-18T21:24:11Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java", "diffHunk": "@@ -511,24 +499,19 @@ private TaskDTO pollingTask(long taskId) {\n   }\n \n   private void cleanStates(MetricConfigDTO metricConfigDTO, DatasetConfigDTO datasetConfigDTO) {\n+    // Clean up ad hoc data\n     if (datasetConfigDTO != null) {\n-      datasetConfigDAO.delete(datasetConfigDTO);\n-      LOG.info(\"Deleted dataset: {}\", datasetConfigDTO);\n-\n-      int anomalyCnt = anomalyDAO.deleteByPredicate(\n-          Predicate.EQ(\"collection\", datasetConfigDTO.getName()));\n-      LOG.info(\"Deleted {} anomalies with dataset {}\",\n-          anomalyCnt, datasetConfigDTO.getName());\n+      int onlineDetectionDataCnt = onlineDetectionDataDAO\n+          .deleteByPredicate(Predicate.EQ(\"dataset\", datasetConfigDTO.getName()));", "originalCommit": "c118b16a4a4a85ece30cd241c5c2e5f770ccd2eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjQwMg==", "url": "https://github.com/apache/pinot/pull/5866#discussion_r473202402", "bodyText": "Thank you for the point! This is a good idea. But it also has some trade-off. Like during the detection pipeline workflow, we cannot reuse the existing DAO layer logic to retrieve dataset/metric configurations from corresponding tables. Probably we will add some extra logic to separate online detection from the original detection during the DAO layer for this. Currently how about let's currently keep this and I will note down this in the design doc for future reference?", "author": "jasonyanwenl", "createdAt": "2020-08-19T17:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMTU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "31ec241c489a22b0a60ef8da6ee5d14ca92d5a91", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\nindex 15af58935e..ac3d863e46 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\n\n@@ -498,8 +503,11 @@ public class AnomalyDetectionResource {\n     return anomalies;\n   }\n \n-  private void cleanStates(MetricConfigDTO metricConfigDTO, DatasetConfigDTO datasetConfigDTO) {\n-    // Clean up ad hoc data\n+  private void cleanStates(MetricConfigDTO metricConfigDTO, DatasetConfigDTO datasetConfigDTO,\n+      boolean dataRegistered) {\n+    // Registered online data should not be cleaned\n+    if (dataRegistered) return;\n+\n     if (datasetConfigDTO != null) {\n       int onlineDetectionDataCnt = onlineDetectionDataDAO\n           .deleteByPredicate(Predicate.EQ(\"dataset\", datasetConfigDTO.getName()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzYxMA==", "url": "https://github.com/apache/pinot/pull/5866#discussion_r472503610", "bodyText": "Since we are storing the time series data in JSON, we might exceed the limit of MySQL text field, which is 64KB. We should at least make sure that the field should not be overflowed the large data users posted.", "author": "vincentchenjl", "createdAt": "2020-08-18T21:28:25Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java", "diffHunk": "@@ -464,6 +420,38 @@ TaskDTO generateTaskConfig(DetectionConfigDTO detectionConfigDTO,\n     return taskDTO;\n   }\n \n+  long saveOnlineDetectionData(JsonNode payloadNode,\n+      DatasetConfigDTO datasetConfigDTO, MetricConfigDTO metricConfigDTO)\n+        throws JsonProcessingException {\n+    JsonNode dataNode = payloadNode.get(DATA_FIELD);\n+    String timeColumnName = datasetConfigDTO.getTimeColumn();\n+    String datasetName = datasetConfigDTO.getDataset();\n+    String metricName = metricConfigDTO.getName();\n+\n+    // Check if time & metric columns exist in adhoc data\n+    ArrayNode columnsNode = dataNode.withArray(COLUMNS_FIELD);\n+    int[] colIndices = findTimeAndMetricColumns(columnsNode,\n+        timeColumnName, metricName);\n+    int timeColIdx = colIndices[0];\n+    int metricColIdx = colIndices[1];\n+    Preconditions.checkArgument(metricColIdx>=0 && timeColIdx>=0,\n+        String.format(\"metric: %s or time: %s not found in adhoc data.\",\n+            metricName, timeColumnName));\n+\n+    // Save online data\n+    OnlineDetectionDataDTO onlineDetectionDataDTO = new OnlineDetectionDataDTO();\n+    onlineDetectionDataDTO.setDataset(datasetName);\n+    onlineDetectionDataDTO.setMetric(metricName);\n+    onlineDetectionDataDTO.setOnlineDetectionData(this.objectMapper.writeValueAsString(dataNode));", "originalCommit": "c118b16a4a4a85ece30cd241c5c2e5f770ccd2eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5MzAyMQ==", "url": "https://github.com/apache/pinot/pull/5866#discussion_r473093021", "bodyText": "Thanks! I have already limited the size of request data. But originally I found the column type is MEDIUMTEXT in our internal database. So I just limit the size to be 10MB. However, here in our open-source SQL script, it is TEXT so the maximum size is 64 KB like what you said. Anyway, I will keep consistent with our open-source version and limit the request data size to be less than 64KB.", "author": "jasonyanwenl", "createdAt": "2020-08-19T14:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "31ec241c489a22b0a60ef8da6ee5d14ca92d5a91", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\nindex 15af58935e..ac3d863e46 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/api/detection/AnomalyDetectionResource.java\n\n@@ -420,7 +430,7 @@ public class AnomalyDetectionResource {\n     return taskDTO;\n   }\n \n-  long saveOnlineDetectionData(JsonNode payloadNode,\n+  OnlineDetectionDataDTO saveOnlineDetectionData(JsonNode payloadNode,\n       DatasetConfigDTO datasetConfigDTO, MetricConfigDTO metricConfigDTO)\n         throws JsonProcessingException {\n     JsonNode dataNode = payloadNode.get(DATA_FIELD);\n"}}, {"oid": "31ec241c489a22b0a60ef8da6ee5d14ca92d5a91", "url": "https://github.com/apache/pinot/commit/31ec241c489a22b0a60ef8da6ee5d14ca92d5a91", "message": "Merge branch 'master' into online-data-table-yanlin", "committedDate": "2020-08-24T20:42:19Z", "type": "commit"}, {"oid": "2ac19e63fa6ef07fbe5beeb16e5e75b2886e3b38", "url": "https://github.com/apache/pinot/commit/2ac19e63fa6ef07fbe5beeb16e5e75b2886e3b38", "message": "Fix typo", "committedDate": "2020-08-24T22:54:10Z", "type": "commit"}]}