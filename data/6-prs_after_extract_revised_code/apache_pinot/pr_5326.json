{"pr_number": 5326, "pr_title": "Add toDateTime DateTimeFunction (#5313)", "pr_createdAt": "2020-05-03T01:30:54Z", "pr_url": "https://github.com/apache/pinot/pull/5326", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTcxMQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419031711", "bodyText": "Thoughts on changing the name of this to DefaultFunctionRegistry now that it only applies to the DefaultFunctionEvaluator?", "author": "reallocf", "createdAt": "2020-05-03T01:33:43Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistry.java", "diffHunk": "@@ -18,36 +18,26 @@\n  */\n package org.apache.pinot.core.data.function;\n \n-import com.google.common.base.Preconditions;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n \n /**\n  * Registry for inbuilt Pinot functions\n  */\n public class FunctionRegistry {", "originalCommit": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3Nzk2NQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419577965", "bodyText": "yes that works", "author": "npawar", "createdAt": "2020-05-04T16:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistry.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistry.java\nsimilarity index 95%\nrename from pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistry.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistry.java\nindex 1d1d774611..83d17d26dd 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistry.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistry.java\n\n@@ -28,10 +28,10 @@ import java.util.Map;\n /**\n  * Registry for inbuilt Pinot functions\n  */\n-public class FunctionRegistry {\n+public class DefaultFunctionRegistry {\n   private final Map<String, List<FunctionInfo>> _functionInfoMap = new HashMap<>();\n \n-  FunctionRegistry(List<Method> functionsToRegister) {\n+  DefaultFunctionRegistry(List<Method> functionsToRegister) {\n     for (Method function : functionsToRegister) {\n       registerFunction(function);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTgyOA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419031828", "bodyText": "Blech. Any cleaner way to do this? Oh Java... haha", "author": "reallocf", "createdAt": "2020-05-03T01:35:02Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.apache.pinot.core.data.function;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create a {@link FunctionRegistry}\n+ */\n+public class FunctionRegistryFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(FunctionRegistryFactory.class);\n+\n+  private FunctionRegistryFactory() {\n+\n+  }\n+\n+  static List<Method> functionsToRegister;\n+\n+  static {\n+    try {\n+      functionsToRegister = Arrays.asList(DateTimeFunctions.class.getDeclaredMethod(\"toEpochHours\", Long.class),\n+          DateTimeFunctions.class.getDeclaredMethod(\"toEpochMinutes\", Long.class, String.class));\n+    } catch (NoSuchMethodException e) {\n+      LOGGER.error(\"Caught exception when registering function\", e);\n+    }\n+  }", "originalCommit": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e5af95741cdb57f9a22d1f3da4f48638206199b", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\nindex ba81a26036..8517d2aed5 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\n\n@@ -1,7 +1,8 @@\n package org.apache.pinot.core.data.function;\n \n+import com.google.common.collect.Lists;\n import java.lang.reflect.Method;\n-import java.util.Arrays;\n+import java.util.ArrayList;\n import java.util.List;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMjAyOQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419032029", "bodyText": "Had to pull this out into its own function (as opposed to a private function) in order to allow for the clazz.newInstance() call on line 56 of FunctionInvoker. Should I move this to a separate file?", "author": "reallocf", "createdAt": "2020-05-03T01:37:40Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n \n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertEquals(evaluator.getArguments(), Lists.newArrayList(\"testColumn\"));\n     GenericRow row = new GenericRow();\n     for (int i = 0; i < 5; i++) {\n       String value = \"testValue\" + i;\n       row.putField(\"testColumn\", value);\n       Object result = evaluator.evaluate(row);\n-      Assert.assertEquals(result, new StringBuilder(value).reverse().toString());\n+      Assert.assertEquals(result, myFunc.reverseString(value));\n     }\n   }\n \n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch('%s', '%s')\", input, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n   @Test\n   public void testMultiFunctionExpression()\n       throws Exception {\n-    FunctionRegistry.registerStaticFunction(MyFunc.class.getDeclaredMethod(\"reverseString\", String.class));\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(Arrays\n+        .asList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class),\n+            myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n-    String reversedInput = MyFunc.reverseString(input);\n+    String reversedInput = myFunc.reverseString(input);\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch(reverseString('%s'), '%s')\", reversedInput, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n+}\n \n-  private static class MyFunc {\n-    static String reverseString(String input) {\n-      return new StringBuilder(input).reverse().toString();\n-    }\n+class MyFunc {", "originalCommit": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e5af95741cdb57f9a22d1f3da4f48638206199b", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\nindex 3c26359505..9a749ed68f 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n\n@@ -36,8 +34,8 @@ public class DefaultFunctionEvaluatorTest {\n   public void testExpressionWithColumn()\n       throws Exception {\n     MyFunc myFunc = new MyFunc();\n-    FunctionRegistry functionRegistry = new FunctionRegistry(\n-        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionRegistry functionRegistry =\n+        new FunctionRegistry(Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n     FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNDA2NA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419034064", "bodyText": "Use Lists instead", "author": "reallocf", "createdAt": "2020-05-03T02:01:43Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -19,7 +19,8 @@\n package org.apache.pinot.core.data.function;\n \n import com.google.common.collect.Lists;\n-import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collections;", "originalCommit": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e5af95741cdb57f9a22d1f3da4f48638206199b", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\nindex 3c26359505..9a749ed68f 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n\n@@ -19,8 +19,6 @@\n package org.apache.pinot.core.data.function;\n \n import com.google.common.collect.Lists;\n-import java.util.Arrays;\n-import java.util.Collections;\n import org.apache.pinot.spi.data.readers.GenericRow;\n import org.joda.time.DateTime;\n import org.joda.time.Days;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNDA4MA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419034080", "bodyText": "Lists.newArrayList(...)", "author": "reallocf", "createdAt": "2020-05-03T02:01:54Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));", "originalCommit": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e5af95741cdb57f9a22d1f3da4f48638206199b", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\nindex 3c26359505..9a749ed68f 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n\n@@ -36,8 +34,8 @@ public class DefaultFunctionEvaluatorTest {\n   public void testExpressionWithColumn()\n       throws Exception {\n     MyFunc myFunc = new MyFunc();\n-    FunctionRegistry functionRegistry = new FunctionRegistry(\n-        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionRegistry functionRegistry =\n+        new FunctionRegistry(Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n     FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNDA5MA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419034090", "bodyText": "Lists.newArrayList(...)", "author": "reallocf", "createdAt": "2020-05-03T02:02:06Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n \n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertEquals(evaluator.getArguments(), Lists.newArrayList(\"testColumn\"));\n     GenericRow row = new GenericRow();\n     for (int i = 0; i < 5; i++) {\n       String value = \"testValue\" + i;\n       row.putField(\"testColumn\", value);\n       Object result = evaluator.evaluate(row);\n-      Assert.assertEquals(result, new StringBuilder(value).reverse().toString());\n+      Assert.assertEquals(result, myFunc.reverseString(value));\n     }\n   }\n \n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));", "originalCommit": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e5af95741cdb57f9a22d1f3da4f48638206199b", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\nindex 3c26359505..9a749ed68f 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n\n@@ -36,8 +34,8 @@ public class DefaultFunctionEvaluatorTest {\n   public void testExpressionWithColumn()\n       throws Exception {\n     MyFunc myFunc = new MyFunc();\n-    FunctionRegistry functionRegistry = new FunctionRegistry(\n-        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionRegistry functionRegistry =\n+        new FunctionRegistry(Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n     FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNDExNg==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419034116", "bodyText": "Lists.newArrayList(...)", "author": "reallocf", "createdAt": "2020-05-03T02:02:27Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n \n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertEquals(evaluator.getArguments(), Lists.newArrayList(\"testColumn\"));\n     GenericRow row = new GenericRow();\n     for (int i = 0; i < 5; i++) {\n       String value = \"testValue\" + i;\n       row.putField(\"testColumn\", value);\n       Object result = evaluator.evaluate(row);\n-      Assert.assertEquals(result, new StringBuilder(value).reverse().toString());\n+      Assert.assertEquals(result, myFunc.reverseString(value));\n     }\n   }\n \n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch('%s', '%s')\", input, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n   @Test\n   public void testMultiFunctionExpression()\n       throws Exception {\n-    FunctionRegistry.registerStaticFunction(MyFunc.class.getDeclaredMethod(\"reverseString\", String.class));\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(Arrays\n+        .asList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class),", "originalCommit": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e5af95741cdb57f9a22d1f3da4f48638206199b", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\nindex 3c26359505..9a749ed68f 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n\n@@ -36,8 +34,8 @@ public class DefaultFunctionEvaluatorTest {\n   public void testExpressionWithColumn()\n       throws Exception {\n     MyFunc myFunc = new MyFunc();\n-    FunctionRegistry functionRegistry = new FunctionRegistry(\n-        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionRegistry functionRegistry =\n+        new FunctionRegistry(Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n     FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0Mjg1Ng==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419042856", "bodyText": "There's some testing value to keeping the new StringBuilder... - will change back", "author": "reallocf", "createdAt": "2020-05-03T03:56:07Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n \n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertEquals(evaluator.getArguments(), Lists.newArrayList(\"testColumn\"));\n     GenericRow row = new GenericRow();\n     for (int i = 0; i < 5; i++) {\n       String value = \"testValue\" + i;\n       row.putField(\"testColumn\", value);\n       Object result = evaluator.evaluate(row);\n-      Assert.assertEquals(result, new StringBuilder(value).reverse().toString());\n+      Assert.assertEquals(result, myFunc.reverseString(value));", "originalCommit": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e5af95741cdb57f9a22d1f3da4f48638206199b", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\nindex 3c26359505..9a749ed68f 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n\n@@ -36,8 +34,8 @@ public class DefaultFunctionEvaluatorTest {\n   public void testExpressionWithColumn()\n       throws Exception {\n     MyFunc myFunc = new MyFunc();\n-    FunctionRegistry functionRegistry = new FunctionRegistry(\n-        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionRegistry functionRegistry =\n+        new FunctionRegistry(Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n     FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n"}}, {"oid": "3e5af95741cdb57f9a22d1f3da4f48638206199b", "url": "https://github.com/apache/pinot/commit/3e5af95741cdb57f9a22d1f3da4f48638206199b", "message": "Add toDateTime DateTimeFunction", "committedDate": "2020-05-03T04:01:52Z", "type": "forcePushed"}, {"oid": "92fc7ef3ab42b7d71185a2ad8a1531b0aaf0f1c5", "url": "https://github.com/apache/pinot/commit/92fc7ef3ab42b7d71185a2ad8a1531b0aaf0f1c5", "message": "Add toDateTime DateTimeFunction", "committedDate": "2020-05-03T04:11:45Z", "type": "forcePushed"}, {"oid": "1dc05e1927d3d9cf5185caf6e92c2a5abb1cd504", "url": "https://github.com/apache/pinot/commit/1dc05e1927d3d9cf5185caf6e92c2a5abb1cd504", "message": "Update FunctionRegistry to avoid static initialization (#5313)\n\nAdd toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-03T04:13:10Z", "type": "forcePushed"}, {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e", "url": "https://github.com/apache/pinot/commit/0e551b2d46f6366b8d93be865bd2ac570d799e0e", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-03T04:28:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NTkxOQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419565919", "bodyText": "use getOrDefault?", "author": "npawar", "createdAt": "2020-05-04T16:31:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -40,4 +47,14 @@ static Long toEpochHours(Long millis) {\n   static Long toEpochMinutes(Long millis, String bucket) {\n     return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n   }\n+\n+  DateTime toDateTime(String dateTimeString, String pattern) {\n+    if (!_dateTimeFormatterMap.containsKey(pattern)) {", "originalCommit": "0e551b2d46f6366b8d93be865bd2ac570d799e0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\nindex 0f9cf93ee1..7122e6c206 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n\n@@ -42,19 +89,129 @@ public class DateTimeFunctions {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch days\n+   */\n+  static Long toEpochDays(Long millis) {\n+    return TimeUnit.MILLISECONDS.toDays(millis);\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch seconds, round to nearest rounding bucket\n+   */\n+  static Long toEpochSecondsRounded(Long millis, Number roundToNearest) {\n+    return (TimeUnit.MILLISECONDS.toSeconds(millis) / roundToNearest.intValue()) * roundToNearest.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch minutes, round to nearest rounding bucket\n+   */\n+  static Long toEpochMinutesRounded(Long millis, Number roundToNearest) {\n+    return (TimeUnit.MILLISECONDS.toMinutes(millis) / roundToNearest.intValue()) * roundToNearest.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch hours, round to nearest rounding bucket\n+   */\n+  static Long toEpochHoursRounded(Long millis, Number roundToNearest) {\n+    return (TimeUnit.MILLISECONDS.toHours(millis) / roundToNearest.intValue()) * roundToNearest.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch days, round to nearest rounding bucket\n+   */\n+  static Long toEpochDaysRounded(Long millis, Number roundToNearest) {\n+    return (TimeUnit.MILLISECONDS.toDays(millis) / roundToNearest.intValue()) * roundToNearest.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch seconds, divided by given bucket, to get nSecondsSinceEpoch\n+   */\n+  static Long toEpochSecondsBucket(Long millis, Number bucket) {\n+    return TimeUnit.MILLISECONDS.toSeconds(millis) / bucket.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch minutes, divided by given bucket, to get nMinutesSinceEpoch\n+   */\n+  static Long toEpochMinutesBucket(Long millis, Number bucket) {\n+    return TimeUnit.MILLISECONDS.toMinutes(millis) / bucket.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch hours, divided by given bucket, to get nHoursSinceEpoch\n+   */\n+  static Long toEpochHoursBucket(Long millis, Number bucket) {\n+    return TimeUnit.MILLISECONDS.toHours(millis) / bucket.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch days, divided by given bucket, to get nDaysSinceEpoch\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochDaysBucket(Long millis, Number bucket) {\n+    return TimeUnit.MILLISECONDS.toDays(millis) / bucket.intValue();\n   }\n \n-  DateTime toDateTime(String dateTimeString, String pattern) {\n-    if (!_dateTimeFormatterMap.containsKey(pattern)) {\n-      _dateTimeFormatterMap.put(pattern, DateTimeFormat.forPattern(pattern));\n-    }\n+  /**\n+   * Converts epoch seconds to epoch millis\n+   */\n+  static Long fromEpochSeconds(Long seconds) {\n+    return TimeUnit.SECONDS.toMillis(seconds);\n+  }\n \n-    DateTimeFormatter dateTimeFormatter = _dateTimeFormatterMap.get(pattern);\n+  /**\n+   * Converts epoch minutes to epoch millis\n+   */\n+  static Long fromEpochMinutes(Number minutes) {\n+    return TimeUnit.MINUTES.toMillis(minutes.longValue());\n+  }\n+\n+  /**\n+   * Converts epoch hours to epoch millis\n+   */\n+  static Long fromEpochHours(Number hours) {\n+    return TimeUnit.HOURS.toMillis(hours.longValue());\n+  }\n+\n+  /**\n+   * Converts epoch days to epoch millis\n+   */\n+  static Long fromEpochDays(Number daysSinceEpoch) {\n+    return TimeUnit.DAYS.toMillis(daysSinceEpoch.longValue());\n+  }\n+\n+  /**\n+   * Converts nSecondsSinceEpoch (seconds that have been divided by a bucket), to epoch millis\n+   */\n+  static Long fromEpochSecondsBucket(Long seconds, Number bucket) {\n+    return TimeUnit.SECONDS.toMillis(seconds * bucket.intValue());\n+  }\n+\n+  /**\n+   * Converts nMinutesSinceEpoch (minutes that have been divided by a bucket), to epoch millis\n+   */\n+  static Long fromEpochMinutesBucket(Number minutes, Number bucket) {\n+    return TimeUnit.MINUTES.toMillis(minutes.longValue() * bucket.intValue());\n+  }\n+\n+  /**\n+   * Converts nHoursSinceEpoch (hours that have been divided by a bucket), to epoch millis\n+   */\n+  static Long fromEpochHoursBucket(Number hours, Number bucket) {\n+    return TimeUnit.HOURS.toMillis(hours.longValue() * bucket.intValue());\n+  }\n+\n+  /**\n+   * Converts nDaysSinceEpoch (days that have been divided by a bucket), to epoch millis\n+   */\n+  static Long fromEpochDaysBucket(Number daysSinceEpoch, Number bucket) {\n+    return TimeUnit.DAYS.toMillis(daysSinceEpoch.longValue() * bucket.intValue());\n+  }\n+\n+  String toDateTime(Long millis, String pattern) {\n+    return _dateTimePatternHandler.parseMillisToDateTimeString(millis, pattern);\n+  }\n \n-    return dateTimeFormatter.parseDateTime(dateTimeString);\n+  Long fromDateTime(String dateTimeString, String pattern) {\n+    return _dateTimePatternHandler.parseDateTimeStringToMillis(dateTimeString, pattern);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MDg0NQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419570845", "bodyText": "These functions will be applied during record transformation, and then the GenericRecord  is directly sent to the indexer\nRecordReader -> GenericRecord -> RecordTransformer -> GenericRecord -> Indexer.\nDateTime is not a datatype that Pinot can understand. Inputs and outputs from these transform functions should be STRING, INT, LONG.", "author": "npawar", "createdAt": "2020-05-04T16:38:36Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -40,4 +47,14 @@ static Long toEpochHours(Long millis) {\n   static Long toEpochMinutes(Long millis, String bucket) {\n     return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n   }\n+\n+  DateTime toDateTime(String dateTimeString, String pattern) {\n+    if (!_dateTimeFormatterMap.containsKey(pattern)) {\n+      _dateTimeFormatterMap.put(pattern, DateTimeFormat.forPattern(pattern));\n+    }\n+\n+    DateTimeFormatter dateTimeFormatter = _dateTimeFormatterMap.get(pattern);\n+\n+    return dateTimeFormatter.parseDateTime(dateTimeString);", "originalCommit": "0e551b2d46f6366b8d93be865bd2ac570d799e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMzQyNw==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419603427", "bodyText": "I guess this answers your question about fromDateTime?", "author": "npawar", "createdAt": "2020-05-04T17:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MDg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTAyMg==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422551022", "bodyText": "Okay, adjusted this so toDateTime takes in a Long millis and returns a String formattedDateTime and fromDateTime takes in a String formattedDateTime and outputs a Long millis - does that seem right to you?", "author": "reallocf", "createdAt": "2020-05-09T21:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MDg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\nindex 0f9cf93ee1..7122e6c206 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n\n@@ -42,19 +89,129 @@ public class DateTimeFunctions {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch days\n+   */\n+  static Long toEpochDays(Long millis) {\n+    return TimeUnit.MILLISECONDS.toDays(millis);\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch seconds, round to nearest rounding bucket\n+   */\n+  static Long toEpochSecondsRounded(Long millis, Number roundToNearest) {\n+    return (TimeUnit.MILLISECONDS.toSeconds(millis) / roundToNearest.intValue()) * roundToNearest.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch minutes, round to nearest rounding bucket\n+   */\n+  static Long toEpochMinutesRounded(Long millis, Number roundToNearest) {\n+    return (TimeUnit.MILLISECONDS.toMinutes(millis) / roundToNearest.intValue()) * roundToNearest.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch hours, round to nearest rounding bucket\n+   */\n+  static Long toEpochHoursRounded(Long millis, Number roundToNearest) {\n+    return (TimeUnit.MILLISECONDS.toHours(millis) / roundToNearest.intValue()) * roundToNearest.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch days, round to nearest rounding bucket\n+   */\n+  static Long toEpochDaysRounded(Long millis, Number roundToNearest) {\n+    return (TimeUnit.MILLISECONDS.toDays(millis) / roundToNearest.intValue()) * roundToNearest.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch seconds, divided by given bucket, to get nSecondsSinceEpoch\n+   */\n+  static Long toEpochSecondsBucket(Long millis, Number bucket) {\n+    return TimeUnit.MILLISECONDS.toSeconds(millis) / bucket.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch minutes, divided by given bucket, to get nMinutesSinceEpoch\n+   */\n+  static Long toEpochMinutesBucket(Long millis, Number bucket) {\n+    return TimeUnit.MILLISECONDS.toMinutes(millis) / bucket.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch hours, divided by given bucket, to get nHoursSinceEpoch\n+   */\n+  static Long toEpochHoursBucket(Long millis, Number bucket) {\n+    return TimeUnit.MILLISECONDS.toHours(millis) / bucket.intValue();\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch days, divided by given bucket, to get nDaysSinceEpoch\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochDaysBucket(Long millis, Number bucket) {\n+    return TimeUnit.MILLISECONDS.toDays(millis) / bucket.intValue();\n   }\n \n-  DateTime toDateTime(String dateTimeString, String pattern) {\n-    if (!_dateTimeFormatterMap.containsKey(pattern)) {\n-      _dateTimeFormatterMap.put(pattern, DateTimeFormat.forPattern(pattern));\n-    }\n+  /**\n+   * Converts epoch seconds to epoch millis\n+   */\n+  static Long fromEpochSeconds(Long seconds) {\n+    return TimeUnit.SECONDS.toMillis(seconds);\n+  }\n \n-    DateTimeFormatter dateTimeFormatter = _dateTimeFormatterMap.get(pattern);\n+  /**\n+   * Converts epoch minutes to epoch millis\n+   */\n+  static Long fromEpochMinutes(Number minutes) {\n+    return TimeUnit.MINUTES.toMillis(minutes.longValue());\n+  }\n+\n+  /**\n+   * Converts epoch hours to epoch millis\n+   */\n+  static Long fromEpochHours(Number hours) {\n+    return TimeUnit.HOURS.toMillis(hours.longValue());\n+  }\n+\n+  /**\n+   * Converts epoch days to epoch millis\n+   */\n+  static Long fromEpochDays(Number daysSinceEpoch) {\n+    return TimeUnit.DAYS.toMillis(daysSinceEpoch.longValue());\n+  }\n+\n+  /**\n+   * Converts nSecondsSinceEpoch (seconds that have been divided by a bucket), to epoch millis\n+   */\n+  static Long fromEpochSecondsBucket(Long seconds, Number bucket) {\n+    return TimeUnit.SECONDS.toMillis(seconds * bucket.intValue());\n+  }\n+\n+  /**\n+   * Converts nMinutesSinceEpoch (minutes that have been divided by a bucket), to epoch millis\n+   */\n+  static Long fromEpochMinutesBucket(Number minutes, Number bucket) {\n+    return TimeUnit.MINUTES.toMillis(minutes.longValue() * bucket.intValue());\n+  }\n+\n+  /**\n+   * Converts nHoursSinceEpoch (hours that have been divided by a bucket), to epoch millis\n+   */\n+  static Long fromEpochHoursBucket(Number hours, Number bucket) {\n+    return TimeUnit.HOURS.toMillis(hours.longValue() * bucket.intValue());\n+  }\n+\n+  /**\n+   * Converts nDaysSinceEpoch (days that have been divided by a bucket), to epoch millis\n+   */\n+  static Long fromEpochDaysBucket(Number daysSinceEpoch, Number bucket) {\n+    return TimeUnit.DAYS.toMillis(daysSinceEpoch.longValue() * bucket.intValue());\n+  }\n+\n+  String toDateTime(Long millis, String pattern) {\n+    return _dateTimePatternHandler.parseMillisToDateTimeString(millis, pattern);\n+  }\n \n-    return dateTimeFormatter.parseDateTime(dateTimeString);\n+  Long fromDateTime(String dateTimeString, String pattern) {\n+    return _dateTimePatternHandler.parseDateTimeStringToMillis(dateTimeString, pattern);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NjU0Mw==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419576543", "bodyText": "An instance of DefaultFunctionEvaluator is created per transform function in the schema. We don't want to call getFunctionRegistry multiple times, we'll just end up creating many registries right?", "author": "npawar", "createdAt": "2020-05-04T16:47:23Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java", "diffHunk": "@@ -50,11 +50,16 @@\n \n   public DefaultFunctionEvaluator(String expression)\n       throws Exception {\n+    this(expression, FunctionRegistryFactory.getFunctionRegistry());", "originalCommit": "0e551b2d46f6366b8d93be865bd2ac570d799e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MDkzMg==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422550932", "bodyText": "I think I'm creating individual DefaultFunctionRegistrys in the right place now, but still not 100% sure. Let me know - thanks! :)", "author": "reallocf", "createdAt": "2020-05-09T21:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NjU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java\nindex 30bdc14bf0..478b9ce3f0 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java\n\n@@ -50,16 +51,17 @@ public class DefaultFunctionEvaluator implements FunctionEvaluator {\n \n   public DefaultFunctionEvaluator(String expression)\n       throws Exception {\n-    this(expression, FunctionRegistryFactory.getFunctionRegistry());\n+    this(expression, DefaultFunctionRegistryFactory.getFunctionRegistry());\n   }\n \n-  public DefaultFunctionEvaluator(String expression, FunctionRegistry functionRegistry)\n+  public DefaultFunctionEvaluator(String expression, DefaultFunctionRegistry defaultFunctionRegistry)\n       throws Exception {\n     _arguments = new ArrayList<>();\n-    _rootNode = planExecution(TransformExpressionTree.compileToExpressionTree(expression), functionRegistry);\n+    _rootNode = planExecution(TransformExpressionTree.compileToExpressionTree(expression), defaultFunctionRegistry);\n   }\n \n-  private ExecutableNode planExecution(TransformExpressionTree expressionTree, FunctionRegistry functionRegistry)\n+  private ExecutableNode planExecution(TransformExpressionTree expressionTree,\n+      DefaultFunctionRegistry defaultFunctionRegistry)\n       throws Exception {\n     String transformName = expressionTree.getValue();\n     List<TransformExpressionTree> children = expressionTree.getChildren();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NDg5MA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419584890", "bodyText": "i didn't understand why this test was added", "author": "npawar", "createdAt": "2020-05-04T17:00:12Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -54,49 +54,73 @@ public void testExpressionWithColumn()\n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch('%s', '%s')\", input, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n   @Test\n   public void testMultiFunctionExpression()\n       throws Exception {\n-    FunctionRegistry.registerStaticFunction(MyFunc.class.getDeclaredMethod(\"reverseString\", String.class));\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(Lists\n+        .newArrayList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class),\n+            myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n-    String reversedInput = MyFunc.reverseString(input);\n+    String reversedInput = myFunc.reverseString(input);\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch(reverseString('%s'), '%s')\", reversedInput, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n-  private static class MyFunc {\n-    static String reverseString(String input) {\n-      return new StringBuilder(input).reverse().toString();\n-    }\n+  @Test\n+  public void testStateSharedBetweenRowsForExecution()\n+      throws Exception {", "originalCommit": "0e551b2d46f6366b8d93be865bd2ac570d799e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0ODcwOA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422548708", "bodyText": "This test basically just confirms that the internal state of the FunctionRegistry is shared between each row. I agree with the current implementation it's fairly self-explanatory, but you can imagine an implementation where the internals of the FunctionRegistry are different for each row. This is to make sure we don't somehow regress to that, because then we'd see a big performance hit for creating a SDF for each row.\nBut can definitely remove if it just feels like clutter to you \u263a\ufe0f", "author": "reallocf", "createdAt": "2020-05-09T21:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NDg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\nindex 9a749ed68f..29b74b3e93 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java\n\n@@ -55,12 +55,12 @@ public class DefaultFunctionEvaluatorTest {\n   public void testExpressionWithConstant()\n       throws Exception {\n     MyFunc myFunc = new MyFunc();\n-    FunctionRegistry functionRegistry = new FunctionRegistry(\n+    DefaultFunctionRegistry defaultFunctionRegistry = new DefaultFunctionRegistry(\n         Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch('%s', '%s')\", input, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, defaultFunctionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTIzNA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419601234", "bodyText": "It seems to me that this should be a concurrent hashmap. Consumers from different partitions may call this  across threads, am I right?", "author": "mcvsubbu", "createdAt": "2020-05-04T17:26:19Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -27,6 +32,8 @@\n  */\n public class DateTimeFunctions {\n \n+  private Map<String, DateTimeFormatter> _dateTimeFormatterMap = new HashMap<>();", "originalCommit": "0e551b2d46f6366b8d93be865bd2ac570d799e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MDg0MQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422550841", "bodyText": "Good catch! Yeah, I'm still new to the concurrency model here - thanks for keeping an eye out for this! :)", "author": "reallocf", "createdAt": "2020-05-09T21:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\nindex 0f9cf93ee1..7122e6c206 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n\n@@ -18,21 +18,68 @@\n  */\n package org.apache.pinot.core.data.function;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import java.util.concurrent.TimeUnit;\n import org.joda.time.DateTime;\n-import org.joda.time.format.DateTimeFormat;\n-import org.joda.time.format.DateTimeFormatter;\n \n \n /**\n  * Inbuilt date time related transform functions\n  * TODO: Exhaustively add all time conversion functions\n+ *  eg:\n+ *   1) round(time, roundingValue) - round(minutes, 10), round(millis, 15:MINUTES)\n+ *   2) simple date time transformations\n+ *   3) convert(from_format, to_format, bucketing)\n+ *\n+ *   NOTE:\n+ *   <code>toEpochXXXBucket</code> methods are only needed to convert from TimeFieldSpec to DateTimeFieldSpec, to maintain the backward compatibility.\n+ *   Practically, we should only need the <code>toEpochXXXRounded</code> methods.\n+ *   Use of <code>toEpochXXXBucket</code> bucket functions is discouraged unless you know what you are doing -\n+ *   (e.g. 5-minutes-since-epoch does not make sense to someone looking at the timestamp, or writing queries. instead, Millis-since-epoch rounded to 5 minutes makes a lot more sense)\n+ *\n+ *   An example timeFieldSpec that needs the bucketing function:\n+ *   <code>\n+ *     \"timeFieldSpec\": {\n+ *     \"incomingGranularitySpec\": {\n+ *       \"name\": \"incoming\",\n+ *       \"dataType\": \"LONG\",\n+ *       \"timeType\": \"MILLISECONDS\"\n+ *     },\n+ *     \"outgoingGranularitySpec\": {\n+ *        \"name\": \"outgoing\",\n+ *        \"dataType\": \"LONG\",\n+ *        \"timeType\": \"MINUTES\",\n+ *        \"timeSize\": 5\n+ *      }\n+ *   }\n+ *   </code>\n+ *   An equivalent dateTimeFieldSpec is\n+ *   <code>\n+ *     \"dateTimeFieldSpecs\": [{\n+ *       \"name\": \"outgoing\",\n+ *       \"dataType\": \"LONG\",\n+ *       \"format\": \"5:MINUTES:EPOCH\",\n+ *       \"granularity\": \"5:MINUTES\",\n+ *       \"transformFunction\": \"toEpochMinutesBucket(incoming, 5)\"\n+ *     }]\n+ *   </code>\n  */\n public class DateTimeFunctions {\n \n-  private Map<String, DateTimeFormatter> _dateTimeFormatterMap = new HashMap<>();\n+  private final DateTimePatternHandler _dateTimePatternHandler = new DateTimePatternHandler();\n+\n+  /**\n+   * Convert epoch millis to epoch seconds\n+   */\n+  static Long toEpochSeconds(Long millis) {\n+    return TimeUnit.MILLISECONDS.toSeconds(millis);\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch minutes\n+   */\n+  static Long toEpochMinutes(Long millis) {\n+    return TimeUnit.MILLISECONDS.toMinutes(millis);\n+  }\n \n   /**\n    * Convert epoch millis to epoch hours\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNDU3NA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419724574", "bodyText": "While this is working great for dateTimeFormat functions,  I wonder if we need to instead have multiple constructors (or init methods), and create DateTimeFunction object for every function we encounter in the schema.\nFor example, say we would want to add round(millis, 15:MINUTES). The logic for this is (millis / (15 * 60 * 1000)) * (15* 60 * 1000). We don't want to interpret \"15:MINUTES\" on every row. Instead, we can create a DateTimeFunction that saves \"15:MINUTES\" as a member variable, and then invoke round() on this object.\nWe can have init methods like\ninitBucket(int bucket), initRounding(int rounding), initSDF(String pattern), etc.", "author": "npawar", "createdAt": "2020-05-04T20:59:06Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -27,6 +32,8 @@\n  */\n public class DateTimeFunctions {\n \n+  private Map<String, DateTimeFormatter> _dateTimeFormatterMap = new HashMap<>();", "originalCommit": "0e551b2d46f6366b8d93be865bd2ac570d799e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDUwOA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423264508", "bodyText": "As per offline discussion, we will focus only on toDateTime for now. This comment can be taken up as a separate item in the future", "author": "npawar", "createdAt": "2020-05-11T19:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNDU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\nindex 0f9cf93ee1..7122e6c206 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n\n@@ -18,21 +18,68 @@\n  */\n package org.apache.pinot.core.data.function;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import java.util.concurrent.TimeUnit;\n import org.joda.time.DateTime;\n-import org.joda.time.format.DateTimeFormat;\n-import org.joda.time.format.DateTimeFormatter;\n \n \n /**\n  * Inbuilt date time related transform functions\n  * TODO: Exhaustively add all time conversion functions\n+ *  eg:\n+ *   1) round(time, roundingValue) - round(minutes, 10), round(millis, 15:MINUTES)\n+ *   2) simple date time transformations\n+ *   3) convert(from_format, to_format, bucketing)\n+ *\n+ *   NOTE:\n+ *   <code>toEpochXXXBucket</code> methods are only needed to convert from TimeFieldSpec to DateTimeFieldSpec, to maintain the backward compatibility.\n+ *   Practically, we should only need the <code>toEpochXXXRounded</code> methods.\n+ *   Use of <code>toEpochXXXBucket</code> bucket functions is discouraged unless you know what you are doing -\n+ *   (e.g. 5-minutes-since-epoch does not make sense to someone looking at the timestamp, or writing queries. instead, Millis-since-epoch rounded to 5 minutes makes a lot more sense)\n+ *\n+ *   An example timeFieldSpec that needs the bucketing function:\n+ *   <code>\n+ *     \"timeFieldSpec\": {\n+ *     \"incomingGranularitySpec\": {\n+ *       \"name\": \"incoming\",\n+ *       \"dataType\": \"LONG\",\n+ *       \"timeType\": \"MILLISECONDS\"\n+ *     },\n+ *     \"outgoingGranularitySpec\": {\n+ *        \"name\": \"outgoing\",\n+ *        \"dataType\": \"LONG\",\n+ *        \"timeType\": \"MINUTES\",\n+ *        \"timeSize\": 5\n+ *      }\n+ *   }\n+ *   </code>\n+ *   An equivalent dateTimeFieldSpec is\n+ *   <code>\n+ *     \"dateTimeFieldSpecs\": [{\n+ *       \"name\": \"outgoing\",\n+ *       \"dataType\": \"LONG\",\n+ *       \"format\": \"5:MINUTES:EPOCH\",\n+ *       \"granularity\": \"5:MINUTES\",\n+ *       \"transformFunction\": \"toEpochMinutesBucket(incoming, 5)\"\n+ *     }]\n+ *   </code>\n  */\n public class DateTimeFunctions {\n \n-  private Map<String, DateTimeFormatter> _dateTimeFormatterMap = new HashMap<>();\n+  private final DateTimePatternHandler _dateTimePatternHandler = new DateTimePatternHandler();\n+\n+  /**\n+   * Convert epoch millis to epoch seconds\n+   */\n+  static Long toEpochSeconds(Long millis) {\n+    return TimeUnit.MILLISECONDS.toSeconds(millis);\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch minutes\n+   */\n+  static Long toEpochMinutes(Long millis) {\n+    return TimeUnit.MILLISECONDS.toMinutes(millis);\n+  }\n \n   /**\n    * Convert epoch millis to epoch hours\n"}}, {"oid": "cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "url": "https://github.com/apache/pinot/commit/cd18349b7ef2b1c05b69e8d8728cbd8900cb9386", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-09T21:52:49Z", "type": "forcePushed"}, {"oid": "c6c78666d8f17e1bb30d2f321e34b596ae8f7f61", "url": "https://github.com/apache/pinot/commit/c6c78666d8f17e1bb30d2f321e34b596ae8f7f61", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-09T22:01:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NDgzNA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422564834", "bodyText": "Ended up getting a good number of formatting differences when I auto-formatted this file. Is my setup wrong or do y'all get these changes when formatting too?", "author": "reallocf", "createdAt": "2020-05-10T00:34:12Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "diffHunk": "@@ -52,12 +54,14 @@ public void testDateTimeTransformFunctions(String transformFunction, List<String\n     // toEpochSeconds w/ rounding\n     GenericRow row1_1 = new GenericRow();\n     row1_1.putValue(\"timestamp\", 1578685189000L);\n-    inputs.add(new Object[]{\"toEpochSecondsRounded(timestamp, 10)\", Lists.newArrayList(\"timestamp\"), row1_1, 1578685180L});\n+    inputs.add(\n+        new Object[]{\"toEpochSecondsRounded(timestamp, 10)\", Lists.newArrayList(\"timestamp\"), row1_1, 1578685180L});", "originalCommit": "c6c78666d8f17e1bb30d2f321e34b596ae8f7f61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDg2MA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423264860", "bodyText": "If you've taken the pinot style as mentioned in the Pinot docs, then you're fine.", "author": "npawar", "createdAt": "2020-05-11T19:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NDgzNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6f839079bf53dfca79aef18a5e9024b1c175ed8c", "url": "https://github.com/apache/pinot/commit/6f839079bf53dfca79aef18a5e9024b1c175ed8c", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-10T00:36:38Z", "type": "forcePushed"}, {"oid": "2161d78c1c98acb4e2e77e95d8dc7014238cde75", "url": "https://github.com/apache/pinot/commit/2161d78c1c98acb4e2e77e95d8dc7014238cde75", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-10T00:51:42Z", "type": "forcePushed"}, {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "url": "https://github.com/apache/pinot/commit/b800e040c32f2ee87f49dca3d70219ae337fc6e1", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-10T00:56:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MDE4Nw==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423250187", "bodyText": "Add javadocs to these 2 methods", "author": "npawar", "createdAt": "2020-05-11T18:55:12Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -203,4 +205,12 @@ static Long fromEpochHoursBucket(Number hours, Number bucket) {\n   static Long fromEpochDaysBucket(Number daysSinceEpoch, Number bucket) {\n     return TimeUnit.DAYS.toMillis(daysSinceEpoch.longValue() * bucket.intValue());\n   }\n+\n+  String toDateTime(Long millis, String pattern) {", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\nindex deffa5eff0..2c511970eb 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java\n\n@@ -206,11 +206,17 @@ public class DateTimeFunctions {\n     return TimeUnit.DAYS.toMillis(daysSinceEpoch.longValue() * bucket.intValue());\n   }\n \n+  /**\n+   * Converts epoch millis to DateTime string represented by pattern\n+   */\n   String toDateTime(Long millis, String pattern) {\n-    return dateTimePatternHandler.parseMillisToDateTimeString(millis, pattern);\n+    return _dateTimePatternHandler.parseEpochMillisToDateTimeString(millis, pattern);\n   }\n \n+  /**\n+   * Converts DateTime string represented by pattern to epoch millis\n+   */\n   Long fromDateTime(String dateTimeString, String pattern) {\n-    return dateTimePatternHandler.parseDateTimeStringToMillis(dateTimeString, pattern);\n+    return _dateTimePatternHandler.parseDateTimeStringToEpochMillis(dateTimeString, pattern);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MTM2MQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423251361", "bodyText": "Add some javadocs to the class and to the public methods\nCan we not call it cache? :) how about just patternDateTimeFormatterMap?\nTypically in this code base, we follow convention like Map<String, DateTimeFormatter> patternDateTimeFormatterMap = new ConcurrentHashMap<>() to declare a Map", "author": "npawar", "createdAt": "2020-05-11T18:57:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java\nindex 5d92370fcc..ae9017d704 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java\n\n@@ -18,28 +18,37 @@\n  */\n package org.apache.pinot.core.data.function;\n \n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n \n \n+/**\n+ * Handles DateTime conversions from long to strings and strings to longs based on passed patterns\n+ */\n public class DateTimePatternHandler {\n-  private final ConcurrentHashMap<String, DateTimeFormatter> patternDateTimeFormatterCache = new ConcurrentHashMap<>();\n+  private final Map<String, DateTimeFormatter> patternCache = new ConcurrentHashMap<>();\n \n-  public Long parseDateTimeStringToMillis(String dateTimeString, String pattern) {\n+  /**\n+   * Converts the dateTimeString of passed pattern into a long of the millis since epoch\n+   */\n+  public Long parseDateTimeStringToEpochMillis(String dateTimeString, String pattern) {\n     DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n     return dateTimeFormatter.parseMillis(dateTimeString);\n   }\n \n-  public String parseMillisToDateTimeString(Long millis, String pattern) {\n+  /**\n+   * Converts the millis representing seconds since epoch into a string of passed pattern\n+   */\n+  public String parseEpochMillisToDateTimeString(Long millis, String pattern) {\n     DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n     return dateTimeFormatter.print(millis);\n   }\n \n   private DateTimeFormatter getDateTimeFormatterFromCache(String pattern) {\n-    DateTimeFormatter dateTimeFormatter =\n-        patternDateTimeFormatterCache.getOrDefault(pattern, DateTimeFormat.forPattern(pattern));\n-    patternDateTimeFormatterCache.putIfAbsent(pattern, dateTimeFormatter);\n-    return dateTimeFormatter;\n+    // Note: withZoneUTC is overwritten if the timezone is specified directly in the pattern\n+    return patternCache\n+        .computeIfAbsent(pattern, missingPattern -> DateTimeFormat.forPattern(missingPattern).withZoneUTC());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MjE0Nw==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423252147", "bodyText": "Since you now have ConcurrentHashMap, you could cimply do\nreturn patternDateTimeFormatterCache.computeIfAbsent(pattern, DateTimeFormat::forPattern)", "author": "npawar", "createdAt": "2020-05-11T18:58:24Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+\n+public class DateTimePatternHandler {\n+  private final ConcurrentHashMap<String, DateTimeFormatter> patternDateTimeFormatterCache = new ConcurrentHashMap<>();\n+\n+  public Long parseDateTimeStringToMillis(String dateTimeString, String pattern) {\n+    DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n+    return dateTimeFormatter.parseMillis(dateTimeString);\n+  }\n+\n+  public String parseMillisToDateTimeString(Long millis, String pattern) {\n+    DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n+    return dateTimeFormatter.print(millis);\n+  }\n+\n+  private DateTimeFormatter getDateTimeFormatterFromCache(String pattern) {\n+    DateTimeFormatter dateTimeFormatter =\n+        patternDateTimeFormatterCache.getOrDefault(pattern, DateTimeFormat.forPattern(pattern));", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzMwMQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r425407301", "bodyText": "Ahh, very slick! :)", "author": "reallocf", "createdAt": "2020-05-14T20:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MjE0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java\nindex 5d92370fcc..ae9017d704 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java\n\n@@ -18,28 +18,37 @@\n  */\n package org.apache.pinot.core.data.function;\n \n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n \n \n+/**\n+ * Handles DateTime conversions from long to strings and strings to longs based on passed patterns\n+ */\n public class DateTimePatternHandler {\n-  private final ConcurrentHashMap<String, DateTimeFormatter> patternDateTimeFormatterCache = new ConcurrentHashMap<>();\n+  private final Map<String, DateTimeFormatter> patternCache = new ConcurrentHashMap<>();\n \n-  public Long parseDateTimeStringToMillis(String dateTimeString, String pattern) {\n+  /**\n+   * Converts the dateTimeString of passed pattern into a long of the millis since epoch\n+   */\n+  public Long parseDateTimeStringToEpochMillis(String dateTimeString, String pattern) {\n     DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n     return dateTimeFormatter.parseMillis(dateTimeString);\n   }\n \n-  public String parseMillisToDateTimeString(Long millis, String pattern) {\n+  /**\n+   * Converts the millis representing seconds since epoch into a string of passed pattern\n+   */\n+  public String parseEpochMillisToDateTimeString(Long millis, String pattern) {\n     DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n     return dateTimeFormatter.print(millis);\n   }\n \n   private DateTimeFormatter getDateTimeFormatterFromCache(String pattern) {\n-    DateTimeFormatter dateTimeFormatter =\n-        patternDateTimeFormatterCache.getOrDefault(pattern, DateTimeFormat.forPattern(pattern));\n-    patternDateTimeFormatterCache.putIfAbsent(pattern, dateTimeFormatter);\n-    return dateTimeFormatter;\n+    // Note: withZoneUTC is overwritten if the timezone is specified directly in the pattern\n+    return patternCache\n+        .computeIfAbsent(pattern, missingPattern -> DateTimeFormat.forPattern(missingPattern).withZoneUTC());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MzUzNA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423253534", "bodyText": "The name \"Default\" started becoming confusing and unintuitive to me. How about we rename Default to Inbuilt?\nSo we'll have InbuiltFunctionEvaluator and InbuiltFunctionRegistry. wdyt? I feel it's more clear, and anyway we refer to them as inbuilt functions when talking about them to someone.\nYou can also rename tests (pretty much whatever intellij makes you rename when renaming these classes)", "author": "npawar", "createdAt": "2020-05-11T19:01:04Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java", "diffHunk": "@@ -47,11 +47,13 @@\n public class DefaultFunctionEvaluator implements FunctionEvaluator {\n   // Root of the execution tree\n   private final ExecutableNode _rootNode;\n+  private final DefaultFunctionRegistry _defaultFunctionRegistry;", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/InbuiltFunctionEvaluator.java\nsimilarity index 94%\nrename from pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/data/function/InbuiltFunctionEvaluator.java\nindex 1fcb38b767..04719304f1 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/InbuiltFunctionEvaluator.java\n\n@@ -44,16 +44,16 @@ import org.apache.pinot.spi.data.readers.GenericRow;\n  *   </li>\n  * </ul>\n  */\n-public class DefaultFunctionEvaluator implements FunctionEvaluator {\n+public class InbuiltFunctionEvaluator implements FunctionEvaluator {\n   // Root of the execution tree\n   private final ExecutableNode _rootNode;\n-  private final DefaultFunctionRegistry _defaultFunctionRegistry;\n+  private final InbuiltFunctionRegistry _inbuiltFunctionRegistry;\n   private final List<String> _arguments;\n \n-  public DefaultFunctionEvaluator(String expression, DefaultFunctionRegistry defaultFunctionRegistry)\n+  public InbuiltFunctionEvaluator(String expression, InbuiltFunctionRegistry inbuiltFunctionRegistry)\n       throws Exception {\n     _arguments = new ArrayList<>();\n-    _defaultFunctionRegistry = defaultFunctionRegistry;\n+    _inbuiltFunctionRegistry = inbuiltFunctionRegistry;\n     _rootNode = planExecution(TransformExpressionTree.compileToExpressionTree(expression));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NTI5MA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423255290", "bodyText": "I think we should go back to calling this FunctionRegistryFactory (i dont remember if it was this one that you asked if we could rename, apologies if it was). The reason being, I see this class as being the Factory to return FunctionRegistries for all types of functions. For now we only have getInbuiltFunctionRegistry.", "author": "npawar", "createdAt": "2020-05-11T19:04:09Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import com.google.common.collect.Lists;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DefaultFunctionRegistryFactory {", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\nsimilarity index 83%\nrename from pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\nindex ea0fbba0b4..ea137788da 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\n\n@@ -21,18 +21,27 @@ package org.apache.pinot.core.data.function;\n import com.google.common.collect.Lists;\n import java.lang.reflect.Method;\n import java.util.List;\n+import java.util.Map;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-public class DefaultFunctionRegistryFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(DefaultFunctionRegistryFactory.class);\n+/**\n+ * Factory class to create a FunctionRegistry (currently only {@link InbuiltFunctionRegistry})\n+ */\n+public class FunctionRegistryFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(FunctionRegistryFactory.class);\n \n-  private DefaultFunctionRegistryFactory() {\n+  private FunctionRegistryFactory() {\n \n   }\n \n-  public static DefaultFunctionRegistry getDefaultFunctionRegistry() {\n+  /**\n+   * Creates an {@link InbuiltFunctionRegistry}\n+   *\n+   * The functionsToRegister list inside includes all the methods added to the InbuiltFunctionRegistry\n+   */\n+  public static InbuiltFunctionRegistry getInbuiltFunctionRegistry() {\n     List<Method> functionsToRegister;\n     DateTimeFunctions dateTimeFunctions = new DateTimeFunctions();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjM0NA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423256344", "bodyText": "javadoc for class. In the javadoc, please mention that \"for now we have only InbuiltFunctionRegistry\"", "author": "npawar", "createdAt": "2020-05-11T19:06:02Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import com.google.common.collect.Lists;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\nsimilarity index 83%\nrename from pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\nindex ea0fbba0b4..ea137788da 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\n\n@@ -21,18 +21,27 @@ package org.apache.pinot.core.data.function;\n import com.google.common.collect.Lists;\n import java.lang.reflect.Method;\n import java.util.List;\n+import java.util.Map;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-public class DefaultFunctionRegistryFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(DefaultFunctionRegistryFactory.class);\n+/**\n+ * Factory class to create a FunctionRegistry (currently only {@link InbuiltFunctionRegistry})\n+ */\n+public class FunctionRegistryFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(FunctionRegistryFactory.class);\n \n-  private DefaultFunctionRegistryFactory() {\n+  private FunctionRegistryFactory() {\n \n   }\n \n-  public static DefaultFunctionRegistry getDefaultFunctionRegistry() {\n+  /**\n+   * Creates an {@link InbuiltFunctionRegistry}\n+   *\n+   * The functionsToRegister list inside includes all the methods added to the InbuiltFunctionRegistry\n+   */\n+  public static InbuiltFunctionRegistry getInbuiltFunctionRegistry() {\n     List<Method> functionsToRegister;\n     DateTimeFunctions dateTimeFunctions = new DateTimeFunctions();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjYzMQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423256631", "bodyText": "Javadoc for this method.\nPlease mention that for now we only have DateTme functions in this inbuilt registry", "author": "npawar", "createdAt": "2020-05-11T19:06:38Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import com.google.common.collect.Lists;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DefaultFunctionRegistryFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DefaultFunctionRegistryFactory.class);\n+\n+  private DefaultFunctionRegistryFactory() {\n+\n+  }\n+\n+  public static DefaultFunctionRegistry getDefaultFunctionRegistry() {", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNDI2OA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r425424268", "bodyText": "Now that there's also a JsonFunction function, won't mention where the functions come from.", "author": "reallocf", "createdAt": "2020-05-14T20:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java b/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\nsimilarity index 83%\nrename from pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\nindex ea0fbba0b4..ea137788da 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java\n\n@@ -21,18 +21,27 @@ package org.apache.pinot.core.data.function;\n import com.google.common.collect.Lists;\n import java.lang.reflect.Method;\n import java.util.List;\n+import java.util.Map;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-public class DefaultFunctionRegistryFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(DefaultFunctionRegistryFactory.class);\n+/**\n+ * Factory class to create a FunctionRegistry (currently only {@link InbuiltFunctionRegistry})\n+ */\n+public class FunctionRegistryFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(FunctionRegistryFactory.class);\n \n-  private DefaultFunctionRegistryFactory() {\n+  private FunctionRegistryFactory() {\n \n   }\n \n-  public static DefaultFunctionRegistry getDefaultFunctionRegistry() {\n+  /**\n+   * Creates an {@link InbuiltFunctionRegistry}\n+   *\n+   * The functionsToRegister list inside includes all the methods added to the InbuiltFunctionRegistry\n+   */\n+  public static InbuiltFunctionRegistry getInbuiltFunctionRegistry() {\n     List<Method> functionsToRegister;\n     DateTimeFunctions dateTimeFunctions = new DateTimeFunctions();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1Nzc5NA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423257794", "bodyText": "comment should be \"fromDateTime\"", "author": "npawar", "createdAt": "2020-05-11T19:08:44Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "diffHunk": "@@ -160,8 +165,32 @@ public void testDateTimeTransformFunctions(String transformFunction, List<String\n \n     GenericRow row9_1 = new GenericRow();\n     row9_1.putValue(\"fifteenSecondsSinceEpoch\", 80640000L);\n-    inputs.add(new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n-        \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+    inputs.add(\n+        new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n+            \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+\n+    // toDateTime simple\n+    GenericRow row10_0 = new GenericRow();\n+    row10_0.putValue(\"dateTime\", 98697600000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row10_0, \"19730216\"});\n+\n+    // toDateTime complex\n+    GenericRow row10_1 = new GenericRow();\n+    row10_1.putValue(\"dateTime\", 1234567890000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n+        \"dateTime\"), row10_1, \"02/2009/13 15:31:30\"});\n+\n+    // toDateTime simple", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java\nindex 8668a22f63..a35222c521 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java\n\n@@ -178,19 +178,31 @@ public class DateTimeFunctionEvaluatorTest {\n     GenericRow row10_1 = new GenericRow();\n     row10_1.putValue(\"dateTime\", 1234567890000L);\n     inputs.add(new Object[]{\"toDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n-        \"dateTime\"), row10_1, \"02/2009/13 15:31:30\"});\n+        \"dateTime\"), row10_1, \"02/2009/13 23:31:30\"});\n \n-    // toDateTime simple\n+    // toDateTime with timezone\n+    GenericRow row10_2 = new GenericRow();\n+    row10_2.putValue(\"dateTime\", 7897897890000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'EEE MMM dd HH:mm:ss z yyyy')\", Lists.newArrayList(\n+        \"dateTime\"), row10_2, \"Mon Apr 10 20:31:30 +00:00 2220\"});\n+\n+    // fromDateTime simple\n     GenericRow row11_0 = new GenericRow();\n     row11_0.putValue(\"dateTime\", \"19730216\");\n     inputs\n-        .add(new Object[]{\"fromDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row11_0, 98697600000L});\n+        .add(new Object[]{\"fromDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row11_0, 98668800000L});\n \n-    // toDateTime complex\n+    // fromDateTime complex\n     GenericRow row11_1 = new GenericRow();\n     row11_1.putValue(\"dateTime\", \"02/2009/13 15:31:30\");\n     inputs.add(new Object[]{\"fromDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n-        \"dateTime\"), row11_1, 1234567890000L});\n+        \"dateTime\"), row11_1, 1234539090000L});\n+\n+    // fromDateTime with timezone\n+    GenericRow row11_2 = new GenericRow();\n+    row11_2.putValue(\"dateTime\", \"Mon Aug 24 12:36:46 America/Los_Angeles 2009\");\n+    inputs.add(new Object[]{\"fromDateTime(dateTime, \\\"EEE MMM dd HH:mm:ss ZZZ yyyy\\\")\", Lists.newArrayList(\n+        \"dateTime\"), row11_2, 1251142606000L});\n \n     return inputs.toArray(new Object[0][]);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1ODEzNQ==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423258135", "bodyText": "can you add some test cases that deal with time zones and conversion of time zones?", "author": "npawar", "createdAt": "2020-05-11T19:09:21Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "diffHunk": "@@ -160,8 +165,32 @@ public void testDateTimeTransformFunctions(String transformFunction, List<String\n \n     GenericRow row9_1 = new GenericRow();\n     row9_1.putValue(\"fifteenSecondsSinceEpoch\", 80640000L);\n-    inputs.add(new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n-        \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+    inputs.add(\n+        new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n+            \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+\n+    // toDateTime simple\n+    GenericRow row10_0 = new GenericRow();\n+    row10_0.putValue(\"dateTime\", 98697600000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row10_0, \"19730216\"});\n+\n+    // toDateTime complex\n+    GenericRow row10_1 = new GenericRow();\n+    row10_1.putValue(\"dateTime\", 1234567890000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n+        \"dateTime\"), row10_1, \"02/2009/13 15:31:30\"});\n+\n+    // toDateTime simple\n+    GenericRow row11_0 = new GenericRow();\n+    row11_0.putValue(\"dateTime\", \"19730216\");\n+    inputs\n+        .add(new Object[]{\"fromDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row11_0, 98697600000L});\n+\n+    // toDateTime complex", "originalCommit": "b800e040c32f2ee87f49dca3d70219ae337fc6e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2MTc0OA==", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423261748", "bodyText": "btw, the last 3 tests are failing in this file. Check the link below for Travis", "author": "npawar", "createdAt": "2020-05-11T19:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1ODEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a87532b5376a6d2de665a20226da563afb80bc8", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java\nindex 8668a22f63..a35222c521 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java\n\n@@ -178,19 +178,31 @@ public class DateTimeFunctionEvaluatorTest {\n     GenericRow row10_1 = new GenericRow();\n     row10_1.putValue(\"dateTime\", 1234567890000L);\n     inputs.add(new Object[]{\"toDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n-        \"dateTime\"), row10_1, \"02/2009/13 15:31:30\"});\n+        \"dateTime\"), row10_1, \"02/2009/13 23:31:30\"});\n \n-    // toDateTime simple\n+    // toDateTime with timezone\n+    GenericRow row10_2 = new GenericRow();\n+    row10_2.putValue(\"dateTime\", 7897897890000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'EEE MMM dd HH:mm:ss z yyyy')\", Lists.newArrayList(\n+        \"dateTime\"), row10_2, \"Mon Apr 10 20:31:30 +00:00 2220\"});\n+\n+    // fromDateTime simple\n     GenericRow row11_0 = new GenericRow();\n     row11_0.putValue(\"dateTime\", \"19730216\");\n     inputs\n-        .add(new Object[]{\"fromDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row11_0, 98697600000L});\n+        .add(new Object[]{\"fromDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row11_0, 98668800000L});\n \n-    // toDateTime complex\n+    // fromDateTime complex\n     GenericRow row11_1 = new GenericRow();\n     row11_1.putValue(\"dateTime\", \"02/2009/13 15:31:30\");\n     inputs.add(new Object[]{\"fromDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n-        \"dateTime\"), row11_1, 1234567890000L});\n+        \"dateTime\"), row11_1, 1234539090000L});\n+\n+    // fromDateTime with timezone\n+    GenericRow row11_2 = new GenericRow();\n+    row11_2.putValue(\"dateTime\", \"Mon Aug 24 12:36:46 America/Los_Angeles 2009\");\n+    inputs.add(new Object[]{\"fromDateTime(dateTime, \\\"EEE MMM dd HH:mm:ss ZZZ yyyy\\\")\", Lists.newArrayList(\n+        \"dateTime\"), row11_2, 1251142606000L});\n \n     return inputs.toArray(new Object[0][]);\n   }\n"}}, {"oid": "8a87532b5376a6d2de665a20226da563afb80bc8", "url": "https://github.com/apache/pinot/commit/8a87532b5376a6d2de665a20226da563afb80bc8", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-14T22:00:26Z", "type": "forcePushed"}, {"oid": "e6478a0fa0a6ad4bdd91c62c1a9ccbff143a8289", "url": "https://github.com/apache/pinot/commit/e6478a0fa0a6ad4bdd91c62c1a9ccbff143a8289", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-15T00:16:00Z", "type": "commit"}, {"oid": "e6478a0fa0a6ad4bdd91c62c1a9ccbff143a8289", "url": "https://github.com/apache/pinot/commit/e6478a0fa0a6ad4bdd91c62c1a9ccbff143a8289", "message": "Add toDateTime DateTimeFunction (#5313)\n\nAlso update the FunctionRegistry to avoid requiring functions to be static in order\nto initialize them. Adds related tests.", "committedDate": "2020-05-15T00:16:00Z", "type": "forcePushed"}]}