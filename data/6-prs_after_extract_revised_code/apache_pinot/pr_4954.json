{"pr_number": 4954, "pr_title": "Support schema evolution for consuming segments", "pr_createdAt": "2020-01-02T19:38:39Z", "pr_url": "https://github.com/apache/pinot/pull/4954", "timeline": [{"oid": "62d90a19cc5ecf9b606f6036fc801de4314029e5", "url": "https://github.com/apache/pinot/commit/62d90a19cc5ecf9b606f6036fc801de4314029e5", "message": "Support schema evolution for consuming segments", "committedDate": "2020-01-02T19:40:24Z", "type": "forcePushed"}, {"oid": "360ef90f19da8fdd48bd95d90d16a17aca87817d", "url": "https://github.com/apache/pinot/commit/360ef90f19da8fdd48bd95d90d16a17aca87817d", "message": "Support schema evolution for consuming segments", "committedDate": "2020-01-02T21:08:47Z", "type": "forcePushed"}, {"oid": "aa70cd698567aba7873c0220cd6da552d51f6cda", "url": "https://github.com/apache/pinot/commit/aa70cd698567aba7873c0220cd6da552d51f6cda", "message": "Support schema evolution for consuming segments", "committedDate": "2020-01-02T22:46:01Z", "type": "forcePushed"}, {"oid": "4974c9f3e67e32d305ab4fd4fd17a348360e8895", "url": "https://github.com/apache/pinot/commit/4974c9f3e67e32d305ab4fd4fd17a348360e8895", "message": "Support schema evolution for consuming segments", "committedDate": "2020-01-02T22:52:48Z", "type": "forcePushed"}, {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "url": "https://github.com/apache/pinot/commit/9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "message": "Support schema evolution for consuming segments", "committedDate": "2020-01-06T21:49:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjE1MA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363552150", "bodyText": "We have two APIs, one named getColumnNames() and the other named getPhysicalColumnNames().  select * should decide which one to use? Do we need a third one? Why can't getPhysicalColumnNames API return the right set of columns from the consuming segment?", "author": "mcvsubbu", "createdAt": "2020-01-07T01:02:11Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java", "diffHunk": "@@ -57,6 +58,13 @@\n    */\n   Set<String> getPhysicalColumnNames();\n \n+  /**\n+   * Returns all columns for the \"select *\" query\n+   *\n+   * @return Set of column names\n+   */\n+  Set<String> getColumnNamesForSelectStar();", "originalCommit": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MTI2OA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363561268", "bodyText": "For the consuming segment, select * should return physical columns + newly added columns. Since the newly added columns are provided by the virtual column provider, I feel it a bit weird to include them in getPhysicalColumnNames method.\nBasically the columns are\n\nphysical column\nvirtual column\n2.1 built-in virtual columns (docId, segmentName, hostName)\n2.2 newly added columns in the consuming segment\n\ngetColumnNames should return 1+2.1+2.2\ngetPhysicalColumnNames should return 1\ngetColumnNamesForSelectStar should return 1+2.2", "author": "haibow", "createdAt": "2020-01-07T01:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNDE5Nw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368324197", "bodyText": "Newly added columns should not be included in virtual column provider. You need a new provider for these columns.", "author": "mcvsubbu", "createdAt": "2020-01-19T21:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzIwNQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r377987205", "bodyText": "Why are we treating newly added columns as virtual?", "author": "mcvsubbu", "createdAt": "2020-02-12T00:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "dcd99e2f47361df3ac6c6aad416ee2b97e544cce", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java\nindex d3c8c68cfb..7d337b2804 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java\n\n@@ -58,13 +58,6 @@ public interface IndexSegment {\n    */\n   Set<String> getPhysicalColumnNames();\n \n-  /**\n-   * Returns all columns for the \"select *\" query\n-   *\n-   * @return Set of column names\n-   */\n-  Set<String> getColumnNamesForSelectStar();\n-\n   /**\n    * Returns the {@link DataSource} for the given column.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzA3MQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363553071", "bodyText": "Given that we dont have a member called _newSchema, why rename this? Can we keep it as _schema?", "author": "mcvsubbu", "createdAt": "2020-01-07T01:06:48Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;", "originalCommit": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MjA0NQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363562045", "bodyText": "Would like to avoid any potential confusion. If a schema update happens on the consuming segment, segmentMetadata and schema are still the original ones, without including the newly added columns", "author": "haibow", "createdAt": "2020-01-07T01:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxMjMzMw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r367012333", "bodyText": "nit: this feels like leaking information about very specific behavior into the MutableSegmentImpl. Instead, in the addExtraColumns method, the Schema param can be renamed to \"newSchema\". Besides, you already have _newColumnsFieldSpecMap", "author": "npawar", "createdAt": "2020-01-15T17:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyODQ1MA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r367728450", "bodyText": "Thanks for the comment. Updated the diff accordingly.", "author": "haibow", "createdAt": "2020-01-17T01:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e16c73072980666f24f16b252328f8f4f9c78b8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex 12df3f523e..4cd6644e73 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -80,13 +81,16 @@ public class MutableSegmentImpl implements MutableSegment {\n   private static final int MIN_ROWS_TO_INDEX = 1000_000; // Min size of recordIdMap for updatable metrics.\n   private static final int MIN_RECORD_ID_MAP_CACHE_SIZE = 10000; // Min overflow map size for updatable metrics.\n \n+  private static final int NODICT_VARIABLE_WIDTH_ESTIMATED_AVERAGE_VALUE_LENGTH_DEFAULT = 100;\n+  private static final int NODICT_VARIABLE_WIDTH_ESTIMATED_NUMBER_OF_VALUES_DEFAULT = 100_000;\n+\n   private final Logger _logger;\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _originalSchema;\n+  private final Schema _schema;\n   private final int _capacity;\n-  private final SegmentMetadata _originalSegmentMetadata;\n+  private final SegmentMetadata _segmentMetadata;\n   private final boolean _offHeap;\n   private final PinotDataBufferMemoryManager _memoryManager;\n   private final RealtimeSegmentStatsHistory _statsHistory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzE3Mg==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363553172", "bodyText": "Same here. Why rename?", "author": "mcvsubbu", "createdAt": "2020-01-07T01:07:21Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;\n   private final int _capacity;\n-  private final SegmentMetadata _segmentMetadata;\n+  private final SegmentMetadata _originalSegmentMetadata;", "originalCommit": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MjE1Mw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363562153", "bodyText": "same above, segmentMetadata is immutable, just to be super clear it does not reflect the newly added columns.", "author": "haibow", "createdAt": "2020-01-07T01:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NjM1MA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r364456350", "bodyText": "I would prefer to leave the names as is, and rename the new fields as _columnsAddedDuringConsumption or something like that. We can wait for others to chime in before we rename stuff", "author": "mcvsubbu", "createdAt": "2020-01-08T21:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyMzQ2OA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369323468", "bodyText": "Sounds good. I have reverted the rename", "author": "haibow", "createdAt": "2020-01-22T00:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9e16c73072980666f24f16b252328f8f4f9c78b8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex 12df3f523e..4cd6644e73 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -80,13 +81,16 @@ public class MutableSegmentImpl implements MutableSegment {\n   private static final int MIN_ROWS_TO_INDEX = 1000_000; // Min size of recordIdMap for updatable metrics.\n   private static final int MIN_RECORD_ID_MAP_CACHE_SIZE = 10000; // Min overflow map size for updatable metrics.\n \n+  private static final int NODICT_VARIABLE_WIDTH_ESTIMATED_AVERAGE_VALUE_LENGTH_DEFAULT = 100;\n+  private static final int NODICT_VARIABLE_WIDTH_ESTIMATED_NUMBER_OF_VALUES_DEFAULT = 100_000;\n+\n   private final Logger _logger;\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _originalSchema;\n+  private final Schema _schema;\n   private final int _capacity;\n-  private final SegmentMetadata _originalSegmentMetadata;\n+  private final SegmentMetadata _segmentMetadata;\n   private final boolean _offHeap;\n   private final PinotDataBufferMemoryManager _memoryManager;\n   private final RealtimeSegmentStatsHistory _statsHistory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzY1NQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363553655", "bodyText": "Just call the reload API on the segment, and let the segment decide if it is to be reloaded (i.e. depending on the config), and also how it should do it.", "author": "mcvsubbu", "createdAt": "2020-01-07T01:09:55Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "diffHunk": "@@ -194,7 +198,17 @@ private void reloadSegment(String tableNameWithType, SegmentMetadata segmentMeta\n \n     File indexDir = segmentMetadata.getIndexDir();\n     if (indexDir == null) {\n-      LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      if (!_instanceDataManagerConfig.shouldReloadConsumingSegment()) {\n+        LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+        return;\n+      }\n+      LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;", "originalCommit": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNDg3NQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363924875", "bodyText": "Could you elaborate on what you mean? To me, this method is the implementation of reload API (i.e. \"how it should do it\"). The logics below indicate how immutable segments are reloaded. Here it's a bit different for consuming segments - we just compare the schema and update the newly added columns, without doing an actual segment reload/replace.", "author": "haibow", "createdAt": "2020-01-07T19:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNzA1Mw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368327053", "bodyText": "I would bypass the references to DefaultColumnAction class altogether. Since we have a handle to the mutable index, just call the addExtraColumns API with the new schema. Just make sure that API handles well if we call it multiple times, either with same set of columns or newer ones than the previous time.\nAgreed with your observation that this is the reload API. It makes me think that reload API should be implemented as a part of the segment API, but that is a HUGE change, and I am not sure what else is involved there (and why it was done this way as a static method like ImmutableSegment.reload()).  So, let us not go into that.", "author": "mcvsubbu", "createdAt": "2020-01-19T22:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMDI5MA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369820290", "bodyText": "Removed defaultColumnActionMap from the signature. Multiple calls to the same consuming segment is covered. It will always compare the new schema with the original schema (when the segment started consuming), and add the new columns to the new columns map.", "author": "haibow", "createdAt": "2020-01-22T21:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e16c73072980666f24f16b252328f8f4f9c78b8", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java\nindex 9dee915a1a..6d6fd0c68f 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java\n\n@@ -204,11 +204,9 @@ public class HelixInstanceDataManager implements InstanceDataManager {\n       }\n       LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n       SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;\n-      Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap =\n-          BaseDefaultColumnHandler.computeDefaultColumnActionMap(schema, segmentMetadataImpl);\n       MutableSegmentImpl mutableSegment = (MutableSegmentImpl) (_tableDataManagerMap.get(tableNameWithType)\n           .acquireSegment(segmentMetadataImpl.getName()).getSegment());\n-      mutableSegment.addExtraColumns(schema, defaultColumnActionMap);\n+      mutableSegment.addExtraColumns(schema);\n       return;\n     }\n     Preconditions.checkState(indexDir.isDirectory(), \"Index directory: %s is not a directory\", indexDir);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NDQ4NQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363554485", "bodyText": "remove this. We already have _logger", "author": "mcvsubbu", "createdAt": "2020-01-07T01:14:08Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -68,6 +71,7 @@\n \n \n public class MutableSegmentImpl implements MutableSegment {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MutableSegmentImpl.class);", "originalCommit": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1bce2ef9e3da1af5740b7895d918cc87c3cfef2", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex 12df3f523e..e7f2554274 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -71,7 +71,6 @@ import org.slf4j.LoggerFactory;\n \n \n public class MutableSegmentImpl implements MutableSegment {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(MutableSegmentImpl.class);\n   // For multi-valued column, forward-index.\n   // Maximum number of multi-values per row. We assert on this.\n   private static final int MAX_MULTI_VALUES_PER_ROW = 1000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363555321", "bodyText": "Let us think of a better name for this", "author": "mcvsubbu", "createdAt": "2020-01-07T01:17:46Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the same value\n+ */\n+public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "originalCommit": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQzODY1Mg==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r364438652", "bodyText": "I thought about using \"singlevalue\" to express \"same\", but there might be ambiguity since we already use single/multi-value in fieldtype. Any suggestions here?", "author": "haibow", "createdAt": "2020-01-08T20:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5Mzk4Ng==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r366993986", "bodyText": "How about Default or Extra instead of Same?", "author": "npawar", "createdAt": "2020-01-15T17:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNTU5OQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r367725599", "bodyText": "Default sounds good to me. I will make the change if there are no objections/other suggestions.", "author": "haibow", "createdAt": "2020-01-17T01:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjU1Mg==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368326552", "bodyText": "Constant is another alternative", "author": "mcvsubbu", "createdAt": "2020-01-19T22:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTg1Mg==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369821852", "bodyText": "Thanks for the suggestion. Renamed to Constant", "author": "haibow", "createdAt": "2020-01-22T21:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e16c73072980666f24f16b252328f8f4f9c78b8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java b/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java\nsimilarity index 81%\nrename from pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java\nindex 2cfe40fd7c..a0314ec9c2 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java\n\n@@ -25,12 +25,12 @@ import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n \n \n /**\n- * Reader for the multi-value column with the same value\n+ * Reader for the multi-value column with the constant value\n  */\n-public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {\n+public class ConstantMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {\n   private int _length;\n \n-  public SameMultiValueInvertedIndex(int length) {\n+  public ConstantMultiValueInvertedIndex(int length) {\n     _length = length;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NjgwMQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363556801", "bodyText": "LOGGER  can be configured to log the class name, line number, etc. so we should not be logging class name", "author": "mcvsubbu", "createdAt": "2020-01-07T01:24:30Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/pruner/SegmentPrunerService.java", "diffHunk": "@@ -52,7 +52,7 @@ public SegmentPrunerService(SegmentPrunerConfig config) {\n   public boolean prune(IndexSegment segment, ServerQueryRequest queryRequest) {\n     for (SegmentPruner segmentPruner : _segmentPruners) {\n       if (segmentPruner.prune(segment, queryRequest)) {\n-        LOGGER.debug(\"Pruned segment: {}\", segment.getSegmentName());\n+        LOGGER.debug(\"{} pruned segment: {}\", segmentPruner.getClass().getName(), segment.getSegmentName());", "originalCommit": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2Mjk1MQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363562951", "bodyText": "I'm trying to log the class name for each SegmentPruner class being called, not the main SegmentPrunerService class", "author": "haibow", "createdAt": "2020-01-07T01:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NjgwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NzY4OA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363557688", "bodyText": "no other changes here? why touch this file?", "author": "mcvsubbu", "createdAt": "2020-01-07T01:29:20Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java", "diffHunk": "@@ -43,19 +43,19 @@\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.lang.StringEscapeUtils;\n-import org.apache.pinot.spi.data.MetricFieldSpec;\n-import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.common.metadata.segment.RealtimeSegmentZKMetadata;\n import org.apache.pinot.common.segment.SegmentMetadata;\n import org.apache.pinot.common.segment.StarTreeMetadata;\n-import org.apache.pinot.spi.utils.JsonUtils;\n-import org.apache.pinot.spi.utils.TimeUtils;\n import org.apache.pinot.core.indexsegment.generator.SegmentVersion;\n import org.apache.pinot.core.segment.creator.impl.V1Constants;\n import org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys;\n import org.apache.pinot.core.segment.store.SegmentDirectoryPaths;\n import org.apache.pinot.core.startree.v2.StarTreeV2Constants;\n import org.apache.pinot.core.startree.v2.StarTreeV2Metadata;\n+import org.apache.pinot.spi.data.MetricFieldSpec;", "originalCommit": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MzEzMA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363563130", "bodyText": "The file is auto formatted - had the wrong import order (after spi refactor). I guess I happened to format it when reading it", "author": "haibow", "createdAt": "2020-01-07T01:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NzY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NDgwNw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r374994807", "bodyText": "you can undo your checkout (or, checkout from master and re-populate it)", "author": "mcvsubbu", "createdAt": "2020-02-05T00:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NzY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NTQyOA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r376175428", "bodyText": "Since the import order should be fixed and has been fixed, I would like to keep the change as is. Will avoid such changes in the future.", "author": "haibow", "createdAt": "2020-02-07T01:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NzY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java\nindex 4e422a4394..0d0cd52102 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java\n\n@@ -45,18 +45,14 @@ import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.lang.StringEscapeUtils;\n import org.apache.pinot.common.metadata.segment.RealtimeSegmentZKMetadata;\n import org.apache.pinot.common.segment.SegmentMetadata;\n-import org.apache.pinot.common.segment.StarTreeMetadata;\n import org.apache.pinot.core.indexsegment.generator.SegmentVersion;\n import org.apache.pinot.core.segment.creator.impl.V1Constants;\n-import org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys;\n import org.apache.pinot.core.segment.store.SegmentDirectoryPaths;\n import org.apache.pinot.core.startree.v2.StarTreeV2Constants;\n import org.apache.pinot.core.startree.v2.StarTreeV2Metadata;\n-import org.apache.pinot.spi.data.MetricFieldSpec;\n import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.spi.utils.JsonUtils;\n import org.apache.pinot.spi.utils.TimeUtils;\n-import org.apache.pinot.startree.hll.HllConstants;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Duration;\n import org.joda.time.Interval;\n"}}, {"oid": "b1bce2ef9e3da1af5740b7895d918cc87c3cfef2", "url": "https://github.com/apache/pinot/commit/b1bce2ef9e3da1af5740b7895d918cc87c3cfef2", "message": "remove duplicate logger", "committedDate": "2020-01-07T19:59:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNDM0MA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368324340", "bodyText": "Should be info log", "author": "mcvsubbu", "createdAt": "2020-01-19T21:30:02Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -252,6 +258,16 @@ public long getMaxTime() {\n     return _maxTime;\n   }\n \n+  public void addExtraColumns(Schema newSchema,\n+      Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap) {\n+    defaultColumnActionMap.forEach(((columnName, defaultColumnAction) -> {\n+      if (defaultColumnAction.isAddAction() && !newSchema.getFieldSpecFor(columnName).isVirtualColumn()) {\n+        _newlyAddedColumnsFieldMap.put(columnName, newSchema.getFieldSpecFor(columnName));\n+      }\n+    }));\n+    _logger.debug(\"Newly added columns: \" + _newlyAddedColumnsFieldMap.toString());", "originalCommit": "996893163cfabf2923a5cd48431f32ba36479866", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e16c73072980666f24f16b252328f8f4f9c78b8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex eeb0fcd31e..4cd6644e73 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -258,14 +311,21 @@ public class MutableSegmentImpl implements MutableSegment {\n     return _maxTime;\n   }\n \n-  public void addExtraColumns(Schema newSchema,\n-      Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap) {\n+  public void addExtraColumns(Schema newSchema) {\n+    Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap =\n+        BaseDefaultColumnHandler.computeDefaultColumnActionMap(newSchema, (SegmentMetadataImpl) getSegmentMetadata());\n     defaultColumnActionMap.forEach(((columnName, defaultColumnAction) -> {\n-      if (defaultColumnAction.isAddAction() && !newSchema.getFieldSpecFor(columnName).isVirtualColumn()) {\n+      if (newSchema.getFieldSpecFor(columnName).isVirtualColumn()) {\n+        _logger.info(\"Skipped virtual column {}\", columnName);\n+      } else if (defaultColumnAction.isAddAction()) {\n         _newlyAddedColumnsFieldMap.put(columnName, newSchema.getFieldSpecFor(columnName));\n+      } else if (defaultColumnAction.isUpdateAction()) {\n+        _logger.warn(\"New schema is backward incompatible. Column {} is updated.\", columnName);\n+      } else if (defaultColumnAction.isRemoveAction()) {\n+        _logger.warn(\"New schema is backward incompatible. Column {} is removed.\", columnName);\n       }\n     }));\n-    _logger.debug(\"Newly added columns: \" + _newlyAddedColumnsFieldMap.toString());\n+    _logger.info(\"Newly added columns: \" + _newlyAddedColumnsFieldMap.toString());\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNTM5NA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368325394", "bodyText": "I think we should remove the DefaultColumnAction here. We know that there is only one thing we can do -- add columns with a default value. The only argument needed here is newSchema", "author": "mcvsubbu", "createdAt": "2020-01-19T21:46:15Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -252,6 +258,16 @@ public long getMaxTime() {\n     return _maxTime;\n   }\n \n+  public void addExtraColumns(Schema newSchema,\n+      Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap) {", "originalCommit": "996893163cfabf2923a5cd48431f32ba36479866", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTAwOQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369821009", "bodyText": "Done", "author": "haibow", "createdAt": "2020-01-22T21:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNTM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "9e16c73072980666f24f16b252328f8f4f9c78b8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex eeb0fcd31e..4cd6644e73 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -258,14 +311,21 @@ public class MutableSegmentImpl implements MutableSegment {\n     return _maxTime;\n   }\n \n-  public void addExtraColumns(Schema newSchema,\n-      Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap) {\n+  public void addExtraColumns(Schema newSchema) {\n+    Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap =\n+        BaseDefaultColumnHandler.computeDefaultColumnActionMap(newSchema, (SegmentMetadataImpl) getSegmentMetadata());\n     defaultColumnActionMap.forEach(((columnName, defaultColumnAction) -> {\n-      if (defaultColumnAction.isAddAction() && !newSchema.getFieldSpecFor(columnName).isVirtualColumn()) {\n+      if (newSchema.getFieldSpecFor(columnName).isVirtualColumn()) {\n+        _logger.info(\"Skipped virtual column {}\", columnName);\n+      } else if (defaultColumnAction.isAddAction()) {\n         _newlyAddedColumnsFieldMap.put(columnName, newSchema.getFieldSpecFor(columnName));\n+      } else if (defaultColumnAction.isUpdateAction()) {\n+        _logger.warn(\"New schema is backward incompatible. Column {} is updated.\", columnName);\n+      } else if (defaultColumnAction.isRemoveAction()) {\n+        _logger.warn(\"New schema is backward incompatible. Column {} is removed.\", columnName);\n       }\n     }));\n-    _logger.debug(\"Newly added columns: \" + _newlyAddedColumnsFieldMap.toString());\n+    _logger.info(\"Newly added columns: \" + _newlyAddedColumnsFieldMap.toString());\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjM0Ng==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368326346", "bodyText": "We should have a different column provider here that should be optimized better than the virtual column provider. The new column provider should not be built every time, but should stay in memory once built. What  may be updated is the number of rows. That will minimize additional allocation during query processing.\nAdd a new column provider factory (say, ConstantValueColumnProviderFactory) that has a map from the col name to the provider. The map is built lazily as columns are added to the query.", "author": "mcvsubbu", "createdAt": "2020-01-19T22:01:15Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -467,13 +483,22 @@ public SegmentMetadata getSegmentMetadata() {\n     return physicalColumnNames;\n   }\n \n+  @Override\n+  public Set<String> getColumnNamesForSelectStar() {\n+    return Sets.union(getPhysicalColumnNames(), _newlyAddedColumnsFieldMap.keySet());\n+  }\n+\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n+    if ((fieldSpec == null && _newlyAddedColumnsFieldMap.containsKey(columnName)) || fieldSpec.isVirtualColumn()) {", "originalCommit": "996893163cfabf2923a5cd48431f32ba36479866", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjQ2OQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368326469", "bodyText": "In that case, this logic is best handled like:\nif (fieldSpec != null) {\n  if (fieldSpec.isVirtualColumn()) {\n    // process virtual column from schema\n  } else {\n    // process real column from schema\n  }\n} else {\n  // process newly added column using the new provider factory\n}", "author": "mcvsubbu", "createdAt": "2020-01-19T22:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjM0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MTI0Mg==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369991242", "bodyText": "I don't see a strong reason to create another column provider factory just for this. I have updated the MutableSegmentImpl to cache the provider, and only initialize the provider or update row count when needed. This optimization will help other virtual columns ($segmentName and $hostName) too.", "author": "haibow", "createdAt": "2020-01-23T08:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9e16c73072980666f24f16b252328f8f4f9c78b8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex eeb0fcd31e..4cd6644e73 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -491,16 +558,30 @@ public class MutableSegmentImpl implements MutableSegment {\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if ((fieldSpec == null && _newlyAddedColumnsFieldMap.containsKey(columnName)) || fieldSpec.isVirtualColumn()) {\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n       // Column is either added during ingestion, or was initiated with a virtual column provider\n       if (fieldSpec == null) {\n         // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec\n         fieldSpec = _newlyAddedColumnsFieldMap.get(columnName);\n+        Preconditions.checkNotNull(fieldSpec, \"FieldSpec for \" + columnName + \" should not be null\");\n       }\n       VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider = VirtualColumnProviderFactory.buildProvider(virtualColumnContext);\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+\n+      _virtualColumnProviderMap\n+          .putIfAbsent(columnName, VirtualColumnProviderFactory.buildProvider(virtualColumnContext));\n+      VirtualColumnProvider virtualColumnProvider = _virtualColumnProviderMap.get(columnName);\n+      if (virtualColumnProvider instanceof DefaultNullValueVirtualColumnProvider) {\n+        _logger.debug(\"Updating number of rows for {}\", columnName);\n+        // We just need to update _numDocsIndexed, and return default values\n+        ((DefaultNullValueVirtualColumnProvider) virtualColumnProvider)\n+            .updateInvertedIndex(columnName, virtualColumnContext);\n+        return new ColumnDataSource(\n+            ((DefaultNullValueVirtualColumnProvider) virtualColumnProvider).getColumnIndexContainer(),\n+            ((DefaultNullValueVirtualColumnProvider) virtualColumnProvider).getColumnMetadata());\n+      } else {\n+        return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n+            virtualColumnProvider.buildMetadata(virtualColumnContext));\n+      }\n     } else {\n       return new ColumnDataSource(fieldSpec, _numDocsIndexed, _maxNumValuesMap.get(columnName),\n           _indexReaderWriterMap.get(columnName), _invertedIndexMap.get(columnName), _dictionaryMap.get(columnName),\n"}}, {"oid": "9e16c73072980666f24f16b252328f8f4f9c78b8", "url": "https://github.com/apache/pinot/commit/9e16c73072980666f24f16b252328f8f4f9c78b8", "message": "cache virtual column provider", "committedDate": "2020-01-23T08:30:15Z", "type": "forcePushed"}, {"oid": "0654400296c49a179840ed2cc935e646d447d466", "url": "https://github.com/apache/pinot/commit/0654400296c49a179840ed2cc935e646d447d466", "message": "cache virtual column provider", "committedDate": "2020-01-23T08:40:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzY2Mg==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r377987662", "bodyText": "Not sure why DefaultColumnAction is needed here. We can just iterate through the schema and add a newly added column's FieldSpec if it is not there already. The FieldSpec can have the null value. There is no question of handling incompatible schema evolution at that point.", "author": "mcvsubbu", "createdAt": "2020-02-12T00:56:49Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -299,6 +311,23 @@ public long getMaxTime() {\n     return _maxTime;\n   }\n \n+  public void addExtraColumns(Schema newSchema) {\n+    Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap =", "originalCommit": "0654400296c49a179840ed2cc935e646d447d466", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd99e2f47361df3ac6c6aad416ee2b97e544cce", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex 4cd6644e73..471c3ecb50 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -330,7 +354,6 @@ public class MutableSegmentImpl implements MutableSegment {\n \n   @Override\n   public boolean index(GenericRow row, @Nullable RowMetadata rowMetadata) {\n-\n     boolean canTakeMore;\n     // Update dictionary first\n     Map<String, Object> dictIdMap = updateDictionary(row);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzkxNw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r377987917", "bodyText": "We need to do this only if the newly added column is a virtual column, right?", "author": "mcvsubbu", "createdAt": "2020-02-12T00:57:50Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -521,15 +550,38 @@ public SegmentMetadata getSegmentMetadata() {\n     return physicalColumnNames;\n   }\n \n+  @Override\n+  public Set<String> getColumnNamesForSelectStar() {\n+    return Sets.union(getPhysicalColumnNames(), _newlyAddedColumnsFieldMap.keySet());\n+  }\n+\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec\n+        fieldSpec = _newlyAddedColumnsFieldMap.get(columnName);\n+        Preconditions.checkNotNull(fieldSpec, \"FieldSpec for \" + columnName + \" should not be null\");\n+      }\n       VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+", "originalCommit": "0654400296c49a179840ed2cc935e646d447d466", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd99e2f47361df3ac6c6aad416ee2b97e544cce", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex 4cd6644e73..471c3ecb50 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -550,11 +580,6 @@ public class MutableSegmentImpl implements MutableSegment {\n     return physicalColumnNames;\n   }\n \n-  @Override\n-  public Set<String> getColumnNamesForSelectStar() {\n-    return Sets.union(getPhysicalColumnNames(), _newlyAddedColumnsFieldMap.keySet());\n-  }\n-\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n"}}, {"oid": "dcd99e2f47361df3ac6c6aad416ee2b97e544cce", "url": "https://github.com/apache/pinot/commit/dcd99e2f47361df3ac6c6aad416ee2b97e544cce", "message": "Refactor column provider", "committedDate": "2020-02-19T22:51:09Z", "type": "forcePushed"}, {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "url": "https://github.com/apache/pinot/commit/e234e90c8da53d0daecf1f807f95d580bf3ee99c", "message": "Refactor column provider", "committedDate": "2020-02-20T23:41:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODMwMA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384838300", "bodyText": "please update the comment, not always construct virtual column provider, but dependng on the new column type -- whether virtual or physical column", "author": "mcvsubbu", "createdAt": "2020-02-26T23:55:12Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -555,12 +575,27 @@ public SegmentMetadata getSegmentMetadata() {\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n-      VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec", "originalCommit": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDI1NQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385554255", "bodyText": "updated", "author": "haibow", "createdAt": "2020-02-28T08:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex b5c02e60e9..615ce05a59 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -568,8 +561,8 @@ public class MutableSegmentImpl implements MutableSegment {\n     for (FieldSpec fieldSpec : _physicalFieldSpecs) {\n       physicalColumnNames.add(fieldSpec.getName());\n     }\n-\n-    return physicalColumnNames;\n+    // We should include newly added columns in the physical columns\n+    return Sets.union(physicalColumnNames, _newlyAddedColumnsFieldMap.keySet());\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1Nzc5Mg==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384857792", "bodyText": "Should we be using PluginClassLoader here?", "author": "mcvsubbu", "createdAt": "2020-02-27T00:59:12Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/virtualcolumn/ColumnProviderFactory.java", "diffHunk": "@@ -20,18 +20,29 @@\n \n import org.apache.pinot.common.utils.CommonConstants.Segment.BuiltInVirtualColumn;\n import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.core.segment.index.column.ColumnContext;\n+import org.apache.pinot.core.segment.index.column.ColumnProvider;\n+import org.apache.pinot.core.segment.index.column.DefaultNullValueColumnProvider;\n import org.apache.pinot.spi.data.DimensionFieldSpec;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n \n \n /**\n- * Factory for virtual column providers.\n+ * Factory for column providers.\n  */\n-public class VirtualColumnProviderFactory {\n-  public static VirtualColumnProvider buildProvider(String virtualColumnProvider) {\n+public class ColumnProviderFactory {\n+  public static ColumnProvider buildProvider(ColumnContext columnContext) {\n+    String virtualColumnProvider = columnContext.getFieldSpec().getVirtualColumnProvider();\n     try {\n-      return (VirtualColumnProvider) Class.forName(virtualColumnProvider).newInstance();\n+      // Use the preset virtualColumnProvider if available\n+      if (virtualColumnProvider != null && !virtualColumnProvider\n+          .equals(DefaultNullValueColumnProvider.class.getName())) {\n+        return (ColumnProvider) Class.forName(virtualColumnProvider).newInstance();\n+      }\n+      // Create the columnProvider that returns default null values based on the columnContext\n+      return DefaultNullValueColumnProvider.class.getDeclaredConstructor(ColumnContext.class)\n+          .newInstance(columnContext);", "originalCommit": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDMzOA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385554338", "bodyText": "Didn't know this. updated", "author": "haibow", "createdAt": "2020-02-28T08:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1Nzc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/virtualcolumn/ColumnProviderFactory.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/virtualcolumn/ColumnProviderFactory.java\nindex 4101305459..b96aced001 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/virtualcolumn/ColumnProviderFactory.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/virtualcolumn/ColumnProviderFactory.java\n\n@@ -26,6 +26,7 @@ import org.apache.pinot.core.segment.index.column.DefaultNullValueColumnProvider\n import org.apache.pinot.spi.data.DimensionFieldSpec;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.plugin.PluginManager;\n \n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1ODk1MQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384858951", "bodyText": "Can we do theese things inside the Column ProviderFFactory so that we dont need to cast here?", "author": "mcvsubbu", "createdAt": "2020-02-27T01:03:15Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -555,12 +575,27 @@ public SegmentMetadata getSegmentMetadata() {\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n-      VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec\n+        fieldSpec = _newlyAddedColumnsFieldMap.get(columnName);\n+        Preconditions.checkNotNull(fieldSpec, \"FieldSpec for \" + columnName + \" should not be null\");\n+      }\n+      ColumnContext columnContext = new ColumnContext(fieldSpec, _numDocsIndexed);\n+      ColumnProvider columnProvider = _newlyAddedColumnsProviderMap.getOrDefault(columnName, ColumnProviderFactory.buildProvider(columnContext));\n+      if (columnProvider instanceof DefaultNullValueColumnProvider) {", "originalCommit": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDc2MQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385554761", "bodyText": "updated a bit. kept one casting for updateInvertedIndex, since now we would like to cache the provider", "author": "haibow", "createdAt": "2020-02-28T08:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1ODk1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5OTk2Ng==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387399966", "bodyText": "Why cache it? We construct it afresh for each query in the offline case, this should not be worse than that, right?", "author": "mcvsubbu", "createdAt": "2020-03-04T01:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1ODk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex b5c02e60e9..615ce05a59 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -568,8 +561,8 @@ public class MutableSegmentImpl implements MutableSegment {\n     for (FieldSpec fieldSpec : _physicalFieldSpecs) {\n       physicalColumnNames.add(fieldSpec.getName());\n     }\n-\n-    return physicalColumnNames;\n+    // We should include newly added columns in the physical columns\n+    return Sets.union(physicalColumnNames, _newlyAddedColumnsFieldMap.keySet());\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MDAwMQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384860001", "bodyText": "we can just get physical column names, right? Are we trying to say that virtual columns that do not start with dollar sign are ok?", "author": "mcvsubbu", "createdAt": "2020-02-27T01:07:08Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java", "diffHunk": "@@ -83,7 +83,11 @@ private void extractColumnsAndTransforms(BrokerRequest brokerRequest, IndexSegme\n       // Extract selection expressions\n       List<String> selectionColumns = selection.getSelectionColumns();\n       if (selectionColumns.size() == 1 && selectionColumns.get(0).equals(\"*\")) {\n-        for (String column : indexSegment.getPhysicalColumnNames()) {\n+        for (String column : indexSegment.getColumnNames()) {", "originalCommit": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDgyOQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385554829", "bodyText": "right. updated", "author": "haibow", "createdAt": "2020-02-28T08:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MDAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java b/pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java\nindex c787e802cf..c1cca1ade5 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java\n\n@@ -83,11 +83,7 @@ public class TransformPlanNode implements PlanNode {\n       // Extract selection expressions\n       List<String> selectionColumns = selection.getSelectionColumns();\n       if (selectionColumns.size() == 1 && selectionColumns.get(0).equals(\"*\")) {\n-        for (String column : indexSegment.getColumnNames()) {\n-          if (column.charAt(0) == '$') {\n-            // For \"select *\" queries, ignore columns that start with \"$\"\n-            continue;\n-          }\n+        for (String column : indexSegment.getPhysicalColumnNames()) {\n           _projectionColumns.add(column);\n           _expressions.add(new TransformExpressionTree(new IdentifierAstNode(column)));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTA0MA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384861040", "bodyText": "Since column context already contains the number of rows, we can call update inverted index right here", "author": "mcvsubbu", "createdAt": "2020-02-27T01:10:39Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.column;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.core.io.reader.impl.ConstantMultiValueInvertedIndex;\n+import org.apache.pinot.core.io.reader.impl.ConstantSingleValueInvertedIndex;\n+import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.core.segment.index.readers.Dictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleDoubleDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleFloatDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleIntDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleLongDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleStringDictionary;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * Provide the default null value.\n+ */\n+public class DefaultNullValueColumnProvider extends BaseColumnProvider {\n+\n+  Dictionary _dictionary;\n+  ColumnMetadata _columnMetadata;\n+\n+  public DefaultNullValueColumnProvider(ColumnContext columnContext) {\n+    buildDictionary(columnContext);\n+    buildMetadata(columnContext);\n+    buildColumnIndexContainer(columnContext);", "originalCommit": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTY3MA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385555670", "bodyText": "Not sure what you mean here. This is inside constructor, right? The current idea is to cache the provider when applicable and avoid rebuilding everything", "author": "haibow", "createdAt": "2020-02-28T08:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTUwOQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387401509", "bodyText": "Hmm... ok, we rebuild this column provider everytime in the offline world, but yes. maybe caching can help (but, as you note, we need to update the inverted index, and later, any other auto-generated index if need be).", "author": "mcvsubbu", "createdAt": "2020-03-04T01:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java\nindex 5714074a57..a6877d9e6a 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java\n\n@@ -22,12 +22,12 @@ import com.google.common.base.Preconditions;\n import org.apache.pinot.core.io.reader.impl.ConstantMultiValueInvertedIndex;\n import org.apache.pinot.core.io.reader.impl.ConstantSingleValueInvertedIndex;\n import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.core.segment.index.readers.ConstantValueDoubleDictionary;\n+import org.apache.pinot.core.segment.index.readers.ConstantValueFloatDictionary;\n+import org.apache.pinot.core.segment.index.readers.ConstantValueIntDictionary;\n+import org.apache.pinot.core.segment.index.readers.ConstantValueLongDictionary;\n+import org.apache.pinot.core.segment.index.readers.ConstantValueStringDictionary;\n import org.apache.pinot.core.segment.index.readers.Dictionary;\n-import org.apache.pinot.core.segment.index.readers.SingleDoubleDictionary;\n-import org.apache.pinot.core.segment.index.readers.SingleFloatDictionary;\n-import org.apache.pinot.core.segment.index.readers.SingleIntDictionary;\n-import org.apache.pinot.core.segment.index.readers.SingleLongDictionary;\n-import org.apache.pinot.core.segment.index.readers.SingleStringDictionary;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.FieldSpec.DataType;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTg4OQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384861889", "bodyText": "Not sure if we still need to modify this class. It should remain the same for the completed segments, right?", "author": "mcvsubbu", "createdAt": "2020-02-27T01:13:37Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java", "diffHunk": "@@ -155,27 +155,37 @@ public void updateDefaultColumns()\n    *\n    * @return Action Map for each column.\n    */\n-  private Map<String, DefaultColumnAction> computeDefaultColumnActionMap() {\n+  public static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema,", "originalCommit": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTk3Nw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385555977", "bodyText": "Removed unused code for the consuming segment. I kept some changes for the unit tests that I added for the committed segment", "author": "haibow", "createdAt": "2020-02-28T08:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java\nindex 6ab7f5b4f9..368c52a48d 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java\n\n@@ -155,37 +164,27 @@ public abstract class BaseDefaultColumnHandler implements DefaultColumnHandler {\n    *\n    * @return Action Map for each column.\n    */\n-  public static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema,\n-      SegmentMetadataImpl segmentMetadata) {\n+  static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema, SegmentMetadataImpl segmentMetadata) {\n     Map<String, DefaultColumnAction> defaultColumnActionMap = new HashMap<>();\n \n-    // Consuming segment would have null columnMetadata, since some columnMetadata like cardinality is not available yet\n-    boolean isConsumingSegment = segmentMetadata.getColumnMetadataMap() == null ? true : false;\n-\n     // Compute ADD and UPDATE actions.\n     Collection<String> columnsInSchema = schema.getPhysicalColumnNames();\n-    LOGGER.debug(\"columnsInSchema: \" + columnsInSchema.toString());\n     for (String column : columnsInSchema) {\n       FieldSpec fieldSpecInSchema = schema.getFieldSpecFor(column);\n       Preconditions.checkNotNull(fieldSpecInSchema);\n       FieldSpec.FieldType fieldTypeInSchema = fieldSpecInSchema.getFieldType();\n+      ColumnMetadata columnMetadata = segmentMetadata.getColumnMetadataFor(column);\n \n-      ColumnMetadata columnMetadata = isConsumingSegment ? null : segmentMetadata.getColumnMetadataFor(column);\n-      // For the consuming segment, columnMetadata is null\n-      // So we use the fieldSpec in the segment metadata schema for relevant information about the column\n-      FieldSpec columnFieldSpec = segmentMetadata.getSchema().getFieldSpecFor(column);\n-\n-      if (columnMetadata != null || columnFieldSpec != null) {\n+      if (columnMetadata != null) {\n         // Column exists in the segment, check if we need to update the value.\n \n-        // For the committed segment, Only check for auto-generated column.\n-        if (columnMetadata != null && !columnMetadata.isAutoGenerated()) {\n+        // Only check for auto-generated column.\n+        if (!columnMetadata.isAutoGenerated()) {\n           continue;\n         }\n \n         // Check the field type matches.\n-        FieldSpec.FieldType fieldTypeInMetadata =\n-            isConsumingSegment ? columnFieldSpec.getFieldType() : columnMetadata.getFieldType();\n+        FieldSpec.FieldType fieldTypeInMetadata = columnMetadata.getFieldType();\n         if (fieldTypeInMetadata != fieldTypeInSchema) {\n           String failureMessage = \"Field type: \" + fieldTypeInMetadata + \" for auto-generated column: \" + column\n               + \" does not match field type: \" + fieldTypeInSchema\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MjQ3MQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384862471", "bodyText": "the name seems like oxymoron :), but I cannot think of a better name. @Jackie-Jiang ?\nConstantValueDoubleDictionary?", "author": "mcvsubbu", "createdAt": "2020-02-27T01:15:52Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/SingleDoubleDictionary.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers;\n+\n+/**\n+ * Dictionary for single-value double\n+ */\n+\n+public class SingleDoubleDictionary extends BaseImmutableDictionary {", "originalCommit": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NjAyNw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385556027", "bodyText": "Renamed :)", "author": "haibow", "createdAt": "2020-02-28T08:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MjQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/SingleDoubleDictionary.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java\nsimilarity index 89%\nrename from pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/SingleDoubleDictionary.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java\nindex 259afb323b..5dc7e13533 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/SingleDoubleDictionary.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java\n\n@@ -19,13 +19,13 @@\n package org.apache.pinot.core.segment.index.readers;\n \n /**\n- * Dictionary for single-value double\n+ * Dictionary for constant-value double\n  */\n \n-public class SingleDoubleDictionary extends BaseImmutableDictionary {\n+public class ConstantValueDoubleDictionary extends BaseImmutableDictionary {\n   final Double _value;\n \n-  public SingleDoubleDictionary(Double value) {\n+  public ConstantValueDoubleDictionary(Double value) {\n     super(1);\n     _value = value;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MzI4OQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384863289", "bodyText": "Where are you releasing the segment?", "author": "mcvsubbu", "createdAt": "2020-02-27T01:18:53Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "diffHunk": "@@ -197,7 +201,15 @@ private void reloadSegment(String tableNameWithType, SegmentMetadata segmentMeta\n \n     File indexDir = segmentMetadata.getIndexDir();\n     if (indexDir == null) {\n-      LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      if (!_instanceDataManagerConfig.shouldReloadConsumingSegment()) {\n+        LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+        return;\n+      }\n+      LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;\n+      MutableSegmentImpl mutableSegment = (MutableSegmentImpl) (_tableDataManagerMap.get(tableNameWithType)\n+          .acquireSegment(segmentMetadataImpl.getName()).getSegment());", "originalCommit": "e234e90c8da53d0daecf1f807f95d580bf3ee99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NjExMw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385556113", "bodyText": "Good catch. added the release logic.", "author": "haibow", "createdAt": "2020-02-28T08:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MzI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3536a1346ba09601389f044669d260326e4f69e", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java\nindex 8c8e612946..efd90934a9 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java\n\n@@ -207,9 +208,15 @@ public class HelixInstanceDataManager implements InstanceDataManager {\n       }\n       LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n       SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;\n-      MutableSegmentImpl mutableSegment = (MutableSegmentImpl) (_tableDataManagerMap.get(tableNameWithType)\n-          .acquireSegment(segmentMetadataImpl.getName()).getSegment());\n-      mutableSegment.addExtraColumns(schema);\n+      SegmentDataManager segmentDataManager = _tableDataManagerMap.get(tableNameWithType)\n+          .acquireSegment(segmentMetadataImpl.getName());\n+      try {\n+        MutableSegmentImpl mutableSegment = (MutableSegmentImpl) (segmentDataManager.getSegment());\n+        mutableSegment.addExtraColumns(schema);\n+      }\n+      finally {\n+        _tableDataManagerMap.get(tableNameWithType).releaseSegment(segmentDataManager);\n+      }\n       return;\n     }\n     Preconditions.checkState(indexDir.isDirectory(), \"Index directory: %s is not a directory\", indexDir);\n"}}, {"oid": "b3536a1346ba09601389f044669d260326e4f69e", "url": "https://github.com/apache/pinot/commit/b3536a1346ba09601389f044669d260326e4f69e", "message": "Address review", "committedDate": "2020-02-28T02:15:02Z", "type": "forcePushed"}, {"oid": "19ad031ba7034bc6fd9b2f96e20ac7062aedd9a9", "url": "https://github.com/apache/pinot/commit/19ad031ba7034bc6fd9b2f96e20ac7062aedd9a9", "message": "Address review", "committedDate": "2020-02-28T04:36:32Z", "type": "forcePushed"}, {"oid": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506", "url": "https://github.com/apache/pinot/commit/0fb657b15fd0d0b6f791ba2ea11bf2c708659506", "message": "Address review", "committedDate": "2020-02-28T06:22:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5NjQ1MA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387396450", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n          \n          \n            \n              private final Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();", "author": "mcvsubbu", "createdAt": "2020-03-04T01:18:20Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -125,6 +128,9 @@\n   private volatile long _latestIngestionTimeMs = Long.MIN_VALUE;\n \n   private RealtimeLuceneReaders _realtimeLuceneReaders;\n+  // If the table schema is changed before the consuming segment is committed, newly added columns would appear in _newlyAddedColumnsFieldMap.\n+  private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();", "originalCommit": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex 615ce05a59..f217ce3b9c 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -129,8 +128,8 @@ public class MutableSegmentImpl implements MutableSegment {\n \n   private RealtimeLuceneReaders _realtimeLuceneReaders;\n   // If the table schema is changed before the consuming segment is committed, newly added columns would appear in _newlyAddedColumnsFieldMap.\n-  private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n-  private volatile Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();\n+  private final Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n+  private final Map<String, FieldSpec> _newlyAddedPhysicalColumnsFieldMap = new ConcurrentHashMap();\n \n   public MutableSegmentImpl(RealtimeSegmentConfig config) {\n     _segmentName = config.getSegmentName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5NjU5MQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387396591", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private volatile Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();\n          \n          \n            \n              private final Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();", "author": "mcvsubbu", "createdAt": "2020-03-04T01:18:33Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -125,6 +128,9 @@\n   private volatile long _latestIngestionTimeMs = Long.MIN_VALUE;\n \n   private RealtimeLuceneReaders _realtimeLuceneReaders;\n+  // If the table schema is changed before the consuming segment is committed, newly added columns would appear in _newlyAddedColumnsFieldMap.\n+  private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n+  private volatile Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();", "originalCommit": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5Njc0NA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387396744", "bodyText": "You don't need volatile. You never set these values again in the class.", "author": "mcvsubbu", "createdAt": "2020-03-04T01:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5NjU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex 615ce05a59..f217ce3b9c 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -129,8 +128,8 @@ public class MutableSegmentImpl implements MutableSegment {\n \n   private RealtimeLuceneReaders _realtimeLuceneReaders;\n   // If the table schema is changed before the consuming segment is committed, newly added columns would appear in _newlyAddedColumnsFieldMap.\n-  private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n-  private volatile Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();\n+  private final Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n+  private final Map<String, FieldSpec> _newlyAddedPhysicalColumnsFieldMap = new ConcurrentHashMap();\n \n   public MutableSegmentImpl(RealtimeSegmentConfig config) {\n     _segmentName = config.getSegmentName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5ODUxNQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387398515", "bodyText": "What if newly introduced column is a virtual column?", "author": "mcvsubbu", "createdAt": "2020-03-04T01:21:45Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -546,19 +561,32 @@ public SegmentMetadata getSegmentMetadata() {\n     for (FieldSpec fieldSpec : _physicalFieldSpecs) {\n       physicalColumnNames.add(fieldSpec.getName());\n     }\n-\n-    return physicalColumnNames;\n+    // We should include newly added columns in the physical columns", "originalCommit": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA4NDkwOQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r388084909", "bodyText": "Good question. Updated the logic to handle virtual column", "author": "haibow", "createdAt": "2020-03-05T05:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5ODUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\nindex 615ce05a59..f217ce3b9c 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\n@@ -562,7 +565,7 @@ public class MutableSegmentImpl implements MutableSegment {\n       physicalColumnNames.add(fieldSpec.getName());\n     }\n     // We should include newly added columns in the physical columns\n-    return Sets.union(physicalColumnNames, _newlyAddedColumnsFieldMap.keySet());\n+    return Sets.union(physicalColumnNames, _newlyAddedPhysicalColumnsFieldMap.keySet());\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMDg3Ng==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387400876", "bodyText": "Are these new imports needed?", "author": "mcvsubbu", "createdAt": "2020-03-04T01:30:27Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java", "diffHunk": "@@ -39,7 +39,27 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.*;\n+import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.BITS_PER_ELEMENT;", "originalCommit": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3OTQ3Nw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r388079477", "bodyText": "Yes they were all used before. Formatting removed the wildcard import", "author": "haibow", "createdAt": "2020-03-05T05:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMDg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ec98d2e7a40bbd539b0dae0bdf9c3265d75f9153", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java\nindex d4d2107c35..8a5edb3d3e 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java\n\n@@ -39,27 +39,7 @@ import org.apache.pinot.spi.data.TimeFieldSpec;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.BITS_PER_ELEMENT;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.CARDINALITY;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.COLUMN_TYPE;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.DATA_TYPE;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.DATETIME_FORMAT;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.DATETIME_GRANULARITY;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.DEFAULT_NULL_VALUE;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.DICTIONARY_ELEMENT_SIZE;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.HAS_DICTIONARY;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.HAS_INVERTED_INDEX;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.HAS_NULL_VALUE;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.IS_AUTO_GENERATED;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.IS_SINGLE_VALUED;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.IS_SORTED;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.MAX_MULTI_VALUE_ELEMTS;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.MAX_VALUE;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.MIN_VALUE;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.TEXT_INDEX_TYPE;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.TOTAL_DOCS;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.TOTAL_NUMBER_OF_ENTRIES;\n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.getKeyFor;\n+import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.*;\n import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Segment.SEGMENT_PADDING_CHARACTER;\n import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Segment.TIME_UNIT;\n \n"}}, {"oid": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "url": "https://github.com/apache/pinot/commit/c122eecb53150e9d6fe1d3f528fba28c01849de1", "message": "Address comments", "committedDate": "2020-03-05T07:07:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDAyNw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r388584027", "bodyText": "you need deeper equals definition, make sure that the inverted index obects are equal. etc.", "author": "mcvsubbu", "createdAt": "2020-03-05T21:44:58Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java", "diffHunk": "@@ -540,4 +560,31 @@ public String toString() {\n \n     return result.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object object) {\n+    if (this == object) {\n+      return true;\n+    }\n+    if (object instanceof ColumnMetadata) {\n+      ColumnMetadata columnMetadata = (ColumnMetadata) object;\n+      return getColumnName() == columnMetadata.getColumnName() && getCardinality() == columnMetadata.getCardinality()\n+          && getTotalDocs() == columnMetadata.getTotalDocs() && getDataType().equals(columnMetadata.getDataType())\n+          && getBitsPerElement() == columnMetadata.getBitsPerElement() && getFieldSpec()\n+          .equals(columnMetadata.getFieldSpec()) && isSorted() == columnMetadata.isSorted()\n+          && hasNulls() == columnMetadata.hasNulls() && hasDictionary() == columnMetadata.hasDictionary()", "originalCommit": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0NDA4OA==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r388644088", "bodyText": "This is metadata, with only boolean of hasInvertedIndex or not. No actual inverted index obj in this class.", "author": "haibow", "createdAt": "2020-03-06T00:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "ec98d2e7a40bbd539b0dae0bdf9c3265d75f9153", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java\nindex d4d2107c35..8a5edb3d3e 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java\n\n@@ -560,31 +540,4 @@ public class ColumnMetadata {\n \n     return result.toString();\n   }\n-\n-  @Override\n-  public boolean equals(Object object) {\n-    if (this == object) {\n-      return true;\n-    }\n-    if (object instanceof ColumnMetadata) {\n-      ColumnMetadata columnMetadata = (ColumnMetadata) object;\n-      return getColumnName() == columnMetadata.getColumnName() && getCardinality() == columnMetadata.getCardinality()\n-          && getTotalDocs() == columnMetadata.getTotalDocs() && getDataType().equals(columnMetadata.getDataType())\n-          && getBitsPerElement() == columnMetadata.getBitsPerElement() && getFieldSpec()\n-          .equals(columnMetadata.getFieldSpec()) && isSorted() == columnMetadata.isSorted()\n-          && hasNulls() == columnMetadata.hasNulls() && hasDictionary() == columnMetadata.hasDictionary()\n-          && hasInvertedIndex() == columnMetadata.hasInvertedIndex() && isSingleValue() == columnMetadata\n-          .isSingleValue() && isVirtual() == columnMetadata.isVirtual() && getMaxNumberOfMultiValues() == columnMetadata\n-          .getMaxNumberOfMultiValues() && getTotalNumberOfEntries() == columnMetadata.getTotalNumberOfEntries()\n-          && isAutoGenerated() == columnMetadata.isAutoGenerated() && getDefaultNullValueString() == columnMetadata\n-          .getDefaultNullValueString() && getTimeUnit() == (columnMetadata.getTimeUnit())\n-          && getPaddingCharacter() == columnMetadata.getPaddingCharacter() && minValue == (columnMetadata.getMinValue())\n-          && maxValue == (columnMetadata.getMaxValue()) && getPartitionFunction() == (columnMetadata\n-          .getPartitionFunction()) && getNumPartitions() == columnMetadata.getNumPartitions()\n-          && getPartitions() == (columnMetadata.getPartitions()) && getDateTimeFormat() == (columnMetadata\n-          .getDateTimeFormat()) && getDateTimeGranularity() == (columnMetadata.getDateTimeGranularity())\n-          && getTextIndexType().equals(columnMetadata.getTextIndexType());\n-    }\n-    return false;\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NTI5OQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389895299", "bodyText": "Can we revert this class name change? Seems it is not used in this pr?", "author": "Jackie-Jiang", "createdAt": "2020-03-09T18:55:39Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -51,7 +51,7 @@\n import org.apache.pinot.core.realtime.impl.RealtimeSegmentStatsHistory;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.core.segment.index.loader.LoaderUtils;\n-import org.apache.pinot.core.segment.virtualcolumn.VirtualColumnProviderFactory;\n+import org.apache.pinot.core.segment.virtualcolumn.ColumnProviderFactory;", "originalCommit": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTUyMQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389905521", "bodyText": "It is used in MutableSegmentImpl to create DefaultNullValueColumnProvider, for virtual and the extra columns", "author": "haibow", "createdAt": "2020-03-09T19:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NTI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ec98d2e7a40bbd539b0dae0bdf9c3265d75f9153", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java\nindex 0848ac842b..94c96148b4 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java\n\n@@ -51,7 +51,7 @@ import org.apache.pinot.core.indexsegment.immutable.ImmutableSegmentLoader;\n import org.apache.pinot.core.realtime.impl.RealtimeSegmentStatsHistory;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.core.segment.index.loader.LoaderUtils;\n-import org.apache.pinot.core.segment.virtualcolumn.ColumnProviderFactory;\n+import org.apache.pinot.core.segment.virtualcolumn.VirtualColumnProviderFactory;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMjE2Mg==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389912162", "bodyText": "Multi-value column inverted index should be bitmap based, and it can never to sorted.", "author": "Jackie-Jiang", "createdAt": "2020-03-09T19:28:48Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the constant value\n+ */\n+public class ConstantMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "originalCommit": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec98d2e7a40bbd539b0dae0bdf9c3265d75f9153", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java b/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java\nsimilarity index 71%\nrename from pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java\nindex 4765609bb7..2cfe40fd7c 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java\n\n@@ -25,12 +25,12 @@ import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n \n \n /**\n- * Reader for the multi-value column with the constant value\n+ * Reader for the multi-value column with the same value\n  */\n-public class ConstantMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {\n+public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {\n   private int _length;\n \n-  public ConstantMultiValueInvertedIndex(int length) {\n+  public SameMultiValueInvertedIndex(int length) {\n     _length = length;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMjgzNQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389912835", "bodyText": "Please revert this and all related renaming", "author": "Jackie-Jiang", "createdAt": "2020-03-09T19:30:08Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexSingleValueReader.java", "diffHunk": "@@ -28,7 +28,7 @@\n /**\n  * Interface for sorted index readers.\n  */\n-public interface SortedIndexReader<T extends ReaderContext> extends SingleColumnSingleValueReader<T>, InvertedIndexReader<Pairs.IntPair> {\n+public interface SortedIndexSingleValueReader<T extends ReaderContext> extends SingleColumnSingleValueReader<T>, InvertedIndexReader<Pairs.IntPair> {", "originalCommit": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1de9377f3e86ebeda77a8711b539634b6c51959", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexSingleValueReader.java b/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexReader.java\nsimilarity index 90%\nrename from pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexSingleValueReader.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexReader.java\nindex 3ab6339a59..ce99a17ffa 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexSingleValueReader.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexReader.java\n\n@@ -28,7 +28,7 @@ import org.apache.pinot.core.segment.index.readers.InvertedIndexReader;\n /**\n  * Interface for sorted index readers.\n  */\n-public interface SortedIndexSingleValueReader<T extends ReaderContext> extends SingleColumnSingleValueReader<T>, InvertedIndexReader<Pairs.IntPair> {\n+public interface SortedIndexReader<T extends ReaderContext> extends SingleColumnSingleValueReader<T>, InvertedIndexReader<Pairs.IntPair> {\n   @Override\n   int getInt(int row);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMzE0MQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389913141", "bodyText": "Please remove this as multi-value column can never be sorted", "author": "Jackie-Jiang", "createdAt": "2020-03-09T19:30:46Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SortedIndexMultiValueReader.java", "diffHunk": "@@ -16,13 +16,32 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.core.segment.virtualcolumn;\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.ReaderContext;\n+import org.apache.pinot.core.io.reader.SingleColumnMultiValueReader;\n+import org.apache.pinot.core.segment.index.readers.InvertedIndexReader;\n+\n \n /**\n- * Provide the default null value as a single string.\n+ * Interface for sorted index multi-value readers.\n  */\n-public class DefaultNullValueSingleStringVirtualColumnProvider extends SingleStringVirtualColumnProvider {\n-  protected String getValue(VirtualColumnContext context) {\n-    return context.getFieldSpec().getDefaultNullValue().toString();\n-  }\n+public interface SortedIndexMultiValueReader<T extends ReaderContext> extends SingleColumnMultiValueReader<T>, InvertedIndexReader<Pairs.IntPair> {", "originalCommit": "c122eecb53150e9d6fe1d3f528fba28c01849de1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31d616533cc4f880604fc241d372762d97549481", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SortedIndexMultiValueReader.java b/pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/PatternType.java\nsimilarity index 51%\nrename from pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SortedIndexMultiValueReader.java\nrename to pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/PatternType.java\nindex 1d8a03bbf3..5506d0e14e 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SortedIndexMultiValueReader.java\n+++ b/pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/PatternType.java\n\n@@ -16,32 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.core.io.reader.impl;\n-\n-import java.io.IOException;\n-import org.apache.pinot.common.utils.Pairs;\n-import org.apache.pinot.core.io.reader.ReaderContext;\n-import org.apache.pinot.core.io.reader.SingleColumnMultiValueReader;\n-import org.apache.pinot.core.segment.index.readers.InvertedIndexReader;\n-\n+package org.apache.pinot.tools.data.generator;\n \n /**\n- * Interface for sorted index multi-value readers.\n+ * PatternType describes the types of time series models available for generation. Each type maps to a dedicated\n+ * generator class in GeneratorFactory.\n+ *\n+ * @see GeneratorFactory\n  */\n-public interface SortedIndexMultiValueReader<T extends ReaderContext> extends SingleColumnMultiValueReader<T>, InvertedIndexReader<Pairs.IntPair> {\n-  @Override\n-  int getIntArray(int row, int[] intArray);\n-\n-  @Override\n-  int getIntArray(int row, int[] intArray, T context);\n-\n-  @Override\n-  T createContext();\n-\n-  @Override\n-  Pairs.IntPair getDocIds(int dictId);\n-\n-  @Override\n-  void close()\n-      throws IOException;\n+public enum PatternType {\n+    SEASONAL,\n+    SPIKE,\n+    SEQUENCE,\n+    STRING,\n+    MIXTURE\n }\n"}}, {"oid": "ec98d2e7a40bbd539b0dae0bdf9c3265d75f9153", "url": "https://github.com/apache/pinot/commit/ec98d2e7a40bbd539b0dae0bdf9c3265d75f9153", "message": "Support schema evolution for consuming segments", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "d0befa330678358fcacef6b90a8a0672b217a6c5", "url": "https://github.com/apache/pinot/commit/d0befa330678358fcacef6b90a8a0672b217a6c5", "message": "remove duplicate logger", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "85eada633445d45562ee55036a074e05ef4d3380", "url": "https://github.com/apache/pinot/commit/85eada633445d45562ee55036a074e05ef4d3380", "message": "revert renaming", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "efe6cf86b8596c1df1dbd26e2c79e47dd9dca4de", "url": "https://github.com/apache/pinot/commit/efe6cf86b8596c1df1dbd26e2c79e47dd9dca4de", "message": "address comments", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "f41e08de06cb54cb55eea7f6d57f8a855214cb56", "url": "https://github.com/apache/pinot/commit/f41e08de06cb54cb55eea7f6d57f8a855214cb56", "message": "cache virtual column provider", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "a38bac97b361550025d4c5438fde1f5f1213280d", "url": "https://github.com/apache/pinot/commit/a38bac97b361550025d4c5438fde1f5f1213280d", "message": "Refactor column provider", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "428e5d86873d182840af6feef4436f0805d48a0a", "url": "https://github.com/apache/pinot/commit/428e5d86873d182840af6feef4436f0805d48a0a", "message": "Address review", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "9f6c1a5683207c9242850a33bf9a52cd17790498", "url": "https://github.com/apache/pinot/commit/9f6c1a5683207c9242850a33bf9a52cd17790498", "message": "Update MutableSegmentImpl\n\nCo-Authored-By: Subbu Subramaniam <mcvsubbu@users.noreply.github.com>", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "aa67ab2039e7bc4e8ddf859038579304d211a698", "url": "https://github.com/apache/pinot/commit/aa67ab2039e7bc4e8ddf859038579304d211a698", "message": "Update MutableSegmentImpl\n\nCo-Authored-By: Subbu Subramaniam <mcvsubbu@users.noreply.github.com>", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "e4fdae29e672b2db14df52adfebb4f7d359c4428", "url": "https://github.com/apache/pinot/commit/e4fdae29e672b2db14df52adfebb4f7d359c4428", "message": "Address comments", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "f1de9377f3e86ebeda77a8711b539634b6c51959", "url": "https://github.com/apache/pinot/commit/f1de9377f3e86ebeda77a8711b539634b6c51959", "message": "Revert some renaming", "committedDate": "2020-03-09T20:58:45Z", "type": "commit"}, {"oid": "d943a07e816123772c4210595b6748c4b4d15749", "url": "https://github.com/apache/pinot/commit/d943a07e816123772c4210595b6748c4b4d15749", "message": "Undo more renaming", "committedDate": "2020-03-09T21:07:54Z", "type": "forcePushed"}, {"oid": "31d616533cc4f880604fc241d372762d97549481", "url": "https://github.com/apache/pinot/commit/31d616533cc4f880604fc241d372762d97549481", "message": "Undo more renaming", "committedDate": "2020-03-09T21:19:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMjA3NQ==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r390002075", "bodyText": "Can we revert this as well? Seems only used in the test", "author": "Jackie-Jiang", "createdAt": "2020-03-09T22:44:41Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java", "diffHunk": "@@ -164,16 +164,16 @@ public void updateDefaultColumns(IndexLoadingConfig indexLoadingConfig)\n    *\n    * @return Action Map for each column.\n    */\n-  private Map<String, DefaultColumnAction> computeDefaultColumnActionMap() {\n+  static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema, SegmentMetadataImpl segmentMetadata) {", "originalCommit": "31d616533cc4f880604fc241d372762d97549481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMjE3Mw==", "url": "https://github.com/apache/pinot/pull/4954#discussion_r390022173", "bodyText": "reverted most changes. kept the unit test", "author": "haibow", "createdAt": "2020-03-09T23:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMjA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e0c0c7dcead630b38f436663eb367e59bee28ac5", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java\nindex 368c52a48d..80b13791c1 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java\n\n@@ -164,16 +164,16 @@ public abstract class BaseDefaultColumnHandler implements DefaultColumnHandler {\n    *\n    * @return Action Map for each column.\n    */\n-  static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema, SegmentMetadataImpl segmentMetadata) {\n+  Map<String, DefaultColumnAction> computeDefaultColumnActionMap() {\n     Map<String, DefaultColumnAction> defaultColumnActionMap = new HashMap<>();\n \n     // Compute ADD and UPDATE actions.\n-    Collection<String> columnsInSchema = schema.getPhysicalColumnNames();\n+    Collection<String> columnsInSchema = _schema.getPhysicalColumnNames();\n     for (String column : columnsInSchema) {\n-      FieldSpec fieldSpecInSchema = schema.getFieldSpecFor(column);\n+      FieldSpec fieldSpecInSchema = _schema.getFieldSpecFor(column);\n       Preconditions.checkNotNull(fieldSpecInSchema);\n       FieldSpec.FieldType fieldTypeInSchema = fieldSpecInSchema.getFieldType();\n-      ColumnMetadata columnMetadata = segmentMetadata.getColumnMetadataFor(column);\n+      ColumnMetadata columnMetadata = _segmentMetadata.getColumnMetadataFor(column);\n \n       if (columnMetadata != null) {\n         // Column exists in the segment, check if we need to update the value.\n"}}, {"oid": "e0c0c7dcead630b38f436663eb367e59bee28ac5", "url": "https://github.com/apache/pinot/commit/e0c0c7dcead630b38f436663eb367e59bee28ac5", "message": "Undo more renaming", "committedDate": "2020-03-09T23:47:24Z", "type": "forcePushed"}, {"oid": "cb331bfdc2baac9b2ec74ff065116ac8f3c53c72", "url": "https://github.com/apache/pinot/commit/cb331bfdc2baac9b2ec74ff065116ac8f3c53c72", "message": "Undo more renaming", "committedDate": "2020-03-10T07:56:53Z", "type": "commit"}, {"oid": "cb331bfdc2baac9b2ec74ff065116ac8f3c53c72", "url": "https://github.com/apache/pinot/commit/cb331bfdc2baac9b2ec74ff065116ac8f3c53c72", "message": "Undo more renaming", "committedDate": "2020-03-10T07:56:53Z", "type": "forcePushed"}]}