{"pr_number": 5151, "pr_title": "Fix the SQL group-by for empty data table", "pr_createdAt": "2020-03-13T22:33:17Z", "pr_url": "https://github.com/apache/pinot/pull/5151", "timeline": [{"oid": "38bca100ee87ff402560644ab5383d6b839618a5", "url": "https://github.com/apache/pinot/commit/38bca100ee87ff402560644ab5383d6b839618a5", "message": "Fix the SQL group-by for empty data table\n\nWhen all segments are pruned on the server side, support SQL group-by empty data table.\nEnable SQL query tests for offline test.", "committedDate": "2020-03-14T01:32:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1OTE3Ng==", "url": "https://github.com/apache/pinot/pull/5151#discussion_r392559176", "bodyText": "new String[]{\"c\", \"d\", \"count(*)\", \"sum(a)\", \"max(b)\"}", "author": "xiangfu0", "createdAt": "2020-03-14T05:36:25Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/common/datatable/DataTableUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.common.datatable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants.Broker.Request;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.pql.parsers.Pql2Compiler;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class DataTableUtilsTest {\n+  private static final Pql2Compiler COMPILER = new Pql2Compiler();\n+\n+  @Test\n+  public void testBuildEmptyDataTable()\n+      throws IOException {\n+    // Selection\n+    BrokerRequest brokerRequest = COMPILER.compileToBrokerRequest(\"SELECT * FROM table WHERE foo = 'bar'\");\n+    DataTable dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    DataSchema dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"*\"});\n+    assertEquals(dataSchema.getColumnDataTypes(), new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING});\n+    assertEquals(dataTable.getNumberOfRows(), 0);\n+\n+    // Aggregation\n+    brokerRequest = COMPILER.compileToBrokerRequest(\"SELECT COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar'\");\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"count_star\", \"sum_a\", \"max_b\"});\n+    assertEquals(dataSchema.getColumnDataTypes(),\n+        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.LONG, DataSchema.ColumnDataType.DOUBLE, DataSchema.ColumnDataType.DOUBLE});\n+    assertEquals(dataTable.getNumberOfRows(), 1);\n+    assertEquals(dataTable.getLong(0, 0), 0L);\n+    assertEquals(dataTable.getDouble(0, 1), 0.0);\n+    assertEquals(dataTable.getDouble(0, 2), Double.NEGATIVE_INFINITY);\n+\n+    // PQL group-by\n+    brokerRequest =\n+        COMPILER.compileToBrokerRequest(\"SELECT COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar' GROUP BY c, d\");\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"functionName\", \"GroupByResultMap\"});\n+    assertEquals(dataSchema.getColumnDataTypes(),\n+        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.OBJECT});\n+    assertEquals(dataTable.getNumberOfRows(), 3);\n+    assertEquals(dataTable.getString(0, 0), \"count_star\");\n+    assertEquals(dataTable.getObject(0, 1), Collections.emptyMap());\n+    assertEquals(dataTable.getString(1, 0), \"sum_a\");\n+    assertEquals(dataTable.getObject(1, 1), Collections.emptyMap());\n+    assertEquals(dataTable.getString(2, 0), \"max_b\");\n+    assertEquals(dataTable.getObject(2, 1), Collections.emptyMap());\n+\n+    // SQL group-by\n+    brokerRequest = COMPILER\n+        .compileToBrokerRequest(\"SELECT c, d, COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar' GROUP BY c, d\");\n+    brokerRequest.setQueryOptions(Collections.singletonMap(Request.QueryOptionKey.GROUP_BY_MODE, Request.SQL));\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"c\", \"d\", \"count_star\", \"sum_a\", \"max_b\"});", "originalCommit": "38bca100ee87ff402560644ab5383d6b839618a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2NDIzOA==", "url": "https://github.com/apache/pinot/pull/5151#discussion_r392564238", "bodyText": "Good catch", "author": "Jackie-Jiang", "createdAt": "2020-03-14T07:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1OTE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fb05265131e9a5c5380f3416bec3ac64e1253e0c", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/common/datatable/DataTableUtilsTest.java b/pinot-core/src/test/java/org/apache/pinot/core/common/datatable/DataTableUtilsTest.java\nindex f83ad48a4a..1fe908d41e 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/common/datatable/DataTableUtilsTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/common/datatable/DataTableUtilsTest.java\n\n@@ -78,7 +78,7 @@ public class DataTableUtilsTest {\n     brokerRequest.setQueryOptions(Collections.singletonMap(Request.QueryOptionKey.GROUP_BY_MODE, Request.SQL));\n     dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n     dataSchema = dataTable.getDataSchema();\n-    assertEquals(dataSchema.getColumnNames(), new String[]{\"c\", \"d\", \"count_star\", \"sum_a\", \"max_b\"});\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"c\", \"d\", \"count(*)\", \"sum(a)\", \"max(b)\"});\n     assertEquals(dataSchema.getColumnDataTypes(),\n         new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.LONG, DataSchema.ColumnDataType.DOUBLE, DataSchema.ColumnDataType.DOUBLE});\n     assertEquals(dataTable.getNumberOfRows(), 0);\n"}}, {"oid": "fb05265131e9a5c5380f3416bec3ac64e1253e0c", "url": "https://github.com/apache/pinot/commit/fb05265131e9a5c5380f3416bec3ac64e1253e0c", "message": "Fix the SQL group-by for empty data table\n\nWhen all segments are pruned on the server side, support SQL group-by empty data table.\nEnable SQL query tests for offline test.", "committedDate": "2020-03-14T07:14:19Z", "type": "commit"}, {"oid": "fb05265131e9a5c5380f3416bec3ac64e1253e0c", "url": "https://github.com/apache/pinot/commit/fb05265131e9a5c5380f3416bec3ac64e1253e0c", "message": "Fix the SQL group-by for empty data table\n\nWhen all segments are pruned on the server side, support SQL group-by empty data table.\nEnable SQL query tests for offline test.", "committedDate": "2020-03-14T07:14:19Z", "type": "forcePushed"}]}