{"pr_number": 6031, "pr_title": "Handle the partitioning mismatch between table config and stream", "pr_createdAt": "2020-09-17T22:57:24Z", "pr_url": "https://github.com/apache/pinot/pull/6031", "timeline": [{"oid": "fcf2b7ad3d76fab37919285492312b8378f710fb", "url": "https://github.com/apache/pinot/commit/fcf2b7ad3d76fab37919285492312b8378f710fb", "message": "Handle the partitioning mismatch between table config and stream", "committedDate": "2020-09-17T23:19:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NTgxNw==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491055817", "bodyText": "Do we also test partition function and num partitions change?", "author": "mayankshriv", "createdAt": "2020-09-18T16:18:01Z", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentPartitionLLCRealtimeClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.common.metadata.segment.ColumnPartitionMetadata;\n+import org.apache.pinot.common.metadata.segment.RealtimeSegmentZKMetadata;\n+import org.apache.pinot.common.metadata.segment.SegmentPartitionMetadata;\n+import org.apache.pinot.common.utils.CommonConstants.Segment.Realtime.Status;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n+import org.apache.pinot.spi.config.table.ColumnPartitionConfig;\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.SegmentPartitionConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+\n+/**\n+ * Integration test that enables segment partition for the LLC real-time table.", "originalCommit": "fcf2b7ad3d76fab37919285492312b8378f710fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5NDkzOA==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491194938", "bodyText": "As discussed offline, currently because of the existing behavior, the partition routing won't give correct result when stream is not properly partitioned. Added a TODO with the reason why it does not give correct result now, and will add a test in the next PR which will address that issue.", "author": "Jackie-Jiang", "createdAt": "2020-09-18T21:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "6a2fc33c7c37aa60061da436457df2986adf50fa", "chunk": "diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentPartitionLLCRealtimeClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentPartitionLLCRealtimeClusterIntegrationTest.java\nindex b98dd7d324..cbf558030b 100644\n--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentPartitionLLCRealtimeClusterIntegrationTest.java\n+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentPartitionLLCRealtimeClusterIntegrationTest.java\n\n@@ -33,6 +33,7 @@ import org.apache.pinot.common.utils.CommonConstants.Segment.Realtime.Status;\n import org.apache.pinot.common.utils.LLCSegmentName;\n import org.apache.pinot.spi.config.table.ColumnPartitionConfig;\n import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.RoutingConfig;\n import org.apache.pinot.spi.config.table.SegmentPartitionConfig;\n import org.apache.pinot.spi.config.table.TableConfig;\n import org.apache.pinot.spi.data.FieldSpec.DataType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1MzE0Mw==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491053143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //       partition of the segment can be different from the stream partition.\n          \n          \n            \n                //       partition of the segment is undefined", "author": "mcvsubbu", "createdAt": "2020-09-18T16:12:56Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java", "diffHunk": "@@ -510,6 +511,11 @@ private LLCRealtimeSegmentZKMetadata updateCommittingSegmentZKMetadata(String re\n     committingSegmentZKMetadata.setIndexVersion(segmentMetadata.getVersion());\n     committingSegmentZKMetadata.setTotalDocs(segmentMetadata.getTotalDocs());\n \n+    // Update the partition metadata based on the segment metadata\n+    // NOTE: When the stream partition changes, or the records are not properly partitioned from the stream, the\n+    //       partition of the segment can be different from the stream partition.", "originalCommit": "fcf2b7ad3d76fab37919285492312b8378f710fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTI3Nw==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491155277", "bodyText": "It is not undefined, but based on the actual consumed records. Updated the comment to reflect that.", "author": "Jackie-Jiang", "createdAt": "2020-09-18T19:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1MzE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6a2fc33c7c37aa60061da436457df2986adf50fa", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\nindex d93072a323..7b2ba2ff89 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\n\n@@ -513,7 +513,7 @@ public class PinotLLCRealtimeSegmentManager {\n \n     // Update the partition metadata based on the segment metadata\n     // NOTE: When the stream partition changes, or the records are not properly partitioned from the stream, the\n-    //       partition of the segment can be different from the stream partition.\n+    //       partition of the segment (based on the actual consumed records) can be different from the stream partition.\n     committingSegmentZKMetadata.setPartitionMetadata(getPartitionMetadataFromSegmentMetadata(segmentMetadata));\n \n     persistSegmentZKMetadata(realtimeTableName, committingSegmentZKMetadata, stat.getVersion());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1Mzg4Mw==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491053883", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private SegmentPartitionMetadata getPartitionMetadataFromTableConfig(TableConfig tableConfig, int numPartitions,\n          \n          \n            \n              private SegmentPartitionMetadata getPartitionMetadataFromTableConfig(TableConfig tableConfig, int numStreamPartitions,", "author": "mcvsubbu", "createdAt": "2020-09-18T16:14:16Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java", "diffHunk": "@@ -560,7 +566,8 @@ private void createNewSegmentZKMetadata(TableConfig tableConfig, PartitionLevelS\n   }\n \n   @Nullable\n-  private SegmentPartitionMetadata getPartitionMetadataFromTableConfig(TableConfig tableConfig, int partitionId) {\n+  private SegmentPartitionMetadata getPartitionMetadataFromTableConfig(TableConfig tableConfig, int numPartitions,", "originalCommit": "fcf2b7ad3d76fab37919285492312b8378f710fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MTU5Mw==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491191593", "bodyText": "Reverted this part to keep minimum change and keep the current behavior. Will handle this in the next PR which requires some perf testing", "author": "Jackie-Jiang", "createdAt": "2020-09-18T21:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1Mzg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6a2fc33c7c37aa60061da436457df2986adf50fa", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\nindex d93072a323..7b2ba2ff89 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\n\n@@ -566,8 +566,7 @@ public class PinotLLCRealtimeSegmentManager {\n   }\n \n   @Nullable\n-  private SegmentPartitionMetadata getPartitionMetadataFromTableConfig(TableConfig tableConfig, int numPartitions,\n-      int partitionId) {\n+  private SegmentPartitionMetadata getPartitionMetadataFromTableConfig(TableConfig tableConfig, int partitionId) {\n     SegmentPartitionConfig partitionConfig = tableConfig.getIndexingConfig().getSegmentPartitionConfig();\n     if (partitionConfig == null) {\n       return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NDQ4NA==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491054484", "bodyText": "Can we add the metric on the controller instead? If it happens for one stream partition, it is highly likely that it will happen to all partitions, so might as well reduce noise", "author": "mcvsubbu", "createdAt": "2020-09-18T16:15:18Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/metrics/ServerMeter.java", "diffHunk": "@@ -39,6 +39,7 @@\n   REALTIME_CONSUMPTION_EXCEPTIONS(\"exceptions\", true),\n   REALTIME_OFFSET_COMMITS(\"commits\", true),\n   REALTIME_OFFSET_COMMIT_EXCEPTIONS(\"exceptions\", false),\n+  REALTIME_PARTITION_MISMATCH(\"mismatch\", false),", "originalCommit": "fcf2b7ad3d76fab37919285492312b8378f710fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MjIxMA==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491192210", "bodyText": "I take that back. We need the metric to fire as soon as we detect a mismatch, so it has to be on the server.", "author": "mcvsubbu", "createdAt": "2020-09-18T21:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NDQ4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2MDU4Nw==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491060587", "bodyText": "We don't recognize new partitions instantly. Everytime the realtime validation manager runs, it checks if the number of aprtitions have changed, and if so, starts a new consuming partition.\nLet us say at time T1 we checked and the partition number did not change\nAt time T1 + 10, the partition numbers changed, but we did not know. The stream divided the records into a different partitioning system, thus having mismatched rows in (most likely) all partitions . At time T1 + 50, we check again, and create the new consuming segment for the new partition we detected.\nIn this case, all the segments that have the mismatched rows should be marked as not belonging to any partition.\nI am not sure this condition is being handled", "author": "mcvsubbu", "createdAt": "2020-09-18T16:26:35Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1204,13 +1207,20 @@ public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata,\n         String partitionColumn = entry.getKey();\n         ColumnPartitionConfig columnPartitionConfig = entry.getValue();\n         String partitionFunctionName = columnPartitionConfig.getFunctionName();\n+\n+        // NOTE: Here we compare the number of partitions from the config and the stream, and log a warning and emit a\n+        //       metric when they don't match, but use the one from the stream. The mismatch could happen when the\n+        //       stream partitions are changed, but the table config has not been updated to reflect the change. In such\n+        //       case, picking the number of partitions from the stream can keep the segment properly partitioned as", "originalCommit": "fcf2b7ad3d76fab37919285492312b8378f710fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5Mzc0NA==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491193744", "bodyText": "This class in on server side, so it does not rely on the validation manager (which runs on controller side) to detect the partitions change.\nI did not change the logic for this class, but only added some notes for readability.", "author": "Jackie-Jiang", "createdAt": "2020-09-18T21:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2MDU4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MjcxOQ==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491192719", "bodyText": "For realtime table, maybe we should not have the num partitions in the tableconfig. It can be set to -1, to indicate that it needs to come from the stream.", "author": "mcvsubbu", "createdAt": "2020-09-18T21:11:32Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java", "diffHunk": "@@ -569,13 +576,44 @@ private SegmentPartitionMetadata getPartitionMetadataFromTableConfig(TableConfig\n     for (Map.Entry<String, ColumnPartitionConfig> entry : partitionConfig.getColumnPartitionMap().entrySet()) {\n       String columnName = entry.getKey();\n       ColumnPartitionConfig columnPartitionConfig = entry.getValue();\n+\n+      // NOTE: Here we compare the number of partitions from the config and the stream, and log a warning when they\n+      //       don't match, but use the one from the stream. The mismatch could happen when the stream partitions are\n+      //       changed, but the table config has not been updated to reflect the change. In such case, picking the\n+      //       number of partitions from the stream can keep the segment properly partitioned as long as the partition\n+      //       function is not changed.\n+      if (columnPartitionConfig.getNumPartitions() != numPartitions) {", "originalCommit": "fcf2b7ad3d76fab37919285492312b8378f710fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMTI5OA==", "url": "https://github.com/apache/pinot/pull/6031#discussion_r491201298", "bodyText": "Good point, or we just don't read it. While we can still use it when the server failed to get the numPartitions from the stream (the existing behavior).", "author": "Jackie-Jiang", "createdAt": "2020-09-18T21:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MjcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a2fc33c7c37aa60061da436457df2986adf50fa", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\nindex d93072a323..7b2ba2ff89 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java\n\n@@ -576,20 +575,8 @@ public class PinotLLCRealtimeSegmentManager {\n     for (Map.Entry<String, ColumnPartitionConfig> entry : partitionConfig.getColumnPartitionMap().entrySet()) {\n       String columnName = entry.getKey();\n       ColumnPartitionConfig columnPartitionConfig = entry.getValue();\n-\n-      // NOTE: Here we compare the number of partitions from the config and the stream, and log a warning when they\n-      //       don't match, but use the one from the stream. The mismatch could happen when the stream partitions are\n-      //       changed, but the table config has not been updated to reflect the change. In such case, picking the\n-      //       number of partitions from the stream can keep the segment properly partitioned as long as the partition\n-      //       function is not changed.\n-      if (columnPartitionConfig.getNumPartitions() != numPartitions) {\n-        LOGGER.warn(\n-            \"Number of stream partitions: {} does not match number of partitions in the partition config: {}, using number of stream partitions\",\n-            numPartitions, columnPartitionConfig.getNumPartitions());\n-      }\n-\n       partitionMetadataMap.put(columnName,\n-          new ColumnPartitionMetadata(columnPartitionConfig.getFunctionName(), numPartitions,\n+          new ColumnPartitionMetadata(columnPartitionConfig.getFunctionName(), columnPartitionConfig.getNumPartitions(),\n               Collections.singleton(partitionId)));\n     }\n     return new SegmentPartitionMetadata(partitionMetadataMap);\n"}}, {"oid": "6a2fc33c7c37aa60061da436457df2986adf50fa", "url": "https://github.com/apache/pinot/commit/6a2fc33c7c37aa60061da436457df2986adf50fa", "message": "Handle the partitioning mismatch between table config and stream", "committedDate": "2020-09-18T21:18:00Z", "type": "forcePushed"}, {"oid": "750a9857b80af5cecc58c5d3b3e9f060dabd3bad", "url": "https://github.com/apache/pinot/commit/750a9857b80af5cecc58c5d3b3e9f060dabd3bad", "message": "Handle the partitioning mismatch between table config and stream", "committedDate": "2020-09-18T22:04:29Z", "type": "commit"}, {"oid": "750a9857b80af5cecc58c5d3b3e9f060dabd3bad", "url": "https://github.com/apache/pinot/commit/750a9857b80af5cecc58c5d3b3e9f060dabd3bad", "message": "Handle the partitioning mismatch between table config and stream", "committedDate": "2020-09-18T22:04:29Z", "type": "forcePushed"}]}