{"pr_number": 4968, "pr_title": "Remove Kafka and Stream dependency on avro", "pr_createdAt": "2020-01-09T22:27:05Z", "pr_url": "https://github.com/apache/pinot/pull/4968", "timeline": [{"oid": "eff5cca1678c95b49a9f1860616da907756dfe8f", "url": "https://github.com/apache/pinot/commit/eff5cca1678c95b49a9f1860616da907756dfe8f", "message": "Remove avro depenency from Kafka modules\n\nStreams ingestion was depending on pinot-avro (and org.apache.avro) because\nthe kafka-to-avro decoders depended on them, and the decoders lived in\nthe streams module.\n\nMoved the decoders to pinot-avro.\n\nAlso introduced a base class to extract a pinot GenerirRow from any\ninput format. pinot-avro now has the class to extract a pinot row\nfrom avro record.\n\nOther input formats may have introduce their own extractors.\n\nUpdated tests accordingly", "committedDate": "2020-01-09T22:15:19Z", "type": "commit"}, {"oid": "05c4b787cc8ccbe7d8ef7daee4b47756027c24e1", "url": "https://github.com/apache/pinot/commit/05c4b787cc8ccbe7d8ef7daee4b47756027c24e1", "message": "Cleaned up member variables in KafkaAvroMessageDecoder", "committedDate": "2020-01-09T22:23:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5MTk2Nw==", "url": "https://github.com/apache/pinot/pull/4968#discussion_r364991967", "bodyText": "I would keep this as an interface and add a base class if you want to add some default util methods.", "author": "kishoreg", "createdAt": "2020-01-09T22:30:46Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.readers;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+\n+\n+public abstract class RecordExtractor<T> {\n+\n+  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {", "originalCommit": "05c4b787cc8ccbe7d8ef7daee4b47756027c24e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMzQ2Ng==", "url": "https://github.com/apache/pinot/pull/4968#discussion_r365003466", "bodyText": "+1. This should be an interface for people to plug-in their own implementations", "author": "Jackie-Jiang", "createdAt": "2020-01-09T23:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5MTk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8bcccb9f6825c522d91874068e38e56a4463b1fe", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java b/pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java\nindex 94eafb27a7..cd63cef881 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java\n\n@@ -18,23 +18,16 @@\n  */\n package org.apache.pinot.spi.data.readers;\n \n-import com.google.common.base.Preconditions;\n-import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n-import org.apache.pinot.spi.data.TimeFieldSpec;\n \n-\n-public abstract class RecordExtractor<T> {\n-\n-  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {\n-    if (incomingFieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-      TimeFieldSpec timeFieldSpec = schema.getTimeFieldSpec();\n-      Preconditions.checkNotNull(timeFieldSpec);\n-      return new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec());\n-    }\n-\n-    return incomingFieldSpec;\n-  }\n-\n-  abstract public GenericRow extract(Schema schema, T from, GenericRow to);\n+public interface RecordExtractor<T> {\n+  /**\n+   * TODO Add text to this javadoc\n+   *\n+   * @param schema\n+   * @param from\n+   * @param to\n+   * @return\n+   */\n+  GenericRow extract(Schema schema, T from, GenericRow to);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxNTcwOQ==", "url": "https://github.com/apache/pinot/pull/4968#discussion_r365015709", "bodyText": "this interface assumes T is self-describing (like thrift, avro, json) but it fails for format like csv, tsv etc where we get a comma separated line. This means it needs an init method :(.", "author": "kishoreg", "createdAt": "2020-01-09T23:51:18Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.readers;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+\n+\n+public abstract class RecordExtractor<T> {\n+\n+  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {\n+    if (incomingFieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n+      TimeFieldSpec timeFieldSpec = schema.getTimeFieldSpec();\n+      Preconditions.checkNotNull(timeFieldSpec);\n+      return new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec());\n+    }\n+\n+    return incomingFieldSpec;\n+  }\n+\n+  abstract public GenericRow extract(Schema schema, T from, GenericRow to);", "originalCommit": "05c4b787cc8ccbe7d8ef7daee4b47756027c24e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzOTgzMg==", "url": "https://github.com/apache/pinot/pull/4968#discussion_r365039832", "bodyText": "Can we add one when necessary? Should not be too hard to add.", "author": "mcvsubbu", "createdAt": "2020-01-10T01:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxNTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzOTk5MA==", "url": "https://github.com/apache/pinot/pull/4968#discussion_r365039990", "bodyText": "Also, it is not necessary for decoders to use record extractors. If it is trivial they can choose to extract the record with a statement like \"x = record.field\"", "author": "mcvsubbu", "createdAt": "2020-01-10T01:40:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxNTcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bcccb9f6825c522d91874068e38e56a4463b1fe", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java b/pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java\nindex 94eafb27a7..cd63cef881 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java\n\n@@ -18,23 +18,16 @@\n  */\n package org.apache.pinot.spi.data.readers;\n \n-import com.google.common.base.Preconditions;\n-import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n-import org.apache.pinot.spi.data.TimeFieldSpec;\n \n-\n-public abstract class RecordExtractor<T> {\n-\n-  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {\n-    if (incomingFieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-      TimeFieldSpec timeFieldSpec = schema.getTimeFieldSpec();\n-      Preconditions.checkNotNull(timeFieldSpec);\n-      return new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec());\n-    }\n-\n-    return incomingFieldSpec;\n-  }\n-\n-  abstract public GenericRow extract(Schema schema, T from, GenericRow to);\n+public interface RecordExtractor<T> {\n+  /**\n+   * TODO Add text to this javadoc\n+   *\n+   * @param schema\n+   * @param from\n+   * @param to\n+   * @return\n+   */\n+  GenericRow extract(Schema schema, T from, GenericRow to);\n }\n"}}, {"oid": "8bcccb9f6825c522d91874068e38e56a4463b1fe", "url": "https://github.com/apache/pinot/commit/8bcccb9f6825c522d91874068e38e56a4463b1fe", "message": "Changed RecordExtractor to be an interface and added a base class", "committedDate": "2020-01-10T01:54:39Z", "type": "commit"}]}