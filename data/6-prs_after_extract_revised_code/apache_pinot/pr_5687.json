{"pr_number": 5687, "pr_title": "Adding Controller API to explore Zookeeper", "pr_createdAt": "2020-07-12T06:36:31Z", "pr_url": "https://github.com/apache/pinot/pull/5687", "timeline": [{"oid": "b00a65444d8e3d99e496d44e7950122208022b00", "url": "https://github.com/apache/pinot/commit/b00a65444d8e3d99e496d44e7950122208022b00", "message": "Adding Zookeeper resource to browse ZK data via controller API", "committedDate": "2020-07-12T06:14:13Z", "type": "commit"}, {"oid": "95fabab8ad93ef91a4f74022dd070b8c73f4fe13", "url": "https://github.com/apache/pinot/commit/95fabab8ad93ef91a4f74022dd070b8c73f4fe13", "message": "Fixing api documentation", "committedDate": "2020-07-12T06:26:01Z", "type": "commit"}, {"oid": "ae16d8b7231a12362844657bacdec4705dfaf45c", "url": "https://github.com/apache/pinot/commit/ae16d8b7231a12362844657bacdec4705dfaf45c", "message": "Fixing api documentation", "committedDate": "2020-07-12T06:27:17Z", "type": "commit"}, {"oid": "d29a7f6d0b449c1e15899607063577c27e14f961", "url": "https://github.com/apache/pinot/commit/d29a7f6d0b449c1e15899607063577c27e14f961", "message": "Fixing api documentation", "committedDate": "2020-07-12T06:34:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMzY0OA==", "url": "https://github.com/apache/pinot/pull/5687#discussion_r453803648", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")\n          \n          \n            \n              @ApiOperation(value = \"Get cluster Info\", notes = \"Get cluster Info\")", "author": "mcvsubbu", "createdAt": "2020-07-13T17:14:44Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -57,6 +57,17 @@\n   @Inject\n   PinotHelixResourceManager pinotHelixResourceManager;\n \n+  @GET\n+  @Path(\"/cluster/info\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")", "originalCommit": "d29a7f6d0b449c1e15899607063577c27e14f961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ce78f7550853977e187dad5a67f4f4657854af2", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\nindex 3fbccdd3dd..2825f55024 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n\n@@ -60,7 +60,7 @@ public class PinotClusterConfigs {\n   @GET\n   @Path(\"/cluster/info\")\n   @Produces(MediaType.APPLICATION_JSON)\n-  @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")\n+  @ApiOperation(value = \"Get cluster Info\", notes = \"Get cluster Info\")\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n   public String getClusterInfo() {\n     ObjectNode ret = JsonUtils.newObjectNode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwODYyMA==", "url": "https://github.com/apache/pinot/pull/5687#discussion_r453808620", "bodyText": "Cluster info is just name?", "author": "mayankshriv", "createdAt": "2020-07-13T17:22:45Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -57,6 +57,17 @@\n   @Inject\n   PinotHelixResourceManager pinotHelixResourceManager;\n \n+  @GET\n+  @Path(\"/cluster/info\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getClusterInfo() {\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    ret.put(\"clusterName\", pinotHelixResourceManager.getHelixClusterName());", "originalCommit": "d29a7f6d0b449c1e15899607063577c27e14f961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExMjE0NA==", "url": "https://github.com/apache/pinot/pull/5687#discussion_r454112144", "bodyText": "yes. We can enhance later. There was no way to get the cluster name", "author": "kishoreg", "createdAt": "2020-07-14T05:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwODYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "7ce78f7550853977e187dad5a67f4f4657854af2", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\nindex 3fbccdd3dd..2825f55024 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n\n@@ -60,7 +60,7 @@ public class PinotClusterConfigs {\n   @GET\n   @Path(\"/cluster/info\")\n   @Produces(MediaType.APPLICATION_JSON)\n-  @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")\n+  @ApiOperation(value = \"Get cluster Info\", notes = \"Get cluster Info\")\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n   public String getClusterInfo() {\n     ObjectNode ret = JsonUtils.newObjectNode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwOTg3OQ==", "url": "https://github.com/apache/pinot/pull/5687#discussion_r453809879", "bodyText": "Is using zookeeper the norm? Wondering if ok to use zk for lazy folks like me?", "author": "mayankshriv", "createdAt": "2020-07-13T17:24:54Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.zookeeper.data.Stat;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.ZOOKEEPER)\n+@Path(\"/\")\n+public class ZookeeperResource {\n+\n+  public static org.slf4j.Logger LOGGER = LoggerFactory.getLogger(ZookeeperResource.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  ZNRecordSerializer _znRecordSerializer = new ZNRecordSerializer();\n+\n+  @GET\n+  @Path(\"/zookeeper/get\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //\n+      @ApiResponse(code = 200, message = \"Success\"), //\n+      @ApiResponse(code = 404, message = \"ZK Path not found\"), //\n+      @ApiResponse(code = 204, message = \"No Content\"), //\n+      @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getData(\n+      @ApiParam(value = \"Zookeeper Path, must start with /\", required = true, defaultValue = \"/\") @QueryParam(\"path\") @DefaultValue(\"\") String path) {\n+\n+    path = validateAndNormalizeZKPath(path);\n+\n+    ZNRecord znRecord = pinotHelixResourceManager.readZKData(path);\n+    if (znRecord != null) {\n+      return new String(_znRecordSerializer.serialize(znRecord), StandardCharsets.UTF_8);\n+    }\n+    return null;\n+  }\n+\n+  @GET\n+  @Path(\"/zookeeper/ls\")", "originalCommit": "d29a7f6d0b449c1e15899607063577c27e14f961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzNjgwOQ==", "url": "https://github.com/apache/pinot/pull/5687#discussion_r454036809", "bodyText": "Done!", "author": "kishoreg", "createdAt": "2020-07-14T01:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwOTg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ce78f7550853977e187dad5a67f4f4657854af2", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java\nindex 1daff80d99..3093052309 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java\n\n@@ -55,7 +55,7 @@ public class ZookeeperResource {\n   ZNRecordSerializer _znRecordSerializer = new ZNRecordSerializer();\n \n   @GET\n-  @Path(\"/zookeeper/get\")\n+  @Path(\"/zk/get\")\n   @Produces(MediaType.TEXT_PLAIN)\n   @ApiOperation(value = \"Get content of the znode\")\n   @ApiResponses(value = { //\n"}}, {"oid": "7ce78f7550853977e187dad5a67f4f4657854af2", "url": "https://github.com/apache/pinot/commit/7ce78f7550853977e187dad5a67f4f4657854af2", "message": "Addressing comments", "committedDate": "2020-07-14T01:04:33Z", "type": "commit"}]}