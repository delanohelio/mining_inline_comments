{"pr_number": 5137, "pr_title": "Fix the default value provider classes", "pr_createdAt": "2020-03-11T01:18:25Z", "pr_url": "https://github.com/apache/pinot/pull/5137", "timeline": [{"oid": "9cca930e83deaa184e15be759d1da6a0d81e7359", "url": "https://github.com/apache/pinot/commit/9cca930e83deaa184e15be759d1da6a0d81e7359", "message": "Fix the ConstantValueDictionary\n\n1. Implement the insertionIndexOf() for all constant value dictionaries\n2. Enhance the integration test to cover that", "committedDate": "2020-03-11T01:22:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODM1MQ==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390728351", "bodyText": "Good catch. Could you fix another older misuse too:\nhttps://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/IntSingleValueDataFileReader.java#L54", "author": "haibow", "createdAt": "2020-03-11T03:31:34Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantSingleValueSortedIndex.java", "diffHunk": "@@ -59,26 +42,32 @@ public int getInt(int row) {\n   }\n \n   @Override\n-  public int getInt(int rowId, SortedIndexReaderImpl.Context context) {\n+  public int getInt(int rowId, ReaderContext context) {\n     return 0;\n   }\n \n   @Override\n-  public void close()\n-      throws IOException {\n+  public void readValues(int[] rows, int rowStartPos, int rowSize, int[] values, int valuesStartPos) {\n+    Arrays.fill(values, valuesStartPos, valuesStartPos + rowSize, 0);", "originalCommit": "9cca930e83deaa184e15be759d1da6a0d81e7359", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczODQ0Mg==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390738442", "bodyText": "Removed it", "author": "Jackie-Jiang", "createdAt": "2020-03-11T04:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODM1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODk1Ng==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390728956", "bodyText": "How about constant double value? I also used \"single double\" earlier but was persuaded by Subbu it sounded a little weird", "author": "haibow", "createdAt": "2020-03-11T03:34:37Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "diffHunk": "@@ -19,20 +19,25 @@\n package org.apache.pinot.core.segment.index.readers;\n \n /**\n- * Dictionary for constant-value double\n+ * Dictionary of a single double value.", "originalCommit": "9cca930e83deaa184e15be759d1da6a0d81e7359", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczOTQ1NQ==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390739455", "bodyText": "I prefer the current comment because the dictionary only contains a single value, instead of multiple values of the same value. @mcvsubbu Opinion?\nFuture plan would be wrap all these classes (forward index, inverted index, dictionary for default column) into one single class.", "author": "Jackie-Jiang", "createdAt": "2020-03-11T04:24:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4Mzk2OA==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390983968", "bodyText": "I like the one class approach, and had suggested that earlier to Haibo. Let us not worry too much about a comment", "author": "mcvsubbu", "createdAt": "2020-03-11T13:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODk1Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "839f126e32606300c77b778d68aa2309092be6a0", "url": "https://github.com/apache/pinot/commit/839f126e32606300c77b778d68aa2309092be6a0", "message": "Fix the ConstantValueDictionary\n\n1. Implement the insertionIndexOf() for all constant value dictionaries\n2. Enhance the integration test to cover that", "committedDate": "2020-03-11T04:24:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0ODQwOQ==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390748409", "bodyText": "Why is this class renamed to SortedIndex instead of InvertedIndex?", "author": "jackjlli", "createdAt": "2020-03-11T05:07:45Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/BaseVirtualColumnProvider.java", "diffHunk": "@@ -39,7 +39,7 @@\n \n   public DataFileReader buildReader(VirtualColumnContext context) {\n     if (context.getFieldSpec().isSingleValueField()) {\n-      return new ConstantSingleValueInvertedIndex(0);\n+      return new ConstantSingleValueSortedIndex(0);", "originalCommit": "839f126e32606300c77b778d68aa2309092be6a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1OTY0MA==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390759640", "bodyText": "Because it is sorted index (sorted index can be used as both forward and inverted index).\nThe multi-value one should be split into forward and inverted index, but that is out of the scope of this pr, so will address later.", "author": "Jackie-Jiang", "createdAt": "2020-03-11T05:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0ODQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "617d263612b55322344674bcd3c86eb3694e6866", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/BaseVirtualColumnProvider.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/BaseVirtualColumnProvider.java\nindex b955032dce..d507dab046 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/BaseVirtualColumnProvider.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/BaseVirtualColumnProvider.java\n\n@@ -34,17 +30,6 @@ import org.apache.pinot.spi.data.FieldSpec;\n  */\n public abstract class BaseVirtualColumnProvider implements VirtualColumnProvider {\n \n-  ColumnIndexContainer _columnIndexContainer;\n-  InvertedIndexReader _invertedIndexReader;\n-\n-  public DataFileReader buildReader(VirtualColumnContext context) {\n-    if (context.getFieldSpec().isSingleValueField()) {\n-      return new ConstantSingleValueSortedIndex(0);\n-    } else {\n-      return new ConstantMultiValueInvertedIndex(0);\n-    }\n-  }\n-\n   protected ColumnMetadata.Builder getColumnMetadataBuilder(VirtualColumnContext context) {\n     FieldSpec fieldSpec = context.getFieldSpec();\n     return new ColumnMetadata.Builder().setVirtual(true).setColumnName(fieldSpec.getName())\n"}}, {"oid": "617d263612b55322344674bcd3c86eb3694e6866", "url": "https://github.com/apache/pinot/commit/617d263612b55322344674bcd3c86eb3694e6866", "message": "Fix the default value provider classes\n\n1. Implement the insertionIndexOf() for all constant value dictionaries\n2. Support BYTES type\n3. Fix the constant value indexes\n4. Enhance the integration test to cover all data types", "committedDate": "2020-03-11T19:52:31Z", "type": "commit"}, {"oid": "617d263612b55322344674bcd3c86eb3694e6866", "url": "https://github.com/apache/pinot/commit/617d263612b55322344674bcd3c86eb3694e6866", "message": "Fix the default value provider classes\n\n1. Implement the insertionIndexOf() for all constant value dictionaries\n2. Support BYTES type\n3. Fix the constant value indexes\n4. Enhance the integration test to cover all data types", "committedDate": "2020-03-11T19:52:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NjI4NA==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r391256284", "bodyText": "I didnt knoiw we had this convention. The jacvadocs on insertionIndexOf() does not state this in comments. Also, it points to a binarysearch implementation that does not exist (or, I could not locate it).. Can you fix the comments to reflect this convention? thanks.", "author": "mcvsubbu", "createdAt": "2020-03-11T20:42:22Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "diffHunk": "@@ -19,20 +19,25 @@\n package org.apache.pinot.core.segment.index.readers;\n \n /**\n- * Dictionary for constant-value double\n+ * Dictionary of a single double value.\n  */\n-\n public class ConstantValueDoubleDictionary extends BaseImmutableDictionary {\n-  final Double _value;\n+  private final double _value;\n \n-  public ConstantValueDoubleDictionary(Double value) {\n+  public ConstantValueDoubleDictionary(double value) {\n     super(1);\n     _value = value;\n   }\n \n   @Override\n   public int insertionIndexOf(String stringValue) {\n-\n+    double doubleValue = Double.parseDouble(stringValue);\n+    if (doubleValue < _value) {\n+      return -1;\n+    }\n+    if (doubleValue > _value) {\n+      return -2;", "originalCommit": "617d263612b55322344674bcd3c86eb3694e6866", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI2Mzg5NA==", "url": "https://github.com/apache/pinot/pull/5137#discussion_r391263894", "bodyText": "Discussed offline, and that is the general binary search convention.", "author": "Jackie-Jiang", "createdAt": "2020-03-11T20:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NjI4NA=="}], "type": "inlineReview", "revised_code": null}]}