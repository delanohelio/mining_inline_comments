{"pr_number": 5564, "pr_title": "Adding support to configure log2m value for hyperloglog", "pr_createdAt": "2020-06-14T12:42:36Z", "pr_url": "https://github.com/apache/pinot/pull/5564", "timeline": [{"oid": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "url": "https://github.com/apache/pinot/commit/3799d93fa2595c01df4de2289e7c6cca65e2c1df", "message": "Adding support to configure log2m value for hyperloglog", "committedDate": "2020-06-14T13:38:11Z", "type": "commit"}, {"oid": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "url": "https://github.com/apache/pinot/commit/3799d93fa2595c01df4de2289e7c6cca65e2c1df", "message": "Adding support to configure log2m value for hyperloglog", "committedDate": "2020-06-14T13:38:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MDUzNg==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440340536", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.warn(\"Unable to set Log2M value {} for DistinctCountHLL function. {}\", log2mStr, e);\n          \n          \n            \n                    LOGGER.warn(\"Invalid config of '{}': '{}', using: {} as the default log2m for HyperLogLog\", Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M, log2mStr, CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M);", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:41:25Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/HelixBrokerStarter.java", "diffHunk": "@@ -191,11 +191,19 @@ public void start()\n         new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(_clusterName).build();\n     Map<String, String> configMap = configAccessor.get(helixConfigScope, Arrays\n         .asList(Helix.ENABLE_CASE_INSENSITIVE_KEY, Helix.DEPRECATED_ENABLE_CASE_INSENSITIVE_KEY,\n-            Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE));\n+            Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE, Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M));\n     if (Boolean.parseBoolean(configMap.get(Helix.ENABLE_CASE_INSENSITIVE_KEY)) || Boolean\n         .parseBoolean(configMap.get(Helix.DEPRECATED_ENABLE_CASE_INSENSITIVE_KEY))) {\n       _brokerConf.setProperty(Helix.ENABLE_CASE_INSENSITIVE_KEY, true);\n     }\n+    String log2mStr = configMap.get(Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M);\n+    if (log2mStr != null) {\n+      try {\n+        _brokerConf.setProperty(Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M, Integer.parseInt(log2mStr));\n+      } catch (NumberFormatException e) {\n+        LOGGER.warn(\"Unable to set Log2M value {} for DistinctCountHLL function. {}\", log2mStr, e);", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/HelixBrokerStarter.java b/pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/HelixBrokerStarter.java\nindex 5bee98bd63..1f9396cd8e 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/HelixBrokerStarter.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/HelixBrokerStarter.java\n\n@@ -191,17 +191,18 @@ public class HelixBrokerStarter implements ServiceStartable {\n         new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(_clusterName).build();\n     Map<String, String> configMap = configAccessor.get(helixConfigScope, Arrays\n         .asList(Helix.ENABLE_CASE_INSENSITIVE_KEY, Helix.DEPRECATED_ENABLE_CASE_INSENSITIVE_KEY,\n-            Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE, Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M));\n+            Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE, Helix.DEFAULT_HYPERLOGLOG_LOG2M_KEY));\n     if (Boolean.parseBoolean(configMap.get(Helix.ENABLE_CASE_INSENSITIVE_KEY)) || Boolean\n         .parseBoolean(configMap.get(Helix.DEPRECATED_ENABLE_CASE_INSENSITIVE_KEY))) {\n       _brokerConf.setProperty(Helix.ENABLE_CASE_INSENSITIVE_KEY, true);\n     }\n-    String log2mStr = configMap.get(Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M);\n+    String log2mStr = configMap.get(Helix.DEFAULT_HYPERLOGLOG_LOG2M_KEY);\n     if (log2mStr != null) {\n       try {\n-        _brokerConf.setProperty(Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M, Integer.parseInt(log2mStr));\n+        _brokerConf.setProperty(Helix.DEFAULT_HYPERLOGLOG_LOG2M_KEY, Integer.parseInt(log2mStr));\n       } catch (NumberFormatException e) {\n-        LOGGER.warn(\"Unable to set Log2M value {} for DistinctCountHLL function. {}\", log2mStr, e);\n+        LOGGER.warn(\"Invalid config of '{}': '{}', using: {} as the default log2m for HyperLogLog\",\n+            Helix.DEFAULT_HYPERLOGLOG_LOG2M_KEY, log2mStr, CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M);\n       }\n     }\n     if (Boolean.parseBoolean(configMap.get(Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE))) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTQxOA==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440341418", "bodyText": "Rename to _defaultHllLog2m?", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:43:07Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -112,6 +114,7 @@\n \n   private final boolean _enableCaseInsensitive;\n   private final boolean _enableQueryLimitOverride;\n+  private final int _hllLog2mOverride;", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex fd992d5ce6..efe303e6e5 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -114,7 +114,7 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n \n   private final boolean _enableCaseInsensitive;\n   private final boolean _enableQueryLimitOverride;\n-  private final int _hllLog2mOverride;\n+  private final int _defaultHllLog2m;\n   private final TableCache _tableCache;\n \n   public BaseBrokerRequestHandler(Configuration config, RoutingManager routingManager,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTY1OQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440341659", "bodyText": "_defaultHllLog2m =\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (_config.containsKey(CommonConstants.Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M)) {\n          \n          \n            \n                  _hllLog2mOverride = _config.getInt(CommonConstants.Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M,\n          \n          \n            \n                      CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M);\n          \n          \n            \n                } else {\n          \n          \n            \n                  _hllLog2mOverride = -1;\n          \n          \n            \n                }\n          \n          \n            \n                _hllLog2mOverride = _config.getInt(CommonConstants.Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M,\n          \n          \n            \n                      CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M);", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:43:36Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -129,6 +132,12 @@ public BaseBrokerRequestHandler(Configuration config, RoutingManager routingMana\n     } else {\n       _tableCache = null;\n     }\n+    if (_config.containsKey(CommonConstants.Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M)) {\n+      _hllLog2mOverride = _config.getInt(CommonConstants.Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M,\n+          CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M);\n+    } else {\n+      _hllLog2mOverride = -1;\n+    }", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex fd992d5ce6..efe303e6e5 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -132,12 +132,8 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n     } else {\n       _tableCache = null;\n     }\n-    if (_config.containsKey(CommonConstants.Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M)) {\n-      _hllLog2mOverride = _config.getInt(CommonConstants.Helix.CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M,\n-          CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M);\n-    } else {\n-      _hllLog2mOverride = -1;\n-    }\n+    _defaultHllLog2m = _config\n+        .getInt(CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M_KEY, CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M);\n \n     _enableQueryLimitOverride = _config.getBoolean(Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE, false);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0Mjc4OA==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440342788", "bodyText": "Why do we need brokerRequest.getSelections() != null here? It will never be true for aggregation right?", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:45:36Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -425,6 +437,58 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n     return brokerResponse;\n   }\n \n+  /**\n+   * Set Log2m value for DistinctCountHLL Function\n+   * @param brokerRequest\n+   * @param hllLog2mOverride\n+   */\n+  static void handleHyperloglogLog2mOverride(BrokerRequest brokerRequest, int hllLog2mOverride) {\n+    if (brokerRequest.getAggregationsInfo() != null) {\n+      for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n+        switch (AggregationFunctionType.valueOf(aggregationInfo.getAggregationType().toUpperCase())) {\n+          case DISTINCTCOUNTHLL:\n+          case DISTINCTCOUNTHLLMV:\n+          case DISTINCTCOUNTRAWHLL:\n+          case DISTINCTCOUNTRAWHLLMV:\n+            if (aggregationInfo.getExpressionsSize() == 1) {\n+              aggregationInfo.addToExpressions(Integer.toString(hllLog2mOverride));\n+            }\n+        }\n+      }\n+    }\n+    if (brokerRequest.getPinotQuery() != null && brokerRequest.getSelections() != null) {", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxOTAxOQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440419019", "bodyText": "ah, it should be brokerRequest.getPinotQuery().getSelectList()", "author": "xiangfu0", "createdAt": "2020-06-15T20:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0Mjc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex fd992d5ce6..efe303e6e5 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -445,18 +441,18 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n   static void handleHyperloglogLog2mOverride(BrokerRequest brokerRequest, int hllLog2mOverride) {\n     if (brokerRequest.getAggregationsInfo() != null) {\n       for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n-        switch (AggregationFunctionType.valueOf(aggregationInfo.getAggregationType().toUpperCase())) {\n-          case DISTINCTCOUNTHLL:\n-          case DISTINCTCOUNTHLLMV:\n-          case DISTINCTCOUNTRAWHLL:\n-          case DISTINCTCOUNTRAWHLLMV:\n+        switch (aggregationInfo.getAggregationType().toUpperCase()) {\n+          case \"DISTINCTCOUNTHLL\":\n+          case \"DISTINCTCOUNTHLLMV\":\n+          case \"DISTINCTCOUNTRAWHLL\":\n+          case \"DISTINCTCOUNTRAWHLLMV\":\n             if (aggregationInfo.getExpressionsSize() == 1) {\n               aggregationInfo.addToExpressions(Integer.toString(hllLog2mOverride));\n             }\n         }\n       }\n     }\n-    if (brokerRequest.getPinotQuery() != null && brokerRequest.getSelections() != null) {\n+    if (brokerRequest.getPinotQuery() != null && brokerRequest.getPinotQuery().getSelectList() != null) {\n       for (Expression expr : brokerRequest.getPinotQuery().getSelectList()) {\n         updateDistinctCountHllExpr(expr, hllLog2mOverride);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0Mzg4NQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440343885", "bodyText": "Please handle exception here, or switch on String instead of AggregationFunctionType", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:47:40Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -425,6 +437,58 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n     return brokerResponse;\n   }\n \n+  /**\n+   * Set Log2m value for DistinctCountHLL Function\n+   * @param brokerRequest\n+   * @param hllLog2mOverride\n+   */\n+  static void handleHyperloglogLog2mOverride(BrokerRequest brokerRequest, int hllLog2mOverride) {\n+    if (brokerRequest.getAggregationsInfo() != null) {\n+      for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n+        switch (AggregationFunctionType.valueOf(aggregationInfo.getAggregationType().toUpperCase())) {", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxOTcxOQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440419719", "bodyText": "will change to string then.", "author": "xiangfu0", "createdAt": "2020-06-15T20:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0Mzg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex fd992d5ce6..efe303e6e5 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -445,18 +441,18 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n   static void handleHyperloglogLog2mOverride(BrokerRequest brokerRequest, int hllLog2mOverride) {\n     if (brokerRequest.getAggregationsInfo() != null) {\n       for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n-        switch (AggregationFunctionType.valueOf(aggregationInfo.getAggregationType().toUpperCase())) {\n-          case DISTINCTCOUNTHLL:\n-          case DISTINCTCOUNTHLLMV:\n-          case DISTINCTCOUNTRAWHLL:\n-          case DISTINCTCOUNTRAWHLLMV:\n+        switch (aggregationInfo.getAggregationType().toUpperCase()) {\n+          case \"DISTINCTCOUNTHLL\":\n+          case \"DISTINCTCOUNTHLLMV\":\n+          case \"DISTINCTCOUNTRAWHLL\":\n+          case \"DISTINCTCOUNTRAWHLLMV\":\n             if (aggregationInfo.getExpressionsSize() == 1) {\n               aggregationInfo.addToExpressions(Integer.toString(hllLog2mOverride));\n             }\n         }\n       }\n     }\n-    if (brokerRequest.getPinotQuery() != null && brokerRequest.getSelections() != null) {\n+    if (brokerRequest.getPinotQuery() != null && brokerRequest.getPinotQuery().getSelectList() != null) {\n       for (Expression expr : brokerRequest.getPinotQuery().getSelectList()) {\n         updateDistinctCountHllExpr(expr, hllLog2mOverride);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0NTcwOQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440345709", "bodyText": "(nit) This check is redundant?", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:51:00Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -425,6 +437,58 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n     return brokerResponse;\n   }\n \n+  /**\n+   * Set Log2m value for DistinctCountHLL Function\n+   * @param brokerRequest\n+   * @param hllLog2mOverride\n+   */\n+  static void handleHyperloglogLog2mOverride(BrokerRequest brokerRequest, int hllLog2mOverride) {\n+    if (brokerRequest.getAggregationsInfo() != null) {\n+      for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n+        switch (AggregationFunctionType.valueOf(aggregationInfo.getAggregationType().toUpperCase())) {\n+          case DISTINCTCOUNTHLL:\n+          case DISTINCTCOUNTHLLMV:\n+          case DISTINCTCOUNTRAWHLL:\n+          case DISTINCTCOUNTRAWHLLMV:\n+            if (aggregationInfo.getExpressionsSize() == 1) {\n+              aggregationInfo.addToExpressions(Integer.toString(hllLog2mOverride));\n+            }\n+        }\n+      }\n+    }\n+    if (brokerRequest.getPinotQuery() != null && brokerRequest.getSelections() != null) {\n+      for (Expression expr : brokerRequest.getPinotQuery().getSelectList()) {\n+        updateDistinctCountHllExpr(expr, hllLog2mOverride);\n+      }\n+    }\n+  }\n+\n+  private static void updateDistinctCountHllExpr(Expression expr, int hllLog2mOverride) {\n+    if (expr == null || expr.getFunctionCall() == null) {\n+      return;\n+    }\n+    Function functionCall = expr.getFunctionCall();\n+    try {\n+      switch (AggregationFunctionType.getAggregationFunctionType(functionCall.getOperator())) {\n+        case DISTINCTCOUNTHLL:\n+        case DISTINCTCOUNTHLLMV:\n+        case DISTINCTCOUNTRAWHLL:\n+        case DISTINCTCOUNTRAWHLLMV:\n+          if (functionCall.getOperandsSize() == 1) {\n+            functionCall.addToOperands(RequestUtils.getLiteralExpression(hllLog2mOverride));\n+          }\n+          return;\n+      }\n+    } catch (Exception e) {\n+      // Swallow exceptions\n+    }\n+    if (functionCall.getOperandsSize() > 0) {", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMDE1NA==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440420154", "bodyText": "just in case.", "author": "xiangfu0", "createdAt": "2020-06-15T20:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0NTcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex fd992d5ce6..efe303e6e5 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -445,18 +441,18 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n   static void handleHyperloglogLog2mOverride(BrokerRequest brokerRequest, int hllLog2mOverride) {\n     if (brokerRequest.getAggregationsInfo() != null) {\n       for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n-        switch (AggregationFunctionType.valueOf(aggregationInfo.getAggregationType().toUpperCase())) {\n-          case DISTINCTCOUNTHLL:\n-          case DISTINCTCOUNTHLLMV:\n-          case DISTINCTCOUNTRAWHLL:\n-          case DISTINCTCOUNTRAWHLLMV:\n+        switch (aggregationInfo.getAggregationType().toUpperCase()) {\n+          case \"DISTINCTCOUNTHLL\":\n+          case \"DISTINCTCOUNTHLLMV\":\n+          case \"DISTINCTCOUNTRAWHLL\":\n+          case \"DISTINCTCOUNTRAWHLLMV\":\n             if (aggregationInfo.getExpressionsSize() == 1) {\n               aggregationInfo.addToExpressions(Integer.toString(hllLog2mOverride));\n             }\n         }\n       }\n     }\n-    if (brokerRequest.getPinotQuery() != null && brokerRequest.getSelections() != null) {\n+    if (brokerRequest.getPinotQuery() != null && brokerRequest.getPinotQuery().getSelectList() != null) {\n       for (Expression expr : brokerRequest.getPinotQuery().getSelectList()) {\n         updateDistinctCountHllExpr(expr, hllLog2mOverride);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0NjM3Ng==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440346376", "bodyText": "expr can never be null here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (expr == null || expr.getFunctionCall() == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }\n          \n          \n            \n                Function functionCall = expr.getFunctionCall();\n          \n          \n            \n                Function functionCall = expr.getFunctionCall();\n          \n          \n            \n                if (functionCall == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:52:15Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -425,6 +437,58 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n     return brokerResponse;\n   }\n \n+  /**\n+   * Set Log2m value for DistinctCountHLL Function\n+   * @param brokerRequest\n+   * @param hllLog2mOverride\n+   */\n+  static void handleHyperloglogLog2mOverride(BrokerRequest brokerRequest, int hllLog2mOverride) {\n+    if (brokerRequest.getAggregationsInfo() != null) {\n+      for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n+        switch (AggregationFunctionType.valueOf(aggregationInfo.getAggregationType().toUpperCase())) {\n+          case DISTINCTCOUNTHLL:\n+          case DISTINCTCOUNTHLLMV:\n+          case DISTINCTCOUNTRAWHLL:\n+          case DISTINCTCOUNTRAWHLLMV:\n+            if (aggregationInfo.getExpressionsSize() == 1) {\n+              aggregationInfo.addToExpressions(Integer.toString(hllLog2mOverride));\n+            }\n+        }\n+      }\n+    }\n+    if (brokerRequest.getPinotQuery() != null && brokerRequest.getSelections() != null) {\n+      for (Expression expr : brokerRequest.getPinotQuery().getSelectList()) {\n+        updateDistinctCountHllExpr(expr, hllLog2mOverride);\n+      }\n+    }\n+  }\n+\n+  private static void updateDistinctCountHllExpr(Expression expr, int hllLog2mOverride) {\n+    if (expr == null || expr.getFunctionCall() == null) {\n+      return;\n+    }\n+    Function functionCall = expr.getFunctionCall();", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex fd992d5ce6..efe303e6e5 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -445,18 +441,18 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n   static void handleHyperloglogLog2mOverride(BrokerRequest brokerRequest, int hllLog2mOverride) {\n     if (brokerRequest.getAggregationsInfo() != null) {\n       for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n-        switch (AggregationFunctionType.valueOf(aggregationInfo.getAggregationType().toUpperCase())) {\n-          case DISTINCTCOUNTHLL:\n-          case DISTINCTCOUNTHLLMV:\n-          case DISTINCTCOUNTRAWHLL:\n-          case DISTINCTCOUNTRAWHLLMV:\n+        switch (aggregationInfo.getAggregationType().toUpperCase()) {\n+          case \"DISTINCTCOUNTHLL\":\n+          case \"DISTINCTCOUNTHLLMV\":\n+          case \"DISTINCTCOUNTRAWHLL\":\n+          case \"DISTINCTCOUNTRAWHLLMV\":\n             if (aggregationInfo.getExpressionsSize() == 1) {\n               aggregationInfo.addToExpressions(Integer.toString(hllLog2mOverride));\n             }\n         }\n       }\n     }\n-    if (brokerRequest.getPinotQuery() != null && brokerRequest.getSelections() != null) {\n+    if (brokerRequest.getPinotQuery() != null && brokerRequest.getPinotQuery().getSelectList() != null) {\n       for (Expression expr : brokerRequest.getPinotQuery().getSelectList()) {\n         updateDistinctCountHllExpr(expr, hllLog2mOverride);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0NjYxOQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440346619", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M = \"default.hyperloglog.log2m\";\n          \n          \n            \n                public static final String DEFAULT_HYPERLOGLOG_LOG2M_KEY = \"default.hyperloglog.log2m\";", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:52:43Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -44,6 +44,9 @@\n     public static final String ENABLE_CASE_INSENSITIVE_KEY = \"enable.case.insensitive\";\n     public static final String DEPRECATED_ENABLE_CASE_INSENSITIVE_KEY = \"enable.case.insensitive.pql\";\n \n+    public static final String CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M = \"default.hyperloglog.log2m\";", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\nindex 0a06f6d0a3..c13dac9fc8 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\n\n@@ -44,7 +44,7 @@ public class CommonConstants {\n     public static final String ENABLE_CASE_INSENSITIVE_KEY = \"enable.case.insensitive\";\n     public static final String DEPRECATED_ENABLE_CASE_INSENSITIVE_KEY = \"enable.case.insensitive.pql\";\n \n-    public static final String CONFIG_OF_DEFAULT_HYPERLOGLOG_LOG2M = \"default.hyperloglog.log2m\";\n+    public static final String DEFAULT_HYPERLOGLOG_LOG2M_KEY = \"default.hyperloglog.log2m\";\n     public static final int DEFAULT_HYPERLOGLOG_LOG2M = 8;\n \n     // More information on why these numbers are set can be found in the following doc:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0NzMzMw==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440347333", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Preconditions\n          \n          \n            \n                    .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: \",\n          \n          \n            \n                        numExpressions);\n          \n          \n            \n                Preconditions\n          \n          \n            \n                    .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: %s\",\n          \n          \n            \n                        numExpressions);", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:54:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java", "diffHunk": "@@ -35,9 +36,20 @@\n \n public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregationFunction<HyperLogLog, Long> {\n   public static final int DEFAULT_LOG2M = 8;\n+  protected final int _log2M;\n \n-  public DistinctCountHLLAggregationFunction(String column) {\n-    super(column);\n+  public DistinctCountHLLAggregationFunction(List<String> arguments) {\n+    super(arguments.get(0));\n+    int numExpressions = arguments.size();\n+    // This function expects 1 or 2 arguments.\n+    Preconditions\n+        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: \",\n+            numExpressions);", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\nindex 697915378f..28a273b498 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n\n@@ -35,20 +36,19 @@ import org.apache.pinot.spi.data.FieldSpec.DataType;\n \n \n public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregationFunction<HyperLogLog, Long> {\n-  public static final int DEFAULT_LOG2M = 8;\n-  protected final int _log2M;\n+  protected final int _log2m;\n \n   public DistinctCountHLLAggregationFunction(List<String> arguments) {\n     super(arguments.get(0));\n     int numExpressions = arguments.size();\n     // This function expects 1 or 2 arguments.\n     Preconditions\n-        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: \",\n+        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: %s\",\n             numExpressions);\n     if (arguments.size() == 2) {\n-      _log2M = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));\n+      _log2m = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));\n     } else {\n-      _log2M = DEFAULT_LOG2M;\n+      _log2m = CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0ODA1Mg==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440348052", "bodyText": "No need to replace single quote here", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:55:18Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java", "diffHunk": "@@ -35,9 +36,20 @@\n \n public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregationFunction<HyperLogLog, Long> {\n   public static final int DEFAULT_LOG2M = 8;\n+  protected final int _log2M;\n \n-  public DistinctCountHLLAggregationFunction(String column) {\n-    super(column);\n+  public DistinctCountHLLAggregationFunction(List<String> arguments) {\n+    super(arguments.get(0));\n+    int numExpressions = arguments.size();\n+    // This function expects 1 or 2 arguments.\n+    Preconditions\n+        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: \",\n+            numExpressions);\n+    if (arguments.size() == 2) {\n+      _log2M = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMTUxOA==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440421518", "bodyText": "Integer.valueOf(...) will throw exception on string \"'1'\"", "author": "xiangfu0", "createdAt": "2020-06-15T20:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0ODA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4OTU0NQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440489545", "bodyText": "But why would someone put '1' here? In order to put '1' as the literal, you need to explicitly escape ' (i.e. DistinctCountHLL(column, '''1''')). Also, in that case we should fail the query because it is invalid.", "author": "Jackie-Jiang", "createdAt": "2020-06-15T22:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0ODA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwMDAwMw==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440500003", "bodyText": "from sql side, we are still doing DistinctCountHLL(column, 1), this expression is parsed to long literal, then converted to string literal in BrokerRequest with single quotes.", "author": "xiangfu0", "createdAt": "2020-06-15T23:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0ODA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwMjg3Mg==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440502872", "bodyText": "This doesn't seem right.. Can we add a TODO and fix it later?", "author": "Jackie-Jiang", "createdAt": "2020-06-15T23:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0ODA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwODYyNQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440508625", "bodyText": "Added comments.\nCurrently PinotQuery2BrokerRequestConverter enforces single quoted non-string literal in ParserUtils.standardizeExpression(...).", "author": "xiangfu0", "createdAt": "2020-06-15T23:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0ODA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\nindex 697915378f..28a273b498 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n\n@@ -35,20 +36,19 @@ import org.apache.pinot.spi.data.FieldSpec.DataType;\n \n \n public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregationFunction<HyperLogLog, Long> {\n-  public static final int DEFAULT_LOG2M = 8;\n-  protected final int _log2M;\n+  protected final int _log2m;\n \n   public DistinctCountHLLAggregationFunction(List<String> arguments) {\n     super(arguments.get(0));\n     int numExpressions = arguments.size();\n     // This function expects 1 or 2 arguments.\n     Preconditions\n-        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: \",\n+        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: %s\",\n             numExpressions);\n     if (arguments.size() == 2) {\n-      _log2M = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));\n+      _log2m = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));\n     } else {\n-      _log2M = DEFAULT_LOG2M;\n+      _log2m = CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0ODQyOA==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440348428", "bodyText": "(nit) Rename to _log2m?", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:55:59Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java", "diffHunk": "@@ -35,9 +36,20 @@\n \n public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregationFunction<HyperLogLog, Long> {\n   public static final int DEFAULT_LOG2M = 8;\n+  protected final int _log2M;", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\nindex 697915378f..28a273b498 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n\n@@ -35,20 +36,19 @@ import org.apache.pinot.spi.data.FieldSpec.DataType;\n \n \n public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregationFunction<HyperLogLog, Long> {\n-  public static final int DEFAULT_LOG2M = 8;\n-  protected final int _log2M;\n+  protected final int _log2m;\n \n   public DistinctCountHLLAggregationFunction(List<String> arguments) {\n     super(arguments.get(0));\n     int numExpressions = arguments.size();\n     // This function expects 1 or 2 arguments.\n     Preconditions\n-        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: \",\n+        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: %s\",\n             numExpressions);\n     if (arguments.size() == 2) {\n-      _log2M = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));\n+      _log2m = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));\n     } else {\n-      _log2M = DEFAULT_LOG2M;\n+      _log2m = CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0OTA1Mw==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440349053", "bodyText": "Replace this with the one in CommonConstants?", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:56:59Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java", "diffHunk": "@@ -35,9 +36,20 @@\n \n public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregationFunction<HyperLogLog, Long> {\n   public static final int DEFAULT_LOG2M = 8;", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\nindex 697915378f..28a273b498 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n\n@@ -35,20 +36,19 @@ import org.apache.pinot.spi.data.FieldSpec.DataType;\n \n \n public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregationFunction<HyperLogLog, Long> {\n-  public static final int DEFAULT_LOG2M = 8;\n-  protected final int _log2M;\n+  protected final int _log2m;\n \n   public DistinctCountHLLAggregationFunction(List<String> arguments) {\n     super(arguments.get(0));\n     int numExpressions = arguments.size();\n     // This function expects 1 or 2 arguments.\n     Preconditions\n-        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: \",\n+        .checkArgument(numExpressions <= 2 && numExpressions >= 1, \"DistinctCountHLL expects 1 or 2 arguments, got: %s\",\n             numExpressions);\n     if (arguments.size() == 2) {\n-      _log2M = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));\n+      _log2m = Integer.valueOf(arguments.get(1).replace(\"'\", \"\"));\n     } else {\n-      _log2M = DEFAULT_LOG2M;\n+      _log2m = CommonConstants.Helix.DEFAULT_HYPERLOGLOG_LOG2M;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0OTQ2Mg==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440349462", "bodyText": "You don't need to pass member variable _log2M to getDefaultHyperLogLog(), just remove the static should be good", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:57:43Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java", "diffHunk": "@@ -67,7 +79,7 @@ public void aggregate(int length, AggregationResultHolder aggregationResultHolde\n     DataType valueType = blockValSet.getValueType();\n \n     if (valueType != DataType.BYTES) {\n-      HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n+      HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder, _log2M);", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\nindex 697915378f..28a273b498 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java\n\n@@ -79,7 +79,7 @@ public class DistinctCountHLLAggregationFunction extends BaseSingleInputAggregat\n     DataType valueType = blockValSet.getValueType();\n \n     if (valueType != DataType.BYTES) {\n-      HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder, _log2M);\n+      HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n       switch (valueType) {\n         case INT:\n           int[] intValues = blockValSet.getIntValuesSV();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MDA5OQ==", "url": "https://github.com/apache/pinot/pull/5564#discussion_r440350099", "bodyText": "Same here, don't pass _log2M", "author": "Jackie-Jiang", "createdAt": "2020-06-15T17:58:50Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java", "diffHunk": "@@ -47,7 +48,7 @@ public void accept(AggregationFunctionVisitorBase visitor) {\n   @Override\n   public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n       Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n-    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n+    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder, _log2M);", "originalCommit": "3799d93fa2595c01df4de2289e7c6cca65e2c1df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02f72472c78465ee3b535a1617ecf35b76e8e250", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java\nindex 1c6e80d2d3..c5ca5c6b3b 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java\n\n@@ -48,7 +48,7 @@ public class DistinctCountHLLMVAggregationFunction extends DistinctCountHLLAggre\n   @Override\n   public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n       Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n-    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder, _log2M);\n+    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n \n     BlockValSet blockValSet = blockValSetMap.get(_expression);\n     DataType valueType = blockValSet.getValueType();\n"}}, {"oid": "02f72472c78465ee3b535a1617ecf35b76e8e250", "url": "https://github.com/apache/pinot/commit/02f72472c78465ee3b535a1617ecf35b76e8e250", "message": "Adress comments", "committedDate": "2020-06-15T20:24:34Z", "type": "forcePushed"}, {"oid": "535d8c0a9c072c401ad41d3839b02625b8fc86bd", "url": "https://github.com/apache/pinot/commit/535d8c0a9c072c401ad41d3839b02625b8fc86bd", "message": "Adress comments", "committedDate": "2020-06-15T23:52:48Z", "type": "commit"}, {"oid": "535d8c0a9c072c401ad41d3839b02625b8fc86bd", "url": "https://github.com/apache/pinot/commit/535d8c0a9c072c401ad41d3839b02625b8fc86bd", "message": "Adress comments", "committedDate": "2020-06-15T23:52:48Z", "type": "forcePushed"}]}