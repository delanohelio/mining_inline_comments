{"pr_number": 5033, "pr_title": "Set alias name in resultTable schema names", "pr_createdAt": "2020-01-31T01:17:42Z", "pr_url": "https://github.com/apache/pinot/pull/5033", "timeline": [{"oid": "d10afbbc338ca16c51c3f4868580ee2b088110f3", "url": "https://github.com/apache/pinot/commit/d10afbbc338ca16c51c3f4868580ee2b088110f3", "message": "Set alias name in response schema names", "committedDate": "2020-01-31T02:23:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1OTA1Mg==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374259052", "bodyText": "How about SELECT *?", "author": "Jackie-Jiang", "createdAt": "2020-02-03T18:15:53Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +185,45 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    if (columnNames.length != selectList.size()) {", "originalCommit": "c4c49db77a41a9f6625a74b46de8d07974a3f73d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MDE2NQ==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374340165", "bodyText": "Good point, will remove this logging, and let it return directly", "author": "xiangfu0", "createdAt": "2020-02-03T21:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1OTA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\nindex c8b34de7c5..de0a0f9394 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n\n@@ -202,23 +205,24 @@ public class BrokerReduceService {\n     DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n     List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n     String[] columnNames = dataSchema.getColumnNames();\n-    if (columnNames.length != selectList.size()) {\n-      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n-          selectList.size());\n+    int selectListSize = selectList.size();\n+    if (columnNames.length != selectListSize) {\n       return;\n     }\n-    for (int i = 0; i < selectList.size(); i++) {\n-      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()\n-          .equalsIgnoreCase(\"AS\")) {\n+    for (int i = 0; i < selectListSize; i++) {\n+      Function selectFunc = selectList.get(i).getFunctionCall();\n+      if (selectFunc != null && selectFunc.getOperator()\n+          .equalsIgnoreCase(SqlKind.AS.toString())) {\n         String aliasName = null;\n-        if (selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier() != null) {\n-          aliasName = selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier().getName();\n+        // Check Identifier\n+        Identifier aliasIdentifier = selectFunc.getOperands().get(1).getIdentifier();\n+        if (aliasIdentifier != null) {\n+          aliasName = aliasIdentifier.getName();\n         }\n-        Literal aliasLiteral = selectList.get(i).getFunctionCall().getOperands().get(1).getLiteral();\n+        // Check Literal\n+        Literal aliasLiteral = selectFunc.getOperands().get(1).getLiteral();\n         if (aliasLiteral != null) {\n-          if (aliasLiteral.isSetStringValue()) {\n-            aliasName = aliasLiteral.getStringValue();\n-          }\n+          aliasName = aliasLiteral.getFieldValue().toString();\n         }\n         if (aliasName != null) {\n           columnNames[i] = aliasName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1OTM4MA==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374259380", "bodyText": "Cache selectList.size()", "author": "Jackie-Jiang", "createdAt": "2020-02-03T18:16:36Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +185,45 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    if (columnNames.length != selectList.size()) {\n+      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n+          selectList.size());\n+      return;\n+    }\n+    for (int i = 0; i < selectList.size(); i++) {", "originalCommit": "c4c49db77a41a9f6625a74b46de8d07974a3f73d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\nindex c8b34de7c5..de0a0f9394 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n\n@@ -202,23 +205,24 @@ public class BrokerReduceService {\n     DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n     List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n     String[] columnNames = dataSchema.getColumnNames();\n-    if (columnNames.length != selectList.size()) {\n-      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n-          selectList.size());\n+    int selectListSize = selectList.size();\n+    if (columnNames.length != selectListSize) {\n       return;\n     }\n-    for (int i = 0; i < selectList.size(); i++) {\n-      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()\n-          .equalsIgnoreCase(\"AS\")) {\n+    for (int i = 0; i < selectListSize; i++) {\n+      Function selectFunc = selectList.get(i).getFunctionCall();\n+      if (selectFunc != null && selectFunc.getOperator()\n+          .equalsIgnoreCase(SqlKind.AS.toString())) {\n         String aliasName = null;\n-        if (selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier() != null) {\n-          aliasName = selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier().getName();\n+        // Check Identifier\n+        Identifier aliasIdentifier = selectFunc.getOperands().get(1).getIdentifier();\n+        if (aliasIdentifier != null) {\n+          aliasName = aliasIdentifier.getName();\n         }\n-        Literal aliasLiteral = selectList.get(i).getFunctionCall().getOperands().get(1).getLiteral();\n+        // Check Literal\n+        Literal aliasLiteral = selectFunc.getOperands().get(1).getLiteral();\n         if (aliasLiteral != null) {\n-          if (aliasLiteral.isSetStringValue()) {\n-            aliasName = aliasLiteral.getStringValue();\n-          }\n+          aliasName = aliasLiteral.getFieldValue().toString();\n         }\n         if (aliasName != null) {\n           columnNames[i] = aliasName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1OTUwMg==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374259502", "bodyText": "Cache selectList.get(i).getFunctionCall(), same for other places", "author": "Jackie-Jiang", "createdAt": "2020-02-03T18:16:53Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +185,45 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    if (columnNames.length != selectList.size()) {\n+      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n+          selectList.size());\n+      return;\n+    }\n+    for (int i = 0; i < selectList.size(); i++) {\n+      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()", "originalCommit": "c4c49db77a41a9f6625a74b46de8d07974a3f73d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\nindex c8b34de7c5..de0a0f9394 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n\n@@ -202,23 +205,24 @@ public class BrokerReduceService {\n     DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n     List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n     String[] columnNames = dataSchema.getColumnNames();\n-    if (columnNames.length != selectList.size()) {\n-      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n-          selectList.size());\n+    int selectListSize = selectList.size();\n+    if (columnNames.length != selectListSize) {\n       return;\n     }\n-    for (int i = 0; i < selectList.size(); i++) {\n-      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()\n-          .equalsIgnoreCase(\"AS\")) {\n+    for (int i = 0; i < selectListSize; i++) {\n+      Function selectFunc = selectList.get(i).getFunctionCall();\n+      if (selectFunc != null && selectFunc.getOperator()\n+          .equalsIgnoreCase(SqlKind.AS.toString())) {\n         String aliasName = null;\n-        if (selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier() != null) {\n-          aliasName = selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier().getName();\n+        // Check Identifier\n+        Identifier aliasIdentifier = selectFunc.getOperands().get(1).getIdentifier();\n+        if (aliasIdentifier != null) {\n+          aliasName = aliasIdentifier.getName();\n         }\n-        Literal aliasLiteral = selectList.get(i).getFunctionCall().getOperands().get(1).getLiteral();\n+        // Check Literal\n+        Literal aliasLiteral = selectFunc.getOperands().get(1).getLiteral();\n         if (aliasLiteral != null) {\n-          if (aliasLiteral.isSetStringValue()) {\n-            aliasName = aliasLiteral.getStringValue();\n-          }\n+          aliasName = aliasLiteral.getFieldValue().toString();\n         }\n         if (aliasName != null) {\n           columnNames[i] = aliasName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTQ4NA==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374261484", "bodyText": "Can you simplify the logic here and add some comments? Can aliasName be null when AS keyword is found?", "author": "Jackie-Jiang", "createdAt": "2020-02-03T18:20:55Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +185,45 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    if (columnNames.length != selectList.size()) {\n+      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n+          selectList.size());\n+      return;\n+    }\n+    for (int i = 0; i < selectList.size(); i++) {\n+      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()\n+          .equalsIgnoreCase(\"AS\")) {\n+        String aliasName = null;\n+        if (selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier() != null) {\n+          aliasName = selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier().getName();\n+        }\n+        Literal aliasLiteral = selectList.get(i).getFunctionCall().getOperands().get(1).getLiteral();\n+        if (aliasLiteral != null) {\n+          if (aliasLiteral.isSetStringValue()) {\n+            aliasName = aliasLiteral.getStringValue();\n+          }\n+        }\n+        if (aliasName != null) {\n+          columnNames[i] = aliasName;\n+        }", "originalCommit": "c4c49db77a41a9f6625a74b46de8d07974a3f73d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0NTg5OA==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374345898", "bodyText": "technically it shouldn't be null, this is just for sanity check.", "author": "xiangfu0", "createdAt": "2020-02-03T21:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\nindex c8b34de7c5..de0a0f9394 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n\n@@ -202,23 +205,24 @@ public class BrokerReduceService {\n     DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n     List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n     String[] columnNames = dataSchema.getColumnNames();\n-    if (columnNames.length != selectList.size()) {\n-      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n-          selectList.size());\n+    int selectListSize = selectList.size();\n+    if (columnNames.length != selectListSize) {\n       return;\n     }\n-    for (int i = 0; i < selectList.size(); i++) {\n-      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()\n-          .equalsIgnoreCase(\"AS\")) {\n+    for (int i = 0; i < selectListSize; i++) {\n+      Function selectFunc = selectList.get(i).getFunctionCall();\n+      if (selectFunc != null && selectFunc.getOperator()\n+          .equalsIgnoreCase(SqlKind.AS.toString())) {\n         String aliasName = null;\n-        if (selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier() != null) {\n-          aliasName = selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier().getName();\n+        // Check Identifier\n+        Identifier aliasIdentifier = selectFunc.getOperands().get(1).getIdentifier();\n+        if (aliasIdentifier != null) {\n+          aliasName = aliasIdentifier.getName();\n         }\n-        Literal aliasLiteral = selectList.get(i).getFunctionCall().getOperands().get(1).getLiteral();\n+        // Check Literal\n+        Literal aliasLiteral = selectFunc.getOperands().get(1).getLiteral();\n         if (aliasLiteral != null) {\n-          if (aliasLiteral.isSetStringValue()) {\n-            aliasName = aliasLiteral.getStringValue();\n-          }\n+          aliasName = aliasLiteral.getFieldValue().toString();\n         }\n         if (aliasName != null) {\n           columnNames[i] = aliasName;\n"}}, {"oid": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "url": "https://github.com/apache/pinot/commit/27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "message": "Address comments", "committedDate": "2020-02-03T21:21:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NzMyMA==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374397320", "bodyText": "What is the SQL standard for AS keyword? Can it work on FUNCTION and LITERAL? If not, we should add sanity check here to block the query. The query should always to valid when it goes to the query engine.", "author": "Jackie-Jiang", "createdAt": "2020-02-03T23:20:22Z", "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -120,6 +120,10 @@ private void convertSelectList(PinotQuery pinotQuery, BrokerRequest brokerReques\n     List<AggregationInfo> aggregationInfoList = null;\n     for (Expression expression : pinotQuery.getSelectList()) {\n       ExpressionType type = expression.getType();\n+      if (type == ExpressionType.FUNCTION && expression.getFunctionCall().getOperator().equalsIgnoreCase(SqlKind.AS.toString())) {", "originalCommit": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTAxNg==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374401016", "bodyText": "It's up to us to set it, here we compile it into a function call with operator = 'AS', operands[0] as alias_from_expression and operands[0] as alias_to_expression", "author": "xiangfu0", "createdAt": "2020-02-03T23:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NzMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "846b4d66884d1830abbc8e188b667a828e703114", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java\nindex 2ecab36074..9adcb1fd83 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java\n\n@@ -120,10 +120,6 @@ public class PinotQuery2BrokerRequestConverter {\n     List<AggregationInfo> aggregationInfoList = null;\n     for (Expression expression : pinotQuery.getSelectList()) {\n       ExpressionType type = expression.getType();\n-      if (type == ExpressionType.FUNCTION && expression.getFunctionCall().getOperator().equalsIgnoreCase(SqlKind.AS.toString())) {\n-        expression = expression.getFunctionCall().getOperands().get(0);\n-        type = expression.getType();\n-      }\n       switch (type) {\n         case LITERAL:\n           if (selection == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NzcyMw==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374397723", "bodyText": "Please add some comments explaining why this can happen", "author": "Jackie-Jiang", "createdAt": "2020-02-03T23:21:34Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +188,46 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    int selectListSize = selectList.size();\n+    if (columnNames.length != selectListSize) {", "originalCommit": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMjI1NA==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374402254", "bodyText": "will do", "author": "xiangfu0", "createdAt": "2020-02-03T23:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NzcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "846b4d66884d1830abbc8e188b667a828e703114", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\nindex de0a0f9394..c8b34de7c5 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n\n@@ -205,24 +202,23 @@ public class BrokerReduceService {\n     DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n     List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n     String[] columnNames = dataSchema.getColumnNames();\n-    int selectListSize = selectList.size();\n-    if (columnNames.length != selectListSize) {\n+    if (columnNames.length != selectList.size()) {\n+      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n+          selectList.size());\n       return;\n     }\n-    for (int i = 0; i < selectListSize; i++) {\n-      Function selectFunc = selectList.get(i).getFunctionCall();\n-      if (selectFunc != null && selectFunc.getOperator()\n-          .equalsIgnoreCase(SqlKind.AS.toString())) {\n+    for (int i = 0; i < selectList.size(); i++) {\n+      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()\n+          .equalsIgnoreCase(\"AS\")) {\n         String aliasName = null;\n-        // Check Identifier\n-        Identifier aliasIdentifier = selectFunc.getOperands().get(1).getIdentifier();\n-        if (aliasIdentifier != null) {\n-          aliasName = aliasIdentifier.getName();\n+        if (selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier() != null) {\n+          aliasName = selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier().getName();\n         }\n-        // Check Literal\n-        Literal aliasLiteral = selectFunc.getOperands().get(1).getLiteral();\n+        Literal aliasLiteral = selectList.get(i).getFunctionCall().getOperands().get(1).getLiteral();\n         if (aliasLiteral != null) {\n-          aliasName = aliasLiteral.getFieldValue().toString();\n+          if (aliasLiteral.isSetStringValue()) {\n+            aliasName = aliasLiteral.getStringValue();\n+          }\n         }\n         if (aliasName != null) {\n           columnNames[i] = aliasName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5ODY0OQ==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374398649", "bodyText": "We should not perform sanity check here, but when we compile the query. At this point, alias should always exist and should always be identifier.", "author": "Jackie-Jiang", "createdAt": "2020-02-03T23:24:14Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +188,46 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    int selectListSize = selectList.size();\n+    if (columnNames.length != selectListSize) {\n+      return;\n+    }\n+    for (int i = 0; i < selectListSize; i++) {\n+      Function selectFunc = selectList.get(i).getFunctionCall();\n+      if (selectFunc != null && selectFunc.getOperator()\n+          .equalsIgnoreCase(SqlKind.AS.toString())) {\n+        String aliasName = null;", "originalCommit": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMjIxNw==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374402217", "bodyText": "make sense, will update the query parsing logic there.", "author": "xiangfu0", "createdAt": "2020-02-03T23:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5ODY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "846b4d66884d1830abbc8e188b667a828e703114", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\nindex de0a0f9394..c8b34de7c5 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n\n@@ -205,24 +202,23 @@ public class BrokerReduceService {\n     DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n     List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n     String[] columnNames = dataSchema.getColumnNames();\n-    int selectListSize = selectList.size();\n-    if (columnNames.length != selectListSize) {\n+    if (columnNames.length != selectList.size()) {\n+      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n+          selectList.size());\n       return;\n     }\n-    for (int i = 0; i < selectListSize; i++) {\n-      Function selectFunc = selectList.get(i).getFunctionCall();\n-      if (selectFunc != null && selectFunc.getOperator()\n-          .equalsIgnoreCase(SqlKind.AS.toString())) {\n+    for (int i = 0; i < selectList.size(); i++) {\n+      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()\n+          .equalsIgnoreCase(\"AS\")) {\n         String aliasName = null;\n-        // Check Identifier\n-        Identifier aliasIdentifier = selectFunc.getOperands().get(1).getIdentifier();\n-        if (aliasIdentifier != null) {\n-          aliasName = aliasIdentifier.getName();\n+        if (selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier() != null) {\n+          aliasName = selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier().getName();\n         }\n-        // Check Literal\n-        Literal aliasLiteral = selectFunc.getOperands().get(1).getLiteral();\n+        Literal aliasLiteral = selectList.get(i).getFunctionCall().getOperands().get(1).getLiteral();\n         if (aliasLiteral != null) {\n-          aliasName = aliasLiteral.getFieldValue().toString();\n+          if (aliasLiteral.isSetStringValue()) {\n+            aliasName = aliasLiteral.getStringValue();\n+          }\n         }\n         if (aliasName != null) {\n           columnNames[i] = aliasName;\n"}}, {"oid": "846b4d66884d1830abbc8e188b667a828e703114", "url": "https://github.com/apache/pinot/commit/846b4d66884d1830abbc8e188b667a828e703114", "message": "Set alias name in response schema names", "committedDate": "2020-02-03T23:49:14Z", "type": "commit"}, {"oid": "1ffad457fd993b225658039dd7d74161c042a593", "url": "https://github.com/apache/pinot/commit/1ffad457fd993b225658039dd7d74161c042a593", "message": "Adding test for cast with reduce", "committedDate": "2020-02-03T23:49:14Z", "type": "commit"}, {"oid": "5464c79118070fe0ccbf4b3712bc7cf47b1625d5", "url": "https://github.com/apache/pinot/commit/5464c79118070fe0ccbf4b3712bc7cf47b1625d5", "message": "Address comments", "committedDate": "2020-02-03T23:50:27Z", "type": "commit"}, {"oid": "c7c2c02a6d9005f024b302108556de8c145848b0", "url": "https://github.com/apache/pinot/commit/c7c2c02a6d9005f024b302108556de8c145848b0", "message": "Address comments", "committedDate": "2020-02-03T23:52:23Z", "type": "commit"}, {"oid": "c7c2c02a6d9005f024b302108556de8c145848b0", "url": "https://github.com/apache/pinot/commit/c7c2c02a6d9005f024b302108556de8c145848b0", "message": "Address comments", "committedDate": "2020-02-03T23:52:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTY0NA==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374839644", "bodyText": "Remove the unused logger", "author": "Jackie-Jiang", "createdAt": "2020-02-04T18:18:00Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -43,6 +51,8 @@\n @ThreadSafe\n public class BrokerReduceService {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerReduceService.class);", "originalCommit": "c7c2c02a6d9005f024b302108556de8c145848b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "617977bc95fbb7ac8920f9ab21c6ecee0aa31278", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\nindex f6ecff55a7..299f0a4601 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n\n@@ -51,8 +47,6 @@ import org.slf4j.LoggerFactory;\n @ThreadSafe\n public class BrokerReduceService {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerReduceService.class);\n-\n   public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n       Map<ServerRoutingInstance, DataTable> dataTableMap, @Nullable BrokerMetrics brokerMetrics) {\n     if (dataTableMap.size() == 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTY5OQ==", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374839699", "bodyText": "(nit) new line here", "author": "Jackie-Jiang", "createdAt": "2020-02-04T18:18:08Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +188,34 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    int selectListSize = selectList.size();\n+    // For query like `SELECT *`, we skip alias update.\n+    if (columnNames.length != selectListSize) {\n+      return;\n+    }\n+    for (int i = 0; i < selectListSize; i++) {\n+      Function selectFunc = selectList.get(i).getFunctionCall();\n+      if (selectFunc != null && selectFunc.getOperator()\n+          .equalsIgnoreCase(SqlKind.AS.toString())) {\n+        columnNames[i] = selectFunc.getOperands().get(1).getIdentifier().getName();\n+      }\n+    }\n+  }\n+}", "originalCommit": "c7c2c02a6d9005f024b302108556de8c145848b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "617977bc95fbb7ac8920f9ab21c6ecee0aa31278", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\nindex f6ecff55a7..299f0a4601 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java\n\n@@ -218,4 +212,4 @@ public class BrokerReduceService {\n       }\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n"}}, {"oid": "617977bc95fbb7ac8920f9ab21c6ecee0aa31278", "url": "https://github.com/apache/pinot/commit/617977bc95fbb7ac8920f9ab21c6ecee0aa31278", "message": "Address comments", "committedDate": "2020-02-04T20:23:14Z", "type": "commit"}]}