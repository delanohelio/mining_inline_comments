{"pr_number": 5506, "pr_title": "Moved StreamPartitionMsgOffset to be an interface", "pr_createdAt": "2020-06-06T00:14:19Z", "pr_url": "https://github.com/apache/pinot/pull/5506", "timeline": [{"oid": "fc3a9e61af11dedf10807bbd4792a6a72c14b397", "url": "https://github.com/apache/pinot/commit/fc3a9e61af11dedf10807bbd4792a6a72c14b397", "message": "Moved StreamPartitionMsgOffset to be an interface\n\n- Changed StreamPartitionMsgOffset class to be an interface.\n- Introduced a LongMsgOffsetFactory class that can be used for Kafka. Other\n  streams will need to provide their own factory to create offsets of\n  various types. Keeping LongMsgOffsetFactory in spi, so we can also use\n  it in tests. Alternative was to introduce this for each test, but implement\n  one in kafka that does the same thing.\n- Introduced a new config 'stream.<type>.partition.offset.factory.class.name'\n  Stream providers need to set the offset factory class with this config key.\n- All classes now use StreamPartitionMsgOffset instead of 'long', except for\n  cases where the offset is received from the stream or the offset is being\n  read or written to persistent zk metadata.\n- Marked TODOs explicity on items still to be done to complete impleemntation\n  of generic offsets.\n\nIssue #5359", "committedDate": "2020-06-05T23:35:26Z", "type": "commit"}, {"oid": "9aa45ee08dbed056dd7002c016f2551cbee753f6", "url": "https://github.com/apache/pinot/commit/9aa45ee08dbed056dd7002c016f2551cbee753f6", "message": "Enabled parsing stream partition msg offset in protocol\n\nAnd also added a backward cmpatibility test", "committedDate": "2020-06-07T00:06:59Z", "type": "commit"}, {"oid": "bb6a33795f3db3013cbe0dfa2c63126f046f7e2a", "url": "https://github.com/apache/pinot/commit/bb6a33795f3db3013cbe0dfa2c63126f046f7e2a", "message": "Fix unit test failure", "committedDate": "2020-06-07T14:52:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMjI1Ng==", "url": "https://github.com/apache/pinot/pull/5506#discussion_r437112256", "bodyText": "will we introduce new methods for setting offset in the metadata? What happens to old segments?", "author": "npawar", "createdAt": "2020-06-09T03:06:03Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java", "diffHunk": "@@ -515,7 +519,8 @@ private void createNewSegmentZKMetadata(TableConfig tableConfig, PartitionLevelS\n     newSegmentZKMetadata.setTableName(realtimeTableName);\n     newSegmentZKMetadata.setSegmentName(segmentName);\n     newSegmentZKMetadata.setCreationTime(creationTimeMs);\n-    newSegmentZKMetadata.setStartOffset(startOffset);\n+    // TODO Issue 5953 Use string offset in the metadata\n+    newSegmentZKMetadata.setStartOffset(Long.parseLong(startOffset.toString()));", "originalCommit": "bb6a33795f3db3013cbe0dfa2c63126f046f7e2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyNjQ1Ng==", "url": "https://github.com/apache/pinot/pull/5506#discussion_r437526456", "bodyText": "I was looking at metadata yesterday, and they are stored as strings. Luckily, the metadata classes don't construct objects directly from json. So, there may be no changes needed for metadata, only change the access method.\nComing soon to a PR near you.", "author": "mcvsubbu", "createdAt": "2020-06-09T15:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMjI1Ng=="}], "type": "inlineReview", "revised_code": null}]}