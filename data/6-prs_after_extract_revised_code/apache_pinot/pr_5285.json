{"pr_number": 5285, "pr_title": "Use 8byte offsets in chunk based raw index creator", "pr_createdAt": "2020-04-22T09:10:30Z", "pr_url": "https://github.com/apache/pinot/pull/5285", "timeline": [{"oid": "19ec6388d5ec3f65ba886a301a7a283679f16fc6", "url": "https://github.com/apache/pinot/commit/19ec6388d5ec3f65ba886a301a7a283679f16fc6", "message": "Use 8byte offsets in chunk based raw index\ncreator", "committedDate": "2020-04-22T08:48:05Z", "type": "commit"}, {"oid": "4321b3370eebc8853dd28e780a9a0e9d1c81d0fe", "url": "https://github.com/apache/pinot/commit/4321b3370eebc8853dd28e780a9a0e9d1c81d0fe", "message": "cleanup", "committedDate": "2020-04-22T09:12:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMjIwNw==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413112207", "bodyText": "Nice. Do we also want to add a v1 raw data in the tests?", "author": "mcvsubbu", "createdAt": "2020-04-22T16:03:55Z", "path": "pinot-core/src/test/java/org/apache/pinot/index/readerwriter/VarByteChunkSingleValueReaderWriteTest.java", "diffHunk": "@@ -113,27 +117,37 @@ public void test(ChunkCompressorFactory.CompressionType compressionType)\n    * @throws IOException\n    */\n   @Test\n-  public void testBackwardCompatibility()\n-      throws IOException {\n+  public void testBackwardCompatibilityV1()\n+      throws Exception {\n     String[] expected = new String[]{\"abcde\", \"fgh\", \"ijklmn\", \"12345\"};\n+    testBackwardCompatibilityHelper(\"data/varByteStrings.v1\", expected, 1009);\n+  }\n \n-    // Get v1 from resources folder\n+  /**\n+   * This test ensures that the reader can read in an data file from version 2.\n+   */\n+  @Test\n+  public void testBackwardCompatibilityV2()\n+      throws Exception {\n+    String[] data = {\"abcdefghijk\", \"12456887\", \"pqrstuv\", \"500\"};\n+    testBackwardCompatibilityHelper(\"data/varByteStringsCompressed.v2\", data, 1000);", "originalCommit": "4321b3370eebc8853dd28e780a9a0e9d1c81d0fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2MjU1Mg==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413162552", "bodyText": "this should be based on the version passed in to the writer. Yes, we use only version 2 now, but let us keep the versioning clean. It is there in the constructor, use it. It will help if we want to select a different version in the writer for whatever reason.", "author": "mcvsubbu", "createdAt": "2020-04-22T17:09:53Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java", "diffHunk": "@@ -139,7 +141,8 @@ public void close()\n   private int writeHeader(ChunkCompressorFactory.CompressionType compressionType, int totalDocs, int numDocsPerChunk,\n       int sizeOfEntry, int version) {\n     int numChunks = (totalDocs + numDocsPerChunk - 1) / numDocsPerChunk;\n-    int headerSize = (numChunks + 7) * Integer.BYTES; // 7 items written before chunk indexing.\n+    // 7 items written before chunk indexing.\n+    int headerSize = (7 * Integer.BYTES) + (numChunks * VarByteChunkSingleValueWriter.FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE);", "originalCommit": "4321b3370eebc8853dd28e780a9a0e9d1c81d0fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3NzAwNQ==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413277005", "bodyText": "I agree. done", "author": "siddharthteotia", "createdAt": "2020-04-22T19:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2MjU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "baf9ae370fd58008a3ca8ac24f0910c99a1ead12", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java b/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\nindex ed9cd06e62..fddf0760b5 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\n\n@@ -141,8 +160,7 @@ public abstract class BaseChunkSingleValueWriter implements SingleColumnSingleVa\n   private int writeHeader(ChunkCompressorFactory.CompressionType compressionType, int totalDocs, int numDocsPerChunk,\n       int sizeOfEntry, int version) {\n     int numChunks = (totalDocs + numDocsPerChunk - 1) / numDocsPerChunk;\n-    // 7 items written before chunk indexing.\n-    int headerSize = (7 * Integer.BYTES) + (numChunks * VarByteChunkSingleValueWriter.FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE);\n+    int headerSize = (7 * Integer.BYTES) + (numChunks * _headerEntryChunkOffsetSize);\n \n     _header = ByteBuffer.allocateDirect(headerSize);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2Mjg4OA==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413162888", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final int FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE = Long.BYTES;\n          \n          \n            \n              public static final int FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE_V3 = Long.BYTES;", "author": "mcvsubbu", "createdAt": "2020-04-22T17:10:21Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java", "diffHunk": "@@ -37,6 +37,8 @@\n  */\n public abstract class BaseChunkSingleValueWriter implements SingleColumnSingleValueWriter {\n   private static final Logger LOGGER = LoggerFactory.getLogger(BaseChunkSingleValueWriter.class);\n+  public static final int FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE_V1V2 = Integer.BYTES;\n+  public static final int FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE = Long.BYTES;", "originalCommit": "4321b3370eebc8853dd28e780a9a0e9d1c81d0fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3Njk3Nw==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413276977", "bodyText": "done", "author": "siddharthteotia", "createdAt": "2020-04-22T19:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2Mjg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "baf9ae370fd58008a3ca8ac24f0910c99a1ead12", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java b/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\nindex ed9cd06e62..fddf0760b5 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\n\n@@ -37,8 +38,8 @@ import org.slf4j.LoggerFactory;\n  */\n public abstract class BaseChunkSingleValueWriter implements SingleColumnSingleValueWriter {\n   private static final Logger LOGGER = LoggerFactory.getLogger(BaseChunkSingleValueWriter.class);\n-  public static final int FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE_V1V2 = Integer.BYTES;\n-  public static final int FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE = Long.BYTES;\n+  private static final int FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE_V1V2 = Integer.BYTES;\n+  private static final int FILE_HEADER_ENTRY_CHUNK_OFFSET_SIZE_V3 = Long.BYTES;\n \n   protected final FileChannel _dataFile;\n   protected ByteBuffer _header;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2Mzc1MA==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413163750", "bodyText": "Add another final int _headerEntryChunkOffsetSize here, determined based on version", "author": "mcvsubbu", "createdAt": "2020-04-22T17:11:30Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java", "diffHunk": "@@ -45,7 +47,7 @@\n   protected final ChunkCompressor _chunkCompressor;\n \n   protected int _chunkSize;\n-  protected int _dataOffset;\n+  protected long _dataOffset;", "originalCommit": "4321b3370eebc8853dd28e780a9a0e9d1c81d0fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3NjkxMg==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413276912", "bodyText": "done", "author": "siddharthteotia", "createdAt": "2020-04-22T19:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2Mzc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "baf9ae370fd58008a3ca8ac24f0910c99a1ead12", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java b/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\nindex ed9cd06e62..fddf0760b5 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/v1/BaseChunkSingleValueWriter.java\n\n@@ -49,6 +50,8 @@ public abstract class BaseChunkSingleValueWriter implements SingleColumnSingleVa\n   protected int _chunkSize;\n   protected long _dataOffset;\n \n+  private final int _headerEntryChunkOffsetSize;\n+\n   /**\n    * Constructor for the class.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3NDU5NQ==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413174595", "bodyText": "nice.\nI would also introduce a private final _headerEntryChunkOffsetSize here, and initialize it by calling a method getHeaderEntryChunkOffssetSize(version) in the writer.", "author": "mcvsubbu", "createdAt": "2020-04-22T17:26:30Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java", "diffHunk": "@@ -47,6 +48,7 @@\n   protected final int _numDocsPerChunk;\n   protected final int _numChunks;\n   protected final int _lengthOfLongestEntry;\n+  private final int _version;", "originalCommit": "4321b3370eebc8853dd28e780a9a0e9d1c81d0fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3NjczNQ==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413276735", "bodyText": "Done.\n@mcvsubbu , this actually comes handy now itself since I haven't bumped the version of fixed byte chunk writer. It is still on version 2 and using 4-byte chunk offset entries in file header. So the current changes protect compatibility of v1/v2 for var-byte, read/write new var byte in v3 and still continue to read/write fixed byte indexes in v1/v2.\nI am having mixed opinions on bumping up the version of fixed byte chunk writer to use 8byte offsets as well. The thing is that if we don't bump it up and tomorrow file format for fixed byte changes (for some reason), then we will bump it up to 3. At that time  it will automatically get 8-byte offsets by virtue of being at version >=3. So may be do it now and keep the versions same.\nThe flip side is that you would ideally want to evolve fixed-byte and var-byte formats independently (which is what is done in this PR by keeping the fixed byte writer still at version 2). Obviously if we separate out base class and duplicate code, then things will be simplified but that's not the best option. Thoughts?", "author": "siddharthteotia", "createdAt": "2020-04-22T19:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3NDU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxMDc3MQ==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413310771", "bodyText": "Fixed and var byte formats cannot evolve independently unless we split the base class like you said. Some duplication can be avoided, but in the end, the version number at the top should decide what the format is, underneath.\nI guess the con side of moving this for fixed byte will be that storage will (almost) double for the fixed byte no-dictionary columns?", "author": "mcvsubbu", "createdAt": "2020-04-22T20:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3NDU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMyMDUzNw==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413320537", "bodyText": "No my bad. It will be double offset per chunk, so it should be ok. Let us just make it 8 bytes for all like we discussed.", "author": "mcvsubbu", "createdAt": "2020-04-22T20:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3NDU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMyNTYyMg==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413325622", "bodyText": "Discussed offline. It is better to keep the version/format same so we will use 8-byte chunk offsets for fixed-byte indexes as well.\nStorage overhead -  Consider a segment with 10million rows. Since we currently pack 1000 rows in a fixed byte chunk, there will be 10k chunks. If the file header has 8-byte chunk offsets instead of 4, the storage overhead for the raw forward index of the particular column goes up by 40KB (10000 chunks * 4). Extrapolating this to 1000 segments on the server with roughly 5 fixed width no dictionary columns per segment, we are looking at 40KB * 1000 * 5 = 200MB\nWill make the changes", "author": "siddharthteotia", "createdAt": "2020-04-22T20:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3NDU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzODY5Ng==", "url": "https://github.com/apache/pinot/pull/5285#discussion_r413338696", "bodyText": "Made the changes as discussed", "author": "siddharthteotia", "createdAt": "2020-04-22T21:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3NDU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "baf9ae370fd58008a3ca8ac24f0910c99a1ead12", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java b/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java\nindex ca95a5cead..24972ad76f 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java\n\n@@ -49,6 +51,7 @@ public abstract class BaseChunkSingleValueReader extends BaseSingleColumnSingleV\n   protected final int _numChunks;\n   protected final int _lengthOfLongestEntry;\n   private final int _version;\n+  private final int _headerEntryChunkOffsetSize;\n \n   /**\n    * Constructor for the class.\n"}}, {"oid": "562107d141d960693a4a76667fc08493d6e05d73", "url": "https://github.com/apache/pinot/commit/562107d141d960693a4a76667fc08493d6e05d73", "message": "fixed tests", "committedDate": "2020-04-22T17:32:30Z", "type": "commit"}, {"oid": "baf9ae370fd58008a3ca8ac24f0910c99a1ead12", "url": "https://github.com/apache/pinot/commit/baf9ae370fd58008a3ca8ac24f0910c99a1ead12", "message": "Fix tests and address review comments", "committedDate": "2020-04-22T19:41:55Z", "type": "commit"}, {"oid": "306369d5427143648e91bc5f12d1958383975428", "url": "https://github.com/apache/pinot/commit/306369d5427143648e91bc5f12d1958383975428", "message": "Use 8-byte offset for fixed-byte chunk writer.\nAdd backward compatibility test", "committedDate": "2020-04-22T21:14:41Z", "type": "commit"}]}