{"pr_number": 5386, "pr_title": "[TE] Add support for configuring additional custom fields in Jira Alert", "pr_createdAt": "2020-05-14T16:24:15Z", "pr_url": "https://github.com/apache/pinot/pull/5386", "timeline": [{"oid": "03e0a1071aff259bbf0994c7901e788fa86d10d9", "url": "https://github.com/apache/pinot/commit/03e0a1071aff259bbf0994c7901e788fa86d10d9", "message": "[TE] Add support for configuring additional custom fields in Jira", "committedDate": "2020-05-14T02:54:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODExMg==", "url": "https://github.com/apache/pinot/pull/5386#discussion_r425398112", "bodyText": "return the error message in the endpoint's response?", "author": "jihaozh", "createdAt": "2020-05-14T20:04:10Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java", "diffHunk": "@@ -1107,4 +1115,33 @@ public Response listYamls(\n     LOG.info(\"Successfully returned \" + yamls.size() + \" detection configs.\");\n     return Response.ok(yamls).build();\n   }\n+\n+  /**\n+   * Api to trigger a notification alert. Mostly used for ad-hoc testing.\n+   * Alert will be sent only if there are new anomalies since the last watermark.\n+   * Watermarks will be updated after notifying anomalies if any.\n+   */\n+  @PUT\n+  @Path(\"/notify/{id}\")\n+  @ApiOperation(\"Send notification email for detection alert config\")\n+  public void test(\n+      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long detectionAlertConfigId) {\n+    LOG.info(\"Triggering subscription task with id \" + detectionAlertConfigId);\n+\n+    // Build the task context\n+    ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n+    config.setAlerterConfiguration(alerterConfig);\n+    TaskContext taskContext = new TaskContext();\n+    taskContext.setThirdEyeAnomalyConfiguration(config);\n+\n+    // Run the notification task. This will update the subscription watermark as well.\n+    DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(detectionAlertConfigId);\n+    TaskRunner taskRunner = new DetectionAlertTaskRunner();\n+    try {\n+      taskRunner.execute(taskInfo, taskContext);\n+    } catch (Exception e) {\n+      LOG.error(\"Exception while triggering the notification task with id \" + detectionAlertConfigId, e);", "originalCommit": "03e0a1071aff259bbf0994c7901e788fa86d10d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0Mzc2NQ==", "url": "https://github.com/apache/pinot/pull/5386#discussion_r425443765", "bodyText": "Done", "author": "akshayrai", "createdAt": "2020-05-14T21:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODExMg=="}], "type": "inlineReview", "revised_code": {"commit": "a4365f44e08f55049e90ea85915b2c4bbf9f3986", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java\nindex 033ad18a1..c8601fe5d 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java\n\n@@ -1124,24 +1124,32 @@ public class YamlResource {\n   @PUT\n   @Path(\"/notify/{id}\")\n   @ApiOperation(\"Send notification email for detection alert config\")\n-  public void test(\n-      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long detectionAlertConfigId) {\n-    LOG.info(\"Triggering subscription task with id \" + detectionAlertConfigId);\n-\n-    // Build the task context\n-    ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n-    config.setAlerterConfiguration(alerterConfig);\n-    TaskContext taskContext = new TaskContext();\n-    taskContext.setThirdEyeAnomalyConfiguration(config);\n-\n-    // Run the notification task. This will update the subscription watermark as well.\n-    DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(detectionAlertConfigId);\n-    TaskRunner taskRunner = new DetectionAlertTaskRunner();\n+  public Response triggerNotification(\n+      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long subscriptionId) {\n+    LOG.info(\"Triggering subscription task with id \" + subscriptionId);\n+    Map<String, String> responseMessage = new HashMap<>();\n     try {\n+      // Build the task context\n+      ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n+      config.setAlerterConfiguration(alerterConfig);\n+      TaskContext taskContext = new TaskContext();\n+      taskContext.setThirdEyeAnomalyConfiguration(config);\n+\n+      // Run the notification task. This will update the subscription watermark as well.\n+      DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(subscriptionId);\n+      TaskRunner taskRunner = new DetectionAlertTaskRunner();\n       taskRunner.execute(taskInfo, taskContext);\n     } catch (Exception e) {\n-      LOG.error(\"Exception while triggering the notification task with id \" + detectionAlertConfigId, e);\n+      LOG.error(\"Exception while triggering the notification task with id \" + subscriptionId, e);\n+      responseMessage.put(\"message\", \"Failed to trigger the notification\");\n+      responseMessage.put(\"more-info\", \"Triggered subscription id \" + subscriptionId + \". Error = \" + e.getMessage());\n+      return Response.serverError().entity(responseMessage).build();\n     }\n-    LOG.info(\"Notification api triggered successfully\");\n+\n+    LOG.info(\"Subscription with id \" + subscriptionId + \" triggered successfully\");\n+    responseMessage.put(\"message\", \"Subscription was triggered successfully.\");\n+    responseMessage.put(\"more-info\", \"Triggered subscription id \" + subscriptionId);\n+    responseMessage.put(\"detectionAlertConfigId\", String.valueOf(subscriptionId));\n+    return Response.ok().entity(responseMessage).build();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODQ2Mg==", "url": "https://github.com/apache/pinot/pull/5386#discussion_r425398462", "bodyText": "return a success response here?", "author": "jihaozh", "createdAt": "2020-05-14T20:04:50Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java", "diffHunk": "@@ -1107,4 +1115,33 @@ public Response listYamls(\n     LOG.info(\"Successfully returned \" + yamls.size() + \" detection configs.\");\n     return Response.ok(yamls).build();\n   }\n+\n+  /**\n+   * Api to trigger a notification alert. Mostly used for ad-hoc testing.\n+   * Alert will be sent only if there are new anomalies since the last watermark.\n+   * Watermarks will be updated after notifying anomalies if any.\n+   */\n+  @PUT\n+  @Path(\"/notify/{id}\")\n+  @ApiOperation(\"Send notification email for detection alert config\")\n+  public void test(\n+      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long detectionAlertConfigId) {\n+    LOG.info(\"Triggering subscription task with id \" + detectionAlertConfigId);\n+\n+    // Build the task context\n+    ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n+    config.setAlerterConfiguration(alerterConfig);\n+    TaskContext taskContext = new TaskContext();\n+    taskContext.setThirdEyeAnomalyConfiguration(config);\n+\n+    // Run the notification task. This will update the subscription watermark as well.\n+    DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(detectionAlertConfigId);\n+    TaskRunner taskRunner = new DetectionAlertTaskRunner();\n+    try {\n+      taskRunner.execute(taskInfo, taskContext);\n+    } catch (Exception e) {\n+      LOG.error(\"Exception while triggering the notification task with id \" + detectionAlertConfigId, e);\n+    }\n+    LOG.info(\"Notification api triggered successfully\");", "originalCommit": "03e0a1071aff259bbf0994c7901e788fa86d10d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0NDYyMw==", "url": "https://github.com/apache/pinot/pull/5386#discussion_r425444623", "bodyText": "done", "author": "akshayrai", "createdAt": "2020-05-14T21:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a4365f44e08f55049e90ea85915b2c4bbf9f3986", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java\nindex 033ad18a1..c8601fe5d 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java\n\n@@ -1124,24 +1124,32 @@ public class YamlResource {\n   @PUT\n   @Path(\"/notify/{id}\")\n   @ApiOperation(\"Send notification email for detection alert config\")\n-  public void test(\n-      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long detectionAlertConfigId) {\n-    LOG.info(\"Triggering subscription task with id \" + detectionAlertConfigId);\n-\n-    // Build the task context\n-    ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n-    config.setAlerterConfiguration(alerterConfig);\n-    TaskContext taskContext = new TaskContext();\n-    taskContext.setThirdEyeAnomalyConfiguration(config);\n-\n-    // Run the notification task. This will update the subscription watermark as well.\n-    DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(detectionAlertConfigId);\n-    TaskRunner taskRunner = new DetectionAlertTaskRunner();\n+  public Response triggerNotification(\n+      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long subscriptionId) {\n+    LOG.info(\"Triggering subscription task with id \" + subscriptionId);\n+    Map<String, String> responseMessage = new HashMap<>();\n     try {\n+      // Build the task context\n+      ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n+      config.setAlerterConfiguration(alerterConfig);\n+      TaskContext taskContext = new TaskContext();\n+      taskContext.setThirdEyeAnomalyConfiguration(config);\n+\n+      // Run the notification task. This will update the subscription watermark as well.\n+      DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(subscriptionId);\n+      TaskRunner taskRunner = new DetectionAlertTaskRunner();\n       taskRunner.execute(taskInfo, taskContext);\n     } catch (Exception e) {\n-      LOG.error(\"Exception while triggering the notification task with id \" + detectionAlertConfigId, e);\n+      LOG.error(\"Exception while triggering the notification task with id \" + subscriptionId, e);\n+      responseMessage.put(\"message\", \"Failed to trigger the notification\");\n+      responseMessage.put(\"more-info\", \"Triggered subscription id \" + subscriptionId + \". Error = \" + e.getMessage());\n+      return Response.serverError().entity(responseMessage).build();\n     }\n-    LOG.info(\"Notification api triggered successfully\");\n+\n+    LOG.info(\"Subscription with id \" + subscriptionId + \" triggered successfully\");\n+    responseMessage.put(\"message\", \"Subscription was triggered successfully.\");\n+    responseMessage.put(\"more-info\", \"Triggered subscription id \" + subscriptionId);\n+    responseMessage.put(\"detectionAlertConfigId\", String.valueOf(subscriptionId));\n+    return Response.ok().entity(responseMessage).build();\n   }\n }\n"}}, {"oid": "a4365f44e08f55049e90ea85915b2c4bbf9f3986", "url": "https://github.com/apache/pinot/commit/a4365f44e08f55049e90ea85915b2c4bbf9f3986", "message": "addressed Jihao's comment", "committedDate": "2020-05-14T21:32:37Z", "type": "commit"}]}