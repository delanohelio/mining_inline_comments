{"pr_number": 5685, "pr_title": "Adding controller APIs to fetch brokers information", "pr_createdAt": "2020-07-11T03:03:56Z", "pr_url": "https://github.com/apache/pinot/pull/5685", "timeline": [{"oid": "cda4c4f6b627f972ae002a8ff6e838742eedd8d0", "url": "https://github.com/apache/pinot/commit/cda4c4f6b627f972ae002a8ff6e838742eedd8d0", "message": "Adding controller APIs to fetch brokers information", "committedDate": "2020-07-11T06:07:36Z", "type": "forcePushed"}, {"oid": "f4496ee261414d556f41f26fa4e1b650afcc9369", "url": "https://github.com/apache/pinot/commit/f4496ee261414d556f41f26fa4e1b650afcc9369", "message": "Adding controller APIs to fetch brokers information", "committedDate": "2020-07-11T06:09:32Z", "type": "forcePushed"}, {"oid": "2f02d337e5daab135e899a4bdb9a4fba0e424a68", "url": "https://github.com/apache/pinot/commit/2f02d337e5daab135e899a4bdb9a4fba0e424a68", "message": "Adding controller APIs to fetch brokers information", "committedDate": "2020-07-11T11:06:46Z", "type": "commit"}, {"oid": "2f02d337e5daab135e899a4bdb9a4fba0e424a68", "url": "https://github.com/apache/pinot/commit/2f02d337e5daab135e899a4bdb9a4fba0e424a68", "message": "Adding controller APIs to fetch brokers information", "committedDate": "2020-07-11T11:06:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3ODQ1MA==", "url": "https://github.com/apache/pinot/pull/5685#discussion_r453778450", "bodyText": "use the constant from statemodel", "author": "kishoreg", "createdAt": "2020-07-13T16:32:54Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.BROKER_TAG)\n+@Path(\"/\")\n+public class PinotBrokerRestletResource {\n+  public static final Logger LOGGER = LoggerFactory.getLogger(PinotBrokerRestletResource.class);\n+\n+  @Inject\n+  PinotHelixResourceManager _pinotHelixResourceManager;\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers\")\n+  @ApiOperation(value = \"List tenants and tables to brokers mappings\", notes = \"List tenants and tables to brokers mappings\")\n+  public Map<String, Map<String, List<String>>> listBrokersMapping(\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    Map<String, Map<String, List<String>>> resultMap = new HashMap<>();\n+    resultMap.put(\"tenants\", getTenantsToBrokersMapping(state));\n+    resultMap.put(\"tables\", getTablesToBrokersMapping(state));\n+    return resultMap;\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers/tenants\")\n+  @ApiOperation(value = \"List tenants to brokers mappings\", notes = \"List tenants to brokers mappings\")\n+  public Map<String, List<String>> getTenantsToBrokersMapping(\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    Map<String, List<String>> resultMap = new HashMap<>();\n+    _pinotHelixResourceManager.getAllBrokerTenantNames().stream()\n+        .forEach(tenant -> resultMap.put(tenant, getBrokersForTenant(tenant, state)));\n+    return resultMap;\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers/tenants/{tenantName}\")\n+  @ApiOperation(value = \"List brokers for a given tenant\", notes = \"List brokers for a given tenant\")\n+  public List<String> getBrokersForTenant(\n+      @ApiParam(value = \"Name of the tenant\", required = true) @PathParam(\"tenantName\") String tenantName,\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    Set<String> tenantBrokers = new HashSet<>();\n+    tenantBrokers.addAll(_pinotHelixResourceManager.getAllInstancesForBrokerTenant(tenantName));\n+    applyStateChanges(tenantBrokers, state);\n+    return ImmutableList.copyOf(tenantBrokers);\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers/tables\")\n+  @ApiOperation(value = \"List tables to brokers mappings\", notes = \"List tables to brokers mappings\")\n+  public Map<String, List<String>> getTablesToBrokersMapping(\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    Map<String, List<String>> resultMap = new HashMap<>();\n+    _pinotHelixResourceManager.getAllTables().stream()\n+        .forEach(table -> resultMap.put(table, getBrokersForTable(table, state)));\n+    return resultMap;\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers/tables/{tableName}\")\n+  @ApiOperation(value = \"List brokers for a given table\", notes = \"List brokers for a given table\")\n+  public List<String> getBrokersForTable(\n+      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    String actualTableName = _pinotHelixResourceManager.getActualTableName(tableName);\n+    Set<String> tableBrokers = new HashSet<>();\n+    if (_pinotHelixResourceManager.hasOfflineTable(actualTableName)) {\n+      tableBrokers.addAll(_pinotHelixResourceManager.getBrokerInstancesForTable(actualTableName, TableType.OFFLINE));\n+    }\n+    if (_pinotHelixResourceManager.hasRealtimeTable(actualTableName)) {\n+      tableBrokers.addAll(_pinotHelixResourceManager.getBrokerInstancesForTable(actualTableName, TableType.REALTIME));\n+    }\n+    applyStateChanges(tableBrokers, state);\n+    return ImmutableList.copyOf(tableBrokers);\n+  }\n+\n+  private void applyStateChanges(Set<String> brokers, String state) {\n+    if (state == null) {\n+      return;\n+    }\n+    switch (state) {\n+      case \"ONLINE\":", "originalCommit": "2f02d337e5daab135e899a4bdb9a4fba0e424a68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c142f4917901dba45a5394424e9eb309d012e92e", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\nindex 238dca89da..ee65ff9a66 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\n\n@@ -34,8 +34,10 @@ import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.pinot.common.exception.TableNotFoundException;\n+import org.apache.pinot.common.utils.CommonConstants;\n import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n-import org.apache.pinot.spi.config.table.TableType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"oid": "c142f4917901dba45a5394424e9eb309d012e92e", "url": "https://github.com/apache/pinot/commit/c142f4917901dba45a5394424e9eb309d012e92e", "message": "Address comments", "committedDate": "2020-07-14T11:06:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxMzMxNg==", "url": "https://github.com/apache/pinot/pull/5685#discussion_r454613316", "bodyText": "these two definitions are not used anywhere right?", "author": "mcvsubbu", "createdAt": "2020-07-14T20:07:46Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.pinot.common.exception.TableNotFoundException;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.BROKER_TAG)\n+@Path(\"/\")\n+public class PinotBrokerRestletResource {\n+  public static final Logger LOGGER = LoggerFactory.getLogger(PinotBrokerRestletResource.class);\n+  private static final String TYPE_REALTIME = \"_REALTIME\";", "originalCommit": "c142f4917901dba45a5394424e9eb309d012e92e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxODI5Ng==", "url": "https://github.com/apache/pinot/pull/5685#discussion_r454618296", "bodyText": "removed", "author": "xiangfu0", "createdAt": "2020-07-14T20:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxMzMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "469ae84dfa14c3ba56435663d2b42e13d9ae5922", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\nindex ee65ff9a66..3416769f7f 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\n\n@@ -46,8 +46,6 @@ import org.slf4j.LoggerFactory;\n @Path(\"/\")\n public class PinotBrokerRestletResource {\n   public static final Logger LOGGER = LoggerFactory.getLogger(PinotBrokerRestletResource.class);\n-  private static final String TYPE_REALTIME = \"_REALTIME\";\n-  private static final String TYPE_OFFLINE = \"_OFFLINE\";\n \n   @Inject\n   PinotHelixResourceManager _pinotHelixResourceManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTM3NA==", "url": "https://github.com/apache/pinot/pull/5685#discussion_r454615374", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new ControllerApplicationException(LOGGER, String.format(\"Table [%s] not found.\", tableName),\n          \n          \n            \n                    throw new ControllerApplicationException(LOGGER, String.format(\"Table '%s' not found.\", tableName),", "author": "mcvsubbu", "createdAt": "2020-07-14T20:11:39Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "diffHunk": "@@ -103,28 +110,35 @@\n   @ApiOperation(value = \"List brokers for a given table\", notes = \"List brokers for a given table\")\n   public List<String> getBrokersForTable(\n       @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr,\n       @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n-    String actualTableName = _pinotHelixResourceManager.getActualTableName(tableName);\n-    Set<String> tableBrokers = new HashSet<>();\n-    if (_pinotHelixResourceManager.hasOfflineTable(actualTableName)) {\n-      tableBrokers.addAll(_pinotHelixResourceManager.getBrokerInstancesForTable(actualTableName, TableType.OFFLINE));\n-    }\n-    if (_pinotHelixResourceManager.hasRealtimeTable(actualTableName)) {\n-      tableBrokers.addAll(_pinotHelixResourceManager.getBrokerInstancesForTable(actualTableName, TableType.REALTIME));\n+    try {\n+      List<String> tableNamesWithType = _pinotHelixResourceManager\n+          .getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+      if (tableNamesWithType.isEmpty()) {\n+        throw new ControllerApplicationException(LOGGER, String.format(\"Table [%s] not found.\", tableName),", "originalCommit": "c142f4917901dba45a5394424e9eb309d012e92e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "469ae84dfa14c3ba56435663d2b42e13d9ae5922", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\nindex ee65ff9a66..3416769f7f 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java\n\n@@ -116,7 +114,7 @@ public class PinotBrokerRestletResource {\n       List<String> tableNamesWithType = _pinotHelixResourceManager\n           .getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n       if (tableNamesWithType.isEmpty()) {\n-        throw new ControllerApplicationException(LOGGER, String.format(\"Table [%s] not found.\", tableName),\n+        throw new ControllerApplicationException(LOGGER, String.format(\"Table '%s' not found.\", tableName),\n             Response.Status.NOT_FOUND);\n       }\n       Set<String> tableBrokers =\n"}}, {"oid": "469ae84dfa14c3ba56435663d2b42e13d9ae5922", "url": "https://github.com/apache/pinot/commit/469ae84dfa14c3ba56435663d2b42e13d9ae5922", "message": "Address comments", "committedDate": "2020-07-14T20:51:58Z", "type": "commit"}, {"oid": "469ae84dfa14c3ba56435663d2b42e13d9ae5922", "url": "https://github.com/apache/pinot/commit/469ae84dfa14c3ba56435663d2b42e13d9ae5922", "message": "Address comments", "committedDate": "2020-07-14T20:51:58Z", "type": "forcePushed"}]}