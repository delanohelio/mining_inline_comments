{"pr_number": 5271, "pr_title": "Remove hadoop dependency in Create Segment Command", "pr_createdAt": "2020-04-18T02:04:04Z", "pr_url": "https://github.com/apache/pinot/pull/5271", "timeline": [{"oid": "3ceccc1c4aad6245629e7064ab41298bee00ad8c", "url": "https://github.com/apache/pinot/commit/3ceccc1c4aad6245629e7064ab41298bee00ad8c", "message": "Remove hadoop dependency in Create Segment Command", "committedDate": "2020-04-18T03:11:46Z", "type": "commit"}, {"oid": "3ceccc1c4aad6245629e7064ab41298bee00ad8c", "url": "https://github.com/apache/pinot/commit/3ceccc1c4aad6245629e7064ab41298bee00ad8c", "message": "Remove hadoop dependency in Create Segment Command", "committedDate": "2020-04-18T03:11:46Z", "type": "forcePushed"}, {"oid": "32674d0d286faaf269692af09999b5fd19fac83f", "url": "https://github.com/apache/pinot/commit/32674d0d286faaf269692af09999b5fd19fac83f", "message": "move gson to fasterxml for github events quickstart", "committedDate": "2020-04-20T19:37:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NTI0MQ==", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411645241", "bodyText": "Delete the local file after generating the segment? (Also recommend putting it into a temp dir)\nAlso, not sure if it is a good idea directly using the file name because there might be conflict for nested dir.", "author": "Jackie-Jiang", "createdAt": "2020-04-20T19:47:26Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "diffHunk": "@@ -334,10 +333,10 @@ public void run() {\n           for (int curr = 0; curr <= _retry; curr++) {\n             try {\n               SegmentGeneratorConfig config = new SegmentGeneratorConfig(segmentGeneratorConfig);\n-\n-              String localFile = dataFilePath.getName();\n-              Path localFilePath = new Path(localFile);\n-              dataDirPath.getFileSystem(new Configuration()).copyToLocalFile(dataFilePath, localFilePath);\n+              URI dataFileUri = URI.create(dataFilePath);\n+              String[] splits = dataFilePath.split(\"/\");\n+              String localFile = splits[splits.length - 1];", "originalCommit": "32674d0d286faaf269692af09999b5fd19fac83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NjE5Mw==", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411656193", "bodyText": "create a random local directory and copy file into it, then delete the directory after segment creation", "author": "xiangfu0", "createdAt": "2020-04-20T20:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NTI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "01f5f96ce28ea6680e6f8f8b6e9e54b47a49702f", "chunk": "diff --git a/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java b/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java\nindex 67762b251e..336de908d0 100644\n--- a/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java\n+++ b/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java\n\n@@ -331,13 +332,18 @@ public class CreateSegmentCommand extends AbstractBaseAdminCommand implements Co\n         @Override\n         public void run() {\n           for (int curr = 0; curr <= _retry; curr++) {\n+            File localDir = new File(UUID.randomUUID().toString());\n             try {\n               SegmentGeneratorConfig config = new SegmentGeneratorConfig(segmentGeneratorConfig);\n               URI dataFileUri = URI.create(dataFilePath);\n               String[] splits = dataFilePath.split(\"/\");\n-              String localFile = splits[splits.length - 1];\n-              pinotFS.copyToLocalFile(dataFileUri, new File(localFile));\n-              config.setInputFilePath(localFile);\n+              String fileName = splits[splits.length - 1];\n+              if (isDataFile(fileName)) {\n+                return;\n+              }\n+              File localFile = new File(localDir, fileName);\n+              pinotFS.copyToLocalFile(dataFileUri, localFile);\n+              config.setInputFilePath(localFile.getAbsolutePath());\n               config.setSegmentName(_segmentName + \"_\" + segCnt);\n               Schema schema = Schema.fromFile(new File(_schemaFile));\n               config.setSchema(schema);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NzExOQ==", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411647119", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        commits = OBJECT_MAPPER.reader().readTree(commitsResponse.responseString);\n          \n          \n            \n                        commits = JsonUtils.stringToJsonNode(commitsResponse.responseString);\n          \n      \n    \n    \n  \n\nSame for other places. No need to construct another object mapper", "author": "Jackie-Jiang", "createdAt": "2020-04-20T19:50:37Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java", "diffHunk": "@@ -206,41 +215,41 @@ public void start() {\n    * Find commits, review comments, comments corresponding to this pull request event.\n    * Construct a PullRequestMergedEvent with the help of the event, commits, review comments and comments.\n    * Converts PullRequestMergedEvent to GenericRecord\n+   * @param event\n    */\n-  private GenericRecord convertToPullRequestMergedGenericRecord(JsonElement eventJson)\n+  private GenericRecord convertToPullRequestMergedGenericRecord(JsonNode event)\n       throws IOException {\n     GenericRecord genericRecord = null;\n-    JsonObject event = eventJson.getAsJsonObject();\n-    String type = event.get(\"type\").getAsString();\n+    String type = event.get(\"type\").asText();\n \n     if (\"PullRequestEvent\".equals(type)) {\n-      JsonObject payload = event.get(\"payload\").getAsJsonObject();\n+      JsonNode payload = event.get(\"payload\");\n       if (payload != null) {\n-        String action = payload.get(\"action\").getAsString();\n-        JsonObject pullRequest = payload.get(\"pull_request\").getAsJsonObject();\n-        String merged = pullRequest.get(\"merged\").getAsString();\n+        String action = payload.get(\"action\").asText();\n+        JsonNode pullRequest = payload.get(\"pull_request\");\n+        String merged = pullRequest.get(\"merged\").asText();\n         if (\"closed\".equals(action) && \"true\".equals(merged)) { // valid pull request merge event\n \n-          JsonArray commits = null;\n-          String commitsURL = pullRequest.get(\"commits_url\").getAsString();\n+          JsonNode commits = null;\n+          String commitsURL = pullRequest.get(\"commits_url\").asText();\n           GitHubAPICaller.GitHubAPIResponse commitsResponse = _gitHubAPICaller.callAPI(commitsURL);\n \n           if (commitsResponse.responseString != null) {\n-            commits = new JsonParser().parse(commitsResponse.responseString).getAsJsonArray();\n+            commits = OBJECT_MAPPER.reader().readTree(commitsResponse.responseString);", "originalCommit": "32674d0d286faaf269692af09999b5fd19fac83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTc0NA==", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411655744", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-04-20T20:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NzExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "01f5f96ce28ea6680e6f8f8b6e9e54b47a49702f", "chunk": "diff --git a/pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java b/pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java\nindex f537357192..c9d8f5f470 100644\n--- a/pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java\n+++ b/pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java\n\n@@ -235,21 +234,21 @@ public class PullRequestMergedEventsStream {\n           GitHubAPICaller.GitHubAPIResponse commitsResponse = _gitHubAPICaller.callAPI(commitsURL);\n \n           if (commitsResponse.responseString != null) {\n-            commits = OBJECT_MAPPER.reader().readTree(commitsResponse.responseString);\n+            commits = JsonUtils.stringToJsonNode(commitsResponse.responseString);\n           }\n \n           JsonNode reviewComments = null;\n           String reviewCommentsURL = pullRequest.get(\"review_comments_url\").asText();\n           GitHubAPICaller.GitHubAPIResponse reviewCommentsResponse = _gitHubAPICaller.callAPI(reviewCommentsURL);\n           if (reviewCommentsResponse.responseString != null) {\n-            reviewComments = OBJECT_MAPPER.reader().readTree(reviewCommentsResponse.responseString);\n+            reviewComments = JsonUtils.stringToJsonNode(reviewCommentsResponse.responseString);\n           }\n \n           JsonNode comments = null;\n           String commentsURL = pullRequest.get(\"comments_url\").asText();\n           GitHubAPICaller.GitHubAPIResponse commentsResponse = _gitHubAPICaller.callAPI(commentsURL);\n           if (commentsResponse.responseString != null) {\n-            comments = OBJECT_MAPPER.reader().readTree(commentsResponse.responseString);\n+            comments = JsonUtils.stringToJsonNode(commentsResponse.responseString);\n           }\n \n           // get PullRequestMergeEvent\n"}}, {"oid": "01f5f96ce28ea6680e6f8f8b6e9e54b47a49702f", "url": "https://github.com/apache/pinot/commit/01f5f96ce28ea6680e6f8f8b6e9e54b47a49702f", "message": "Address comments", "committedDate": "2020-04-20T20:14:38Z", "type": "forcePushed"}, {"oid": "0952f31ca739986fb3d1db8a458c611153817823", "url": "https://github.com/apache/pinot/commit/0952f31ca739986fb3d1db8a458c611153817823", "message": "Address comments", "committedDate": "2020-04-20T20:47:38Z", "type": "commit"}, {"oid": "0952f31ca739986fb3d1db8a458c611153817823", "url": "https://github.com/apache/pinot/commit/0952f31ca739986fb3d1db8a458c611153817823", "message": "Address comments", "committedDate": "2020-04-20T20:47:38Z", "type": "forcePushed"}]}