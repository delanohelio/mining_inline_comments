{"pr_number": 4956, "pr_title": "Make plugin manager to load plugins based on environment variables", "pr_createdAt": "2020-01-02T23:22:34Z", "pr_url": "https://github.com/apache/pinot/pull/4956", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NTk1Mw==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362675953", "bodyText": "plugins.include", "author": "kishoreg", "createdAt": "2020-01-03T00:14:52Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n+  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";", "originalCommit": "8059fdca93e4b4cd41716cc3278fc80fd3693acc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac6272e60913d86dccba80b510cb2b66e7b8172c", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\nindex 6288e9ad82..e8b46379ec 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n\n@@ -39,26 +39,45 @@ import org.slf4j.LoggerFactory;\n public class PluginManager {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n-  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n-  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n   private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n   String pluginsRootDir;\n-  String pluginsLoading;\n+  String pluginsInclude;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n-    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n-    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n-    init(pluginsRootDir, pluginsLoading);\n+    try {\n+      pluginsRootDir = System.getProperty(PLUGINS_DIR_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_DIR_ENV_VAR, e);\n+      pluginsRootDir = null;\n+    }\n+    try {\n+      pluginsInclude = System.getProperty(PLUGINS_INCLUDE_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_INCLUDE_ENV_VAR, e);\n+      pluginsInclude = null;\n+    }\n+    init(pluginsRootDir, pluginsInclude);\n+    printLoadedPlugins();\n+  }\n+\n+  public void printLoadedPlugins() {\n+    for (Plugin plugin : _registry.keySet()) {\n+      PluginClassLoader pluginClassLoader = _registry.get(plugin);\n+      LOGGER.info(\"Loaded plugin : {}, with classloader: {}\", plugin, pluginClassLoader);\n+    }\n   }\n \n   private void init(String pluginsRootDir, String pluginsLoading) {\n     if (StringUtils.isEmpty(pluginsRootDir)) {\n-      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      LOGGER.info(\"Env variable '{}' is not specified. Set this env variable to load additional plugins.\",\n+          PLUGINS_DIR_ENV_VAR);\n       return;\n     } else {\n       LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NjEyMw==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362676123", "bodyText": "plugins.dir", "author": "kishoreg", "createdAt": "2020-01-03T00:15:57Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";", "originalCommit": "8059fdca93e4b4cd41716cc3278fc80fd3693acc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac6272e60913d86dccba80b510cb2b66e7b8172c", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\nindex 6288e9ad82..e8b46379ec 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n\n@@ -39,26 +39,45 @@ import org.slf4j.LoggerFactory;\n public class PluginManager {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n-  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n-  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n   private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n   String pluginsRootDir;\n-  String pluginsLoading;\n+  String pluginsInclude;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n-    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n-    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n-    init(pluginsRootDir, pluginsLoading);\n+    try {\n+      pluginsRootDir = System.getProperty(PLUGINS_DIR_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_DIR_ENV_VAR, e);\n+      pluginsRootDir = null;\n+    }\n+    try {\n+      pluginsInclude = System.getProperty(PLUGINS_INCLUDE_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_INCLUDE_ENV_VAR, e);\n+      pluginsInclude = null;\n+    }\n+    init(pluginsRootDir, pluginsInclude);\n+    printLoadedPlugins();\n+  }\n+\n+  public void printLoadedPlugins() {\n+    for (Plugin plugin : _registry.keySet()) {\n+      PluginClassLoader pluginClassLoader = _registry.get(plugin);\n+      LOGGER.info(\"Loaded plugin : {}, with classloader: {}\", plugin, pluginClassLoader);\n+    }\n   }\n \n   private void init(String pluginsRootDir, String pluginsLoading) {\n     if (StringUtils.isEmpty(pluginsRootDir)) {\n-      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      LOGGER.info(\"Env variable '{}' is not specified. Set this env variable to load additional plugins.\",\n+          PLUGINS_DIR_ENV_VAR);\n       return;\n     } else {\n       LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NzAzMA==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362677030", "bodyText": "Add another log to say that the plugin was loaded successfully. Maybe do this in the caller and catch the exception.", "author": "kishoreg", "createdAt": "2020-01-03T00:22:10Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -49,6 +89,7 @@ private PluginManager() {\n    * @param directory\n    */\n   public void load(String pluginName, File directory) {\n+    LOGGER.info(\"Trying to load plugin [{}] from location [{}]\", pluginName, directory);", "originalCommit": "8059fdca93e4b4cd41716cc3278fc80fd3693acc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f81f27d96d0451bf19fa21807b11de553b859870", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\nindex 6288e9ad82..d8fadc3663 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n\n@@ -89,7 +49,6 @@ public class PluginManager {\n    * @param directory\n    */\n   public void load(String pluginName, File directory) {\n-    LOGGER.info(\"Trying to load plugin [{}] from location [{}]\", pluginName, directory);\n     Collection<File> jarFiles = FileUtils.listFiles(directory, new String[]{\"jar\"}, true);\n     Collection<URL> urlList = new ArrayList<>();\n     for (File jarFile : jarFiles) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NzEzMw==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362677133", "bodyText": "try catch since the creating classloader might result in a runtime exception", "author": "kishoreg", "createdAt": "2020-01-03T00:22:50Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n+  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n+  private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  String pluginsRootDir;\n+  String pluginsLoading;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n+    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n+    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n+    init(pluginsRootDir, pluginsLoading);\n+  }\n+\n+  private void init(String pluginsRootDir, String pluginsLoading) {\n+    if (StringUtils.isEmpty(pluginsRootDir)) {\n+      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      return;\n+    } else {\n+      LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n+    }\n+    Collection<File> jarFiles = FileUtils.listFiles(new File(pluginsRootDir), new String[]{JAR_FILE_EXTENSION}, true);\n+    List<String> pluginsToLoad = null;\n+    if (!StringUtils.isEmpty(pluginsLoading)) {\n+      pluginsToLoad = Arrays.asList(pluginsLoading.split(\",\"));\n+      LOGGER.info(\"Trying to load plugins: [{}]\", Arrays.toString(pluginsToLoad.toArray()));\n+    } else {\n+      LOGGER.info(\"No pluginsLoading specified, trying to load all plugins: [{}]\", Arrays.toString(jarFiles.toArray()));\n+    }\n+    for (File jarFile : jarFiles) {\n+      File pluginDir = jarFile.getParentFile();\n+      String pluginName = pluginDir.getName();\n+      if (pluginsToLoad != null) {\n+        if (!pluginsToLoad.contains(pluginName)) {\n+          continue;\n+        }\n+      }\n+      load(pluginName, pluginDir);", "originalCommit": "8059fdca93e4b4cd41716cc3278fc80fd3693acc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac6272e60913d86dccba80b510cb2b66e7b8172c", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\nindex 6288e9ad82..e8b46379ec 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n\n@@ -39,26 +39,45 @@ import org.slf4j.LoggerFactory;\n public class PluginManager {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n-  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n-  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n   private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n   String pluginsRootDir;\n-  String pluginsLoading;\n+  String pluginsInclude;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n-    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n-    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n-    init(pluginsRootDir, pluginsLoading);\n+    try {\n+      pluginsRootDir = System.getProperty(PLUGINS_DIR_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_DIR_ENV_VAR, e);\n+      pluginsRootDir = null;\n+    }\n+    try {\n+      pluginsInclude = System.getProperty(PLUGINS_INCLUDE_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_INCLUDE_ENV_VAR, e);\n+      pluginsInclude = null;\n+    }\n+    init(pluginsRootDir, pluginsInclude);\n+    printLoadedPlugins();\n+  }\n+\n+  public void printLoadedPlugins() {\n+    for (Plugin plugin : _registry.keySet()) {\n+      PluginClassLoader pluginClassLoader = _registry.get(plugin);\n+      LOGGER.info(\"Loaded plugin : {}, with classloader: {}\", plugin, pluginClassLoader);\n+    }\n   }\n \n   private void init(String pluginsRootDir, String pluginsLoading) {\n     if (StringUtils.isEmpty(pluginsRootDir)) {\n-      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      LOGGER.info(\"Env variable '{}' is not specified. Set this env variable to load additional plugins.\",\n+          PLUGINS_DIR_ENV_VAR);\n       return;\n     } else {\n       LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3OTk1MA==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362679950", "bodyText": "change to \"Env variable 'PLUGINS_ROOT_DIR_ENV_VAR' is not specified. Set this variable to load additional plugins\"", "author": "kishoreg", "createdAt": "2020-01-03T00:42:24Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n+  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n+  private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  String pluginsRootDir;\n+  String pluginsLoading;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n+    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n+    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n+    init(pluginsRootDir, pluginsLoading);\n+  }\n+\n+  private void init(String pluginsRootDir, String pluginsLoading) {\n+    if (StringUtils.isEmpty(pluginsRootDir)) {\n+      LOGGER.info(\"No plugins root dir specified from environment variable\");", "originalCommit": "8059fdca93e4b4cd41716cc3278fc80fd3693acc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac6272e60913d86dccba80b510cb2b66e7b8172c", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\nindex 6288e9ad82..e8b46379ec 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n\n@@ -39,26 +39,45 @@ import org.slf4j.LoggerFactory;\n public class PluginManager {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n-  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n-  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n   private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n   String pluginsRootDir;\n-  String pluginsLoading;\n+  String pluginsInclude;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n-    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n-    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n-    init(pluginsRootDir, pluginsLoading);\n+    try {\n+      pluginsRootDir = System.getProperty(PLUGINS_DIR_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_DIR_ENV_VAR, e);\n+      pluginsRootDir = null;\n+    }\n+    try {\n+      pluginsInclude = System.getProperty(PLUGINS_INCLUDE_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_INCLUDE_ENV_VAR, e);\n+      pluginsInclude = null;\n+    }\n+    init(pluginsRootDir, pluginsInclude);\n+    printLoadedPlugins();\n+  }\n+\n+  public void printLoadedPlugins() {\n+    for (Plugin plugin : _registry.keySet()) {\n+      PluginClassLoader pluginClassLoader = _registry.get(plugin);\n+      LOGGER.info(\"Loaded plugin : {}, with classloader: {}\", plugin, pluginClassLoader);\n+    }\n   }\n \n   private void init(String pluginsRootDir, String pluginsLoading) {\n     if (StringUtils.isEmpty(pluginsRootDir)) {\n-      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      LOGGER.info(\"Env variable '{}' is not specified. Set this env variable to load additional plugins.\",\n+          PLUGINS_DIR_ENV_VAR);\n       return;\n     } else {\n       LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4MDExNw==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362680117", "bodyText": "Just say loading all plugins. use plugins.include to customize", "author": "kishoreg", "createdAt": "2020-01-03T00:43:34Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n+  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n+  private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  String pluginsRootDir;\n+  String pluginsLoading;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n+    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n+    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n+    init(pluginsRootDir, pluginsLoading);\n+  }\n+\n+  private void init(String pluginsRootDir, String pluginsLoading) {\n+    if (StringUtils.isEmpty(pluginsRootDir)) {\n+      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      return;\n+    } else {\n+      LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n+    }\n+    Collection<File> jarFiles = FileUtils.listFiles(new File(pluginsRootDir), new String[]{JAR_FILE_EXTENSION}, true);\n+    List<String> pluginsToLoad = null;\n+    if (!StringUtils.isEmpty(pluginsLoading)) {\n+      pluginsToLoad = Arrays.asList(pluginsLoading.split(\",\"));\n+      LOGGER.info(\"Trying to load plugins: [{}]\", Arrays.toString(pluginsToLoad.toArray()));\n+    } else {\n+      LOGGER.info(\"No pluginsLoading specified, trying to load all plugins: [{}]\", Arrays.toString(jarFiles.toArray()));", "originalCommit": "8059fdca93e4b4cd41716cc3278fc80fd3693acc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac6272e60913d86dccba80b510cb2b66e7b8172c", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\nindex 6288e9ad82..e8b46379ec 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n\n@@ -39,26 +39,45 @@ import org.slf4j.LoggerFactory;\n public class PluginManager {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n-  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n-  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n   private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n   String pluginsRootDir;\n-  String pluginsLoading;\n+  String pluginsInclude;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n-    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n-    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n-    init(pluginsRootDir, pluginsLoading);\n+    try {\n+      pluginsRootDir = System.getProperty(PLUGINS_DIR_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_DIR_ENV_VAR, e);\n+      pluginsRootDir = null;\n+    }\n+    try {\n+      pluginsInclude = System.getProperty(PLUGINS_INCLUDE_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_INCLUDE_ENV_VAR, e);\n+      pluginsInclude = null;\n+    }\n+    init(pluginsRootDir, pluginsInclude);\n+    printLoadedPlugins();\n+  }\n+\n+  public void printLoadedPlugins() {\n+    for (Plugin plugin : _registry.keySet()) {\n+      PluginClassLoader pluginClassLoader = _registry.get(plugin);\n+      LOGGER.info(\"Loaded plugin : {}, with classloader: {}\", plugin, pluginClassLoader);\n+    }\n   }\n \n   private void init(String pluginsRootDir, String pluginsLoading) {\n     if (StringUtils.isEmpty(pluginsRootDir)) {\n-      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      LOGGER.info(\"Env variable '{}' is not specified. Set this env variable to load additional plugins.\",\n+          PLUGINS_DIR_ENV_VAR);\n       return;\n     } else {\n       LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n"}}, {"oid": "ac6272e60913d86dccba80b510cb2b66e7b8172c", "url": "https://github.com/apache/pinot/commit/ac6272e60913d86dccba80b510cb2b66e7b8172c", "message": "Address comments", "committedDate": "2020-01-03T01:40:11Z", "type": "forcePushed"}, {"oid": "6f338302548f0d8b5a25e2b145f5c95eb1e315a5", "url": "https://github.com/apache/pinot/commit/6f338302548f0d8b5a25e2b145f5c95eb1e315a5", "message": "Move KafkaStarterUtils to pinot-tools", "committedDate": "2020-01-03T19:44:08Z", "type": "forcePushed"}, {"oid": "98f5eb9759cfad90991644ad040a27e44be3e3c7", "url": "https://github.com/apache/pinot/commit/98f5eb9759cfad90991644ad040a27e44be3e3c7", "message": "Move KafkaStarterUtils to pinot-tools", "committedDate": "2020-01-03T21:52:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTkwNA==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362985904", "bodyText": "we are looking for these in system property not env. Let's just call it PLUGINS_DIR_PROPERTY_NAME.", "author": "kishoreg", "createdAt": "2020-01-03T22:46:01Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,89 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";", "originalCommit": "98f5eb9759cfad90991644ad040a27e44be3e3c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba4af2e20e1de1016b76a0cfed56b76cc7722cfd", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\nindex 34fae8c5b6..eb21af2c08 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n\n@@ -38,8 +38,8 @@ import org.slf4j.LoggerFactory;\n \n public class PluginManager {\n \n-  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n-  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n+  public static final String PLUGINS_DIR_PROPERTY_NAME = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_PROPERTY_NAME = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n   private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n   private static final String JAR_FILE_EXTENSION = \"jar\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NjE5OQ==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362986199", "bodyText": "pluginsLoading -- > pluginsInclude", "author": "kishoreg", "createdAt": "2020-01-03T22:47:38Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,89 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n-  static PluginManager PLUGIN_MANAGER = new PluginManager();\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  private static final String JAR_FILE_EXTENSION = \"jar\";\n+  private static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n-  Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  private Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  private String _pluginsRootDir;\n+  private String _pluginsInclude;\n+  private boolean _initialized = false;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n+    init();\n+  }\n+\n+  public synchronized void init() {\n+    if (_initialized) {\n+      return;\n+    }\n+    try {\n+      _pluginsRootDir = System.getProperty(PLUGINS_DIR_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_DIR_ENV_VAR, e);\n+      _pluginsRootDir = null;\n+    }\n+    try {\n+      _pluginsInclude = System.getProperty(PLUGINS_INCLUDE_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_INCLUDE_ENV_VAR, e);\n+      _pluginsInclude = null;\n+    }\n+    init(_pluginsRootDir, _pluginsInclude);\n+    _initialized = true;\n+  }\n+\n+  private void init(String pluginsRootDir, String pluginsLoading) {", "originalCommit": "98f5eb9759cfad90991644ad040a27e44be3e3c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba4af2e20e1de1016b76a0cfed56b76cc7722cfd", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\nindex 34fae8c5b6..eb21af2c08 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java\n\n@@ -38,8 +38,8 @@ import org.slf4j.LoggerFactory;\n \n public class PluginManager {\n \n-  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n-  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n+  public static final String PLUGINS_DIR_PROPERTY_NAME = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_PROPERTY_NAME = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n   private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n   private static final String JAR_FILE_EXTENSION = \"jar\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NjkxNg==", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362986916", "bodyText": "add a comment on why we need this for now and add a todo to delete this", "author": "kishoreg", "createdAt": "2020-01-03T22:51:11Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java", "diffHunk": "@@ -50,6 +51,7 @@ private HybridQuickstart() {\n \n   public static void main(String[] args)\n       throws Exception {\n+    PluginManager.get().init();", "originalCommit": "98f5eb9759cfad90991644ad040a27e44be3e3c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba4af2e20e1de1016b76a0cfed56b76cc7722cfd", "chunk": "diff --git a/pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java b/pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java\nindex a8135ffcac..68717cbbf3 100644\n--- a/pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java\n+++ b/pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java\n\n@@ -51,6 +51,8 @@ public class HybridQuickstart {\n \n   public static void main(String[] args)\n       throws Exception {\n+    // TODO: Explicitly call below method to load dependencies from pinot-plugins libs which are excluded from pinot-tools packaging.\n+    // E.g. Kafka related libs are coming from pinot-kafka-* lib, avro libs are coming from pinot-avro lib.\n     PluginManager.get().init();\n     new HybridQuickstart().execute();\n   }\n"}}, {"oid": "ba4af2e20e1de1016b76a0cfed56b76cc7722cfd", "url": "https://github.com/apache/pinot/commit/ba4af2e20e1de1016b76a0cfed56b76cc7722cfd", "message": "Address comments", "committedDate": "2020-01-03T23:22:47Z", "type": "forcePushed"}, {"oid": "fcf1d5bfe192caee4a12f78a0f33aecca7b9becc", "url": "https://github.com/apache/pinot/commit/fcf1d5bfe192caee4a12f78a0f33aecca7b9becc", "message": "Address comments", "committedDate": "2020-01-03T23:38:04Z", "type": "forcePushed"}, {"oid": "13baa48146a68df6295a4ca9b2720bbad4b83cf1", "url": "https://github.com/apache/pinot/commit/13baa48146a68df6295a4ca9b2720bbad4b83cf1", "message": "Update kafka related package name", "committedDate": "2020-01-04T05:05:53Z", "type": "forcePushed"}, {"oid": "f81f27d96d0451bf19fa21807b11de553b859870", "url": "https://github.com/apache/pinot/commit/f81f27d96d0451bf19fa21807b11de553b859870", "message": "Move shaded jars to distribution plugins directory", "committedDate": "2020-01-04T05:09:48Z", "type": "commit"}, {"oid": "c207dcc9642e86c258309171c702dd32eba04267", "url": "https://github.com/apache/pinot/commit/c207dcc9642e86c258309171c702dd32eba04267", "message": "Adding excludes", "committedDate": "2020-01-04T05:09:48Z", "type": "commit"}, {"oid": "586a8933ad69ab3f68b1ffd2788d5f5fa121a3fb", "url": "https://github.com/apache/pinot/commit/586a8933ad69ab3f68b1ffd2788d5f5fa121a3fb", "message": "clean up more dependencies", "committedDate": "2020-01-04T05:09:48Z", "type": "commit"}, {"oid": "f2c566e40463d973a339d26fd9a432b39c87427f", "url": "https://github.com/apache/pinot/commit/f2c566e40463d973a339d26fd9a432b39c87427f", "message": "Make plugin manager to load plugins based on environment variables", "committedDate": "2020-01-04T05:09:48Z", "type": "commit"}, {"oid": "f11d3025122e146301a5551ddef61b535663b837", "url": "https://github.com/apache/pinot/commit/f11d3025122e146301a5551ddef61b535663b837", "message": "Address comments", "committedDate": "2020-01-04T05:09:48Z", "type": "commit"}, {"oid": "1525714998b95f6d37db81faca1da508a8c2a8b0", "url": "https://github.com/apache/pinot/commit/1525714998b95f6d37db81faca1da508a8c2a8b0", "message": "Move KafkaStarterUtils to pinot-tools", "committedDate": "2020-01-04T05:09:48Z", "type": "commit"}, {"oid": "71e04425d96b21619e386576aea57f2637923d3c", "url": "https://github.com/apache/pinot/commit/71e04425d96b21619e386576aea57f2637923d3c", "message": "Address comments", "committedDate": "2020-01-04T05:09:48Z", "type": "commit"}, {"oid": "7cc3cac977dba6df98ee4019ac28f4534b77f409", "url": "https://github.com/apache/pinot/commit/7cc3cac977dba6df98ee4019ac28f4534b77f409", "message": "Update kafka related package name", "committedDate": "2020-01-04T05:09:48Z", "type": "commit"}, {"oid": "7cc3cac977dba6df98ee4019ac28f4534b77f409", "url": "https://github.com/apache/pinot/commit/7cc3cac977dba6df98ee4019ac28f4534b77f409", "message": "Update kafka related package name", "committedDate": "2020-01-04T05:09:48Z", "type": "forcePushed"}]}