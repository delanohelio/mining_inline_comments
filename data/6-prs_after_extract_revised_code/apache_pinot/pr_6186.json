{"pr_number": 6186, "pr_title": "Added recursive functions validation check for group by", "pr_createdAt": "2020-10-24T07:28:58Z", "pr_url": "https://github.com/apache/pinot/pull/6186", "timeline": [{"oid": "845499ba02d4a1502dc2fae50b1c9b662ae3b77c", "url": "https://github.com/apache/pinot/commit/845499ba02d4a1502dc2fae50b1c9b662ae3b77c", "message": "Added recursive functions validation check for group by\n\nThe current validation rule for select-inside-groupby currently only consider exact match and Alias function.\nThere are many cases where composite functions are used in select-groupby too e.g. \"select concat(foo,bar,'-'), count(*) ... group by foo, bar\" is a valid query.", "committedDate": "2020-10-24T07:25:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NzA3Mw==", "url": "https://github.com/apache/pinot/pull/6186#discussion_r511547073", "bodyText": "Will this groupByExprs.contains(expr) handles functions or just for identifiers?", "author": "xiangfu0", "createdAt": "2020-10-25T04:50:19Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -187,6 +174,22 @@ private static void validateGroupByClause(PinotQuery pinotQuery)\n     }\n   }\n \n+  private static boolean expressionOutsideGroupByList(Expression expr, Set<Expression> groupByExprs) {\n+    if (expr.getType() == ExpressionType.LITERAL || isAggregateExpression(expr) || groupByExprs.contains(expr)) {", "originalCommit": "845499ba02d4a1502dc2fae50b1c9b662ae3b77c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0OTcyMA==", "url": "https://github.com/apache/pinot/pull/6186#discussion_r511549720", "bodyText": "Hi @fx19880617, it will handle all expression types (including nested). Expression overrides equals() & hashCode() so this should work for arbitrary Expression", "author": "hotienvu", "createdAt": "2020-10-25T05:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NzA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1MzUwMA==", "url": "https://github.com/apache/pinot/pull/6186#discussion_r511553500", "bodyText": "\ud83d\udc4d", "author": "xiangfu0", "createdAt": "2020-10-25T06:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NzA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fc68c7b88df90b20018fc9d519b39961ecb180db", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\nindex 0f92b4231e..b6542a1a52 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n\n@@ -174,17 +174,23 @@ public class CalciteSqlParser {\n     }\n   }\n \n+  /**\n+   * Check recursively if an expression contains any reference not appearing in the GROUP BY clause.\n+   */\n   private static boolean expressionOutsideGroupByList(Expression expr, Set<Expression> groupByExprs) {\n+    // return early for Literal, Aggregate and if we have an exact match\n     if (expr.getType() == ExpressionType.LITERAL || isAggregateExpression(expr) || groupByExprs.contains(expr)) {\n       return false;\n     }\n \n     final Function funcExpr = expr.getFunctionCall();\n+    // function expression\n     if (funcExpr != null) {\n+      // for Alias function, check the actual value\n       if (funcExpr.getOperator().equalsIgnoreCase(SqlKind.AS.toString())) {\n         return expressionOutsideGroupByList(funcExpr.getOperands().get(0), groupByExprs);\n       }\n-      // Expression is invalid if any of its child is invalid\n+      // Expression is invalid if any of its children is invalid\n       return funcExpr.getOperands().stream().anyMatch(e -> expressionOutsideGroupByList(e, groupByExprs));\n     }\n     return true;\n"}}, {"oid": "fc68c7b88df90b20018fc9d519b39961ecb180db", "url": "https://github.com/apache/pinot/commit/fc68c7b88df90b20018fc9d519b39961ecb180db", "message": "added javadoc and comments", "committedDate": "2020-10-25T05:42:54Z", "type": "commit"}]}