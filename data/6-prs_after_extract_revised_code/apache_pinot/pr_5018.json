{"pr_number": 5018, "pr_title": "Support arithmetic operators like '+','-','*','/','%'", "pr_createdAt": "2020-01-26T11:17:47Z", "pr_url": "https://github.com/apache/pinot/pull/5018", "timeline": [{"oid": "226ed77f48592645240114f650cc382ccbef77d0", "url": "https://github.com/apache/pinot/commit/226ed77f48592645240114f650cc382ccbef77d0", "message": "Support arithmetic operators like '+','-','*','/'", "committedDate": "2020-01-26T11:54:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2MDgxMQ==", "url": "https://github.com/apache/pinot/pull/5018#discussion_r371260811", "bodyText": "It\u2019s probably better to change the function name in calcite sql parser to match Pinot functions. This will restrict calcite classes to parsing", "author": "kishoreg", "createdAt": "2020-01-27T14:12:26Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/TransformFunctionFactory.java", "diffHunk": "@@ -49,6 +50,10 @@ private TransformFunctionFactory() {\n           put(SubtractionTransformFunction.FUNCTION_NAME.toLowerCase(), SubtractionTransformFunction.class);\n           put(MultiplicationTransformFunction.FUNCTION_NAME.toLowerCase(), MultiplicationTransformFunction.class);\n           put(DivisionTransformFunction.FUNCTION_NAME.toLowerCase(), DivisionTransformFunction.class);\n+          put(SqlKind.PLUS.name().toLowerCase(), AdditionTransformFunction.class);", "originalCommit": "226ed77f48592645240114f650cc382ccbef77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2NzUwNQ==", "url": "https://github.com/apache/pinot/pull/5018#discussion_r371267505", "bodyText": "I cannot refer AdditionTransformFunction.FUNCTION_NAME in CalciteSqlParser, as CalciteSqlParser is in pinot-common module, AdditionTransformFunction is in pinot-core module.\nAnother option here is that I can create a PlusTransformFunction extends AdditionTransformFunction, by just overriding the function name to plus", "author": "xiangfu0", "createdAt": "2020-01-27T14:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2MDgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b0d6948d0fcf27bf98c2bf654a4e6b29d395dd87", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/TransformFunctionFactory.java b/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/TransformFunctionFactory.java\nindex 5ebd662701..d921e56d76 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/TransformFunctionFactory.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/TransformFunctionFactory.java\n\n@@ -46,26 +46,29 @@ public class TransformFunctionFactory {\n       new HashMap<String, Class<? extends TransformFunction>>() {\n         {\n           // NOTE: add all built-in transform functions here\n-          put(AdditionTransformFunction.FUNCTION_NAME.toLowerCase(), AdditionTransformFunction.class);\n-          put(SubtractionTransformFunction.FUNCTION_NAME.toLowerCase(), SubtractionTransformFunction.class);\n-          put(MultiplicationTransformFunction.FUNCTION_NAME.toLowerCase(), MultiplicationTransformFunction.class);\n-          put(DivisionTransformFunction.FUNCTION_NAME.toLowerCase(), DivisionTransformFunction.class);\n-          put(SqlKind.PLUS.name().toLowerCase(), AdditionTransformFunction.class);\n-          put(SqlKind.MINUS.name().toLowerCase(), SubtractionTransformFunction.class);\n-          put(SqlKind.TIMES.name().toLowerCase(), MultiplicationTransformFunction.class);\n-          put(SqlKind.DIVIDE.name().toLowerCase(), DivisionTransformFunction.class);\n-          put(AbsTransformFunction.FUNCTION_NAME.toLowerCase(), AbsTransformFunction.class);\n-          put(CeilTransformFunction.FUNCTION_NAME.toLowerCase(), CeilTransformFunction.class);\n-          put(ExpTransformFunction.FUNCTION_NAME.toLowerCase(), ExpTransformFunction.class);\n-          put(FloorTransformFunction.FUNCTION_NAME.toLowerCase(), FloorTransformFunction.class);\n-          put(LnTransformFunction.FUNCTION_NAME.toLowerCase(), LnTransformFunction.class);\n-          put(SqrtTransformFunction.FUNCTION_NAME.toLowerCase(), SqrtTransformFunction.class);\n-          put(TimeConversionTransformFunction.FUNCTION_NAME.toLowerCase(), TimeConversionTransformFunction.class);\n-          put(DateTimeConversionTransformFunction.FUNCTION_NAME.toLowerCase(),\n-              DateTimeConversionTransformFunction.class);\n-          put(DateTruncTransformFunction.FUNCTION_NAME.toLowerCase(), DateTruncTransformFunction.class);\n-          put(ValueInTransformFunction.FUNCTION_NAME.toLowerCase(), ValueInTransformFunction.class);\n-          put(MapValueTransformFunction.FUNCTION_NAME.toLowerCase(), MapValueTransformFunction.class);\n+          put(TransformFunctionType.ADD.getName().toLowerCase(), AdditionTransformFunction.class);\n+          put(TransformFunctionType.SUB.getName().toLowerCase(), SubtractionTransformFunction.class);\n+          put(TransformFunctionType.MULT.getName().toLowerCase(), MultiplicationTransformFunction.class);\n+          put(TransformFunctionType.DIV.getName().toLowerCase(), DivisionTransformFunction.class);\n+          put(TransformFunctionType.MOD.getName().toLowerCase(), ModuloTransformFunction.class);\n+\n+          put(TransformFunctionType.PLUS.getName().toLowerCase(), AdditionTransformFunction.class);\n+          put(TransformFunctionType.MINUS.getName().toLowerCase(), SubtractionTransformFunction.class);\n+          put(TransformFunctionType.TIMES.getName().toLowerCase(), MultiplicationTransformFunction.class);\n+          put(TransformFunctionType.DIVIDE.getName().toLowerCase(), DivisionTransformFunction.class);\n+\n+          put(TransformFunctionType.ABS.getName().toLowerCase(), AbsTransformFunction.class);\n+          put(TransformFunctionType.CEIL.getName().toLowerCase(), CeilTransformFunction.class);\n+          put(TransformFunctionType.EXP.getName().toLowerCase(), ExpTransformFunction.class);\n+          put(TransformFunctionType.FLOOR.getName().toLowerCase(), FloorTransformFunction.class);\n+          put(TransformFunctionType.LN.getName().toLowerCase(), LnTransformFunction.class);\n+          put(TransformFunctionType.SQRT.getName().toLowerCase(), SqrtTransformFunction.class);\n+\n+          put(TransformFunctionType.TIMECONVERT.getName().toLowerCase(), TimeConversionTransformFunction.class);\n+          put(TransformFunctionType.DATETIMECONVERT.getName().toLowerCase(), DateTimeConversionTransformFunction.class);\n+          put(TransformFunctionType.DATETRUNC.getName().toLowerCase(), DateTruncTransformFunction.class);\n+          put(TransformFunctionType.VALUEIN.getName().toLowerCase(), ValueInTransformFunction.class);\n+          put(TransformFunctionType.MAPVALUE.getName().toLowerCase(), MapValueTransformFunction.class);\n         }\n       };\n \n"}}, {"oid": "b0d6948d0fcf27bf98c2bf654a4e6b29d395dd87", "url": "https://github.com/apache/pinot/commit/b0d6948d0fcf27bf98c2bf654a4e6b29d395dd87", "message": "Support modulo arithmetic", "committedDate": "2020-01-27T23:52:17Z", "type": "forcePushed"}, {"oid": "5257a043a723895a934020317a1c8d730d69874f", "url": "https://github.com/apache/pinot/commit/5257a043a723895a934020317a1c8d730d69874f", "message": "Support arithmetic operators like '+','-','*','/'", "committedDate": "2020-01-28T09:51:08Z", "type": "commit"}, {"oid": "d63cb9d3ebfdb2a22f8bc589850cd9863fa20641", "url": "https://github.com/apache/pinot/commit/d63cb9d3ebfdb2a22f8bc589850cd9863fa20641", "message": "address comments", "committedDate": "2020-01-28T09:51:09Z", "type": "commit"}, {"oid": "9fe5e90995ef602857d2e18a228b006676e76422", "url": "https://github.com/apache/pinot/commit/9fe5e90995ef602857d2e18a228b006676e76422", "message": "Support modulo arithmetic", "committedDate": "2020-01-28T09:51:09Z", "type": "commit"}, {"oid": "9fe5e90995ef602857d2e18a228b006676e76422", "url": "https://github.com/apache/pinot/commit/9fe5e90995ef602857d2e18a228b006676e76422", "message": "Support modulo arithmetic", "committedDate": "2020-01-28T09:51:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjUzOQ==", "url": "https://github.com/apache/pinot/pull/5018#discussion_r371956539", "bodyText": "could we add some more queries here which will cover all the arithmetic operators?", "author": "npawar", "createdAt": "2020-01-28T17:43:52Z", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java", "diffHunk": "@@ -176,6 +176,8 @@ public void testHardcodedSqlQueries()\n     testSqlQuery(query, Collections.singletonList(query));\n     query = \"SELECT DaysSinceEpoch, COUNT(*), MAX(ArrTime), MIN(ArrTime) FROM mytable GROUP BY DaysSinceEpoch\";\n     testSqlQuery(query, Collections.singletonList(query));\n+    query = \"SELECT ArrTime, ArrTime * 10 FROM mytable WHERE DaysSinceEpoch >= 16312\";", "originalCommit": "9fe5e90995ef602857d2e18a228b006676e76422", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0MzIwMg==", "url": "https://github.com/apache/pinot/pull/5018#discussion_r372043202", "bodyText": "added", "author": "xiangfu0", "createdAt": "2020-01-28T20:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd2dd7785f2f26e525c93803f96fcbda126a92f4", "chunk": "diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java\nindex d256d44d33..1c6fd06e5d 100644\n--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java\n+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java\n\n@@ -178,6 +178,12 @@ public abstract class BaseClusterIntegrationTestSet extends BaseClusterIntegrati\n     testSqlQuery(query, Collections.singletonList(query));\n     query = \"SELECT ArrTime, ArrTime * 10 FROM mytable WHERE DaysSinceEpoch >= 16312\";\n     testSqlQuery(query, Collections.singletonList(query));\n+    query = \"SELECT ArrTime, ArrTime - ArrTime % 10 FROM mytable WHERE DaysSinceEpoch >= 16312\";\n+    testSqlQuery(query, Collections.singletonList(query));\n+    query = \"SELECT ArrTime, ArrTime + ArrTime * 9 - ArrTime * 10 FROM mytable WHERE DaysSinceEpoch >= 16312\";\n+    testSqlQuery(query, Collections.singletonList(query));\n+    query = \"SELECT ArrTime, ArrTime + ArrTime * 9 - ArrTime * 10 FROM mytable WHERE ArrTime - 100 > 0\";\n+    testSqlQuery(query, Collections.singletonList(query));\n   }\n \n   /**\n"}}, {"oid": "dd2dd7785f2f26e525c93803f96fcbda126a92f4", "url": "https://github.com/apache/pinot/commit/dd2dd7785f2f26e525c93803f96fcbda126a92f4", "message": "Adding more tests", "committedDate": "2020-01-28T20:31:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3Mw==", "url": "https://github.com/apache/pinot/pull/5018#discussion_r372062373", "bodyText": "Can we add tests for nested? e.g ADD(col1 + 5, col2), ADD(col1 * 5, col2)?\nAlso, expressions with parentheses?", "author": "siddharthteotia", "createdAt": "2020-01-28T21:17:10Z", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java", "diffHunk": "@@ -176,6 +176,14 @@ public void testHardcodedSqlQueries()\n     testSqlQuery(query, Collections.singletonList(query));\n     query = \"SELECT DaysSinceEpoch, COUNT(*), MAX(ArrTime), MIN(ArrTime) FROM mytable GROUP BY DaysSinceEpoch\";\n     testSqlQuery(query, Collections.singletonList(query));\n+    query = \"SELECT ArrTime, ArrTime * 10 FROM mytable WHERE DaysSinceEpoch >= 16312\";\n+    testSqlQuery(query, Collections.singletonList(query));\n+    query = \"SELECT ArrTime, ArrTime - ArrTime % 10 FROM mytable WHERE DaysSinceEpoch >= 16312\";\n+    testSqlQuery(query, Collections.singletonList(query));\n+    query = \"SELECT ArrTime, ArrTime + ArrTime * 9 - ArrTime * 10 FROM mytable WHERE DaysSinceEpoch >= 16312\";\n+    testSqlQuery(query, Collections.singletonList(query));", "originalCommit": "dd2dd7785f2f26e525c93803f96fcbda126a92f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NTg5NQ==", "url": "https://github.com/apache/pinot/pull/5018#discussion_r372065895", "bodyText": "added", "author": "xiangfu0", "createdAt": "2020-01-28T21:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cbdb350a960b4950c637f3ea90bee6d5e0cc8f2b", "chunk": "diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java\nindex 1c6fd06e5d..71c6f95bba 100644\n--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java\n+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java\n\n@@ -184,6 +184,11 @@ public abstract class BaseClusterIntegrationTestSet extends BaseClusterIntegrati\n     testSqlQuery(query, Collections.singletonList(query));\n     query = \"SELECT ArrTime, ArrTime + ArrTime * 9 - ArrTime * 10 FROM mytable WHERE ArrTime - 100 > 0\";\n     testSqlQuery(query, Collections.singletonList(query));\n+    query =\n+        \"SELECT ArrTime, ArrTime + ArrTime * 9 - ArrTime * 10, ADD(ArrTime + 5, ArrDelay), ADD(ArrTime * 5, ArrDelay) FROM mytable WHERE (ArrTime - 100) * (5 + ArrDelay)> 0\";\n+    String h2query =\n+        \"SELECT ArrTime, ArrTime + ArrTime * 9 - ArrTime * 10, ArrTime + 5 + ArrDelay), ArrTime * 5 + ArrDelay FROM mytable WHERE (ArrTime - 100) * (5 + ArrDelay)> 0\";\n+    testSqlQuery(query, Collections.singletonList(h2query));\n   }\n \n   /**\n"}}, {"oid": "cbdb350a960b4950c637f3ea90bee6d5e0cc8f2b", "url": "https://github.com/apache/pinot/commit/cbdb350a960b4950c637f3ea90bee6d5e0cc8f2b", "message": "Adding more tests", "committedDate": "2020-01-28T22:05:08Z", "type": "forcePushed"}, {"oid": "ac1002dce35e4cb592b7c5d66ab1b08efbbe9efc", "url": "https://github.com/apache/pinot/commit/ac1002dce35e4cb592b7c5d66ab1b08efbbe9efc", "message": "Adding more tests", "committedDate": "2020-01-28T23:53:14Z", "type": "commit"}, {"oid": "ac1002dce35e4cb592b7c5d66ab1b08efbbe9efc", "url": "https://github.com/apache/pinot/commit/ac1002dce35e4cb592b7c5d66ab1b08efbbe9efc", "message": "Adding more tests", "committedDate": "2020-01-28T23:53:14Z", "type": "forcePushed"}]}