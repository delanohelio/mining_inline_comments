{"pr_number": 5793, "pr_title": "Tiered storage", "pr_createdAt": "2020-08-03T19:34:07Z", "pr_url": "https://github.com/apache/pinot/pull/5793", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5ODAwNQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r465398005", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return tableConfig.getTierConfigsList() != null && !tableConfig.getTierConfigsList().isEmpty();\n          \n          \n            \n                return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());", "author": "Jackie-Jiang", "createdAt": "2020-08-05T00:10:00Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java", "diffHunk": "@@ -50,6 +50,13 @@ public static boolean shouldRelocateCompletedSegments(TableConfig tableConfig) {\n         .isRelocateCompletedSegments(tableConfig.getTenantConfig());\n   }\n \n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n+    return tableConfig.getTierConfigsList() != null && !tableConfig.getTierConfigsList().isEmpty();", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java\nindex de1b84d686..710f805144 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java\n\n@@ -50,13 +50,6 @@ public class InstanceAssignmentConfigUtils {\n         .isRelocateCompletedSegments(tableConfig.getTenantConfig());\n   }\n \n-  /**\n-   * Returns whether relocation of segments to tiers has been enabled for this table\n-   */\n-  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n-    return tableConfig.getTierConfigsList() != null && !tableConfig.getTierConfigsList().isEmpty();\n-  }\n-\n   /**\n    * Returns whether the instance assignment is allowed for the given table config and instance partitions type.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5OTgxNA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r465399814", "bodyText": "Consider moving this into a separate class TierConfigUtils?", "author": "Jackie-Jiang", "createdAt": "2020-08-05T00:16:29Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java", "diffHunk": "@@ -50,6 +50,13 @@ public static boolean shouldRelocateCompletedSegments(TableConfig tableConfig) {\n         .isRelocateCompletedSegments(tableConfig.getTenantConfig());\n   }\n \n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MjAxOA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466742018", "bodyText": "Done", "author": "npawar", "createdAt": "2020-08-06T23:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5OTgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java\nindex de1b84d686..710f805144 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java\n\n@@ -50,13 +50,6 @@ public class InstanceAssignmentConfigUtils {\n         .isRelocateCompletedSegments(tableConfig.getTenantConfig());\n   }\n \n-  /**\n-   * Returns whether relocation of segments to tiers has been enabled for this table\n-   */\n-  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n-    return tableConfig.getTierConfigsList() != null && !tableConfig.getTierConfigsList().isEmpty();\n-  }\n-\n   /**\n    * Returns whether the instance assignment is allowed for the given table config and instance partitions type.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NTI5Ng==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466065296", "bodyText": "Move this calculation into the rebalanceTable() because we don't need it for assignSegment(). Same for RealtimeSegmentAssignment", "author": "Jackie-Jiang", "createdAt": "2020-08-05T23:48:22Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -82,6 +91,10 @@ public void init(HelixManager helixManager, TableConfig tableConfig) {\n         tableConfig.getValidationConfig().getReplicaGroupStrategyConfig();\n     _partitionColumn = replicaGroupStrategyConfig != null ? replicaGroupStrategyConfig.getPartitionColumn() : null;\n \n+    if (InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig)) {", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MjIxOA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466742218", "bodyText": "Done. Added sortedTiers list to the rebalance method", "author": "npawar", "createdAt": "2020-08-06T23:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NTI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex f1b6407188..bb36211676 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -80,21 +81,18 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n   private String _offlineTableName;\n   private int _replication;\n   private String _partitionColumn;\n-  private List<Tier> _sortedTiers;\n+  private TableConfig _tableConfig;\n \n   @Override\n   public void init(HelixManager helixManager, TableConfig tableConfig) {\n     _helixManager = helixManager;\n+    _tableConfig = tableConfig;\n     _offlineTableName = tableConfig.getTableName();\n     _replication = tableConfig.getValidationConfig().getReplicationNumber();\n     ReplicaGroupStrategyConfig replicaGroupStrategyConfig =\n         tableConfig.getValidationConfig().getReplicaGroupStrategyConfig();\n     _partitionColumn = replicaGroupStrategyConfig != null ? replicaGroupStrategyConfig.getPartitionColumn() : null;\n \n-    if (InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig)) {\n-      _sortedTiers = getSortedTiersForPinotServerStorage(tableConfig.getTierConfigsList());\n-    }\n-\n     if (_partitionColumn == null) {\n       LOGGER.info(\"Initialized OfflineSegmentAssignment with replication: {} without partition column for table: {} \",\n           _replication, _offlineTableName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjY0NA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466066644", "bodyText": "Prefer the old non-lambda way for both performance and readability.\nAlso consider moving this common logic into TierUtils", "author": "Jackie-Jiang", "createdAt": "2020-08-05T23:53:11Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -91,6 +104,17 @@ public void init(HelixManager helixManager, TableConfig tableConfig) {\n     }\n   }\n \n+  /**\n+   * Returns a sorted list of Tiers from the TierConfigList in table config.\n+   * Keeps only those which have \"pinotServer\" storage type.\n+   */\n+  @VisibleForTesting\n+  protected List<Tier> getSortedTiersForPinotServerStorage(List<TierConfig> tierConfigList) {\n+    return tierConfigList.stream().filter(t -> TierFactory.PINOT_SERVER_STORAGE_TYPE.equals(t.getStorageType()))", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MjMxNQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466742315", "bodyText": "Moved to TierConfigUtils, and removed lambdas", "author": "npawar", "createdAt": "2020-08-06T23:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex f1b6407188..bb36211676 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -104,17 +102,6 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n     }\n   }\n \n-  /**\n-   * Returns a sorted list of Tiers from the TierConfigList in table config.\n-   * Keeps only those which have \"pinotServer\" storage type.\n-   */\n-  @VisibleForTesting\n-  protected List<Tier> getSortedTiersForPinotServerStorage(List<TierConfig> tierConfigList) {\n-    return tierConfigList.stream().filter(t -> TierFactory.PINOT_SERVER_STORAGE_TYPE.equals(t.getStorageType()))\n-        .map(t -> TierFactory.getTier(t, _helixManager)).sorted(TierFactory.getTierComparator())\n-        .collect(Collectors.toList());\n-  }\n-\n   @Override\n   public List<String> assignSegment(String segmentName, Map<String, Map<String, String>> currentAssignment,\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2ODE2Mg==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466068162", "bodyText": "Use InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig) instead of checking map to determine whether to relocate tiers", "author": "Jackie-Jiang", "createdAt": "2020-08-05T23:58:12Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;\n+    // rebalance tiers first\n+    List<Map<String, Map<String, String>>> newTierAssignments = null;\n+    if (tierInstancePartitionsMap != null && !tierInstancePartitionsMap.isEmpty()) {", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex f1b6407188..bb36211676 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -186,7 +173,8 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n-      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      Configuration config) {\n     InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n     Preconditions\n         .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2OTMxMA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466069310", "bodyText": "(nit) currentAssignment for concise?", "author": "Jackie-Jiang", "createdAt": "2020-08-06T00:01:59Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;\n+    // rebalance tiers first\n+    List<Map<String, Map<String, String>>> newTierAssignments = null;\n+    if (tierInstancePartitionsMap != null && !tierInstancePartitionsMap.isEmpty()) {\n+      LOGGER.info(\"Rebalancing tiers: {} for table: {} with bootstrap: {}\", tierInstancePartitionsMap.keySet(),\n+          _offlineTableName, bootstrap);\n+\n+      // get tier to segment assignment map i.e. current assignments split by tiers they are eligible for\n+      SegmentAssignmentUtils.TierSegmentAssignment tierSegmentAssignment =\n+          new SegmentAssignmentUtils.TierSegmentAssignment(_offlineTableName, _sortedTiers, currentAssignment);\n+      Map<String, Map<String, Map<String, String>>> tierNameToSegmentAssignmentMap =\n+          tierSegmentAssignment.getTierNameToSegmentAssignmentMap();\n+\n+      // for each tier, calculate new assignment using instancePartitions for that tier\n+      newTierAssignments = new ArrayList<>(tierNameToSegmentAssignmentMap.size());\n+      for (Map.Entry<String, Map<String, Map<String, String>>> entry : tierNameToSegmentAssignmentMap.entrySet()) {\n+        String tierName = entry.getKey();\n+        Map<String, Map<String, String>> tierCurrentAssignment = entry.getValue();\n+\n+        InstancePartitions tierInstancePartitions = tierInstancePartitionsMap.get(tierName);\n+        Preconditions\n+            .checkNotNull(tierInstancePartitions, \"Failed to find instance partitions for tier: %s of table: %s\",\n+                tierName, _offlineTableName);\n+        checkReplication(tierInstancePartitions);\n+\n+        LOGGER.info(\"Rebalancing tier: {} for table: {} with instance partitions: {}\", tierName, _offlineTableName,\n+            tierInstancePartitions);\n+        newTierAssignments.add(reassignSegments(tierName, tierCurrentAssignment, tierInstancePartitions, bootstrap));\n+      }\n+\n+      // rest of the operations should happen only on segments which were not already assigned as part of tiers\n+      subsetAssignment = tierSegmentAssignment.getNonTierSegmentAssignment();\n+    }\n+\n     LOGGER.info(\"Rebalancing table: {} with instance partitions: {}, bootstrap: {}\", _offlineTableName,\n-        instancePartitions, bootstrap);\n-    checkReplication(instancePartitions);\n+        offlineInstancePartitions, bootstrap);\n+    checkReplication(offlineInstancePartitions);\n+    Map<String, Map<String, String>> newAssignment =\n+        reassignSegments(InstancePartitionsType.OFFLINE.toString(), subsetAssignment, offlineInstancePartitions,\n+            bootstrap);\n+\n+    // add tier assignments, if available\n+    if (CollectionUtils.isNotEmpty(newTierAssignments)) {\n+      newTierAssignments.forEach(newAssignment::putAll);\n+    }\n+\n+    LOGGER.info(\"Rebalanced table: {}, number of segments to be moved to each instance: {}\", _offlineTableName,\n+        SegmentAssignmentUtils.getNumSegmentsToBeMovedPerInstance(currentAssignment, newAssignment));\n+    return newAssignment;\n+  }\n \n+  /**\n+   * Rebalances segments in the current assignment using the instancePartitions and returns new assignment\n+   */\n+  private Map<String, Map<String, String>> reassignSegments(String instancePartitionType,\n+      Map<String, Map<String, String>> currentSegmentAssignment, InstancePartitions instancePartitions,", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex f1b6407188..bb36211676 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -186,7 +173,8 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n-      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      Configuration config) {\n     InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n     Preconditions\n         .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NDc5NQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466074795", "bodyText": "Please keep only one segment relocator. Currently there are 2 relocators: TieredStorageRelocator and RealtimeSegmentRelocator. They can rebalance the same table at the same time which could cause problem. Recommend replacing RealtimeSegmentRelocator with SegmentRelocator which handles both completed segment relocation and tier storage relocation.", "author": "Jackie-Jiang", "createdAt": "2020-08-06T00:22:16Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/tier/TieredStorageRelocator.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.tier;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.ExecutorService;\n+import org.apache.commons.configuration.BaseConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.assignment.InstanceAssignmentConfigUtils;\n+import org.apache.pinot.common.metrics.ControllerMetrics;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.controller.LeadControllerManager;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.controller.helix.core.periodictask.ControllerPeriodicTask;\n+import org.apache.pinot.controller.helix.core.rebalance.RebalanceConfigConstants;\n+import org.apache.pinot.controller.helix.core.rebalance.RebalanceResult;\n+import org.apache.pinot.controller.helix.core.rebalance.TableRebalancer;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.stream.StreamConfig;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Periodic task to run rebalancer in background to relocate segments to storage tiers\n+ * TODO: we could potentially get rid of tagOverrideConfig and rely on this relocator for moving COMPLETED segments\n+ */\n+public class TieredStorageRelocator extends ControllerPeriodicTask<Void> {", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MjY4OA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466742688", "bodyText": "Removed TieredStorageRelocator. Rebranded RealtimeSegmentRelocator as SegmentRelocator.", "author": "npawar", "createdAt": "2020-08-06T23:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NDc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/tier/TieredStorageRelocator.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/tier/TieredStorageRelocator.java\ndeleted file mode 100644\nindex 514408fcb4..0000000000\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/tier/TieredStorageRelocator.java\n+++ /dev/null\n\n@@ -1,101 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pinot.controller.helix.core.tier;\n-\n-import com.google.common.base.Preconditions;\n-import java.util.concurrent.ExecutorService;\n-import org.apache.commons.configuration.BaseConfiguration;\n-import org.apache.commons.configuration.Configuration;\n-import org.apache.pinot.common.assignment.InstanceAssignmentConfigUtils;\n-import org.apache.pinot.common.metrics.ControllerMetrics;\n-import org.apache.pinot.controller.ControllerConf;\n-import org.apache.pinot.controller.LeadControllerManager;\n-import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n-import org.apache.pinot.controller.helix.core.periodictask.ControllerPeriodicTask;\n-import org.apache.pinot.controller.helix.core.rebalance.RebalanceConfigConstants;\n-import org.apache.pinot.controller.helix.core.rebalance.RebalanceResult;\n-import org.apache.pinot.controller.helix.core.rebalance.TableRebalancer;\n-import org.apache.pinot.spi.config.table.TableConfig;\n-import org.apache.pinot.spi.stream.StreamConfig;\n-import org.apache.pinot.spi.utils.TimeUtils;\n-import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-/**\n- * Periodic task to run rebalancer in background to relocate segments to storage tiers\n- * TODO: we could potentially get rid of tagOverrideConfig and rely on this relocator for moving COMPLETED segments\n- */\n-public class TieredStorageRelocator extends ControllerPeriodicTask<Void> {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TieredStorageRelocator.class);\n-\n-  private final ExecutorService _executorService;\n-\n-  public TieredStorageRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n-      LeadControllerManager leadControllerManager, ControllerConf config, ControllerMetrics controllerMetrics,\n-      ExecutorService executorService) {\n-    super(TieredStorageRelocator.class.getSimpleName(), config.getTieredStorageRelocatorFrequencyInSeconds(),\n-        config.getTieredStorageRelocatorInitialDelayInSeconds(), pinotHelixResourceManager, leadControllerManager,\n-        controllerMetrics);\n-    _executorService = executorService;\n-  }\n-\n-  @Override\n-  protected void processTable(String tableNameWithType) {\n-\n-    TableConfig tableConfig = _pinotHelixResourceManager.getTableConfig(tableNameWithType);\n-    Preconditions.checkState(tableConfig != null, \"Failed to find table config for table: {}\", tableNameWithType);\n-\n-    // Tiered storage doesn't apply to HLC\n-    if (TableNameBuilder.isRealtimeTableResource(tableNameWithType) && new StreamConfig(tableNameWithType,\n-        tableConfig.getIndexingConfig().getStreamConfigs()).hasHighLevelConsumerType()) {\n-      return;\n-    }\n-\n-    if (!InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig)) {\n-      LOGGER.debug(\"Relocation of segments to storage tiers not enabled for table: {}\", tableNameWithType);\n-      return;\n-    }\n-\n-    LOGGER.info(\"Relocating segments table: {} to storage tiers\", tableNameWithType);\n-    // Allow at most one replica unavailable during relocation\n-    Configuration rebalanceConfig = new BaseConfiguration();\n-    rebalanceConfig.addProperty(RebalanceConfigConstants.MIN_REPLICAS_TO_KEEP_UP_FOR_NO_DOWNTIME, -1);\n-    // Run rebalance asynchronously\n-    _executorService.submit(() -> {\n-      try {\n-        RebalanceResult rebalance =\n-            new TableRebalancer(_pinotHelixResourceManager.getHelixZkManager()).rebalance(tableConfig, rebalanceConfig);\n-        switch (rebalance.getStatus()) {\n-          case NO_OP:\n-            LOGGER.info(\"All segments are already relocated to storage tiers for table: {}\", tableNameWithType);\n-            break;\n-          case DONE:\n-            LOGGER.info(\"Finished relocating segments to storage tiers for table: {}\", tableNameWithType);\n-            break;\n-          default:\n-            LOGGER.error(\"Relocation to storage tiers failed for table: {}\", tableNameWithType);\n-        }\n-      } catch (Throwable t) {\n-        LOGGER.error(\"Caught exception/error while rebalancing table: {}\", tableNameWithType, t);\n-      }\n-    });\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTc5MA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466075790", "bodyText": "Preconditions.checkArgument() on all non-null arguments to prevent bad config", "author": "Jackie-Jiang", "createdAt": "2020-08-06T00:25:34Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Config for the tiered storage and the segments which will move to that tier\n+ */\n+public class TierConfig extends BaseJsonConfig {\n+  @JsonPropertyDescription(\"Name of the tier with format TIER<number>\")\n+  private final String _name;\n+\n+  @JsonPropertyDescription(\"The strategy for selecting segments\")\n+  private final String _segmentSelectorType;\n+\n+  @JsonPropertyDescription(\"For 'timeBased' segment selector, the period after which to select segments for this tier\")\n+  private final String _segmentAge;\n+\n+  @JsonPropertyDescription(\"The type of storage storage\")\n+  private final String _storageType;\n+\n+  @JsonPropertyDescription(\"For 'pinotServer' storageSelector, the tag with which to identify servers for this tier.\")\n+  private final String _serverTag;\n+\n+  // TODO: only \"serverTag\" is supported currently. In next iteration, \"InstanceAssignmentConfig _instanceAssignmentConfig\" will be added here\n+\n+  public TierConfig(@JsonProperty(value = \"name\", required = true) String name,\n+      @JsonProperty(value = \"segmentSelectorType\", required = true) String segmentSelectorType,\n+      @JsonProperty(\"segmentAge\") @Nullable String segmentAge,\n+      @JsonProperty(value = \"storageType\", required = true) String storageType,\n+      @JsonProperty(\"serverTag\") @Nullable String serverTag) {\n+    _name = name;", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java\nindex ea090c17bb..fcc1407c6e 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java\n\n@@ -20,6 +20,7 @@ package org.apache.pinot.spi.config.table;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import com.google.common.base.Preconditions;\n import javax.annotation.Nullable;\n import org.apache.pinot.spi.config.BaseJsonConfig;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjQ2OQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466076469", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Preconditions.checkState(!tierNames.contains(tierName), \"Tier name: %s already exists in tier configs\", tierName);\n          \n          \n            \n                  tierNames.add(tierName);\n          \n          \n            \n                  Preconditions.checkState(tierNames.add(tierName), \"Tier name: %s already exists in tier configs\", tierName);", "author": "Jackie-Jiang", "createdAt": "2020-08-06T00:27:58Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -136,9 +143,55 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n         }\n         // TODO: remove this once we add support for derived columns/chained transform functions\n         if (!Collections.disjoint(transformColumns, argumentColumns)) {\n-          throw new IllegalStateException(\"Derived columns not supported yet. Cannot use a transform column as argument to another transform functions\");\n+          throw new IllegalStateException(\n+              \"Derived columns not supported yet. Cannot use a transform column as argument to another transform functions\");\n         }\n       }\n     }\n   }\n+\n+  /**\n+   * Validates the tier configs\n+   * Checks for the right segmentSelectorType and its required properties\n+   * Checks for the right storageType and its required properties\n+   */\n+  private static void validateTierConfigList(@Nullable List<TierConfig> tierConfigList) {\n+    if (tierConfigList == null) {\n+      return;\n+    }\n+\n+    Set<String> tierNames = new HashSet<>();\n+    for (TierConfig tierConfig : tierConfigList) {\n+      String tierName = tierConfig.getName();\n+      Preconditions.checkState(!tierName.isEmpty());\n+      Preconditions.checkState(!tierNames.contains(tierName), \"Tier name: %s already exists in tier configs\", tierName);\n+      tierNames.add(tierName);", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java b/pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java\nindex 665d63eeda..8e7fc37bf0 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java\n\n@@ -163,9 +163,8 @@ public final class TableConfigUtils {\n     Set<String> tierNames = new HashSet<>();\n     for (TierConfig tierConfig : tierConfigList) {\n       String tierName = tierConfig.getName();\n-      Preconditions.checkState(!tierName.isEmpty());\n-      Preconditions.checkState(!tierNames.contains(tierName), \"Tier name: %s already exists in tier configs\", tierName);\n-      tierNames.add(tierName);\n+      Preconditions.checkState(!tierName.isEmpty(), \"Tier name cannot be blank\");\n+      Preconditions.checkState(tierNames.add(tierName), \"Tier name: %s already exists in tier configs\", tierName);\n \n       String segmentSelectorType = tierConfig.getSegmentSelectorType();\n       String segmentAge = tierConfig.getSegmentAge();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzU1NA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466077554", "bodyText": "(nit) Capitalize the first letter for convention", "author": "Jackie-Jiang", "createdAt": "2020-08-06T00:31:38Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;\n+    // rebalance tiers first", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex f1b6407188..bb36211676 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -186,7 +173,8 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n-      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      Configuration config) {\n     InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n     Preconditions\n         .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODcwOA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466078708", "bodyText": "Rename to nonTierAssignment for clarity?", "author": "Jackie-Jiang", "createdAt": "2020-08-06T00:35:56Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex f1b6407188..bb36211676 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -186,7 +173,8 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n-      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      Configuration config) {\n     InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n     Preconditions\n         .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3OTc4NQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466079785", "bodyText": "(nit) Including bootstrap in the log?", "author": "Jackie-Jiang", "createdAt": "2020-08-06T00:40:09Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;\n+    // rebalance tiers first\n+    List<Map<String, Map<String, String>>> newTierAssignments = null;\n+    if (tierInstancePartitionsMap != null && !tierInstancePartitionsMap.isEmpty()) {\n+      LOGGER.info(\"Rebalancing tiers: {} for table: {} with bootstrap: {}\", tierInstancePartitionsMap.keySet(),\n+          _offlineTableName, bootstrap);\n+\n+      // get tier to segment assignment map i.e. current assignments split by tiers they are eligible for\n+      SegmentAssignmentUtils.TierSegmentAssignment tierSegmentAssignment =\n+          new SegmentAssignmentUtils.TierSegmentAssignment(_offlineTableName, _sortedTiers, currentAssignment);\n+      Map<String, Map<String, Map<String, String>>> tierNameToSegmentAssignmentMap =\n+          tierSegmentAssignment.getTierNameToSegmentAssignmentMap();\n+\n+      // for each tier, calculate new assignment using instancePartitions for that tier\n+      newTierAssignments = new ArrayList<>(tierNameToSegmentAssignmentMap.size());\n+      for (Map.Entry<String, Map<String, Map<String, String>>> entry : tierNameToSegmentAssignmentMap.entrySet()) {\n+        String tierName = entry.getKey();\n+        Map<String, Map<String, String>> tierCurrentAssignment = entry.getValue();\n+\n+        InstancePartitions tierInstancePartitions = tierInstancePartitionsMap.get(tierName);\n+        Preconditions\n+            .checkNotNull(tierInstancePartitions, \"Failed to find instance partitions for tier: %s of table: %s\",\n+                tierName, _offlineTableName);\n+        checkReplication(tierInstancePartitions);\n+\n+        LOGGER.info(\"Rebalancing tier: {} for table: {} with instance partitions: {}\", tierName, _offlineTableName,", "originalCommit": "43502baaaa8da8974c1ce90323b4c297c2546245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex f1b6407188..bb36211676 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -186,7 +173,8 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n-      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      Configuration config) {\n     InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n     Preconditions\n         .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5Mzc3OQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467193779", "bodyText": "Add a private constructor", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:09:10Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.utils.config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.tier.TierFactory;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Util methods for TierConfig\n+ */\n+public class TierConfigUtils {", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java\ndeleted file mode 100644\nindex c2a7c99d7f..0000000000\n--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pinot.common.utils.config;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.commons.collections.CollectionUtils;\n-import org.apache.helix.HelixManager;\n-import org.apache.pinot.common.tier.Tier;\n-import org.apache.pinot.common.tier.TierFactory;\n-import org.apache.pinot.spi.config.table.TableConfig;\n-import org.apache.pinot.spi.config.table.TierConfig;\n-\n-\n-/**\n- * Util methods for TierConfig\n- */\n-public class TierConfigUtils {\n-\n-  /**\n-   * Returns whether relocation of segments to tiers has been enabled for this table\n-   */\n-  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n-    return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());\n-  }\n-\n-  /**\n-   * Gets tiers for given storage type from provided list of TierConfig\n-   */\n-  public static List<Tier> getTiersForStorageType(List<TierConfig> tierConfigList, String storageType,\n-      HelixManager helixManager) {\n-    List<Tier> tiers = new ArrayList<>();\n-    for (TierConfig tierConfig : tierConfigList) {\n-      if (storageType.equals(tierConfig.getStorageType())) {\n-        tiers.add(TierFactory.getTier(tierConfig, helixManager));\n-      }\n-    }\n-    return tiers;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTI2NA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467195264", "bodyText": "(nit) reformat (or just put 3600)", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:12:10Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "diffHunk": "@@ -688,7 +684,7 @@ public static ControllerStarter startDefault(File webappPath) {\n     conf.setRealtimeSegmentValidationFrequencyInSeconds(3600);\n     conf.setBrokerResourceValidationFrequencyInSeconds(3600);\n     conf.setStatusCheckerFrequencyInSeconds(5 * 60);\n-    conf.setRealtimeSegmentRelocatorFrequency(\"1h\");\n+    conf.setSegmentRelocatorFrequencyInSeconds(60*60);", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\nindex b401913fc2..1f41702f0b 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n\n@@ -684,7 +692,7 @@ public class ControllerStarter implements ServiceStartable {\n     conf.setRealtimeSegmentValidationFrequencyInSeconds(3600);\n     conf.setBrokerResourceValidationFrequencyInSeconds(3600);\n     conf.setStatusCheckerFrequencyInSeconds(5 * 60);\n-    conf.setSegmentRelocatorFrequencyInSeconds(60*60);\n+    conf.setRealtimeSegmentRelocatorFrequency(\"1h\");\n     conf.setStatusCheckerWaitForPushTimeInSeconds(10 * 60);\n     conf.setTenantIsolationEnabled(true);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTAzMQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467199031", "bodyText": "Well done", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:20:08Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerConf.java", "diffHunk": "@@ -460,6 +459,30 @@ public void setStatusCheckerWaitForPushTimeInSeconds(int statusCheckerWaitForPus\n         Integer.toString(statusCheckerWaitForPushTimeInSeconds));\n   }\n \n+  /**\n+   * RealtimeSegmentRelocator has been rebranded to SegmentRelocator.\n+   * Check for SEGMENT_RELOCATOR_FREQUENCY_IN_SECONDS property, if not found, return REALTIME_SEGMENT_RELOCATOR_FREQUENCY\n+   */\n+  public int getSegmentRelocatorFrequencyInSeconds() {", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerConf.java b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerConf.java\nindex dc9deeaf9d..1317fd864c 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerConf.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerConf.java\n\n@@ -459,28 +465,9 @@ public class ControllerConf extends PinotConfiguration {\n         Integer.toString(statusCheckerWaitForPushTimeInSeconds));\n   }\n \n-  /**\n-   * RealtimeSegmentRelocator has been rebranded to SegmentRelocator.\n-   * Check for SEGMENT_RELOCATOR_FREQUENCY_IN_SECONDS property, if not found, return REALTIME_SEGMENT_RELOCATOR_FREQUENCY\n-   */\n-  public int getSegmentRelocatorFrequencyInSeconds() {\n-    Integer segmentRelocatorFreqSeconds =\n-        getProperty(ControllerPeriodicTasksConf.SEGMENT_RELOCATOR_FREQUENCY_IN_SECONDS, Integer.class);\n-    if (segmentRelocatorFreqSeconds == null) {\n-      String realtimeSegmentRelocatorPeriod =\n-          getProperty(ControllerPeriodicTasksConf.DEPRECATED_REALTIME_SEGMENT_RELOCATOR_FREQUENCY);\n-      if (realtimeSegmentRelocatorPeriod != null) {\n-        segmentRelocatorFreqSeconds = (int) convertPeriodToSeconds(realtimeSegmentRelocatorPeriod);\n-      } else {\n-        segmentRelocatorFreqSeconds = ControllerPeriodicTasksConf.DEFAULT_SEGMENT_RELOCATOR_FREQUENCY_IN_SECONDS;\n-      }\n-    }\n-    return segmentRelocatorFreqSeconds;\n-  }\n-\n-  public void setSegmentRelocatorFrequencyInSeconds(int segmentRelocatorFrequencyInSeconds) {\n-    setProperty(ControllerPeriodicTasksConf.SEGMENT_RELOCATOR_FREQUENCY_IN_SECONDS,\n-        Integer.toString(segmentRelocatorFrequencyInSeconds));\n+  public int getTieredStorageRelocatorFrequencyInSeconds() {\n+    return getProperty(ControllerPeriodicTasksConf.TIERED_STORAGE_RELOCATOR_FREQUENCY_IN_SECONDS,\n+        ControllerPeriodicTasksConf.DEFAULT_TIERED_STORAGE_RELOCATOR_FREQUENCY_IN_SECONDS);\n   }\n \n   public long getExternalViewOnlineToOfflineTimeout() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTA3Nw==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467201077", "bodyText": "CRITICAL\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(SegmentRelocator.class.getSimpleName(), 60,\n          \n          \n            \n                    30, pinotHelixResourceManager, leadControllerManager,\n          \n          \n            \n                super(SegmentRelocator.class.getSimpleName(), config.getSegmentRelocatorFrequencyInSeconds(),\n          \n          \n            \n                    config.getSegmentRelocatorInitialDelayInSeconds(), pinotHelixResourceManager, leadControllerManager,\n          \n          \n            \n                    controllerMetrics);", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:24:35Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/SegmentRelocator.java", "diffHunk": "@@ -40,41 +41,51 @@\n \n \n /**\n- * Periodic task to run rebalancer in background to relocate COMPLETED segments for LLC real-time table. Allow at most\n- * one replica unavailable during rebalance.\n+ * Periodic task to run rebalancer in background to\n+ * 1. relocate COMPLETED segments to tag overrides\n+ * 2. relocate ONLINE segments to tiers if tier configs are set\n+ * Allow at most one replica unavailable during rebalance. Not applicable for HLC tables.\n  */\n-public class RealtimeSegmentRelocator extends ControllerPeriodicTask<Void> {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(RealtimeSegmentRelocator.class);\n+public class SegmentRelocator extends ControllerPeriodicTask<Void> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SegmentRelocator.class);\n \n   private final ExecutorService _executorService;\n \n-  public RealtimeSegmentRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n+  public SegmentRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n       LeadControllerManager leadControllerManager, ControllerConf config, ControllerMetrics controllerMetrics,\n       ExecutorService executorService) {\n-    super(\"RealtimeSegmentRelocator\", getRunFrequencySeconds(config.getRealtimeSegmentRelocatorFrequency()),\n-        config.getRealtimeSegmentRelocationInitialDelayInSeconds(), pinotHelixResourceManager, leadControllerManager,\n+    super(SegmentRelocator.class.getSimpleName(), 60,\n+        30, pinotHelixResourceManager, leadControllerManager,", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzMyMg==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467323322", "bodyText": "removed!", "author": "npawar", "createdAt": "2020-08-07T23:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/SegmentRelocator.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/RealtimeSegmentRelocator.java\nsimilarity index 66%\nrename from pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/SegmentRelocator.java\nrename to pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/RealtimeSegmentRelocator.java\nindex a76c2253b7..31c5f340a6 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/SegmentRelocator.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/RealtimeSegmentRelocator.java\n\n@@ -41,51 +40,41 @@ import org.slf4j.LoggerFactory;\n \n \n /**\n- * Periodic task to run rebalancer in background to\n- * 1. relocate COMPLETED segments to tag overrides\n- * 2. relocate ONLINE segments to tiers if tier configs are set\n- * Allow at most one replica unavailable during rebalance. Not applicable for HLC tables.\n+ * Periodic task to run rebalancer in background to relocate COMPLETED segments for LLC real-time table. Allow at most\n+ * one replica unavailable during rebalance.\n  */\n-public class SegmentRelocator extends ControllerPeriodicTask<Void> {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(SegmentRelocator.class);\n+public class RealtimeSegmentRelocator extends ControllerPeriodicTask<Void> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(RealtimeSegmentRelocator.class);\n \n   private final ExecutorService _executorService;\n \n-  public SegmentRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n+  public RealtimeSegmentRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n       LeadControllerManager leadControllerManager, ControllerConf config, ControllerMetrics controllerMetrics,\n       ExecutorService executorService) {\n-    super(SegmentRelocator.class.getSimpleName(), 60,\n-        30, pinotHelixResourceManager, leadControllerManager,\n+    super(\"RealtimeSegmentRelocator\", getRunFrequencySeconds(config.getRealtimeSegmentRelocatorFrequency()),\n+        config.getRealtimeSegmentRelocationInitialDelayInSeconds(), pinotHelixResourceManager, leadControllerManager,\n         controllerMetrics);\n     _executorService = executorService;\n   }\n \n   @Override\n   protected void processTable(String tableNameWithType) {\n+    // Only relocate segments for LLC real-time table\n+    if (!TableNameBuilder.isRealtimeTableResource(tableNameWithType)) {\n+      return;\n+    }\n     TableConfig tableConfig = _pinotHelixResourceManager.getTableConfig(tableNameWithType);\n     Preconditions.checkState(tableConfig != null, \"Failed to find table config for table: {}\", tableNameWithType);\n-\n-    // Segment relocation doesn't apply to HLC\n-    boolean isRealtimeTable = TableNameBuilder.isRealtimeTableResource(tableNameWithType);\n-    if (isRealtimeTable && new StreamConfig(tableNameWithType, tableConfig.getIndexingConfig().getStreamConfigs())\n+    if (new StreamConfig(tableNameWithType, tableConfig.getIndexingConfig().getStreamConfigs())\n         .hasHighLevelConsumerType()) {\n       return;\n     }\n-\n-    boolean relocate = false;\n-    if (TierConfigUtils.shouldRelocateToTiers(tableConfig)) {\n-      relocate = true;\n-      LOGGER.info(\"Relocating segments to tiers for table: {}\", tableNameWithType);\n-    }\n-    if (isRealtimeTable && InstanceAssignmentConfigUtils.shouldRelocateCompletedSegments(tableConfig)) {\n-      relocate = true;\n-      LOGGER.info(\"Relocating COMPLETED segments for table: {}\", tableNameWithType);\n-    }\n-    if (!relocate) {\n-      LOGGER.debug(\"No need to relocate segments of table: {}\", tableNameWithType);\n+    if (!InstanceAssignmentConfigUtils.shouldRelocateCompletedSegments(tableConfig)) {\n+      LOGGER.debug(\"No need to relocate COMPLETED segments for table: {}\", tableNameWithType);\n       return;\n     }\n \n+    LOGGER.info(\"Relocating COMPLETED segments for table: {}\", tableNameWithType);\n     // Allow at most one replica unavailable during relocation\n     Configuration rebalanceConfig = new BaseConfiguration();\n     rebalanceConfig.addProperty(RebalanceConfigConstants.MIN_REPLICAS_TO_KEEP_UP_FOR_NO_DOWNTIME, -1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNzA2Ng==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467207066", "bodyText": "Move this into TierConfigUtils?", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:38:03Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Comparator;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Factory class to create and sort {@link Tier}\n+ */\n+public final class TierFactory {\n+\n+  public static final String TIME_BASED_SEGMENT_SELECTOR_TYPE = \"timeBased\";\n+  public static final String PINOT_SERVER_STORAGE_TYPE = \"pinotServer\";\n+\n+  private TierFactory() {\n+  }\n+\n+  /**\n+   * Constructs a {@link Tier} from the {@link TierConfig} in the table config\n+   */\n+  public static Tier getTier(TierConfig tierConfig, HelixManager helixManager) {\n+    TierSegmentSelector segmentSelector;\n+    TierStorage storageSelector;\n+\n+    String segmentSelectorType = tierConfig.getSegmentSelectorType();\n+    if (segmentSelectorType.equalsIgnoreCase(TIME_BASED_SEGMENT_SELECTOR_TYPE)) {\n+      segmentSelector = new TimeBasedTierSegmentSelector(helixManager, tierConfig.getSegmentAge());\n+    } else {\n+      throw new IllegalStateException(\"Unsupported segmentSelectorType: \" + segmentSelectorType);\n+    }\n+\n+    String storageSelectorType = tierConfig.getStorageType();\n+    if (storageSelectorType.equalsIgnoreCase(PINOT_SERVER_STORAGE_TYPE)) {\n+      storageSelector = new PinotServerTierStorage(tierConfig.getServerTag());\n+    } else {\n+      throw new IllegalStateException(\"Unsupported storageType: \" + storageSelectorType);\n+    }\n+\n+    return new Tier(tierConfig.getName(), segmentSelector, storageSelector);\n+  }\n+\n+  /**\n+   * Comparator for sorting the {@link Tier}.\n+   * As of now, we have only 1 type of {@link TierSegmentSelector} and 1 type of {@link TierStorage}.\n+   * Tier with an older age bucket in {@link TimeBasedTierSegmentSelector} should appear before a younger age bucket, in sort order\n+   * TODO: As we add more types, this logic needs to be upgraded\n+   */\n+  public static Comparator<Tier> getTierComparator() {", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47884d1c5c55c35182e3510685297ae5801b9ab4", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java b/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\nindex 94135bd3ca..f923e8a064 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\n\n@@ -58,26 +58,4 @@ public final class TierFactory {\n \n     return new Tier(tierConfig.getName(), segmentSelector, storageSelector);\n   }\n-\n-  /**\n-   * Comparator for sorting the {@link Tier}.\n-   * As of now, we have only 1 type of {@link TierSegmentSelector} and 1 type of {@link TierStorage}.\n-   * Tier with an older age bucket in {@link TimeBasedTierSegmentSelector} should appear before a younger age bucket, in sort order\n-   * TODO: As we add more types, this logic needs to be upgraded\n-   */\n-  public static Comparator<Tier> getTierComparator() {\n-    return (o1, o2) -> {\n-      TierSegmentSelector s1 = o1.getSegmentSelector();\n-      TierSegmentSelector s2 = o2.getSegmentSelector();\n-      Preconditions\n-          .checkState(TIME_BASED_SEGMENT_SELECTOR_TYPE.equals(s1.getType()), \"Unsupported segmentSelectorType class %s\",\n-              s1.getClass());\n-      Preconditions\n-          .checkState(TIME_BASED_SEGMENT_SELECTOR_TYPE.equals(s2.getType()), \"Unsupported segmentSelectorType class %s\",\n-              s2.getClass());\n-      Long period1 = ((TimeBasedTierSegmentSelector) s1).getSegmentAgeMillis();\n-      Long period2 = ((TimeBasedTierSegmentSelector) s2).getSegmentAgeMillis();\n-      return period2.compareTo(period1);\n-    };\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNzY3Mw==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467207673", "bodyText": "Change this to getSortedTiersForStorageType and sort tiers here", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:39:25Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.utils.config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.tier.TierFactory;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Util methods for TierConfig\n+ */\n+public class TierConfigUtils {\n+\n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n+    return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());\n+  }\n+\n+  /**\n+   * Gets tiers for given storage type from provided list of TierConfig\n+   */\n+  public static List<Tier> getTiersForStorageType(List<TierConfig> tierConfigList, String storageType,", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzM5OQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467323399", "bodyText": "sure, done", "author": "npawar", "createdAt": "2020-08-07T23:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNzY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java\ndeleted file mode 100644\nindex c2a7c99d7f..0000000000\n--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pinot.common.utils.config;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.commons.collections.CollectionUtils;\n-import org.apache.helix.HelixManager;\n-import org.apache.pinot.common.tier.Tier;\n-import org.apache.pinot.common.tier.TierFactory;\n-import org.apache.pinot.spi.config.table.TableConfig;\n-import org.apache.pinot.spi.config.table.TierConfig;\n-\n-\n-/**\n- * Util methods for TierConfig\n- */\n-public class TierConfigUtils {\n-\n-  /**\n-   * Returns whether relocation of segments to tiers has been enabled for this table\n-   */\n-  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n-    return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());\n-  }\n-\n-  /**\n-   * Gets tiers for given storage type from provided list of TierConfig\n-   */\n-  public static List<Tier> getTiersForStorageType(List<TierConfig> tierConfigList, String storageType,\n-      HelixManager helixManager) {\n-    List<Tier> tiers = new ArrayList<>();\n-    for (TierConfig tierConfig : tierConfigList) {\n-      if (storageType.equals(tierConfig.getStorageType())) {\n-        tiers.add(TierFactory.getTier(tierConfig, helixManager));\n-      }\n-    }\n-    return tiers;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMTUwMg==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467211502", "bodyText": "shouldRelocateToTiers logic is handled on the caller side, so here we can just check whether sortedTiers is not null. Same for realtime", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:48:04Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,19 +172,78 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> nonTierAssignment = currentAssignment;\n+    // Rebalance tiers first\n+    List<Map<String, Map<String, String>>> newTierAssignments = null;\n+    if (TierConfigUtils.shouldRelocateToTiers(_tableConfig)) {", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex bb36211676..f1b6407188 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -173,8 +186,7 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n-      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n-      Configuration config) {\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n     InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n     Preconditions\n         .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMjcyMA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467212720", "bodyText": "Should we use SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS and SEGMENT_RELOCATOR_FREQUENCY_IN_SECONDS?", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:50:44Z", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ControllerPeriodicTasksIntegrationTest.java", "diffHunk": "@@ -111,8 +111,8 @@ public void setUp()\n     properties.put(ControllerConf.CLUSTER_TENANT_ISOLATION_ENABLE, false);\n     properties.put(ControllerPeriodicTasksConf.STATUS_CHECKER_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n     properties.put(ControllerPeriodicTasksConf.STATUS_CHECKER_FREQUENCY_IN_SECONDS, PERIODIC_TASK_FREQUENCY_SECONDS);\n-    properties.put(ControllerPeriodicTasksConf.REALTIME_SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n-    properties.put(ControllerPeriodicTasksConf.REALTIME_SEGMENT_RELOCATOR_FREQUENCY, PERIODIC_TASK_FREQUENCY);\n+    properties.put(ControllerPeriodicTasksConf.DEPRECATED_REALTIME_SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzgxNg==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467323816", "bodyText": "i kept the old ones, so that we have a test to check the old way, because people might be using the old properties. Probably after couple release can change it new?", "author": "npawar", "createdAt": "2020-08-07T23:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMjcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ControllerPeriodicTasksIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ControllerPeriodicTasksIntegrationTest.java\nindex d7908a4f17..25b87251f6 100644\n--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ControllerPeriodicTasksIntegrationTest.java\n+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ControllerPeriodicTasksIntegrationTest.java\n\n@@ -111,8 +111,8 @@ public class ControllerPeriodicTasksIntegrationTest extends BaseClusterIntegrati\n     properties.put(ControllerConf.CLUSTER_TENANT_ISOLATION_ENABLE, false);\n     properties.put(ControllerPeriodicTasksConf.STATUS_CHECKER_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n     properties.put(ControllerPeriodicTasksConf.STATUS_CHECKER_FREQUENCY_IN_SECONDS, PERIODIC_TASK_FREQUENCY_SECONDS);\n-    properties.put(ControllerPeriodicTasksConf.DEPRECATED_REALTIME_SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n-    properties.put(ControllerPeriodicTasksConf.DEPRECATED_REALTIME_SEGMENT_RELOCATOR_FREQUENCY, PERIODIC_TASK_FREQUENCY);\n+    properties.put(ControllerPeriodicTasksConf.REALTIME_SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n+    properties.put(ControllerPeriodicTasksConf.REALTIME_SEGMENT_RELOCATOR_FREQUENCY, PERIODIC_TASK_FREQUENCY);\n     properties.put(ControllerPeriodicTasksConf.BROKER_RESOURCE_VALIDATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n     properties.put(ControllerPeriodicTasksConf.BROKER_RESOURCE_VALIDATION_FREQUENCY_IN_SECONDS, PERIODIC_TASK_FREQUENCY_SECONDS);\n     properties.put(ControllerPeriodicTasksConf.OFFLINE_SEGMENT_INTERVAL_CHECKER_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMzMzMA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467213330", "bodyText": "(nit) Slightly more readable if we put sortedTiers in front of tierInstancePartitionsMap as tierInstancePartitionsMap is describing the sortedTiers?", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:52:01Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignment.java", "diffHunk": "@@ -60,9 +62,13 @@\n    *\n    * @param currentAssignment Current segment assignment of the table (map from segment name to instance state map)\n    * @param instancePartitionsMap Map from type (OFFLINE|CONSUMING|COMPLETED) to instance partitions\n+   * @param tierInstancePartitionsMap Map from tierName to instance partitions\n+   * @param sortedTiers List of Tiers sorted as per priority\n    * @param config Configuration for the rebalance\n    * @return Rebalanced assignment for the segments\n    */\n   Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignment.java\nindex ef2630e2f4..dea8d2d5cb 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignment.java\n\n@@ -63,12 +62,10 @@ public interface SegmentAssignment {\n    * @param currentAssignment Current segment assignment of the table (map from segment name to instance state map)\n    * @param instancePartitionsMap Map from type (OFFLINE|CONSUMING|COMPLETED) to instance partitions\n    * @param tierInstancePartitionsMap Map from tierName to instance partitions\n-   * @param sortedTiers List of Tiers sorted as per priority\n    * @param config Configuration for the rebalance\n    * @return Rebalanced assignment for the segments\n    */\n   Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n-      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n-      Configuration config);\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNDA2OQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467214069", "bodyText": "(OCD) move this to line 81", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:53:50Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -72,10 +81,12 @@\n   private String _offlineTableName;\n   private int _replication;\n   private String _partitionColumn;\n+  private TableConfig _tableConfig;", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzk2OA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467323968", "bodyText": "even better, removed it because we no longer are checking shouldRelocateToTiers(tableConfig) in this file", "author": "npawar", "createdAt": "2020-08-07T23:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNDA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\nindex bb36211676..f1b6407188 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java\n\n@@ -81,18 +80,21 @@ public class OfflineSegmentAssignment implements SegmentAssignment {\n   private String _offlineTableName;\n   private int _replication;\n   private String _partitionColumn;\n-  private TableConfig _tableConfig;\n+  private List<Tier> _sortedTiers;\n \n   @Override\n   public void init(HelixManager helixManager, TableConfig tableConfig) {\n     _helixManager = helixManager;\n-    _tableConfig = tableConfig;\n     _offlineTableName = tableConfig.getTableName();\n     _replication = tableConfig.getValidationConfig().getReplicationNumber();\n     ReplicaGroupStrategyConfig replicaGroupStrategyConfig =\n         tableConfig.getValidationConfig().getReplicaGroupStrategyConfig();\n     _partitionColumn = replicaGroupStrategyConfig != null ? replicaGroupStrategyConfig.getPartitionColumn() : null;\n \n+    if (InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig)) {\n+      _sortedTiers = getSortedTiersForPinotServerStorage(tableConfig.getTierConfigsList());\n+    }\n+\n     if (_partitionColumn == null) {\n       LOGGER.info(\"Initialized OfflineSegmentAssignment with replication: {} without partition column for table: {} \",\n           _replication, _offlineTableName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNDM2MQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467214361", "bodyText": "Remove this method", "author": "Jackie-Jiang", "createdAt": "2020-08-07T18:54:28Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/RealtimeSegmentAssignment.java", "diffHunk": "@@ -79,18 +88,33 @@\n public class RealtimeSegmentAssignment implements SegmentAssignment {\n   private static final Logger LOGGER = LoggerFactory.getLogger(RealtimeSegmentAssignment.class);\n \n+  private HelixManager _helixManager;\n+  private TableConfig _tableConfig;\n   private String _realtimeTableName;\n   private int _replication;\n \n   @Override\n   public void init(HelixManager helixManager, TableConfig tableConfig) {\n+    _helixManager = helixManager;\n+    _tableConfig = tableConfig;\n     _realtimeTableName = tableConfig.getTableName();\n     _replication = tableConfig.getValidationConfig().getReplicasPerPartitionNumber();\n \n     LOGGER.info(\"Initialized RealtimeSegmentAssignment with replication: {} for table: {}\", _replication,\n         _realtimeTableName);\n   }\n \n+  /**\n+   * Returns a sorted list of Tiers from the TierConfigList in table config.\n+   * Keeps only those which have \"pinotServer\" storage type.\n+   */\n+  @VisibleForTesting\n+  protected List<Tier> getSortedTiersForPinotServerStorage(List<TierConfig> tierConfigList) {", "originalCommit": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/RealtimeSegmentAssignment.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/RealtimeSegmentAssignment.java\nindex d69d325801..7d8f09084f 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/RealtimeSegmentAssignment.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/RealtimeSegmentAssignment.java\n\n@@ -89,17 +88,20 @@ public class RealtimeSegmentAssignment implements SegmentAssignment {\n   private static final Logger LOGGER = LoggerFactory.getLogger(RealtimeSegmentAssignment.class);\n \n   private HelixManager _helixManager;\n-  private TableConfig _tableConfig;\n   private String _realtimeTableName;\n   private int _replication;\n+  private List<Tier> _sortedTiers;\n \n   @Override\n   public void init(HelixManager helixManager, TableConfig tableConfig) {\n     _helixManager = helixManager;\n-    _tableConfig = tableConfig;\n     _realtimeTableName = tableConfig.getTableName();\n     _replication = tableConfig.getValidationConfig().getReplicasPerPartitionNumber();\n \n+    if (InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig)) {\n+      _sortedTiers = getSortedTiersForPinotServerStorage(tableConfig.getTierConfigsList());\n+    }\n+\n     LOGGER.info(\"Initialized RealtimeSegmentAssignment with replication: {} for table: {}\", _replication,\n         _realtimeTableName);\n   }\n"}}, {"oid": "b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "url": "https://github.com/apache/pinot/commit/b3fe132621d406c0a4a4fc22371e9cefcc33ffd1", "message": "Tiered storage", "committedDate": "2020-08-07T22:22:50Z", "type": "commit"}, {"oid": "c99ecb710670c6cd270466bf1c2dc1101c5f57c9", "url": "https://github.com/apache/pinot/commit/c99ecb710670c6cd270466bf1c2dc1101c5f57c9", "message": "Fix test", "committedDate": "2020-08-07T22:22:50Z", "type": "commit"}, {"oid": "1b6283dce37364b83ec0c4ab3bd56756d1169e85", "url": "https://github.com/apache/pinot/commit/1b6283dce37364b83ec0c4ab3bd56756d1169e85", "message": "Review comments", "committedDate": "2020-08-07T22:22:50Z", "type": "commit"}, {"oid": "47884d1c5c55c35182e3510685297ae5801b9ab4", "url": "https://github.com/apache/pinot/commit/47884d1c5c55c35182e3510685297ae5801b9ab4", "message": "Review comments", "committedDate": "2020-08-07T23:08:56Z", "type": "commit"}, {"oid": "47884d1c5c55c35182e3510685297ae5801b9ab4", "url": "https://github.com/apache/pinot/commit/47884d1c5c55c35182e3510685297ae5801b9ab4", "message": "Review comments", "committedDate": "2020-08-07T23:08:56Z", "type": "forcePushed"}, {"oid": "821a5becc189c42e53b20a51898b36c64780afe1", "url": "https://github.com/apache/pinot/commit/821a5becc189c42e53b20a51898b36c64780afe1", "message": "Change segmentSelectorType and storageType to enums", "committedDate": "2020-08-08T00:28:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzY4OQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467503689", "bodyText": "Should we return TierStorageType here?", "author": "Jackie-Jiang", "createdAt": "2020-08-08T20:58:48Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n+\n+\n+/**\n+ * Tier storage type which uses Pinot servers as storage\n+ */\n+public class PinotServerTierStorage implements TierStorage {\n+  private final String _type = TierStorageType.PINOT_SERVER.toString();\n+  private final String _tag;\n+\n+  public PinotServerTierStorage(String tag) {\n+    _tag = tag;\n+  }\n+\n+  /**\n+   * Returns the tag used to identify the servers being used as the tier storage\n+   */\n+  public String getTag() {\n+    return _tag;\n+  }\n+\n+  @Override\n+  public String getType() {", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be263e436028323922aacc5523957268e27d954e", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java b/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\nindex 70ee2bc463..89a9f02619 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\n\n@@ -18,14 +18,10 @@\n  */\n package org.apache.pinot.common.tier;\n \n-import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n-\n-\n /**\n  * Tier storage type which uses Pinot servers as storage\n  */\n public class PinotServerTierStorage implements TierStorage {\n-  private final String _type = TierStorageType.PINOT_SERVER.toString();\n   private final String _tag;\n \n   public PinotServerTierStorage(String tag) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzc1MQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467503751", "bodyText": "Return TierSegmentSelectorType here?", "author": "Jackie-Jiang", "createdAt": "2020-08-08T20:59:30Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierSegmentSelector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+/**\n+ * Interface for the segment selection strategy of a tier\n+ */\n+public interface TierSegmentSelector {\n+\n+  /**\n+   * The type of the segment selector (e.g. TIME)\n+   */\n+  String getType();", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzgxMA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517810", "bodyText": "+1", "author": "xiangfu0", "createdAt": "2020-08-09T00:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzc1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzg4Mg==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467503882", "bodyText": "Enum instead of String?", "author": "Jackie-Jiang", "createdAt": "2020-08-08T21:01:08Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import com.google.common.base.Preconditions;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Config for the tiered storage and the segments which will move to that tier\n+ */\n+public class TierConfig extends BaseJsonConfig {\n+  @JsonPropertyDescription(\"Name of the tier with format TIER<number>\")\n+  private final String _name;\n+\n+  @JsonPropertyDescription(\"The strategy for selecting segments\")\n+  private final String _segmentSelectorType;\n+\n+  @JsonPropertyDescription(\"For 'TIME' segment selector, the period after which to select segments for this tier\")\n+  private final String _segmentAge;\n+\n+  @JsonPropertyDescription(\"The type of storage storage\")\n+  private final String _storageType;\n+\n+  @JsonPropertyDescription(\"For 'PINOT_SERVER' storageSelector, the tag with which to identify servers for this tier.\")\n+  private final String _serverTag;\n+\n+  // TODO: only \"serverTag\" is supported currently. In next iteration, \"InstanceAssignmentConfig _instanceAssignmentConfig\" will be added here\n+\n+  public TierConfig(@JsonProperty(value = \"name\", required = true) String name,\n+      @JsonProperty(value = \"segmentSelectorType\", required = true) String segmentSelectorType,", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzk0Ng==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467503946", "bodyText": "Use enum storageType", "author": "Jackie-Jiang", "createdAt": "2020-08-08T21:02:17Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.utils.config;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.tier.TierFactory;\n+import org.apache.pinot.common.tier.TierFactory.TierSegmentSelectorType;\n+import org.apache.pinot.common.tier.TierSegmentSelector;\n+import org.apache.pinot.common.tier.TierStorage;\n+import org.apache.pinot.common.tier.TimeBasedTierSegmentSelector;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Util methods for TierConfig\n+ */\n+public final class TierConfigUtils {\n+\n+  private TierConfigUtils() {\n+  }\n+\n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n+    return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());\n+  }\n+\n+  /**\n+   * Gets sorted list of tiers for given storage type from provided list of TierConfig\n+   */\n+  public static List<Tier> getSortedTiersForStorageType(List<TierConfig> tierConfigList, String storageType,", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be263e436028323922aacc5523957268e27d954e", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java\nindex 4a061e7d7e..5983b1175a 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java\n\n@@ -26,7 +26,6 @@ import org.apache.commons.collections.CollectionUtils;\n import org.apache.helix.HelixManager;\n import org.apache.pinot.common.tier.Tier;\n import org.apache.pinot.common.tier.TierFactory;\n-import org.apache.pinot.common.tier.TierFactory.TierSegmentSelectorType;\n import org.apache.pinot.common.tier.TierSegmentSelector;\n import org.apache.pinot.common.tier.TierStorage;\n import org.apache.pinot.common.tier.TimeBasedTierSegmentSelector;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzE5OQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517199", "bodyText": "We can skip this field and directly return enum in the getType() method.", "author": "xiangfu0", "createdAt": "2020-08-09T00:07:52Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n+\n+\n+/**\n+ * Tier storage type which uses Pinot servers as storage\n+ */\n+public class PinotServerTierStorage implements TierStorage {\n+  private final String _type = TierStorageType.PINOT_SERVER.toString();", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5MzIyOQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467693229", "bodyText": "Removed enums and kept just strings. When we eventually support users plugging in their own strategies, enum will restrict them from doing that", "author": "npawar", "createdAt": "2020-08-10T05:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "be263e436028323922aacc5523957268e27d954e", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java b/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\nindex 70ee2bc463..89a9f02619 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\n\n@@ -18,14 +18,10 @@\n  */\n package org.apache.pinot.common.tier;\n \n-import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n-\n-\n /**\n  * Tier storage type which uses Pinot servers as storage\n  */\n public class PinotServerTierStorage implements TierStorage {\n-  private final String _type = TierStorageType.PINOT_SERVER.toString();\n   private final String _tag;\n \n   public PinotServerTierStorage(String tag) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzU2Mw==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517563", "bodyText": "Shall we support multiple tags for a tier?", "author": "xiangfu0", "createdAt": "2020-08-09T00:14:27Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n+\n+\n+/**\n+ * Tier storage type which uses Pinot servers as storage\n+ */\n+public class PinotServerTierStorage implements TierStorage {\n+  private final String _type = TierStorageType.PINOT_SERVER.toString();\n+  private final String _tag;", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5Mzk1NQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467693955", "bodyText": "Yes that's a good idea. I can add that for phase 2 (where I'll be handling advanced instance assignments for tiers)", "author": "npawar", "createdAt": "2020-08-10T05:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "be263e436028323922aacc5523957268e27d954e", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java b/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\nindex 70ee2bc463..89a9f02619 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java\n\n@@ -18,14 +18,10 @@\n  */\n package org.apache.pinot.common.tier;\n \n-import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n-\n-\n /**\n  * Tier storage type which uses Pinot servers as storage\n  */\n public class PinotServerTierStorage implements TierStorage {\n-  private final String _type = TierStorageType.PINOT_SERVER.toString();\n   private final String _tag;\n \n   public PinotServerTierStorage(String tag) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzc4MA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517780", "bodyText": "using enum?", "author": "xiangfu0", "createdAt": "2020-08-09T00:17:46Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Factory class to create and sort {@link Tier}\n+ */\n+public final class TierFactory {\n+\n+  /**\n+   * Types of segmentSelectors for tiers\n+   */\n+  public enum TierSegmentSelectorType {\n+    TIME\n+  }\n+\n+  /**\n+   * Types of storage for tiers\n+   */\n+  public enum TierStorageType {\n+    PINOT_SERVER\n+  }\n+\n+  private TierFactory() {\n+  }\n+\n+  /**\n+   * Constructs a {@link Tier} from the {@link TierConfig} in the table config\n+   */\n+  public static Tier getTier(TierConfig tierConfig, HelixManager helixManager) {\n+    TierSegmentSelector segmentSelector;\n+    TierStorage storageSelector;\n+\n+    String segmentSelectorType = tierConfig.getSegmentSelectorType();", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be263e436028323922aacc5523957268e27d954e", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java b/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\nindex 1d188634c1..f724b6b110 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\n\n@@ -27,19 +27,8 @@ import org.apache.pinot.spi.config.table.TierConfig;\n  */\n public final class TierFactory {\n \n-  /**\n-   * Types of segmentSelectors for tiers\n-   */\n-  public enum TierSegmentSelectorType {\n-    TIME\n-  }\n-\n-  /**\n-   * Types of storage for tiers\n-   */\n-  public enum TierStorageType {\n-    PINOT_SERVER\n-  }\n+  public static final String TIME_SEGMENT_SELECTOR_TYPE = \"time\";\n+  public static final String PINOT_SERVER_STORAGE_TYPE = \"pinot_server\";\n \n   private TierFactory() {\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzgwMA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517800", "bodyText": "using enum here also?", "author": "xiangfu0", "createdAt": "2020-08-09T00:18:06Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Factory class to create and sort {@link Tier}\n+ */\n+public final class TierFactory {\n+\n+  /**\n+   * Types of segmentSelectors for tiers\n+   */\n+  public enum TierSegmentSelectorType {\n+    TIME\n+  }\n+\n+  /**\n+   * Types of storage for tiers\n+   */\n+  public enum TierStorageType {\n+    PINOT_SERVER\n+  }\n+\n+  private TierFactory() {\n+  }\n+\n+  /**\n+   * Constructs a {@link Tier} from the {@link TierConfig} in the table config\n+   */\n+  public static Tier getTier(TierConfig tierConfig, HelixManager helixManager) {\n+    TierSegmentSelector segmentSelector;\n+    TierStorage storageSelector;\n+\n+    String segmentSelectorType = tierConfig.getSegmentSelectorType();\n+    if (segmentSelectorType.equalsIgnoreCase(TierSegmentSelectorType.TIME.toString())) {\n+      segmentSelector = new TimeBasedTierSegmentSelector(helixManager, tierConfig.getSegmentAge());\n+    } else {\n+      throw new IllegalStateException(\"Unsupported segmentSelectorType: \" + segmentSelectorType);\n+    }\n+\n+    String storageSelectorType = tierConfig.getStorageType();", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be263e436028323922aacc5523957268e27d954e", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java b/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\nindex 1d188634c1..f724b6b110 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java\n\n@@ -27,19 +27,8 @@ import org.apache.pinot.spi.config.table.TierConfig;\n  */\n public final class TierFactory {\n \n-  /**\n-   * Types of segmentSelectors for tiers\n-   */\n-  public enum TierSegmentSelectorType {\n-    TIME\n-  }\n-\n-  /**\n-   * Types of storage for tiers\n-   */\n-  public enum TierStorageType {\n-    PINOT_SERVER\n-  }\n+  public static final String TIME_SEGMENT_SELECTOR_TYPE = \"time\";\n+  public static final String PINOT_SERVER_STORAGE_TYPE = \"pinot_server\";\n \n   private TierFactory() {\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzg0Nw==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517847", "bodyText": "enum?", "author": "xiangfu0", "createdAt": "2020-08-09T00:18:44Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierStorage.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+/**\n+ * Interface for the storage type of the tier\n+ */\n+public interface TierStorage {\n+\n+  /**\n+   * Returns the type of the storage (e.g. PINOT_SERVER)\n+   */\n+  String getType();", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzg5OA==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517898", "bodyText": "just do return TierSegmentSelectorType.TIME  and remove _type?", "author": "xiangfu0", "createdAt": "2020-08-09T00:19:27Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TimeBasedTierSegmentSelector.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.common.metadata.segment.SegmentZKMetadata;\n+import org.apache.pinot.common.tier.TierFactory.TierSegmentSelectorType;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n+\n+\n+/**\n+ * A {@link TierSegmentSelector} strategy which selects segments for a tier based on the age of the segment\n+ */\n+public class TimeBasedTierSegmentSelector implements TierSegmentSelector {\n+  private final String _type = TierSegmentSelectorType.TIME.toString();\n+  private final long _segmentAgeMillis;\n+  private final HelixManager _helixManager;\n+\n+  public TimeBasedTierSegmentSelector(HelixManager helixManager, String segmentAge) {\n+    _segmentAgeMillis = TimeUtils.convertPeriodToMillis(segmentAge);\n+    _helixManager = helixManager;\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return _type;", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be263e436028323922aacc5523957268e27d954e", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/tier/TimeBasedTierSegmentSelector.java b/pinot-common/src/main/java/org/apache/pinot/common/tier/TimeBasedTierSegmentSelector.java\nindex 984dc65646..f4b201c04b 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/tier/TimeBasedTierSegmentSelector.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/tier/TimeBasedTierSegmentSelector.java\n\n@@ -23,7 +23,6 @@ import java.util.concurrent.TimeUnit;\n import org.apache.helix.HelixManager;\n import org.apache.pinot.common.metadata.ZKMetadataProvider;\n import org.apache.pinot.common.metadata.segment.SegmentZKMetadata;\n-import org.apache.pinot.common.tier.TierFactory.TierSegmentSelectorType;\n import org.apache.pinot.spi.utils.TimeUtils;\n import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxODI5NQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467518295", "bodyText": "thinking of adding a method like int getPriority()?\nFor time based tiers we can use internal age for comparison if priority is the same.", "author": "xiangfu0", "createdAt": "2020-08-09T00:24:40Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierSegmentSelector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+/**\n+ * Interface for the segment selection strategy of a tier\n+ */\n+public interface TierSegmentSelector {", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUyODg3NQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467528875", "bodyText": "I thought I'll add that when the requirements demand it.. As of now, I didn't see it being requirwd", "author": "npawar", "createdAt": "2020-08-09T03:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxODI5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUyMTIzMQ==", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467521231", "bodyText": "typo", "author": "xiangfu0", "createdAt": "2020-08-09T01:09:20Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java", "diffHunk": "@@ -326,4 +328,68 @@ static void rebalanceReplicaGroupBasedPartition(Map<String, Map<String, String>>\n       return _offlineSegmentAssignment;\n     }\n   }\n+\n+  /**\n+   * Takes a segment assignment adn splits them up based on which tiers the segments are eligible for. Only considers ONLINE segments.", "originalCommit": "821a5becc189c42e53b20a51898b36c64780afe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be263e436028323922aacc5523957268e27d954e", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java\nindex 9f2ff1c88e..26b20b2f11 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java\n\n@@ -330,7 +330,7 @@ public class SegmentAssignmentUtils {\n   }\n \n   /**\n-   * Takes a segment assignment adn splits them up based on which tiers the segments are eligible for. Only considers ONLINE segments.\n+   * Takes a segment assignment and splits them up based on which tiers the segments are eligible for. Only considers ONLINE segments.\n    * Tiers are selected according to the order provided in the tiers list.\n    */\n   static class TierSegmentAssignment {\n"}}, {"oid": "be263e436028323922aacc5523957268e27d954e", "url": "https://github.com/apache/pinot/commit/be263e436028323922aacc5523957268e27d954e", "message": "Remove enum", "committedDate": "2020-08-10T05:23:52Z", "type": "commit"}]}