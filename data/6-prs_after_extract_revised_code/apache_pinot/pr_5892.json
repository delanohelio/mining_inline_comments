{"pr_number": 5892, "pr_title": "Expose ResultSetStats in the Pinot client's ResultSetGroup", "pr_createdAt": "2020-08-18T17:08:26Z", "pr_url": "https://github.com/apache/pinot/pull/5892", "timeline": [{"oid": "c807a77ae019940fc6ac22a47250882a08a49230", "url": "https://github.com/apache/pinot/commit/c807a77ae019940fc6ac22a47250882a08a49230", "message": "Expose response stats in the Pinot client's BrokerResponse.\n\nThis would let the client application to observe and print response stats selectively\nfor queries and avoid reproducing slow queries.", "committedDate": "2020-08-18T06:28:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1MjMxMw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472352313", "bodyText": "@kishoreg @npawar I'm not super convinced with this name but can't think of a better name than this. Feel free to suggest something else.", "author": "buchireddy", "createdAt": "2020-08-18T17:10:02Z", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/PreparedStatement.java", "diffHunk": "@@ -72,6 +72,15 @@ public ResultSetGroup execute() {\n     return _connection.execute(new Request(_queryFormat, fillStatementWithParameters()));\n   }\n \n+  /**\n+   * Executes this prepared statement and returns the BrokerResponse.\n+   *\n+   * @return The BrokerResponse received.\n+   */\n+  public BrokerResponse executeRequest() {", "originalCommit": "c807a77ae019940fc6ac22a47250882a08a49230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NTM3NQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472445375", "bodyText": "This isn't a rename. It's a new method addition.", "author": "buchireddy", "createdAt": "2020-08-18T19:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1MjMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4OTQ1OA==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r473389458", "bodyText": "This isn't applicable anymore as per the latest change.", "author": "buchireddy", "createdAt": "2020-08-19T22:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1MjMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "9fc6dd019364e31896bc964bbe8cbeb0159fb03f", "chunk": "diff --git a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/PreparedStatement.java b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/PreparedStatement.java\nindex d1a14623a2..8a527f5d27 100644\n--- a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/PreparedStatement.java\n+++ b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/PreparedStatement.java\n\n@@ -72,15 +72,6 @@ public class PreparedStatement {\n     return _connection.execute(new Request(_queryFormat, fillStatementWithParameters()));\n   }\n \n-  /**\n-   * Executes this prepared statement and returns the BrokerResponse.\n-   *\n-   * @return The BrokerResponse received.\n-   */\n-  public BrokerResponse executeRequest() {\n-    return _connection.executeRequest(new Request(_queryFormat, fillStatementWithParameters()));\n-  }\n-\n   /**\n    * Executes this prepared statement asynchronously.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjg1Mg==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472426852", "bodyText": "Don't rename the methods as it would not be backward compatible and will break other connectors such as JDBC.", "author": "KKcorps", "createdAt": "2020-08-18T19:22:23Z", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/Connection.java", "diffHunk": "@@ -96,6 +96,18 @@ public ResultSetGroup execute(Request request)\n     return execute(null, request);\n   }\n \n+  /**\n+   * Executes a Pinot Request and returns the Response.\n+   *\n+   * @param request The request to execute\n+   * @return The BrokerResponse for the request.\n+   * @throws PinotClientException If an exception occurs while processing the query\n+   */\n+  public BrokerResponse executeRequest(Request request)", "originalCommit": "c807a77ae019940fc6ac22a47250882a08a49230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NTMyNQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472445325", "bodyText": "This isn't a rename. It's a new method addition.", "author": "buchireddy", "createdAt": "2020-08-18T19:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDg3NQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472470875", "bodyText": "My bad. @kishoreg should we have two methods both executing query - one returning the complete response while other returning the response table. IMO, we should have only one but if we remove the old one the JDBC connector will break.", "author": "KKcorps", "createdAt": "2020-08-18T20:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODQ2Mw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472508463", "bodyText": "why not add the response stats as part of the existing return type. It maintains backwards compatibility and simply adds an additional method in ResultSetGroup", "author": "kishoreg", "createdAt": "2020-08-18T21:39:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1ODk5MQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472558991", "bodyText": "I don't think the stats belong to ResultSetGroup, hence I didn't go that route. Yes, it's simple and easy method but isn't intuitive API, at least to me.", "author": "buchireddy", "createdAt": "2020-08-19T00:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1NjIwMw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472656203", "bodyText": "Not really. There is scope for metadata and stats. https://cloud.google.com/spanner/docs/reference/rest/v1/ResultSet", "author": "kishoreg", "createdAt": "2020-08-19T03:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2MTI1Mw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r473161253", "bodyText": "Yes. JDBC also follows a similar theme where you can return a ResultSetMetadata along with the actual result.\nBrokerResponse can change in the future but the query interface should be consistent.", "author": "KKcorps", "createdAt": "2020-08-19T16:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzODU3Mw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r473638573", "bodyText": "Fixed this now by exposing stats in the ResultSetGroup itself. Please check.", "author": "buchireddy", "createdAt": "2020-08-20T06:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9fc6dd019364e31896bc964bbe8cbeb0159fb03f", "chunk": "diff --git a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/Connection.java b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/Connection.java\nindex bb675373c7..d408ad5c29 100644\n--- a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/Connection.java\n+++ b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/Connection.java\n\n@@ -96,18 +96,6 @@ public class Connection {\n     return execute(null, request);\n   }\n \n-  /**\n-   * Executes a Pinot Request and returns the Response.\n-   *\n-   * @param request The request to execute\n-   * @return The BrokerResponse for the request.\n-   * @throws PinotClientException If an exception occurs while processing the query\n-   */\n-  public BrokerResponse executeRequest(Request request)\n-      throws PinotClientException {\n-    return executeRequest(null, request);\n-  }\n-\n   /**\n    * Executes a PQL query.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzY3NQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472427675", "bodyText": "This class should be moved to a separate file.", "author": "KKcorps", "createdAt": "2020-08-18T19:23:55Z", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java", "diffHunk": "@@ -38,6 +39,126 @@ private BrokerResponse(JsonNode brokerResponse) {\n     _exceptions = brokerResponse.get(\"exceptions\");\n     _selectionResults = brokerResponse.get(\"selectionResults\");\n     _resultTable = brokerResponse.get(\"resultTable\");\n+    _responseStats = ResponseStats.fromJson(brokerResponse);\n+  }\n+\n+  public static class ResponseStats {", "originalCommit": "c807a77ae019940fc6ac22a47250882a08a49230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5ODkwMw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472498903", "bodyText": "Done.", "author": "buchireddy", "createdAt": "2020-08-18T21:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNzY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ebb5803f92020d90fc9bf918729027c38c2b11a7", "chunk": "diff --git a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java\nindex 0a2ab48c21..9694fb5aa4 100644\n--- a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java\n+++ b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java\n\n@@ -39,126 +39,7 @@ class BrokerResponse {\n     _exceptions = brokerResponse.get(\"exceptions\");\n     _selectionResults = brokerResponse.get(\"selectionResults\");\n     _resultTable = brokerResponse.get(\"resultTable\");\n-    _responseStats = ResponseStats.fromJson(brokerResponse);\n-  }\n-\n-  public static class ResponseStats {\n-    private final int _numServersQueried;\n-    private final int _numServersResponded;\n-    private final long _numDocsScanned;\n-    private final long _numEntriesScannedInFilter;\n-    private final long _numEntriesScannedPostFilter;\n-    private final long _numSegmentsQueried;\n-    private final long _numSegmentsProcessed;\n-    private final long _numSegmentsMatched;\n-    private final long _numConsumingSegmentsQueried;\n-    private final long _minConsumingFreshnessTimeMs;\n-    private final long _totalDocs;\n-    private final boolean _numGroupsLimitReached;\n-    private final long _timeUsedMs;\n-\n-    private ResponseStats(JsonNode brokerResponse) {\n-      _numServersQueried = brokerResponse.has(\"numServersQueried\") ?\n-          brokerResponse.get(\"numServersQueried\").asInt() : -1;\n-      _numServersResponded = brokerResponse.has(\"numServersResponded\") ?\n-          brokerResponse.get(\"numServersResponded\").asInt() : -1;\n-      _numDocsScanned = brokerResponse.has(\"numDocsScanned\") ?\n-          brokerResponse.get(\"numDocsScanned\").asLong() : -1L;\n-      _numEntriesScannedInFilter = brokerResponse.has(\"numEntriesScannedInFilter\") ?\n-          brokerResponse.get(\"numEntriesScannedInFilter\").asLong() : -1L;\n-      _numEntriesScannedPostFilter = brokerResponse.has(\"numEntriesScannedPostFilter\") ?\n-          brokerResponse.get(\"numEntriesScannedPostFilter\").asLong() : -1L;\n-      _numSegmentsQueried = brokerResponse.has(\"numSegmentsQueried\") ?\n-          brokerResponse.get(\"numSegmentsQueried\").asLong() : -1L;\n-      _numSegmentsProcessed = brokerResponse.has(\"numSegmentsProcessed\") ?\n-          brokerResponse.get(\"numSegmentsProcessed\").asLong() : -1L;\n-      _numSegmentsMatched = brokerResponse.has(\"numSegmentsMatched\") ?\n-          brokerResponse.get(\"numSegmentsMatched\").asLong() : -1L;\n-      _numConsumingSegmentsQueried = brokerResponse.has(\"numConsumingSegmentsQueried\") ?\n-          brokerResponse.get(\"numConsumingSegmentsQueried\").asLong() : -1L;\n-      _minConsumingFreshnessTimeMs = brokerResponse.has(\"minConsumingFreshnessTimeMs\") ?\n-          brokerResponse.get(\"minConsumingFreshnessTimeMs\").asLong() : -1L;\n-      _totalDocs = brokerResponse.has(\"totalDocs\") ?\n-          brokerResponse.get(\"totalDocs\").asLong() : -1L;\n-      _numGroupsLimitReached = brokerResponse.has(\"numGroupsLimitReached\")\n-          && brokerResponse.get(\"numGroupsLimitReached\").asBoolean();\n-      _timeUsedMs = brokerResponse.has(\"timeUsedMs\") ?\n-          brokerResponse.get(\"timeUsedMs\").asLong() : -1L;\n-    }\n-\n-    static ResponseStats fromJson(JsonNode json) {\n-      return new ResponseStats(json);\n-    }\n-\n-    public int getNumServersQueried() {\n-      return _numServersQueried;\n-    }\n-\n-    public int getNumServersResponded() {\n-      return _numServersResponded;\n-    }\n-\n-    public long getNumDocsScanned() {\n-      return _numDocsScanned;\n-    }\n-\n-    public long getNumEntriesScannedInFilter() {\n-      return _numEntriesScannedInFilter;\n-    }\n-\n-    public long getNumEntriesScannedPostFilter() {\n-      return _numEntriesScannedPostFilter;\n-    }\n-\n-    public long getNumSegmentsQueried() {\n-      return _numSegmentsQueried;\n-    }\n-\n-    public long getNumSegmentsProcessed() {\n-      return _numSegmentsProcessed;\n-    }\n-\n-    public long getNumSegmentsMatched() {\n-      return _numSegmentsMatched;\n-    }\n-\n-    public long getNumConsumingSegmentsQueried() {\n-      return _numConsumingSegmentsQueried;\n-    }\n-\n-    public long getMinConsumingFreshnessTimeMs() {\n-      return _minConsumingFreshnessTimeMs;\n-    }\n-\n-    public long getTotalDocs() {\n-      return _totalDocs;\n-    }\n-\n-    public boolean isNumGroupsLimitReached() {\n-      return _numGroupsLimitReached;\n-    }\n-\n-    public long getTimeUsedMs() {\n-      return _timeUsedMs;\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return \"{numServersQueried: \" + _numServersQueried +\n-          \", numServersResponded: \" + _numServersResponded +\n-          \", numDocsScanned: \" + _numDocsScanned +\n-          \", numEntriesScannedInFilter: \" + _numEntriesScannedInFilter +\n-          \", numEntriesScannedPostFilter: \" + _numEntriesScannedPostFilter +\n-          \", numSegmentsQueried: \" + _numSegmentsQueried +\n-          \", numSegmentsProcessed: \" + _numSegmentsProcessed +\n-          \", numSegmentsMatched: \" + _numSegmentsMatched +\n-          \", numConsumingSegmentsQueried: \" + _numConsumingSegmentsQueried +\n-          \", minConsumingFreshnessTimeMs: \" + _minConsumingFreshnessTimeMs +\n-          \"ms, totalDocs: \" + _totalDocs +\n-          \", numGroupsLimitReached: \" + _numGroupsLimitReached +\n-          \", timeUsedMs: \" + _timeUsedMs +\n-          \"ms}\";\n-    }\n+    _brokerResponseStats = BrokerResponseStats.fromJson(brokerResponse);\n   }\n \n   boolean hasExceptions() {\n"}}, {"oid": "bb9304acdd026bf7b5582691eb06560a364f3fdb", "url": "https://github.com/apache/pinot/commit/bb9304acdd026bf7b5582691eb06560a364f3fdb", "message": "Make the BrokerResponse class and getResponseStats() method public.", "committedDate": "2020-08-18T19:54:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NTA3NQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472445075", "bodyText": "@KKcorps @npawar I would call this as a major change in the public API for java client. BrokerResponse was package protected but now this PR makes the class public. Do you know why the BrokerResponse was not public?\nMy understanding is the client was exposing the results, much like the relational databases so that the client application doesn't need to understand the internals of Pinot response but this requirement kind of beats that. The intention here is \"I understand response stats and let me access them\".\nThoughts, please?", "author": "buchireddy", "createdAt": "2020-08-18T19:57:59Z", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java", "diffHunk": "@@ -24,11 +24,12 @@\n /**\n  * Reimplementation of BrokerResponse from pinot-common, so that pinot-api does not depend on pinot-common.\n  */\n-class BrokerResponse {\n+public class BrokerResponse {", "originalCommit": "bb9304acdd026bf7b5582691eb06560a364f3fdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NTE5NA==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472475194", "bodyText": "I think thee intention was to expose a standard ResultSet Interface from which the user can easily read the data.\nBroker Response can have different fields depending upon whether SQL or PQL endpoint was queried.", "author": "KKcorps", "createdAt": "2020-08-18T20:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NTA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwNTYyNg==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r472505626", "bodyText": "IMO, ResultSet makes sense for JDBC client but for the Java client, the entire BrokerResponse makes more sense.", "author": "buchireddy", "createdAt": "2020-08-18T21:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NTA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5MjU0Mw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r473392543", "bodyText": "Fixed this now by exposing stats in the ResultSetGroup itself. Please check.", "author": "buchireddy", "createdAt": "2020-08-19T22:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NTA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ebb5803f92020d90fc9bf918729027c38c2b11a7", "chunk": "diff --git a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java\nindex d1dde7ed24..9694fb5aa4 100644\n--- a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java\n+++ b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/BrokerResponse.java\n\n@@ -29,7 +29,7 @@ public class BrokerResponse {\n   private JsonNode _selectionResults;\n   private JsonNode _resultTable;\n   private JsonNode _exceptions;\n-  private ResponseStats _responseStats;\n+  private BrokerResponseStats _brokerResponseStats;\n \n   private BrokerResponse() {\n   }\n"}}, {"oid": "ebb5803f92020d90fc9bf918729027c38c2b11a7", "url": "https://github.com/apache/pinot/commit/ebb5803f92020d90fc9bf918729027c38c2b11a7", "message": "Moving the BrokerResponseStats into a separate file.", "committedDate": "2020-08-18T20:37:20Z", "type": "commit"}, {"oid": "9fc6dd019364e31896bc964bbe8cbeb0159fb03f", "url": "https://github.com/apache/pinot/commit/9fc6dd019364e31896bc964bbe8cbeb0159fb03f", "message": "Exposing ResponseStats from ResultSetGroup instead of BrokerResponse.\n\nThis allows the ResponseStats to be introduced without changing any of the current\nmethods of Connection or PreparedStatement and no backward compatibility issues.", "committedDate": "2020-08-19T22:28:53Z", "type": "commit"}, {"oid": "40aea9410a36afe01ed5bd61f582074ad41c452a", "url": "https://github.com/apache/pinot/commit/40aea9410a36afe01ed5bd61f582074ad41c452a", "message": "s/ResponseStats/ResultSetStats/", "committedDate": "2020-08-19T22:58:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3Mjk1MA==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474172950", "bodyText": "This should be a List as well since ResultSet is a list", "author": "KKcorps", "createdAt": "2020-08-20T18:01:07Z", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java", "diffHunk": "@@ -28,6 +28,7 @@\n  */\n public class ResultSetGroup {\n   private final List<ResultSet> _resultSets;\n+  private final ResultSetStats _resultSetStats;", "originalCommit": "40aea9410a36afe01ed5bd61f582074ad41c452a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MjU3OQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474292579", "bodyText": "A single query only has one set of stats. AFAIK, ResultSet is a list because Pinot sends a separate set of results for each group when there is groupBy but that doesn't mean there will be multiple response stats.\n@fx19880617 correct me if my understanding isn't correct.", "author": "buchireddy", "createdAt": "2020-08-20T21:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MDQ3NA==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474450474", "bodyText": "@buchireddy that's right. we don't need it to be part of each resultset", "author": "kishoreg", "createdAt": "2020-08-21T07:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzIzMw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474507233", "bodyText": "cool.", "author": "KKcorps", "createdAt": "2020-08-21T08:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3Mjk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "bf7c20c51b026f1eec7e5dc85b7d8a90860aeee4", "chunk": "diff --git a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java\nindex 1d736756a7..67c40038b5 100644\n--- a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java\n+++ b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java\n\n@@ -28,7 +28,7 @@ import java.util.List;\n  */\n public class ResultSetGroup {\n   private final List<ResultSet> _resultSets;\n-  private final ResultSetStats _resultSetStats;\n+  private final ExecutionStats _executionStats;\n \n   ResultSetGroup(BrokerResponse brokerResponse) {\n     _resultSets = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MTA4NA==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474451084", "bodyText": "rename to executionStats", "author": "kishoreg", "createdAt": "2020-08-21T07:06:22Z", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java", "diffHunk": "@@ -28,6 +28,7 @@\n  */\n public class ResultSetGroup {\n   private final List<ResultSet> _resultSets;\n+  private final ResultSetStats _resultSetStats;", "originalCommit": "40aea9410a36afe01ed5bd61f582074ad41c452a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjg4Mg==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474506882", "bodyText": "Done", "author": "buchireddy", "createdAt": "2020-08-21T08:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MTA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "bf7c20c51b026f1eec7e5dc85b7d8a90860aeee4", "chunk": "diff --git a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java\nindex 1d736756a7..67c40038b5 100644\n--- a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java\n+++ b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetGroup.java\n\n@@ -28,7 +28,7 @@ import java.util.List;\n  */\n public class ResultSetGroup {\n   private final List<ResultSet> _resultSets;\n-  private final ResultSetStats _resultSetStats;\n+  private final ExecutionStats _executionStats;\n \n   ResultSetGroup(BrokerResponse brokerResponse) {\n     _resultSets = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NTgyMQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474455821", "bodyText": "can we create constants for strings?", "author": "kishoreg", "createdAt": "2020-08-21T07:12:28Z", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetStats.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+/**\n+ * Simple POJO to hold query execution statistics for a request. These stats come in every\n+ * query that's executed and can be used for debugging Pinot slow queries.\n+ */\n+class ResultSetStats {\n+  private final int _numServersQueried;\n+  private final int _numServersResponded;\n+  private final long _numDocsScanned;\n+  private final long _numEntriesScannedInFilter;\n+  private final long _numEntriesScannedPostFilter;\n+  private final long _numSegmentsQueried;\n+  private final long _numSegmentsProcessed;\n+  private final long _numSegmentsMatched;\n+  private final long _numConsumingSegmentsQueried;\n+  private final long _minConsumingFreshnessTimeMs;\n+  private final long _totalDocs;\n+  private final boolean _numGroupsLimitReached;\n+  private final long _timeUsedMs;\n+\n+  ResultSetStats(JsonNode brokerResponse) {\n+    _numServersQueried = brokerResponse.has(\"numServersQueried\") ?", "originalCommit": "40aea9410a36afe01ed5bd61f582074ad41c452a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjQzNQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474806435", "bodyText": "Done.", "author": "buchireddy", "createdAt": "2020-08-21T16:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NTgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "bf7c20c51b026f1eec7e5dc85b7d8a90860aeee4", "chunk": "diff --git a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetStats.java b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetStats.java\ndeleted file mode 100644\nindex ff8c44d958..0000000000\n--- a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetStats.java\n+++ /dev/null\n\n@@ -1,144 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pinot.client;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-\n-/**\n- * Simple POJO to hold query execution statistics for a request. These stats come in every\n- * query that's executed and can be used for debugging Pinot slow queries.\n- */\n-class ResultSetStats {\n-  private final int _numServersQueried;\n-  private final int _numServersResponded;\n-  private final long _numDocsScanned;\n-  private final long _numEntriesScannedInFilter;\n-  private final long _numEntriesScannedPostFilter;\n-  private final long _numSegmentsQueried;\n-  private final long _numSegmentsProcessed;\n-  private final long _numSegmentsMatched;\n-  private final long _numConsumingSegmentsQueried;\n-  private final long _minConsumingFreshnessTimeMs;\n-  private final long _totalDocs;\n-  private final boolean _numGroupsLimitReached;\n-  private final long _timeUsedMs;\n-\n-  ResultSetStats(JsonNode brokerResponse) {\n-    _numServersQueried = brokerResponse.has(\"numServersQueried\") ?\n-        brokerResponse.get(\"numServersQueried\").asInt() : -1;\n-    _numServersResponded = brokerResponse.has(\"numServersResponded\") ?\n-        brokerResponse.get(\"numServersResponded\").asInt() : -1;\n-    _numDocsScanned = brokerResponse.has(\"numDocsScanned\") ?\n-        brokerResponse.get(\"numDocsScanned\").asLong() : -1L;\n-    _numEntriesScannedInFilter = brokerResponse.has(\"numEntriesScannedInFilter\") ?\n-        brokerResponse.get(\"numEntriesScannedInFilter\").asLong() : -1L;\n-    _numEntriesScannedPostFilter = brokerResponse.has(\"numEntriesScannedPostFilter\") ?\n-        brokerResponse.get(\"numEntriesScannedPostFilter\").asLong() : -1L;\n-    _numSegmentsQueried = brokerResponse.has(\"numSegmentsQueried\") ?\n-        brokerResponse.get(\"numSegmentsQueried\").asLong() : -1L;\n-    _numSegmentsProcessed = brokerResponse.has(\"numSegmentsProcessed\") ?\n-        brokerResponse.get(\"numSegmentsProcessed\").asLong() : -1L;\n-    _numSegmentsMatched = brokerResponse.has(\"numSegmentsMatched\") ?\n-        brokerResponse.get(\"numSegmentsMatched\").asLong() : -1L;\n-    _numConsumingSegmentsQueried = brokerResponse.has(\"numConsumingSegmentsQueried\") ?\n-        brokerResponse.get(\"numConsumingSegmentsQueried\").asLong() : -1L;\n-    _minConsumingFreshnessTimeMs = brokerResponse.has(\"minConsumingFreshnessTimeMs\") ?\n-        brokerResponse.get(\"minConsumingFreshnessTimeMs\").asLong() : -1L;\n-    _totalDocs = brokerResponse.has(\"totalDocs\") ?\n-        brokerResponse.get(\"totalDocs\").asLong() : -1L;\n-    _numGroupsLimitReached = brokerResponse.has(\"numGroupsLimitReached\")\n-        && brokerResponse.get(\"numGroupsLimitReached\").asBoolean();\n-    _timeUsedMs = brokerResponse.has(\"timeUsedMs\") ?\n-        brokerResponse.get(\"timeUsedMs\").asLong() : -1L;\n-  }\n-\n-  static ResultSetStats fromJson(JsonNode json) {\n-    return new ResultSetStats(json);\n-  }\n-\n-  public int getNumServersQueried() {\n-    return _numServersQueried;\n-  }\n-\n-  public int getNumServersResponded() {\n-    return _numServersResponded;\n-  }\n-\n-  public long getNumDocsScanned() {\n-    return _numDocsScanned;\n-  }\n-\n-  public long getNumEntriesScannedInFilter() {\n-    return _numEntriesScannedInFilter;\n-  }\n-\n-  public long getNumEntriesScannedPostFilter() {\n-    return _numEntriesScannedPostFilter;\n-  }\n-\n-  public long getNumSegmentsQueried() {\n-    return _numSegmentsQueried;\n-  }\n-\n-  public long getNumSegmentsProcessed() {\n-    return _numSegmentsProcessed;\n-  }\n-\n-  public long getNumSegmentsMatched() {\n-    return _numSegmentsMatched;\n-  }\n-\n-  public long getNumConsumingSegmentsQueried() {\n-    return _numConsumingSegmentsQueried;\n-  }\n-\n-  public long getMinConsumingFreshnessTimeMs() {\n-    return _minConsumingFreshnessTimeMs;\n-  }\n-\n-  public long getTotalDocs() {\n-    return _totalDocs;\n-  }\n-\n-  public boolean isNumGroupsLimitReached() {\n-    return _numGroupsLimitReached;\n-  }\n-\n-  public long getTimeUsedMs() {\n-    return _timeUsedMs;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"{numServersQueried: \" + _numServersQueried +\n-        \", numServersResponded: \" + _numServersResponded +\n-        \", numDocsScanned: \" + _numDocsScanned +\n-        \", numEntriesScannedInFilter: \" + _numEntriesScannedInFilter +\n-        \", numEntriesScannedPostFilter: \" + _numEntriesScannedPostFilter +\n-        \", numSegmentsQueried: \" + _numSegmentsQueried +\n-        \", numSegmentsProcessed: \" + _numSegmentsProcessed +\n-        \", numSegmentsMatched: \" + _numSegmentsMatched +\n-        \", numConsumingSegmentsQueried: \" + _numConsumingSegmentsQueried +\n-        \", minConsumingFreshnessTimeMs: \" + _minConsumingFreshnessTimeMs +\n-        \"ms, totalDocs: \" + _totalDocs +\n-        \", numGroupsLimitReached: \" + _numGroupsLimitReached +\n-        \", timeUsedMs: \" + _timeUsedMs +\n-        \"ms}\";\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1ODA4Ng==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474458086", "bodyText": "can we simply maintain a reference to jsonNode and look it up in the respective methods. This will add perf overhead for high throughput use cases where the client code is not interested in all the stats", "author": "kishoreg", "createdAt": "2020-08-21T07:15:18Z", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetStats.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+/**\n+ * Simple POJO to hold query execution statistics for a request. These stats come in every\n+ * query that's executed and can be used for debugging Pinot slow queries.\n+ */\n+class ResultSetStats {\n+  private final int _numServersQueried;\n+  private final int _numServersResponded;\n+  private final long _numDocsScanned;\n+  private final long _numEntriesScannedInFilter;\n+  private final long _numEntriesScannedPostFilter;\n+  private final long _numSegmentsQueried;\n+  private final long _numSegmentsProcessed;\n+  private final long _numSegmentsMatched;\n+  private final long _numConsumingSegmentsQueried;\n+  private final long _minConsumingFreshnessTimeMs;\n+  private final long _totalDocs;\n+  private final boolean _numGroupsLimitReached;\n+  private final long _timeUsedMs;\n+\n+  ResultSetStats(JsonNode brokerResponse) {\n+    _numServersQueried = brokerResponse.has(\"numServersQueried\") ?\n+        brokerResponse.get(\"numServersQueried\").asInt() : -1;", "originalCommit": "40aea9410a36afe01ed5bd61f582074ad41c452a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjczNQ==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474506735", "bodyText": "Done", "author": "buchireddy", "createdAt": "2020-08-21T08:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1ODA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bf7c20c51b026f1eec7e5dc85b7d8a90860aeee4", "chunk": "diff --git a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetStats.java b/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetStats.java\ndeleted file mode 100644\nindex ff8c44d958..0000000000\n--- a/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultSetStats.java\n+++ /dev/null\n\n@@ -1,144 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pinot.client;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-\n-/**\n- * Simple POJO to hold query execution statistics for a request. These stats come in every\n- * query that's executed and can be used for debugging Pinot slow queries.\n- */\n-class ResultSetStats {\n-  private final int _numServersQueried;\n-  private final int _numServersResponded;\n-  private final long _numDocsScanned;\n-  private final long _numEntriesScannedInFilter;\n-  private final long _numEntriesScannedPostFilter;\n-  private final long _numSegmentsQueried;\n-  private final long _numSegmentsProcessed;\n-  private final long _numSegmentsMatched;\n-  private final long _numConsumingSegmentsQueried;\n-  private final long _minConsumingFreshnessTimeMs;\n-  private final long _totalDocs;\n-  private final boolean _numGroupsLimitReached;\n-  private final long _timeUsedMs;\n-\n-  ResultSetStats(JsonNode brokerResponse) {\n-    _numServersQueried = brokerResponse.has(\"numServersQueried\") ?\n-        brokerResponse.get(\"numServersQueried\").asInt() : -1;\n-    _numServersResponded = brokerResponse.has(\"numServersResponded\") ?\n-        brokerResponse.get(\"numServersResponded\").asInt() : -1;\n-    _numDocsScanned = brokerResponse.has(\"numDocsScanned\") ?\n-        brokerResponse.get(\"numDocsScanned\").asLong() : -1L;\n-    _numEntriesScannedInFilter = brokerResponse.has(\"numEntriesScannedInFilter\") ?\n-        brokerResponse.get(\"numEntriesScannedInFilter\").asLong() : -1L;\n-    _numEntriesScannedPostFilter = brokerResponse.has(\"numEntriesScannedPostFilter\") ?\n-        brokerResponse.get(\"numEntriesScannedPostFilter\").asLong() : -1L;\n-    _numSegmentsQueried = brokerResponse.has(\"numSegmentsQueried\") ?\n-        brokerResponse.get(\"numSegmentsQueried\").asLong() : -1L;\n-    _numSegmentsProcessed = brokerResponse.has(\"numSegmentsProcessed\") ?\n-        brokerResponse.get(\"numSegmentsProcessed\").asLong() : -1L;\n-    _numSegmentsMatched = brokerResponse.has(\"numSegmentsMatched\") ?\n-        brokerResponse.get(\"numSegmentsMatched\").asLong() : -1L;\n-    _numConsumingSegmentsQueried = brokerResponse.has(\"numConsumingSegmentsQueried\") ?\n-        brokerResponse.get(\"numConsumingSegmentsQueried\").asLong() : -1L;\n-    _minConsumingFreshnessTimeMs = brokerResponse.has(\"minConsumingFreshnessTimeMs\") ?\n-        brokerResponse.get(\"minConsumingFreshnessTimeMs\").asLong() : -1L;\n-    _totalDocs = brokerResponse.has(\"totalDocs\") ?\n-        brokerResponse.get(\"totalDocs\").asLong() : -1L;\n-    _numGroupsLimitReached = brokerResponse.has(\"numGroupsLimitReached\")\n-        && brokerResponse.get(\"numGroupsLimitReached\").asBoolean();\n-    _timeUsedMs = brokerResponse.has(\"timeUsedMs\") ?\n-        brokerResponse.get(\"timeUsedMs\").asLong() : -1L;\n-  }\n-\n-  static ResultSetStats fromJson(JsonNode json) {\n-    return new ResultSetStats(json);\n-  }\n-\n-  public int getNumServersQueried() {\n-    return _numServersQueried;\n-  }\n-\n-  public int getNumServersResponded() {\n-    return _numServersResponded;\n-  }\n-\n-  public long getNumDocsScanned() {\n-    return _numDocsScanned;\n-  }\n-\n-  public long getNumEntriesScannedInFilter() {\n-    return _numEntriesScannedInFilter;\n-  }\n-\n-  public long getNumEntriesScannedPostFilter() {\n-    return _numEntriesScannedPostFilter;\n-  }\n-\n-  public long getNumSegmentsQueried() {\n-    return _numSegmentsQueried;\n-  }\n-\n-  public long getNumSegmentsProcessed() {\n-    return _numSegmentsProcessed;\n-  }\n-\n-  public long getNumSegmentsMatched() {\n-    return _numSegmentsMatched;\n-  }\n-\n-  public long getNumConsumingSegmentsQueried() {\n-    return _numConsumingSegmentsQueried;\n-  }\n-\n-  public long getMinConsumingFreshnessTimeMs() {\n-    return _minConsumingFreshnessTimeMs;\n-  }\n-\n-  public long getTotalDocs() {\n-    return _totalDocs;\n-  }\n-\n-  public boolean isNumGroupsLimitReached() {\n-    return _numGroupsLimitReached;\n-  }\n-\n-  public long getTimeUsedMs() {\n-    return _timeUsedMs;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"{numServersQueried: \" + _numServersQueried +\n-        \", numServersResponded: \" + _numServersResponded +\n-        \", numDocsScanned: \" + _numDocsScanned +\n-        \", numEntriesScannedInFilter: \" + _numEntriesScannedInFilter +\n-        \", numEntriesScannedPostFilter: \" + _numEntriesScannedPostFilter +\n-        \", numSegmentsQueried: \" + _numSegmentsQueried +\n-        \", numSegmentsProcessed: \" + _numSegmentsProcessed +\n-        \", numSegmentsMatched: \" + _numSegmentsMatched +\n-        \", numConsumingSegmentsQueried: \" + _numConsumingSegmentsQueried +\n-        \", minConsumingFreshnessTimeMs: \" + _minConsumingFreshnessTimeMs +\n-        \"ms, totalDocs: \" + _totalDocs +\n-        \", numGroupsLimitReached: \" + _numGroupsLimitReached +\n-        \", timeUsedMs: \" + _timeUsedMs +\n-        \"ms}\";\n-  }\n-}\n"}}, {"oid": "bf7c20c51b026f1eec7e5dc85b7d8a90860aeee4", "url": "https://github.com/apache/pinot/commit/bf7c20c51b026f1eec7e5dc85b7d8a90860aeee4", "message": "s/ResultSetStats/ExecutionStats/\nAlso, reading the stats from the JsonNode on need basis instead of reading\nthem always to avoid the overhead for cases who doesn't read stats.", "committedDate": "2020-08-21T07:45:07Z", "type": "commit"}, {"oid": "6589c8a69f8ba34c61befbfae126bd7c36a21705", "url": "https://github.com/apache/pinot/commit/6589c8a69f8ba34c61befbfae126bd7c36a21705", "message": "Pulling out the string literals into constants.", "committedDate": "2020-08-21T08:44:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNzk3OA==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474837978", "bodyText": "How are we getting this fixed time of 82 for the test?", "author": "npawar", "createdAt": "2020-08-21T17:41:50Z", "path": "pinot-clients/pinot-java-client/src/test/java/org/apache/pinot/client/ResultSetGroupTest.java", "diffHunk": "@@ -55,11 +55,15 @@ public void testDeserializeSelectionResultSet() {\n     Assert.assertEquals(resultSet.getColumnCount(), 79);\n     Assert.assertEquals(resultSet.getColumnName(0), \"ActualElapsedTime\");\n     Assert.assertEquals(resultSet.getColumnName(1), \"AirTime\");\n+\n+    // Verify the execution stats.\n+    Assert.assertEquals(115545, resultSetGroup.getExecutionStats().getTotalDocs());\n+    Assert.assertEquals(82, resultSetGroup.getExecutionStats().getTimeUsedMs());", "originalCommit": "6589c8a69f8ba34c61befbfae126bd7c36a21705", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk2MDQzMw==", "url": "https://github.com/apache/pinot/pull/5892#discussion_r474960433", "bodyText": "This is just testing the checked-in json file selection.json. Look at L41.", "author": "buchireddy", "createdAt": "2020-08-21T20:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNzk3OA=="}], "type": "inlineReview", "revised_code": null}]}