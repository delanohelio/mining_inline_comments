{"pr_number": 5734, "pr_title": "Adding column name rewrite for the identifiers in the format of [table].[column]", "pr_createdAt": "2020-07-22T22:50:08Z", "pr_url": "https://github.com/apache/pinot/pull/5734", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MDE3MQ==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459160171", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  handleUpdateColumnNames(brokerRequest);\n          \n          \n            \n                  updateColumnNames(brokerRequest);", "author": "Jackie-Jiang", "createdAt": "2020-07-23T00:43:12Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -202,12 +202,10 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n       }\n     }\n     updateQuerySource(brokerRequest);\n-    if (_enableCaseInsensitive) {\n-      try {\n-        handleCaseSensitivity(brokerRequest);\n-      } catch (Exception e) {\n-        LOGGER.warn(\"Caught exception while rewriting PQL to make it case-insensitive {}: {}, {}\", requestId, query, e);\n-      }\n+    try {\n+      handleUpdateColumnNames(brokerRequest);", "originalCommit": "2c1102ec56c0d865721312a79a2db9e42632691a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7310a1c2807cfbf9c2e4a8b628a47fd25b25cd6b", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex 635d03a38f..ae3547470a 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -203,9 +203,9 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n     }\n     updateQuerySource(brokerRequest);\n     try {\n-      handleUpdateColumnNames(brokerRequest);\n+      updateColumnNames(brokerRequest);\n     } catch (Exception e) {\n-      LOGGER.warn(\"Caught exception while rewriting Column names in Pinot Query {}: {}, {}\", requestId, query, e);\n+      LOGGER.warn(\"Caught exception while updating Column names in Query {}: {}, {}\", requestId, query, e);\n     }\n     if (_defaultHllLog2m > 0) {\n       handleHyperloglogLog2mOverride(brokerRequest, _defaultHllLog2m);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MDQ5OA==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459160498", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOGGER.warn(\"Caught exception while rewriting Column names in Pinot Query {}: {}, {}\", requestId, query, e);\n          \n          \n            \n                  LOGGER.warn(\"Caught exception while updating column names for query {}: {}, {}\", requestId, query, e);", "author": "Jackie-Jiang", "createdAt": "2020-07-23T00:44:25Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -202,12 +202,10 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n       }\n     }\n     updateQuerySource(brokerRequest);\n-    if (_enableCaseInsensitive) {\n-      try {\n-        handleCaseSensitivity(brokerRequest);\n-      } catch (Exception e) {\n-        LOGGER.warn(\"Caught exception while rewriting PQL to make it case-insensitive {}: {}, {}\", requestId, query, e);\n-      }\n+    try {\n+      handleUpdateColumnNames(brokerRequest);\n+    } catch (Exception e) {\n+      LOGGER.warn(\"Caught exception while rewriting Column names in Pinot Query {}: {}, {}\", requestId, query, e);", "originalCommit": "2c1102ec56c0d865721312a79a2db9e42632691a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7310a1c2807cfbf9c2e4a8b628a47fd25b25cd6b", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex 635d03a38f..ae3547470a 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -203,9 +203,9 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n     }\n     updateQuerySource(brokerRequest);\n     try {\n-      handleUpdateColumnNames(brokerRequest);\n+      updateColumnNames(brokerRequest);\n     } catch (Exception e) {\n-      LOGGER.warn(\"Caught exception while rewriting Column names in Pinot Query {}: {}, {}\", requestId, query, e);\n+      LOGGER.warn(\"Caught exception while updating Column names in Query {}: {}, {}\", requestId, query, e);\n     }\n     if (_defaultHllLog2m > 0) {\n       handleHyperloglogLog2mOverride(brokerRequest, _defaultHllLog2m);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MTE1Mg==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459161152", "bodyText": "Should we move this part into the updateQuerySource()?", "author": "Jackie-Jiang", "createdAt": "2020-07-23T00:46:58Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -667,19 +665,22 @@ private void computeResultsForLiteral(Literal literal, List<String> columnNames,\n   }\n \n   /**\n-   * Fixes the case-insensitive column names to the actual column names in the given broker request.\n+   * Fixes the column names to the actual column names in the given broker request.\n    */\n-  private void handleCaseSensitivity(BrokerRequest brokerRequest) {\n-    String inputTableName = brokerRequest.getQuerySource().getTableName();\n-    String actualTableName = _tableCache.getActualTableName(inputTableName);\n-    brokerRequest.getQuerySource().setTableName(actualTableName);\n+  private void handleUpdateColumnNames(BrokerRequest brokerRequest) {\n+    if (_enableCaseInsensitive) {\n+      String inputTableName = brokerRequest.getQuerySource().getTableName();\n+      String actualTableName = _tableCache.getActualTableName(inputTableName);\n+      brokerRequest.getQuerySource().setTableName(actualTableName);\n+    }", "originalCommit": "2c1102ec56c0d865721312a79a2db9e42632691a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7310a1c2807cfbf9c2e4a8b628a47fd25b25cd6b", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex 635d03a38f..ae3547470a 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -667,12 +668,7 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n   /**\n    * Fixes the column names to the actual column names in the given broker request.\n    */\n-  private void handleUpdateColumnNames(BrokerRequest brokerRequest) {\n-    if (_enableCaseInsensitive) {\n-      String inputTableName = brokerRequest.getQuerySource().getTableName();\n-      String actualTableName = _tableCache.getActualTableName(inputTableName);\n-      brokerRequest.getQuerySource().setTableName(actualTableName);\n-    }\n+  private void updateColumnNames(BrokerRequest brokerRequest) {\n     String tableName = brokerRequest.getQuerySource().getTableName();\n     //fix columns\n     if (brokerRequest.getFilterSubQueryMap() != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjI4Mw==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459162283", "bodyText": "Not sure if we need the first check. SELECT myTable_OFFLINE.colA FROM ... seems impossible from connector as _OFFLINE is Pinot internal concept", "author": "Jackie-Jiang", "createdAt": "2020-07-23T00:51:52Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -704,74 +705,96 @@ private void handleCaseSensitivity(BrokerRequest brokerRequest) {\n       for (int i = 0; i < selectionColumns.size(); i++) {\n         String expression = selectionColumns.get(i);\n         if (!expression.equals(\"*\")) {\n-          selectionColumns.set(i, fixColumnNameCase(actualTableName, expression));\n+          selectionColumns.set(i, fixColumnName(tableName, expression));\n         }\n       }\n     }\n     if (brokerRequest.isSetOrderBy()) {\n       List<SelectionSort> orderBy = brokerRequest.getOrderBy();\n       for (SelectionSort selectionSort : orderBy) {\n         String expression = selectionSort.getColumn();\n-        selectionSort.setColumn(fixColumnNameCase(actualTableName, expression));\n+        selectionSort.setColumn(fixColumnName(tableName, expression));\n       }\n     }\n \n     PinotQuery pinotQuery = brokerRequest.getPinotQuery();\n     if (pinotQuery != null) {\n-      pinotQuery.getDataSource().setTableName(actualTableName);\n+      pinotQuery.getDataSource().setTableName(tableName);\n       for (Expression expression : pinotQuery.getSelectList()) {\n-        fixColumnNameCase(actualTableName, expression);\n+        fixColumnName(tableName, expression);\n       }\n       Expression filterExpression = pinotQuery.getFilterExpression();\n       if (filterExpression != null) {\n-        fixColumnNameCase(actualTableName, filterExpression);\n+        fixColumnName(tableName, filterExpression);\n       }\n       List<Expression> groupByList = pinotQuery.getGroupByList();\n       if (groupByList != null) {\n         for (Expression expression : groupByList) {\n-          fixColumnNameCase(actualTableName, expression);\n+          fixColumnName(tableName, expression);\n         }\n       }\n       List<Expression> orderByList = pinotQuery.getOrderByList();\n       if (orderByList != null) {\n         for (Expression expression : orderByList) {\n-          fixColumnNameCase(actualTableName, expression);\n+          fixColumnName(tableName, expression);\n         }\n       }\n       Expression havingExpression = pinotQuery.getHavingExpression();\n       if (havingExpression != null) {\n-        fixColumnNameCase(actualTableName, havingExpression);\n+        fixColumnName(tableName, havingExpression);\n       }\n     }\n   }\n \n-  private String fixColumnNameCase(String tableNameWithType, String expression) {\n+  private String fixColumnName(String tableNameWithType, String expression) {\n     TransformExpressionTree expressionTree = TransformExpressionTree.compileToExpressionTree(expression);\n-    fixColumnNameCase(tableNameWithType, expressionTree);\n+    fixColumnName(tableNameWithType, expressionTree);\n     return expressionTree.toString();\n   }\n \n-  private void fixColumnNameCase(String tableNameWithType, TransformExpressionTree expression) {\n+  private void fixColumnName(String tableNameWithType, TransformExpressionTree expression) {\n     TransformExpressionTree.ExpressionType expressionType = expression.getExpressionType();\n     if (expressionType == TransformExpressionTree.ExpressionType.IDENTIFIER) {\n-      expression.setValue(_tableCache.getActualColumnName(tableNameWithType, expression.getValue()));\n+      String identifier = expression.getValue();\n+      expression.setValue(getActualColumnName(tableNameWithType, identifier));\n     } else if (expressionType == TransformExpressionTree.ExpressionType.FUNCTION) {\n       for (TransformExpressionTree child : expression.getChildren()) {\n-        fixColumnNameCase(tableNameWithType, child);\n+        fixColumnName(tableNameWithType, child);\n       }\n     }\n   }\n \n-  private void fixColumnNameCase(String tableNameWithType, Expression expression) {\n+  private void fixColumnName(String tableNameWithType, Expression expression) {\n     ExpressionType expressionType = expression.getType();\n     if (expressionType == ExpressionType.IDENTIFIER) {\n       Identifier identifier = expression.getIdentifier();\n-      identifier.setName(_tableCache.getActualColumnName(tableNameWithType, identifier.getName()));\n+      identifier.setName(getActualColumnName(tableNameWithType, identifier.getName()));\n     } else if (expressionType == ExpressionType.FUNCTION) {\n       for (Expression operand : expression.getFunctionCall().getOperands()) {\n-        fixColumnNameCase(tableNameWithType, operand);\n+        fixColumnName(tableNameWithType, operand);\n+      }\n+    }\n+  }\n+\n+  private String getActualColumnName(String tableNameWithType, String columnName) {\n+    String[] splits = StringUtils.split(columnName, \".\", 2);\n+    if (_enableCaseInsensitive) {\n+      if (splits.length == 2) {\n+        if (tableNameWithType.equalsIgnoreCase(splits[0]) || TableNameBuilder.extractRawTableName(tableNameWithType)", "originalCommit": "2c1102ec56c0d865721312a79a2db9e42632691a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7310a1c2807cfbf9c2e4a8b628a47fd25b25cd6b", "chunk": "diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\nindex 635d03a38f..ae3547470a 100644\n--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java\n\n@@ -780,16 +776,14 @@ public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {\n     String[] splits = StringUtils.split(columnName, \".\", 2);\n     if (_enableCaseInsensitive) {\n       if (splits.length == 2) {\n-        if (tableNameWithType.equalsIgnoreCase(splits[0]) || TableNameBuilder.extractRawTableName(tableNameWithType)\n-            .equalsIgnoreCase(splits[0])) {\n+        if (TableNameBuilder.extractRawTableName(tableNameWithType).equalsIgnoreCase(splits[0])) {\n           return _tableCache.getActualColumnName(tableNameWithType, splits[1]);\n         }\n       }\n       return _tableCache.getActualColumnName(tableNameWithType, columnName);\n     } else {\n       if (splits.length == 2) {\n-        if (tableNameWithType.equals(splits[0]) || TableNameBuilder.extractRawTableName(tableNameWithType)\n-            .equals(splits[0])) {\n+        if (TableNameBuilder.extractRawTableName(tableNameWithType).equals(splits[0])) {\n           return splits[1];\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MzI0NA==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459163244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                baseQueries.stream().forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));\n          \n          \n            \n                baseQueries.forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));", "author": "Jackie-Jiang", "createdAt": "2020-07-23T00:55:49Z", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java", "diffHunk": "@@ -1179,6 +1179,74 @@ public void testCaseInsensitivity() {\n     }, 10_000L, \"Failed to get results for case-insensitive queries\");\n   }\n \n+  @Test\n+  public void testColumnNameContainsTableName() {\n+    int daysSinceEpoch = 16138;\n+    long secondsSinceEpoch = 16138 * 24 * 60 * 60;\n+    List<String> baseQueries = Arrays.asList(\"SELECT * FROM mytable\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch limit 10000\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000\",\n+        \"SELECT count(*) FROM mytable WHERE DaysSinceEpoch = \" + daysSinceEpoch,\n+        \"SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = \" + secondsSinceEpoch,\n+        \"SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = \" + daysSinceEpoch,\n+        \"SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable\",\n+        \"SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH','1:HOURS')\");\n+    List<String> queries = new ArrayList<>();\n+    baseQueries.stream().forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));", "originalCommit": "2c1102ec56c0d865721312a79a2db9e42632691a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7310a1c2807cfbf9c2e4a8b628a47fd25b25cd6b", "chunk": "diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java\nindex 076a186e0c..982700141a 100644\n--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java\n+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java\n\n@@ -1159,24 +1159,17 @@ public class OfflineClusterIntegrationTest extends BaseClusterIntegrationTestSet\n         \"SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable\",\n         \"SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH','1:HOURS')\");\n     List<String> queries = new ArrayList<>();\n-    baseQueries.stream().forEach(q -> queries.add(q.replace(\"mytable\", \"MYTABLE\").replace(\"DaysSinceEpoch\", \"DAYSSinceEpOch\")));\n-    baseQueries.stream().forEach(q -> queries.add(q.replace(\"mytable\", \"MYDB.MYTABLE\").replace(\"DaysSinceEpoch\", \"DAYSSinceEpOch\")));\n+    baseQueries.forEach(q -> queries.add(q.replace(\"mytable\", \"MYTABLE\").replace(\"DaysSinceEpoch\", \"DAYSSinceEpOch\")));\n+    baseQueries.forEach(q -> queries.add(q.replace(\"mytable\", \"MYDB.MYTABLE\").replace(\"DaysSinceEpoch\", \"DAYSSinceEpOch\")));\n \n-    // Wait for at most 10 seconds for broker to get the ZK callback of the schema change\n-    TestUtils.waitForCondition(aVoid -> {\n+    for (String query : queries) {\n       try {\n-        for (String query : queries) {\n-          JsonNode response = postQuery(query);\n-          // NOTE: When table does not exist, we will get 'BrokerResourceMissingError'.\n-          //       When column does not exist, all segments will be pruned and 'numSegmentsProcessed' will be 0.\n-          return response.get(\"exceptions\").size() == 0 && response.get(\"numSegmentsProcessed\").asInt() > 0;\n-        }\n+        postQuery(query);\n       } catch (Exception e) {\n         // Fail the test when exception caught\n-        throw new RuntimeException(e);\n+        throw new RuntimeException(\"Got Exceptions from query - \" + query);\n       }\n-      return true;\n-    }, 10_000L, \"Failed to get results for case-insensitive queries\");\n+    }\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MzQ1OQ==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459163459", "bodyText": "Remove the waitForCondition as there is no schema change. Same for testCaseInsensitivity() and testCaseInsensitivityWithColumnNameContainsTableName()", "author": "Jackie-Jiang", "createdAt": "2020-07-23T00:56:43Z", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java", "diffHunk": "@@ -1179,6 +1179,74 @@ public void testCaseInsensitivity() {\n     }, 10_000L, \"Failed to get results for case-insensitive queries\");\n   }\n \n+  @Test\n+  public void testColumnNameContainsTableName() {\n+    int daysSinceEpoch = 16138;\n+    long secondsSinceEpoch = 16138 * 24 * 60 * 60;\n+    List<String> baseQueries = Arrays.asList(\"SELECT * FROM mytable\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch limit 10000\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000\",\n+        \"SELECT count(*) FROM mytable WHERE DaysSinceEpoch = \" + daysSinceEpoch,\n+        \"SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = \" + secondsSinceEpoch,\n+        \"SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = \" + daysSinceEpoch,\n+        \"SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable\",\n+        \"SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH','1:HOURS')\");\n+    List<String> queries = new ArrayList<>();\n+    baseQueries.stream().forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));\n+    baseQueries.stream().forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));\n+\n+    // Wait for at most 10 seconds for broker to get the ZK callback of the schema change\n+    TestUtils.waitForCondition(aVoid -> {", "originalCommit": "2c1102ec56c0d865721312a79a2db9e42632691a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7310a1c2807cfbf9c2e4a8b628a47fd25b25cd6b", "chunk": "diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java\nindex 076a186e0c..982700141a 100644\n--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java\n+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java\n\n@@ -1159,24 +1159,17 @@ public class OfflineClusterIntegrationTest extends BaseClusterIntegrationTestSet\n         \"SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable\",\n         \"SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH','1:HOURS')\");\n     List<String> queries = new ArrayList<>();\n-    baseQueries.stream().forEach(q -> queries.add(q.replace(\"mytable\", \"MYTABLE\").replace(\"DaysSinceEpoch\", \"DAYSSinceEpOch\")));\n-    baseQueries.stream().forEach(q -> queries.add(q.replace(\"mytable\", \"MYDB.MYTABLE\").replace(\"DaysSinceEpoch\", \"DAYSSinceEpOch\")));\n+    baseQueries.forEach(q -> queries.add(q.replace(\"mytable\", \"MYTABLE\").replace(\"DaysSinceEpoch\", \"DAYSSinceEpOch\")));\n+    baseQueries.forEach(q -> queries.add(q.replace(\"mytable\", \"MYDB.MYTABLE\").replace(\"DaysSinceEpoch\", \"DAYSSinceEpOch\")));\n \n-    // Wait for at most 10 seconds for broker to get the ZK callback of the schema change\n-    TestUtils.waitForCondition(aVoid -> {\n+    for (String query : queries) {\n       try {\n-        for (String query : queries) {\n-          JsonNode response = postQuery(query);\n-          // NOTE: When table does not exist, we will get 'BrokerResourceMissingError'.\n-          //       When column does not exist, all segments will be pruned and 'numSegmentsProcessed' will be 0.\n-          return response.get(\"exceptions\").size() == 0 && response.get(\"numSegmentsProcessed\").asInt() > 0;\n-        }\n+        postQuery(query);\n       } catch (Exception e) {\n         // Fail the test when exception caught\n-        throw new RuntimeException(e);\n+        throw new RuntimeException(\"Got Exceptions from query - \" + query);\n       }\n-      return true;\n-    }, 10_000L, \"Failed to get results for case-insensitive queries\");\n+    }\n   }\n \n   @Test\n"}}, {"oid": "7310a1c2807cfbf9c2e4a8b628a47fd25b25cd6b", "url": "https://github.com/apache/pinot/commit/7310a1c2807cfbf9c2e4a8b628a47fd25b25cd6b", "message": "Adding column name rewrite for the identifiers in the format of [table_name].[column_name]", "committedDate": "2020-07-23T02:21:50Z", "type": "forcePushed"}, {"oid": "1acea4bf19db9a9b62b7870eab016cb2e7fdbfba", "url": "https://github.com/apache/pinot/commit/1acea4bf19db9a9b62b7870eab016cb2e7fdbfba", "message": "Adding column name rewrite for the identifiers in the format of [table_name].[column_name]", "committedDate": "2020-07-23T09:55:11Z", "type": "commit"}, {"oid": "1acea4bf19db9a9b62b7870eab016cb2e7fdbfba", "url": "https://github.com/apache/pinot/commit/1acea4bf19db9a9b62b7870eab016cb2e7fdbfba", "message": "Adding column name rewrite for the identifiers in the format of [table_name].[column_name]", "committedDate": "2020-07-23T09:55:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDI3MA==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459474270", "bodyText": "Does the calcite parser not support getting columns names from [table].[column] format? If so, we should just use that, instead of post processing here? We have been adding small string manipulations per query incrementally, and I fear it will add up to have performance significance soon.", "author": "mayankshriv", "createdAt": "2020-07-23T14:04:09Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -450,18 +448,22 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n   private void updateQuerySource(BrokerRequest brokerRequest) {\n     String tableName = brokerRequest.getQuerySource().getTableName();\n     // Check if table is in the format of [database_name].[table_name]\n-    String[] tableNameSplits = StringUtils.split(tableName, '.');\n-    if (tableNameSplits.length != 2) {\n-      return;\n-    }\n+    String[] tableNameSplits = StringUtils.split(tableName, \".\", 2);", "originalCommit": "1acea4bf19db9a9b62b7870eab016cb2e7fdbfba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTIwOQ==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459675209", "bodyText": "Calcite doesn't support parse it as [table].[column], we will get the whole as identifier.\nThen we need to handle that.", "author": "xiangfu0", "createdAt": "2020-07-23T19:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyODMyMQ==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459728321", "bodyText": "If Calcite doesn't support, then should we support it? The logic seems brittle anyways.", "author": "mayankshriv", "createdAt": "2020-07-23T21:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTE5OA==", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459735198", "bodyText": "We should. The usage is for other system integrations like tableau", "author": "xiangfu0", "createdAt": "2020-07-23T21:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDI3MA=="}], "type": "inlineReview", "revised_code": null}]}