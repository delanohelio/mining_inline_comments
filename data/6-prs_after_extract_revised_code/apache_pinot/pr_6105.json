{"pr_number": 6105, "pr_title": "scalar functions for array", "pr_createdAt": "2020-10-05T15:31:01Z", "pr_url": "https://github.com/apache/pinot/pull/6105", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTg2NA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499735864", "bodyText": "Also, add non-primitive data types e.g. Integer[], Long[]", "author": "KKcorps", "createdAt": "2020-10-05T16:47:33Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(String[].class, PinotDataType.STRING_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(float[].class, PinotDataType.FLOAT_ARRAY);\n+    put(double[].class, PinotDataType.DOUBLE_ARRAY);", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NzQ0Mw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502647443", "bodyText": "noon-primitive data types been added", "author": "SandishKumarHN", "createdAt": "2020-10-09T20:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\nindex 8a0fc248e8..a67602d306 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n\n@@ -43,10 +43,14 @@ public class FunctionUtils {\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n     put(int[].class, PinotDataType.INTEGER_ARRAY);\n-    put(String[].class, PinotDataType.STRING_ARRAY);\n+    put(Integer[].class, PinotDataType.INTEGER_ARRAY);\n     put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(Long[].class, PinotDataType.INTEGER_ARRAY);\n     put(float[].class, PinotDataType.FLOAT_ARRAY);\n+    put(Float[].class, PinotDataType.FLOAT_ARRAY);\n     put(double[].class, PinotDataType.DOUBLE_ARRAY);\n+    put(Double[].class, PinotDataType.DOUBLE_ARRAY);\n+    put(String[].class, PinotDataType.STRING_ARRAY);\n   }};\n \n   // Types allowed as the function argument (actual value passed into the function) for type conversion\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNzI2Mg==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499737262", "bodyText": "Can we keep function names to match the https://prestodb.io/docs/current/functions/array.html\nAlso, please add any other possible functions from the link.", "author": "KKcorps", "createdAt": "2020-10-05T16:49:57Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static String[] reverseStringArray(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arraySum(int[] value) {\n+    return new int[] {Arrays.stream(value).sum()};\n+  }\n+\n+  /**\n+   * @see ArrayUtils#indexOf(double[], double)\n+   * @param value\n+   * @param valueToFind\n+   * @return return position of value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayPosition(int[] value, int valueToFind) {", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\nindex 36d233ea5b..1225f71dc5 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n\n@@ -41,7 +41,7 @@ public class ArrayFunctions {\n    * @return reversed input array in from end to start\n    */\n   @ScalarFunction\n-  public static int[] reverseIntArray(int[] value) {\n+  public static int[] array_reverse_int(int[] value) {\n       ArrayUtils.reverse(value);\n       return value;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499821865", "bodyText": "for every function that we want to add, we'll have to always write fooLong, fooInt, fooDouble, fooFloat, fooString. In the presto-pinot connector we'll have to do additional mapping. Is there no way around that?", "author": "npawar", "createdAt": "2020-10-05T19:27:32Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDE0Nw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r500200147", "bodyText": "@npawar I was going through the string, json, and date scalar functions. I don't see a way to make it generic function for all types. @KKcorps can you please comment.", "author": "SandishKumarHN", "createdAt": "2020-10-06T11:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwMjY2Mg==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501102662", "bodyText": "Yes, currently that's not possible. We can resolve this in another PR.", "author": "KKcorps", "createdAt": "2020-10-07T15:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\nindex 36d233ea5b..1225f71dc5 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n\n@@ -41,7 +41,7 @@ public class ArrayFunctions {\n    * @return reversed input array in from end to start\n    */\n   @ScalarFunction\n-  public static int[] reverseIntArray(int[] value) {\n+  public static int[] array_reverse_int(int[] value) {\n       ArrayUtils.reverse(value);\n       return value;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTAxNw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499909017", "bodyText": "Why do you need int here? The argument should always be Object", "author": "Jackie-Jiang", "createdAt": "2020-10-05T22:35:28Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -56,6 +61,12 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(int.class, PinotDataType.INTEGER);", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODM5NA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502648394", "bodyText": "int was not added for SV, so added int.", "author": "SandishKumarHN", "createdAt": "2020-10-09T20:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\nindex 8a0fc248e8..a67602d306 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n\n@@ -55,6 +59,7 @@ public class FunctionUtils {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);\n     put(Integer.class, PinotDataType.INTEGER);\n     put(Long.class, PinotDataType.LONG);\n     put(Float.class, PinotDataType.FLOAT);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTMwMA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499909300", "bodyText": "Can we keep the same order as the SV ones (int, long, float, double, string), same for other places", "author": "Jackie-Jiang", "createdAt": "2020-10-05T22:36:22Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NzI0Mw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502647243", "bodyText": "I have made the order same as SV(int, long, float, double, string)", "author": "SandishKumarHN", "createdAt": "2020-10-09T20:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\nindex 8a0fc248e8..a67602d306 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n\n@@ -43,10 +43,14 @@ public class FunctionUtils {\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n     put(int[].class, PinotDataType.INTEGER_ARRAY);\n-    put(String[].class, PinotDataType.STRING_ARRAY);\n+    put(Integer[].class, PinotDataType.INTEGER_ARRAY);\n     put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(Long[].class, PinotDataType.INTEGER_ARRAY);\n     put(float[].class, PinotDataType.FLOAT_ARRAY);\n+    put(Float[].class, PinotDataType.FLOAT_ARRAY);\n     put(double[].class, PinotDataType.DOUBLE_ARRAY);\n+    put(Double[].class, PinotDataType.DOUBLE_ARRAY);\n+    put(String[].class, PinotDataType.STRING_ARRAY);\n   }};\n \n   // Types allowed as the function argument (actual value passed into the function) for type conversion\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMDY5MQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499910691", "bodyText": "Don't add boolean here as DataType.BOOLEAN is not a valid internal DataType (we use STRING to represent boolean). All the unrecognized types will be handled as STRING", "author": "Jackie-Jiang", "createdAt": "2020-10-05T22:40:30Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -69,6 +80,12 @@ private FunctionUtils() {\n     put(Double.class, DataType.DOUBLE);\n     put(String.class, DataType.STRING);\n     put(byte[].class, DataType.BYTES);\n+    put(int[].class, DataType.INT);\n+    put(String[].class, DataType.STRING);\n+    put(long[].class, DataType.LONG);\n+    put(float[].class, DataType.FLOAT);\n+    put(double[].class, DataType.DOUBLE);\n+    put(boolean.class, DataType.BOOLEAN);", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODE3NQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502648175", "bodyText": "boolean been removed", "author": "SandishKumarHN", "createdAt": "2020-10-09T20:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMDY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\nindex 8a0fc248e8..a67602d306 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n\n@@ -81,11 +89,14 @@ public class FunctionUtils {\n     put(String.class, DataType.STRING);\n     put(byte[].class, DataType.BYTES);\n     put(int[].class, DataType.INT);\n-    put(String[].class, DataType.STRING);\n+    put(Integer[].class, DataType.INT);\n     put(long[].class, DataType.LONG);\n+    put(Long[].class, DataType.LONG);\n     put(float[].class, DataType.FLOAT);\n+    put(Float[].class, DataType.FLOAT);\n     put(double[].class, DataType.DOUBLE);\n-    put(boolean.class, DataType.BOOLEAN);\n+    put(Double[].class, DataType.DOUBLE);\n+    put(String[].class, DataType.STRING);\n   }};\n \n   private static final Map<Class<?>, ColumnDataType> COLUMN_DATA_TYPE_MAP = new HashMap<Class<?>, ColumnDataType>() {{\n"}}, {"oid": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "url": "https://github.com/apache/pinot/commit/0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "message": "unit test for scalar array functions", "committedDate": "2020-10-06T21:21:42Z", "type": "forcePushed"}, {"oid": "e31c730851d4372b7cae0ef9e95bde98a4db0e7d", "url": "https://github.com/apache/pinot/commit/e31c730851d4372b7cae0ef9e95bde98a4db0e7d", "message": "unit test for scalar array functions", "committedDate": "2020-10-07T15:04:39Z", "type": "forcePushed"}, {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec", "url": "https://github.com/apache/pinot/commit/8f79ff777cfda6f68c329c052529af29cd7cedec", "message": "unit test for scalar array functions", "committedDate": "2020-10-07T15:34:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501118284", "bodyText": "why are most of these returning multi value int[] instead of just int? arraySum, arrayMax, arrayMin, arrayPosition and arrayContains", "author": "npawar", "createdAt": "2020-10-07T15:45:05Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")", "originalCommit": "8f79ff777cfda6f68c329c052529af29cd7cedec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDg1Ng==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501140856", "bodyText": "as the input param column is a multivalued column and returning the same. should we keep it int??", "author": "SandishKumarHN", "createdAt": "2020-10-07T16:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MTgyNg==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501151826", "bodyText": "Yes, lets return a single value. It is not intuitive to expect MV in these functions. Users might run into undesirable behaviors when nesting functions", "author": "npawar", "createdAt": "2020-10-07T16:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "26b77bcd58ac45ad10b8de2d01850db7604e16a7", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\nindex b8b34fd493..18c6ae0020 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n\n@@ -58,48 +58,18 @@ public class ArrayFunctions {\n   }\n \n   /**\n-   * @see Arrays#stream(double[]).max()\n-   * @param value\n-   * @return find minimum value in input array\n-   */\n-  @ScalarFunction(name = \"array_max\")\n-  public static int[] arrayMax(int[] value) {\n-    return new int[] {Arrays.stream(value).max().getAsInt()};\n-  }\n-\n-  /**\n-   * @see Arrays#stream(double[]).min()\n-   * @param value\n-   * @return find maximum value in input array\n-   */\n-  @ScalarFunction(name = \"array_min\")\n-  public static int[] arrayMin(int[] value) {\n-    return new int[] {Arrays.stream(value).min().getAsInt()};\n-  }\n-\n-  /**\n-   * @see Arrays#stream(double[]).sum()\n-   * @param value\n-   * @return calculate sum of all values in input array\n-   */\n-  @ScalarFunction(name = \"array_sum\")\n-  public static int[] arraySum(int[] value) {\n-    return new int[] {Arrays.stream(value).sum()};\n-  }\n-\n-  /**\n-   * @see ArrayUtils#indexOf(double[], double)\n+   * @see ArrayUtils#indexOf(int[], int)\n    * @param value\n    * @param valueToFind\n    * @return return position of value in input array\n    */\n   @ScalarFunction(name = \"array_position\")\n-  public static int[] arrayPosition(int[] value, int valueToFind) {\n-    return new int[] {ArrayUtils.indexOf(value, valueToFind)};\n+  public static int arrayPosition(int[] value, int valueToFind) {\n+    return ArrayUtils.indexOf(value, valueToFind);\n   }\n \n   /**\n-   * @see Arrays#sort(double[])\n+   * @see Arrays#sort(int[])\n    * @param value\n    * @return sort give input number array\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTQzMQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501119431", "bodyText": "if these are only going to work for int[], should these be called array_max_int ?", "author": "npawar", "createdAt": "2020-10-07T15:46:37Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")", "originalCommit": "8f79ff777cfda6f68c329c052529af29cd7cedec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MTE2Mw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501141163", "bodyText": "yeah, we could do that.", "author": "SandishKumarHN", "createdAt": "2020-10-07T16:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "26b77bcd58ac45ad10b8de2d01850db7604e16a7", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\nindex b8b34fd493..18c6ae0020 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n\n@@ -58,48 +58,18 @@ public class ArrayFunctions {\n   }\n \n   /**\n-   * @see Arrays#stream(double[]).max()\n-   * @param value\n-   * @return find minimum value in input array\n-   */\n-  @ScalarFunction(name = \"array_max\")\n-  public static int[] arrayMax(int[] value) {\n-    return new int[] {Arrays.stream(value).max().getAsInt()};\n-  }\n-\n-  /**\n-   * @see Arrays#stream(double[]).min()\n-   * @param value\n-   * @return find maximum value in input array\n-   */\n-  @ScalarFunction(name = \"array_min\")\n-  public static int[] arrayMin(int[] value) {\n-    return new int[] {Arrays.stream(value).min().getAsInt()};\n-  }\n-\n-  /**\n-   * @see Arrays#stream(double[]).sum()\n-   * @param value\n-   * @return calculate sum of all values in input array\n-   */\n-  @ScalarFunction(name = \"array_sum\")\n-  public static int[] arraySum(int[] value) {\n-    return new int[] {Arrays.stream(value).sum()};\n-  }\n-\n-  /**\n-   * @see ArrayUtils#indexOf(double[], double)\n+   * @see ArrayUtils#indexOf(int[], int)\n    * @param value\n    * @param valueToFind\n    * @return return position of value in input array\n    */\n   @ScalarFunction(name = \"array_position\")\n-  public static int[] arrayPosition(int[] value, int valueToFind) {\n-    return new int[] {ArrayUtils.indexOf(value, valueToFind)};\n+  public static int arrayPosition(int[] value, int valueToFind) {\n+    return ArrayUtils.indexOf(value, valueToFind);\n   }\n \n   /**\n-   * @see Arrays#sort(double[])\n+   * @see Arrays#sort(int[])\n    * @param value\n    * @return sort give input number array\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTg4Nw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501129887", "bodyText": "@fx19880617 has already added min, max, sum as regular transform functions: https://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayMaxTransformFunction.java\nDo we need them here again?", "author": "npawar", "createdAt": "2020-10-07T16:00:55Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction(name = \"array_sum\")", "originalCommit": "8f79ff777cfda6f68c329c052529af29cd7cedec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzOTIxOQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501139219", "bodyText": "@npawar yeah, looks like already there, but not in scalar functions. will remove from PR.", "author": "SandishKumarHN", "createdAt": "2020-10-07T16:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "26b77bcd58ac45ad10b8de2d01850db7604e16a7", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\nindex b8b34fd493..18c6ae0020 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java\n\n@@ -58,48 +58,18 @@ public class ArrayFunctions {\n   }\n \n   /**\n-   * @see Arrays#stream(double[]).max()\n-   * @param value\n-   * @return find minimum value in input array\n-   */\n-  @ScalarFunction(name = \"array_max\")\n-  public static int[] arrayMax(int[] value) {\n-    return new int[] {Arrays.stream(value).max().getAsInt()};\n-  }\n-\n-  /**\n-   * @see Arrays#stream(double[]).min()\n-   * @param value\n-   * @return find maximum value in input array\n-   */\n-  @ScalarFunction(name = \"array_min\")\n-  public static int[] arrayMin(int[] value) {\n-    return new int[] {Arrays.stream(value).min().getAsInt()};\n-  }\n-\n-  /**\n-   * @see Arrays#stream(double[]).sum()\n-   * @param value\n-   * @return calculate sum of all values in input array\n-   */\n-  @ScalarFunction(name = \"array_sum\")\n-  public static int[] arraySum(int[] value) {\n-    return new int[] {Arrays.stream(value).sum()};\n-  }\n-\n-  /**\n-   * @see ArrayUtils#indexOf(double[], double)\n+   * @see ArrayUtils#indexOf(int[], int)\n    * @param value\n    * @param valueToFind\n    * @return return position of value in input array\n    */\n   @ScalarFunction(name = \"array_position\")\n-  public static int[] arrayPosition(int[] value, int valueToFind) {\n-    return new int[] {ArrayUtils.indexOf(value, valueToFind)};\n+  public static int arrayPosition(int[] value, int valueToFind) {\n+    return ArrayUtils.indexOf(value, valueToFind);\n   }\n \n   /**\n-   * @see Arrays#sort(double[])\n+   * @see Arrays#sort(int[])\n    * @param value\n    * @return sort give input number array\n    */\n"}}, {"oid": "26b77bcd58ac45ad10b8de2d01850db7604e16a7", "url": "https://github.com/apache/pinot/commit/26b77bcd58ac45ad10b8de2d01850db7604e16a7", "message": "review changes tests to InbuiltFunctionsTest", "committedDate": "2020-10-07T20:27:31Z", "type": "forcePushed"}, {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "url": "https://github.com/apache/pinot/commit/5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "message": "review changes tests to InbuiltFunctionsTest", "committedDate": "2020-10-07T21:19:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzg1OA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502733858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                put(Long[].class, PinotDataType.INTEGER_ARRAY);\n          \n          \n            \n                put(Long[].class, PinotDataType. LONG_ARRAY);", "author": "Jackie-Jiang", "createdAt": "2020-10-10T02:18:11Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -50,12 +59,22 @@ private FunctionUtils() {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);\n     put(Integer.class, PinotDataType.INTEGER);\n     put(Long.class, PinotDataType.LONG);\n     put(Float.class, PinotDataType.FLOAT);\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(Integer[].class, PinotDataType.INTEGER_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(Long[].class, PinotDataType.INTEGER_ARRAY);", "originalCommit": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\nindex a67602d306..1b04ff746d 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n\n@@ -59,7 +55,6 @@ public class FunctionUtils {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n-    put(int.class, PinotDataType.INTEGER);\n     put(Integer.class, PinotDataType.INTEGER);\n     put(Long.class, PinotDataType.LONG);\n     put(Float.class, PinotDataType.FLOAT);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzg5NA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502733894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                put(long[].class, ColumnDataType.FLOAT);\n          \n          \n            \n                put(Long[].class, ColumnDataType.FLOAT);\n          \n          \n            \n                put(long[].class, ColumnDataType.LONG);\n          \n          \n            \n                put(Long[].class, ColumnDataType.LONG);", "author": "Jackie-Jiang", "createdAt": "2020-10-10T02:18:27Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -82,6 +110,15 @@ private FunctionUtils() {\n     put(Double.class, ColumnDataType.DOUBLE);\n     put(String.class, ColumnDataType.STRING);\n     put(byte[].class, ColumnDataType.BYTES);\n+    put(int[].class, ColumnDataType.INT);\n+    put(Integer[].class, ColumnDataType.INT);\n+    put(long[].class, ColumnDataType.FLOAT);\n+    put(Long[].class, ColumnDataType.FLOAT);", "originalCommit": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\nindex a67602d306..1b04ff746d 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n\n@@ -110,15 +105,15 @@ public class FunctionUtils {\n     put(Double.class, ColumnDataType.DOUBLE);\n     put(String.class, ColumnDataType.STRING);\n     put(byte[].class, ColumnDataType.BYTES);\n-    put(int[].class, ColumnDataType.INT);\n-    put(Integer[].class, ColumnDataType.INT);\n-    put(long[].class, ColumnDataType.FLOAT);\n-    put(Long[].class, ColumnDataType.FLOAT);\n-    put(float[].class, ColumnDataType.FLOAT);\n-    put(Float[].class, ColumnDataType.FLOAT);\n-    put(double[].class, ColumnDataType.DOUBLE);\n-    put(Double[].class, ColumnDataType.DOUBLE);\n-    put(String[].class, ColumnDataType.STRING);\n+    put(int[].class, ColumnDataType.INT_ARRAY);\n+    put(Integer[].class, ColumnDataType.INT_ARRAY);\n+    put(long[].class, ColumnDataType.LONG_ARRAY);\n+    put(Long[].class, ColumnDataType.LONG_ARRAY);\n+    put(float[].class, ColumnDataType.FLOAT_ARRAY);\n+    put(Float[].class, ColumnDataType.FLOAT_ARRAY);\n+    put(double[].class, ColumnDataType.DOUBLE_ARRAY);\n+    put(Double[].class, ColumnDataType.DOUBLE_ARRAY);\n+    put(String[].class, ColumnDataType.STRING_ARRAY);\n   }};\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNDAwNg==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502734006", "bodyText": "Remove this one as argument is always an Object", "author": "Jackie-Jiang", "createdAt": "2020-10-10T02:19:43Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -50,12 +59,22 @@ private FunctionUtils() {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);", "originalCommit": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\nindex a67602d306..1b04ff746d 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java\n\n@@ -59,7 +55,6 @@ public class FunctionUtils {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n-    put(int.class, PinotDataType.INTEGER);\n     put(Integer.class, PinotDataType.INTEGER);\n     put(Long.class, PinotDataType.LONG);\n     put(Float.class, PinotDataType.FLOAT);\n"}}, {"oid": "ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "url": "https://github.com/apache/pinot/commit/ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "message": "scalar functions for array", "committedDate": "2020-11-03T01:34:15Z", "type": "forcePushed"}, {"oid": "37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "url": "https://github.com/apache/pinot/commit/37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "message": "scalar functions for array", "committedDate": "2020-11-03T02:29:24Z", "type": "commit"}, {"oid": "37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "url": "https://github.com/apache/pinot/commit/37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "message": "scalar functions for array", "committedDate": "2020-11-03T02:29:24Z", "type": "forcePushed"}]}