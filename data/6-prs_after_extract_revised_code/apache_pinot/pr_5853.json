{"pr_number": 5853, "pr_title": "Add Range Indexing support for raw values", "pr_createdAt": "2020-08-12T14:01:06Z", "pr_url": "https://github.com/apache/pinot/pull/5853", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNDkyMA==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r470414920", "bodyText": "move the switch outside of for loop", "author": "kishoreg", "createdAt": "2020-08-14T05:17:56Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java", "diffHunk": "@@ -140,17 +145,64 @@ private void handleDictionaryBasedColumn(ColumnMetadata columnMetadata)\n     }\n   }\n \n+  private void handleNonDictionaryBasedColumn(ColumnMetadata columnMetadata)\n+          throws IOException {\n+    int numDocs = columnMetadata.getTotalDocs();\n+    try (RangeIndexCreator creator = new RangeIndexCreator(_indexDir, columnMetadata.getFieldSpec(),\n+            FieldSpec.DataType.INT, -1, -1, numDocs, columnMetadata.getTotalNumberOfEntries())) {\n+      try (ForwardIndexReader forwardIndexReader = getForwardIndexReader(columnMetadata, _segmentWriter);\n+           ForwardIndexReaderContext readerContext = forwardIndexReader.createContext()) {\n+        if (columnMetadata.isSingleValue()) {\n+          // Single-value column.\n+          for (int i = 0; i < numDocs; i++) {\n+            switch (columnMetadata.getDataType()) {", "originalCommit": "41f39382f62443abce15925329559ed70e84f9fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTA0Mw==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r473731043", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-08-20T07:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNDkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java\nindex fd3b687720..4f1bce0a28 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java\n\n@@ -145,44 +140,6 @@ public class RangeIndexHandler {\n     }\n   }\n \n-  private void handleNonDictionaryBasedColumn(ColumnMetadata columnMetadata)\n-          throws IOException {\n-    int numDocs = columnMetadata.getTotalDocs();\n-    try (RangeIndexCreator creator = new RangeIndexCreator(_indexDir, columnMetadata.getFieldSpec(),\n-            FieldSpec.DataType.INT, -1, -1, numDocs, columnMetadata.getTotalNumberOfEntries())) {\n-      try (ForwardIndexReader forwardIndexReader = getForwardIndexReader(columnMetadata, _segmentWriter);\n-           ForwardIndexReaderContext readerContext = forwardIndexReader.createContext()) {\n-        if (columnMetadata.isSingleValue()) {\n-          // Single-value column.\n-          for (int i = 0; i < numDocs; i++) {\n-            switch (columnMetadata.getDataType()) {\n-              case INT: {\n-                creator.add(forwardIndexReader.getInt(i, readerContext));\n-                break;\n-              }\n-              case LONG: {\n-                creator.add(forwardIndexReader.getInt(i, readerContext));\n-                break;\n-              }\n-              case FLOAT: {\n-                creator.add(forwardIndexReader.getInt(i, readerContext));\n-                break;\n-              }\n-              case DOUBLE: {\n-                creator.add(forwardIndexReader.getInt(i, readerContext));\n-                break;\n-              }\n-              default: {\n-                throw new RuntimeException(\"Range indexing is not supported\");\n-              }\n-            }\n-          }\n-        }\n-        creator.seal();\n-      }\n-    }\n-  }\n-\n   private ForwardIndexReader<?> getForwardIndexReader(ColumnMetadata columnMetadata,\n       SegmentDirectory.Writer segmentWriter)\n       throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk5OTE1Nw==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r475999157", "bodyText": "(nit) unused import", "author": "Jackie-Jiang", "createdAt": "2020-08-25T00:28:12Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/DictionaryBasedInvertedIndexCreator.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.creator;\n+\n+import java.io.Closeable;", "originalCommit": "21cdcda75149c264a74cd1906272243bf19901ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0OTQ1Mw==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477349453", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-08-26T14:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk5OTE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/DictionaryBasedInvertedIndexCreator.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/DictionaryBasedInvertedIndexCreator.java\nindex 329d4ef06a..6abdaca1ce 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/DictionaryBasedInvertedIndexCreator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/DictionaryBasedInvertedIndexCreator.java\n\n@@ -56,7 +56,7 @@ import java.io.IOException;\n  *\n  * Support for Lucene based inverted index for text\n  */\n-public interface DictionaryBasedInvertedIndexCreator extends InvertedIndexCreator {\n+public interface DictionaryBasedInvertedIndexCreator extends Closeable {\n \n   /**\n    * For single-valued column, adds the dictionary Id for the next document.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMDIxOA==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r476000218", "bodyText": "This should implement both RawValueBasedInvertedIndexCreator and DictionaryBasedInvertedIndexCreator?", "author": "Jackie-Jiang", "createdAt": "2020-08-25T00:29:55Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -65,7 +66,7 @@\n  *   </li>\n  * </ul>\n  */\n-public final class RangeIndexCreator implements InvertedIndexCreator {\n+public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreator {", "originalCommit": "21cdcda75149c264a74cd1906272243bf19901ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTc3OA==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477295778", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-08-26T13:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMDIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\nindex b459060050..1e158f7835 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n\n@@ -66,7 +65,7 @@ import static org.apache.pinot.core.segment.creator.impl.V1Constants.Indexes.BIT\n  *   </li>\n  * </ul>\n  */\n-public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreator {\n+public final class RangeIndexCreator implements DictionaryBasedInvertedIndexCreator {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(RangeIndexCreator.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMDkxNA==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r476000914", "bodyText": "(CRITICAL) This is not correct. Here you should add to _nextValueId instead of _nextDocId", "author": "Jackie-Jiang", "createdAt": "2020-08-25T00:30:59Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -165,26 +166,63 @@ public RangeIndexCreator(File indexDir, FieldSpec fieldSpec, FieldSpec.DataType\n   }\n \n   @Override\n-  public void add(int dictId) {\n-    _numberValueBuffer.put(_nextDocId, dictId);\n-    _docIdBuffer.put(_nextDocId, _nextDocId);\n-    _nextDocId = _nextDocId + 1;\n+  public void add(int value) {\n+    addValueToBuffer(value);\n+    nextDoc();\n   }\n \n   @Override\n-  public void add(int[] dictIds, int length) {\n+  public void add(int[] values, int length) {\n     for (int i = 0; i < length; i++) {\n-      int dictId = dictIds[i];\n-      _numberValueBuffer.put(_nextValueId, dictId);\n-      _docIdBuffer.put(_nextValueId, _nextDocId);\n-      _nextValueId = _nextValueId + 1;\n+      addValueToBuffer(values[i]);\n+      nextDoc();", "originalCommit": "21cdcda75149c264a74cd1906272243bf19901ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTIyMw==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477295223", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-08-26T13:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMDkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\nindex b459060050..1e158f7835 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n\n@@ -166,63 +165,26 @@ public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreato\n   }\n \n   @Override\n-  public void add(int value) {\n-    addValueToBuffer(value);\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(int[] values, int length) {\n-    for (int i = 0; i < length; i++) {\n-      addValueToBuffer(values[i]);\n-      nextDoc();\n-    }\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(long value) {\n-    addValueToBuffer(value);\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(long[] values, int length) {\n-    for (int i = 0; i < length; i++) {\n-      addValueToBuffer(values[i]);\n-      nextDoc();\n-    }\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(float value) {\n-    addValueToBuffer(value);\n-    nextDoc();\n+  public void add(int dictId) {\n+    _numberValueBuffer.put(_nextDocId, dictId);\n+    _docIdBuffer.put(_nextDocId, _nextDocId);\n+    _nextDocId = _nextDocId + 1;\n   }\n \n   @Override\n-  public void add(float[] values, int length) {\n+  public void add(int[] dictIds, int length) {\n     for (int i = 0; i < length; i++) {\n-      addValueToBuffer(values[i]);\n-      nextDoc();\n+      int dictId = dictIds[i];\n+      _numberValueBuffer.put(_nextValueId, dictId);\n+      _docIdBuffer.put(_nextValueId, _nextDocId);\n+      _nextValueId = _nextValueId + 1;\n     }\n-    nextDoc();\n+    _nextDocId = _nextDocId + 1;\n   }\n \n   @Override\n-  public void add(double value) {\n-    addValueToBuffer(value);\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(double[] values, int length) {\n-    for (int i = 0; i < length; i++) {\n-      addValueToBuffer(values[i]);\n-      nextDoc();\n-    }\n-    nextDoc();\n+  public void addDoc(Object document, int docIdCounter) {\n+    throw new IllegalStateException(\"Range index creator does not support Object type currently\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMTU3Nw==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r476001577", "bodyText": "Recommend inline these 2 methods for readability (as the existing code). Current way is not as readable", "author": "Jackie-Jiang", "createdAt": "2020-08-25T00:32:06Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -165,26 +166,63 @@ public RangeIndexCreator(File indexDir, FieldSpec fieldSpec, FieldSpec.DataType\n   }\n \n   @Override\n-  public void add(int dictId) {\n-    _numberValueBuffer.put(_nextDocId, dictId);\n-    _docIdBuffer.put(_nextDocId, _nextDocId);\n-    _nextDocId = _nextDocId + 1;\n+  public void add(int value) {\n+    addValueToBuffer(value);", "originalCommit": "21cdcda75149c264a74cd1906272243bf19901ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTI5NQ==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477295295", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-08-26T13:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMTU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\nindex b459060050..1e158f7835 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n\n@@ -166,63 +165,26 @@ public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreato\n   }\n \n   @Override\n-  public void add(int value) {\n-    addValueToBuffer(value);\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(int[] values, int length) {\n-    for (int i = 0; i < length; i++) {\n-      addValueToBuffer(values[i]);\n-      nextDoc();\n-    }\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(long value) {\n-    addValueToBuffer(value);\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(long[] values, int length) {\n-    for (int i = 0; i < length; i++) {\n-      addValueToBuffer(values[i]);\n-      nextDoc();\n-    }\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(float value) {\n-    addValueToBuffer(value);\n-    nextDoc();\n+  public void add(int dictId) {\n+    _numberValueBuffer.put(_nextDocId, dictId);\n+    _docIdBuffer.put(_nextDocId, _nextDocId);\n+    _nextDocId = _nextDocId + 1;\n   }\n \n   @Override\n-  public void add(float[] values, int length) {\n+  public void add(int[] dictIds, int length) {\n     for (int i = 0; i < length; i++) {\n-      addValueToBuffer(values[i]);\n-      nextDoc();\n+      int dictId = dictIds[i];\n+      _numberValueBuffer.put(_nextValueId, dictId);\n+      _docIdBuffer.put(_nextValueId, _nextDocId);\n+      _nextValueId = _nextValueId + 1;\n     }\n-    nextDoc();\n+    _nextDocId = _nextDocId + 1;\n   }\n \n   @Override\n-  public void add(double value) {\n-    addValueToBuffer(value);\n-    nextDoc();\n-  }\n-\n-  @Override\n-  public void add(double[] values, int length) {\n-    for (int i = 0; i < length; i++) {\n-      addValueToBuffer(values[i]);\n-      nextDoc();\n-    }\n-    nextDoc();\n+  public void addDoc(Object document, int docIdCounter) {\n+    throw new IllegalStateException(\"Range index creator does not support Object type currently\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwNTAzMg==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r476005032", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new RuntimeException(\"Range indexing is not supported for multi value non-dictionary columns\");\n          \n          \n            \n                    throw new RuntimeException(\"Raw index on multi-value column is not supported\");", "author": "Jackie-Jiang", "createdAt": "2020-08-25T00:37:25Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java", "diffHunk": "@@ -140,17 +145,70 @@ private void handleDictionaryBasedColumn(ColumnMetadata columnMetadata)\n     }\n   }\n \n+  private void handleNonDictionaryBasedColumn(ColumnMetadata columnMetadata)\n+          throws IOException {\n+    int numDocs = columnMetadata.getTotalDocs();\n+    try (RangeIndexCreator creator = new RangeIndexCreator(_indexDir, columnMetadata.getFieldSpec(),\n+            columnMetadata.getDataType(), -1, -1, numDocs, columnMetadata.getTotalNumberOfEntries())) {\n+      try (ForwardIndexReader forwardIndexReader = getForwardIndexReader(columnMetadata, _segmentWriter);\n+           ForwardIndexReaderContext readerContext = forwardIndexReader.createContext()) {\n+        if (columnMetadata.isSingleValue()) {\n+          // Single-value column.\n+          switch (columnMetadata.getDataType()) {\n+            case INT: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getInt(i, readerContext));\n+              }\n+              break;\n+            }\n+            case LONG: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getLong(i, readerContext));\n+              }\n+              break;\n+            }\n+            case FLOAT: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getFloat(i, readerContext));\n+              }\n+              break;\n+            }\n+            case DOUBLE: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getDouble(i, readerContext));\n+              }\n+              break;\n+            }\n+            default: {\n+              throw new RuntimeException(\"Range indexing is not supported\");\n+            }\n+          }\n+        }\n+        creator.seal();\n+      }\n+    }\n+  }\n+\n   private ForwardIndexReader<?> getForwardIndexReader(ColumnMetadata columnMetadata,\n       SegmentDirectory.Writer segmentWriter)\n       throws IOException {\n     PinotDataBuffer buffer = segmentWriter.getIndexFor(columnMetadata.getColumnName(), ColumnIndexType.FORWARD_INDEX);\n     int numRows = columnMetadata.getTotalDocs();\n     int numBitsPerValue = columnMetadata.getBitsPerElement();\n     if (columnMetadata.isSingleValue()) {\n-      return new FixedBitSVForwardIndexReader(buffer, numRows, numBitsPerValue);\n+      if (columnMetadata.hasDictionary()) {\n+        return new FixedBitSVForwardIndexReader(buffer, numRows, numBitsPerValue);\n+      } else {\n+        return new FixedByteChunkSVForwardIndexReader(buffer, columnMetadata.getDataType());\n+      }\n     } else {\n-      return new FixedBitMVForwardIndexReader(buffer, numRows, columnMetadata.getTotalNumberOfEntries(),\n-          numBitsPerValue);\n+      if (columnMetadata.hasDictionary()) {\n+        return new FixedBitMVForwardIndexReader(buffer, numRows, columnMetadata.getTotalNumberOfEntries(),\n+                numBitsPerValue);\n+      } else {\n+        throw new RuntimeException(\"Range indexing is not supported for multi value non-dictionary columns\");", "originalCommit": "21cdcda75149c264a74cd1906272243bf19901ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTM1Ng==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477295356", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-08-26T13:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwNTAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java\nindex 2887bd8318..4f1bce0a28 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java\n\n@@ -145,50 +140,6 @@ public class RangeIndexHandler {\n     }\n   }\n \n-  private void handleNonDictionaryBasedColumn(ColumnMetadata columnMetadata)\n-          throws IOException {\n-    int numDocs = columnMetadata.getTotalDocs();\n-    try (RangeIndexCreator creator = new RangeIndexCreator(_indexDir, columnMetadata.getFieldSpec(),\n-            columnMetadata.getDataType(), -1, -1, numDocs, columnMetadata.getTotalNumberOfEntries())) {\n-      try (ForwardIndexReader forwardIndexReader = getForwardIndexReader(columnMetadata, _segmentWriter);\n-           ForwardIndexReaderContext readerContext = forwardIndexReader.createContext()) {\n-        if (columnMetadata.isSingleValue()) {\n-          // Single-value column.\n-          switch (columnMetadata.getDataType()) {\n-            case INT: {\n-              for (int i = 0; i < numDocs; i++) {\n-                creator.add(forwardIndexReader.getInt(i, readerContext));\n-              }\n-              break;\n-            }\n-            case LONG: {\n-              for (int i = 0; i < numDocs; i++) {\n-                creator.add(forwardIndexReader.getLong(i, readerContext));\n-              }\n-              break;\n-            }\n-            case FLOAT: {\n-              for (int i = 0; i < numDocs; i++) {\n-                creator.add(forwardIndexReader.getFloat(i, readerContext));\n-              }\n-              break;\n-            }\n-            case DOUBLE: {\n-              for (int i = 0; i < numDocs; i++) {\n-                creator.add(forwardIndexReader.getDouble(i, readerContext));\n-              }\n-              break;\n-            }\n-            default: {\n-              throw new RuntimeException(\"Range indexing is not supported\");\n-            }\n-          }\n-        }\n-        creator.seal();\n-      }\n-    }\n-  }\n-\n   private ForwardIndexReader<?> getForwardIndexReader(ColumnMetadata columnMetadata,\n       SegmentDirectory.Writer segmentWriter)\n       throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY4NjQ5MQ==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477686491", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      lastRangeId = rangeIndexReader.findRangeId(((RangePredicateEvaluatorFactory.IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());\n          \n          \n            \n                      lastRangeId = rangeIndexReader.findRangeId(((IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());", "author": "Jackie-Jiang", "createdAt": "2020-08-26T23:38:14Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "diffHunk": "@@ -49,9 +55,40 @@ public RangeIndexBasedFilterOperator(OfflineDictionaryBasedRangePredicateEvaluat\n   protected FilterBlock getNextBlock() {\n     RangeIndexReader rangeIndexReader = (RangeIndexReader) _dataSource.getRangeIndex();\n     assert rangeIndexReader != null;\n-    int firstRangeId = rangeIndexReader.findRangeId(_rangePredicateEvaluator.getStartDictId());\n-    // NOTE: End dictionary id is exclusive in OfflineDictionaryBasedRangePredicateEvaluator.\n-    int lastRangeId = rangeIndexReader.findRangeId(_rangePredicateEvaluator.getEndDictId() - 1);\n+\n+    int firstRangeId;\n+    int lastRangeId;\n+    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n+      firstRangeId = rangeIndexReader.findRangeId(((OfflineDictionaryBasedRangePredicateEvaluator) _rangePredicateEvaluator).getStartDictId());\n+      // NOTE: End dictionary id is exclusive in OfflineDictionaryBasedRangePredicateEvaluator.\n+      lastRangeId = rangeIndexReader.findRangeId(((OfflineDictionaryBasedRangePredicateEvaluator) _rangePredicateEvaluator).getEndDictId() - 1);\n+    } else {\n+      switch (_rangePredicateEvaluator.getDataType()) {\n+        case INT: {\n+          firstRangeId = rangeIndexReader.findRangeId(((IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).geLowerBound());\n+          lastRangeId = rangeIndexReader.findRangeId(((RangePredicateEvaluatorFactory.IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());", "originalCommit": "e70814f723368289f1e1e879b3479a8aa624b8b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java b/pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java\nindex 60cbc55628..0297ec0bb3 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java\n\n@@ -55,40 +49,9 @@ public class RangeIndexBasedFilterOperator extends BaseFilterOperator {\n   protected FilterBlock getNextBlock() {\n     RangeIndexReader rangeIndexReader = (RangeIndexReader) _dataSource.getRangeIndex();\n     assert rangeIndexReader != null;\n-\n-    int firstRangeId;\n-    int lastRangeId;\n-    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n-      firstRangeId = rangeIndexReader.findRangeId(((OfflineDictionaryBasedRangePredicateEvaluator) _rangePredicateEvaluator).getStartDictId());\n-      // NOTE: End dictionary id is exclusive in OfflineDictionaryBasedRangePredicateEvaluator.\n-      lastRangeId = rangeIndexReader.findRangeId(((OfflineDictionaryBasedRangePredicateEvaluator) _rangePredicateEvaluator).getEndDictId() - 1);\n-    } else {\n-      switch (_rangePredicateEvaluator.getDataType()) {\n-        case INT: {\n-          firstRangeId = rangeIndexReader.findRangeId(((IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).geLowerBound());\n-          lastRangeId = rangeIndexReader.findRangeId(((RangePredicateEvaluatorFactory.IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());\n-          break;\n-        }\n-        case LONG: {\n-          firstRangeId = rangeIndexReader.findRangeId(((LongRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).geLowerBound());\n-          lastRangeId = rangeIndexReader.findRangeId(((LongRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());\n-          break;\n-        }\n-        case FLOAT: {\n-          firstRangeId = rangeIndexReader.findRangeId(((FloatRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).geLowerBound());\n-          lastRangeId = rangeIndexReader.findRangeId(((FloatRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());\n-          break;\n-        }\n-        case DOUBLE: {\n-          firstRangeId = rangeIndexReader.findRangeId(((DoubleRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).geLowerBound());\n-          lastRangeId = rangeIndexReader.findRangeId(((DoubleRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());\n-          break;\n-        }\n-        default: {\n-          throw new IllegalStateException(\"String and Bytes data type not supported for Range Indexing\");\n-        }\n-      }\n-    }\n+    int firstRangeId = rangeIndexReader.findRangeId(_rangePredicateEvaluator.getStartDictId());\n+    // NOTE: End dictionary id is exclusive in OfflineDictionaryBasedRangePredicateEvaluator.\n+    int lastRangeId = rangeIndexReader.findRangeId(_rangePredicateEvaluator.getEndDictId() - 1);\n \n     // Need to scan the first and last range as they might be partially matched\n     // TODO: Detect fully matched first and last range\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5MzU2MA==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477693560", "bodyText": "Suggest not changing the variable name. We'll probably use the same map for raw index based inverted index in the future once supported", "author": "Jackie-Jiang", "createdAt": "2020-08-26T23:43:04Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -82,8 +82,8 @@\n   private Map<String, ColumnIndexCreationInfo> indexCreationInfoMap;\n   private Map<String, SegmentDictionaryCreator> _dictionaryCreatorMap = new HashMap<>();\n   private Map<String, ForwardIndexCreator> _forwardIndexCreatorMap = new HashMap<>();\n-  private Map<String, InvertedIndexCreator> _invertedIndexCreatorMap = new HashMap<>();\n-  private Map<String, InvertedIndexCreator> _textIndexCreatorMap = new HashMap<>();\n+  private Map<String, DictionaryBasedInvertedIndexCreator> _dictionaryBasedInvertedIndexCreatorMap = new HashMap<>();", "originalCommit": "e70814f723368289f1e1e879b3479a8aa624b8b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f26ef449a94b54287fd5845e00327c3ca68950c", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java\nindex bbd9742c4d..4489dc82ea 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java\n\n@@ -82,7 +82,7 @@ public class SegmentColumnarIndexCreator implements SegmentCreator {\n   private Map<String, ColumnIndexCreationInfo> indexCreationInfoMap;\n   private Map<String, SegmentDictionaryCreator> _dictionaryCreatorMap = new HashMap<>();\n   private Map<String, ForwardIndexCreator> _forwardIndexCreatorMap = new HashMap<>();\n-  private Map<String, DictionaryBasedInvertedIndexCreator> _dictionaryBasedInvertedIndexCreatorMap = new HashMap<>();\n+  private Map<String, DictionaryBasedInvertedIndexCreator> _invertedIndexCreatorMap = new HashMap<>();\n   private Map<String, DictionaryBasedInvertedIndexCreator> _textIndexCreatorMap = new HashMap<>();\n   private Map<String, NullValueVectorCreator> _nullValueVectorCreatorMap = new HashMap<>();\n   private String segmentName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5NDM2Ng==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477694366", "bodyText": "Revise the javadoc?", "author": "Jackie-Jiang", "createdAt": "2020-08-26T23:43:34Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -45,7 +46,7 @@\n \n \n /**\n- * Implementation of {@link InvertedIndexCreator} that uses off-heap memory.\n+ * Implementation of {@link DictionaryBasedInvertedIndexCreator} that uses off-heap memory.", "originalCommit": "e70814f723368289f1e1e879b3479a8aa624b8b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f26ef449a94b54287fd5845e00327c3ca68950c", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\nindex 65d76b4890..84f06192ef 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n\n@@ -46,28 +46,22 @@ import static org.apache.pinot.core.segment.creator.impl.V1Constants.Indexes.BIT\n \n \n /**\n- * Implementation of {@link DictionaryBasedInvertedIndexCreator} that uses off-heap memory.\n+ * Range index creator that uses off-heap memory.\n  * <p>We use 2 passes to create the range index.\n  * <ul>\n- *\n  *   <li>\n- *     A\n+ *     In the first pass (adding values phase), when add() method is called, store the raw values into the value buffer\n+ *     (for multi-valued column we flatten the values). We also store the corresponding docId in docIdBuffer which will\n+ *     be sorted in the next phase based on the value in valueBuffer.\n  *   </li>\n  *   <li>\n- *     In the first pass (adding values phase), when add() method is called, store the raw values into the\n- *     value buffer (for multi-valued column we flatten the values).\n- *     We also store the corresponding docId in docIdBuffer which will be sorted in the next phase based on the value in valueBuffer.\n- *\n- *   </li>\n- *   <li>\n- *     In the second pass (processing values phase), when seal() method is called, we sort the docIdBuffer based on the value in valueBuffer.\n- *     We then iterate over the sorted docIdBuffer and create ranges such that each range comprises of _numDocsPerRange.\n- *     While\n+ *     In the second pass (processing values phase), when seal() method is called, we sort the docIdBuffer based on the\n+ *     value in valueBuffer. We then iterate over the sorted docIdBuffer and create ranges such that each range\n+ *     comprises of _numDocsPerRange.\n  *   </li>\n  * </ul>\n  */\n-public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreator,DictionaryBasedInvertedIndexCreator {\n-\n+public final class RangeIndexCreator implements DictionaryBasedInvertedIndexCreator, RawValueBasedInvertedIndexCreator {\n   private static final Logger LOGGER = LoggerFactory.getLogger(RangeIndexCreator.class);\n \n   //This will dump the content of temp buffers and ranges\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5NDkyNw==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477694927", "bodyText": "(nit) reformat", "author": "Jackie-Jiang", "createdAt": "2020-08-26T23:43:57Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -65,7 +66,7 @@\n  *   </li>\n  * </ul>\n  */\n-public final class RangeIndexCreator implements InvertedIndexCreator {\n+public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreator,DictionaryBasedInvertedIndexCreator {", "originalCommit": "e70814f723368289f1e1e879b3479a8aa624b8b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\nindex 65d76b4890..1e158f7835 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java\n\n@@ -66,7 +65,7 @@ import static org.apache.pinot.core.segment.creator.impl.V1Constants.Indexes.BIT\n  *   </li>\n  * </ul>\n  */\n-public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreator,DictionaryBasedInvertedIndexCreator {\n+public final class RangeIndexCreator implements DictionaryBasedInvertedIndexCreator {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(RangeIndexCreator.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5OTE4NQ==", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477699185", "bodyText": "Please reformat this file, the indentation is not correct", "author": "Jackie-Jiang", "createdAt": "2020-08-26T23:46:49Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/index/creator/RangeIndexCreatorTest.java", "diffHunk": "@@ -18,16 +18,18 @@\n  */\n package org.apache.pinot.core.segment.index.creator;\n \n-import com.google.common.base.Preconditions;\n+", "originalCommit": "e70814f723368289f1e1e879b3479a8aa624b8b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4759e42a53c58e009b1077e12466098ea34f06a7", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/segment/index/creator/RangeIndexCreatorTest.java b/pinot-core/src/test/java/org/apache/pinot/core/segment/index/creator/RangeIndexCreatorTest.java\nindex 470e75dbd6..0a4c171095 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/segment/index/creator/RangeIndexCreatorTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/segment/index/creator/RangeIndexCreatorTest.java\n\n@@ -18,18 +18,16 @@\n  */\n package org.apache.pinot.core.segment.index.creator;\n \n-\n+import com.google.common.base.Preconditions;\n import java.io.DataInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.Random;\n-\n import org.apache.pinot.core.segment.creator.impl.inv.RangeIndexCreator;\n import org.apache.pinot.core.segment.index.readers.RangeIndexReader;\n import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n-import org.apache.pinot.spi.data.DimensionFieldSpec;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.MetricFieldSpec;\n import org.roaringbitmap.buffer.ImmutableRoaringBitmap;\n"}}, {"oid": "4759e42a53c58e009b1077e12466098ea34f06a7", "url": "https://github.com/apache/pinot/commit/4759e42a53c58e009b1077e12466098ea34f06a7", "message": "renaming index creator to dictionary based index creator", "committedDate": "2020-08-29T05:21:08Z", "type": "commit"}, {"oid": "4e2d55e1bc6ec743531a17504ee0dc468e2f9dab", "url": "https://github.com/apache/pinot/commit/4e2d55e1bc6ec743531a17504ee0dc468e2f9dab", "message": "adding raw value based inverted index creator interface", "committedDate": "2020-08-29T05:21:08Z", "type": "commit"}, {"oid": "a71c2387d2e9c8ffd478a71f07529455aa344682", "url": "https://github.com/apache/pinot/commit/a71c2387d2e9c8ffd478a71f07529455aa344682", "message": "adding support for range indexing for non-dictionary columns", "committedDate": "2020-08-29T05:21:08Z", "type": "commit"}, {"oid": "0bc132a86f848532adea4b6de8b617e47896a4d9", "url": "https://github.com/apache/pinot/commit/0bc132a86f848532adea4b6de8b617e47896a4d9", "message": "adding license", "committedDate": "2020-08-29T05:21:08Z", "type": "commit"}, {"oid": "7dfb6f947c736cb45a366e813fdc29e305e5a18f", "url": "https://github.com/apache/pinot/commit/7dfb6f947c736cb45a366e813fdc29e305e5a18f", "message": "add test cases for range creator", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "012944b0b11932625d36027cdfb157458578c5c2", "url": "https://github.com/apache/pinot/commit/012944b0b11932625d36027cdfb157458578c5c2", "message": "add tests for range indexer", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "8bcef3019e0de41dd3905fdc47d1ba70dca25840", "url": "https://github.com/apache/pinot/commit/8bcef3019e0de41dd3905fdc47d1ba70dca25840", "message": "add license header", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "f58994d1593a9d176900bdd757e7176293c894bd", "url": "https://github.com/apache/pinot/commit/f58994d1593a9d176900bdd757e7176293c894bd", "message": "change exception log message", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "da54dd3b5aa79f5f809c5164760cc01738293269", "url": "https://github.com/apache/pinot/commit/da54dd3b5aa79f5f809c5164760cc01738293269", "message": "Fix readability of the code", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "699b9e5b2315e53ed1d8ffbfc2799c3fd60662be", "url": "https://github.com/apache/pinot/commit/699b9e5b2315e53ed1d8ffbfc2799c3fd60662be", "message": "Add tests for MV columns", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "5eca2b6a06c8a4f6f7e16beeabaa536eab39da8c", "url": "https://github.com/apache/pinot/commit/5eca2b6a06c8a4f6f7e16beeabaa536eab39da8c", "message": "Add raw value support for range index reader", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "75242dea6b8db4b6f93ec48841d0c4a54f459caa", "url": "https://github.com/apache/pinot/commit/75242dea6b8db4b6f93ec48841d0c4a54f459caa", "message": "fix license header in RangeIndexCreatorTest", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "abe292036ac0f0e7f772d9fe48c212ffb65f6a60", "url": "https://github.com/apache/pinot/commit/abe292036ac0f0e7f772d9fe48c212ffb65f6a60", "message": "Remove unused imports", "committedDate": "2020-08-29T05:21:09Z", "type": "commit"}, {"oid": "8f26ef449a94b54287fd5845e00327c3ca68950c", "url": "https://github.com/apache/pinot/commit/8f26ef449a94b54287fd5845e00327c3ca68950c", "message": "Reformat", "committedDate": "2020-08-29T06:52:52Z", "type": "commit"}, {"oid": "8f26ef449a94b54287fd5845e00327c3ca68950c", "url": "https://github.com/apache/pinot/commit/8f26ef449a94b54287fd5845e00327c3ca68950c", "message": "Reformat", "committedDate": "2020-08-29T06:52:52Z", "type": "forcePushed"}]}