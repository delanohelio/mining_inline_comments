{"pr_number": 5869, "pr_title": "Roundup decimal points when compressing AnomalyTimelinesView", "pr_createdAt": "2020-08-15T00:15:58Z", "pr_url": "https://github.com/apache/pinot/pull/5869", "timeline": [{"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820", "url": "https://github.com/apache/pinot/commit/fca1b2be3cf41631770da73a5ab1a2b3a165b820", "message": "Roundup decimal points when compressing AnomlayTimeLinesView", "committedDate": "2020-08-15T00:07:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MzAxMQ==", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471743011", "bodyText": "I think that the roundup logic is better added into compress(DEFAULT_MAX_LENGTH), because people can call either these two methods to compress and roundup should run in both cases.", "author": "vincentchenjl", "createdAt": "2020-08-17T20:00:13Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java", "diffHunk": "@@ -182,9 +183,33 @@ public static CondensedAnomalyTimelinesView fromAnomalyTimelinesView(AnomalyTime\n    * @return a compressed CondensedAnomalyTimelinesView\n    */\n   public CondensedAnomalyTimelinesView compress() {\n+    if (timeStamps.size() == 0) {\n+      return this;\n+    }\n+    try {\n+      if (this.toJsonString().length() > DEFAULT_MAX_LENGTH) {\n+        // First try rounding up\n+        roundUp();", "originalCommit": "fca1b2be3cf41631770da73a5ab1a2b3a165b820", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4NzE5Ng==", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471787196", "bodyText": "Good suggestion. That also avoids some code duplications. At first I wanted to avoid putting it in compress(DEFAULT_MAX_LENGTH) since that one is called recursively. But now I think it is actually more robust to have this roundup every time we do compression. modified.", "author": "Ruoyingw", "createdAt": "2020-08-17T21:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MzAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ef02bd53e8dba4d905fc77ca700c472c8c1d13b", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java\nindex 5c8316a753..dd514db040 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java\n\n@@ -183,26 +185,18 @@ public class CondensedAnomalyTimelinesView {\n    * @return a compressed CondensedAnomalyTimelinesView\n    */\n   public CondensedAnomalyTimelinesView compress() {\n-    if (timeStamps.size() == 0) {\n-      return this;\n-    }\n-    try {\n-      if (this.toJsonString().length() > DEFAULT_MAX_LENGTH) {\n-        // First try rounding up\n-        roundUp();\n-      }\n-    } catch (JsonProcessingException e) {\n-      throw new IllegalStateException(\"Unable to parse view to json string\", e);\n-    }\n     return compress(DEFAULT_MAX_LENGTH);\n   }\n \n+  /**\n+   * Round up timelines view to save space in storage.\n+   * */\n   private void roundUp() {\n     List<Double> roundedObservedValues = new ArrayList<>();\n     List<Double> roundedExpectedValues = new ArrayList<>();\n     for (int i = 0; i < timeStamps.size(); i++) {\n-      Double roundedObservedValue = Math.round(currentValues.get(i) * (Math.pow(10, DEFAULT_DECIMAL_DIGITS))) / (Math.pow(10, DEFAULT_DECIMAL_DIGITS));\n-      Double roundedExpectedValue = Math.round(baselineValues.get(i) * (Math.pow(10, DEFAULT_DECIMAL_DIGITS))) / (Math.pow(10, DEFAULT_DECIMAL_DIGITS));\n+      Double roundedObservedValue = getRoundedDouble(currentValues.get(i));\n+      Double roundedExpectedValue = getRoundedDouble(baselineValues.get(i));\n       roundedObservedValues.add(roundedObservedValue);\n       roundedExpectedValues.add(roundedExpectedValue);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NDY0NA==", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471774644", "bodyText": "Could we add another check to make sure that the JSON exported also has 3 decimal points? For example Assert.assertEquals(OBJECT_MAPPER.writeValueAsString(compressedView.getBaselineValues().get(i)), \"2.833\")", "author": "vincentchenjl", "createdAt": "2020-08-17T21:05:13Z", "path": "thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java", "diffHunk": "@@ -73,35 +74,46 @@ public void testFromJsonString() throws Exception{\n     }\n   }\n \n+  /** Compression Test case 1: anomaly view could satisfy requirement after rounding up the decimals.*/\n+  @Test\n+  public void testCompressWithRoundUp() throws Exception {\n+    int testNum = 500;\n+    CondensedAnomalyTimelinesView condensedView = CondensedAnomalyTimelinesView.fromAnomalyTimelinesView(getTestData(testNum));\n+    Assert.assertTrue(condensedView.toJsonString().length() > CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n+    CondensedAnomalyTimelinesView compressedView = condensedView.compress();\n+    Assert.assertTrue(compressedView.toJsonString().length() < CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n+    Assert.assertEquals(testNum, compressedView.timeStamps.size());\n+  }\n+\n+  /** Compression Test case 2:  The anomaly view is still too large after rounding up, and needed to be further compressed */\n   @Test\n   public void testCompress() throws Exception {\n-    int testNum = 1500;\n+    int testNum = 600;\n     long minBucketMillis = CondensedAnomalyTimelinesView.DEFAULT_MIN_BUCKET_UNIT;\n     CondensedAnomalyTimelinesView condensedView = CondensedAnomalyTimelinesView.fromAnomalyTimelinesView(getTestData(testNum));\n     Assert.assertTrue(condensedView.toJsonString().length() > CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n-\n     CondensedAnomalyTimelinesView compressedView = condensedView.compress();\n     Assert.assertTrue(compressedView.toJsonString().length() < CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n-    Assert.assertEquals(compressedView.bucketMillis.longValue(), 240l);\n+    Assert.assertEquals(300, compressedView.timeStamps.size());\n+    Assert.assertEquals(compressedView.bucketMillis.longValue(), 10);\n     DateTime date = new DateTime(2018, 1, 1, 0, 0, 0);\n     for (int i = 0; i < compressedView.getTimeStamps().size(); i++) {\n       Assert.assertEquals(compressedView.getTimeStamps().get(i).longValue(),\n           (date.getMillis() - condensedView.timestampOffset)/minBucketMillis);\n-      Assert.assertEquals(compressedView.getCurrentValues().get(i), i * 4 + 1.5, 0.000001);\n-      Assert.assertEquals(compressedView.getBaselineValues().get(i), i * 4 + 1.6, 0.000001);\n-      date = date.plusHours(4);\n+      Assert.assertEquals(compressedView.getCurrentValues().get(i), i * 2 + 0.5, 0.000001);\n+      Assert.assertEquals(compressedView.getBaselineValues().get(i), i * 2 + 0.833, 0.000001);", "originalCommit": "fca1b2be3cf41631770da73a5ab1a2b3a165b820", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4NzM3OA==", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471787378", "bodyText": "right I should do that.", "author": "Ruoyingw", "createdAt": "2020-08-17T21:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NDY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "f69e63cbcf578acbff813e2666433de59d04f125", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java b/thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java\nindex 6d9f3b83ee..2d1bd663bd 100644\n--- a/thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java\n+++ b/thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java\n\n@@ -67,10 +67,10 @@ public class TestCondensedAnomalyTimelinesView {\n     for (int i = 0; i < testNum; i++) {\n       TimeBucket timeBucket = anomalyTimelinesView.getTimeBuckets().get(i);\n       Assert.assertEquals(timeBucket.getCurrentStart(), date.getMillis());\n-      Assert.assertEquals(timeBucket.getBaselineEnd(), date.plusHours(1).getMillis());\n+      Assert.assertEquals(timeBucket.getBaselineEnd(), date.plusMinutes(5).getMillis());\n       Assert.assertEquals(condensedView.getCurrentValues().get(i), i + 0d);\n-      Assert.assertEquals(condensedView.getBaselineValues().get(i), i + 0.1);\n-      date = date.plusHours(1);\n+      Assert.assertEquals(condensedView.getBaselineValues().get(i), i + 0.333333333333);\n+      date = date.plusMinutes(5);\n     }\n   }\n \n"}}, {"oid": "f69e63cbcf578acbff813e2666433de59d04f125", "url": "https://github.com/apache/pinot/commit/f69e63cbcf578acbff813e2666433de59d04f125", "message": "Roundup decimal points when compressing AnomlayTimeLinesView", "committedDate": "2020-08-17T21:11:21Z", "type": "commit"}, {"oid": "96ca06ffeeb16da90f16a3b46dca3875b12ca3d8", "url": "https://github.com/apache/pinot/commit/96ca06ffeeb16da90f16a3b46dca3875b12ca3d8", "message": "Merge remote-tracking branch 'ruowang/roundup' into roundup", "committedDate": "2020-08-17T21:15:16Z", "type": "commit"}, {"oid": "599ba2af00b1dd7162cbae2b2c106de08b98e5e9", "url": "https://github.com/apache/pinot/commit/599ba2af00b1dd7162cbae2b2c106de08b98e5e9", "message": "Merge remote-tracking branch 'origin/master' into roundup", "committedDate": "2020-08-17T21:21:26Z", "type": "commit"}, {"oid": "1ef02bd53e8dba4d905fc77ca700c472c8c1d13b", "url": "https://github.com/apache/pinot/commit/1ef02bd53e8dba4d905fc77ca700c472c8c1d13b", "message": "move getRoundDouble() to utils and add more tests", "committedDate": "2020-08-17T23:37:23Z", "type": "commit"}]}