{"pr_number": 5073, "pr_title": "Adding PinotClusterConfig APIs in controller and corresponding Pinot Admin SubCommand: OperateClusterConfig", "pr_createdAt": "2020-02-16T10:32:13Z", "pr_url": "https://github.com/apache/pinot/pull/5073", "timeline": [{"oid": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec", "url": "https://github.com/apache/pinot/commit/183d810494f0ac87f1ac14f85bb8e04dca3e99ec", "message": "Adding Pinot Cluster Config API in controller and corresponding PinotAdmin Commands", "committedDate": "2020-02-19T23:18:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODM3MA==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r382318370", "bodyText": "why is it called getTableInstances?", "author": "kishoreg", "createdAt": "2020-02-20T23:34:07Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.CLUSTER_TAG)\n+@Path(\"/\")\n+public class PinotClusterConfigs {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotClusterConfigs.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  @GET\n+  @Path(\"/cluster/configs\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"List cluster configurations\", notes = \"List cluster level configurations\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getTableInstances() {", "originalCommit": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5e002a95005ed401257a0620981c0f069614122", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\nindex b553f0ac3f..914caaf192 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n\n@@ -22,17 +22,21 @@ import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODQzNg==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r382318436", "bodyText": "method name does not match the operation", "author": "kishoreg", "createdAt": "2020-02-20T23:34:23Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.CLUSTER_TAG)\n+@Path(\"/\")\n+public class PinotClusterConfigs {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotClusterConfigs.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  @GET\n+  @Path(\"/cluster/configs\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"List cluster configurations\", notes = \"List cluster level configurations\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getTableInstances() {\n+    HelixAdmin helixAdmin = pinotHelixResourceManager.getHelixAdmin();\n+    HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+        .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+    List<String> configKeys = helixAdmin.getConfigKeys(configScope);\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    Map<String, String> configs = helixAdmin.getConfig(configScope, configKeys);\n+    for (String key : configs.keySet()) {\n+      ret.put(key, configs.get(key));\n+    }\n+    return ret.toString();\n+  }\n+\n+  @POST\n+  @Path(\"/cluster/configs\")\n+  @ApiOperation(value = \"Update cluster configuration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Server error updating configuration\")})\n+  public SuccessResponse updateIndexingConfig(String body) {", "originalCommit": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5e002a95005ed401257a0620981c0f069614122", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\nindex b553f0ac3f..914caaf192 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n\n@@ -22,17 +22,21 @@ import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxOTUzOA==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r382319538", "bodyText": "not sure if we should add support for api's that are available via controller rest api's. It will be hard to match all the apis", "author": "kishoreg", "createdAt": "2020-02-20T23:36:48Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/UpdateClusterConfigCommand.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.util.Collections;\n+import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.pinot.tools.Command;\n+import org.kohsuke.args4j.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class UpdateClusterConfigCommand extends AbstractBaseAdminCommand implements Command {", "originalCommit": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNDY5NQ==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r382324695", "bodyText": "I feel it will be useful until we have a more user friendly ui", "author": "xiangfu0", "createdAt": "2020-02-20T23:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxOTUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "6d6a3e69d57584ce70373c77e8efaaee25eb1661", "chunk": "diff --git a/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/UpdateClusterConfigCommand.java b/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/UpdateClusterConfigCommand.java\ndeleted file mode 100644\nindex 08d0dcd6ec..0000000000\n--- a/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/UpdateClusterConfigCommand.java\n+++ /dev/null\n\n@@ -1,107 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pinot.tools.admin.command;\n-\n-import java.util.Collections;\n-import org.apache.pinot.common.utils.NetUtil;\n-import org.apache.pinot.spi.utils.JsonUtils;\n-import org.apache.pinot.tools.Command;\n-import org.kohsuke.args4j.Option;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class UpdateClusterConfigCommand extends AbstractBaseAdminCommand implements Command {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(UpdateClusterConfigCommand.class.getName());\n-\n-  @Option(name = \"-controllerHost\", required = false, metaVar = \"<String>\", usage = \"host name for controller.\")\n-  private String _controllerHost;\n-\n-  @Option(name = \"-controllerPort\", required = false, metaVar = \"<int>\", usage = \"http port for controller.\")\n-  private String _controllerPort = DEFAULT_CONTROLLER_PORT;\n-\n-  @Option(name = \"-config\", required = true, metaVar = \"<string>\", usage = \"Cluster config to update.\")\n-  private String _config;\n-\n-  @Option(name = \"-help\", required = false, help = true, aliases = {\"-h\", \"--h\", \"--help\"}, usage = \"Print this message.\")\n-  private boolean _help = false;\n-\n-  @Override\n-  public boolean getHelp() {\n-    return _help;\n-  }\n-\n-  @Override\n-  public String getName() {\n-    return \"UpdateClusterConfig\";\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return (\"UpdateClusterConfig -controllerHost \" + _controllerHost + \" -controllerPort \" + _controllerPort\n-        + \" -config \" + _config);\n-  }\n-\n-  @Override\n-  public void cleanup() {\n-\n-  }\n-\n-  @Override\n-  public String description() {\n-    return \"Update Pinot Cluster Config. Sample usage: `pinot-admin.sh UpdateClusterConfig -config pinot.broker.enable.query.limit.override=true`\";\n-  }\n-\n-  public UpdateClusterConfigCommand setControllerHost(String host) {\n-    _controllerHost = host;\n-    return this;\n-  }\n-\n-  public UpdateClusterConfigCommand setControllerPort(String port) {\n-    _controllerPort = port;\n-    return this;\n-  }\n-\n-  public UpdateClusterConfigCommand setConfig(String config) {\n-    _config = config;\n-    return this;\n-  }\n-\n-  public String run()\n-      throws Exception {\n-    if (_controllerHost == null) {\n-      _controllerHost = NetUtil.getHostAddress();\n-    }\n-    LOGGER.info(\"Executing command: \" + toString());\n-    String[] splits = _config.split(\"=\");\n-    if (splits.length != 2) {\n-      throw new UnsupportedOperationException(\"Bad config: \" + _config + \". Please follow the pattern of [Config Key]=[Config Value]\");\n-    }\n-    String request = JsonUtils.objectToString(Collections.singletonMap(splits[0], splits[1]));\n-    return sendPostRequest(\"http://\" + _controllerHost + \":\" + _controllerPort + \"/cluster/configs\", request);\n-  }\n-\n-  @Override\n-  public boolean execute()\n-      throws Exception {\n-    String result = run();\n-    LOGGER.info(\"Result: \" + result);\n-    return true;\n-  }\n-}\n"}}, {"oid": "e5e002a95005ed401257a0620981c0f069614122", "url": "https://github.com/apache/pinot/commit/e5e002a95005ed401257a0620981c0f069614122", "message": "Adding delete cluster config cmd", "committedDate": "2020-02-22T02:47:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODAwNA==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384818004", "bodyText": "Any reason for using the errStr variable, as opposed to in-lining the message?", "author": "mayankshriv", "createdAt": "2020-02-26T22:55:56Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.CLUSTER_TAG)\n+@Path(\"/\")\n+public class PinotClusterConfigs {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotClusterConfigs.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  @GET\n+  @Path(\"/cluster/configs\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"List cluster configurations\", notes = \"List cluster level configurations\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String listClusterConfigs() {\n+    HelixAdmin helixAdmin = pinotHelixResourceManager.getHelixAdmin();\n+    HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+        .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+    List<String> configKeys = helixAdmin.getConfigKeys(configScope);\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    Map<String, String> configs = helixAdmin.getConfig(configScope, configKeys);\n+    for (String key : configs.keySet()) {\n+      ret.put(key, configs.get(key));\n+    }\n+    return ret.toString();\n+  }\n+\n+  @POST\n+  @Path(\"/cluster/configs\")\n+  @ApiOperation(value = \"Update cluster configuration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Server error updating configuration\")})\n+  public SuccessResponse updateClusterConfig(String body) {\n+    try {\n+      JsonNode jsonNode = JsonUtils.stringToJsonNode(body);\n+      HelixAdmin admin = pinotHelixResourceManager.getHelixAdmin();\n+      HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+          .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+      Iterator<String> fieldNamesIterator = jsonNode.fieldNames();\n+      while (fieldNamesIterator.hasNext()) {\n+        String key = fieldNamesIterator.next();\n+        String value = jsonNode.get(key).textValue();\n+        admin.setConfig(configScope, Collections.singletonMap(key, value));\n+      }\n+      return new SuccessResponse(\"Updated cluster config.\");\n+    } catch (IOException e) {\n+      String errStr = \"Error converting request to cluster config.\";", "originalCommit": "e5e002a95005ed401257a0620981c0f069614122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MzI5OA==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384853298", "bodyText": "Copy pasted template from other file, updated it.", "author": "xiangfu0", "createdAt": "2020-02-27T00:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "65b47e8c464e0341137a4b09f3f332cea667cee4", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\nindex 914caaf192..b553f0ac3f 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n\n@@ -22,21 +22,17 @@ import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n-import io.swagger.annotations.ApiParam;\n import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import java.io.IOException;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import javax.inject.Inject;\n-import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODk3OQ==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384818979", "bodyText": "Should we allow DELETE?", "author": "mayankshriv", "createdAt": "2020-02-26T22:58:15Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.CLUSTER_TAG)\n+@Path(\"/\")\n+public class PinotClusterConfigs {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotClusterConfigs.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  @GET\n+  @Path(\"/cluster/configs\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"List cluster configurations\", notes = \"List cluster level configurations\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String listClusterConfigs() {\n+    HelixAdmin helixAdmin = pinotHelixResourceManager.getHelixAdmin();\n+    HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+        .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+    List<String> configKeys = helixAdmin.getConfigKeys(configScope);\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    Map<String, String> configs = helixAdmin.getConfig(configScope, configKeys);\n+    for (String key : configs.keySet()) {\n+      ret.put(key, configs.get(key));\n+    }\n+    return ret.toString();\n+  }\n+\n+  @POST\n+  @Path(\"/cluster/configs\")\n+  @ApiOperation(value = \"Update cluster configuration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Server error updating configuration\")})\n+  public SuccessResponse updateClusterConfig(String body) {\n+    try {\n+      JsonNode jsonNode = JsonUtils.stringToJsonNode(body);\n+      HelixAdmin admin = pinotHelixResourceManager.getHelixAdmin();\n+      HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+          .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+      Iterator<String> fieldNamesIterator = jsonNode.fieldNames();\n+      while (fieldNamesIterator.hasNext()) {\n+        String key = fieldNamesIterator.next();\n+        String value = jsonNode.get(key).textValue();\n+        admin.setConfig(configScope, Collections.singletonMap(key, value));\n+      }\n+      return new SuccessResponse(\"Updated cluster config.\");\n+    } catch (IOException e) {\n+      String errStr = \"Error converting request to cluster config.\";\n+      throw new ControllerApplicationException(LOGGER, errStr, Response.Status.BAD_REQUEST, e);\n+    } catch (Exception e) {\n+      String errStr = \"Failed to update cluster config.\";\n+      throw new ControllerApplicationException(LOGGER, errStr, Response.Status.INTERNAL_SERVER_ERROR, e);\n+    }\n+  }\n+\n+  @DELETE", "originalCommit": "e5e002a95005ed401257a0620981c0f069614122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1Mzc5Ng==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384853796", "bodyText": "I think it's useful just need to use with caution.", "author": "xiangfu0", "createdAt": "2020-02-27T00:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "65b47e8c464e0341137a4b09f3f332cea667cee4", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\nindex 914caaf192..b553f0ac3f 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java\n\n@@ -22,21 +22,17 @@ import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n-import io.swagger.annotations.ApiParam;\n import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import java.io.IOException;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import javax.inject.Inject;\n-import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxOTQ1MQ==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384819451", "bodyText": "Should we add one command with action = GET/UPDATE/DELETE, as opposed to three new commands?", "author": "mayankshriv", "createdAt": "2020-02-26T22:59:29Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/DeleteClusterConfigCommand.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.tools.Command;\n+import org.kohsuke.args4j.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DeleteClusterConfigCommand extends AbstractBaseAdminCommand implements Command {", "originalCommit": "e5e002a95005ed401257a0620981c0f069614122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1Mzg3NA==", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384853874", "bodyText": "updated with one command.", "author": "xiangfu0", "createdAt": "2020-02-27T00:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxOTQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "65b47e8c464e0341137a4b09f3f332cea667cee4", "chunk": "diff --git a/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/DeleteClusterConfigCommand.java b/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/DeleteClusterConfigCommand.java\ndeleted file mode 100644\nindex 3e7ca510b1..0000000000\n--- a/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/DeleteClusterConfigCommand.java\n+++ /dev/null\n\n@@ -1,105 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pinot.tools.admin.command;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.pinot.common.utils.NetUtil;\n-import org.apache.pinot.tools.Command;\n-import org.kohsuke.args4j.Option;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class DeleteClusterConfigCommand extends AbstractBaseAdminCommand implements Command {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(DeleteClusterConfigCommand.class.getName());\n-\n-  @Option(name = \"-controllerHost\", required = false, metaVar = \"<String>\", usage = \"host name for controller.\")\n-  private String _controllerHost;\n-\n-  @Option(name = \"-controllerPort\", required = false, metaVar = \"<int>\", usage = \"http port for controller.\")\n-  private String _controllerPort = DEFAULT_CONTROLLER_PORT;\n-\n-  @Option(name = \"-config\", required = true, metaVar = \"<string>\", usage = \"Cluster config to delete.\")\n-  private String _config;\n-\n-  @Option(name = \"-help\", required = false, help = true, aliases = {\"-h\", \"--h\", \"--help\"}, usage = \"Print this message.\")\n-  private boolean _help = false;\n-\n-  @Override\n-  public boolean getHelp() {\n-    return _help;\n-  }\n-\n-  @Override\n-  public String getName() {\n-    return \"DeleteClusterConfig\";\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return (\"UpdateClusterConfig -controllerHost \" + _controllerHost + \" -controllerPort \" + _controllerPort\n-        + \" -config \" + _config);\n-  }\n-\n-  @Override\n-  public void cleanup() {\n-\n-  }\n-\n-  @Override\n-  public String description() {\n-    return \"Delete Pinot Cluster Config. Sample usage: `pinot-admin.sh DeleteClusterConfig -config pinot.broker.enable.query.limit.override`\";\n-  }\n-\n-  public DeleteClusterConfigCommand setControllerHost(String host) {\n-    _controllerHost = host;\n-    return this;\n-  }\n-\n-  public DeleteClusterConfigCommand setControllerPort(String port) {\n-    _controllerPort = port;\n-    return this;\n-  }\n-\n-  public DeleteClusterConfigCommand setConfig(String config) {\n-    _config = config;\n-    return this;\n-  }\n-\n-  public String run()\n-      throws Exception {\n-    if (_controllerHost == null) {\n-      _controllerHost = NetUtil.getHostAddress();\n-    }\n-    LOGGER.info(\"Executing command: \" + toString());\n-    if (StringUtils.isEmpty(_config)) {\n-      throw new UnsupportedOperationException(\"Empty config: \" + _config);\n-    }\n-    return sendDeleteRequest(\n-        String.format(\"http://%s:%s/cluster/configs/%s\", _controllerHost, _controllerPort, _config), null);\n-  }\n-\n-  @Override\n-  public boolean execute()\n-      throws Exception {\n-    String result = run();\n-    LOGGER.info(\"Result: \" + result);\n-    return true;\n-  }\n-}\n"}}, {"oid": "65b47e8c464e0341137a4b09f3f332cea667cee4", "url": "https://github.com/apache/pinot/commit/65b47e8c464e0341137a4b09f3f332cea667cee4", "message": "Adding Pinot Cluster Config API in controller and corresponding PinotAdmin Commands", "committedDate": "2020-02-27T00:42:26Z", "type": "commit"}, {"oid": "e54f33dcf1d794874b61f740e97ad99bab96f433", "url": "https://github.com/apache/pinot/commit/e54f33dcf1d794874b61f740e97ad99bab96f433", "message": "update method names", "committedDate": "2020-02-27T00:42:26Z", "type": "commit"}, {"oid": "213af14808c7a9bbec43658c965bc9251cade0da", "url": "https://github.com/apache/pinot/commit/213af14808c7a9bbec43658c965bc9251cade0da", "message": "Adding delete cluster config cmd", "committedDate": "2020-02-27T00:42:26Z", "type": "commit"}, {"oid": "6d6a3e69d57584ce70373c77e8efaaee25eb1661", "url": "https://github.com/apache/pinot/commit/6d6a3e69d57584ce70373c77e8efaaee25eb1661", "message": "Address comments", "committedDate": "2020-02-27T00:42:26Z", "type": "forcePushed"}, {"oid": "fc5b785c53a3db33c11d20c9d793ed3c465380af", "url": "https://github.com/apache/pinot/commit/fc5b785c53a3db33c11d20c9d793ed3c465380af", "message": "Address comments", "committedDate": "2020-02-27T19:24:31Z", "type": "forcePushed"}, {"oid": "b3374fccb49552c3732c340f9303cb6816c3a292", "url": "https://github.com/apache/pinot/commit/b3374fccb49552c3732c340f9303cb6816c3a292", "message": "Address comments", "committedDate": "2020-02-27T19:38:16Z", "type": "forcePushed"}, {"oid": "cd37ee157106f6705d7b371fbfaa1590ac79aa14", "url": "https://github.com/apache/pinot/commit/cd37ee157106f6705d7b371fbfaa1590ac79aa14", "message": "Address comments", "committedDate": "2020-02-27T19:57:21Z", "type": "forcePushed"}, {"oid": "4dba4208e12e68d2f201e219f3023921842a2db0", "url": "https://github.com/apache/pinot/commit/4dba4208e12e68d2f201e219f3023921842a2db0", "message": "Address comments", "committedDate": "2020-02-27T20:13:30Z", "type": "commit"}, {"oid": "4dba4208e12e68d2f201e219f3023921842a2db0", "url": "https://github.com/apache/pinot/commit/4dba4208e12e68d2f201e219f3023921842a2db0", "message": "Address comments", "committedDate": "2020-02-27T20:13:30Z", "type": "forcePushed"}]}