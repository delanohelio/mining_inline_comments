{"pr_number": 6056, "pr_title": "Add FilterOptimizer which supports optimizing query filter from both BrokerRequest and PinotQuery", "pr_createdAt": "2020-09-24T06:11:25Z", "pr_url": "https://github.com/apache/pinot/pull/6056", "timeline": [{"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7", "url": "https://github.com/apache/pinot/commit/af64c0cfa407261a55260a7a7af7aed11cf549b7", "message": "Add FilterOptimizer which supports optimizing both PQL and SQL query filter", "committedDate": "2020-09-24T06:13:18Z", "type": "commit"}, {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7", "url": "https://github.com/apache/pinot/commit/af64c0cfa407261a55260a7a7af7aed11cf549b7", "message": "Add FilterOptimizer which supports optimizing both PQL and SQL query filter", "committedDate": "2020-09-24T06:13:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwOTAxOQ==", "url": "https://github.com/apache/pinot/pull/6056#discussion_r496309019", "bodyText": "Why PinotQuery based signature for SQL? That is the end-state after getting rid of BrokerRequest right?\nBut for now, the optimizer will get BrokerRequest for both PQL (through PQL compiler) and for SQL (through calcite compiler -> PinotQuery -> converter -> BrokerRequest). The javadoc seems misleading", "author": "siddharthteotia", "createdAt": "2020-09-29T00:35:26Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/optimizer/QueryOptimizer.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.optimizer;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.FilterQuery;\n+import org.apache.pinot.common.request.PinotQuery;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.common.utils.request.RequestUtils;\n+import org.apache.pinot.core.query.optimizer.filter.FilterOptimizer;\n+import org.apache.pinot.core.query.optimizer.filter.FlattenAndOrFilterOptimizer;\n+import org.apache.pinot.core.query.optimizer.filter.MergeEqInFilterOptimizer;\n+import org.apache.pinot.core.query.optimizer.filter.MergeRangeFilterOptimizer;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+public class QueryOptimizer {\n+  private static final List<FilterOptimizer> FILTER_OPTIMIZERS = Arrays\n+      .asList(new FlattenAndOrFilterOptimizer(), new MergeEqInFilterOptimizer(), new MergeRangeFilterOptimizer());\n+\n+  /**\n+   * Optimizes the given PQL query.\n+   */\n+  public void optimize(BrokerRequest brokerRequest, @Nullable Schema schema) {\n+    FilterQuery filterQuery = brokerRequest.getFilterQuery();\n+    if (filterQuery != null) {\n+      FilterQueryTree filterQueryTree =\n+          RequestUtils.buildFilterQuery(filterQuery.getId(), brokerRequest.getFilterSubQueryMap().getFilterQueryMap());\n+      for (FilterOptimizer filterOptimizer : FILTER_OPTIMIZERS) {\n+        filterQueryTree = filterOptimizer.optimize(filterQueryTree, schema);\n+      }\n+      RequestUtils.generateFilterFromTree(filterQueryTree, brokerRequest);\n+    }\n+  }\n+\n+  /**\n+   * Optimizes the given SQL query.\n+   */\n+  public void optimize(PinotQuery pinotQuery, @Nullable Schema schema) {", "originalCommit": "af64c0cfa407261a55260a7a7af7aed11cf549b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyODQzNg==", "url": "https://github.com/apache/pinot/pull/6056#discussion_r496328436", "bodyText": "The purpose for this PR is to decouple the SQL and PQL query logic, and we only use the PinotQuery for SQL query, and only use the BrokerRequest for PQL query.\nTo optimize a SQL query, we should only call optimize with PinotQuery, but not with BrokerRequest.", "author": "Jackie-Jiang", "createdAt": "2020-09-29T01:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwOTAxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDMwMw==", "url": "https://github.com/apache/pinot/pull/6056#discussion_r496310303", "bodyText": "Can we enhance the existing one instead of deleting it? I believe everything is same except for removing flatten depth restriction and optimize interface for FilterExpression", "author": "siddharthteotia", "createdAt": "2020-09-29T00:40:31Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/optimizer/filter/FlattenAndOrFilterOptimizer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.optimizer.filter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.Function;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.pql.parsers.pql2.ast.FilterKind;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * The {@code FlattenAndOrFilterOptimizer} flattens the nested AND/OR filters. For example, AND(a, AND(b, c)) can\n+ * be flattened to AND(a, b, c).\n+ */\n+public class FlattenAndOrFilterOptimizer implements FilterOptimizer {", "originalCommit": "af64c0cfa407261a55260a7a7af7aed11cf549b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzMzg1OA==", "url": "https://github.com/apache/pinot/pull/6056#discussion_r496333858", "bodyText": "The method signature also changed (new interface introduced, FilterQueryOptimizerRequest no longer needed). IMO, trying to enhance the existing one will make it very hard to review (will also probably end up with the same code).\nAnother benefit of adding new code instead of enhancing the existing one is to break the change into multiple smaller PRs for easier review. The first one only adds the new implementation and the tests, and the next one wire it in.", "author": "Jackie-Jiang", "createdAt": "2020-09-29T01:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDMwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDQ2NQ==", "url": "https://github.com/apache/pinot/pull/6056#discussion_r496310465", "bodyText": "Same as before. We should try to enhance the same code.", "author": "siddharthteotia", "createdAt": "2020-09-29T00:41:07Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/optimizer/filter/MergeEqInFilterOptimizer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.optimizer.filter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.Function;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.common.utils.request.RequestUtils;\n+import org.apache.pinot.pql.parsers.pql2.ast.FilterKind;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * The {@code MergeEqualInFilterOptimizer} merges EQ and IN predicates on the same column joined by OR, and performs the", "originalCommit": "af64c0cfa407261a55260a7a7af7aed11cf549b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}