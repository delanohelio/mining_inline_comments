{"pr_number": 6172, "pr_title": "Adding a new Server API for computing average off heap memory consumed", "pr_createdAt": "2020-10-21T22:34:29Z", "pr_url": "https://github.com/apache/pinot/pull/6172", "timeline": [{"oid": "7d52fa163eebe6701014a14f904732d1da354e1a", "url": "https://github.com/apache/pinot/commit/7d52fa163eebe6701014a14f904732d1da354e1a", "message": "Adding a new Server API for computing average off heap memory consumed", "committedDate": "2020-10-21T22:31:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjA4Nw==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r509806087", "bodyText": "Does it make sense to add it to MmapDebugResource?", "author": "mcvsubbu", "createdAt": "2020-10-22T00:12:23Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TableSizeResource.java", "diffHunk": "@@ -119,4 +122,33 @@ public String getTableSizeOld(\n       throws WebApplicationException {\n     return this.getTableSize(tableName, detailed);\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/tables/{tableName}/avgMemoryConsumedRealtime\")", "originalCommit": "7d52fa163eebe6701014a14f904732d1da354e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNTk1MQ==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510435951", "bodyText": "I don't have a strong preference. I put it here since this is at the table level whereas MmapDebugResource seems to be at the Server level. I'm fine either ways.", "author": "icefury71", "createdAt": "2020-10-22T20:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2NzA3Ng==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510467076", "bodyText": "If this is for debugging it should go into MmapDebugResource. If it is for building (say) a monitoring system, then it should be where you have put it.  On the other hand, for a monitoring system, you probably want to get the current memory used, for consuming/completed etc. segments, for one or all tables. Does that make sense?\nAlso, you mentioned that it will be useful for subsequent provisioning? I don't understand that part. If we are provisioning for the same table, then yes, it will be useful, but the table is already provisioned. If we are provisioning for another table that looks and feels like the same table (i.e. data characteristics are very similar or same), then it will be useful as well. Even in these cases, the provisioning story will be different depending on ingestion rate of the new table.\nBut for any other table with completely different characteristics, this data will be useless.", "author": "mcvsubbu", "createdAt": "2020-10-22T21:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3NDk1Nw==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510474957", "bodyText": "It is meant more for a continuous monitoring system.\nGood point about current memory: It probably makes more sense to get the latest size of the consuming segment for that table. Lemme add that as an additional endpoint.", "author": "icefury71", "createdAt": "2020-10-22T21:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3ODM3OQ==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510478379", "bodyText": "In that case, do the existing metrics help? I am sure you already gave it a thought, but I am curious to know what is lacking.", "author": "mcvsubbu", "createdAt": "2020-10-22T21:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/TableSizeResource.java b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/TableSizeResource.java\nindex 2bf24dba66..5828a74429 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/TableSizeResource.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/TableSizeResource.java\n\n@@ -122,33 +119,4 @@ public class TableSizeResource {\n       throws WebApplicationException {\n     return this.getTableSize(tableName, detailed);\n   }\n-\n-  @GET\n-  @Produces(MediaType.APPLICATION_JSON)\n-  @Path(\"/tables/{tableName}/avgMemoryConsumedRealtime\")\n-  @ApiOperation(value = \"Show average off heap memory consumed by mutable segments\", notes = \"Averages off heap memory consumed by consuming segments of realtime table\")\n-  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\"), @ApiResponse(code = 404, message = \"Table not found\")})\n-  public String getTableSize(\n-      @ApiParam(value = \"Table Name with type\", required = true) @PathParam(\"tableName\") String tableName)\n-      throws WebApplicationException {\n-    double avgMemoryConsumed = 0;\n-    TableType tableType = TableNameBuilder.getTableTypeFromTableName(tableName);\n-    if (tableType != TableType.REALTIME) {\n-      throw new WebApplicationException(\"This api cannot be used with non real-time table: \" + tableName,\n-          Response.Status.BAD_REQUEST);\n-    }\n-\n-    InstanceDataManager instanceDataManager = serverInstance.getInstanceDataManager();\n-    if (instanceDataManager == null) {\n-      throw new WebApplicationException(\"Invalid server initialization\", Response.Status.INTERNAL_SERVER_ERROR);\n-    }\n-    RealtimeTableDataManager realtimeTableDataManager =\n-        (RealtimeTableDataManager) instanceDataManager.getTableDataManager(tableName);\n-    if (realtimeTableDataManager == null) {\n-      throw new WebApplicationException(\"Table: \" + tableName + \" is not found\", Response.Status.NOT_FOUND);\n-    }\n-\n-    avgMemoryConsumed = realtimeTableDataManager.getStatsHistory().getAvgMemoryConsumed();\n-    return ResourceUtils.convertToJsonString(avgMemoryConsumed);\n-  }\n }\n"}}, {"oid": "cc7f05c941cf61efc0a37875f08c581544f36d93", "url": "https://github.com/apache/pinot/commit/cc7f05c941cf61efc0a37875f08c581544f36d93", "message": " - Changing from average to latest segment consumed memory\n - Moving API from tablesize to mmapdebug resource", "committedDate": "2020-10-22T22:52:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MTEwNg==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510551106", "bodyText": "Seems like this main method is for some testing during the development, and was accidentally merged. Let's remove it", "author": "Jackie-Jiang", "createdAt": "2020-10-23T01:51:53Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java", "diffHunk": "@@ -385,7 +395,7 @@ public static void main(String[] args)\n       throws Exception {\n     RealtimeSegmentStatsHistory history = RealtimeSegmentStatsHistory.deserialzeFrom(new File(\"/tmp/stats.ser\"));\n     System.out.println(history.toString());\n-    for (int i = 0; i < history.getNumntriesToScan(); i++) {\n+    for (int i = 0; i < history.getNumEntriesToScan(); i++) {", "originalCommit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwOTc1Ng==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r511009756", "bodyText": "+1", "author": "mayankshriv", "createdAt": "2020-10-23T16:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MTEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java b/pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java\nindex b08bd9510c..db750acfce 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java\n\n@@ -390,14 +390,4 @@ public class RealtimeSegmentStatsHistory implements Serializable {\n     }\n     return getCursor();\n   }\n-\n-  public static void main(String[] args)\n-      throws Exception {\n-    RealtimeSegmentStatsHistory history = RealtimeSegmentStatsHistory.deserialzeFrom(new File(\"/tmp/stats.ser\"));\n-    System.out.println(history.toString());\n-    for (int i = 0; i < history.getNumEntriesToScan(); i++) {\n-      SegmentStats segmentStats = history.getSegmentStatsAt(i);\n-      System.out.println(segmentStats.toString());\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MTE4MA==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510551180", "bodyText": "(nit) reformat", "author": "Jackie-Jiang", "createdAt": "2020-10-23T01:52:15Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java", "diffHunk": "@@ -250,6 +251,29 @@ public void testVersion1()\n     Assert.assertEquals(segmentStats.getNumSeconds(), 700);\n   }\n \n+  @Test\n+  public void testLatestConsumedMemory()\n+      throws IOException, ClassNotFoundException {\n+    final String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    File serializedFile = new File(tmpDir, STATS_FILE_NAME);\n+    serializedFile.deleteOnExit();\n+    FileUtils.deleteQuietly(serializedFile);\n+    long[] memoryValues = {100, 100, 200, 400, 450, 600};\n+\n+    RealtimeSegmentStatsHistory history = RealtimeSegmentStatsHistory.deserialzeFrom(serializedFile);\n+    Assert.assertEquals(history.getLatestSegmentMemoryConsumed(), 0);\n+    RealtimeSegmentStatsHistory.SegmentStats segmentStats = null;\n+\n+    for (int i=0;i< memoryValues.length; i++) {", "originalCommit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java b/pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java\nindex 15c3946940..a3dcb5680f 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java\n\n@@ -261,16 +261,16 @@ public class RealtimeSegmentStatsHistoryTest {\n     long[] memoryValues = {100, 100, 200, 400, 450, 600};\n \n     RealtimeSegmentStatsHistory history = RealtimeSegmentStatsHistory.deserialzeFrom(serializedFile);\n-    Assert.assertEquals(history.getLatestSegmentMemoryConsumed(), 0);\n+    Assert.assertEquals(history.getLatestSegmentMemoryConsumed(), -1);\n     RealtimeSegmentStatsHistory.SegmentStats segmentStats = null;\n \n-    for (int i=0;i< memoryValues.length; i++) {\n+    for (int i = 0; i < memoryValues.length; i++) {\n       segmentStats = new RealtimeSegmentStatsHistory.SegmentStats();\n       segmentStats.setMemUsedBytes(memoryValues[i]);\n       history.addSegmentStats(segmentStats);\n     }\n \n-    long expectedMemUsed = memoryValues[memoryValues.length-1];\n+    long expectedMemUsed = memoryValues[memoryValues.length - 1];\n     Assert.assertEquals(history.getLatestSegmentMemoryConsumed(), expectedMemUsed);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MjM2Nw==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510552367", "bodyText": "Return -1 to indicate unavailable?", "author": "Jackie-Jiang", "createdAt": "2020-10-23T01:57:04Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java", "diffHunk": "@@ -341,6 +341,16 @@ public synchronized int getEstimatedRowsToIndex() {\n     return (numRowsIndexed > 0) ? (int) (numRowsIndexed / numEntriesToScan) : DEFAULT_ROWS_TO_INDEX;\n   }\n \n+  public synchronized long getLatestSegmentMemoryConsumed() {\n+    if (isEmpty()) {\n+      return 0;", "originalCommit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java b/pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java\nindex b08bd9510c..db750acfce 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistory.java\n\n@@ -343,7 +343,7 @@ public class RealtimeSegmentStatsHistory implements Serializable {\n \n   public synchronized long getLatestSegmentMemoryConsumed() {\n     if (isEmpty()) {\n-      return 0;\n+      return -1;\n     }\n     // Get the last updated index\n     int latestSegmentIndex = (_cursor + _arraySize - 1) % _arraySize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MzAyMA==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510553020", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ServerInstance serverInstance;\n          \n          \n            \n              private ServerInstance _serverInstance;", "author": "Jackie-Jiang", "createdAt": "2020-10-23T01:59:52Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java", "diffHunk": "@@ -37,6 +48,9 @@\n @Path(\"debug\")\n public class MmapDebugResource {\n \n+  @Inject\n+  ServerInstance serverInstance;", "originalCommit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\nindex cbd54f05af..72df278cef 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\n\n@@ -49,7 +50,7 @@ import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n public class MmapDebugResource {\n \n   @Inject\n-  ServerInstance serverInstance;\n+  private ServerInstance _serverInstance;\n \n   @GET\n   @Path(\"memory/offheap\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NDE3MA==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510554170", "bodyText": "Recommend \"memory/offheap/table/{tableName}\"", "author": "Jackie-Jiang", "createdAt": "2020-10-23T02:04:55Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java", "diffHunk": "@@ -45,4 +59,33 @@\n   public List<String> getOffHeapSizes() {\n     return PinotDataBuffer.getBufferInfo();\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/tables/{tableName}/memoryConsumedRealtime\")", "originalCommit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\nindex cbd54f05af..72df278cef 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\n\n@@ -62,20 +63,19 @@ public class MmapDebugResource {\n \n   @GET\n   @Produces(MediaType.APPLICATION_JSON)\n-  @Path(\"/tables/{tableName}/memoryConsumedRealtime\")\n+  @Path(\"/memory/offheap/table/{tableName}\")\n   @ApiOperation(value = \"Show off heap memory consumed by latest mutable segment\", notes = \"Returns off heap memory consumed by latest consuming segment of realtime table\")\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\"), @ApiResponse(code = 404, message = \"Table not found\")})\n   public String getTableSize(\n       @ApiParam(value = \"Table Name with type\", required = true) @PathParam(\"tableName\") String tableName)\n       throws WebApplicationException {\n-    double memoryConsumed = 0;\n     TableType tableType = TableNameBuilder.getTableTypeFromTableName(tableName);\n     if (tableType != TableType.REALTIME) {\n       throw new WebApplicationException(\"This api cannot be used with non real-time table: \" + tableName,\n           Response.Status.BAD_REQUEST);\n     }\n \n-    InstanceDataManager instanceDataManager = serverInstance.getInstanceDataManager();\n+    InstanceDataManager instanceDataManager = _serverInstance.getInstanceDataManager();\n     if (instanceDataManager == null) {\n       throw new WebApplicationException(\"Invalid server initialization\", Response.Status.INTERNAL_SERVER_ERROR);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NDUyOQ==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510554529", "bodyText": "Remove line 71 and declare the variable here. Also, the return value should be long instead of double", "author": "Jackie-Jiang", "createdAt": "2020-10-23T02:06:21Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java", "diffHunk": "@@ -45,4 +59,33 @@\n   public List<String> getOffHeapSizes() {\n     return PinotDataBuffer.getBufferInfo();\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/tables/{tableName}/memoryConsumedRealtime\")\n+  @ApiOperation(value = \"Show off heap memory consumed by latest mutable segment\", notes = \"Returns off heap memory consumed by latest consuming segment of realtime table\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\"), @ApiResponse(code = 404, message = \"Table not found\")})\n+  public String getTableSize(\n+      @ApiParam(value = \"Table Name with type\", required = true) @PathParam(\"tableName\") String tableName)\n+      throws WebApplicationException {\n+    double memoryConsumed = 0;\n+    TableType tableType = TableNameBuilder.getTableTypeFromTableName(tableName);\n+    if (tableType != TableType.REALTIME) {\n+      throw new WebApplicationException(\"This api cannot be used with non real-time table: \" + tableName,\n+          Response.Status.BAD_REQUEST);\n+    }\n+\n+    InstanceDataManager instanceDataManager = serverInstance.getInstanceDataManager();\n+    if (instanceDataManager == null) {\n+      throw new WebApplicationException(\"Invalid server initialization\", Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+    RealtimeTableDataManager realtimeTableDataManager =\n+        (RealtimeTableDataManager) instanceDataManager.getTableDataManager(tableName);\n+    if (realtimeTableDataManager == null) {\n+      throw new WebApplicationException(\"Table: \" + tableName + \" is not found\", Response.Status.NOT_FOUND);\n+    }\n+\n+    memoryConsumed = realtimeTableDataManager.getStatsHistory().getLatestSegmentMemoryConsumed();", "originalCommit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\nindex cbd54f05af..72df278cef 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\n\n@@ -62,20 +63,19 @@ public class MmapDebugResource {\n \n   @GET\n   @Produces(MediaType.APPLICATION_JSON)\n-  @Path(\"/tables/{tableName}/memoryConsumedRealtime\")\n+  @Path(\"/memory/offheap/table/{tableName}\")\n   @ApiOperation(value = \"Show off heap memory consumed by latest mutable segment\", notes = \"Returns off heap memory consumed by latest consuming segment of realtime table\")\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\"), @ApiResponse(code = 404, message = \"Table not found\")})\n   public String getTableSize(\n       @ApiParam(value = \"Table Name with type\", required = true) @PathParam(\"tableName\") String tableName)\n       throws WebApplicationException {\n-    double memoryConsumed = 0;\n     TableType tableType = TableNameBuilder.getTableTypeFromTableName(tableName);\n     if (tableType != TableType.REALTIME) {\n       throw new WebApplicationException(\"This api cannot be used with non real-time table: \" + tableName,\n           Response.Status.BAD_REQUEST);\n     }\n \n-    InstanceDataManager instanceDataManager = serverInstance.getInstanceDataManager();\n+    InstanceDataManager instanceDataManager = _serverInstance.getInstanceDataManager();\n     if (instanceDataManager == null) {\n       throw new WebApplicationException(\"Invalid server initialization\", Response.Status.INTERNAL_SERVER_ERROR);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NTc1MA==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510555750", "bodyText": "This will return a string instead of a json (123 -> \"123\").\nWe should create a json to wrap the value.\nE.g. return ResourceUtils.convertToJsonString(Collections.singletonMap(\"offheapMemoryConsumed\", memoryConsumed));", "author": "Jackie-Jiang", "createdAt": "2020-10-23T02:11:43Z", "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java", "diffHunk": "@@ -45,4 +59,33 @@\n   public List<String> getOffHeapSizes() {\n     return PinotDataBuffer.getBufferInfo();\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/tables/{tableName}/memoryConsumedRealtime\")\n+  @ApiOperation(value = \"Show off heap memory consumed by latest mutable segment\", notes = \"Returns off heap memory consumed by latest consuming segment of realtime table\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\"), @ApiResponse(code = 404, message = \"Table not found\")})\n+  public String getTableSize(\n+      @ApiParam(value = \"Table Name with type\", required = true) @PathParam(\"tableName\") String tableName)\n+      throws WebApplicationException {\n+    double memoryConsumed = 0;\n+    TableType tableType = TableNameBuilder.getTableTypeFromTableName(tableName);\n+    if (tableType != TableType.REALTIME) {\n+      throw new WebApplicationException(\"This api cannot be used with non real-time table: \" + tableName,\n+          Response.Status.BAD_REQUEST);\n+    }\n+\n+    InstanceDataManager instanceDataManager = serverInstance.getInstanceDataManager();\n+    if (instanceDataManager == null) {\n+      throw new WebApplicationException(\"Invalid server initialization\", Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+    RealtimeTableDataManager realtimeTableDataManager =\n+        (RealtimeTableDataManager) instanceDataManager.getTableDataManager(tableName);\n+    if (realtimeTableDataManager == null) {\n+      throw new WebApplicationException(\"Table: \" + tableName + \" is not found\", Response.Status.NOT_FOUND);\n+    }\n+\n+    memoryConsumed = realtimeTableDataManager.getStatsHistory().getLatestSegmentMemoryConsumed();\n+    return ResourceUtils.convertToJsonString(memoryConsumed);", "originalCommit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "chunk": "diff --git a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\nindex cbd54f05af..72df278cef 100644\n--- a/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\n+++ b/pinot-server/src/main/java/org/apache/pinot/server/api/resources/MmapDebugResource.java\n\n@@ -62,20 +63,19 @@ public class MmapDebugResource {\n \n   @GET\n   @Produces(MediaType.APPLICATION_JSON)\n-  @Path(\"/tables/{tableName}/memoryConsumedRealtime\")\n+  @Path(\"/memory/offheap/table/{tableName}\")\n   @ApiOperation(value = \"Show off heap memory consumed by latest mutable segment\", notes = \"Returns off heap memory consumed by latest consuming segment of realtime table\")\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\"), @ApiResponse(code = 404, message = \"Table not found\")})\n   public String getTableSize(\n       @ApiParam(value = \"Table Name with type\", required = true) @PathParam(\"tableName\") String tableName)\n       throws WebApplicationException {\n-    double memoryConsumed = 0;\n     TableType tableType = TableNameBuilder.getTableTypeFromTableName(tableName);\n     if (tableType != TableType.REALTIME) {\n       throw new WebApplicationException(\"This api cannot be used with non real-time table: \" + tableName,\n           Response.Status.BAD_REQUEST);\n     }\n \n-    InstanceDataManager instanceDataManager = serverInstance.getInstanceDataManager();\n+    InstanceDataManager instanceDataManager = _serverInstance.getInstanceDataManager();\n     if (instanceDataManager == null) {\n       throw new WebApplicationException(\"Invalid server initialization\", Response.Status.INTERNAL_SERVER_ERROR);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NTgyOQ==", "url": "https://github.com/apache/pinot/pull/6172#discussion_r510555829", "bodyText": "(nit) reformat", "author": "Jackie-Jiang", "createdAt": "2020-10-23T02:12:05Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java", "diffHunk": "@@ -250,6 +251,29 @@ public void testVersion1()\n     Assert.assertEquals(segmentStats.getNumSeconds(), 700);\n   }\n \n+  @Test\n+  public void testLatestConsumedMemory()\n+      throws IOException, ClassNotFoundException {\n+    final String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    File serializedFile = new File(tmpDir, STATS_FILE_NAME);\n+    serializedFile.deleteOnExit();\n+    FileUtils.deleteQuietly(serializedFile);\n+    long[] memoryValues = {100, 100, 200, 400, 450, 600};\n+\n+    RealtimeSegmentStatsHistory history = RealtimeSegmentStatsHistory.deserialzeFrom(serializedFile);\n+    Assert.assertEquals(history.getLatestSegmentMemoryConsumed(), 0);\n+    RealtimeSegmentStatsHistory.SegmentStats segmentStats = null;\n+\n+    for (int i=0;i< memoryValues.length; i++) {\n+      segmentStats = new RealtimeSegmentStatsHistory.SegmentStats();\n+      segmentStats.setMemUsedBytes(memoryValues[i]);\n+      history.addSegmentStats(segmentStats);\n+    }\n+\n+    long expectedMemUsed = memoryValues[memoryValues.length-1];", "originalCommit": "cc7f05c941cf61efc0a37875f08c581544f36d93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java b/pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java\nindex 15c3946940..a3dcb5680f 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/realtime/impl/RealtimeSegmentStatsHistoryTest.java\n\n@@ -261,16 +261,16 @@ public class RealtimeSegmentStatsHistoryTest {\n     long[] memoryValues = {100, 100, 200, 400, 450, 600};\n \n     RealtimeSegmentStatsHistory history = RealtimeSegmentStatsHistory.deserialzeFrom(serializedFile);\n-    Assert.assertEquals(history.getLatestSegmentMemoryConsumed(), 0);\n+    Assert.assertEquals(history.getLatestSegmentMemoryConsumed(), -1);\n     RealtimeSegmentStatsHistory.SegmentStats segmentStats = null;\n \n-    for (int i=0;i< memoryValues.length; i++) {\n+    for (int i = 0; i < memoryValues.length; i++) {\n       segmentStats = new RealtimeSegmentStatsHistory.SegmentStats();\n       segmentStats.setMemUsedBytes(memoryValues[i]);\n       history.addSegmentStats(segmentStats);\n     }\n \n-    long expectedMemUsed = memoryValues[memoryValues.length-1];\n+    long expectedMemUsed = memoryValues[memoryValues.length - 1];\n     Assert.assertEquals(history.getLatestSegmentMemoryConsumed(), expectedMemUsed);\n   }\n \n"}}, {"oid": "1ee26f88c7633a9ad12ad316ca275aab233b67b8", "url": "https://github.com/apache/pinot/commit/1ee26f88c7633a9ad12ad316ca275aab233b67b8", "message": "Addressing review comments", "committedDate": "2020-10-23T16:59:04Z", "type": "commit"}]}