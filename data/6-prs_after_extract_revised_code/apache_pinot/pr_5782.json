{"pr_number": 5782, "pr_title": "Enhancing the segment replacement api", "pr_createdAt": "2020-07-31T05:37:33Z", "pr_url": "https://github.com/apache/pinot/pull/5782", "timeline": [{"oid": "777a7a22537de46af1a8ca1685aacbdbb0887232", "url": "https://github.com/apache/pinot/commit/777a7a22537de46af1a8ca1685aacbdbb0887232", "message": "Enhancing the segment replacement api\n\n1. Chekcing ONLINE state from the EV when updating\n   the segment lineage.\n2. Trigger the routing table rebuild to brokers when\n   updating the segment lineage.", "committedDate": "2020-07-31T05:30:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMzUxOA==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r463913518", "bodyText": "Directly throw exception instead of returning null here to avoid NPE on the caller side:\nPreconditions.checkState(externalView != null, ...)", "author": "Jackie-Jiang", "createdAt": "2020-08-01T03:07:52Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -2366,6 +2404,23 @@ public void endReplaceSegments(String tableNameWithType, String segmentLineageEn\n         tableNameWithType, segmentLineageEntryId);\n   }\n \n+  private Set<String> getOnlineSegmentsFromExternalView(String tableNameWithType) {\n+    ExternalView externalView = getTableExternalView(tableNameWithType);\n+    if (externalView != null) {\n+      Set<String> partitionSet = externalView.getPartitionSet();\n+      Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(partitionSet.size()));\n+      for (String partition : partitionSet) {\n+        Map<String, String> instanceStateMap = externalView.getStateMap(partition);\n+        if (instanceStateMap.containsValue(SegmentStateModel.ONLINE) || instanceStateMap\n+            .containsValue(SegmentStateModel.CONSUMING)) {\n+          onlineSegments.add(partition);\n+        }\n+      }\n+      return onlineSegments;\n+    } else {\n+      return null;", "originalCommit": "777a7a22537de46af1a8ca1685aacbdbb0887232", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00293b80f3df7b09afc27fd38ee85be5ea3a3089", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\nindex 0be14bfeda..51170db859 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\n\n@@ -2404,23 +2405,37 @@ public class PinotHelixResourceManager {\n         tableNameWithType, segmentLineageEntryId);\n   }\n \n+  private void waitForSegmentsBecomeOnline(String tableNameWithType, Set<String> segmentsToCheck)\n+      throws InterruptedException, TimeoutException {\n+    long endTimeMs = System.currentTimeMillis() + EXTERNAL_VIEW_ONLINE_SEGMENTS_MAX_WAIT_MS;\n+    do {\n+      Set<String> onlineSegments = getOnlineSegmentsFromExternalView(tableNameWithType);\n+      if (onlineSegments.containsAll(segmentsToCheck)) {\n+        return;\n+      }\n+      Thread.sleep(EXTERNAL_VIEW_CHECK_INTERVAL_MS);\n+    } while (System.currentTimeMillis() < endTimeMs);\n+    throw new TimeoutException(String.format(\n+        \"Time out while waiting segments become ONLINE. (tableNameWithType = %s, segmentsToCheck = %s)\",\n+        tableNameWithType, segmentsToCheck));\n+  }\n+\n   private Set<String> getOnlineSegmentsFromExternalView(String tableNameWithType) {\n     ExternalView externalView = getTableExternalView(tableNameWithType);\n-    if (externalView != null) {\n-      Set<String> partitionSet = externalView.getPartitionSet();\n-      Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(partitionSet.size()));\n-      for (String partition : partitionSet) {\n-        Map<String, String> instanceStateMap = externalView.getStateMap(partition);\n-        if (instanceStateMap.containsValue(SegmentStateModel.ONLINE) || instanceStateMap\n-            .containsValue(SegmentStateModel.CONSUMING)) {\n-          onlineSegments.add(partition);\n-        }\n+    Preconditions\n+        .checkState(externalView != null, String.format(\"External view is null for table (%s)\", tableNameWithType));\n+    Map<String, Map<String, String>> segmentAssignment = externalView.getRecord().getMapFields();\n+    Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(segmentAssignment.size()));\n+    for (Map.Entry<String, Map<String, String>> entry : segmentAssignment.entrySet()) {\n+      Map<String, String> instanceStateMap = entry.getValue();\n+      if (instanceStateMap.containsValue(SegmentStateModel.ONLINE) || instanceStateMap\n+          .containsValue(SegmentStateModel.CONSUMING)) {\n+        onlineSegments.add(entry.getKey());\n       }\n-      return onlineSegments;\n-    } else {\n-      return null;\n     }\n+    return onlineSegments;\n   }\n+\n   /*\n    * Uncomment and use for testing on a real cluster\n   public static void main(String[] args) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNDQxOA==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r463914418", "bodyText": "Use externalView.getMapFields() to avoid extra map lookups.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Set<String> partitionSet = externalView.getPartitionSet();\n          \n          \n            \n                  Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(partitionSet.size()));\n          \n          \n            \n                  for (String partition : partitionSet) {\n          \n          \n            \n                    Map<String, String> instanceStateMap = externalView.getStateMap(partition);\n          \n          \n            \n                    if (instanceStateMap.containsValue(SegmentStateModel.ONLINE) || instanceStateMap\n          \n          \n            \n                        .containsValue(SegmentStateModel.CONSUMING)) {\n          \n          \n            \n                      onlineSegments.add(partition);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  return onlineSegments;\n          \n          \n            \n                  Map<String, Map<String, String>> segmentAssignment = externalView.getMapFields();\n          \n          \n            \n                  Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(segmentAssignment.size()));\n          \n          \n            \n                  for (Map.Entry<String, Map<String, String>> entry : segmentAssignment.entrySet()) {\n          \n          \n            \n                    Map<String, String> instanceStateMap = entry.getValue();\n          \n          \n            \n                    if (instanceStateMap.containsValue(SegmentStateModel.ONLINE) || instanceStateMap\n          \n          \n            \n                        .containsValue(SegmentStateModel.CONSUMING)) {\n          \n          \n            \n                      onlineSegments.add(entry.getKey());\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  return onlineSegments;", "author": "Jackie-Jiang", "createdAt": "2020-08-01T03:13:43Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -2366,6 +2404,23 @@ public void endReplaceSegments(String tableNameWithType, String segmentLineageEn\n         tableNameWithType, segmentLineageEntryId);\n   }\n \n+  private Set<String> getOnlineSegmentsFromExternalView(String tableNameWithType) {\n+    ExternalView externalView = getTableExternalView(tableNameWithType);\n+    if (externalView != null) {\n+      Set<String> partitionSet = externalView.getPartitionSet();\n+      Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(partitionSet.size()));\n+      for (String partition : partitionSet) {\n+        Map<String, String> instanceStateMap = externalView.getStateMap(partition);\n+        if (instanceStateMap.containsValue(SegmentStateModel.ONLINE) || instanceStateMap\n+            .containsValue(SegmentStateModel.CONSUMING)) {\n+          onlineSegments.add(partition);\n+        }\n+      }\n+      return onlineSegments;", "originalCommit": "777a7a22537de46af1a8ca1685aacbdbb0887232", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NjM1MA==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r465576350", "bodyText": "fixed", "author": "snleee", "createdAt": "2020-08-05T08:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNDQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "00293b80f3df7b09afc27fd38ee85be5ea3a3089", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\nindex 0be14bfeda..51170db859 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\n\n@@ -2404,23 +2405,37 @@ public class PinotHelixResourceManager {\n         tableNameWithType, segmentLineageEntryId);\n   }\n \n+  private void waitForSegmentsBecomeOnline(String tableNameWithType, Set<String> segmentsToCheck)\n+      throws InterruptedException, TimeoutException {\n+    long endTimeMs = System.currentTimeMillis() + EXTERNAL_VIEW_ONLINE_SEGMENTS_MAX_WAIT_MS;\n+    do {\n+      Set<String> onlineSegments = getOnlineSegmentsFromExternalView(tableNameWithType);\n+      if (onlineSegments.containsAll(segmentsToCheck)) {\n+        return;\n+      }\n+      Thread.sleep(EXTERNAL_VIEW_CHECK_INTERVAL_MS);\n+    } while (System.currentTimeMillis() < endTimeMs);\n+    throw new TimeoutException(String.format(\n+        \"Time out while waiting segments become ONLINE. (tableNameWithType = %s, segmentsToCheck = %s)\",\n+        tableNameWithType, segmentsToCheck));\n+  }\n+\n   private Set<String> getOnlineSegmentsFromExternalView(String tableNameWithType) {\n     ExternalView externalView = getTableExternalView(tableNameWithType);\n-    if (externalView != null) {\n-      Set<String> partitionSet = externalView.getPartitionSet();\n-      Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(partitionSet.size()));\n-      for (String partition : partitionSet) {\n-        Map<String, String> instanceStateMap = externalView.getStateMap(partition);\n-        if (instanceStateMap.containsValue(SegmentStateModel.ONLINE) || instanceStateMap\n-            .containsValue(SegmentStateModel.CONSUMING)) {\n-          onlineSegments.add(partition);\n-        }\n+    Preconditions\n+        .checkState(externalView != null, String.format(\"External view is null for table (%s)\", tableNameWithType));\n+    Map<String, Map<String, String>> segmentAssignment = externalView.getRecord().getMapFields();\n+    Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(segmentAssignment.size()));\n+    for (Map.Entry<String, Map<String, String>> entry : segmentAssignment.entrySet()) {\n+      Map<String, String> instanceStateMap = entry.getValue();\n+      if (instanceStateMap.containsValue(SegmentStateModel.ONLINE) || instanceStateMap\n+          .containsValue(SegmentStateModel.CONSUMING)) {\n+        onlineSegments.add(entry.getKey());\n       }\n-      return onlineSegments;\n-    } else {\n-      return null;\n     }\n+    return onlineSegments;\n   }\n+\n   /*\n    * Uncomment and use for testing on a real cluster\n   public static void main(String[] args) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTA4OA==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r463915088", "bodyText": "We should not throw exception here. It takes some time for segment to become online in external view, so we might want to block for some time (put a proper timeout)", "author": "Jackie-Jiang", "createdAt": "2020-08-01T03:19:35Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -2344,14 +2361,35 @@ public void endReplaceSegments(String tableNameWithType, String segmentLineageEn\n           return true;\n         }\n \n+        // Check that all the segments from 'segmentsTo' exist in the table\n+        Set<String> segmentsForTable = new HashSet<>(getSegmentsFor(tableNameWithType));\n+        Preconditions.checkArgument(segmentsForTable.containsAll(lineageEntry.getSegmentsTo()), String.format(\n+            \"Not all segments from 'segmentsTo' are available in the table. (tableName = '%s', segmentsTo = '%s', \"\n+                + \"segmentsFromTable = '%s')\", tableNameWithType, lineageEntry.getSegmentsTo(), segmentsForTable));\n+\n+        // Check that all the segments from 'segmentsTo' became ONLINE in the external view\n+        Set<String> onlineSegmentsFromEV = getOnlineSegmentsFromExternalView(tableNameWithType);\n+        Preconditions.checkArgument(onlineSegmentsFromEV.containsAll(lineageEntry.getSegmentsTo()), String.format(", "originalCommit": "777a7a22537de46af1a8ca1685aacbdbb0887232", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NTI4Nw==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r465575287", "bodyText": "this makes sense. I changed it", "author": "snleee", "createdAt": "2020-08-05T08:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "00293b80f3df7b09afc27fd38ee85be5ea3a3089", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\nindex 0be14bfeda..51170db859 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\n\n@@ -2367,12 +2372,8 @@ public class PinotHelixResourceManager {\n             \"Not all segments from 'segmentsTo' are available in the table. (tableName = '%s', segmentsTo = '%s', \"\n                 + \"segmentsFromTable = '%s')\", tableNameWithType, lineageEntry.getSegmentsTo(), segmentsForTable));\n \n-        // Check that all the segments from 'segmentsTo' became ONLINE in the external view\n-        Set<String> onlineSegmentsFromEV = getOnlineSegmentsFromExternalView(tableNameWithType);\n-        Preconditions.checkArgument(onlineSegmentsFromEV.containsAll(lineageEntry.getSegmentsTo()), String.format(\n-            \"Not all segments from 'segmentsTo' are ONLINE from the external view. (tableName = '%s', \"\n-                + \"segmentsTo = '%s', segmentsFromEV = '%s')\", tableNameWithType, lineageEntry.getSegmentsTo(),\n-            onlineSegmentsFromEV));\n+        // Check that all the segments from 'segmentsTo' become ONLINE in the external view\n+        waitForSegmentsBecomeOnline(tableNameWithType, new HashSet<>(lineageEntry.getSegmentsTo()));\n \n         // Update lineage entry\n         LineageEntry newLineageEntry =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTIzOQ==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r463915239", "bodyText": "The API should handle this wait instead of the client. User doesn't need to understand that they need to wait for external view to change before ending the replacement", "author": "Jackie-Jiang", "createdAt": "2020-08-01T03:21:11Z", "path": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java", "diffHunk": "@@ -639,6 +643,29 @@ public void testBatchUpload()\n     Assert.assertEquals(segmentLineage.getLineageEntry(lineageEntryId2).getState(), LineageEntryState.COMPLETED);\n   }\n \n+  private void waitForEVUpdateForSegments(String tableNameWithType, Set<String> segments)", "originalCommit": "777a7a22537de46af1a8ca1685aacbdbb0887232", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NTQ2OA==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r465575468", "bodyText": "changed the API to wait online segments for some time.", "author": "snleee", "createdAt": "2020-08-05T08:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "00293b80f3df7b09afc27fd38ee85be5ea3a3089", "chunk": "diff --git a/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java b/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java\nindex 993cd8ce6b..d89438efa0 100644\n--- a/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java\n+++ b/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java\n\n@@ -643,29 +640,6 @@ public class PinotHelixResourceManagerTest extends ControllerTest {\n     Assert.assertEquals(segmentLineage.getLineageEntry(lineageEntryId2).getState(), LineageEntryState.COMPLETED);\n   }\n \n-  private void waitForEVUpdateForSegments(String tableNameWithType, Set<String> segments)\n-      throws InterruptedException {\n-    long endTimeMs = System.currentTimeMillis() + MAX_TIMEOUT_IN_MILLISECOND;\n-    ExternalView externalView = _helixResourceManager.getTableExternalView(tableNameWithType);\n-    do {\n-      Set<String> onlineSegments = new HashSet<>();\n-      for (String segment : segments) {\n-        Map<String, String> instanceStateMap = externalView.getStateMap(segment);\n-        if (instanceStateMap == null) {\n-          continue;\n-        } else if (instanceStateMap.containsValue(CommonConstants.Helix.StateModel.SegmentStateModel.ONLINE)\n-            || instanceStateMap.containsValue(CommonConstants.Helix.StateModel.SegmentStateModel.CONSUMING)) {\n-          onlineSegments.add(segment);\n-        }\n-      }\n-      if (onlineSegments.size() == segments.size()) {\n-        break;\n-      } else {\n-        Thread.sleep(500L);\n-      }\n-    } while (System.currentTimeMillis() < endTimeMs);\n-  }\n-\n   private void untagBrokers() {\n     for (String brokerInstance : _helixResourceManager.getAllInstancesForBrokerTenant(BROKER_TENANT_NAME)) {\n       _helixAdmin.removeInstanceTag(getHelixClusterName(), brokerInstance,\n"}}, {"oid": "00293b80f3df7b09afc27fd38ee85be5ea3a3089", "url": "https://github.com/apache/pinot/commit/00293b80f3df7b09afc27fd38ee85be5ea3a3089", "message": "Addressing comments", "committedDate": "2020-08-05T08:56:58Z", "type": "forcePushed"}, {"oid": "6dc71b28c1f0230b0879df3b2559c242febf56b5", "url": "https://github.com/apache/pinot/commit/6dc71b28c1f0230b0879df3b2559c242febf56b5", "message": "Addressing comments", "committedDate": "2020-08-05T08:58:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MTcxOQ==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r466061719", "bodyText": "(nit) unused?", "author": "Jackie-Jiang", "createdAt": "2020-08-05T23:36:28Z", "path": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java", "diffHunk": "@@ -24,6 +24,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;", "originalCommit": "6dc71b28c1f0230b0879df3b2559c242febf56b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MjQxOQ==", "url": "https://github.com/apache/pinot/pull/5782#discussion_r466062419", "bodyText": "thanks for catching this :)", "author": "snleee", "createdAt": "2020-08-05T23:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MTcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9a6bc4f784028c58e81f7ef0b1df2b4d4c3d81b", "chunk": "diff --git a/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java b/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java\nindex d89438efa0..9f9e284e7f 100644\n--- a/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java\n+++ b/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java\n\n@@ -24,7 +24,6 @@ import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"oid": "b9a6bc4f784028c58e81f7ef0b1df2b4d4c3d81b", "url": "https://github.com/apache/pinot/commit/b9a6bc4f784028c58e81f7ef0b1df2b4d4c3d81b", "message": "Addressing comments", "committedDate": "2020-08-05T23:38:22Z", "type": "commit"}, {"oid": "b9a6bc4f784028c58e81f7ef0b1df2b4d4c3d81b", "url": "https://github.com/apache/pinot/commit/b9a6bc4f784028c58e81f7ef0b1df2b4d4c3d81b", "message": "Addressing comments", "committedDate": "2020-08-05T23:38:22Z", "type": "forcePushed"}]}