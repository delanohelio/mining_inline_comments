{"pr_number": 5275, "pr_title": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).", "pr_createdAt": "2020-04-18T17:32:58Z", "pr_url": "https://github.com/apache/pinot/pull/5275", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzU5OQ==", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410813599", "bodyText": "typo tGroupBy", "author": "kishoreg", "createdAt": "2020-04-19T04:40:35Z", "path": "pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java", "diffHunk": "@@ -89,8 +89,7 @@ public static boolean validate(BrokerRequest br1, BrokerRequest br2, boolean ign\n           return false;\n         }\n       } else if (br2.getGroupBy() != null) {\n-        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\",\n-            br2.getGroupBy());\n+        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\", br2.getGroupBy());", "originalCommit": "ad3a38a998f1ce9ddd46853fa38849b973032a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NDExMw==", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410984113", "bodyText": "Was in the original code that's why I missed it. Will fix.", "author": "mayankshriv", "createdAt": "2020-04-19T20:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "79feb907e970d467254d197599dbad2f6b34ddce", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java b/pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java\nindex 2b29e24be4..c08cb66ca7 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java\n\n@@ -89,7 +89,7 @@ public class BrokerRequestComparisonUtils {\n           return false;\n         }\n       } else if (br2.getGroupBy() != null) {\n-        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\", br2.getGroupBy());\n+        LOGGER.error(\"GroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\", br2.getGroupBy());\n         return false;\n       }\n       if (br1.getAggregationsInfo() != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTM2MQ==", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410979361", "bodyText": "maintain the order?", "author": "kishoreg", "createdAt": "2020-04-19T19:58:34Z", "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -233,32 +232,32 @@ private AggregationInfo buildAggregationInfo(Function function) {\n       throw new Pql2CompilationException(\"Aggregation function expects non null argument\");\n     }\n \n-    String argumentString;\n+    List<String> args = new ArrayList<>(operands.size());\n     String functionName = function.getOperator();\n \n     if (functionName.equalsIgnoreCase(AggregationFunctionType.COUNT.getName())) {\n-      argumentString = \"*\";\n+      args = Collections.singletonList(\"*\");\n     } else {\n-      Set<String> expressions = new HashSet<>();\n-      StringBuilder sb = new StringBuilder();\n-      int numOperands = operands.size();\n-      for (int i = 0; i < numOperands; i++) {\n-        Expression expression = operands.get(i);\n-        String columnExpression = getColumnExpression(expression);\n-        if (expressions.add(columnExpression)) {\n-          // deduplicate the columns\n-          if (i != 0) {\n-            sb.append(CompilerConstants.AGGREGATION_FUNCTION_ARG_SEPARATOR);\n+      // Need to de-dup columns for distinct.\n+      if (functionName.equalsIgnoreCase(AggregationFunctionType.DISTINCT.getName())) {\n+        Set<String> expressionSet = new HashSet<>();", "originalCommit": "ad3a38a998f1ce9ddd46853fa38849b973032a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4OTQ2OA==", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410989468", "bodyText": "\ud83d\udc4d", "author": "mayankshriv", "createdAt": "2020-04-19T20:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "79feb907e970d467254d197599dbad2f6b34ddce", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java\nindex 722060380f..eeda5ef59d 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java\n\n@@ -240,7 +240,7 @@ public class PinotQuery2BrokerRequestConverter {\n     } else {\n       // Need to de-dup columns for distinct.\n       if (functionName.equalsIgnoreCase(AggregationFunctionType.DISTINCT.getName())) {\n-        Set<String> expressionSet = new HashSet<>();\n+        Set<String> expressionSet = new TreeSet<>();\n \n         for (Expression operand : operands) {\n           String expression = getColumnExpression(operand);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDA4MA==", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410980080", "bodyText": "+1", "author": "kishoreg", "createdAt": "2020-04-19T20:02:40Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java", "diffHunk": "@@ -18,19 +18,28 @@\n  */\n package org.apache.pinot.core.query.aggregation;\n \n+import com.google.common.base.Preconditions;\n+import java.util.List;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunction;\n+import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils;\n \n \n /**\n  * This class caches miscellaneous data to perform efficient aggregation.\n+ *\n+ * TODO: Remove this class, as it no longer provides any value after aggregation functions now store", "originalCommit": "ad3a38a998f1ce9ddd46853fa38849b973032a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDIwNA==", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410980204", "bodyText": "why not remove it in this PR itself?", "author": "kishoreg", "createdAt": "2020-04-19T20:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5MTM0Mw==", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410991343", "bodyText": "Seemed like a bit non-trivial, will address in the next PR.", "author": "mayankshriv", "createdAt": "2020-04-19T21:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "ae574964bc89301d43806eefd99e21324c1ec2bd", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java\nindex 5d5d3a64c2..9d1027f4f4 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java\n\n@@ -32,14 +32,14 @@ import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils\n  */\n public class AggregationFunctionContext {\n   private final AggregationFunction _aggregationFunction;\n-  private final List<String> _arguments;\n+  private final List<String> _expressions;\n   private final String columnName;\n \n-  public AggregationFunctionContext(AggregationFunction aggregationFunction, List<String> arguments) {\n-    Preconditions.checkArgument(arguments.size() >= 1, \"Aggregation functions require at least one argument.\");\n+  public AggregationFunctionContext(AggregationFunction aggregationFunction, List<String> expressions) {\n+    Preconditions.checkArgument(expressions.size() >= 1, \"Aggregation functions require at least one argument.\");\n     _aggregationFunction = aggregationFunction;\n-    _arguments = arguments;\n-    columnName = AggregationFunctionUtils.concatArgs(arguments);\n+    _expressions = expressions;\n+    columnName = AggregationFunctionUtils.concatArgs(expressions);\n   }\n \n   /**\n"}}, {"oid": "79feb907e970d467254d197599dbad2f6b34ddce", "url": "https://github.com/apache/pinot/commit/79feb907e970d467254d197599dbad2f6b34ddce", "message": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).\n\nThis PR is a continuation of https://github.com/apache/incubator-pinot/pull/5259\nto address the issue https://github.com/apache/incubator-pinot/issues/5261.\n\n1. Added new field in request.thrift `aggregationFunctionArgs` as a list of String\n   arguments for the aggregation funciton.\n   - Could not use the existing `aggregationParams` as it is a Map, and functions with\n     variable arguments may not provide a name for the arg (to be used as key in Map).\n   - Maintain backward compatibility by first check for the new field, and fall back to\n     the existing one if it does not exist.\n\n2. Ensure that all calls to the old AggregationInfo.getAggregationParams() is replaced\n   with backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n3. Since most aggregation functions today have just one argument, added a separate api\n   AggregationFuncitonContext.getFirstArgument() as an optimization.\n\n4. Cleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\n   class to not require the column name argument, as this is already stored in the\n   AggregationFunction.\n\n5. Modified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value.", "committedDate": "2020-04-19T20:55:21Z", "type": "forcePushed"}, {"oid": "ae574964bc89301d43806eefd99e21324c1ec2bd", "url": "https://github.com/apache/pinot/commit/ae574964bc89301d43806eefd99e21324c1ec2bd", "message": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).\n\nThis PR is a continuation of https://github.com/apache/incubator-pinot/pull/5259\nto address the issue https://github.com/apache/incubator-pinot/issues/5261.\n\n1. Added new field in request.thrift `aggregationFunctionArgs` as a list of String\n   arguments for the aggregation funciton.\n   - Could not use the existing `aggregationParams` as it is a Map, and functions with\n     variable arguments may not provide a name for the arg (to be used as key in Map).\n   - Maintain backward compatibility by first check for the new field, and fall back to\n     the existing one if it does not exist.\n\n2. Ensure that all calls to the old AggregationInfo.getAggregationParams() is replaced\n   with backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n3. Since most aggregation functions today have just one argument, added a separate api\n   AggregationFuncitonContext.getFirstArgument() as an optimization.\n\n4. Cleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\n   class to not require the column name argument, as this is already stored in the\n   AggregationFunction.\n\n5. Modified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value.", "committedDate": "2020-04-19T21:12:06Z", "type": "commit"}, {"oid": "ae574964bc89301d43806eefd99e21324c1ec2bd", "url": "https://github.com/apache/pinot/commit/ae574964bc89301d43806eefd99e21324c1ec2bd", "message": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).\n\nThis PR is a continuation of https://github.com/apache/incubator-pinot/pull/5259\nto address the issue https://github.com/apache/incubator-pinot/issues/5261.\n\n1. Added new field in request.thrift `aggregationFunctionArgs` as a list of String\n   arguments for the aggregation funciton.\n   - Could not use the existing `aggregationParams` as it is a Map, and functions with\n     variable arguments may not provide a name for the arg (to be used as key in Map).\n   - Maintain backward compatibility by first check for the new field, and fall back to\n     the existing one if it does not exist.\n\n2. Ensure that all calls to the old AggregationInfo.getAggregationParams() is replaced\n   with backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n3. Since most aggregation functions today have just one argument, added a separate api\n   AggregationFuncitonContext.getFirstArgument() as an optimization.\n\n4. Cleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\n   class to not require the column name argument, as this is already stored in the\n   AggregationFunction.\n\n5. Modified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value.", "committedDate": "2020-04-19T21:12:06Z", "type": "forcePushed"}]}