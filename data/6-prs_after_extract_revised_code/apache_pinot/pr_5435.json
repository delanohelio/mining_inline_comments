{"pr_number": 5435, "pr_title": "[TE] clean up decprecated/unused code", "pr_createdAt": "2020-05-23T00:42:38Z", "pr_url": "https://github.com/apache/pinot/pull/5435", "timeline": [{"oid": "2933c48b4af6a27cba182bfd5879b5e82d397fe3", "url": "https://github.com/apache/pinot/commit/2933c48b4af6a27cba182bfd5879b5e82d397fe3", "message": "[TE] clean up decprecated/unused code", "committedDate": "2020-05-23T00:39:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMjg4Mw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r429602883", "bodyText": "initAnomalyClassifierFactory, initAlertFilterFactory could be deleted.", "author": "xiaohui-sun", "createdAt": "2020-05-24T06:10:17Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java", "diffHunk": "@@ -273,9 +224,4 @@ private void initAnomalyClassifierFactory(String anomalyClassifierConfigPath) {\n     }", "originalCommit": "2933c48b4af6a27cba182bfd5879b5e82d397fe3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d2fc2af8ad0e193c1cd4f2076c27adff714b60", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\nindex 12f09ec205..2a3686d488 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\n\n@@ -205,23 +195,4 @@ public class ThirdEyeAnomalyApplication\n       }\n     });\n   }\n-\n-  private void initAnomalyFunctionFactory(String functoinConfigPath) {\n-    if (anomalyFunctionFactory == null) {\n-      anomalyFunctionFactory = new AnomalyFunctionFactory(functoinConfigPath);\n-    }\n-  }\n-\n-  private void initAlertFilterFactory(String alertFilterConfigPath) {\n-    if (alertFilterFactory == null) {\n-      alertFilterFactory = new AlertFilterFactory(alertFilterConfigPath);\n-    }\n-  }\n-\n-  private void initAnomalyClassifierFactory(String anomalyClassifierConfigPath) {\n-    if (anomalyClassifierFactory == null) {\n-      anomalyClassifierFactory = new AnomalyClassifierFactory(anomalyClassifierConfigPath);\n-    }\n-  }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzEwNQ==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r429603105", "bodyText": "anomalyClassifierFactory not used.", "author": "xiaohui-sun", "createdAt": "2020-05-24T06:13:22Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java", "diffHunk": "@@ -61,18 +54,12 @@\n public class ThirdEyeAnomalyApplication\n     extends BaseThirdEyeApplication<ThirdEyeAnomalyConfiguration> {\n \n-  private DetectionJobScheduler detectionJobScheduler = null;\n   private TaskDriver taskDriver = null;\n   private MonitorJobScheduler monitorJobScheduler = null;\n-  private AlertJobSchedulerV2 alertJobSchedulerV2;\n   private AnomalyFunctionFactory anomalyFunctionFactory = null;\n   private AutoOnboardService autoOnboardService = null;\n-  private DataCompletenessScheduler dataCompletenessScheduler = null;\n   private AlertFilterFactory alertFilterFactory = null;\n   private AnomalyClassifierFactory anomalyClassifierFactory = null;", "originalCommit": "2933c48b4af6a27cba182bfd5879b5e82d397fe3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d2fc2af8ad0e193c1cd4f2076c27adff714b60", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\nindex 12f09ec205..2a3686d488 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\n\n@@ -56,10 +53,7 @@ public class ThirdEyeAnomalyApplication\n \n   private TaskDriver taskDriver = null;\n   private MonitorJobScheduler monitorJobScheduler = null;\n-  private AnomalyFunctionFactory anomalyFunctionFactory = null;\n   private AutoOnboardService autoOnboardService = null;\n-  private AlertFilterFactory alertFilterFactory = null;\n-  private AnomalyClassifierFactory anomalyClassifierFactory = null;\n   private HolidayEventsLoader holidayEventsLoader = null;\n   private MockEventsLoader mockEventsLoader = null;\n   private RequestStatisticsLogger requestStatisticsLogger = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzEyNg==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r429603126", "bodyText": "alertFilterFactory not used.", "author": "xiaohui-sun", "createdAt": "2020-05-24T06:13:53Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java", "diffHunk": "@@ -61,18 +54,12 @@\n public class ThirdEyeAnomalyApplication\n     extends BaseThirdEyeApplication<ThirdEyeAnomalyConfiguration> {\n \n-  private DetectionJobScheduler detectionJobScheduler = null;\n   private TaskDriver taskDriver = null;\n   private MonitorJobScheduler monitorJobScheduler = null;\n-  private AlertJobSchedulerV2 alertJobSchedulerV2;\n   private AnomalyFunctionFactory anomalyFunctionFactory = null;\n   private AutoOnboardService autoOnboardService = null;\n-  private DataCompletenessScheduler dataCompletenessScheduler = null;\n   private AlertFilterFactory alertFilterFactory = null;", "originalCommit": "2933c48b4af6a27cba182bfd5879b5e82d397fe3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d2fc2af8ad0e193c1cd4f2076c27adff714b60", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\nindex 12f09ec205..2a3686d488 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/ThirdEyeAnomalyApplication.java\n\n@@ -56,10 +53,7 @@ public class ThirdEyeAnomalyApplication\n \n   private TaskDriver taskDriver = null;\n   private MonitorJobScheduler monitorJobScheduler = null;\n-  private AnomalyFunctionFactory anomalyFunctionFactory = null;\n   private AutoOnboardService autoOnboardService = null;\n-  private AlertFilterFactory alertFilterFactory = null;\n-  private AnomalyClassifierFactory anomalyClassifierFactory = null;\n   private HolidayEventsLoader holidayEventsLoader = null;\n   private MockEventsLoader mockEventsLoader = null;\n   private RequestStatisticsLogger requestStatisticsLogger = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzM3MA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r429603370", "bodyText": "ANOMALY_DETECTION and MERGE tasks are not used.", "author": "xiaohui-sun", "createdAt": "2020-05-24T06:17:20Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java", "diffHunk": "@@ -67,16 +64,6 @@ public static TaskInfo getTaskInfoFromTaskType(TaskType taskType, String taskInf\n         case MONITOR:\n           taskInfo = OBJECT_MAPPER.readValue(taskInfoString, MonitorTaskInfo.class);\n           break;\n-        case ALERT:", "originalCommit": "2933c48b4af6a27cba182bfd5879b5e82d397fe3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78d2fc2af8ad0e193c1cd4f2076c27adff714b60", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java\nindex cef1be0dd8..b67ae5203d 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java\n\n@@ -55,12 +54,6 @@ public class TaskInfoFactory {\n         case YAML_DETECTION_ONBOARD:\n           taskInfo = OBJECT_MAPPER.readValue(taskInfoString, YamlOnboardingTaskInfo.class);\n           break;\n-        case ANOMALY_DETECTION:\n-          taskInfo = OBJECT_MAPPER.readValue(taskInfoString, DetectionTaskInfo.class);\n-          break;\n-        case MERGE:\n-          LOG.error(\"TaskType MERGE not supported\");\n-          break;\n         case MONITOR:\n           taskInfo = OBJECT_MAPPER.readValue(taskInfoString, MonitorTaskInfo.class);\n           break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzQ0MQ==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r429603441", "bodyText": "ANOMALY_DETECTION and MERGE tasks are not used.", "author": "xiaohui-sun", "createdAt": "2020-05-24T06:18:10Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskRunnerFactory.java", "diffHunk": "@@ -59,16 +56,6 @@ public static TaskRunner getTaskRunnerFromTaskType(TaskType taskType) {\n       case MONITOR:\n         taskRunner = new MonitorTaskRunner();\n         break;\n-      case DATA_COMPLETENESS:", "originalCommit": "2933c48b4af6a27cba182bfd5879b5e82d397fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4OTY2Mw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430689663", "bodyText": "Removed.", "author": "vincentchenjl", "createdAt": "2020-05-26T20:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "78d2fc2af8ad0e193c1cd4f2076c27adff714b60", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskRunnerFactory.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskRunnerFactory.java\nindex 83360751d1..f46b1c00c7 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskRunnerFactory.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskRunnerFactory.java\n\n@@ -48,11 +46,6 @@ public class TaskRunnerFactory {\n       case YAML_DETECTION_ONBOARD:\n         taskRunner = new YamlOnboardingTaskRunner();\n         break;\n-      case ANOMALY_DETECTION:\n-        taskRunner = new DetectionTaskRunner();\n-        break;\n-      case MERGE:\n-        break;\n       case MONITOR:\n         taskRunner = new MonitorTaskRunner();\n         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzQ4MA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r429603480", "bodyText": "This whole class could be deleted.", "author": "xiaohui-sun", "createdAt": "2020-05-24T06:19:02Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/completeness/checker/DataCompletenessUtils.java", "diffHunk": "@@ -261,13 +261,4 @@ public static DateTimeFormatter getDateTimeFormatterForDataset(TimeSpec timeSpec\n     return bucketNameToCountStar;\n   }\n \n-  public static double getPercentCompleteness(PercentCompletenessFunctionInput input) {", "originalCommit": "2933c48b4af6a27cba182bfd5879b5e82d397fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MTg4NA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430691884", "bodyText": "This class is used in Wo4WAvgDataCompletenessAlgorithm. We need to drop both of them if we want to drop this. Wo4WAvgDataCompletenessAlgorithm cannot be dropped due to the issue below.", "author": "vincentchenjl", "createdAt": "2020-05-26T20:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODk5MQ==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430698991", "bodyText": "We should remove it and also remove getter/setter.\nThat should be safe.", "author": "xiaohui-sun", "createdAt": "2020-05-26T20:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2MTgzMg==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430761832", "bodyText": "I remove Wo4WAvgDataCompletenessAlgorithm completely and also the field DatasetConfigBean.dataCompletenessAlgorithm from DatasetConfigBean.", "author": "vincentchenjl", "createdAt": "2020-05-26T23:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "6f6e945a49fecadf9acc246240153c938b855d35", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/completeness/checker/DataCompletenessUtils.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/completeness/checker/DataCompletenessUtils.java\ndeleted file mode 100644\nindex db61544b09..0000000000\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/completeness/checker/DataCompletenessUtils.java\n+++ /dev/null\n\n@@ -1,264 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.pinot.thirdeye.completeness.checker;\n-\n-import com.google.common.collect.ArrayListMultimap;\n-import com.google.common.collect.ListMultimap;\n-import org.apache.pinot.thirdeye.common.time.TimeSpec;\n-import org.apache.pinot.thirdeye.datasource.ThirdEyeCacheRegistry;\n-import org.apache.pinot.thirdeye.datasource.pinot.PinotQuery;\n-import org.apache.pinot.thirdeye.datasource.pinot.PinotThirdEyeDataSource;\n-import org.apache.pinot.thirdeye.datasource.pinot.resultset.ThirdEyeResultSet;\n-import org.apache.pinot.thirdeye.datasource.pinot.resultset.ThirdEyeResultSetGroup;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.TimeUnit;\n-import org.joda.time.DateTime;\n-import org.joda.time.DateTimeZone;\n-import org.joda.time.format.DateTimeFormat;\n-import org.joda.time.format.DateTimeFormatter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Util methods for data completeness\n- */\n-public class DataCompletenessUtils {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(DataCompletenessUtils.class);\n-  private static final ThirdEyeCacheRegistry CACHE_REGISTRY = ThirdEyeCacheRegistry.getInstance();\n-\n-  private static final String DAY_FORMAT = \"yyyyMMdd\";\n-  private static final String HOUR_FORMAT = \"yyyyMMddHH\";\n-  private static final String MINUTE_FORMAT = \"yyyyMMddHHmm\";\n-  /**\n-   * All MINUTE granularity data will be rounded off to 30 MINUTES by default\n-   */\n-  private static final int MINUTES_LEVEL_ROUNDING = 30;\n-\n-\n-  // HELPER methods for DataCompletenessTaskRunner\n-\n-  /**\n-   * round this time to earlier boundary, depending on granularity of dataset\n-   * e.g. 12:15pm on HOURLY dataset should be treated as 12pm\n-   * and 12:50pm on any MINUTE level dataset should be treated as 12:30pm\n-   * @param timeSpec\n-   * @param dataCompletenessStartTime\n-   * @param dateTimeZone\n-   * @return\n-   */\n-  public static long getAdjustedTimeForDataset(TimeSpec timeSpec, long dataCompletenessStartTime, DateTimeZone zone) {\n-    DateTime adjustedDateTime = new DateTime(dataCompletenessStartTime, zone);\n-    TimeUnit unit = timeSpec.getDataGranularity().getUnit();\n-    switch (unit) {\n-      case DAYS:\n-        adjustedDateTime = adjustedDateTime.withTimeAtStartOfDay();\n-        break;\n-      case MINUTES:\n-        int roundedMinutes = (adjustedDateTime.getMinuteOfHour()/MINUTES_LEVEL_ROUNDING) * MINUTES_LEVEL_ROUNDING;\n-        adjustedDateTime = adjustedDateTime.withTime(adjustedDateTime.getHourOfDay(), roundedMinutes, 0, 0);\n-        break;\n-      case HOURS:\n-      default:\n-        adjustedDateTime = adjustedDateTime.withTime(adjustedDateTime.getHourOfDay(), 0, 0, 0);\n-        break;\n-    }\n-    return adjustedDateTime.getMillis();\n-  }\n-\n-  /**\n-   * get bucket size in millis, according to data granularity of dataset\n-   * Bucket size are 1 HOUR for hourly, 1 DAY for daily and 30 MINUTES for minute level\n-   * @param timeSpec\n-   * @return\n-   */\n-  public static long getBucketSizeInMSForDataset(TimeSpec timeSpec) {\n-    long bucketMillis = 0;\n-    TimeUnit unit = timeSpec.getDataGranularity().getUnit();\n-    switch (unit) {\n-      case DAYS:\n-        bucketMillis = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS);\n-        break;\n-      case MINUTES:\n-        bucketMillis = TimeUnit.MILLISECONDS.convert(MINUTES_LEVEL_ROUNDING, TimeUnit.MINUTES);\n-        break;\n-      case HOURS:\n-      default:\n-        bucketMillis = TimeUnit.MILLISECONDS.convert(1, TimeUnit.HOURS);\n-        break;\n-    }\n-    return bucketMillis;\n-  }\n-\n-\n-  /**\n-   * Get date time formatter according to granularity of dataset\n-   * This is to store the date in the db, in the correct SDF\n-   * @param timeSpec\n-   * @return\n-   */\n-  public static DateTimeFormatter getDateTimeFormatterForDataset(TimeSpec timeSpec, DateTimeZone zone) {\n-    String pattern = null;\n-    TimeUnit unit = timeSpec.getDataGranularity().getUnit();\n-    switch (unit) {\n-      case DAYS:\n-        pattern = DAY_FORMAT;\n-        break;\n-      case MINUTES:\n-        pattern = MINUTE_FORMAT;\n-        break;\n-      case HOURS:\n-      default:\n-        pattern = HOUR_FORMAT;\n-        break;\n-    }\n-    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(pattern).withZone(zone);\n-    return dateTimeFormatter;\n-  }\n-\n-  /**\n-   * Get time values which correspond to time column in the pinot segment, for the given buckets in millis\n-   * Knowing millis time or sdf is not sufficient for querying to pinot, as pinot might be storing in sinceEpoch format\n-   * @param timeSpec\n-   * @param bucketNameToBucketValue\n-   * @return\n-   */\n-  public static ListMultimap<String, Long> getBucketNameToTimeValuesMap(TimeSpec timeSpec,\n-      Map<String, Long> bucketNameToBucketValue) {\n-    ListMultimap<String, Long> bucketNameToTimeValues = ArrayListMultimap.create();\n-\n-    String timeFormat = timeSpec.getFormat();\n-    if (timeFormat.equals(TimeSpec.SINCE_EPOCH_FORMAT)) {\n-      TimeUnit unit = timeSpec.getDataGranularity().getUnit();\n-      int timeDuration = timeSpec.getDataGranularity().getSize();\n-\n-      for (Entry<String, Long> entry : bucketNameToBucketValue.entrySet()) {\n-        String bucketName = entry.getKey();\n-        Long bucketValue = entry.getValue();\n-        long timeValue = 0;\n-\n-        switch (unit) {\n-          case MINUTES:\n-            for (int i = 0; i < MINUTES_LEVEL_ROUNDING/timeDuration; i++) {\n-              timeValue = TimeUnit.MINUTES.convert(bucketValue, TimeUnit.MILLISECONDS) / timeDuration;\n-              bucketNameToTimeValues.put(bucketName, timeValue);\n-              bucketValue = bucketValue + TimeUnit.MILLISECONDS.convert(timeDuration, TimeUnit.MINUTES);\n-            }\n-            break;\n-          case DAYS:\n-            timeValue = TimeUnit.DAYS.convert(bucketValue, TimeUnit.MILLISECONDS);\n-            bucketNameToTimeValues.put(bucketName, timeValue);\n-            break;\n-          case HOURS:\n-          default:\n-            timeValue = TimeUnit.HOURS.convert(bucketValue, TimeUnit.MILLISECONDS);\n-            bucketNameToTimeValues.put(bucketName, timeValue);\n-            break;\n-        }\n-      }\n-    } else {\n-      for (Entry<String, Long> entry : bucketNameToBucketValue.entrySet()) {\n-        String bucketName = entry.getKey();\n-        bucketNameToTimeValues.put(bucketName, Long.valueOf(bucketName));\n-      }\n-    }\n-    return bucketNameToTimeValues;\n-  }\n-\n-  /**\n-   * Get count * of buckets\n-   * @param dataset\n-   * @param bucketNameToBucketValueMS\n-   * @param bucketNameToBucketValue\n-   * @return\n-   */\n-  public static Map<String, Long> getCountsForBucketsOfDataset(String dataset, TimeSpec timeSpec,\n-      Map<String, Long> bucketNameToBucketValueMS) {\n-\n-    // get time values according to dataset timeSpec schema (epoch or sdf values in proper granularity)\n-    // dateToCheckInSDF -> timeValues as present in segments\n-    // This is a multimap because for nMinutesSinceEpoch, a bucket (30 minutes) can have more than 1 time values in the 30 minutes\n-    // e.g.: For 5 minutes granularity data, the checker will round to 30 minutes,\n-    // but count * should be taken from 6 time values in that 30 minutes\n-    ListMultimap<String, Long> bucketNameToTimeValues = getBucketNameToTimeValuesMap(timeSpec, bucketNameToBucketValueMS);\n-    LOG.info(\"Bucket name to time values {}\", bucketNameToTimeValues);\n-\n-    Map<String, Long> bucketNameToCountStarMap = getBucketNameToCountStarMap(dataset, timeSpec, bucketNameToTimeValues);\n-    return bucketNameToCountStarMap;\n-  }\n-\n-  private static Map<String, Long> getBucketNameToCountStarMap(String dataset, TimeSpec timeSpec,\n-      ListMultimap<String, Long> bucketNameToTimeValues) {\n-\n-    Map<String, Long> bucketNameToCountStar = new HashMap<>();\n-\n-    // generate request\n-    StringBuilder sb = new StringBuilder();\n-    String delimiter = \"\";\n-    for (Long timeValue : bucketNameToTimeValues.values()) {\n-      sb.append(delimiter);\n-      delimiter = \" OR \";\n-      sb.append(String.format(\"%s='%s'\", timeSpec.getColumnName(), timeValue));\n-    }\n-    long top = bucketNameToTimeValues.values().size();\n-    String pql = String.format(\"select count(*) from %s where %s group by %s top %s\",\n-        dataset, sb.toString(), timeSpec.getColumnName(), top);\n-    Map<Long, Long> timeValueToCount = new HashMap<>();\n-    try {\n-      PinotThirdEyeDataSource pinotThirdEyeDataSource = (PinotThirdEyeDataSource) CACHE_REGISTRY.getQueryCache()\n-          .getDataSource(PinotThirdEyeDataSource.DATA_SOURCE_NAME);\n-      ThirdEyeResultSetGroup resultSetGroup = pinotThirdEyeDataSource.executePQL(new PinotQuery(pql, dataset));\n-      if (resultSetGroup == null || resultSetGroup.size() <= 0) {\n-        return bucketNameToCountStar;\n-      }\n-      ThirdEyeResultSet resultSet = resultSetGroup.get(0);\n-      for (int i = 0; i < resultSet.getRowCount(); i++) {\n-        Long timeValue = Long.valueOf(resultSet.getGroupKeyColumnValue(i, 0));\n-        Long count = resultSet.getLong(i, 0);\n-        timeValueToCount.put(timeValue, count);\n-      }\n-\n-\n-    } catch (ExecutionException e) {\n-      LOG.error(\"Exception in getting count *. PQL:{}\", pql, e);\n-    }\n-\n-    // parse response to get counts\n-    for (String bucketName : bucketNameToTimeValues.keySet()) {\n-      List<Long> timeValues = bucketNameToTimeValues.get(bucketName);\n-      Long sumOfCountForBucket = 0L;\n-      for (Long timeValue : timeValues) {\n-        long val = 0L;\n-        if(timeValueToCount.containsKey(timeValue)) {\n-          val = timeValueToCount.get(timeValue);\n-        }\n-        sumOfCountForBucket = sumOfCountForBucket + val;\n-      }\n-      bucketNameToCountStar.put(bucketName, sumOfCountForBucket);\n-    }\n-\n-    return bucketNameToCountStar;\n-  }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzUyMg==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r429603522", "bodyText": "This class could be deleted.\nLet's delete everything under /completeness.checker", "author": "xiaohui-sun", "createdAt": "2020-05-24T06:19:53Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/completeness/checker/Wo4WAvgDataCompletenessAlgorithm.java", "diffHunk": "@@ -41,6 +41,7 @@\n /**\n  * This is the implementation of the WO4W Average function or checking data completeness of datasets\n  */\n+@Deprecated\n public class Wo4WAvgDataCompletenessAlgorithm implements DataCompletenessAlgorithm {\n \n   public static double DEFAULT_EXPECTED_COMPLETENESS = 80;", "originalCommit": "2933c48b4af6a27cba182bfd5879b5e82d397fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MTA1Mg==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430691052", "bodyText": "The issue is that  Wo4WAvgDataCompletenessAlgorithm is used as default value for DatasetConfigBean.dataCompletenessAlgorithm. I understand that it is not used, but i am not sure about the impact if i remove this field from DatasetConfigBean and still have this field inside the JSON in DB.", "author": "vincentchenjl", "createdAt": "2020-05-26T20:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6f6e945a49fecadf9acc246240153c938b855d35", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/completeness/checker/Wo4WAvgDataCompletenessAlgorithm.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/completeness/checker/Wo4WAvgDataCompletenessAlgorithm.java\ndeleted file mode 100644\nindex 73f0a50469..0000000000\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/completeness/checker/Wo4WAvgDataCompletenessAlgorithm.java\n+++ /dev/null\n\n@@ -1,165 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.pinot.thirdeye.completeness.checker;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.joda.time.DateTime;\n-import org.joda.time.DateTimeZone;\n-import org.joda.time.Period;\n-import org.joda.time.format.DateTimeFormatter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.apache.pinot.thirdeye.common.time.TimeSpec;\n-import org.apache.pinot.thirdeye.datalayer.bao.DataCompletenessConfigManager;\n-import org.apache.pinot.thirdeye.datalayer.dto.DataCompletenessConfigDTO;\n-import org.apache.pinot.thirdeye.datasource.DAORegistry;\n-\n-/**\n- * This is the implementation of the WO4W Average function or checking data completeness of datasets\n- */\n-@Deprecated\n-public class Wo4WAvgDataCompletenessAlgorithm implements DataCompletenessAlgorithm {\n-\n-  public static double DEFAULT_EXPECTED_COMPLETENESS = 80;\n-  private static double CONSIDER_COMPLETE_AFTER = 95;\n-  private static final DAORegistry DAO_REGISTRY = DAORegistry.getInstance();\n-  private static final Logger LOG = LoggerFactory.getLogger(Wo4WAvgDataCompletenessAlgorithm.class);\n-\n-  private DataCompletenessConfigManager dataCompletenessConfigDAO = null;\n-\n-  public Wo4WAvgDataCompletenessAlgorithm() {\n-    dataCompletenessConfigDAO = DAO_REGISTRY.getDataCompletenessConfigDAO();\n-  }\n-\n-\n-  @Override\n-  public void computeBaselineCountsIfNotPresent(String dataset, Map<String, Long> bucketNameToBucketValueMS,\n-      DateTimeFormatter dateTimeFormatter, TimeSpec timeSpec, DateTimeZone zone) {\n-\n-    // look for the past 4 weeks\n-    for (int i = 0; i < 4; i ++) {\n-      Period baselineOffsetPeriod = new Period(0, 0, 0, 7*(i+1), 0, 0, 0, 0);\n-      LOG.info(\"Checking for {} week ago for dataset {}\", (i+1), dataset);\n-\n-      // check if baseline is present in database\n-      Map<String, Long> baselineBucketNameToBucketValueMS = new HashMap<>();\n-      for (Entry<String, Long> entry : bucketNameToBucketValueMS.entrySet()) {\n-        DateTime bucketValueDateTime = new DateTime(entry.getValue(), zone);\n-        Long baselineBucketValueMS = bucketValueDateTime.minus(baselineOffsetPeriod).getMillis();\n-        String baselineBucketName = dateTimeFormatter.print(baselineBucketValueMS);\n-        DataCompletenessConfigDTO configDTO = dataCompletenessConfigDAO.findByDatasetAndDateSDF(dataset, baselineBucketName);\n-        if (configDTO == null) {\n-          baselineBucketNameToBucketValueMS.put(baselineBucketName, baselineBucketValueMS);\n-        }\n-      }\n-      // for all baseline values not present in database, fetch their counts, and update in database\n-      LOG.info(\"Missing baseline buckets {} for dataset {}\", baselineBucketNameToBucketValueMS.keySet(), dataset);\n-      if (!baselineBucketNameToBucketValueMS.isEmpty()) {\n-\n-        Map<String, Long> baselineCountsForBuckets =\n-            DataCompletenessUtils.getCountsForBucketsOfDataset(dataset, timeSpec, baselineBucketNameToBucketValueMS);\n-        LOG.info(\"Baseline bucket counts {}\", baselineCountsForBuckets);\n-\n-        for (Entry<String, Long> entry : baselineCountsForBuckets.entrySet()) {\n-          String baselineBucketName = entry.getKey();\n-          Long baselineBucketCount = entry.getValue();\n-          Long baselineBucketValueMS = baselineBucketNameToBucketValueMS.get(baselineBucketName);\n-\n-          DataCompletenessConfigDTO createBaselineConfig = new DataCompletenessConfigDTO();\n-          createBaselineConfig.setDataset(dataset);\n-          createBaselineConfig.setDateToCheckInSDF(baselineBucketName);\n-          createBaselineConfig.setDateToCheckInMS(baselineBucketValueMS);\n-          createBaselineConfig.setCountStar(baselineBucketCount);\n-          dataCompletenessConfigDAO.save(createBaselineConfig);\n-        }\n-        LOG.info(\"Saved {} number of baseline counts in database for dataset {}\",\n-            baselineCountsForBuckets.size(), dataset);\n-      }\n-    }\n-  }\n-\n-  @Override\n-  public List<Long> getBaselineCounts(String dataset, Long bucketValue) {\n-    long weekInMillis = TimeUnit.MILLISECONDS.convert(7, TimeUnit.DAYS);\n-    long baselineInMS = bucketValue;\n-    List<Long> baselineCounts = new ArrayList<>();\n-    for (int i = 0; i < 4; i++) {\n-      long count = 0;\n-      baselineInMS = baselineInMS - weekInMillis;\n-      DataCompletenessConfigDTO config = dataCompletenessConfigDAO.findByDatasetAndDateMS(dataset, baselineInMS);\n-      if (config != null) {\n-        count = config.getCountStar();\n-      }\n-      baselineCounts.add(count);\n-    }\n-    return baselineCounts;\n-  }\n-\n-\n-\n-  @Override\n-  public Map<String, Long> getCurrentCountsForBuckets(String dataset, TimeSpec timeSpec,\n-      Map<String, Long> bucketNameToBucketValueMS) {\n-    return DataCompletenessUtils.getCountsForBucketsOfDataset(dataset, timeSpec, bucketNameToBucketValueMS);\n-  }\n-\n-  @Override\n-  public double getPercentCompleteness(List<Long> baselineCounts, Long currentCount) {\n-    double percentCompleteness = 0;\n-    double baselineTotalCount = 0;\n-    for (Long baseline : baselineCounts) {\n-      baselineTotalCount = baselineTotalCount + baseline;\n-    }\n-    baselineTotalCount = baselineTotalCount/baselineCounts.size();\n-    if (baselineTotalCount != 0) {\n-      percentCompleteness = new Double(currentCount * 100) / baselineTotalCount;\n-    }\n-    if (baselineTotalCount == 0 && currentCount != 0) {\n-      percentCompleteness = 100;\n-    }\n-    return percentCompleteness;\n-  }\n-\n-  @Override\n-  public boolean isDataComplete(Double percentComplete, Double expectedCompleteness) {\n-    boolean isDataComplete = false;\n-    if (expectedCompleteness == null) {\n-      expectedCompleteness = DEFAULT_EXPECTED_COMPLETENESS;\n-    }\n-    if (percentComplete >= expectedCompleteness) {\n-      isDataComplete = true;\n-    }\n-    return isDataComplete;\n-  }\n-\n-  @Override\n-  public double getConsiderCompleteAfter() {\n-    return CONSIDER_COMPLETE_AFTER;\n-  }\n-\n-\n-}\n"}}, {"oid": "78d2fc2af8ad0e193c1cd4f2076c27adff714b60", "url": "https://github.com/apache/pinot/commit/78d2fc2af8ad0e193c1cd4f2076c27adff714b60", "message": "remove more code based on comments", "committedDate": "2020-05-26T20:29:12Z", "type": "commit"}, {"oid": "6f6e945a49fecadf9acc246240153c938b855d35", "url": "https://github.com/apache/pinot/commit/6f6e945a49fecadf9acc246240153c938b855d35", "message": "address comments", "committedDate": "2020-05-26T23:25:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MTIxNw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430861217", "bodyText": "Remove //TODO", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:14:28Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java", "diffHunk": "@@ -26,15 +26,8 @@\n     DETECTION,\n     DETECTION_ALERT,\n     YAML_DETECTION_ONBOARD,\n-    ANOMALY_DETECTION,\n-    MERGE,\n     // TODO: deprecate ALERT task type", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d345700efcf3f62b12fc0b0021ce30a8723d744", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java\nindex 57f131d0c7..95ed5e18fe 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java\n\n@@ -22,12 +22,11 @@ package org.apache.pinot.thirdeye.anomaly.task;\n public class TaskConstants {\n \n   public enum TaskType {\n-    DATA_QUALITY,\n-    DETECTION,\n-    DETECTION_ALERT,\n-    YAML_DETECTION_ONBOARD,\n-    // TODO: deprecate ALERT task type\n-    MONITOR\n+    DATA_QUALITY,              // tasks to detect data quality anomalies\n+    DETECTION,                 // tasks to detect anomalies\n+    DETECTION_ALERT,           // tasks to send alerts to customers regarding anomalies\n+    YAML_DETECTION_ONBOARD,    // tasks to onboard new YAML configured detection\n+    MONITOR                    // tasks to clean up expired/invalid execution history\n   }\n \n   public enum TaskStatus {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MTczMQ==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430861731", "bodyText": "Update error log accordingly.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:16:39Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java", "diffHunk": "@@ -58,25 +54,9 @@ public static TaskInfo getTaskInfoFromTaskType(TaskType taskType, String taskInf\n         case YAML_DETECTION_ONBOARD:\n           taskInfo = OBJECT_MAPPER.readValue(taskInfoString, YamlOnboardingTaskInfo.class);\n           break;\n-        case ANOMALY_DETECTION:\n-          taskInfo = OBJECT_MAPPER.readValue(taskInfoString, DetectionTaskInfo.class);\n-          break;\n-        case MERGE:\n-          LOG.error(\"TaskType MERGE not supported\");\n-          break;\n         case MONITOR:\n           taskInfo = OBJECT_MAPPER.readValue(taskInfoString, MonitorTaskInfo.class);\n           break;\n-        case ALERT:\n-        case ALERT2:\n-          taskInfo = OBJECT_MAPPER.readValue(taskInfoString, AlertTaskInfo.class);\n-          break;\n-        case DATA_COMPLETENESS:\n-          taskInfo = OBJECT_MAPPER.readValue(taskInfoString, DataCompletenessTaskInfo.class);\n-          break;\n-        case CLASSIFICATION:\n-          taskInfo = OBJECT_MAPPER.readValue(taskInfoString, ClassificationTaskInfo.class);\n-          break;\n         default:\n           LOG.error(\"TaskType must be one of ANOMALY_DETECTION, MONITOR, ALERT, ALERT2, DATA_COMPLETENESS, CLASSIFICATION\");", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d345700efcf3f62b12fc0b0021ce30a8723d744", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java\nindex b67ae5203d..df7063df27 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskInfoFactory.java\n\n@@ -58,7 +58,7 @@ public class TaskInfoFactory {\n           taskInfo = OBJECT_MAPPER.readValue(taskInfoString, MonitorTaskInfo.class);\n           break;\n         default:\n-          LOG.error(\"TaskType must be one of ANOMALY_DETECTION, MONITOR, ALERT, ALERT2, DATA_COMPLETENESS, CLASSIFICATION\");\n+          LOG.error(\"TaskType must be one of DATA_QUALITY, DETECTION, DETECTION_ALERT, YAML_DETECTION_ONBOARD, MONITOR\");\n           break;\n       }\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MTk1Nw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430861957", "bodyText": "Add a simple description for each task type.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:17:37Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java", "diffHunk": "@@ -26,15 +26,8 @@\n     DETECTION,\n     DETECTION_ALERT,\n     YAML_DETECTION_ONBOARD,\n-    ANOMALY_DETECTION,\n-    MERGE,\n     // TODO: deprecate ALERT task type\n-    ALERT,\n-    ALERT2,\n-    MONITOR,\n-    DATA_COMPLETENESS,\n-    CLASSIFICATION,\n-    REPLAY\n+    MONITOR", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMjYzOA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r431522638", "bodyText": "Added one line description each type.", "author": "vincentchenjl", "createdAt": "2020-05-28T00:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2d345700efcf3f62b12fc0b0021ce30a8723d744", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java\nindex 57f131d0c7..95ed5e18fe 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/task/TaskConstants.java\n\n@@ -22,12 +22,11 @@ package org.apache.pinot.thirdeye.anomaly.task;\n public class TaskConstants {\n \n   public enum TaskType {\n-    DATA_QUALITY,\n-    DETECTION,\n-    DETECTION_ALERT,\n-    YAML_DETECTION_ONBOARD,\n-    // TODO: deprecate ALERT task type\n-    MONITOR\n+    DATA_QUALITY,              // tasks to detect data quality anomalies\n+    DETECTION,                 // tasks to detect anomalies\n+    DETECTION_ALERT,           // tasks to send alerts to customers regarding anomalies\n+    YAML_DETECTION_ONBOARD,    // tasks to onboard new YAML configured detection\n+    MONITOR                    // tasks to clean up expired/invalid execution history\n   }\n \n   public enum TaskStatus {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MzY0Nw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430863647", "bodyText": "anomalyFunctionDAO is not used, including AnomalyFunctionManager.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:24:27Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/BaseThirdEyeApplication.java", "diffHunk": "@@ -51,11 +46,9 @@\n   protected final Logger LOG = LoggerFactory.getLogger(this.getClass());\n \n   protected AnomalyFunctionManager anomalyFunctionDAO;", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d345700efcf3f62b12fc0b0021ce30a8723d744", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/BaseThirdEyeApplication.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/BaseThirdEyeApplication.java\nindex 55e306a643..a168f36b11 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/BaseThirdEyeApplication.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/BaseThirdEyeApplication.java\n\n@@ -45,7 +43,6 @@ import org.slf4j.LoggerFactory;\n public abstract class BaseThirdEyeApplication<T extends Configuration> extends Application<T> {\n   protected final Logger LOG = LoggerFactory.getLogger(this.getClass());\n \n-  protected AnomalyFunctionManager anomalyFunctionDAO;\n   protected MergedAnomalyResultManager mergedAnomalyResultDAO;\n   protected DatasetConfigManager datasetConfigDAO;\n   protected MetricConfigManager metricConfigDAO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2Mzg2NA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430863864", "bodyText": "AnomalyFunctionFactory is not used.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:25:16Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java", "diffHunk": "@@ -160,14 +155,12 @@ public void run(ThirdEyeDashboardConfiguration config, Environment env)\n \n     AnomalyFunctionFactory anomalyFunctionFactory = new AnomalyFunctionFactory(config.getFunctionConfigPath());", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNjkzOA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r431526938", "bodyText": "anomalyFunctionFactory is used to initialize AnomalyResource, DataResource, and AnomaliesResource. Could we confirm all these three resources are not used?", "author": "vincentchenjl", "createdAt": "2020-05-28T01:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2Mzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0MjgzOA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r431942838", "bodyText": "@jihaozh can you check which resource is used? I believe most endpoints in AnomalyResource and AnomaliesResource are not used. From Harley's doc only \"/anomalies/search/time/\" is used, but let's double check with them.", "author": "xiaohui-sun", "createdAt": "2020-05-28T15:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2Mzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNDAxNw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r432004017", "bodyText": "I think AnomalyResource is not used.  In AnomaliesResource, only the search endpoints listed by Harley is used. DataResource is being used, but it shouldn't need anomalyFunctionFactory anymore.", "author": "jihaozh", "createdAt": "2020-05-28T17:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2Mzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4OTY1MQ==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r432789651", "bodyText": "When we search for anomalies by using /anomalies/search/time/, we construct AnomalyDetails, and it requires BaseAnomalyFunction to do it.", "author": "vincentchenjl", "createdAt": "2020-05-30T00:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2Mzg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "dbce47560652897c86789a64b373da3b9dbe7b98", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\nindex b48444acfc..251b675350 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\n\n@@ -160,15 +160,15 @@ public class ThirdEyeDashboardApplication\n     env.jersey().register(new DatasetAutoOnboardResource());\n     env.jersey().register(new DashboardResource());\n     env.jersey().register(new CacheResource());\n-    env.jersey().register(new AnomalyResource(anomalyFunctionFactory, alertFilterFactory));\n+    env.jersey().register(new AnomalyResource(alertFilterFactory));\n     env.jersey().register(new EntityManagerResource(config));\n     env.jersey().register(new MetricConfigResource());\n     env.jersey().register(new DatasetConfigResource());\n     env.jersey().register(new AdminResource());\n     env.jersey().register(new SummaryResource());\n     env.jersey().register(new ThirdEyeResource());\n-    env.jersey().register(new DataResource(anomalyFunctionFactory, alertFilterFactory));\n-    env.jersey().register(new AnomaliesResource(anomalyFunctionFactory, alertFilterFactory));\n+    env.jersey().register(new DataResource());\n+    env.jersey().register(new AnomaliesResource(anomalyFunctionFactory));\n     env.jersey().register(new EntityMappingResource());\n     env.jersey().register(new OnboardDatasetMetricResource());\n     env.jersey().register(new AutoOnboardResource(config));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDA5MA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430864090", "bodyText": "AlertFilterFactory is not used.\nAll the classes under org.apache.pinot.thirdeye.detector.email.filter are not used.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:26:09Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java", "diffHunk": "@@ -160,14 +155,12 @@ public void run(ThirdEyeDashboardConfiguration config, Environment env)\n \n     AnomalyFunctionFactory anomalyFunctionFactory = new AnomalyFunctionFactory(config.getFunctionConfigPath());\n     AlertFilterFactory alertFilterFactory = new AlertFilterFactory(config.getAlertFilterConfigPath());", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNzczMQ==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r431527731", "bodyText": "Same as above.", "author": "vincentchenjl", "createdAt": "2020-05-28T01:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "dbce47560652897c86789a64b373da3b9dbe7b98", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\nindex b48444acfc..251b675350 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\n\n@@ -160,15 +160,15 @@ public class ThirdEyeDashboardApplication\n     env.jersey().register(new DatasetAutoOnboardResource());\n     env.jersey().register(new DashboardResource());\n     env.jersey().register(new CacheResource());\n-    env.jersey().register(new AnomalyResource(anomalyFunctionFactory, alertFilterFactory));\n+    env.jersey().register(new AnomalyResource(alertFilterFactory));\n     env.jersey().register(new EntityManagerResource(config));\n     env.jersey().register(new MetricConfigResource());\n     env.jersey().register(new DatasetConfigResource());\n     env.jersey().register(new AdminResource());\n     env.jersey().register(new SummaryResource());\n     env.jersey().register(new ThirdEyeResource());\n-    env.jersey().register(new DataResource(anomalyFunctionFactory, alertFilterFactory));\n-    env.jersey().register(new AnomaliesResource(anomalyFunctionFactory, alertFilterFactory));\n+    env.jersey().register(new DataResource());\n+    env.jersey().register(new AnomaliesResource(anomalyFunctionFactory));\n     env.jersey().register(new EntityMappingResource());\n     env.jersey().register(new OnboardDatasetMetricResource());\n     env.jersey().register(new AutoOnboardResource(config));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDYyMw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430864623", "bodyText": "The above three lines are not used.\nenv.jersey().register(new DataResource(anomalyFunctionFactory, alertFilterFactory));\t    env.jersey().register(new DataResource(anomalyFunctionFactory, alertFilterFactory));\nenv.jersey().register(new AnomaliesResource(anomalyFunctionFactory, alertFilterFactory));", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:28:13Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java", "diffHunk": "@@ -181,7 +174,6 @@ public void run(ThirdEyeDashboardConfiguration config, Environment env)\n     env.jersey().register(new AutoOnboardResource(config));\n     env.jersey().register(new ConfigResource(DAO_REGISTRY.getConfigDAO()));\n     env.jersey().register(new CustomizedEventResource(DAO_REGISTRY.getEventDAO()));\n-    env.jersey().register(new TimeSeriesResource());", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbce47560652897c86789a64b373da3b9dbe7b98", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\nindex b48444acfc..251b675350 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/ThirdEyeDashboardApplication.java\n\n@@ -160,15 +160,15 @@ public class ThirdEyeDashboardApplication\n     env.jersey().register(new DatasetAutoOnboardResource());\n     env.jersey().register(new DashboardResource());\n     env.jersey().register(new CacheResource());\n-    env.jersey().register(new AnomalyResource(anomalyFunctionFactory, alertFilterFactory));\n+    env.jersey().register(new AnomalyResource(alertFilterFactory));\n     env.jersey().register(new EntityManagerResource(config));\n     env.jersey().register(new MetricConfigResource());\n     env.jersey().register(new DatasetConfigResource());\n     env.jersey().register(new AdminResource());\n     env.jersey().register(new SummaryResource());\n     env.jersey().register(new ThirdEyeResource());\n-    env.jersey().register(new DataResource(anomalyFunctionFactory, alertFilterFactory));\n-    env.jersey().register(new AnomaliesResource(anomalyFunctionFactory, alertFilterFactory));\n+    env.jersey().register(new DataResource());\n+    env.jersey().register(new AnomaliesResource(anomalyFunctionFactory));\n     env.jersey().register(new EntityMappingResource());\n     env.jersey().register(new OnboardDatasetMetricResource());\n     env.jersey().register(new AutoOnboardResource(config));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDg0MA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430864840", "bodyText": "This is not used.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:29:02Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java", "diffHunk": "@@ -101,21 +99,18 @@\n   private MergedAnomalyResultManager anomalyMergedResultDAO;\n   private AlertConfigManager emailConfigurationDAO;\n   private MergedAnomalyResultManager mergedAnomalyResultDAO;\n-  private AutotuneConfigManager autotuneConfigDAO;\n   private DatasetConfigManager datasetConfigDAO;\n   private AnomalyFunctionFactory anomalyFunctionFactory;\n   private AlertFilterFactory alertFilterFactory;\n   private LoadingCache<String, Long> collectionMaxDataTimeCache;\n \n   private static final DAORegistry DAO_REGISTRY = DAORegistry.getInstance();\n \n-  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory,\n-      AlertFilterAutotuneFactory alertFilterAutotuneFactory) {\n+  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory) {\n     this.anomalyFunctionDAO = DAO_REGISTRY.getAnomalyFunctionDAO();", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyOTI2Ng==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r431529266", "bodyText": "anomalyFunctionDAO is used in multiple places in this class.", "author": "vincentchenjl", "createdAt": "2020-05-28T01:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "dbce47560652897c86789a64b373da3b9dbe7b98", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\nindex 951fef249d..162e4a0259 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\n\n@@ -68,53 +44,31 @@ import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n-import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.joda.time.DateTime;\n-import org.joda.time.DateTimeZone;\n-import org.joda.time.Days;\n-import org.joda.time.Hours;\n-import org.joda.time.Interval;\n-import org.joda.time.Period;\n-import org.joda.time.Weeks;\n import org.joda.time.format.ISODateTimeFormat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import scala.Tuple2;\n \n \n @Path(value = \"/dashboard\")\n @Api(tags = { Constants.ANOMALY_TAG })\n @Produces(MediaType.APPLICATION_JSON)\n public class AnomalyResource {\n-  private static final ThirdEyeCacheRegistry CACHE_REGISTRY_INSTANCE = ThirdEyeCacheRegistry.getInstance();\n   private static final Logger LOG = LoggerFactory.getLogger(AnomalyResource.class);\n   private static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n   private static final String UTF8 = \"UTF-8\";\n \n-  private AnomalyFunctionManager anomalyFunctionDAO;\n   private MergedAnomalyResultManager anomalyMergedResultDAO;\n-  private AlertConfigManager emailConfigurationDAO;\n-  private MergedAnomalyResultManager mergedAnomalyResultDAO;\n-  private DatasetConfigManager datasetConfigDAO;\n-  private AnomalyFunctionFactory anomalyFunctionFactory;\n   private AlertFilterFactory alertFilterFactory;\n-  private LoadingCache<String, Long> collectionMaxDataTimeCache;\n \n   private static final DAORegistry DAO_REGISTRY = DAORegistry.getInstance();\n \n-  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory) {\n-    this.anomalyFunctionDAO = DAO_REGISTRY.getAnomalyFunctionDAO();\n+  public AnomalyResource(AlertFilterFactory alertFilterFactory) {\n     this.anomalyMergedResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.emailConfigurationDAO = DAO_REGISTRY.getAlertConfigDAO();\n-    this.mergedAnomalyResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.datasetConfigDAO = DAO_REGISTRY.getDatasetConfigDAO();\n-    this.anomalyFunctionFactory = anomalyFunctionFactory;\n     this.alertFilterFactory = alertFilterFactory;\n-    this.collectionMaxDataTimeCache = CACHE_REGISTRY_INSTANCE.getDatasetMaxDataTimeCache();\n   }\n \n   /************** CRUD for anomalies of a collection ********************************************************/\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTAwMw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430865003", "bodyText": "What is the difference between anomalyMergedResultDAO and mergedAnomalyResultDAO. Seems duplicate.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:29:37Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java", "diffHunk": "@@ -101,21 +99,18 @@\n   private MergedAnomalyResultManager anomalyMergedResultDAO;\n   private AlertConfigManager emailConfigurationDAO;\n   private MergedAnomalyResultManager mergedAnomalyResultDAO;\n-  private AutotuneConfigManager autotuneConfigDAO;\n   private DatasetConfigManager datasetConfigDAO;\n   private AnomalyFunctionFactory anomalyFunctionFactory;\n   private AlertFilterFactory alertFilterFactory;\n   private LoadingCache<String, Long> collectionMaxDataTimeCache;\n \n   private static final DAORegistry DAO_REGISTRY = DAORegistry.getInstance();\n \n-  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory,\n-      AlertFilterAutotuneFactory alertFilterAutotuneFactory) {\n+  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory) {\n     this.anomalyFunctionDAO = DAO_REGISTRY.getAnomalyFunctionDAO();\n     this.anomalyMergedResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyODA0MA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r431528040", "bodyText": "Both these two are used in the class. If we r sure AnomalyResource is not used, we can remove the whole class.", "author": "vincentchenjl", "createdAt": "2020-05-28T01:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzNTU1OQ==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r431935559", "bodyText": "The question is duplication. We should remove one of them.", "author": "xiaohui-sun", "createdAt": "2020-05-28T15:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "dbce47560652897c86789a64b373da3b9dbe7b98", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\nindex 951fef249d..162e4a0259 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\n\n@@ -68,53 +44,31 @@ import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n-import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.joda.time.DateTime;\n-import org.joda.time.DateTimeZone;\n-import org.joda.time.Days;\n-import org.joda.time.Hours;\n-import org.joda.time.Interval;\n-import org.joda.time.Period;\n-import org.joda.time.Weeks;\n import org.joda.time.format.ISODateTimeFormat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import scala.Tuple2;\n \n \n @Path(value = \"/dashboard\")\n @Api(tags = { Constants.ANOMALY_TAG })\n @Produces(MediaType.APPLICATION_JSON)\n public class AnomalyResource {\n-  private static final ThirdEyeCacheRegistry CACHE_REGISTRY_INSTANCE = ThirdEyeCacheRegistry.getInstance();\n   private static final Logger LOG = LoggerFactory.getLogger(AnomalyResource.class);\n   private static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n   private static final String UTF8 = \"UTF-8\";\n \n-  private AnomalyFunctionManager anomalyFunctionDAO;\n   private MergedAnomalyResultManager anomalyMergedResultDAO;\n-  private AlertConfigManager emailConfigurationDAO;\n-  private MergedAnomalyResultManager mergedAnomalyResultDAO;\n-  private DatasetConfigManager datasetConfigDAO;\n-  private AnomalyFunctionFactory anomalyFunctionFactory;\n   private AlertFilterFactory alertFilterFactory;\n-  private LoadingCache<String, Long> collectionMaxDataTimeCache;\n \n   private static final DAORegistry DAO_REGISTRY = DAORegistry.getInstance();\n \n-  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory) {\n-    this.anomalyFunctionDAO = DAO_REGISTRY.getAnomalyFunctionDAO();\n+  public AnomalyResource(AlertFilterFactory alertFilterFactory) {\n     this.anomalyMergedResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.emailConfigurationDAO = DAO_REGISTRY.getAlertConfigDAO();\n-    this.mergedAnomalyResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.datasetConfigDAO = DAO_REGISTRY.getDatasetConfigDAO();\n-    this.anomalyFunctionFactory = anomalyFunctionFactory;\n     this.alertFilterFactory = alertFilterFactory;\n-    this.collectionMaxDataTimeCache = CACHE_REGISTRY_INSTANCE.getDatasetMaxDataTimeCache();\n   }\n \n   /************** CRUD for anomalies of a collection ********************************************************/\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTA2OA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430865068", "bodyText": "This is not used.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:29:50Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java", "diffHunk": "@@ -101,21 +99,18 @@\n   private MergedAnomalyResultManager anomalyMergedResultDAO;\n   private AlertConfigManager emailConfigurationDAO;\n   private MergedAnomalyResultManager mergedAnomalyResultDAO;\n-  private AutotuneConfigManager autotuneConfigDAO;\n   private DatasetConfigManager datasetConfigDAO;\n   private AnomalyFunctionFactory anomalyFunctionFactory;\n   private AlertFilterFactory alertFilterFactory;\n   private LoadingCache<String, Long> collectionMaxDataTimeCache;\n \n   private static final DAORegistry DAO_REGISTRY = DAORegistry.getInstance();\n \n-  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory,\n-      AlertFilterAutotuneFactory alertFilterAutotuneFactory) {\n+  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory) {\n     this.anomalyFunctionDAO = DAO_REGISTRY.getAnomalyFunctionDAO();\n     this.anomalyMergedResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n     this.emailConfigurationDAO = DAO_REGISTRY.getAlertConfigDAO();\n     this.mergedAnomalyResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.autotuneConfigDAO = DAO_REGISTRY.getAutotuneConfigDAO();\n     this.datasetConfigDAO = DAO_REGISTRY.getDatasetConfigDAO();\n     this.anomalyFunctionFactory = anomalyFunctionFactory;", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbce47560652897c86789a64b373da3b9dbe7b98", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\nindex 951fef249d..162e4a0259 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\n\n@@ -68,53 +44,31 @@ import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n-import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.joda.time.DateTime;\n-import org.joda.time.DateTimeZone;\n-import org.joda.time.Days;\n-import org.joda.time.Hours;\n-import org.joda.time.Interval;\n-import org.joda.time.Period;\n-import org.joda.time.Weeks;\n import org.joda.time.format.ISODateTimeFormat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import scala.Tuple2;\n \n \n @Path(value = \"/dashboard\")\n @Api(tags = { Constants.ANOMALY_TAG })\n @Produces(MediaType.APPLICATION_JSON)\n public class AnomalyResource {\n-  private static final ThirdEyeCacheRegistry CACHE_REGISTRY_INSTANCE = ThirdEyeCacheRegistry.getInstance();\n   private static final Logger LOG = LoggerFactory.getLogger(AnomalyResource.class);\n   private static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n   private static final String UTF8 = \"UTF-8\";\n \n-  private AnomalyFunctionManager anomalyFunctionDAO;\n   private MergedAnomalyResultManager anomalyMergedResultDAO;\n-  private AlertConfigManager emailConfigurationDAO;\n-  private MergedAnomalyResultManager mergedAnomalyResultDAO;\n-  private DatasetConfigManager datasetConfigDAO;\n-  private AnomalyFunctionFactory anomalyFunctionFactory;\n   private AlertFilterFactory alertFilterFactory;\n-  private LoadingCache<String, Long> collectionMaxDataTimeCache;\n \n   private static final DAORegistry DAO_REGISTRY = DAORegistry.getInstance();\n \n-  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory) {\n-    this.anomalyFunctionDAO = DAO_REGISTRY.getAnomalyFunctionDAO();\n+  public AnomalyResource(AlertFilterFactory alertFilterFactory) {\n     this.anomalyMergedResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.emailConfigurationDAO = DAO_REGISTRY.getAlertConfigDAO();\n-    this.mergedAnomalyResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.datasetConfigDAO = DAO_REGISTRY.getDatasetConfigDAO();\n-    this.anomalyFunctionFactory = anomalyFunctionFactory;\n     this.alertFilterFactory = alertFilterFactory;\n-    this.collectionMaxDataTimeCache = CACHE_REGISTRY_INSTANCE.getDatasetMaxDataTimeCache();\n   }\n \n   /************** CRUD for anomalies of a collection ********************************************************/\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTIxMw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430865213", "bodyText": "Not used.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:30:23Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java", "diffHunk": "@@ -101,21 +99,18 @@\n   private MergedAnomalyResultManager anomalyMergedResultDAO;\n   private AlertConfigManager emailConfigurationDAO;\n   private MergedAnomalyResultManager mergedAnomalyResultDAO;\n-  private AutotuneConfigManager autotuneConfigDAO;\n   private DatasetConfigManager datasetConfigDAO;\n   private AnomalyFunctionFactory anomalyFunctionFactory;\n   private AlertFilterFactory alertFilterFactory;", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MDQ0MA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r432790440", "bodyText": "It is used in line 141.\nanomalyResults = AlertFilterHelper.applyFiltrationRule(anomalyResults, alertFilterFactory);", "author": "vincentchenjl", "createdAt": "2020-05-30T00:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "dbce47560652897c86789a64b373da3b9dbe7b98", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\nindex 951fef249d..162e4a0259 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/AnomalyResource.java\n\n@@ -68,53 +44,31 @@ import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n-import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.joda.time.DateTime;\n-import org.joda.time.DateTimeZone;\n-import org.joda.time.Days;\n-import org.joda.time.Hours;\n-import org.joda.time.Interval;\n-import org.joda.time.Period;\n-import org.joda.time.Weeks;\n import org.joda.time.format.ISODateTimeFormat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import scala.Tuple2;\n \n \n @Path(value = \"/dashboard\")\n @Api(tags = { Constants.ANOMALY_TAG })\n @Produces(MediaType.APPLICATION_JSON)\n public class AnomalyResource {\n-  private static final ThirdEyeCacheRegistry CACHE_REGISTRY_INSTANCE = ThirdEyeCacheRegistry.getInstance();\n   private static final Logger LOG = LoggerFactory.getLogger(AnomalyResource.class);\n   private static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n   private static final String UTF8 = \"UTF-8\";\n \n-  private AnomalyFunctionManager anomalyFunctionDAO;\n   private MergedAnomalyResultManager anomalyMergedResultDAO;\n-  private AlertConfigManager emailConfigurationDAO;\n-  private MergedAnomalyResultManager mergedAnomalyResultDAO;\n-  private DatasetConfigManager datasetConfigDAO;\n-  private AnomalyFunctionFactory anomalyFunctionFactory;\n   private AlertFilterFactory alertFilterFactory;\n-  private LoadingCache<String, Long> collectionMaxDataTimeCache;\n \n   private static final DAORegistry DAO_REGISTRY = DAORegistry.getInstance();\n \n-  public AnomalyResource(AnomalyFunctionFactory anomalyFunctionFactory, AlertFilterFactory alertFilterFactory) {\n-    this.anomalyFunctionDAO = DAO_REGISTRY.getAnomalyFunctionDAO();\n+  public AnomalyResource(AlertFilterFactory alertFilterFactory) {\n     this.anomalyMergedResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.emailConfigurationDAO = DAO_REGISTRY.getAlertConfigDAO();\n-    this.mergedAnomalyResultDAO = DAO_REGISTRY.getMergedAnomalyResultDAO();\n-    this.datasetConfigDAO = DAO_REGISTRY.getDatasetConfigDAO();\n-    this.anomalyFunctionFactory = anomalyFunctionFactory;\n     this.alertFilterFactory = alertFilterFactory;\n-    this.collectionMaxDataTimeCache = CACHE_REGISTRY_INSTANCE.getDatasetMaxDataTimeCache();\n   }\n \n   /************** CRUD for anomalies of a collection ********************************************************/\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTUxOQ==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430865519", "bodyText": "Not used.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:31:05Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/pojo/DatasetConfigBean.java", "diffHunk": "@@ -93,10 +89,6 @@\n   private boolean requiresCompletenessCheck = false;", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f111aafa93b85394f1dc223241a0c4f93e6b5a", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/pojo/DatasetConfigBean.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/pojo/DatasetConfigBean.java\nindex a0236093ad..cf89627102 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/pojo/DatasetConfigBean.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/pojo/DatasetConfigBean.java\n\n@@ -86,7 +86,6 @@ public class DatasetConfigBean extends AbstractBean {\n \n   private boolean realtime = false;\n \n-  private boolean requiresCompletenessCheck = false;\n   // delay expected for a dataset for data to arrive\n   private TimeGranularity expectedDelay = DEFAULT_DAILY_EXPECTED_DELAY;\n   // latest timestamp of the dataset updated by external events\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTc1MA==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r430865750", "bodyText": "Not used.", "author": "xiaohui-sun", "createdAt": "2020-05-27T05:31:54Z", "path": "thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/datalayer/DaoTestUtils.java", "diffHunk": "@@ -275,22 +273,6 @@ public static DetectionStatusDTO getTestDetectionStatus(String dataset, long dat\n     return detectionStatusDTO;\n   }\n \n-  public static AutotuneConfigDTO getTestAutotuneConfig(long functionId, long start, long end) {\n-    AutotuneConfigDTO autotuneConfigDTO = new AutotuneConfigDTO();\n-    autotuneConfigDTO.setFunctionId(functionId);\n-    autotuneConfigDTO.setStartTime(start);\n-    autotuneConfigDTO.setEndTime(end);\n-    autotuneConfigDTO.setPerformanceEvaluationMethod(PerformanceEvaluationMethod.ANOMALY_PERCENTAGE);\n-    autotuneConfigDTO.setLastUpdateTimestamp(DateTime.now().getMillis());\n-    Map<String, String> config = new HashMap<>();\n-    config.put(\"ConfigKey\", \"ConfigValue\");\n-    autotuneConfigDTO.setConfiguration(config);\n-    Map<String, Double> performance = new HashMap<>();\n-    performance.put(autotuneConfigDTO.getPerformanceEvaluationMethod().name(), 0.5);\n-    autotuneConfigDTO.setPerformance(performance);\n-    return autotuneConfigDTO;\n-  }\n-\n   public static ClassificationConfigDTO getTestClassificationConfig(String name, List<Long> mainFunctionIdList,", "originalCommit": "6f6e945a49fecadf9acc246240153c938b855d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyODcxNw==", "url": "https://github.com/apache/pinot/pull/5435#discussion_r431528717", "bodyText": "This can be removed in next PR with all the unused DAO objects.", "author": "vincentchenjl", "createdAt": "2020-05-28T01:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NTc1MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2d345700efcf3f62b12fc0b0021ce30a8723d744", "url": "https://github.com/apache/pinot/commit/2d345700efcf3f62b12fc0b0021ce30a8723d744", "message": "more cleanup from PR comments", "committedDate": "2020-05-28T00:48:46Z", "type": "commit"}, {"oid": "d8f111aafa93b85394f1dc223241a0c4f93e6b5a", "url": "https://github.com/apache/pinot/commit/d8f111aafa93b85394f1dc223241a0c4f93e6b5a", "message": "minor change", "committedDate": "2020-05-28T00:57:24Z", "type": "commit"}, {"oid": "dbce47560652897c86789a64b373da3b9dbe7b98", "url": "https://github.com/apache/pinot/commit/dbce47560652897c86789a64b373da3b9dbe7b98", "message": "more cleanup", "committedDate": "2020-05-30T00:22:56Z", "type": "commit"}]}