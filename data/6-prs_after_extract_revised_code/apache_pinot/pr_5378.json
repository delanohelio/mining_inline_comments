{"pr_number": 5378, "pr_title": "The last of the getTimeFieldSpec calls", "pr_createdAt": "2020-05-12T23:42:36Z", "pr_url": "https://github.com/apache/pinot/pull/5378", "timeline": [{"oid": "bd56c7ec2b18067bb9ea91899c636892cc0adbbf", "url": "https://github.com/apache/pinot/commit/bd56c7ec2b18067bb9ea91899c636892cc0adbbf", "message": "The last of the getTimeFieldSpec calls", "committedDate": "2020-05-15T16:34:27Z", "type": "commit"}, {"oid": "b3820502f69ae70724cc06136485ed2668513123", "url": "https://github.com/apache/pinot/commit/b3820502f69ae70724cc06136485ed2668513123", "message": "Use right call", "committedDate": "2020-05-15T16:34:27Z", "type": "commit"}, {"oid": "540db6c3217fc5eeffe9c61013ae6c1e6072f424", "url": "https://github.com/apache/pinot/commit/540db6c3217fc5eeffe9c61013ae6c1e6072f424", "message": "Fix tests", "committedDate": "2020-05-15T16:48:08Z", "type": "commit"}, {"oid": "540db6c3217fc5eeffe9c61013ae6c1e6072f424", "url": "https://github.com/apache/pinot/commit/540db6c3217fc5eeffe9c61013ae6c1e6072f424", "message": "Fix tests", "committedDate": "2020-05-15T16:48:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMDE0NA==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426030144", "bodyText": "We need to remove the time transform here because the time has already been transformed.\nPlease also update the javadoc", "author": "Jackie-Jiang", "createdAt": "2020-05-15T20:25:21Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/realtime/converter/RealtimeSegmentConverter.java", "diffHunk": "@@ -156,20 +156,8 @@ public void build(@Nullable SegmentVersion segmentVersion, ServerMetrics serverM\n   @VisibleForTesting\n   public Schema getUpdatedSchema(Schema original) {", "originalCommit": "540db6c3217fc5eeffe9c61013ae6c1e6072f424", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NzYwMQ==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426057601", "bodyText": "I believe we don't need to change the schema because:\n\nThe RecordTransformer is a pass through\nThe RecordReader is just looping over physical column names so it only has outgoing\n\nWe shouldn't need to remove incoming, because that implies that we need to remove transform functions from all field specs.", "author": "npawar", "createdAt": "2020-05-15T21:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMDE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "a272a8d897241cf405c6f32971a49441dabcb951", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/realtime/converter/RealtimeSegmentConverter.java b/pinot-core/src/main/java/org/apache/pinot/core/realtime/converter/RealtimeSegmentConverter.java\nindex 3f4847b24a..f8e5098477 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/realtime/converter/RealtimeSegmentConverter.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/realtime/converter/RealtimeSegmentConverter.java\n\n@@ -150,8 +150,7 @@ public class RealtimeSegmentConverter {\n   }\n \n   /**\n-   * Returns a new schema based on the original one. The new schema removes columns as needed (for ex, virtual cols)\n-   * and adds the new timespec to the schema.\n+   * Returns a new schema containing only physical columns\n    */\n   @VisibleForTesting\n   public Schema getUpdatedSchema(Schema original) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMTQ0Mw==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426031443", "bodyText": "Annotate timeColumnName as nullable or check it on the caller side", "author": "Jackie-Jiang", "createdAt": "2020-05-15T20:28:21Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfig.java", "diffHunk": "@@ -182,42 +180,21 @@ public SegmentGeneratorConfig(TableConfig tableConfig, Schema schema) {\n   }\n \n   /**\n-   * Set time column details using the given time column. If not found, use schema\n+   * Set time column details using the given time column\n    */\n   public void setTime(String timeColumnName, Schema schema) {", "originalCommit": "540db6c3217fc5eeffe9c61013ae6c1e6072f424", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a272a8d897241cf405c6f32971a49441dabcb951", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfig.java b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfig.java\nindex 34a16947b9..59531feb50 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfig.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfig.java\n\n@@ -182,7 +183,7 @@ public class SegmentGeneratorConfig {\n   /**\n    * Set time column details using the given time column\n    */\n-  public void setTime(String timeColumnName, Schema schema) {\n+  public void setTime(@Nullable String timeColumnName, Schema schema) {\n     if (timeColumnName != null) {\n       DateTimeFieldSpec dateTimeFieldSpec = schema.getSpecForTimeColumn(timeColumnName);\n       if (dateTimeFieldSpec != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMTgyOQ==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426031829", "bodyText": "Remove this line?", "author": "Jackie-Jiang", "createdAt": "2020-05-15T20:29:21Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java", "diffHunk": "@@ -48,14 +48,12 @@ public void testEpochTime() {\n     assertNull(segmentGeneratorConfig.getSimpleDateFormat());\n \n     // table config not provided", "originalCommit": "540db6c3217fc5eeffe9c61013ae6c1e6072f424", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a272a8d897241cf405c6f32971a49441dabcb951", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java b/pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java\nindex 346899544f..05e8a7d394 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java\n\n@@ -40,14 +40,12 @@ public class SegmentGeneratorConfigTest {\n         .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"), null).build();\n     TableConfig tableConfig =\n         new TableConfigBuilder(TableType.OFFLINE).setTableName(\"test\").setTimeColumnName(\"daysSinceEpoch\").build();\n-    // table config provided\n     SegmentGeneratorConfig segmentGeneratorConfig = new SegmentGeneratorConfig(tableConfig, schema);\n     assertEquals(segmentGeneratorConfig.getTimeColumnName(), \"daysSinceEpoch\");\n     assertEquals(segmentGeneratorConfig.getTimeColumnType(), SegmentGeneratorConfig.TimeColumnType.EPOCH);\n     assertEquals(segmentGeneratorConfig.getSegmentTimeUnit(), TimeUnit.DAYS);\n     assertNull(segmentGeneratorConfig.getSimpleDateFormat());\n \n-    // table config not provided\n     // MUST provide valid tableConfig with time column if time details are wanted\n     tableConfig =\n         new TableConfigBuilder(TableType.OFFLINE).setTableName(\"test\").build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMTg1OQ==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426031859", "bodyText": "Remove this line?", "author": "Jackie-Jiang", "createdAt": "2020-05-15T20:29:24Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java", "diffHunk": "@@ -74,14 +72,12 @@ public void testSimpleDateFormat() {\n     assertEquals(segmentGeneratorConfig.getSimpleDateFormat(), \"yyyyMMdd\");\n \n     // Table config not provided", "originalCommit": "540db6c3217fc5eeffe9c61013ae6c1e6072f424", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a272a8d897241cf405c6f32971a49441dabcb951", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java b/pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java\nindex 346899544f..05e8a7d394 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfigTest.java\n\n@@ -64,14 +62,12 @@ public class SegmentGeneratorConfigTest {\n     TableConfig tableConfig =\n         new TableConfigBuilder(TableType.OFFLINE).setTableName(\"test\").setTimeColumnName(\"Date\").build();\n \n-    // Table config provided\n     SegmentGeneratorConfig segmentGeneratorConfig = new SegmentGeneratorConfig(tableConfig, schema);\n     assertEquals(segmentGeneratorConfig.getTimeColumnName(), \"Date\");\n     assertEquals(segmentGeneratorConfig.getTimeColumnType(), SegmentGeneratorConfig.TimeColumnType.SIMPLE_DATE);\n     assertNull(segmentGeneratorConfig.getSegmentTimeUnit());\n     assertEquals(segmentGeneratorConfig.getSimpleDateFormat(), \"yyyyMMdd\");\n \n-    // Table config not provided\n     // MUST provide valid tableConfig with time column if time details are wanted\n     tableConfig =\n         new TableConfigBuilder(TableType.OFFLINE).setTableName(\"test\").build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMjQzMQ==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426032431", "bodyText": "Do we still want this support? (Realtime table without time column)", "author": "Jackie-Jiang", "createdAt": "2020-05-15T20:30:46Z", "path": "pinot-core/src/test/java/org/apache/pinot/realtime/converter/RealtimeSegmentConverterTest.java", "diffHunk": "@@ -46,28 +46,11 @@ public void testNoVirtualColumnsInSchema() {\n     String segmentName = \"segment1\";\n     VirtualColumnProviderFactory.addBuiltInVirtualColumnsToSegmentSchema(schema, segmentName);\n     Assert.assertEquals(schema.getColumnNames().size(), 5);\n-    Assert.assertEquals(schema.getTimeFieldSpec().getIncomingGranularitySpec().getTimeType(), TimeUnit.MILLISECONDS);\n \n     RealtimeSegmentConverter converter =\n         new RealtimeSegmentConverter(null, \"\", schema, \"testTable\", tableConfig, segmentName, \"col1\");\n \n     Schema newSchema = converter.getUpdatedSchema(schema);\n     Assert.assertEquals(newSchema.getColumnNames().size(), 2);\n-    Assert.assertEquals(newSchema.getTimeFieldSpec().getIncomingGranularitySpec().getTimeType(), TimeUnit.DAYS);\n-  }\n-\n-  @Test\n-  public void testNoTimeColumnsInSchema() {\n-    Schema schema = new Schema();", "originalCommit": "540db6c3217fc5eeffe9c61013ae6c1e6072f424", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1ODA3Nw==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426058077", "bodyText": "realtime table without time will never happen right?\nAlso after changing the getUpdatedSchema method, this test becomes irrelevant", "author": "npawar", "createdAt": "2020-05-15T21:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMjQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NDQ0Mg==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426064442", "bodyText": "I think @fx19880617 added that support. Any opinion on this?", "author": "Jackie-Jiang", "createdAt": "2020-05-15T21:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMjQzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMzEwOA==", "url": "https://github.com/apache/pinot/pull/5378#discussion_r426033108", "bodyText": "Move getColumnNames() out of the loop", "author": "Jackie-Jiang", "createdAt": "2020-05-15T20:32:27Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -582,10 +582,6 @@ public boolean equals(Object o) {\n    */\n \n   public boolean isBackwardCompatibleWith(Schema oldSchema) {\n-    if (!EqualityUtils.isEqual(_timeFieldSpec, oldSchema.getTimeFieldSpec()) || !EqualityUtils\n-        .isEqual(_dateTimeFieldSpecs, oldSchema.getDateTimeFieldSpecs())) {\n-      return false;\n-    }\n     for (Map.Entry<String, FieldSpec> entry : oldSchema.getFieldSpecMap().entrySet()) {\n       if (!getColumnNames().contains(entry.getKey())) {", "originalCommit": "540db6c3217fc5eeffe9c61013ae6c1e6072f424", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a272a8d897241cf405c6f32971a49441dabcb951", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java b/pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java\nindex 1075c73f22..065983961b 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java\n\n@@ -578,15 +578,18 @@ public final class Schema {\n    * Backward compatibility requires all columns and fieldSpec in oldSchema should be retained.\n    *\n    * @param oldSchema old schema\n-   * @return\n    */\n \n   public boolean isBackwardCompatibleWith(Schema oldSchema) {\n+    Set<String> columnNames = getColumnNames();\n     for (Map.Entry<String, FieldSpec> entry : oldSchema.getFieldSpecMap().entrySet()) {\n-      if (!getColumnNames().contains(entry.getKey())) {\n+      String oldSchemaColumnName = entry.getKey();\n+      if (!columnNames.contains(oldSchemaColumnName)) {\n         return false;\n       }\n-      if (!getFieldSpecFor(entry.getKey()).equals(entry.getValue())) {\n+      FieldSpec oldSchemaFieldSpec = entry.getValue();\n+      FieldSpec fieldSpec = getFieldSpecFor(oldSchemaColumnName);\n+      if (!fieldSpec.equals(oldSchemaFieldSpec)) {\n         return false;\n       }\n     }\n"}}, {"oid": "a272a8d897241cf405c6f32971a49441dabcb951", "url": "https://github.com/apache/pinot/commit/a272a8d897241cf405c6f32971a49441dabcb951", "message": "Review comments", "committedDate": "2020-05-15T21:49:25Z", "type": "commit"}]}