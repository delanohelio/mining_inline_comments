{"pr_number": 5631, "pr_title": "Add the message constraint on all instances in Helix", "pr_createdAt": "2020-06-27T03:28:43Z", "pr_url": "https://github.com/apache/pinot/pull/5631", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NDA1Mw==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r448064053", "bodyText": "No need to use guava for this. We have experienced several backward-incompatible issues with guava.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = Maps.newHashMap();\n          \n          \n            \n                Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = new HashMap()<>;", "author": "Jackie-Jiang", "createdAt": "2020-07-01T01:19:39Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "diffHunk": "@@ -202,6 +209,18 @@ private void setupHelixSystemProperties() {\n             CommonConstants.Helix.DEFAULT_FLAPPING_TIME_WINDOW_MS));\n   }\n \n+  private void setupHelixClusterConstraints() {\n+    String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_MESSAGES,\n+        CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_MESSAGES);\n+    Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = Maps.newHashMap();", "originalCommit": "d255b3589141187836eb2b5371a86ff6cd36e912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MTM4Nw==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r448581387", "bodyText": "Good to know this. thanks", "author": "yupeng9", "createdAt": "2020-07-01T19:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NDA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "143969386b34477398c92d889cd005b5c3ec8bf3", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\nindex 3d4dbbcbb4..6aaf2a3e32 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n\n@@ -205,7 +205,7 @@ public class ControllerStarter implements ServiceStartable {\n     // from ZooKeeper). Setting flapping time window to a small value can avoid this from happening. Helix ignores the\n     // non-positive value, so set the default value as 1.\n     System.setProperty(SystemPropertyKeys.FLAPPING_TIME_WINDOW, _config\n-        .getString(CommonConstants.Helix.CONFIG_OF_CONTROLLER_FLAPPING_TIME_WINDOW_MS,\n+        .getProperty(CommonConstants.Helix.CONFIG_OF_CONTROLLER_FLAPPING_TIME_WINDOW_MS,\n             CommonConstants.Helix.DEFAULT_FLAPPING_TIME_WINDOW_MS));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NzQyMQ==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r448067421", "bodyText": "Recommend renaming it for clarity and add some comments on how it works (limit the maximum number of state transitions for each instance):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String CONFIG_OF_HELIX_INSTANCE_MAX_MESSAGES = \"pinot.helix.instance.messages.max\";\n          \n          \n            \n                public static final String CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS = \"pinot.helix.instance.maxStateTransitions\";", "author": "Jackie-Jiang", "createdAt": "2020-07-01T01:33:38Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -109,6 +109,8 @@\n     public static final String CONFIG_OF_BROKER_FLAPPING_TIME_WINDOW_MS = \"pinot.broker.flapping.timeWindowMs\";\n     public static final String CONFIG_OF_SERVER_FLAPPING_TIME_WINDOW_MS = \"pinot.server.flapping.timeWindowMs\";\n     public static final String CONFIG_OF_MINION_FLAPPING_TIME_WINDOW_MS = \"pinot.minion.flapping.timeWindowMs\";\n+    public static final String CONFIG_OF_HELIX_INSTANCE_MAX_MESSAGES = \"pinot.helix.instance.messages.max\";", "originalCommit": "d255b3589141187836eb2b5371a86ff6cd36e912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3aad614e1d12e61605d2d46bb8ad79f79f995633", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\nindex cb6525a23b..596629cd67 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\n\n@@ -109,8 +111,8 @@ public class CommonConstants {\n     public static final String CONFIG_OF_BROKER_FLAPPING_TIME_WINDOW_MS = \"pinot.broker.flapping.timeWindowMs\";\n     public static final String CONFIG_OF_SERVER_FLAPPING_TIME_WINDOW_MS = \"pinot.server.flapping.timeWindowMs\";\n     public static final String CONFIG_OF_MINION_FLAPPING_TIME_WINDOW_MS = \"pinot.minion.flapping.timeWindowMs\";\n-    public static final String CONFIG_OF_HELIX_INSTANCE_MAX_MESSAGES = \"pinot.helix.instance.messages.max\";\n-    public static final String DEFAULT_HELIX_INSTANCE_MAX_MESSAGES = \"100000\";\n+    public static final String CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS = \"pinot.helix.instance.state.transitions.max\";\n+    public static final String DEFAULT_HELIX_INSTANCE_MAX_STATE_TRANSITIONS = \"10000000\";\n     public static final String DEFAULT_FLAPPING_TIME_WINDOW_MS = \"1\";\n \n     public static final String PINOT_SERVICE_ROLE = \"pinot.service.role\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NzU4MQ==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r448067581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String MAX_MESSAGES_PER_INSTANCE_NAME =  \"MaxMessagesPerInstance\";\n          \n          \n            \n              private static final String MAX_STATE_TRANSITIONS_PER_INSTANCE =  \"MaxStateTransitionsPerInstance\";", "author": "Jackie-Jiang", "createdAt": "2020-07-01T01:34:18Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "diffHunk": "@@ -97,6 +103,7 @@\n   private static final Long DATA_DIRECTORY_MISSING_VALUE = 1000000L;\n   private static final Long DATA_DIRECTORY_EXCEPTION_VALUE = 1100000L;\n   private static final String METADATA_EVENT_NOTIFIER_PREFIX = \"metadata.event.notifier\";\n+  private static final String MAX_MESSAGES_PER_INSTANCE_NAME =  \"MaxMessagesPerInstance\";", "originalCommit": "d255b3589141187836eb2b5371a86ff6cd36e912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3aad614e1d12e61605d2d46bb8ad79f79f995633", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\nindex 3d4dbbcbb4..7603192819 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n\n@@ -103,7 +103,7 @@ public class ControllerStarter implements ServiceStartable {\n   private static final Long DATA_DIRECTORY_MISSING_VALUE = 1000000L;\n   private static final Long DATA_DIRECTORY_EXCEPTION_VALUE = 1100000L;\n   private static final String METADATA_EVENT_NOTIFIER_PREFIX = \"metadata.event.notifier\";\n-  private static final String MAX_MESSAGES_PER_INSTANCE_NAME =  \"MaxMessagesPerInstance\";\n+  private static final String MAX_STATE_TRANSITIONS_PER_INSTANCE =  \"MaxStateTransitionsPerInstance\";\n \n   private final ControllerConf _config;\n   private final List<ListenerConfig> _listenerConfigs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NzgyNw==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r448067827", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                constraintAttributes.put(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE, \"STATE_TRANSITION\");\n          \n          \n            \n                constraintAttributes.put(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE, Message.MessageType.STATE_TRANSITION.name());", "author": "Jackie-Jiang", "createdAt": "2020-07-01T01:35:18Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "diffHunk": "@@ -202,6 +209,18 @@ private void setupHelixSystemProperties() {\n             CommonConstants.Helix.DEFAULT_FLAPPING_TIME_WINDOW_MS));\n   }\n \n+  private void setupHelixClusterConstraints() {\n+    String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_MESSAGES,\n+        CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_MESSAGES);\n+    Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = Maps.newHashMap();\n+    constraintAttributes.put(ClusterConstraints.ConstraintAttribute.INSTANCE, \".*\");\n+    constraintAttributes.put(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE, \"STATE_TRANSITION\");", "originalCommit": "d255b3589141187836eb2b5371a86ff6cd36e912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "143969386b34477398c92d889cd005b5c3ec8bf3", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\nindex 3d4dbbcbb4..6aaf2a3e32 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n\n@@ -205,7 +205,7 @@ public class ControllerStarter implements ServiceStartable {\n     // from ZooKeeper). Setting flapping time window to a small value can avoid this from happening. Helix ignores the\n     // non-positive value, so set the default value as 1.\n     System.setProperty(SystemPropertyKeys.FLAPPING_TIME_WINDOW, _config\n-        .getString(CommonConstants.Helix.CONFIG_OF_CONTROLLER_FLAPPING_TIME_WINDOW_MS,\n+        .getProperty(CommonConstants.Helix.CONFIG_OF_CONTROLLER_FLAPPING_TIME_WINDOW_MS,\n             CommonConstants.Helix.DEFAULT_FLAPPING_TIME_WINDOW_MS));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODM2Ng==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r448068366", "bodyText": "We should not set this for Pinot controller but only for Helix controller", "author": "Jackie-Jiang", "createdAt": "2020-07-01T01:37:23Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "diffHunk": "@@ -350,6 +377,9 @@ private void setUpPinotController() {\n       _realtimeSegmentsManager = null;\n     }\n \n+    // setup constraints\n+    setupHelixClusterConstraints();", "originalCommit": "d255b3589141187836eb2b5371a86ff6cd36e912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MzYwNg==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r448593606", "bodyText": "But then no constraint is added during PINOT_ONLY mode?", "author": "yupeng9", "createdAt": "2020-07-01T20:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwNjY5Ng==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r449206696", "bodyText": "PINOT_ONLY mode controller does not serve as the Helix controller, so it should not add this constraint to the cluster.", "author": "Jackie-Jiang", "createdAt": "2020-07-02T18:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzNTc5Mg==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r449335792", "bodyText": "Got it. thanks", "author": "yupeng9", "createdAt": "2020-07-03T01:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0ec89513c1ac2e31b3ccf0d105fe9e58cccf2235", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\nindex 3d4dbbcbb4..69cdaace6f 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n\n@@ -377,9 +374,6 @@ public class ControllerStarter implements ServiceStartable {\n       _realtimeSegmentsManager = null;\n     }\n \n-    // setup constraints\n-    setupHelixClusterConstraints();\n-\n     // Setting up periodic tasks\n     List<PeriodicTask> controllerPeriodicTasks = setupControllerPeriodicTasks();\n     LOGGER.info(\"Init controller periodic tasks scheduler\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMTU5Nw==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r449711597", "bodyText": "While this may be a good thing to do, we have often experienced issues with helix, especially the undocumented features. Can we at least make this so that if the config is not set, then we leave the behavior like before?\nMeanwhile. I have asked someone from the helix team to take a look at this.", "author": "mcvsubbu", "createdAt": "2020-07-03T22:09:01Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "diffHunk": "@@ -202,6 +209,20 @@ private void setupHelixSystemProperties() {\n             CommonConstants.Helix.DEFAULT_FLAPPING_TIME_WINDOW_MS));\n   }\n \n+  private void setupHelixClusterConstraints() {\n+    String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS,\n+        CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_STATE_TRANSITIONS);\n+    Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = new HashMap<>();\n+    constraintAttributes.put(ClusterConstraints.ConstraintAttribute.INSTANCE, \".*\");\n+    constraintAttributes\n+        .put(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE, Message.MessageType.STATE_TRANSITION.name());\n+    ConstraintItem constraintItem = new ConstraintItem(constraintAttributes, maxMessageLimit);\n+\n+    _helixControllerManager.getClusterManagmentTool()", "originalCommit": "ef30557e5b30a85b3dc94e5a4144be4496561b87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzA1Mg==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r449787052", "bodyText": "Sure. Please have the helix team take a look.\nThere is some caveat of not adding the constraint when the config is not set: do we need to add logic removing the constraint if the config is not present? Otherwise it's possible that the constraint is left there, when users remove this configuration. What about if there are inconsistent configurations, with the configuration set on one controller but not others (which will lead to race condition)? Usually having the configuration with a default value makes such issues more manageable.", "author": "yupeng9", "createdAt": "2020-07-04T16:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMTU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyMDE1Mw==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r454020153", "bodyText": "@mcvsubbu with Junkai's assessment, do you still have concerns on the current approach, given it's a safe change for better zookeeper scalability?\nI prefer the current way since it simplifies the configuration story, i.e. no need to use external Helix admin to clean up constraint etc.", "author": "yupeng9", "createdAt": "2020-07-14T00:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMTU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "143969386b34477398c92d889cd005b5c3ec8bf3", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\nindex c9daab2ac9..6aaf2a3e32 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n\n@@ -205,22 +205,20 @@ public class ControllerStarter implements ServiceStartable {\n     // from ZooKeeper). Setting flapping time window to a small value can avoid this from happening. Helix ignores the\n     // non-positive value, so set the default value as 1.\n     System.setProperty(SystemPropertyKeys.FLAPPING_TIME_WINDOW, _config\n-        .getString(CommonConstants.Helix.CONFIG_OF_CONTROLLER_FLAPPING_TIME_WINDOW_MS,\n+        .getProperty(CommonConstants.Helix.CONFIG_OF_CONTROLLER_FLAPPING_TIME_WINDOW_MS,\n             CommonConstants.Helix.DEFAULT_FLAPPING_TIME_WINDOW_MS));\n   }\n \n   private void setupHelixClusterConstraints() {\n-    String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS,\n-        CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_STATE_TRANSITIONS);\n-    Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = new HashMap<>();\n+    String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_MESSAGES,\n+        CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_MESSAGES);\n+    Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = Maps.newHashMap();\n     constraintAttributes.put(ClusterConstraints.ConstraintAttribute.INSTANCE, \".*\");\n-    constraintAttributes\n-        .put(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE, Message.MessageType.STATE_TRANSITION.name());\n+    constraintAttributes.put(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE, \"STATE_TRANSITION\");\n     ConstraintItem constraintItem = new ConstraintItem(constraintAttributes, maxMessageLimit);\n \n-    _helixControllerManager.getClusterManagmentTool()\n-        .setConstraint(_helixClusterName, ClusterConstraints.ConstraintType.MESSAGE_CONSTRAINT,\n-            MAX_STATE_TRANSITIONS_PER_INSTANCE, constraintItem);\n+    getHelixAdmin().setConstraint(_helixClusterName, ClusterConstraints.ConstraintType.MESSAGE_CONSTRAINT,\n+        MAX_MESSAGES_PER_INSTANCE_NAME, constraintItem);\n   }\n \n   public PinotHelixResourceManager getHelixResourceManager() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0ODk2Mw==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r454048963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS = \"pinot.helix.instance.state.transitions.max\";\n          \n          \n            \n                public static final String CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS = \"pinot.helix.instance.maxStateTransitions\";", "author": "Jackie-Jiang", "createdAt": "2020-07-14T01:48:08Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -109,6 +109,8 @@\n     public static final String CONFIG_OF_BROKER_FLAPPING_TIME_WINDOW_MS = \"pinot.broker.flapping.timeWindowMs\";\n     public static final String CONFIG_OF_SERVER_FLAPPING_TIME_WINDOW_MS = \"pinot.server.flapping.timeWindowMs\";\n     public static final String CONFIG_OF_MINION_FLAPPING_TIME_WINDOW_MS = \"pinot.minion.flapping.timeWindowMs\";\n+    public static final String CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS = \"pinot.helix.instance.state.transitions.max\";", "originalCommit": "ef30557e5b30a85b3dc94e5a4144be4496561b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "143969386b34477398c92d889cd005b5c3ec8bf3", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\nindex f1ed56ffad..be47151eae 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java\n\n@@ -109,8 +111,8 @@ public class CommonConstants {\n     public static final String CONFIG_OF_BROKER_FLAPPING_TIME_WINDOW_MS = \"pinot.broker.flapping.timeWindowMs\";\n     public static final String CONFIG_OF_SERVER_FLAPPING_TIME_WINDOW_MS = \"pinot.server.flapping.timeWindowMs\";\n     public static final String CONFIG_OF_MINION_FLAPPING_TIME_WINDOW_MS = \"pinot.minion.flapping.timeWindowMs\";\n-    public static final String CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS = \"pinot.helix.instance.state.transitions.max\";\n-    public static final String DEFAULT_HELIX_INSTANCE_MAX_STATE_TRANSITIONS = \"10000000\";\n+    public static final String CONFIG_OF_HELIX_INSTANCE_MAX_MESSAGES = \"pinot.helix.instance.messages.max\";\n+    public static final String DEFAULT_HELIX_INSTANCE_MAX_MESSAGES = \"100000\";\n     public static final String DEFAULT_FLAPPING_TIME_WINDOW_MS = \"1\";\n \n     public static final String PINOT_SERVICE_ROLE = \"pinot.service.role\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0OTM4MA==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r454049380", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS,\n          \n          \n            \n                String maxStateTransitions = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS,", "author": "Jackie-Jiang", "createdAt": "2020-07-14T01:49:38Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "diffHunk": "@@ -202,6 +209,20 @@ private void setupHelixSystemProperties() {\n             CommonConstants.Helix.DEFAULT_FLAPPING_TIME_WINDOW_MS));\n   }\n \n+  private void setupHelixClusterConstraints() {\n+    String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS,", "originalCommit": "ef30557e5b30a85b3dc94e5a4144be4496561b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "143969386b34477398c92d889cd005b5c3ec8bf3", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\nindex c9daab2ac9..6aaf2a3e32 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java\n\n@@ -205,22 +205,20 @@ public class ControllerStarter implements ServiceStartable {\n     // from ZooKeeper). Setting flapping time window to a small value can avoid this from happening. Helix ignores the\n     // non-positive value, so set the default value as 1.\n     System.setProperty(SystemPropertyKeys.FLAPPING_TIME_WINDOW, _config\n-        .getString(CommonConstants.Helix.CONFIG_OF_CONTROLLER_FLAPPING_TIME_WINDOW_MS,\n+        .getProperty(CommonConstants.Helix.CONFIG_OF_CONTROLLER_FLAPPING_TIME_WINDOW_MS,\n             CommonConstants.Helix.DEFAULT_FLAPPING_TIME_WINDOW_MS));\n   }\n \n   private void setupHelixClusterConstraints() {\n-    String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_STATE_TRANSITIONS,\n-        CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_STATE_TRANSITIONS);\n-    Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = new HashMap<>();\n+    String maxMessageLimit = _config.getString(CommonConstants.Helix.CONFIG_OF_HELIX_INSTANCE_MAX_MESSAGES,\n+        CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_MESSAGES);\n+    Map<ClusterConstraints.ConstraintAttribute, String> constraintAttributes = Maps.newHashMap();\n     constraintAttributes.put(ClusterConstraints.ConstraintAttribute.INSTANCE, \".*\");\n-    constraintAttributes\n-        .put(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE, Message.MessageType.STATE_TRANSITION.name());\n+    constraintAttributes.put(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE, \"STATE_TRANSITION\");\n     ConstraintItem constraintItem = new ConstraintItem(constraintAttributes, maxMessageLimit);\n \n-    _helixControllerManager.getClusterManagmentTool()\n-        .setConstraint(_helixClusterName, ClusterConstraints.ConstraintType.MESSAGE_CONSTRAINT,\n-            MAX_STATE_TRANSITIONS_PER_INSTANCE, constraintItem);\n+    getHelixAdmin().setConstraint(_helixClusterName, ClusterConstraints.ConstraintType.MESSAGE_CONSTRAINT,\n+        MAX_MESSAGES_PER_INSTANCE_NAME, constraintItem);\n   }\n \n   public PinotHelixResourceManager getHelixResourceManager() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0OTc2Mw==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r454049763", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .assertEquals(\"STATE_TRANSITION\", item.getAttributeValue(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE));\n          \n          \n            \n                    .assertEquals(item.getAttributeValue(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE), Message.MessageType.STATE_TRANSITION.name());", "author": "Jackie-Jiang", "createdAt": "2020-07-14T01:50:52Z", "path": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java", "diffHunk": "@@ -248,6 +253,16 @@ public void testPinotOnlyController() {\n     helixOnlyController.stop();\n   }\n \n+  private void checkHelixConstraints(HelixAdmin helixAdmin) {\n+    ClusterConstraints constraints =\n+        helixAdmin.getConstraints(getHelixClusterName(), ClusterConstraints.ConstraintType.MESSAGE_CONSTRAINT);\n+    ConstraintItem item = constraints.getConstraintItem(\"MaxStateTransitionsPerInstance\");\n+    Assert.assertEquals(\".*\", item.getAttributeValue(ClusterConstraints.ConstraintAttribute.INSTANCE));\n+    Assert\n+        .assertEquals(\"STATE_TRANSITION\", item.getAttributeValue(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE));", "originalCommit": "ef30557e5b30a85b3dc94e5a4144be4496561b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "143969386b34477398c92d889cd005b5c3ec8bf3", "chunk": "diff --git a/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java b/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java\nindex 10ba84c35c..447049cfbe 100644\n--- a/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java\n+++ b/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java\n\n@@ -256,11 +263,11 @@ public class PinotControllerModeTest extends ControllerTest {\n   private void checkHelixConstraints(HelixAdmin helixAdmin) {\n     ClusterConstraints constraints =\n         helixAdmin.getConstraints(getHelixClusterName(), ClusterConstraints.ConstraintType.MESSAGE_CONSTRAINT);\n-    ConstraintItem item = constraints.getConstraintItem(\"MaxStateTransitionsPerInstance\");\n+    ConstraintItem item = constraints.getConstraintItem(\"MaxMessagesPerInstance\");\n     Assert.assertEquals(\".*\", item.getAttributeValue(ClusterConstraints.ConstraintAttribute.INSTANCE));\n     Assert\n         .assertEquals(\"STATE_TRANSITION\", item.getAttributeValue(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE));\n-    Assert.assertEquals(CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_STATE_TRANSITIONS, item.getConstraintValue());\n+    Assert.assertEquals(CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_MESSAGES, item.getConstraintValue());\n   }\n \n   private void checkInstanceState(HelixAdmin helixAdmin) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MDEwOA==", "url": "https://github.com/apache/pinot/pull/5631#discussion_r454050108", "bodyText": "Please reverse the arguments for all the asserts, where the first should be actual, and the second should be expected.", "author": "Jackie-Jiang", "createdAt": "2020-07-14T01:52:06Z", "path": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java", "diffHunk": "@@ -248,6 +253,16 @@ public void testPinotOnlyController() {\n     helixOnlyController.stop();\n   }\n \n+  private void checkHelixConstraints(HelixAdmin helixAdmin) {\n+    ClusterConstraints constraints =\n+        helixAdmin.getConstraints(getHelixClusterName(), ClusterConstraints.ConstraintType.MESSAGE_CONSTRAINT);\n+    ConstraintItem item = constraints.getConstraintItem(\"MaxStateTransitionsPerInstance\");\n+    Assert.assertEquals(\".*\", item.getAttributeValue(ClusterConstraints.ConstraintAttribute.INSTANCE));", "originalCommit": "ef30557e5b30a85b3dc94e5a4144be4496561b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "143969386b34477398c92d889cd005b5c3ec8bf3", "chunk": "diff --git a/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java b/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java\nindex 10ba84c35c..447049cfbe 100644\n--- a/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java\n+++ b/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotControllerModeTest.java\n\n@@ -256,11 +263,11 @@ public class PinotControllerModeTest extends ControllerTest {\n   private void checkHelixConstraints(HelixAdmin helixAdmin) {\n     ClusterConstraints constraints =\n         helixAdmin.getConstraints(getHelixClusterName(), ClusterConstraints.ConstraintType.MESSAGE_CONSTRAINT);\n-    ConstraintItem item = constraints.getConstraintItem(\"MaxStateTransitionsPerInstance\");\n+    ConstraintItem item = constraints.getConstraintItem(\"MaxMessagesPerInstance\");\n     Assert.assertEquals(\".*\", item.getAttributeValue(ClusterConstraints.ConstraintAttribute.INSTANCE));\n     Assert\n         .assertEquals(\"STATE_TRANSITION\", item.getAttributeValue(ClusterConstraints.ConstraintAttribute.MESSAGE_TYPE));\n-    Assert.assertEquals(CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_STATE_TRANSITIONS, item.getConstraintValue());\n+    Assert.assertEquals(CommonConstants.Helix.DEFAULT_HELIX_INSTANCE_MAX_MESSAGES, item.getConstraintValue());\n   }\n \n   private void checkInstanceState(HelixAdmin helixAdmin) {\n"}}, {"oid": "143969386b34477398c92d889cd005b5c3ec8bf3", "url": "https://github.com/apache/pinot/commit/143969386b34477398c92d889cd005b5c3ec8bf3", "message": "Add the message constraint on all instances in Helix", "committedDate": "2020-07-14T05:36:09Z", "type": "commit"}, {"oid": "3aad614e1d12e61605d2d46bb8ad79f79f995633", "url": "https://github.com/apache/pinot/commit/3aad614e1d12e61605d2d46bb8ad79f79f995633", "message": "comments", "committedDate": "2020-07-14T05:36:09Z", "type": "commit"}, {"oid": "0ec89513c1ac2e31b3ccf0d105fe9e58cccf2235", "url": "https://github.com/apache/pinot/commit/0ec89513c1ac2e31b3ccf0d105fe9e58cccf2235", "message": "comments", "committedDate": "2020-07-14T05:36:10Z", "type": "commit"}, {"oid": "4ba1afcf837cbc15e605afae02addb0e8c2816bb", "url": "https://github.com/apache/pinot/commit/4ba1afcf837cbc15e605afae02addb0e8c2816bb", "message": "comments", "committedDate": "2020-07-14T05:46:22Z", "type": "commit"}, {"oid": "4ba1afcf837cbc15e605afae02addb0e8c2816bb", "url": "https://github.com/apache/pinot/commit/4ba1afcf837cbc15e605afae02addb0e8c2816bb", "message": "comments", "committedDate": "2020-07-14T05:46:22Z", "type": "forcePushed"}, {"oid": "e41d21a3576347531e389b59ee5dac908a3810c3", "url": "https://github.com/apache/pinot/commit/e41d21a3576347531e389b59ee5dac908a3810c3", "message": "update the default max transaction value", "committedDate": "2020-07-15T01:05:03Z", "type": "commit"}]}