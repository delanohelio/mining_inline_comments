{"pr_number": 5708, "pr_title": "Support BYTES type for group-by expression", "pr_createdAt": "2020-07-15T20:03:33Z", "pr_url": "https://github.com/apache/pinot/pull/5708", "timeline": [{"oid": "9c693c4030b06d4408413ccf46fe4e714521557d", "url": "https://github.com/apache/pinot/commit/9c693c4030b06d4408413ccf46fe4e714521557d", "message": "Support BYTES in group-by", "committedDate": "2020-07-15T19:54:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1NjExMQ==", "url": "https://github.com/apache/pinot/pull/5708#discussion_r456656111", "bodyText": "This may sound like an over-optimization but adding type specific GroupKeyGenerator has the potential to add overhead for runtime dispatch which Java doesn't handle well.\nWhat is the advantage of having a type specific next method like the following for Double\n@Override\n    public GroupKey next() {\n      Double2IntMap.Entry entry = _iterator.next();\n      _groupKey._groupId = entry.getIntValue();\n      _groupKey._stringKey = Double.toString(entry.getDoubleKey());\n      return _groupKey;\n    }\n\nv/s the existing generic method\n@Override\n    public GroupKey next() {\n      Map.Entry<Object, Integer> entry = _iterator.next();\n      _groupKey._groupId = entry.getValue();\n      _groupKey._stringKey = entry.getKey().toString();\n      return _groupKey;\n    }\n\nBoth are doing toString()", "author": "siddharthteotia", "createdAt": "2020-07-17T20:20:27Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/NoDictionarySingleColumnGroupKeyGenerator.java", "diffHunk": "@@ -163,84 +164,201 @@ public int getCurrentGroupKeyUpperBound() {\n \n   @Override\n   public Iterator<GroupKey> getUniqueGroupKeys() {\n-    return new GroupKeyIterator(_groupKeyMap);\n+    switch (_dataType) {", "originalCommit": "9c693c4030b06d4408413ccf46fe4e714521557d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMzY0OQ==", "url": "https://github.com/apache/pinot/pull/5708#discussion_r456713649", "bodyText": "The main difference is from the entry-set and iterator implementation of the fastutil maps. For an example, Int2IntMap.entrySet() is marked deprecated and the class suggest using the type-specific method instead. Also, we are able to use the fastIterator() provided by the FastEntrySet, and also the unboxed values to reduce the garbage, and the unnecessary boxing/unboxing.", "author": "Jackie-Jiang", "createdAt": "2020-07-17T23:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1NjExMQ=="}], "type": "inlineReview", "revised_code": null}]}