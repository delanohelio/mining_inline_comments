{"pr_number": 5293, "pr_title": "Adding support for Protobuf input format ", "pr_createdAt": "2020-04-23T17:23:33Z", "pr_url": "https://github.com/apache/pinot/pull/5293", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r415385408", "bodyText": "extract this to a separate method, try to get it based on URI\n\nfile:<absolute_path>\nclasspath:\nhttp://uri\nThis function can be used in multiple places.", "author": "kishoreg", "createdAt": "2020-04-26T19:44:35Z", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    String descriptorFile = protoBufRecordReaderConfig.getDescriptorFile();\n+    FileInputStream fin = new FileInputStream(descriptorFile);", "originalCommit": "5927bffd191a00a49c3da463d7468c7dfa37cc76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzNjkxMA==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r415936910", "bodyText": "What is the need for classpath?", "author": "KKcorps", "createdAt": "2020-04-27T15:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMDU2OQ==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r420600569", "bodyText": "that allows them to provide relative path in the config", "author": "kishoreg", "createdAt": "2020-05-06T07:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NDA0MQ==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r422464041", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-05-09T07:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "58cf022b8869d345e36c4ec91eba3a6fe1303be3", "chunk": "diff --git a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\nindex a108af17e3..aca42a7f7c 100644\n--- a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n+++ b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n\n@@ -26,6 +26,7 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.URI;\n import java.util.Set;\n import javax.annotation.Nullable;\n import org.apache.pinot.spi.data.Schema;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQ5NQ==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r415385495", "bodyText": "URI instead of File?", "author": "kishoreg", "createdAt": "2020-04-26T19:44:58Z", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+\n+\n+public class ProtoBufRecordReaderConfig implements RecordReaderConfig {\n+  private String _descriptorFile;\n+\n+  public String getDescriptorFile() {", "originalCommit": "5927bffd191a00a49c3da463d7468c7dfa37cc76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NDAzMw==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r422464033", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-05-09T07:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "58cf022b8869d345e36c4ec91eba3a6fe1303be3", "chunk": "diff --git a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java\nindex 2dd02c64fb..8b3eaec1a4 100644\n--- a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java\n+++ b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java\n\n@@ -18,17 +18,18 @@\n  */\n package org.apache.pinot.plugin.inputformat.protobuf;\n \n+import java.net.URI;\n import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n \n \n public class ProtoBufRecordReaderConfig implements RecordReaderConfig {\n-  private String _descriptorFile;\n+  private URI _descriptorFile;\n \n-  public String getDescriptorFile() {\n+  public URI getDescriptorFile() {\n     return _descriptorFile;\n   }\n \n-  public void setDescriptorFile(String descriptorFile) {\n+  public void setDescriptorFile(URI descriptorFile) {\n     _descriptorFile = descriptorFile;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3OTY3NQ==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424579675", "bodyText": "This interface has changed", "author": "npawar", "createdAt": "2020-05-13T16:40:18Z", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)", "originalCommit": "bb126bae0af31958022e751a8fdd8216abea61fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5ad264eee52c436cf7b004bc7074323a7653680", "chunk": "diff --git a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\nindex aca42a7f7c..a108af17e3 100644\n--- a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n+++ b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n\n@@ -26,7 +26,6 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.URI;\n import java.util.Set;\n import javax.annotation.Nullable;\n import org.apache.pinot.spi.data.Schema;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MDAzMQ==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424580031", "bodyText": "Why create empty class ProtoBufRecordExtractorConfig, you can just pass null here", "author": "npawar", "createdAt": "2020-05-13T16:40:49Z", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();", "originalCommit": "bb126bae0af31958022e751a8fdd8216abea61fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5ad264eee52c436cf7b004bc7074323a7653680", "chunk": "diff --git a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\nindex aca42a7f7c..a108af17e3 100644\n--- a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n+++ b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n\n@@ -26,7 +26,6 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.URI;\n import java.util.Set;\n import javax.annotation.Nullable;\n import org.apache.pinot.spi.data.Schema;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MjI3NQ==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424582275", "bodyText": "s/tmp/tempDynamicMessage", "author": "npawar", "createdAt": "2020-05-13T16:44:27Z", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);", "originalCommit": "bb126bae0af31958022e751a8fdd8216abea61fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5ad264eee52c436cf7b004bc7074323a7653680", "chunk": "diff --git a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\nindex aca42a7f7c..a108af17e3 100644\n--- a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n+++ b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n\n@@ -26,7 +26,6 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.URI;\n import java.util.Set;\n import javax.annotation.Nullable;\n import org.apache.pinot.spi.data.Schema;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424583621", "bodyText": "Can DynamicMessage and Builder instance also be reused across every call to next?", "author": "npawar", "createdAt": "2020-05-13T16:46:36Z", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);\n+      Message.Builder builder = tmp.newBuilderForType();", "originalCommit": "bb126bae0af31958022e751a8fdd8216abea61fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1Nzg4Nw==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r430657887", "bodyText": "not sure.", "author": "KKcorps", "createdAt": "2020-05-26T19:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4NTg2OA==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r431285868", "bodyText": "can you check with the help of your test? If they can be reused, make them class fields?", "author": "npawar", "createdAt": "2020-05-27T16:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwOTY4Mg==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r431309682", "bodyText": "Done.  Temp DynamicMessage can be reused but reusing builder is not possible.\nMoved the temp Dyanmic message to class variable.", "author": "KKcorps", "createdAt": "2020-05-27T17:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5ad264eee52c436cf7b004bc7074323a7653680", "chunk": "diff --git a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\nindex aca42a7f7c..a108af17e3 100644\n--- a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n+++ b/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java\n\n@@ -26,7 +26,6 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.URI;\n import java.util.Set;\n import javax.annotation.Nullable;\n import org.apache.pinot.spi.data.Schema;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDE2MA==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424584160", "bodyText": "remove this file", "author": "npawar", "createdAt": "2020-05-13T16:47:22Z", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordExtractorConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one", "originalCommit": "bb126bae0af31958022e751a8fdd8216abea61fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6efa80d9abc75c17e0a8b351a877650f0ba1f646", "chunk": "diff --git a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordExtractorConfig.java b/pinot-common/src/main/java/org/apache/pinot/common/function/StringFunctions.java\nsimilarity index 73%\nrename from pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordExtractorConfig.java\nrename to pinot-common/src/main/java/org/apache/pinot/common/function/StringFunctions.java\nindex 1b11e68cda..b57032e864 100644\n--- a/pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordExtractorConfig.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/common/function/StringFunctions.java\n\n@@ -16,10 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.plugin.inputformat.protobuf;\n+package org.apache.pinot.common.function;\n \n-import org.apache.pinot.spi.data.readers.RecordExtractorConfig;\n+import org.apache.commons.lang.StringUtils;\n \n \n-public class ProtoBufRecordExtractorConfig implements RecordExtractorConfig {\n+/**\n+ * Inbuilt string related transform functions\n+ *\n+ */\n+public class StringFunctions {\n+  /**\n+   * Reverse any given string\n+   */\n+  static String reverse(String input) {\n+    return StringUtils.reverse(input);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NjY4OA==", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424586688", "bodyText": "javadocs", "author": "npawar", "createdAt": "2020-05-13T16:51:18Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/ResourceFinder.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.utils;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+\n+public class ResourceFinder {", "originalCommit": "bb126bae0af31958022e751a8fdd8216abea61fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5ad264eee52c436cf7b004bc7074323a7653680", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/utils/ResourceFinder.java b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentUploader.java\nsimilarity index 50%\nrename from pinot-spi/src/main/java/org/apache/pinot/spi/utils/ResourceFinder.java\nrename to pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentUploader.java\nindex 100d32b0b2..44d0a36067 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/utils/ResourceFinder.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentUploader.java\n\n@@ -16,38 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.spi.utils;\n+package org.apache.pinot.core.data.manager.realtime;\n \n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n import java.net.URI;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n \n \n-public class ResourceFinder {\n-\n-  public static InputStream openResource(URI uri)\n-      throws IOException {\n-    File file = new File(uri);\n-    return new FileInputStream(file);\n-  }\n-\n-  public static InputStream openResource(ClassLoader classLoader, String pathName)\n-      throws IOException {\n-    Path path = Paths.get(pathName);\n-    if (path.isAbsolute()) {\n-      return new FileInputStream(pathName);\n-    } else {\n-      return openResourceWithRelativePath(classLoader, pathName);\n-    }\n-  }\n-\n-  public static InputStream openResourceWithRelativePath(ClassLoader classLoader, String pathName)\n-      throws IOException {\n-    return classLoader.getResourceAsStream(pathName);\n-  }\n-\n+public interface SegmentUploader {\n+  // Returns the URI of the uploaded segment. null if the upload fails.\n+  URI uploadSegment(File segmentFile, LLCSegmentName segmentName);\n }\n"}}, {"oid": "a5ad264eee52c436cf7b004bc7074323a7653680", "url": "https://github.com/apache/pinot/commit/a5ad264eee52c436cf7b004bc7074323a7653680", "message": "adding protobuf input format", "committedDate": "2020-05-26T19:14:44Z", "type": "commit"}, {"oid": "49af90c2d2f121a1218091b84e0507c1a8d5a93f", "url": "https://github.com/apache/pinot/commit/49af90c2d2f121a1218091b84e0507c1a8d5a93f", "message": "adding support for proto config in Segment Creators", "committedDate": "2020-05-26T19:14:44Z", "type": "commit"}, {"oid": "ad2d04b90e2982f935e1a4fa46e9d05c730eb253", "url": "https://github.com/apache/pinot/commit/ad2d04b90e2982f935e1a4fa46e9d05c730eb253", "message": "exluding proto dependency", "committedDate": "2020-05-26T19:14:44Z", "type": "commit"}, {"oid": "58cf022b8869d345e36c4ec91eba3a6fe1303be3", "url": "https://github.com/apache/pinot/commit/58cf022b8869d345e36c4ec91eba3a6fe1303be3", "message": "replacing descriptor file path with URI", "committedDate": "2020-05-26T19:14:44Z", "type": "commit"}, {"oid": "bf4dfe5286c1d9354343c055880064efd615f32d", "url": "https://github.com/apache/pinot/commit/bf4dfe5286c1d9354343c055880064efd615f32d", "message": "adding license", "committedDate": "2020-05-26T19:14:44Z", "type": "commit"}, {"oid": "6efa80d9abc75c17e0a8b351a877650f0ba1f646", "url": "https://github.com/apache/pinot/commit/6efa80d9abc75c17e0a8b351a877650f0ba1f646", "message": "refactoring", "committedDate": "2020-05-26T19:14:44Z", "type": "commit"}, {"oid": "53aaf1467ea93603775be1503860f70a104066c3", "url": "https://github.com/apache/pinot/commit/53aaf1467ea93603775be1503860f70a104066c3", "message": "changing interface", "committedDate": "2020-05-26T19:31:04Z", "type": "commit"}, {"oid": "53aaf1467ea93603775be1503860f70a104066c3", "url": "https://github.com/apache/pinot/commit/53aaf1467ea93603775be1503860f70a104066c3", "message": "changing interface", "committedDate": "2020-05-26T19:31:04Z", "type": "forcePushed"}, {"oid": "dc90d2cb85750b42f20f5a105ae6b96031c8f924", "url": "https://github.com/apache/pinot/commit/dc90d2cb85750b42f20f5a105ae6b96031c8f924", "message": "adding javadocs", "committedDate": "2020-05-26T19:46:54Z", "type": "commit"}, {"oid": "bb9337fa14af54d55fba1d2751f8d780c9fca5b2", "url": "https://github.com/apache/pinot/commit/bb9337fa14af54d55fba1d2751f8d780c9fca5b2", "message": "moving dynamic message to class variable", "committedDate": "2020-05-27T17:13:58Z", "type": "commit"}, {"oid": "a5292f977eaa266f5563f9e3042e52b9910879c1", "url": "https://github.com/apache/pinot/commit/a5292f977eaa266f5563f9e3042e52b9910879c1", "message": "removing descriptor variable from class", "committedDate": "2020-05-27T17:21:33Z", "type": "commit"}]}