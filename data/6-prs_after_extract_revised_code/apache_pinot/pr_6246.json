{"pr_number": 6246, "pr_title": "Adding validation for jsonExtractKey and jsonExtractScalar functions", "pr_createdAt": "2020-11-06T06:51:33Z", "pr_url": "https://github.com/apache/pinot/pull/6246", "timeline": [{"oid": "53807b89a020adddefd5a0ffcf55345111b847b7", "url": "https://github.com/apache/pinot/commit/53807b89a020adddefd5a0ffcf55345111b847b7", "message": "Adding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response", "committedDate": "2020-11-06T08:51:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMDUzOQ==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577910539", "bodyText": "Remove underscore from the function name to match json_extract_scalar and json_extract_key. Please also add some test cases for function name with underscore", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:09:14Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8010929f6a140368ceebb2e357b7e238241ced4b", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\nindex eccd9167a9..672286bfd3 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n\n@@ -921,23 +922,24 @@ public class CalciteSqlParser {\n \n   private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n     // Check that there are exactly 3 or 4 arguments\n-    if (operands.size() < 3 || operands.size() > 4) {\n+    if (operands.size() != 3 && operands.size() != 4) {\n       throw new SqlCompilationException(\n-          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+          \"Expect 3 or 4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral() || (operands.size() == 4 && !operands.get(3)\n+        .isSetLiteral())) {\n       throw new SqlCompilationException(\n-          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+          \"Expect the 2nd/3rd/4th argument of transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n     }\n   }\n \n   private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n-    // Check that there are exactly 3 or 4 arguments\n+    // Check that there are exactly 2 arguments\n     if (operands.size() != 2) {\n       throw new SqlCompilationException(\n           \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral()) {\n       throw new SqlCompilationException(\n           \"Expected the second argument for transform function: jsonExtractKey(jsonFieldName, 'jsonPath') to be a single-quoted literal value.\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMTI5Mw==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577911293", "bodyText": "Also validate the optional fourth argument?", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:10:43Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8010929f6a140368ceebb2e357b7e238241ced4b", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\nindex eccd9167a9..672286bfd3 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n\n@@ -921,23 +922,24 @@ public class CalciteSqlParser {\n \n   private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n     // Check that there are exactly 3 or 4 arguments\n-    if (operands.size() < 3 || operands.size() > 4) {\n+    if (operands.size() != 3 && operands.size() != 4) {\n       throw new SqlCompilationException(\n-          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+          \"Expect 3 or 4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral() || (operands.size() == 4 && !operands.get(3)\n+        .isSetLiteral())) {\n       throw new SqlCompilationException(\n-          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+          \"Expect the 2nd/3rd/4th argument of transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n     }\n   }\n \n   private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n-    // Check that there are exactly 3 or 4 arguments\n+    // Check that there are exactly 2 arguments\n     if (operands.size() != 2) {\n       throw new SqlCompilationException(\n           \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral()) {\n       throw new SqlCompilationException(\n           \"Expected the second argument for transform function: jsonExtractKey(jsonFieldName, 'jsonPath') to be a single-quoted literal value.\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMTY0Ng==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577911646", "bodyText": "(Critical)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n          \n          \n            \n                if (!operands.get(1).isSetLiteral()) {", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:11:22Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+      throw new SqlCompilationException(\n+          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+    }\n+  }\n+\n+  private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() != 2) {\n+      throw new SqlCompilationException(\n+          \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8010929f6a140368ceebb2e357b7e238241ced4b", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\nindex eccd9167a9..672286bfd3 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n\n@@ -921,23 +922,24 @@ public class CalciteSqlParser {\n \n   private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n     // Check that there are exactly 3 or 4 arguments\n-    if (operands.size() < 3 || operands.size() > 4) {\n+    if (operands.size() != 3 && operands.size() != 4) {\n       throw new SqlCompilationException(\n-          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+          \"Expect 3 or 4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral() || (operands.size() == 4 && !operands.get(3)\n+        .isSetLiteral())) {\n       throw new SqlCompilationException(\n-          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+          \"Expect the 2nd/3rd/4th argument of transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n     }\n   }\n \n   private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n-    // Check that there are exactly 3 or 4 arguments\n+    // Check that there are exactly 2 arguments\n     if (operands.size() != 2) {\n       throw new SqlCompilationException(\n           \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral()) {\n       throw new SqlCompilationException(\n           \"Expected the second argument for transform function: jsonExtractKey(jsonFieldName, 'jsonPath') to be a single-quoted literal value.\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMjQwMA==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577912400", "bodyText": "Update the comment", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:12:51Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+      throw new SqlCompilationException(\n+          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+    }\n+  }\n+\n+  private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8010929f6a140368ceebb2e357b7e238241ced4b", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\nindex eccd9167a9..672286bfd3 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n\n@@ -921,23 +922,24 @@ public class CalciteSqlParser {\n \n   private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n     // Check that there are exactly 3 or 4 arguments\n-    if (operands.size() < 3 || operands.size() > 4) {\n+    if (operands.size() != 3 && operands.size() != 4) {\n       throw new SqlCompilationException(\n-          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+          \"Expect 3 or 4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral() || (operands.size() == 4 && !operands.get(3)\n+        .isSetLiteral())) {\n       throw new SqlCompilationException(\n-          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+          \"Expect the 2nd/3rd/4th argument of transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n     }\n   }\n \n   private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n-    // Check that there are exactly 3 or 4 arguments\n+    // Check that there are exactly 2 arguments\n     if (operands.size() != 2) {\n       throw new SqlCompilationException(\n           \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral()) {\n       throw new SqlCompilationException(\n           \"Expected the second argument for transform function: jsonExtractKey(jsonFieldName, 'jsonPath') to be a single-quoted literal value.\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMjk2MQ==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577912961", "bodyText": "(nit) For clarity\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (operands.size() < 3 || operands.size() > 4) {\n          \n          \n            \n                if (operands.size() != 3 && operands.size() != 4) {", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:13:53Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8010929f6a140368ceebb2e357b7e238241ced4b", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\nindex eccd9167a9..672286bfd3 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n\n@@ -921,23 +922,24 @@ public class CalciteSqlParser {\n \n   private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n     // Check that there are exactly 3 or 4 arguments\n-    if (operands.size() < 3 || operands.size() > 4) {\n+    if (operands.size() != 3 && operands.size() != 4) {\n       throw new SqlCompilationException(\n-          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+          \"Expect 3 or 4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral() || (operands.size() == 4 && !operands.get(3)\n+        .isSetLiteral())) {\n       throw new SqlCompilationException(\n-          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+          \"Expect the 2nd/3rd/4th argument of transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n     }\n   }\n \n   private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n-    // Check that there are exactly 3 or 4 arguments\n+    // Check that there are exactly 2 arguments\n     if (operands.size() != 2) {\n       throw new SqlCompilationException(\n           \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral()) {\n       throw new SqlCompilationException(\n           \"Expected the second argument for transform function: jsonExtractKey(jsonFieldName, 'jsonPath') to be a single-quoted literal value.\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMzczMw==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577913733", "bodyText": "\"Expect ...\", same for other exception message", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:15:15Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8010929f6a140368ceebb2e357b7e238241ced4b", "chunk": "diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\nindex eccd9167a9..672286bfd3 100644\n--- a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java\n\n@@ -921,23 +922,24 @@ public class CalciteSqlParser {\n \n   private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n     // Check that there are exactly 3 or 4 arguments\n-    if (operands.size() < 3 || operands.size() > 4) {\n+    if (operands.size() != 3 && operands.size() != 4) {\n       throw new SqlCompilationException(\n-          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+          \"Expect 3 or 4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral() || (operands.size() == 4 && !operands.get(3)\n+        .isSetLiteral())) {\n       throw new SqlCompilationException(\n-          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+          \"Expect the 2nd/3rd/4th argument of transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n     }\n   }\n \n   private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n-    // Check that there are exactly 3 or 4 arguments\n+    // Check that there are exactly 2 arguments\n     if (operands.size() != 2) {\n       throw new SqlCompilationException(\n           \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n     }\n-    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+    if (!operands.get(1).isSetLiteral()) {\n       throw new SqlCompilationException(\n           \"Expected the second argument for transform function: jsonExtractKey(jsonFieldName, 'jsonPath') to be a single-quoted literal value.\");\n     }\n"}}, {"oid": "96113f821281075b13da07c6481ef6ceeaab096f", "url": "https://github.com/apache/pinot/commit/96113f821281075b13da07c6481ef6ceeaab096f", "message": "Adding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response", "committedDate": "2021-02-17T23:51:57Z", "type": "commit"}, {"oid": "8010929f6a140368ceebb2e357b7e238241ced4b", "url": "https://github.com/apache/pinot/commit/8010929f6a140368ceebb2e357b7e238241ced4b", "message": "Address comments", "committedDate": "2021-02-18T00:12:41Z", "type": "forcePushed"}, {"oid": "e8f56df97f56efb178699983614ea2134ce38f77", "url": "https://github.com/apache/pinot/commit/e8f56df97f56efb178699983614ea2134ce38f77", "message": "Address comments", "committedDate": "2021-02-18T00:35:00Z", "type": "forcePushed"}, {"oid": "9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "url": "https://github.com/apache/pinot/commit/9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "message": "Address comments", "committedDate": "2021-02-18T00:43:59Z", "type": "commit"}, {"oid": "9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "url": "https://github.com/apache/pinot/commit/9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "message": "Address comments", "committedDate": "2021-02-18T00:43:59Z", "type": "forcePushed"}]}