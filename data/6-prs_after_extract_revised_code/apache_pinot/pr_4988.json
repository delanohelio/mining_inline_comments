{"pr_number": 4988, "pr_title": "[TE] Support weekly anomaly detection", "pr_createdAt": "2020-01-15T19:51:34Z", "pr_url": "https://github.com/apache/pinot/pull/4988", "timeline": [{"oid": "51a51f84f21deaa6b105b4600c6170891034bb9f", "url": "https://github.com/apache/pinot/commit/51a51f84f21deaa6b105b4600c6170891034bb9f", "message": "[TE] Support weekly anomaly detection", "committedDate": "2020-01-15T19:28:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwODA0NQ==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367108045", "bodyText": "Consider renaming the function - it is not clear what is \"check\".\nThis is actually filterIncompleteAggregation?", "author": "xiaohui-sun", "createdAt": "2020-01-15T21:09:37Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java", "diffHunk": "@@ -288,4 +288,39 @@ public static Period periodFromTimeUnit(int size, TimeUnit unit) {\n         return new Period(TimeUnit.MILLISECONDS.convert(size, unit));\n     }\n   }\n+\n+  /**\n+   * Aggregate the time series data frame's value to specified granularity\n+   * @param df the data frame\n+   * @param origin the aggregation origin time stamp\n+   * @param granularityPeriod the aggregation granularity in period\n+   * @return the aggregated time series data frame\n+   */\n+  public static DataFrame aggregateByPeriod(DataFrame df, long origin, Period granularityPeriod) {\n+    return df.groupByPeriod(df.getLongs(COL_TIME), new DateTime(origin), granularityPeriod).sum(COL_TIME, COL_VALUE);\n+  }\n+\n+  /**\n+   * Check if the aggregation result is complete or not, if not, remove it from the aggregated result.\n+   *\n+   * For example, say the weekStart is Monday and current data is available through Jan 8, Wednesday.\n+   * the latest data time stamp will be Jan 8. The latest aggregation start time stamp should be Jan 6, Monday.\n+   * In such case, the latest data point is incomplete and should be filtered. If the latest data time stamp is\n+   * Jan 12, Sunday instead, the data is complete and good to use because the week's data is complete.\n+   *\n+   * @param df the aggregated data frame to check\n+   * @param latestDataTimeStamp the latest data time stamp\n+   * @param bucketTimeGranularity the metric's original granularity\n+   * @param aggregationGranularityPeriod the granularity after aggregation\n+   * @return the filtered data frame\n+   */\n+  public static DataFrame checkIncompleteAggregation(DataFrame df, long latestDataTimeStamp,", "originalCommit": "51a51f84f21deaa6b105b4600c6170891034bb9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1MzU1OQ==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367153559", "bodyText": "Yes. I'll rename it to filterIncompleteAggregation", "author": "jihaozh", "createdAt": "2020-01-15T23:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwODA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e442c819bafcfce0e42b50dd27b9553f5a457576", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java\nindex 665ec96e96..9799605361 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java\n\n@@ -294,10 +295,18 @@ public class DetectionUtils {\n    * @param df the data frame\n    * @param origin the aggregation origin time stamp\n    * @param granularityPeriod the aggregation granularity in period\n+   * @param aggregationFunction the metric's aggregation function\n    * @return the aggregated time series data frame\n    */\n-  public static DataFrame aggregateByPeriod(DataFrame df, long origin, Period granularityPeriod) {\n-    return df.groupByPeriod(df.getLongs(COL_TIME), new DateTime(origin), granularityPeriod).sum(COL_TIME, COL_VALUE);\n+  public static DataFrame aggregateByPeriod(DataFrame df, long origin, Period granularityPeriod, MetricAggFunction aggregationFunction) {\n+    switch (aggregationFunction) {\n+      case SUM:\n+        return df.groupByPeriod(df.getLongs(COL_TIME), new DateTime(origin), granularityPeriod).sum(COL_TIME, COL_VALUE);\n+      case AVG:\n+        return df.groupByPeriod(df.getLongs(COL_TIME), new DateTime(origin), granularityPeriod).mean(COL_TIME, COL_VALUE);\n+      default:\n+        throw new NotImplementedException(String.format(\"The aggregate by period for %s is not supported in DataFrame.\", aggregationFunction));\n+    }\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwODI3MQ==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367108271", "bodyText": "Why use Objects.notNull instead of this.weekStart == null?", "author": "xiaohui-sun", "createdAt": "2020-01-15T21:10:13Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java", "diffHunk": "@@ -76,16 +80,34 @@\n \n   @Override\n   public DetectionResult runDetection(Interval window, String metricUrn) {\n+    long startMillis = window.getStartMillis();\n+\n+    // align start day to the user specified week start\n+    if (Objects.nonNull(this.weekStart)) {", "originalCommit": "51a51f84f21deaa6b105b4600c6170891034bb9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1NDUwNQ==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367154505", "bodyText": "They should be equivalent in functionality. This is more of java 8 style.", "author": "jihaozh", "createdAt": "2020-01-15T23:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwODI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e442c819bafcfce0e42b50dd27b9553f5a457576", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\nindex 4f8f4b9f57..5c16823cae 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\n\n@@ -93,18 +94,20 @@ public class PercentageChangeRuleDetector implements AnomalyDetector<PercentageC\n     slices.add(slice);\n \n     InputData data = this.dataFetcher.fetchData(new InputDataSpec().withTimeseriesSlices(slices)\n-        .withMetricIdsForDataset(Collections.singletonList(slice.getMetricId())));\n+        .withMetricIdsForDataset(Collections.singletonList(slice.getMetricId()))\n+        .withMetricIds(Collections.singletonList(me.getId())));\n     DataFrame dfBase = this.baseline.gather(slice, data.getTimeseries());\n     DataFrame dfCurr = data.getTimeseries().get(slice);\n     DatasetConfigDTO datasetConfig = data.getDatasetForMetricId().get(me.getId());\n+    MetricConfigDTO metricConfig = data.getMetrics().get(me.getId());\n \n     // aggregate data to specified weekly granularity\n     if (this.monitoringGranularity.endsWith(\"WEEKS\")) {\n       Period monitoringGranularityPeriod = DetectionUtils.getMonitoringGranularityPeriod(this.monitoringGranularity, datasetConfig);\n       long latestDataTimeStamp = dfCurr.getLong(COL_TIME, dfCurr.size() - 1);\n-      dfCurr = DetectionUtils.aggregateByPeriod(dfCurr, startMillis, monitoringGranularityPeriod);\n-      dfCurr = DetectionUtils.checkIncompleteAggregation(dfCurr, latestDataTimeStamp, datasetConfig.bucketTimeGranularity(), monitoringGranularityPeriod);\n-      dfBase = DetectionUtils.aggregateByPeriod(dfBase, startMillis, monitoringGranularityPeriod);\n+      dfCurr = DetectionUtils.aggregateByPeriod(dfCurr, startMillis, monitoringGranularityPeriod, metricConfig.getDefaultAggFunction());\n+      dfCurr = DetectionUtils.filterIncompleteAggregation(dfCurr, latestDataTimeStamp, datasetConfig.bucketTimeGranularity(), monitoringGranularityPeriod);\n+      dfBase = DetectionUtils.aggregateByPeriod(dfBase, startMillis, monitoringGranularityPeriod, metricConfig.getDefaultAggFunction());\n     }\n \n     dfCurr = dfCurr.renameSeries(COL_VALUE, COL_CURR);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwOTk0Mw==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367109943", "bodyText": "The startMills calculation should be done when creating the task. Why calculating this again?", "author": "xiaohui-sun", "createdAt": "2020-01-15T21:14:02Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java", "diffHunk": "@@ -76,16 +80,34 @@\n \n   @Override\n   public DetectionResult runDetection(Interval window, String metricUrn) {\n+    long startMillis = window.getStartMillis();\n+\n+    // align start day to the user specified week start\n+    if (Objects.nonNull(this.weekStart)) {\n+      startMillis = window.getStart().withDayOfWeek(weekStart.getValue()).minusWeeks(1).getMillis();", "originalCommit": "51a51f84f21deaa6b105b4600c6170891034bb9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1NDk2Nw==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367154967", "bodyText": "Yes. This is to ensure that the window is aligned to the specified boundary because in preview it can be adjusted to any day.", "author": "jihaozh", "createdAt": "2020-01-15T23:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwOTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e442c819bafcfce0e42b50dd27b9553f5a457576", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\nindex 4f8f4b9f57..5c16823cae 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\n\n@@ -93,18 +94,20 @@ public class PercentageChangeRuleDetector implements AnomalyDetector<PercentageC\n     slices.add(slice);\n \n     InputData data = this.dataFetcher.fetchData(new InputDataSpec().withTimeseriesSlices(slices)\n-        .withMetricIdsForDataset(Collections.singletonList(slice.getMetricId())));\n+        .withMetricIdsForDataset(Collections.singletonList(slice.getMetricId()))\n+        .withMetricIds(Collections.singletonList(me.getId())));\n     DataFrame dfBase = this.baseline.gather(slice, data.getTimeseries());\n     DataFrame dfCurr = data.getTimeseries().get(slice);\n     DatasetConfigDTO datasetConfig = data.getDatasetForMetricId().get(me.getId());\n+    MetricConfigDTO metricConfig = data.getMetrics().get(me.getId());\n \n     // aggregate data to specified weekly granularity\n     if (this.monitoringGranularity.endsWith(\"WEEKS\")) {\n       Period monitoringGranularityPeriod = DetectionUtils.getMonitoringGranularityPeriod(this.monitoringGranularity, datasetConfig);\n       long latestDataTimeStamp = dfCurr.getLong(COL_TIME, dfCurr.size() - 1);\n-      dfCurr = DetectionUtils.aggregateByPeriod(dfCurr, startMillis, monitoringGranularityPeriod);\n-      dfCurr = DetectionUtils.checkIncompleteAggregation(dfCurr, latestDataTimeStamp, datasetConfig.bucketTimeGranularity(), monitoringGranularityPeriod);\n-      dfBase = DetectionUtils.aggregateByPeriod(dfBase, startMillis, monitoringGranularityPeriod);\n+      dfCurr = DetectionUtils.aggregateByPeriod(dfCurr, startMillis, monitoringGranularityPeriod, metricConfig.getDefaultAggFunction());\n+      dfCurr = DetectionUtils.filterIncompleteAggregation(dfCurr, latestDataTimeStamp, datasetConfig.bucketTimeGranularity(), monitoringGranularityPeriod);\n+      dfBase = DetectionUtils.aggregateByPeriod(dfBase, startMillis, monitoringGranularityPeriod, metricConfig.getDefaultAggFunction());\n     }\n \n     dfCurr = dfCurr.renameSeries(COL_VALUE, COL_CURR);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMDM5NA==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367110394", "bodyText": "Should we check the aggregation function? Are we assuming the aggregation is always SUM?", "author": "xiaohui-sun", "createdAt": "2020-01-15T21:15:03Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java", "diffHunk": "@@ -288,4 +288,39 @@ public static Period periodFromTimeUnit(int size, TimeUnit unit) {\n         return new Period(TimeUnit.MILLISECONDS.convert(size, unit));\n     }\n   }\n+\n+  /**\n+   * Aggregate the time series data frame's value to specified granularity\n+   * @param df the data frame\n+   * @param origin the aggregation origin time stamp\n+   * @param granularityPeriod the aggregation granularity in period\n+   * @return the aggregated time series data frame\n+   */\n+  public static DataFrame aggregateByPeriod(DataFrame df, long origin, Period granularityPeriod) {\n+    return df.groupByPeriod(df.getLongs(COL_TIME), new DateTime(origin), granularityPeriod).sum(COL_TIME, COL_VALUE);", "originalCommit": "51a51f84f21deaa6b105b4600c6170891034bb9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1Njc5NA==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367156794", "bodyText": "Good catch. Maybe we need to support AVG too?", "author": "jihaozh", "createdAt": "2020-01-15T23:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMDM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1ODg3OA==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367158878", "bodyText": "Can we pass the aggregation function as an argument", "author": "vincentchenjl", "createdAt": "2020-01-15T23:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMDM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4OTMwMw==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367589303", "bodyText": "Sure. Made the change to support other aggregation functions.", "author": "jihaozh", "createdAt": "2020-01-16T18:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMDM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "e442c819bafcfce0e42b50dd27b9553f5a457576", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java\nindex 665ec96e96..9799605361 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DetectionUtils.java\n\n@@ -294,10 +295,18 @@ public class DetectionUtils {\n    * @param df the data frame\n    * @param origin the aggregation origin time stamp\n    * @param granularityPeriod the aggregation granularity in period\n+   * @param aggregationFunction the metric's aggregation function\n    * @return the aggregated time series data frame\n    */\n-  public static DataFrame aggregateByPeriod(DataFrame df, long origin, Period granularityPeriod) {\n-    return df.groupByPeriod(df.getLongs(COL_TIME), new DateTime(origin), granularityPeriod).sum(COL_TIME, COL_VALUE);\n+  public static DataFrame aggregateByPeriod(DataFrame df, long origin, Period granularityPeriod, MetricAggFunction aggregationFunction) {\n+    switch (aggregationFunction) {\n+      case SUM:\n+        return df.groupByPeriod(df.getLongs(COL_TIME), new DateTime(origin), granularityPeriod).sum(COL_TIME, COL_VALUE);\n+      case AVG:\n+        return df.groupByPeriod(df.getLongs(COL_TIME), new DateTime(origin), granularityPeriod).mean(COL_TIME, COL_VALUE);\n+      default:\n+        throw new NotImplementedException(String.format(\"The aggregate by period for %s is not supported in DataFrame.\", aggregationFunction));\n+    }\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNjE4Nw==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367136187", "bodyText": "Are we using this?", "author": "vincentchenjl", "createdAt": "2020-01-15T22:16:07Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DefaultDataProvider.java", "diffHunk": "@@ -26,6 +26,7 @@\n import com.google.common.collect.ArrayListMultimap;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Multimap;\n+import com.ibm.icu.util.TimeZone;", "originalCommit": "51a51f84f21deaa6b105b4600c6170891034bb9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4OTU5NA==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367589594", "bodyText": "Good catch. Removed", "author": "jihaozh", "createdAt": "2020-01-16T18:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNjE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e442c819bafcfce0e42b50dd27b9553f5a457576", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DefaultDataProvider.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DefaultDataProvider.java\nindex ec07f08c9a..0701c14817 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DefaultDataProvider.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/DefaultDataProvider.java\n\n@@ -26,12 +26,10 @@ import com.google.common.cache.Weigher;\n import com.google.common.collect.ArrayListMultimap;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Multimap;\n-import com.ibm.icu.util.TimeZone;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MDM1Nw==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367160357", "bodyText": "Do we also support MONTHS?", "author": "vincentchenjl", "createdAt": "2020-01-15T23:26:23Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java", "diffHunk": "@@ -76,16 +80,34 @@\n \n   @Override\n   public DetectionResult runDetection(Interval window, String metricUrn) {\n+    long startMillis = window.getStartMillis();\n+\n+    // align start day to the user specified week start\n+    if (Objects.nonNull(this.weekStart)) {\n+      startMillis = window.getStart().withDayOfWeek(weekStart.getValue()).minusWeeks(1).getMillis();\n+    }\n+\n     MetricEntity me = MetricEntity.fromURN(metricUrn);\n-    MetricSlice slice = MetricSlice.from(me.getId(), window.getStartMillis(), window.getEndMillis(), me.getFilters(), timeGranularity);\n+    MetricSlice slice = MetricSlice.from(me.getId(), startMillis, window.getEndMillis(), me.getFilters(), timeGranularity);\n     List<MetricSlice> slices = new ArrayList<>(this.baseline.scatter(slice));\n     slices.add(slice);\n \n     InputData data = this.dataFetcher.fetchData(new InputDataSpec().withTimeseriesSlices(slices)\n         .withMetricIdsForDataset(Collections.singletonList(slice.getMetricId())));\n-    DataFrame dfCurr = data.getTimeseries().get(slice).renameSeries(COL_VALUE, COL_CURR);\n     DataFrame dfBase = this.baseline.gather(slice, data.getTimeseries());\n+    DataFrame dfCurr = data.getTimeseries().get(slice);\n+    DatasetConfigDTO datasetConfig = data.getDatasetForMetricId().get(me.getId());\n \n+    // aggregate data to specified weekly granularity\n+    if (this.monitoringGranularity.endsWith(\"WEEKS\")) {", "originalCommit": "51a51f84f21deaa6b105b4600c6170891034bb9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5MTAzNQ==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367591035", "bodyText": "MONTHS is supported only if the metric itself is a monthly metric. The aggregation to monthly is not supported. I think that's out of the scope of this PR.", "author": "jihaozh", "createdAt": "2020-01-16T18:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MDM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxOTQ5NA==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367619494", "bodyText": "Sure. Thanks.", "author": "vincentchenjl", "createdAt": "2020-01-16T19:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MDM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e442c819bafcfce0e42b50dd27b9553f5a457576", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\nindex 4f8f4b9f57..5c16823cae 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/PercentageChangeRuleDetector.java\n\n@@ -93,18 +94,20 @@ public class PercentageChangeRuleDetector implements AnomalyDetector<PercentageC\n     slices.add(slice);\n \n     InputData data = this.dataFetcher.fetchData(new InputDataSpec().withTimeseriesSlices(slices)\n-        .withMetricIdsForDataset(Collections.singletonList(slice.getMetricId())));\n+        .withMetricIdsForDataset(Collections.singletonList(slice.getMetricId()))\n+        .withMetricIds(Collections.singletonList(me.getId())));\n     DataFrame dfBase = this.baseline.gather(slice, data.getTimeseries());\n     DataFrame dfCurr = data.getTimeseries().get(slice);\n     DatasetConfigDTO datasetConfig = data.getDatasetForMetricId().get(me.getId());\n+    MetricConfigDTO metricConfig = data.getMetrics().get(me.getId());\n \n     // aggregate data to specified weekly granularity\n     if (this.monitoringGranularity.endsWith(\"WEEKS\")) {\n       Period monitoringGranularityPeriod = DetectionUtils.getMonitoringGranularityPeriod(this.monitoringGranularity, datasetConfig);\n       long latestDataTimeStamp = dfCurr.getLong(COL_TIME, dfCurr.size() - 1);\n-      dfCurr = DetectionUtils.aggregateByPeriod(dfCurr, startMillis, monitoringGranularityPeriod);\n-      dfCurr = DetectionUtils.checkIncompleteAggregation(dfCurr, latestDataTimeStamp, datasetConfig.bucketTimeGranularity(), monitoringGranularityPeriod);\n-      dfBase = DetectionUtils.aggregateByPeriod(dfBase, startMillis, monitoringGranularityPeriod);\n+      dfCurr = DetectionUtils.aggregateByPeriod(dfCurr, startMillis, monitoringGranularityPeriod, metricConfig.getDefaultAggFunction());\n+      dfCurr = DetectionUtils.filterIncompleteAggregation(dfCurr, latestDataTimeStamp, datasetConfig.bucketTimeGranularity(), monitoringGranularityPeriod);\n+      dfBase = DetectionUtils.aggregateByPeriod(dfBase, startMillis, monitoringGranularityPeriod, metricConfig.getDefaultAggFunction());\n     }\n \n     dfCurr = dfCurr.renameSeries(COL_VALUE, COL_CURR);\n"}}, {"oid": "e442c819bafcfce0e42b50dd27b9553f5a457576", "url": "https://github.com/apache/pinot/commit/e442c819bafcfce0e42b50dd27b9553f5a457576", "message": "address comments", "committedDate": "2020-01-16T18:48:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyMjcwNg==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367622706", "bodyText": "Should we define \"MONTHS\" and \"WEEKS\" as constants?", "author": "vincentchenjl", "createdAt": "2020-01-16T20:03:23Z", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/HoltWintersDetector.java", "diffHunk": "@@ -114,31 +120,27 @@ public void init(HoltWintersDetectorSpec spec, InputDataFetcher dataFetcher) {\n     this.sensitivity = spec.getSensitivity();\n     this.monitoringGranularity = spec.getMonitoringGranularity();\n \n-    if (this.monitoringGranularity.equals(\"1_MONTHS\")) {\n+    if (this.monitoringGranularity.endsWith(\"MONTHS\") || this.monitoringGranularity.endsWith(\"WEEKS\")) {", "originalCommit": "e442c819bafcfce0e42b50dd27b9553f5a457576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwMjQ5MQ==", "url": "https://github.com/apache/pinot/pull/4988#discussion_r367702491", "bodyText": "Updated", "author": "jihaozh", "createdAt": "2020-01-16T23:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyMjcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "f8441e4a58021c8c5c342afb7783fee22b567a3d", "chunk": "diff --git a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/HoltWintersDetector.java b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/HoltWintersDetector.java\nindex dc8bd0fc0a..c81b53f760 100644\n--- a/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/HoltWintersDetector.java\n+++ b/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/components/HoltWintersDetector.java\n\n@@ -120,12 +120,12 @@ public class HoltWintersDetector implements BaselineProvider<HoltWintersDetector\n     this.sensitivity = spec.getSensitivity();\n     this.monitoringGranularity = spec.getMonitoringGranularity();\n \n-    if (this.monitoringGranularity.endsWith(\"MONTHS\") || this.monitoringGranularity.endsWith(\"WEEKS\")) {\n+    if (this.monitoringGranularity.endsWith(TimeGranularity.MONTHS) || this.monitoringGranularity.endsWith(TimeGranularity.WEEKS)) {\n       this.timeGranularity = MetricSlice.NATIVE_GRANULARITY;\n     } else {\n       this.timeGranularity = TimeGranularity.fromString(this.monitoringGranularity);\n     }\n-    if (this.monitoringGranularity.endsWith(\"WEEKS\")) {\n+    if (this.monitoringGranularity.endsWith(TimeGranularity.WEEKS)) {\n       this.weekStart = DayOfWeek.valueOf(spec.getWeekStart());\n     }\n   }\n"}}, {"oid": "f8441e4a58021c8c5c342afb7783fee22b567a3d", "url": "https://github.com/apache/pinot/commit/f8441e4a58021c8c5c342afb7783fee22b567a3d", "message": "address comments", "committedDate": "2020-01-16T23:28:47Z", "type": "commit"}]}