{"pr_number": 6315, "pr_title": "Fix: Close HelixAdmin appropriately, when setting up Helix Cluster.", "pr_createdAt": "2020-12-03T23:53:00Z", "pr_url": "https://github.com/apache/pinot/pull/6315", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczMzg4MQ==", "url": "https://github.com/apache/pinot/pull/6315#discussion_r535733881", "bodyText": "You need to close it in both cases? (Move it out of the else block)", "author": "Jackie-Jiang", "createdAt": "2020-12-03T23:56:37Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/util/HelixSetupUtils.java", "diffHunk": "@@ -81,6 +81,7 @@ private static void setupHelixClusterIfNeeded(String helixClusterName, String zk\n       configMap.put(DEFAULT_HYPERLOGLOG_LOG2M_KEY, Integer.toString(DEFAULT_HYPERLOGLOG_LOG2M));\n       configMap.put(CommonConstants.Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE, Boolean.toString(false));\n       admin.setConfig(configScope, configMap);\n+      admin.close();", "originalCommit": "4f7aa022580af7c125fdc237478932ecd7dc60f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MTMyOA==", "url": "https://github.com/apache/pinot/pull/6315#discussion_r535741328", "bodyText": "Updated.", "author": "mayankshriv", "createdAt": "2020-12-04T00:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczMzg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e13f39ed4b29906f2759ac04dd4c3cfadc46fc16", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/util/HelixSetupUtils.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/util/HelixSetupUtils.java\nindex 5f35861d88..be5d89d1b3 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/util/HelixSetupUtils.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/util/HelixSetupUtils.java\n\n@@ -66,23 +66,29 @@ public class HelixSetupUtils {\n   }\n \n   private static void setupHelixClusterIfNeeded(String helixClusterName, String zkPath) {\n-    HelixAdmin admin = new ZKHelixAdmin(zkPath);\n-    if (admin.getClusters().contains(helixClusterName)) {\n-      LOGGER.info(\"Helix cluster: {} already exists\", helixClusterName);\n-    } else {\n-      LOGGER.info(\"Creating a new Helix cluster: {}\", helixClusterName);\n-      admin.addCluster(helixClusterName, false);\n-      // Enable Auto-Join for the cluster\n-      HelixConfigScope configScope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(helixClusterName).build();\n-      Map<String, String> configMap = new HashMap<>();\n-      configMap.put(ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN, Boolean.toString(true));\n-      configMap.put(ENABLE_CASE_INSENSITIVE_KEY, Boolean.toString(false));\n-      configMap.put(DEFAULT_HYPERLOGLOG_LOG2M_KEY, Integer.toString(DEFAULT_HYPERLOGLOG_LOG2M));\n-      configMap.put(CommonConstants.Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE, Boolean.toString(false));\n-      admin.setConfig(configScope, configMap);\n-      admin.close();\n-      LOGGER.info(\"New Helix cluster: {} created\", helixClusterName);\n+    HelixAdmin admin = null;\n+    try {\n+      admin = new ZKHelixAdmin(zkPath);\n+      if (admin.getClusters().contains(helixClusterName)) {\n+        LOGGER.info(\"Helix cluster: {} already exists\", helixClusterName);\n+      } else {\n+        LOGGER.info(\"Creating a new Helix cluster: {}\", helixClusterName);\n+        admin.addCluster(helixClusterName, false);\n+        // Enable Auto-Join for the cluster\n+        HelixConfigScope configScope =\n+            new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(helixClusterName).build();\n+        Map<String, String> configMap = new HashMap<>();\n+        configMap.put(ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN, Boolean.toString(true));\n+        configMap.put(ENABLE_CASE_INSENSITIVE_KEY, Boolean.toString(false));\n+        configMap.put(DEFAULT_HYPERLOGLOG_LOG2M_KEY, Integer.toString(DEFAULT_HYPERLOGLOG_LOG2M));\n+        configMap.put(CommonConstants.Broker.CONFIG_OF_ENABLE_QUERY_LIMIT_OVERRIDE, Boolean.toString(false));\n+        admin.setConfig(configScope, configMap);\n+        LOGGER.info(\"New Helix cluster: {} created\", helixClusterName);\n+      }\n+    } finally {\n+      if (admin != null) {\n+        admin.close();\n+      }\n     }\n   }\n \n"}}, {"oid": "e13f39ed4b29906f2759ac04dd4c3cfadc46fc16", "url": "https://github.com/apache/pinot/commit/e13f39ed4b29906f2759ac04dd4c3cfadc46fc16", "message": "Fix: Close HelixAdmin appropriately, when setting up Helix Cluster.\n\nCurrently, we cannot select multiple controller tests and run them in IDE successfully.\nWe see that after the first test that extends `ControllerTest`, the setup for next test\nis unsuccessful due to the following reason:\n\n- In `startController`, we setup Helix as well as Pinot Controllers.\n- Both of these end up opening a ZKClient, however, only one of them (Pinot Controller)\n  closes the zkClient.\n- Since Helix controller does not close the ZKCLient, it remains alive, even after the\n  first test's `cleanup()` is called.\n- Given that we use SharedZKClientFactory which is a singleton class, and when running\n  multiple tests from IDE, they use the same JVM, the second test ends up getting\n  an obsolete ZKClient from preivous test, which is already disconnected.\n\nThis PR fixes the issue by appropriately closing the HelixAdmin (which closes the ZKClient)\nwhen completed.", "committedDate": "2020-12-04T00:12:35Z", "type": "commit"}, {"oid": "e13f39ed4b29906f2759ac04dd4c3cfadc46fc16", "url": "https://github.com/apache/pinot/commit/e13f39ed4b29906f2759ac04dd4c3cfadc46fc16", "message": "Fix: Close HelixAdmin appropriately, when setting up Helix Cluster.\n\nCurrently, we cannot select multiple controller tests and run them in IDE successfully.\nWe see that after the first test that extends `ControllerTest`, the setup for next test\nis unsuccessful due to the following reason:\n\n- In `startController`, we setup Helix as well as Pinot Controllers.\n- Both of these end up opening a ZKClient, however, only one of them (Pinot Controller)\n  closes the zkClient.\n- Since Helix controller does not close the ZKCLient, it remains alive, even after the\n  first test's `cleanup()` is called.\n- Given that we use SharedZKClientFactory which is a singleton class, and when running\n  multiple tests from IDE, they use the same JVM, the second test ends up getting\n  an obsolete ZKClient from preivous test, which is already disconnected.\n\nThis PR fixes the issue by appropriately closing the HelixAdmin (which closes the ZKClient)\nwhen completed.", "committedDate": "2020-12-04T00:12:35Z", "type": "forcePushed"}]}