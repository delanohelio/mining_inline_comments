{"pr_number": 6247, "pr_title": "Add stream and batch to ingestionConfig", "pr_createdAt": "2020-11-06T22:29:35Z", "pr_url": "https://github.com/apache/pinot/pull/6247", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NjYxMQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r521686611", "bodyText": "one high level question: shall we keep this utils method in pinot-core or we should move it to pinot-spi or pinot-common?", "author": "xiangfu0", "createdAt": "2020-11-11T22:53:47Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java", "diffHunk": "@@ -114,4 +122,68 @@ public static Long extractTimeValue(Comparable time) {\n     }\n     return null;\n   }\n+\n+  /**\n+   * Fetches the streamConfig from the given realtime table.\n+   * First, the ingestionConfigs->stream->streamConfigs will be checked.\n+   * If not found, the indexingConfig->streamConfigs will be checked (which is deprecated).\n+   * @param tableConfig realtime table config\n+   * @return streamConfigs map\n+   */\n+  public static Map<String, String> getStreamConfigsMap(TableConfig tableConfig) {", "originalCommit": "983ec268de7655b9223ef430a0ee0399cff8abe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwODU4NQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r521708585", "bodyText": "+1 on moving this to spi. Maybe adding an IngestionConfigUtils class for the backward-compatibility handling", "author": "Jackie-Jiang", "createdAt": "2020-11-11T23:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NjYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2MTI0NQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r522361245", "bodyText": "Moved it to pinot-spi, but I didn't understand why it should be moved?\nDo we also want to move all methods from IngestionUtils into the IngestionConfigUtils in the future?", "author": "npawar", "createdAt": "2020-11-12T19:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NjYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU0OTU4NA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r522549584", "bodyText": "IMO the methods for ingestion config backward-compatibility should be in spi, others can stay in core", "author": "Jackie-Jiang", "createdAt": "2020-11-13T01:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NjYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java b/pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java\nindex 2b4a053458..fa7ce1a78b 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java\n\n@@ -122,68 +115,4 @@ public class IngestionUtils {\n     }\n     return null;\n   }\n-\n-  /**\n-   * Fetches the streamConfig from the given realtime table.\n-   * First, the ingestionConfigs->stream->streamConfigs will be checked.\n-   * If not found, the indexingConfig->streamConfigs will be checked (which is deprecated).\n-   * @param tableConfig realtime table config\n-   * @return streamConfigs map\n-   */\n-  public static Map<String, String> getStreamConfigsMap(TableConfig tableConfig) {\n-    String tableNameWithType = tableConfig.getTableName();\n-    Preconditions.checkState(tableConfig.getTableType() == TableType.REALTIME,\n-        \"Cannot fetch streamConfigs for OFFLINE table: %s\", tableNameWithType);\n-    Map<String, String> streamConfigsMap = null;\n-    if (tableConfig.getIngestionConfig() != null && tableConfig.getIngestionConfig().getStream() != null) {\n-      List<Map<String, String>> streamConfigs = tableConfig.getIngestionConfig().getStream().getStreamConfigs();\n-      if (!CollectionUtils.isEmpty(streamConfigs)) {\n-        Preconditions.checkState(streamConfigs.size() == 1, \"Only 1 stream supported per table\");\n-        streamConfigsMap = streamConfigs.get(0);\n-      }\n-    }\n-    if (streamConfigsMap == null && tableConfig.getIndexingConfig() != null) {\n-      streamConfigsMap = tableConfig.getIndexingConfig().getStreamConfigs();\n-    }\n-    if (streamConfigsMap == null) {\n-      throw new IllegalStateException(\"Could not find streamConfigs for REALTIME table: \" + tableNameWithType);\n-    }\n-    return streamConfigsMap;\n-  }\n-\n-  /**\n-   * Fetches the configured segmentPushType (APPEND/REFRESH) from the table config\n-   * First checks in the ingestionConfig. If not found, checks in the segmentsConfig (has been deprecated from here in favor of ingestion config)\n-   */\n-  public static String getBatchSegmentPushType(TableConfig tableConfig) {\n-    String segmentPushType = null;\n-    if (tableConfig.getIngestionConfig() != null) {\n-      Batch batch = tableConfig.getIngestionConfig().getBatch();\n-      if (batch != null) {\n-        segmentPushType = batch.getSegmentPushType();\n-      }\n-    }\n-    if (segmentPushType == null) {\n-      segmentPushType = tableConfig.getValidationConfig().getSegmentPushType();\n-    }\n-    return segmentPushType;\n-  }\n-\n-  /**\n-   * Fetches the configured segmentPushFrequency from the table config\n-   * First checks in the ingestionConfig. If not found, checks in the segmentsConfig (has been deprecated from here in favor of ingestion config)\n-   */\n-  public static String getBatchSegmentPushFrequency(TableConfig tableConfig) {\n-    String segmentPushFrequency = null;\n-    if (tableConfig.getIngestionConfig() != null) {\n-      Batch batch = tableConfig.getIngestionConfig().getBatch();\n-      if (batch != null) {\n-        segmentPushFrequency = batch.getSegmentPushFrequency();\n-      }\n-    }\n-    if (segmentPushFrequency == null) {\n-      segmentPushFrequency = tableConfig.getValidationConfig().getSegmentPushFrequency();\n-    }\n-    return segmentPushFrequency;\n-  }\n }\n"}}, {"oid": "fbe127638dbd7de657b6a65eabe376c55666d7da", "url": "https://github.com/apache/pinot/commit/fbe127638dbd7de657b6a65eabe376c55666d7da", "message": "Add stream and batch to ingestionConfig", "committedDate": "2020-11-11T23:31:43Z", "type": "commit"}, {"oid": "af6449c9d915abdf22a8483077f139e4801f873a", "url": "https://github.com/apache/pinot/commit/af6449c9d915abdf22a8483077f139e4801f873a", "message": "streamConfigs json propertu name", "committedDate": "2020-11-11T23:31:43Z", "type": "commit"}, {"oid": "af6449c9d915abdf22a8483077f139e4801f873a", "url": "https://github.com/apache/pinot/commit/af6449c9d915abdf22a8483077f139e4801f873a", "message": "streamConfigs json propertu name", "committedDate": "2020-11-11T23:31:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNTUxMg==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r521705512", "bodyText": "verifyStreamConfig()? We might want to add more checks in the future", "author": "Jackie-Jiang", "createdAt": "2020-11-11T23:38:09Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -1307,9 +1307,9 @@ public void registerPinotLLCRealtimeSegmentManager(PinotLLCRealtimeSegmentManage\n     _pinotLLCRealtimeSegmentManager = pinotLLCRealtimeSegmentManager;\n   }\n \n-  private void verifyIndexingConfig(String tableNameWithType, IndexingConfig indexingConfig) {\n+  private void checkForHLC(String tableNameWithType, TableConfig tableConfig) {", "originalCommit": "af6449c9d915abdf22a8483077f139e4801f873a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "chunk": "diff --git a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\nindex 621583185e..fdc005f473 100644\n--- a/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\n+++ b/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java\n\n@@ -1307,9 +1307,10 @@ public class PinotHelixResourceManager {\n     _pinotLLCRealtimeSegmentManager = pinotLLCRealtimeSegmentManager;\n   }\n \n-  private void checkForHLC(String tableNameWithType, TableConfig tableConfig) {\n+  private void verifyStreamConfig(String tableNameWithType, TableConfig tableConfig) {\n     // Check if HLC table is allowed.\n-    StreamConfig streamConfig = new StreamConfig(tableNameWithType, IngestionUtils.getStreamConfigsMap(tableConfig));\n+    StreamConfig streamConfig =\n+        new StreamConfig(tableNameWithType, IngestionConfigUtils.getStreamConfigMap(tableConfig));\n     if (streamConfig.hasHighLevelConsumerType() && !_allowHLCTables) {\n       throw new InvalidTableConfigException(\n           \"Creating HLC realtime table is not allowed for Table: \" + tableNameWithType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcxMDYxMA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r521710610", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static Map<String, String> getStreamConfigsMap(TableConfig tableConfig) {\n          \n          \n            \n              public static Map<String, String> getStreamConfigMap(TableConfig tableConfig) {", "author": "Jackie-Jiang", "createdAt": "2020-11-11T23:52:08Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java", "diffHunk": "@@ -114,4 +122,68 @@ public static Long extractTimeValue(Comparable time) {\n     }\n     return null;\n   }\n+\n+  /**\n+   * Fetches the streamConfig from the given realtime table.\n+   * First, the ingestionConfigs->stream->streamConfigs will be checked.\n+   * If not found, the indexingConfig->streamConfigs will be checked (which is deprecated).\n+   * @param tableConfig realtime table config\n+   * @return streamConfigs map\n+   */\n+  public static Map<String, String> getStreamConfigsMap(TableConfig tableConfig) {", "originalCommit": "af6449c9d915abdf22a8483077f139e4801f873a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java b/pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java\nindex 2b4a053458..fa7ce1a78b 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/util/IngestionUtils.java\n\n@@ -122,68 +115,4 @@ public class IngestionUtils {\n     }\n     return null;\n   }\n-\n-  /**\n-   * Fetches the streamConfig from the given realtime table.\n-   * First, the ingestionConfigs->stream->streamConfigs will be checked.\n-   * If not found, the indexingConfig->streamConfigs will be checked (which is deprecated).\n-   * @param tableConfig realtime table config\n-   * @return streamConfigs map\n-   */\n-  public static Map<String, String> getStreamConfigsMap(TableConfig tableConfig) {\n-    String tableNameWithType = tableConfig.getTableName();\n-    Preconditions.checkState(tableConfig.getTableType() == TableType.REALTIME,\n-        \"Cannot fetch streamConfigs for OFFLINE table: %s\", tableNameWithType);\n-    Map<String, String> streamConfigsMap = null;\n-    if (tableConfig.getIngestionConfig() != null && tableConfig.getIngestionConfig().getStream() != null) {\n-      List<Map<String, String>> streamConfigs = tableConfig.getIngestionConfig().getStream().getStreamConfigs();\n-      if (!CollectionUtils.isEmpty(streamConfigs)) {\n-        Preconditions.checkState(streamConfigs.size() == 1, \"Only 1 stream supported per table\");\n-        streamConfigsMap = streamConfigs.get(0);\n-      }\n-    }\n-    if (streamConfigsMap == null && tableConfig.getIndexingConfig() != null) {\n-      streamConfigsMap = tableConfig.getIndexingConfig().getStreamConfigs();\n-    }\n-    if (streamConfigsMap == null) {\n-      throw new IllegalStateException(\"Could not find streamConfigs for REALTIME table: \" + tableNameWithType);\n-    }\n-    return streamConfigsMap;\n-  }\n-\n-  /**\n-   * Fetches the configured segmentPushType (APPEND/REFRESH) from the table config\n-   * First checks in the ingestionConfig. If not found, checks in the segmentsConfig (has been deprecated from here in favor of ingestion config)\n-   */\n-  public static String getBatchSegmentPushType(TableConfig tableConfig) {\n-    String segmentPushType = null;\n-    if (tableConfig.getIngestionConfig() != null) {\n-      Batch batch = tableConfig.getIngestionConfig().getBatch();\n-      if (batch != null) {\n-        segmentPushType = batch.getSegmentPushType();\n-      }\n-    }\n-    if (segmentPushType == null) {\n-      segmentPushType = tableConfig.getValidationConfig().getSegmentPushType();\n-    }\n-    return segmentPushType;\n-  }\n-\n-  /**\n-   * Fetches the configured segmentPushFrequency from the table config\n-   * First checks in the ingestionConfig. If not found, checks in the segmentsConfig (has been deprecated from here in favor of ingestion config)\n-   */\n-  public static String getBatchSegmentPushFrequency(TableConfig tableConfig) {\n-    String segmentPushFrequency = null;\n-    if (tableConfig.getIngestionConfig() != null) {\n-      Batch batch = tableConfig.getIngestionConfig().getBatch();\n-      if (batch != null) {\n-        segmentPushFrequency = batch.getSegmentPushFrequency();\n-      }\n-    }\n-    if (segmentPushFrequency == null) {\n-      segmentPushFrequency = tableConfig.getValidationConfig().getSegmentPushFrequency();\n-    }\n-    return segmentPushFrequency;\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1MjQ2OQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r521752469", "bodyText": "Suggest renaming it to BatchIngestionConfig. Batch can cause confusion IMO", "author": "Jackie-Jiang", "createdAt": "2020-11-12T01:04:27Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Batch.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table.ingestion;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Contains all configs related to the batch sources for ingestion.\n+ */\n+public class Batch extends BaseJsonConfig {", "originalCommit": "af6449c9d915abdf22a8483077f139e4801f873a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Batch.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\nsimilarity index 78%\nrename from pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Batch.java\nrename to pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\nindex a5e15a6bbb..b8430119f9 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Batch.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\n\n@@ -30,10 +30,10 @@ import org.apache.pinot.spi.config.BaseJsonConfig;\n /**\n  * Contains all configs related to the batch sources for ingestion.\n  */\n-public class Batch extends BaseJsonConfig {\n+public class BatchIngestionConfig extends BaseJsonConfig {\n \n   @JsonPropertyDescription(\"Configs for all the batch sources to ingest from\")\n-  private final List<Map<String, String>> _batchConfigs;\n+  private final List<Map<String, String>> _batchConfigMaps;\n \n   @JsonPropertyDescription(\"Push type APPEND or REFRESH\")\n   private final String _segmentPushType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1MjY4OQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r521752689", "bodyText": "Suggest renaming it to StreamIngestionConfig", "author": "Jackie-Jiang", "createdAt": "2020-11-12T01:04:47Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Stream.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table.ingestion;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Contains all the configs related to the streams for ingestion\n+ */\n+public class Stream extends BaseJsonConfig {", "originalCommit": "af6449c9d915abdf22a8483077f139e4801f873a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Stream.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/StreamIngestionConfig.java\nsimilarity index 78%\nrename from pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Stream.java\nrename to pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/StreamIngestionConfig.java\nindex 6aecccb535..0ec379d7fd 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Stream.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/StreamIngestionConfig.java\n\n@@ -30,18 +30,17 @@ import org.apache.pinot.spi.config.BaseJsonConfig;\n /**\n  * Contains all the configs related to the streams for ingestion\n  */\n-public class Stream extends BaseJsonConfig {\n+public class StreamIngestionConfig extends BaseJsonConfig {\n \n   @JsonPropertyDescription(\"All configs for the streams from which to ingest\")\n-  private final List<Map<String, String>> _streamConfigs;\n+  private final List<Map<String, String>> _streamConfigMaps;\n \n   @JsonCreator\n-  public Stream(@JsonProperty(\"streamConfigs\") @Nullable List<Map<String, String>> streamConfigs) {\n-    _streamConfigs = streamConfigs;\n+  public StreamIngestionConfig(@JsonProperty(\"streamConfigMaps\") List<Map<String, String>> streamConfigMaps) {\n+    _streamConfigMaps = streamConfigMaps;\n   }\n \n-  @Nullable\n-  public List<Map<String, String>> getStreamConfigs() {\n-    return _streamConfigs;\n+  public List<Map<String, String>> getStreamConfigMaps() {\n+    return _streamConfigMaps;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1NTUwOA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r521755508", "bodyText": "Don't make the argument nullable. If batch ingestion config is provided, these fields should not be null. This can simplify the null handling", "author": "Jackie-Jiang", "createdAt": "2020-11-12T01:10:26Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Batch.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table.ingestion;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Contains all configs related to the batch sources for ingestion.\n+ */\n+public class Batch extends BaseJsonConfig {\n+\n+  @JsonPropertyDescription(\"Configs for all the batch sources to ingest from\")\n+  private final List<Map<String, String>> _batchConfigs;\n+\n+  @JsonPropertyDescription(\"Push type APPEND or REFRESH\")\n+  private final String _segmentPushType;\n+\n+  @JsonPropertyDescription(\"Push frequency HOURLY or DAILY\")\n+  private final String _segmentPushFrequency;\n+\n+  @JsonCreator\n+  public Batch(@JsonProperty(\"batchConfigs\") @Nullable List<Map<String, String>> batchConfigs,", "originalCommit": "af6449c9d915abdf22a8483077f139e4801f873a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MTE1NQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r525591155", "bodyText": "This one in particular should be allowed to be null i think. We have deprecated segmentPushType and segmentPushFrequency. That will make users set it in the BatchIngestionConfig. But not all users will have BatchConfigMaps (i.e. they could still be using push based model)", "author": "npawar", "createdAt": "2020-11-17T23:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1NTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Batch.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\nsimilarity index 78%\nrename from pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Batch.java\nrename to pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\nindex a5e15a6bbb..b8430119f9 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Batch.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\n\n@@ -30,10 +30,10 @@ import org.apache.pinot.spi.config.BaseJsonConfig;\n /**\n  * Contains all configs related to the batch sources for ingestion.\n  */\n-public class Batch extends BaseJsonConfig {\n+public class BatchIngestionConfig extends BaseJsonConfig {\n \n   @JsonPropertyDescription(\"Configs for all the batch sources to ingest from\")\n-  private final List<Map<String, String>> _batchConfigs;\n+  private final List<Map<String, String>> _batchConfigMaps;\n \n   @JsonPropertyDescription(\"Push type APPEND or REFRESH\")\n   private final String _segmentPushType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1NTgzOA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r521755838", "bodyText": "streamConfigs should not be null if stream ingestion config is provided. Also suggest renaming it to streamConfigMaps to differentiate it from StreamConfig", "author": "Jackie-Jiang", "createdAt": "2020-11-12T01:11:43Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Stream.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table.ingestion;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Contains all the configs related to the streams for ingestion\n+ */\n+public class Stream extends BaseJsonConfig {\n+\n+  @JsonPropertyDescription(\"All configs for the streams from which to ingest\")\n+  private final List<Map<String, String>> _streamConfigs;\n+\n+  @JsonCreator\n+  public Stream(@JsonProperty(\"streamConfigs\") @Nullable List<Map<String, String>> streamConfigs) {", "originalCommit": "af6449c9d915abdf22a8483077f139e4801f873a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Stream.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/StreamIngestionConfig.java\nsimilarity index 78%\nrename from pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Stream.java\nrename to pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/StreamIngestionConfig.java\nindex 6aecccb535..0ec379d7fd 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/Stream.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/StreamIngestionConfig.java\n\n@@ -30,18 +30,17 @@ import org.apache.pinot.spi.config.BaseJsonConfig;\n /**\n  * Contains all the configs related to the streams for ingestion\n  */\n-public class Stream extends BaseJsonConfig {\n+public class StreamIngestionConfig extends BaseJsonConfig {\n \n   @JsonPropertyDescription(\"All configs for the streams from which to ingest\")\n-  private final List<Map<String, String>> _streamConfigs;\n+  private final List<Map<String, String>> _streamConfigMaps;\n \n   @JsonCreator\n-  public Stream(@JsonProperty(\"streamConfigs\") @Nullable List<Map<String, String>> streamConfigs) {\n-    _streamConfigs = streamConfigs;\n+  public StreamIngestionConfig(@JsonProperty(\"streamConfigMaps\") List<Map<String, String>> streamConfigMaps) {\n+    _streamConfigMaps = streamConfigMaps;\n   }\n \n-  @Nullable\n-  public List<Map<String, String>> getStreamConfigs() {\n-    return _streamConfigs;\n+  public List<Map<String, String>> getStreamConfigMaps() {\n+    return _streamConfigMaps;\n   }\n }\n"}}, {"oid": "b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "url": "https://github.com/apache/pinot/commit/b3829b085a063ec82c0dc3ce5da8ebf2a94e2567", "message": "Review comments", "committedDate": "2020-11-12T19:24:15Z", "type": "commit"}, {"oid": "78edfcc03f84991e1968cf7877855e3cad74fcfb", "url": "https://github.com/apache/pinot/commit/78edfcc03f84991e1968cf7877855e3cad74fcfb", "message": "s/getStream/getStreamIngestionConfig in integration test", "committedDate": "2020-11-12T19:34:48Z", "type": "commit"}, {"oid": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "url": "https://github.com/apache/pinot/commit/7591172003e34e61426e1b3e0437dcdbe1aa3057", "message": "s/constructStreamProperty/constructBatchProperty", "committedDate": "2020-11-13T00:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0MDcwOQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523140709", "bodyText": "can we also check and disallow the co-existence with the legacy stream config in index config?", "author": "yupeng9", "createdAt": "2020-11-13T18:20:02Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -179,9 +181,34 @@ private static void validateValidationConfig(TableConfig tableConfig, @Nullable\n    * 4. validity of transform function string\n    * 5. checks for source fields used in destination columns\n    */\n-  private static void validateIngestionConfig(@Nullable IngestionConfig ingestionConfig, @Nullable Schema schema) {\n+  public static void validateIngestionConfig(String tableNameWithType, @Nullable IngestionConfig ingestionConfig,\n+      @Nullable Schema schema) {\n     if (ingestionConfig != null) {\n \n+      // Batch\n+      if (ingestionConfig.getBatchIngestionConfig() != null) {\n+        List<Map<String, String>> batchConfigMaps = ingestionConfig.getBatchIngestionConfig().getBatchConfigMaps();\n+        Preconditions.checkState(batchConfigMaps.size() > 0, \"Could not find batch config map\");\n+        try {\n+            // Validate that BatchConfig can be created\n+            batchConfigMaps.forEach(b -> new BatchConfig(tableNameWithType, b));\n+        } catch (Exception e) {\n+          throw new IllegalStateException(\"Could not create BatchConfig using the batchConfig map\", e);\n+        }\n+      }\n+\n+      // Stream\n+      if (ingestionConfig.getStreamIngestionConfig() != null) {\n+        List<Map<String, String>> streamConfigMaps = ingestionConfig.getStreamIngestionConfig().getStreamConfigMaps();\n+        Preconditions.checkState(streamConfigMaps.size() == 1, \"Only 1 stream is supported in REALTIME table\");", "originalCommit": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8c2fb0db800161fa785f821552939ff26a80427", "chunk": "diff --git a/pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java b/pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java\nindex 66bbc2b80f..d2f256efba 100644\n--- a/pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java\n+++ b/pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java\n\n@@ -181,17 +182,19 @@ public final class TableConfigUtils {\n    * 4. validity of transform function string\n    * 5. checks for source fields used in destination columns\n    */\n-  public static void validateIngestionConfig(String tableNameWithType, @Nullable IngestionConfig ingestionConfig,\n-      @Nullable Schema schema) {\n+  public static void validateIngestionConfig(TableConfig tableConfig, @Nullable Schema schema) {\n+    IngestionConfig ingestionConfig = tableConfig.getIngestionConfig();\n+\n     if (ingestionConfig != null) {\n+      String tableNameWithType = tableConfig.getTableName();\n \n       // Batch\n       if (ingestionConfig.getBatchIngestionConfig() != null) {\n         List<Map<String, String>> batchConfigMaps = ingestionConfig.getBatchIngestionConfig().getBatchConfigMaps();\n         Preconditions.checkState(batchConfigMaps.size() > 0, \"Could not find batch config map\");\n         try {\n-            // Validate that BatchConfig can be created\n-            batchConfigMaps.forEach(b -> new BatchConfig(tableNameWithType, b));\n+          // Validate that BatchConfig can be created\n+          batchConfigMaps.forEach(b -> new BatchConfig(tableNameWithType, b));\n         } catch (Exception e) {\n           throw new IllegalStateException(\"Could not create BatchConfig using the batchConfig map\", e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3OTIyMA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523279220", "bodyText": "can you add docs on the replacemet?", "author": "yupeng9", "createdAt": "2020-11-13T23:11:23Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/SegmentsValidationAndRetentionConfig.java", "diffHunk": "@@ -22,14 +22,17 @@\n import java.util.concurrent.TimeUnit;\n \n import org.apache.pinot.spi.config.BaseJsonConfig;\n+import org.apache.pinot.spi.config.table.ingestion.IngestionConfig;\n import org.apache.pinot.spi.utils.TimeUtils;\n \n \n // TODO: Consider break this config into multiple configs\n public class SegmentsValidationAndRetentionConfig extends BaseJsonConfig {\n   private String _retentionTimeUnit;\n   private String _retentionTimeValue;\n+  @Deprecated", "originalCommit": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2NDg4Ng==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r525764886", "bodyText": "added to this: https://docs.pinot.apache.org/configuration-reference/table", "author": "npawar", "createdAt": "2020-11-18T04:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3OTIyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3OTI0MA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523279240", "bodyText": "can you add docs on the replacemet?", "author": "yupeng9", "createdAt": "2020-11-13T23:11:27Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/SegmentsValidationAndRetentionConfig.java", "diffHunk": "@@ -22,14 +22,17 @@\n import java.util.concurrent.TimeUnit;\n \n import org.apache.pinot.spi.config.BaseJsonConfig;\n+import org.apache.pinot.spi.config.table.ingestion.IngestionConfig;\n import org.apache.pinot.spi.utils.TimeUtils;\n \n \n // TODO: Consider break this config into multiple configs\n public class SegmentsValidationAndRetentionConfig extends BaseJsonConfig {\n   private String _retentionTimeUnit;\n   private String _retentionTimeValue;\n+  @Deprecated\n   private String _segmentPushFrequency; // DO NOT REMOVE, this is used in internal segment generation management\n+  @Deprecated", "originalCommit": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3OTMyNA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523279324", "bodyText": "not needed?", "author": "yupeng9", "createdAt": "2020-11-13T23:11:45Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TableConfig.java", "diffHunk": "@@ -29,6 +29,7 @@\n import org.apache.pinot.spi.config.BaseJsonConfig;\n import org.apache.pinot.spi.config.table.assignment.InstanceAssignmentConfig;\n import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+import org.apache.pinot.spi.config.table.ingestion.IngestionConfig;", "originalCommit": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4ODk4MA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r525588980", "bodyText": "I don't know how it was missing before, but it is needed. IntelliJ complains if I remove it", "author": "npawar", "createdAt": "2020-11-17T23:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3OTMyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MDI4MA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523280280", "bodyText": "shall we have @JsonProperty?", "author": "yupeng9", "createdAt": "2020-11-13T23:15:24Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table.ingestion;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Contains all configs related to the batch sources for ingestion.\n+ */\n+public class BatchIngestionConfig extends BaseJsonConfig {\n+\n+  @JsonPropertyDescription(\"Configs for all the batch sources to ingest from\")\n+  private final List<Map<String, String>> _batchConfigMaps;\n+\n+  @JsonPropertyDescription(\"Push type APPEND or REFRESH\")\n+  private final String _segmentPushType;\n+\n+  @JsonPropertyDescription(\"Push frequency HOURLY or DAILY\")\n+  private final String _segmentPushFrequency;\n+\n+  @JsonCreator\n+  public BatchIngestionConfig(@JsonProperty(\"batchConfigMaps\") List<Map<String, String>> batchConfigMaps,\n+      @JsonProperty(\"segmentPushType\") String segmentPushType,\n+      @JsonProperty(\"segmentPushFrequency\") String segmentPushFrequency) {\n+    _batchConfigMaps = batchConfigMaps;\n+    _segmentPushType = segmentPushType;\n+    _segmentPushFrequency = segmentPushFrequency;\n+  }\n+\n+  public List<Map<String, String>> getBatchConfigMaps() {\n+    return _batchConfigMaps;\n+  }\n+\n+  public String getSegmentPushType() {", "originalCommit": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4NTIyMQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523285221", "bodyText": "By default, public getters are JsonProperty. We usually only annotate them if the getter should be skipped, or the field uses a different name in json", "author": "Jackie-Jiang", "createdAt": "2020-11-13T23:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MDI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "61c0b52e3779e74a1af95ed2f4da62b7c97a0b98", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\nindex b8430119f9..e9b8718ccf 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/ingestion/BatchIngestionConfig.java\n\n@@ -42,7 +42,7 @@ public class BatchIngestionConfig extends BaseJsonConfig {\n   private final String _segmentPushFrequency;\n \n   @JsonCreator\n-  public BatchIngestionConfig(@JsonProperty(\"batchConfigMaps\") List<Map<String, String>> batchConfigMaps,\n+  public BatchIngestionConfig(@JsonProperty(\"batchConfigMaps\") @Nullable List<Map<String, String>> batchConfigMaps,\n       @JsonProperty(\"segmentPushType\") String segmentPushType,\n       @JsonProperty(\"segmentPushFrequency\") String segmentPushFrequency) {\n     _batchConfigMaps = batchConfigMaps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MDgxNA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523280814", "bodyText": "why is this not in the same project as IngestionConfigUtils in spi?", "author": "yupeng9", "createdAt": "2020-11-13T23:17:27Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/util/IngestionUtilsTest.java", "diffHunk": "@@ -22,17 +22,27 @@\n import com.google.common.collect.Sets;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashMap;", "originalCommit": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4Njg5Mg==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523286892", "bodyText": "+1", "author": "Jackie-Jiang", "createdAt": "2020-11-13T23:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MDgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "f8c2fb0db800161fa785f821552939ff26a80427", "chunk": "diff --git a/pinot-core/src/test/java/org/apache/pinot/core/util/IngestionUtilsTest.java b/pinot-core/src/test/java/org/apache/pinot/core/util/IngestionUtilsTest.java\nindex 2e489eaa42..90d7396302 100644\n--- a/pinot-core/src/test/java/org/apache/pinot/core/util/IngestionUtilsTest.java\n+++ b/pinot-core/src/test/java/org/apache/pinot/core/util/IngestionUtilsTest.java\n\n@@ -22,27 +22,17 @@ import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n-import org.apache.pinot.spi.config.table.IndexingConfig;\n-import org.apache.pinot.spi.config.table.SegmentsValidationAndRetentionConfig;\n-import org.apache.pinot.spi.config.table.TableConfig;\n-import org.apache.pinot.spi.config.table.TableType;\n-import org.apache.pinot.spi.config.table.ingestion.BatchIngestionConfig;\n-import org.apache.pinot.spi.config.table.ingestion.IngestionConfig;\n import org.apache.pinot.spi.config.table.ingestion.FilterConfig;\n-import org.apache.pinot.spi.config.table.ingestion.StreamIngestionConfig;\n+import org.apache.pinot.spi.config.table.ingestion.IngestionConfig;\n import org.apache.pinot.spi.config.table.ingestion.TransformConfig;\n import org.apache.pinot.spi.data.DateTimeFieldSpec;\n import org.apache.pinot.spi.data.DimensionFieldSpec;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.spi.data.TimeGranularitySpec;\n-import org.apache.pinot.spi.utils.IngestionConfigUtils;\n-import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4NzQ3OQ==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523287479", "bodyText": "Update the comment", "author": "Jackie-Jiang", "createdAt": "2020-11-13T23:43:57Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/IndexingConfig.java", "diffHunk": "@@ -33,6 +34,7 @@\n   private List<String> _bloomFilterColumns;\n   private Map<String, BloomFilterConfig> _bloomFilterConfigs;\n   private String _loadMode;\n+  @Deprecated // Moved to IngestionConfigs#Stream", "originalCommit": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8c2fb0db800161fa785f821552939ff26a80427", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/IndexingConfig.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/IndexingConfig.java\nindex b11848d4d5..184d00ad76 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/IndexingConfig.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/IndexingConfig.java\n\n@@ -34,7 +34,7 @@ public class IndexingConfig extends BaseJsonConfig {\n   private List<String> _bloomFilterColumns;\n   private Map<String, BloomFilterConfig> _bloomFilterConfigs;\n   private String _loadMode;\n-  @Deprecated // Moved to IngestionConfigs#Stream\n+  @Deprecated // Moved to {@link IngestionConfig#getStreamIngestionConfig}\n   private Map<String, String> _streamConfigs;\n   private String _segmentFormatVersion;\n   private String _columnMinMaxValueGeneratorMode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4NzgyNA==", "url": "https://github.com/apache/pinot/pull/6247#discussion_r523287824", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @deprecated Use <code>segmentPushFrequency</code> from {@link IngestionConfig#getBatchIngestionConfig()}\n          \n          \n            \n               * @deprecated Use {@code segmentPushFrequency} from {@link IngestionConfig#getBatchIngestionConfig()}", "author": "Jackie-Jiang", "createdAt": "2020-11-13T23:45:18Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/SegmentsValidationAndRetentionConfig.java", "diffHunk": "@@ -91,6 +94,9 @@ public void setRetentionTimeValue(String retentionTimeValue) {\n     _retentionTimeValue = retentionTimeValue;\n   }\n \n+  /**\n+   * @deprecated Use <code>segmentPushFrequency</code> from {@link IngestionConfig#getBatchIngestionConfig()}", "originalCommit": "7591172003e34e61426e1b3e0437dcdbe1aa3057", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8c2fb0db800161fa785f821552939ff26a80427", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/SegmentsValidationAndRetentionConfig.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/SegmentsValidationAndRetentionConfig.java\nindex a7b92c8dc2..c91fbd47ba 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/SegmentsValidationAndRetentionConfig.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/table/SegmentsValidationAndRetentionConfig.java\n\n@@ -95,7 +95,7 @@ public class SegmentsValidationAndRetentionConfig extends BaseJsonConfig {\n   }\n \n   /**\n-   * @deprecated Use <code>segmentPushFrequency</code> from {@link IngestionConfig#getBatchIngestionConfig()}\n+   * @deprecated Use {@code segmentPushFrequency} from {@link IngestionConfig#getBatchIngestionConfig()}\n    */\n   public String getSegmentPushFrequency() {\n     return _segmentPushFrequency;\n"}}, {"oid": "f8c2fb0db800161fa785f821552939ff26a80427", "url": "https://github.com/apache/pinot/commit/f8c2fb0db800161fa785f821552939ff26a80427", "message": "Review comments", "committedDate": "2020-11-17T22:24:25Z", "type": "commit"}, {"oid": "61c0b52e3779e74a1af95ed2f4da62b7c97a0b98", "url": "https://github.com/apache/pinot/commit/61c0b52e3779e74a1af95ed2f4da62b7c97a0b98", "message": "Nullable batchConfigMaps", "committedDate": "2020-11-17T23:36:50Z", "type": "commit"}, {"oid": "bfd5193bd56e7c4496a5a7eb2f4b0f5cfc4bf00e", "url": "https://github.com/apache/pinot/commit/bfd5193bd56e7c4496a5a7eb2f4b0f5cfc4bf00e", "message": "Fix integration test", "committedDate": "2020-11-17T23:51:45Z", "type": "commit"}]}