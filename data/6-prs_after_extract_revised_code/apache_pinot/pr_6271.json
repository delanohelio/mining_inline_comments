{"pr_number": 6271, "pr_title": "Adding config utils to apply environment variables and apply it to table config", "pr_createdAt": "2020-11-17T03:33:24Z", "pr_url": "https://github.com/apache/pinot/pull/6271", "timeline": [{"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1", "url": "https://github.com/apache/pinot/commit/21dde94e7c639ec3b55fca73225834eb1dd885e1", "message": "Adding config utils to apply environment variables and apply it to table config", "committedDate": "2020-11-17T03:38:18Z", "type": "commit"}, {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1", "url": "https://github.com/apache/pinot/commit/21dde94e7c639ec3b55fca73225834eb1dd885e1", "message": "Adding config utils to apply environment variables and apply it to table config", "committedDate": "2020-11-17T03:38:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTQwNQ==", "url": "https://github.com/apache/pinot/pull/6271#discussion_r525389405", "bodyText": "shall it be case insenstive or require all caps?", "author": "yupeng9", "createdAt": "2020-11-17T18:26:16Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class ConfigUtils {\n+  private static final Map<String, String> ENVIRONMENT_VARIABLES = System.getenv();\n+\n+  /**\n+   * Apply environment variables to any given BaseJsonConfig.\n+   *\n+   * @return Config with environment variable applied.\n+   */\n+  public static <T extends BaseJsonConfig> T applyConfigWithEnvVariables(T config) {\n+    JsonNode jsonNode;\n+    try {\n+      jsonNode = applyConfigWithEnvVariables(config.toJsonNode());\n+    } catch (RuntimeException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to apply environment variables on json config class [%s].\", config.getClass().getName()), e);\n+    }\n+    try {\n+      return (T) JsonUtils.jsonNodeToObject(jsonNode, config.getClass());\n+    } catch (IOException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to read JsonConfig to class [%s] after applying environment variables, jsonConfig is: '%s'.\",\n+              config.getClass().getName(), jsonNode.toString()), e);\n+    }\n+  }\n+\n+  private static JsonNode applyConfigWithEnvVariables(JsonNode jsonNode) {\n+    final JsonNodeType nodeType = jsonNode.getNodeType();\n+    switch (nodeType) {\n+      case OBJECT:\n+        if (jsonNode.size() > 0) {\n+          Iterator<Map.Entry<String, JsonNode>> iterator = jsonNode.fields();\n+          while (iterator.hasNext()) {\n+            final Map.Entry<String, JsonNode> next = iterator.next();\n+            next.setValue(applyConfigWithEnvVariables(next.getValue()));\n+          }\n+        }\n+        break;\n+      case ARRAY:\n+        if (jsonNode.isArray()) {\n+          ArrayNode arrayNode = (ArrayNode) jsonNode;\n+          for (int i = 0; i < arrayNode.size(); i++) {\n+            JsonNode arrayElement = arrayNode.get(i);\n+            arrayNode.set(i, applyConfigWithEnvVariables(arrayElement));\n+          }\n+        }\n+        break;\n+      case STRING:\n+        final String field = jsonNode.asText();\n+        if (field.startsWith(\"${\") && field.endsWith(\"}\")) {\n+          final String envVarKey = field.substring(2, field.length() - 1);\n+          if (ENVIRONMENT_VARIABLES.containsKey(envVarKey)) {", "originalCommit": "21dde94e7c639ec3b55fca73225834eb1dd885e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyOTc0OA==", "url": "https://github.com/apache/pinot/pull/6271#discussion_r525429748", "bodyText": "The names of environment variables are case-sensitive; by convention they are uppercase, so technically you can define env var: a and A with different values.", "author": "xiangfu0", "createdAt": "2020-11-17T19:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MzUxNw==", "url": "https://github.com/apache/pinot/pull/6271#discussion_r525543517", "bodyText": "yup, it makes sense to follow unix convention", "author": "yupeng9", "createdAt": "2020-11-17T21:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d32f3b027f0c0f1a5d2234e9b6889456c95b9e32", "chunk": "diff --git a/pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java b/pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java\nindex 53047b7d41..7145ebddef 100644\n--- a/pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java\n+++ b/pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java\n\n@@ -77,13 +77,18 @@ public class ConfigUtils {\n       case STRING:\n         final String field = jsonNode.asText();\n         if (field.startsWith(\"${\") && field.endsWith(\"}\")) {\n-          final String envVarKey = field.substring(2, field.length() - 1);\n+          String[] envVarSplits = field.substring(2, field.length() - 1).split(\":\", 2);\n+          String envVarKey = envVarSplits[0];\n           if (ENVIRONMENT_VARIABLES.containsKey(envVarKey)) {\n             return JsonNodeFactory.instance.textNode(ENVIRONMENT_VARIABLES.get(envVarKey));\n+          } else if (envVarSplits.length > 1) {\n+            return JsonNodeFactory.instance.textNode(envVarSplits[1]);\n           }\n-          throw new RuntimeException(\"Missing environment Variable: \" + field);\n+          throw new RuntimeException(\"Missing environment Variable: \" + envVarKey);\n         }\n         break;\n+      default:\n+        break;\n     }\n     return jsonNode;\n   }\n"}}, {"oid": "d32f3b027f0c0f1a5d2234e9b6889456c95b9e32", "url": "https://github.com/apache/pinot/commit/d32f3b027f0c0f1a5d2234e9b6889456c95b9e32", "message": "Support default value in env variable", "committedDate": "2020-11-17T19:34:04Z", "type": "commit"}]}