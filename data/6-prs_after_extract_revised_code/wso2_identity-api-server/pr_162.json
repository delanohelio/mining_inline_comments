{"pr_number": 162, "pr_title": "Enable tenant qualified urls for server APIs", "pr_createdAt": "2020-05-04T04:56:15Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/162", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIzNDA4Nw==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419234087", "bodyText": "I think we have to break the flow. If we cannot build the URL.\nCheck whether you can throw an APIError from here", "author": "mefarazath", "createdAt": "2020-05-04T06:32:47Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -73,9 +76,20 @@ public static String getUsernameFromContext() {\n      */\n     public static URI buildURIForBody(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, true, true);\n+        String url = \"\";\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            String context = SERVER_API_PATH_COMPONENT + endpoint;\n+            try {\n+                url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n+            } catch (URLBuilderException e) {\n+                LOG.error(\"Server encountered an error while building the location URL in tenant qualified scheme.\");", "originalCommit": "bb8589077919751452702187fa0140669515e5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "064800d646e9676f3d3ba6d8ed4b5394f6c277af", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 7b6d4805..946f5e6c 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -82,7 +87,9 @@ public class ContextLoader {\n             try {\n                 url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n             } catch (URLBuilderException e) {\n-                LOG.error(\"Server encountered an error while building the location URL in tenant qualified scheme.\");\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n+                LOG.error(errorDescription);\n+                throw buildInternalServerError(e, errorDescription);\n             }\n         } else {\n             String tenantQualifiedRelativePath =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NTg2Ng==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419385866", "bodyText": "Here also need to do the same as above suggested by @mefarazath. Throw a relevant expectation from here and handle it where this API is consumed.", "author": "ashensw", "createdAt": "2020-05-04T12:03:23Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,21 +102,36 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n+        String url;\n+        URI loc = null;\n+\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            try {\n+                // Creating the context path from the endpoint which needs to be added to build the absolute public url.\n+                String context = SERVER_API_PATH_COMPONENT + endpoint;\n+                url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+                loc = URI.create(url);\n+            } catch (URLBuilderException e) {\n+                LOG.error(\"Server encountered an error while building the location URL in tenant qualified scheme.\");", "originalCommit": "bb8589077919751452702187fa0140669515e5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "064800d646e9676f3d3ba6d8ed4b5394f6c277af", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 7b6d4805..946f5e6c 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -112,7 +119,9 @@ public class ContextLoader {\n                 url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n                 loc = URI.create(url);\n             } catch (URLBuilderException e) {\n-                LOG.error(\"Server encountered an error while building the location URL in tenant qualified scheme.\");\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n+                LOG.error(errorDescription);\n+                throw buildInternalServerError(e, errorDescription);\n             }\n         } else {\n             String tenantQualifiedRelativePath =\n"}}, {"oid": "064800d646e9676f3d3ba6d8ed4b5394f6c277af", "url": "https://github.com/wso2/identity-api-server/commit/064800d646e9676f3d3ba6d8ed4b5394f6c277af", "message": "Enable tenant qualified urls for server APIs", "committedDate": "2020-05-04T13:53:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzUyNA==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419467524", "bodyText": "We don't need to log here. It will be handled by the layer which catches the APIError", "author": "mefarazath", "createdAt": "2020-05-04T14:13:10Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +109,63 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n+        String url;\n+        URI loc = null;\n+\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            try {\n+                // Creating the context path from the endpoint which needs to be added to build the absolute public url.\n+                String context = SERVER_API_PATH_COMPONENT + endpoint;\n+                url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+                loc = URI.create(url);\n+            } catch (URLBuilderException e) {\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n+                LOG.error(errorDescription);", "originalCommit": "064800d646e9676f3d3ba6d8ed4b5394f6c277af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196f14420cd4e5f8fa9497f8c0ce4249eb6edeec", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 946f5e6c..1e4427ca 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -119,8 +118,7 @@ public class ContextLoader {\n                 url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n                 loc = URI.create(url);\n             } catch (URLBuilderException e) {\n-                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n-                LOG.error(errorDescription);\n+                String errorDescription = \"Server encountered an error while building URL for response header.\";\n                 throw buildInternalServerError(e, errorDescription);\n             }\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzY0Mg==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419467642", "bodyText": "We don't need to log here. It will be handled by the layer which catches the APIError", "author": "mefarazath", "createdAt": "2020-05-04T14:13:21Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -73,9 +81,22 @@ public static String getUsernameFromContext() {\n      */\n     public static URI buildURIForBody(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, true, true);\n+        String url = \"\";\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            String context = SERVER_API_PATH_COMPONENT + endpoint;\n+            try {\n+                url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n+            } catch (URLBuilderException e) {\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n+                LOG.error(errorDescription);", "originalCommit": "064800d646e9676f3d3ba6d8ed4b5394f6c277af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196f14420cd4e5f8fa9497f8c0ce4249eb6edeec", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 946f5e6c..1e4427ca 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -87,8 +87,7 @@ public class ContextLoader {\n             try {\n                 url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n             } catch (URLBuilderException e) {\n-                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n-                LOG.error(errorDescription);\n+                String errorDescription = \"Server encountered an error while building URL for response body.\";\n                 throw buildInternalServerError(e, errorDescription);\n             }\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTY1OQ==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419495659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n          \n          \n            \n                            String errorDescription = \"Server encountered an error while building location URL.\";", "author": "mefarazath", "createdAt": "2020-05-04T14:51:25Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +109,63 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n+        String url;\n+        URI loc = null;\n+\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            try {\n+                // Creating the context path from the endpoint which needs to be added to build the absolute public url.\n+                String context = SERVER_API_PATH_COMPONENT + endpoint;\n+                url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+                loc = URI.create(url);\n+            } catch (URLBuilderException e) {\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";", "originalCommit": "064800d646e9676f3d3ba6d8ed4b5394f6c277af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196f14420cd4e5f8fa9497f8c0ce4249eb6edeec", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 946f5e6c..1e4427ca 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -119,8 +118,7 @@ public class ContextLoader {\n                 url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n                 loc = URI.create(url);\n             } catch (URLBuilderException e) {\n-                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n-                LOG.error(errorDescription);\n+                String errorDescription = \"Server encountered an error while building URL for response header.\";\n                 throw buildInternalServerError(e, errorDescription);\n             }\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NjI2OQ==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r419496269", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n          \n          \n            \n                            String errorDescription = \"Server encountered an error while building location URL.\";", "author": "mefarazath", "createdAt": "2020-05-04T14:52:13Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -73,9 +81,22 @@ public static String getUsernameFromContext() {\n      */\n     public static URI buildURIForBody(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, true, true);\n+        String url = \"\";\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            String context = SERVER_API_PATH_COMPONENT + endpoint;\n+            try {\n+                url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n+            } catch (URLBuilderException e) {\n+                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";", "originalCommit": "064800d646e9676f3d3ba6d8ed4b5394f6c277af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "196f14420cd4e5f8fa9497f8c0ce4249eb6edeec", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 946f5e6c..1e4427ca 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -87,8 +87,7 @@ public class ContextLoader {\n             try {\n                 url = ServiceURLBuilder.create().addPath(context).build().getRelativePublicURL();\n             } catch (URLBuilderException e) {\n-                String errorDescription = \"Server encountered an error while building URLs in tenant qualified mode.\";\n-                LOG.error(errorDescription);\n+                String errorDescription = \"Server encountered an error while building URL for response body.\";\n                 throw buildInternalServerError(e, errorDescription);\n             }\n         } else {\n"}}, {"oid": "196f14420cd4e5f8fa9497f8c0ce4249eb6edeec", "url": "https://github.com/wso2/identity-api-server/commit/196f14420cd4e5f8fa9497f8c0ce4249eb6edeec", "message": "Enable tenant qualified urls for server APIs", "committedDate": "2020-05-04T17:01:13Z", "type": "forcePushed"}, {"oid": "78897dbf273e71235e6783333f14e82041dd6710", "url": "https://github.com/wso2/identity-api-server/commit/78897dbf273e71235e6783333f14e82041dd6710", "message": "Enable tenant qualified urls for server APIs", "committedDate": "2020-05-06T03:54:42Z", "type": "forcePushed"}, {"oid": "758d574751dadbb033f26e0a2d983a12a8c1f6cb", "url": "https://github.com/wso2/identity-api-server/commit/758d574751dadbb033f26e0a2d983a12a8c1f6cb", "message": "Enable tenant qualified urls for server APIs", "committedDate": "2020-05-06T03:57:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1ODI3OA==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r420558278", "bodyText": "Better to explain why we need this method.\nie. in tenant qualified mode ServiceURLBuilder appends the tenant domain as a path param automatically. But in not tenant qualified mode it doesn't. So we need to append the tenant domain manually in the path", "author": "mefarazath", "createdAt": "2020-05-06T05:51:00Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +97,56 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n-                }\n-            }\n+        URI loc;\n+        String context = getContext(endpoint);\n+\n+        try {\n+            String url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+            loc = URI.create(url);\n+        } catch (URLBuilderException e) {\n+            String errorDescription = \"Server encountered an error while building URL for response header.\";\n+            throw buildInternalServerError(e, errorDescription);\n         }\n         return loc;\n     }\n+\n+    /**\n+     * This method builds the API context by checking whether the tenant qualified url is enabled or not.", "originalCommit": "758d574751dadbb033f26e0a2d983a12a8c1f6cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "251e318fc1aa0e5634ba53379f6a85e65d4e0019", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 24118179..13daab48 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -111,7 +111,10 @@ public class ContextLoader {\n     }\n \n     /**\n-     * This method builds the API context by checking whether the tenant qualified url is enabled or not.\n+     * This method builds the API context by checking whether the tenant qualified url is enabled or not. In tenant\n+     * qualified mode the ServiceURLBuilder appends the tenant domain to the URI as a path param automatically. But\n+     * in non tenant qualified mode it does not append the tenant domain to the URI as a path param. In non tenant\n+     * qualified mode we need to append the tenant domain to the path manually. This is done from this method.\n      *\n      * @param endpoint Relative endpoint path.\n      * @return Context of the API.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1ODQ0Mw==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r420558443", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This method is used to build the internal server error when the URL build is failed.\n          \n          \n            \n                 * Builds APIError to be thrown the URL building fails.", "author": "mefarazath", "createdAt": "2020-05-06T05:51:36Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +97,56 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n-                }\n-            }\n+        URI loc;\n+        String context = getContext(endpoint);\n+\n+        try {\n+            String url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+            loc = URI.create(url);\n+        } catch (URLBuilderException e) {\n+            String errorDescription = \"Server encountered an error while building URL for response header.\";\n+            throw buildInternalServerError(e, errorDescription);\n         }\n         return loc;\n     }\n+\n+    /**\n+     * This method builds the API context by checking whether the tenant qualified url is enabled or not.\n+     *\n+     * @param endpoint Relative endpoint path.\n+     * @return Context of the API.\n+     */\n+    private static String getContext(String endpoint) {\n+\n+        String context;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            context = SERVER_API_PATH_COMPONENT + endpoint;\n+        } else {\n+            context = String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) +\n+                    SERVER_API_PATH_COMPONENT + endpoint;\n+        }\n+        return context;\n+    }\n+\n+    /**\n+     * This method is used to build the internal server error when the URL build is failed.", "originalCommit": "758d574751dadbb033f26e0a2d983a12a8c1f6cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "251e318fc1aa0e5634ba53379f6a85e65d4e0019", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 24118179..13daab48 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -111,7 +111,10 @@ public class ContextLoader {\n     }\n \n     /**\n-     * This method builds the API context by checking whether the tenant qualified url is enabled or not.\n+     * This method builds the API context by checking whether the tenant qualified url is enabled or not. In tenant\n+     * qualified mode the ServiceURLBuilder appends the tenant domain to the URI as a path param automatically. But\n+     * in non tenant qualified mode it does not append the tenant domain to the URI as a path param. In non tenant\n+     * qualified mode we need to append the tenant domain to the path manually. This is done from this method.\n      *\n      * @param endpoint Relative endpoint path.\n      * @return Context of the API.\n"}}, {"oid": "251e318fc1aa0e5634ba53379f6a85e65d4e0019", "url": "https://github.com/wso2/identity-api-server/commit/251e318fc1aa0e5634ba53379f6a85e65d4e0019", "message": "Enable tenant qualified urls for server APIs", "committedDate": "2020-05-06T06:15:54Z", "type": "forcePushed"}, {"oid": "f0ed2158de70b890ff5474cf59caab37d4f6d888", "url": "https://github.com/wso2/identity-api-server/commit/f0ed2158de70b890ff5474cf59caab37d4f6d888", "message": "Enable tenant qualified urls for server APIs", "committedDate": "2020-05-06T07:27:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMTAyOQ==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r420611029", "bodyText": "Shall we mention this will return a relative URL?", "author": "ashensw", "createdAt": "2020-05-06T08:03:15Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -73,9 +76,15 @@ public static String getUsernameFromContext() {\n      */", "originalCommit": "f0ed2158de70b890ff5474cf59caab37d4f6d888", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "560b3293af7b25c8dc5f1aa6e0b24c8473dc059a", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\nindex 73d17abe..9cfba255 100644\n--- a/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n+++ b/components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java\n\n@@ -72,7 +72,7 @@ public class ContextLoader {\n      * Ex: /t/<tenant-domain>/api/users/<endpoint>\n      *\n      * @param endpoint relative endpoint path.\n-     * @return Fully qualified URI.\n+     * @return Relative URI.\n      */\n     public static URI buildURIForBody(String endpoint) {\n \n"}}, {"oid": "560b3293af7b25c8dc5f1aa6e0b24c8473dc059a", "url": "https://github.com/wso2/identity-api-server/commit/560b3293af7b25c8dc5f1aa6e0b24c8473dc059a", "message": "Enable tenant qualified urls for server APIs", "committedDate": "2020-05-06T09:58:27Z", "type": "commit"}, {"oid": "560b3293af7b25c8dc5f1aa6e0b24c8473dc059a", "url": "https://github.com/wso2/identity-api-server/commit/560b3293af7b25c8dc5f1aa6e0b24c8473dc059a", "message": "Enable tenant qualified urls for server APIs", "committedDate": "2020-05-06T09:58:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NDQ0Ng==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r467854446", "bodyText": "Shall we fix the formatting errors here?", "author": "somindatommy", "createdAt": "2020-08-10T11:58:29Z", "path": "components/org.wso2.carbon.identity.api.server.common/src/main/java/org/wso2/carbon/identity/api/server/common/ContextLoader.java", "diffHunk": "@@ -88,24 +97,58 @@ public static URI buildURIForBody(String endpoint) {\n      */\n     public static URI buildURIForHeader(String endpoint) {\n \n-        String tenantQualifiedRelativePath =\n-                String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) + SERVER_API_PATH_COMPONENT;\n-        String url = IdentityUtil.getEndpointURIPath(tenantQualifiedRelativePath + endpoint, false, true);\n-\n-        URI loc = URI.create(url);\n-        if (!loc.isAbsolute()) {\n-            Message currentMessage = PhaseInterceptorChain.getCurrentMessage();\n-            if (currentMessage != null) {\n-                UriInfo ui = new UriInfoImpl(currentMessage.getExchange().getInMessage(), null);\n-                try {\n-                    return new URI(ui.getBaseUri().getScheme(), ui.getBaseUri().getAuthority(), url, null, null);\n-                } catch (URISyntaxException e) {\n-                    LOG.error(\"Server encountered an error while building the location URL with scheme: \" +\n-                            ui.getBaseUri().getScheme() + \", authority: \" + ui.getBaseUri().getAuthority() +\n-                            \", url: \" + url, e);\n-                }\n-            }\n+        URI loc;\n+        String context = getContext(endpoint);\n+\n+        try {\n+            String url = ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n+            loc = URI.create(url);\n+        } catch (URLBuilderException e) {\n+            String errorDescription = \"Server encountered an error while building URL for response header.\";\n+            throw buildInternalServerError(e, errorDescription);\n         }\n         return loc;\n     }\n+\n+    /**\n+     * Builds the API context on whether the tenant qualified url is enabled or not. In tenant qualified mode the\n+     * ServiceURLBuilder appends the tenant domain to the URI as a path param automatically. But\n+     * in non tenant qualified mode we need to append the tenant domain to the path manually.\n+     *\n+     * @param endpoint Relative endpoint path.\n+     * @return Context of the API.\n+     */\n+    private static String getContext(String endpoint) {\n+\n+        String context;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            context = SERVER_API_PATH_COMPONENT + endpoint;\n+        } else {\n+            context = String.format(TENANT_CONTEXT_PATH_COMPONENT, getTenantDomainFromContext()) +\n+                    SERVER_API_PATH_COMPONENT + endpoint;\n+        }\n+        return context;\n+    }\n+\n+    /**\n+     * Builds APIError to be thrown if the URL building fails.\n+     *\n+     * @param e Exception occurred while building the URL.", "originalCommit": "560b3293af7b25c8dc5f1aa6e0b24c8473dc059a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxMzEzMg==", "url": "https://github.com/wso2/identity-api-server/pull/162#discussion_r491713132", "bodyText": "Can you please mention the exact formatting error here?", "author": "ShanChathusanda93", "createdAt": "2020-09-20T17:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NDQ0Ng=="}], "type": "inlineReview", "revised_code": null}]}