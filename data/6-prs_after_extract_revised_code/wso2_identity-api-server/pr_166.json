{"pr_number": 166, "pr_title": "Add new API to retrieve Primary Userstore configs", "pr_createdAt": "2020-05-15T04:38:35Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/166", "timeline": [{"oid": "41499de87bafd2457b378c5d1b5c5879133349ae", "url": "https://github.com/wso2/identity-api-server/commit/41499de87bafd2457b378c5d1b5c5879133349ae", "message": "Add new API to retrieve Primary Userstore configs", "committedDate": "2020-05-15T04:37:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjEyMA==", "url": "https://github.com/wso2/identity-api-server/pull/166#discussion_r426216120", "bodyText": "As the primary user store, config does not change during the run time shall we keep this in a static variable? build on in that variable is null?", "author": "thanujalk", "createdAt": "2020-05-17T04:31:38Z", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -200,6 +206,40 @@ public UserStoreResponse editUserStore(String domainId, UserStoreReq userStoreRe\n         }\n     }\n \n+    /**\n+     * Retrieve primary user store.\n+     *\n+     * @return UserStoreConfigurationsRes.\n+     */\n+    public UserStoreConfigurationsRes getPrimaryUserStore() {\n+\n+        RealmService realmService = UserStoreConfigServiceHolder.getInstance().getRealmService();\n+        RealmConfiguration realmConfiguration = realmService.getBootstrapRealmConfiguration();\n+        if (realmConfiguration == null) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR, UserStoreConstants.ErrorMessage.\n+                    ERROR_CODE_ERROR_RETRIEVING_PRIMARY_USERSTORE);\n+        }\n+        List<AddUserStorePropertiesRes> propertiesTobeAdd = new ArrayList<>();\n+        UserStoreConfigurationsRes userStoreConfigurations = new UserStoreConfigurationsRes();\n+        userStoreConfigurations.setClassName(realmConfiguration.getUserStoreClass());\n+        userStoreConfigurations.setDescription(realmConfiguration.getDescription());\n+        userStoreConfigurations.setName(UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME);\n+        userStoreConfigurations.setTypeId(base64URLEncodeId(Objects.requireNonNull\n+                (getUserStoreTypeName(realmConfiguration.getUserStoreClass()))));\n+        userStoreConfigurations.setTypeName(getUserStoreTypeName(realmConfiguration.getUserStoreClass()));\n+        Map<String, String> userstoreProps = realmConfiguration.getUserStoreProperties();\n+        if (MapUtils.isNotEmpty(userstoreProps)) {\n+            for (String propKey : userstoreProps.keySet()) {\n+                AddUserStorePropertiesRes userStorePropertiesRes = new AddUserStorePropertiesRes();\n+                userStorePropertiesRes.setName(propKey);\n+                userStorePropertiesRes.setValue(userstoreProps.get(propKey));\n+                propertiesTobeAdd.add(userStorePropertiesRes);\n+            }\n+        }\n+        userStoreConfigurations.setProperties(propertiesTobeAdd);\n+        return userStoreConfigurations;", "originalCommit": "41499de87bafd2457b378c5d1b5c5879133349ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d5dbb15744d1f917e9e668af96b3ceed07b91d5", "chunk": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\nindex ff8c3706..989605be 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\n\n@@ -213,31 +214,33 @@ public class ServerUserStoreService {\n      */\n     public UserStoreConfigurationsRes getPrimaryUserStore() {\n \n-        RealmService realmService = UserStoreConfigServiceHolder.getInstance().getRealmService();\n-        RealmConfiguration realmConfiguration = realmService.getBootstrapRealmConfiguration();\n-        if (realmConfiguration == null) {\n-            throw handleException(Response.Status.INTERNAL_SERVER_ERROR, UserStoreConstants.ErrorMessage.\n-                    ERROR_CODE_ERROR_RETRIEVING_PRIMARY_USERSTORE);\n-        }\n-        List<AddUserStorePropertiesRes> propertiesTobeAdd = new ArrayList<>();\n-        UserStoreConfigurationsRes userStoreConfigurations = new UserStoreConfigurationsRes();\n-        userStoreConfigurations.setClassName(realmConfiguration.getUserStoreClass());\n-        userStoreConfigurations.setDescription(realmConfiguration.getDescription());\n-        userStoreConfigurations.setName(UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME);\n-        userStoreConfigurations.setTypeId(base64URLEncodeId(Objects.requireNonNull\n-                (getUserStoreTypeName(realmConfiguration.getUserStoreClass()))));\n-        userStoreConfigurations.setTypeName(getUserStoreTypeName(realmConfiguration.getUserStoreClass()));\n-        Map<String, String> userstoreProps = realmConfiguration.getUserStoreProperties();\n-        if (MapUtils.isNotEmpty(userstoreProps)) {\n-            for (String propKey : userstoreProps.keySet()) {\n-                AddUserStorePropertiesRes userStorePropertiesRes = new AddUserStorePropertiesRes();\n-                userStorePropertiesRes.setName(propKey);\n-                userStorePropertiesRes.setValue(userstoreProps.get(propKey));\n-                propertiesTobeAdd.add(userStorePropertiesRes);\n+        if (primaryUserstoreConfigs == null) {\n+            RealmService realmService = UserStoreConfigServiceHolder.getInstance().getRealmService();\n+            RealmConfiguration realmConfiguration = realmService.getBootstrapRealmConfiguration();\n+            if (realmConfiguration == null) {\n+                throw handleException(Response.Status.INTERNAL_SERVER_ERROR, UserStoreConstants.ErrorMessage.\n+                        ERROR_CODE_ERROR_RETRIEVING_PRIMARY_USERSTORE);\n+            }\n+            List<AddUserStorePropertiesRes> propertiesTobeAdd = new ArrayList<>();\n+            primaryUserstoreConfigs = new UserStoreConfigurationsRes();\n+            primaryUserstoreConfigs.setClassName(realmConfiguration.getUserStoreClass());\n+            primaryUserstoreConfigs.setDescription(realmConfiguration.getDescription());\n+            primaryUserstoreConfigs.setName(UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME);\n+            primaryUserstoreConfigs.setTypeId(base64URLEncodeId(Objects.requireNonNull\n+                    (getUserStoreTypeName(realmConfiguration.getUserStoreClass()))));\n+            primaryUserstoreConfigs.setTypeName(getUserStoreTypeName(realmConfiguration.getUserStoreClass()));\n+            Map<String, String> userstoreProps = realmConfiguration.getUserStoreProperties();\n+            if (MapUtils.isNotEmpty(userstoreProps)) {\n+                for (String propKey : userstoreProps.keySet()) {\n+                    AddUserStorePropertiesRes userStorePropertiesRes = new AddUserStorePropertiesRes();\n+                    userStorePropertiesRes.setName(propKey);\n+                    userStorePropertiesRes.setValue(userstoreProps.get(propKey));\n+                    propertiesTobeAdd.add(userStorePropertiesRes);\n+                }\n             }\n+            primaryUserstoreConfigs.setProperties(propertiesTobeAdd);\n         }\n-        userStoreConfigurations.setProperties(propertiesTobeAdd);\n-        return userStoreConfigurations;\n+        return primaryUserstoreConfigs;\n     }\n \n     /**\n"}}, {"oid": "1d5dbb15744d1f917e9e668af96b3ceed07b91d5", "url": "https://github.com/wso2/identity-api-server/commit/1d5dbb15744d1f917e9e668af96b3ceed07b91d5", "message": "Add static variable to store primary configs", "committedDate": "2020-05-18T09:45:37Z", "type": "commit"}]}