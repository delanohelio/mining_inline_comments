{"pr_number": 719, "pr_title": "Participant manager service - POST /sites/{siteId}/participants/import API endpoint implementation. ", "pr_createdAt": "2020-08-03T11:31:14Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719", "timeline": [{"oid": "08502333e7172ee9049b339fef04698589b3c962", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/08502333e7172ee9049b339fef04698589b3c962", "message": "POST import participants API endpoint implementation.", "committedDate": "2020-08-03T11:26:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NjMxMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464696311", "bodyText": "validEmails?", "author": "saminguyen", "createdAt": "2020-08-03T22:32:18Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -689,4 +706,115 @@ private EmailResponse sendInvitationEmail(\n             templateArgs);\n     return emailService.sendMimeMail(emailRequest);\n   }\n+\n+  @Override\n+  @Transactional\n+  public ImportParticipantResponse importParticipants(\n+      String userId, String siteId, MultipartFile multipartFile) {\n+    logger.entry(\"begin importParticipants()\");\n+\n+    // Validate site type, status and access permission\n+    Optional<SiteEntity> optSite = siteRepository.findById(siteId);\n+\n+    if (!optSite.isPresent() || !optSite.get().getStatus().equals(ACTIVE_STATUS)) {\n+      logger.exit(ErrorCode.SITE_NOT_EXIST_OR_INACTIVE);\n+      return new ImportParticipantResponse(ErrorCode.SITE_NOT_EXIST_OR_INACTIVE);\n+    }\n+\n+    SiteEntity siteEntity = optSite.get();\n+    if (siteEntity.getStudy() != null && OPEN_STUDY.equals(siteEntity.getStudy().getType())) {\n+      logger.exit(ErrorCode.OPEN_STUDY);\n+      return new ImportParticipantResponse(ErrorCode.OPEN_STUDY);\n+    }\n+\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findSitePermissionByUserIdAndSiteId(userId, siteId);\n+\n+    if (!optSitePermission.isPresent()\n+        || !optSitePermission.get().getCanEdit().equals(Permission.READ_EDIT.value())) {\n+      logger.exit(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+      return new ImportParticipantResponse(ErrorCode.MANAGE_SITE_PERMISSION_ACCESS_DENIED);\n+    }\n+\n+    // iterate and save valid email id's\n+    try (Workbook workbook =\n+        WorkbookFactory.create(new BufferedInputStream(multipartFile.getInputStream()))) {\n+\n+      Sheet sheet = workbook.getSheetAt(0);\n+      Row row = sheet.getRow(0);\n+      String columnName = row.getCell(EMAIL_ADDRESS_COLUMN).getStringCellValue();\n+      if (!\"Email Address\".equalsIgnoreCase(columnName)) {\n+        return new ImportParticipantResponse(ErrorCode.DOCUMENT_NOT_IN_PRESCRIBED_FORMAT);\n+      }\n+\n+      Iterator<Row> rows = sheet.rowIterator();\n+      Set<String> invalidEmails = new HashSet<>();\n+      Set<String> emails = new HashSet<>();", "originalCommit": "08502333e7172ee9049b339fef04698589b3c962", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3MTU4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r465571588", "bodyText": "Changed to validEmails.", "author": "madhurya-btc", "createdAt": "2020-08-05T08:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NjMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "49d27127023291f8659b716fe5ac4287248dac52", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java\nindex 9d956d4c5..a1aa71ad5 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java\n\n@@ -749,7 +749,7 @@ public class SiteServiceImpl implements SiteService {\n \n       Iterator<Row> rows = sheet.rowIterator();\n       Set<String> invalidEmails = new HashSet<>();\n-      Set<String> emails = new HashSet<>();\n+      Set<String> validEmails = new HashSet<>();\n \n       // Skip headers row\n       rows.next();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5ODQ1OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464698459", "bodyText": "I do not think we should not be using Request objs as part of a different response object. Can you use ParticipantDetail here instead?", "author": "saminguyen", "createdAt": "2020-08-03T22:38:48Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ImportParticipantResponse.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@JsonInclude(Include.NON_NULL)\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class ImportParticipantResponse extends BaseResponse {\n+\n+  private List<ParticipantDetailRequest> participants = new ArrayList<>();", "originalCommit": "08502333e7172ee9049b339fef04698589b3c962", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3MTc4Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r465571787", "bodyText": "Changed to ParticipantDetail.", "author": "madhurya-btc", "createdAt": "2020-08-05T08:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5ODQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "49d27127023291f8659b716fe5ac4287248dac52", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ImportParticipantResponse.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ImportParticipantResponse.java\nindex d152808e6..5491d169d 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ImportParticipantResponse.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ImportParticipantResponse.java\n\n@@ -28,7 +28,7 @@ import lombok.Setter;\n @NoArgsConstructor\n public class ImportParticipantResponse extends BaseResponse {\n \n-  private List<ParticipantDetailRequest> participants = new ArrayList<>();\n+  private List<ParticipantDetail> participants = new ArrayList<>();\n \n   private Set<String> invalidEmails = new HashSet<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjEwNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464702106", "bodyText": "you should probably have IMPORT_EMAIL_1 and IMPORT_EMAIL_2 being the two emails in Email_Import_Template.xlsx and have another one being INVALID_TEST_EMAIL = \"mockito\"", "author": "saminguyen", "createdAt": "2020-08-03T22:50:08Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -103,6 +110,8 @@\n   private SitePermissionEntity sitePermissionEntity;\n   private StudyConsentEntity studyConsentEntity;\n \n+  private static final String IMPORT_EMAIL = \"mockitoimport01@grr.la\";", "originalCommit": "08502333e7172ee9049b339fef04698589b3c962", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3MjA4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r465572088", "bodyText": "Created IMPORT_EMAIL_1 , IMPORT_EMAIL_2 and INVALID_TEST_EMAIL .", "author": "madhurya-btc", "createdAt": "2020-08-05T08:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "49d27127023291f8659b716fe5ac4287248dac52", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java b/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java\nindex 1c2d67ae8..be892840f 100644\n--- a/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java\n+++ b/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java\n\n@@ -110,7 +110,11 @@ public class SitesControllerTest extends BaseMockIT {\n   private SitePermissionEntity sitePermissionEntity;\n   private StudyConsentEntity studyConsentEntity;\n \n-  private static final String IMPORT_EMAIL = \"mockitoimport01@grr.la\";\n+  private static final String IMPORT_EMAIL_1 = \"mockitoimport01@grr.la\";\n+\n+  private static final String IMPORT_EMAIL_2 = \"mockitoimport@grr.la\";\n+\n+  private static final String INVALID_TEST_EMAIL = \"mockito\";\n \n   @BeforeEach\n   public void setUp() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjE4MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464702180", "bodyText": "check both emails returned", "author": "saminguyen", "createdAt": "2020-08-03T22:50:27Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -786,6 +795,164 @@ public void shouldInviteParticipant() throws Exception {\n         OnboardingStatus.INVITED.getCode(), optParticipantRegistrySite.get().getOnboardingStatus());\n   }\n \n+  @Test\n+  public void shouldReturnAccessDeniedForImportNewParticipant() throws Exception {\n+    // Step 1: set manage site permission to view only\n+    sitePermissionEntity = siteEntity.getSitePermissions().get(0);\n+    sitePermissionEntity.setCanEdit(Permission.READ_VIEW.value());\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API to return MANAGE_SITE_PERMISSION_ACCESS_DENIED error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\", is(MANAGE_SITE_PERMISSION_ACCESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnOpenStudyForImportNewParticipant() throws Exception {\n+    // Step 1: set study type to open study\n+    sitePermissionEntity = siteEntity.getSitePermissions().get(0);\n+    studyEntity.setType(CommonConstants.OPEN_STUDY);\n+    siteEntity.setStudy(studyEntity);\n+    testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API to return OPEN_STUDY error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(jsonPath(\"$.error_description\", is(OPEN_STUDY.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnSiteNotExistForImportNewParticipant() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), IdGenerator.id())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\"$.error_description\", is(SITE_NOT_EXIST_OR_INACTIVE.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnWithBadHeaders() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template_bad_header.xlsx\");\n+    mockMvc\n+        .perform(\n+            multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                .file(file)\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\",\n+                is(ErrorCode.DOCUMENT_NOT_IN_PRESCRIBED_FORMAT.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnImportNewParticipantAndInvalidEmail() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Step 1: Call API to import new participants\n+    MockMultipartFile file =\n+        getMultipartFile(\"classpath:Email_Import_Template_Invalid_Emails.xlsx\");\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                    .file(file)\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(\n+                jsonPath(\"$.message\", is(MessageCode.IMPORT_PARTICIPANT_SUCCESS.getMessage())))\n+            .andExpect(jsonPath(\"$.participants\").isArray())\n+            .andExpect(jsonPath(\"$.participants\", hasSize(1)))\n+            .andExpect(jsonPath(\"$.participants[0].email\", is(\"mockitoimport@grr.la\")))\n+            .andExpect(jsonPath(\"$.invalidEmails\", hasSize(1)))\n+            .andExpect(jsonPath(\"$.invalidEmails[0]\", is(\"mockito\")))\n+            .andReturn();\n+\n+    String participantId =\n+        JsonPath.read(result.getResponse().getContentAsString(), \"$.participants[0].participantId\");\n+\n+    // Step 2: verify saved values\n+    Optional<ParticipantRegistrySiteEntity> optParticipantRegistrySite =\n+        participantRegistrySiteRepository.findById(participantId);\n+    assertNotNull(optParticipantRegistrySite.get().getSite());\n+    assertEquals(siteEntity.getId(), optParticipantRegistrySite.get().getSite().getId());\n+    assertEquals(\"mockitoimport@grr.la\", optParticipantRegistrySite.get().getEmail());\n+  }\n+\n+  @Test\n+  public void shouldReturnImportNewParticipant() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Step 1: Call API to import new participants\n+    MockMultipartFile file = getMultipartFile(\"classpath:Email_Import_Template.xlsx\");\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                multipart(ApiEndpoint.IMPORT_PARTICIPANT.getPath(), siteEntity.getId())\n+                    .file(file)\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isOk())\n+            .andExpect(\n+                jsonPath(\"$.message\", is(MessageCode.IMPORT_PARTICIPANT_SUCCESS.getMessage())))\n+            .andExpect(jsonPath(\"$.participants\").isArray())\n+            .andExpect(jsonPath(\"$.participants\", hasSize(2)))\n+            .andExpect(jsonPath(\"$.participants[0].email\", is(IMPORT_EMAIL)))", "originalCommit": "08502333e7172ee9049b339fef04698589b3c962", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3MjMxNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r465572316", "bodyText": "Checked both emails.", "author": "madhurya-btc", "createdAt": "2020-08-05T08:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "49d27127023291f8659b716fe5ac4287248dac52", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java b/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java\nindex 1c2d67ae8..be892840f 100644\n--- a/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java\n+++ b/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java\n\n@@ -903,20 +907,20 @@ public class SitesControllerTest extends BaseMockIT {\n                 jsonPath(\"$.message\", is(MessageCode.IMPORT_PARTICIPANT_SUCCESS.getMessage())))\n             .andExpect(jsonPath(\"$.participants\").isArray())\n             .andExpect(jsonPath(\"$.participants\", hasSize(1)))\n-            .andExpect(jsonPath(\"$.participants[0].email\", is(\"mockitoimport@grr.la\")))\n+            .andExpect(jsonPath(\"$.participants[0].email\", is(IMPORT_EMAIL_2)))\n             .andExpect(jsonPath(\"$.invalidEmails\", hasSize(1)))\n-            .andExpect(jsonPath(\"$.invalidEmails[0]\", is(\"mockito\")))\n+            .andExpect(jsonPath(\"$.invalidEmails[0]\", is(INVALID_TEST_EMAIL)))\n             .andReturn();\n \n     String participantId =\n-        JsonPath.read(result.getResponse().getContentAsString(), \"$.participants[0].participantId\");\n+        JsonPath.read(result.getResponse().getContentAsString(), \"$.participants[0].id\");\n \n     // Step 2: verify saved values\n     Optional<ParticipantRegistrySiteEntity> optParticipantRegistrySite =\n         participantRegistrySiteRepository.findById(participantId);\n     assertNotNull(optParticipantRegistrySite.get().getSite());\n     assertEquals(siteEntity.getId(), optParticipantRegistrySite.get().getSite().getId());\n-    assertEquals(\"mockitoimport@grr.la\", optParticipantRegistrySite.get().getEmail());\n+    assertEquals(IMPORT_EMAIL_2, optParticipantRegistrySite.get().getEmail());\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MjAzMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/719#discussion_r464782032", "bodyText": "inputFile?", "author": "saminguyen", "createdAt": "2020-08-04T03:48:09Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java", "diffHunk": "@@ -157,4 +159,19 @@\n     return ResponseEntity.status(inviteParticipantResponse.getHttpStatusCode())\n         .body(inviteParticipantResponse);\n   }\n+\n+  @PostMapping(\n+      value = \"/sites/{siteId}/participants/import\",\n+      produces = MediaType.APPLICATION_JSON_VALUE)\n+  public ResponseEntity<ImportParticipantResponse> importParticipants(\n+      @PathVariable String siteId,\n+      @RequestHeader(name = USER_ID_HEADER) String userId,\n+      @RequestParam MultipartFile file,", "originalCommit": "08502333e7172ee9049b339fef04698589b3c962", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d12970a9adb589c1eeb0f1b0744556e395367fa", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java\nindex 4ed3f524e..e2d47255b 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java\n\n@@ -166,11 +166,12 @@ public class SiteController {\n   public ResponseEntity<ImportParticipantResponse> importParticipants(\n       @PathVariable String siteId,\n       @RequestHeader(name = USER_ID_HEADER) String userId,\n-      @RequestParam MultipartFile file,\n+      @RequestParam(\"file\") MultipartFile inputFile,\n       HttpServletRequest request) {\n     logger.entry(BEGIN_REQUEST_LOG, request.getRequestURI());\n \n-    ImportParticipantResponse participants = siteService.importParticipants(userId, siteId, file);\n+    ImportParticipantResponse participants =\n+        siteService.importParticipants(userId, siteId, inputFile);\n     logger.exit(String.format(STATUS_LOG, participants.getHttpStatusCode()));\n     return ResponseEntity.status(participants.getHttpStatusCode()).body(participants);\n   }\n"}}, {"oid": "49d27127023291f8659b716fe5ac4287248dac52", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/49d27127023291f8659b716fe5ac4287248dac52", "message": "PR comment fixes", "committedDate": "2020-08-05T02:22:15Z", "type": "commit"}, {"oid": "3586ab0649c704662a25f873246671c3ce04683e", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3586ab0649c704662a25f873246671c3ce04683e", "message": "Import line spacing", "committedDate": "2020-08-05T05:22:50Z", "type": "commit"}, {"oid": "3d12970a9adb589c1eeb0f1b0744556e395367fa", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3d12970a9adb589c1eeb0f1b0744556e395367fa", "message": "Multipart file changed to inputfile", "committedDate": "2020-08-05T08:50:14Z", "type": "commit"}, {"oid": "6014a1f548b35010e22358f55762e39f7ece1d5e", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6014a1f548b35010e22358f55762e39f7ece1d5e", "message": "import statements formatting", "committedDate": "2020-08-12T10:44:07Z", "type": "commit"}, {"oid": "0c63f6d912fd45e10cb0065a30bb045e3a50d016", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0c63f6d912fd45e10cb0065a30bb045e3a50d016", "message": "Merge branch 'develop' of https://github.com/GoogleCloudPlatform/fda-mystudies into participant-manager-import-participants\n\n# Conflicts:\n#\tcommon-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/CommonConstants.java\n#\tcommon-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java\n#\tcommon-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java\n#\tcommon-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/repository/ParticipantRegistrySiteRepository.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ParticipantRegistryDetail.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ParticipantManagerAuditLogHelper.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AppController.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/LocationController.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/SiteController.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileController.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/ParticipantMapper.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/SiteMapper.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/StudyMapper.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserProfileServiceImpl.java\n#\tparticipant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/common/ApiEndpoint.java\n#\tparticipant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java\n#\tparticipant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserProfileControllerTest.java\n#\tparticipant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "committedDate": "2020-08-19T14:41:41Z", "type": "commit"}]}