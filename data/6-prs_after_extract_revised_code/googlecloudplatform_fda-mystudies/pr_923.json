{"pr_number": 923, "pr_title": "Fixed Issue #905 Enroll Mgmt Module - Remove try/catch blocks from Controller/ServiceImpl classes to reuse GlobalExceptionHandler, RestExceptionHandler exception handlers", "pr_createdAt": "2020-09-09T14:55:41Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/923", "timeline": [{"oid": "5ebbe7e5e43d68ad96a71b0c4ea5f21c8b367493", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5ebbe7e5e43d68ad96a71b0c4ea5f21c8b367493", "message": "Removed Try Catch from service and controller layer to use RestExceptionHandler\n\nRemoved Try Catch from service and controller layer to use RestExceptionHandler,\ntest-green, format + organize import", "committedDate": "2020-09-08T08:39:53Z", "type": "commit"}, {"oid": "3a4ea3cc460b477502f6be2fa5f41b195093a60e", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3a4ea3cc460b477502f6be2fa5f41b195093a60e", "message": "removed try catch from controller, service, util\n\nremoved try catch from controller, service, util", "committedDate": "2020-09-09T14:48:02Z", "type": "commit"}, {"oid": "fca126efbf5f69953f470f3b76071b805a1026ad", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/fca126efbf5f69953f470f3b76071b805a1026ad", "message": "Merge branch 'develop' into enroll-mgmt-exception-handling", "committedDate": "2020-09-09T15:02:13Z", "type": "commit"}, {"oid": "3ed6cd8d5da1218258161dcaa80361ea20a8cf28", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3ed6cd8d5da1218258161dcaa80361ea20a8cf28", "message": "Merge branch 'develop' into enroll-mgmt-exception-handling", "committedDate": "2020-09-10T14:33:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NzUwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/923#discussion_r486677505", "bodyText": "keep this log event if required - catch and rethrow the error", "author": "saminguyen", "createdAt": "2020-09-10T22:54:31Z", "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java", "diffHunk": "@@ -144,95 +138,63 @@ public String getParticipantId(\n       String applicationId,\n       String hashedTokenValue,\n       String studyId,\n-      AuditLogEventRequest auditRequest)\n-      throws InvalidRequestException, UnAuthorizedRequestException, SystemException {\n+      AuditLogEventRequest auditRequest) {\n     logger.info(\"EnrollmentManagementUtil getParticipantId() - starts \");\n     HttpHeaders headers = null;\n     EnrollmentBodyProvider bodyProvider = null;\n     HttpEntity<EnrollmentBodyProvider> requestBody = null;\n     ResponseEntity<?> responseEntity = null;\n     String participantId = \"\";\n-    try {\n-      headers = new HttpHeaders();\n-      headers.setContentType(MediaType.APPLICATION_JSON);\n-      headers.set(\"applicationId\", applicationId);\n-      headers.set(\"Authorization\", \"Bearer \" + oAuthService.getAccessToken());\n-      bodyProvider = new EnrollmentBodyProvider();\n-      bodyProvider.setTokenIdentifier(hashedTokenValue);\n-      bodyProvider.setCustomStudyId(studyId);\n-      requestBody = new HttpEntity<>(bodyProvider, headers);\n-      responseEntity =\n-          restTemplate.postForEntity(appConfig.getAddParticipantId(), requestBody, String.class);\n-      if (responseEntity.getStatusCode() == HttpStatus.OK) {\n-        participantId = (String) responseEntity.getBody();\n-        auditRequest.setParticipantId(participantId);\n-\n-        enrollAuditEventHelper.logEvent(PARTICIPANT_ID_RECEIVED, auditRequest);\n-      }\n-\n-    } catch (RestClientResponseException e) {\n-\n-      if (e.getRawStatusCode() == 401) {\n-        throw new UnAuthorizedRequestException();\n-      } else if (e.getRawStatusCode() == 400) {\n-        throw new InvalidRequestException();\n-      } else {\n-        throw new SystemException();\n-      }\n-    } catch (Exception e) {\n-\n-      enrollAuditEventHelper.logEvent(PARTICIPANT_ID_NOT_RECEIVED, auditRequest);", "originalCommit": "3ed6cd8d5da1218258161dcaa80361ea20a8cf28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzc2MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/923#discussion_r487123760", "bodyText": "Added this audit log in catch and rethrowing the error.", "author": "harisboston", "createdAt": "2020-09-11T15:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NzUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "27058ac5deb861dfdcf11d1de2ec1643e7d8457c", "chunk": "diff --git a/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java b/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java\nindex 290a1de99..d073fc8e4 100644\n--- a/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java\n+++ b/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/EnrollmentManagementUtil.java\n\n@@ -146,21 +147,28 @@ public class EnrollmentManagementUtil {\n     ResponseEntity<?> responseEntity = null;\n     String participantId = \"\";\n \n-    headers = new HttpHeaders();\n-    headers.setContentType(MediaType.APPLICATION_JSON);\n-    headers.set(\"applicationId\", applicationId);\n-    headers.set(\"Authorization\", \"Bearer \" + oAuthService.getAccessToken());\n-    bodyProvider = new EnrollmentBodyProvider();\n-    bodyProvider.setTokenIdentifier(hashedTokenValue);\n-    bodyProvider.setCustomStudyId(studyId);\n-    requestBody = new HttpEntity<>(bodyProvider, headers);\n-    responseEntity =\n-        restTemplate.postForEntity(appConfig.getAddParticipantId(), requestBody, String.class);\n-    if (responseEntity.getStatusCode() == HttpStatus.OK) {\n-      participantId = (String) responseEntity.getBody();\n-      auditRequest.setParticipantId(participantId);\n-\n-      enrollAuditEventHelper.logEvent(PARTICIPANT_ID_RECEIVED, auditRequest);\n+    try {\n+      headers = new HttpHeaders();\n+      headers.setContentType(MediaType.APPLICATION_JSON);\n+      headers.set(\"applicationId\", applicationId);\n+      headers.set(\"Authorization\", \"Bearer \" + oAuthService.getAccessToken());\n+      bodyProvider = new EnrollmentBodyProvider();\n+      bodyProvider.setTokenIdentifier(hashedTokenValue);\n+      bodyProvider.setCustomStudyId(studyId);\n+      requestBody = new HttpEntity<>(bodyProvider, headers);\n+      responseEntity =\n+          restTemplate.postForEntity(appConfig.getAddParticipantId(), requestBody, String.class);\n+      if (responseEntity.getStatusCode() == HttpStatus.OK) {\n+        participantId = (String) responseEntity.getBody();\n+        auditRequest.setParticipantId(participantId);\n+\n+        enrollAuditEventHelper.logEvent(PARTICIPANT_ID_RECEIVED, auditRequest);\n+      }\n+\n+    } catch (Exception e) {\n+      enrollAuditEventHelper.logEvent(PARTICIPANT_ID_NOT_RECEIVED, auditRequest);\n+      logger.error(\"EnrollmentManagementUtil getParticipantId() - Ends \", e);\n+      throw e;\n     }\n \n     logger.info(\"EnrollmentManagementUtil getParticipantId() - Ends \");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MDMwOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/923#discussion_r486680308", "bodyText": "if you do add back the audit log event, make sure to re-include this as well", "author": "saminguyen", "createdAt": "2020-09-10T23:03:20Z", "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/StudyStateControllerTest.java", "diffHunk": "@@ -233,9 +224,7 @@ public void getStudyStateUnauthorizedUserId() throws Exception {\n                 .headers(headers)\n                 .contextPath(getContextPath()))\n         .andDo(print())\n-        .andExpect(status().isUnauthorized());\n-\n-    verifyAuditEventCall(READ_OPERATION_FAILED_FOR_STUDY_INFO);", "originalCommit": "3ed6cd8d5da1218258161dcaa80361ea20a8cf28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyNTEzNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/923#discussion_r487125136", "bodyText": "Added this event in test case.", "author": "harisboston", "createdAt": "2020-09-11T15:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MDMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "27058ac5deb861dfdcf11d1de2ec1643e7d8457c", "chunk": "diff --git a/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/StudyStateControllerTest.java b/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/StudyStateControllerTest.java\nindex da4f86f56..1651a4abb 100644\n--- a/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/StudyStateControllerTest.java\n+++ b/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/StudyStateControllerTest.java\n\n@@ -226,6 +227,7 @@ public class StudyStateControllerTest extends BaseMockIT {\n         .andDo(print())\n         .andExpect(status().isNotFound());\n \n+    verifyAuditEventCall(READ_OPERATION_FAILED_FOR_STUDY_INFO);\n     verifyTokenIntrospectRequest();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NDM1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/923#discussion_r486684350", "bodyText": "Is this due to a change in the list of audit log events? Why deleting this here?", "author": "saminguyen", "createdAt": "2020-09-10T23:16:04Z", "path": "user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/EnrollmentTokenController.java", "diffHunk": "@@ -308,34 +284,9 @@ else if (enrollmentTokenfService.enrollmentTokenRequired(enrollmentBean.getStudy\n           ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n           ErrorResponseUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n           response);\n-\n-      enrollAuditEventHelper.logEvent(STUDY_ENROLLMENT_FAILED, auditRequest);", "originalCommit": "3ed6cd8d5da1218258161dcaa80361ea20a8cf28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzMDEwNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/923#discussion_r487130106", "bodyText": "Previously we were removing events which were logged in catch or failure case.\nReverted the changes for the same.\nAdded this audit-log event.", "author": "harisboston", "createdAt": "2020-09-11T15:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NDM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "27058ac5deb861dfdcf11d1de2ec1643e7d8457c", "chunk": "diff --git a/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/EnrollmentTokenController.java b/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/EnrollmentTokenController.java\nindex 409ec0371..bdf73ec94 100644\n--- a/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/EnrollmentTokenController.java\n+++ b/user-registration-server-ws/enroll-mgmt-module/enroll-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/EnrollmentTokenController.java\n\n@@ -162,131 +163,140 @@ public class EnrollmentTokenController {\n     AuditLogEventRequest auditRequest = AuditEventMapper.fromHttpServletRequest(request);\n     auditRequest.setUserId(userId);\n \n-    if (enrollmentBean != null) {\n-      if (!StringUtils.isEmpty(enrollmentBean.getStudyId())) {\n-        auditRequest.setStudyId(enrollmentBean.getStudyId());\n+    try {\n+      if (enrollmentBean != null) {\n+        if (!StringUtils.isEmpty(enrollmentBean.getStudyId())) {\n+          auditRequest.setStudyId(enrollmentBean.getStudyId());\n+\n+          if (enrollmentTokenfService.studyExists(enrollmentBean.getStudyId())) {\n+            if (enrollmentTokenfService.enrollmentTokenRequired(enrollmentBean.getStudyId())) {\n+              if (!StringUtils.isEmpty(enrollmentBean.getToken())) {\n+                if (!enrollmentTokenfService.hasParticipant(\n+                    enrollmentBean.getStudyId(), enrollmentBean.getToken())) {\n+                  if (enrollManagementUtil.isChecksumValid(enrollmentBean.getToken())) {\n+                    if (enrollmentTokenfService.isValidStudyToken(\n+                        enrollmentBean.getToken(), enrollmentBean.getStudyId())) {\n+                      respBean =\n+                          enrollmentTokenfService.enrollParticipant(\n+                              enrollmentBean.getStudyId(),\n+                              enrollmentBean.getToken(),\n+                              userId,\n+                              auditRequest);\n+                      if (respBean != null) {\n+                        respBean.setCode(ErrorCode.EC_200.code());\n+                        respBean.setMessage(\n+                            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+                      }\n+                    } else {\n+                      ErrorResponseUtil.getFailureResponse(\n+                          ErrorResponseUtil.ErrorCodes.STATUS_102.getValue(),\n+                          ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                          ErrorResponseUtil.ErrorCodes.UNKNOWN_TOKEN.getValue(),\n+                          response);\n+                      errorBean = new ErrorBean();\n+                      errorBean.setCode(HttpStatus.BAD_REQUEST.value());\n+                      errorBean.setMessage(ErrorResponseUtil.ErrorCodes.UNKNOWN_TOKEN.getValue());\n \n-        if (enrollmentTokenfService.studyExists(enrollmentBean.getStudyId())) {\n-          if (enrollmentTokenfService.enrollmentTokenRequired(enrollmentBean.getStudyId())) {\n-            if (!StringUtils.isEmpty(enrollmentBean.getToken())) {\n-              if (!enrollmentTokenfService.hasParticipant(\n-                  enrollmentBean.getStudyId(), enrollmentBean.getToken())) {\n-                if (enrollManagementUtil.isChecksumValid(enrollmentBean.getToken())) {\n-                  if (enrollmentTokenfService.isValidStudyToken(\n-                      enrollmentBean.getToken(), enrollmentBean.getStudyId())) {\n-                    respBean =\n-                        enrollmentTokenfService.enrollParticipant(\n-                            enrollmentBean.getStudyId(),\n-                            enrollmentBean.getToken(),\n-                            userId,\n-                            auditRequest);\n-                    if (respBean != null) {\n-                      respBean.setCode(ErrorCode.EC_200.code());\n-                      respBean.setMessage(\n-                          MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+                      enrollAuditEventHelper.logEvent(\n+                          USER_FOUND_INELIGIBLE_FOR_STUDY, auditRequest);\n+                      return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n                     }\n                   } else {\n                     ErrorResponseUtil.getFailureResponse(\n                         ErrorResponseUtil.ErrorCodes.STATUS_102.getValue(),\n                         ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                        ErrorResponseUtil.ErrorCodes.UNKNOWN_TOKEN.getValue(),\n+                        ErrorResponseUtil.ErrorCodes.INVALID_TOKEN.getValue(),\n                         response);\n+\n                     errorBean = new ErrorBean();\n                     errorBean.setCode(HttpStatus.BAD_REQUEST.value());\n-                    errorBean.setMessage(ErrorResponseUtil.ErrorCodes.UNKNOWN_TOKEN.getValue());\n+                    errorBean.setMessage(ErrorResponseUtil.ErrorCodes.INVALID_TOKEN.getValue());\n+\n+                    enrollAuditEventHelper.logEvent(PARTICIPANT_ID_NOT_RECEIVED, auditRequest);\n \n-                    enrollAuditEventHelper.logEvent(USER_FOUND_INELIGIBLE_FOR_STUDY, auditRequest);\n                     return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n                   }\n                 } else {\n                   ErrorResponseUtil.getFailureResponse(\n-                      ErrorResponseUtil.ErrorCodes.STATUS_102.getValue(),\n+                      ErrorResponseUtil.ErrorCodes.STATUS_103.getValue(),\n                       ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                      ErrorResponseUtil.ErrorCodes.INVALID_TOKEN.getValue(),\n+                      ErrorResponseUtil.ErrorCodes.TOKEN_ALREADY_USE.getValue(),\n                       response);\n-\n                   errorBean = new ErrorBean();\n-                  errorBean.setCode(HttpStatus.BAD_REQUEST.value());\n-                  errorBean.setMessage(ErrorResponseUtil.ErrorCodes.INVALID_TOKEN.getValue());\n-\n-                  enrollAuditEventHelper.logEvent(PARTICIPANT_ID_NOT_RECEIVED, auditRequest);\n-\n-                  return new ResponseEntity<>(errorBean, HttpStatus.BAD_REQUEST);\n+                  errorBean.setCode(HttpStatus.FORBIDDEN.value());\n+                  errorBean.setMessage(ErrorResponseUtil.ErrorCodes.TOKEN_ALREADY_USE.getValue());\n+                  return new ResponseEntity<>(errorBean, HttpStatus.FORBIDDEN);\n                 }\n               } else {\n+                errorBean = new ErrorBean();\n+                errorBean.setCode(ErrorCode.EC_103.code());\n+                errorBean.setMessage(ErrorResponseUtil.ErrorCodes.TOKEN_REQUIRED.getValue());\n                 ErrorResponseUtil.getFailureResponse(\n-                    ErrorResponseUtil.ErrorCodes.STATUS_103.getValue(),\n+                    ErrorResponseUtil.ErrorCodes.STATUS_102.getValue(),\n                     ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    ErrorResponseUtil.ErrorCodes.TOKEN_ALREADY_USE.getValue(),\n+                    ErrorResponseUtil.ErrorCodes.TOKEN_REQUIRED.getValue(),\n                     response);\n-                errorBean = new ErrorBean();\n-                errorBean.setCode(HttpStatus.FORBIDDEN.value());\n-                errorBean.setMessage(ErrorResponseUtil.ErrorCodes.TOKEN_ALREADY_USE.getValue());\n-                return new ResponseEntity<>(errorBean, HttpStatus.FORBIDDEN);\n+                return null;\n               }\n             } else {\n-              errorBean = new ErrorBean();\n-              errorBean.setCode(ErrorCode.EC_103.code());\n-              errorBean.setMessage(ErrorResponseUtil.ErrorCodes.TOKEN_REQUIRED.getValue());\n-              ErrorResponseUtil.getFailureResponse(\n-                  ErrorResponseUtil.ErrorCodes.STATUS_102.getValue(),\n-                  ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                  ErrorResponseUtil.ErrorCodes.TOKEN_REQUIRED.getValue(),\n-                  response);\n-              return null;\n+              if (enrollmentBean.getToken().isEmpty()) {\n+                tokenValue = TokenUtil.randomString(8);\n+              }\n+              respBean =\n+                  enrollmentTokenfService.enrollParticipant(\n+                      enrollmentBean.getStudyId(), tokenValue, userId, auditRequest);\n+              if (respBean != null) {\n+                respBean.setCode(ErrorCode.EC_200.code());\n+                respBean.setMessage(\n+                    MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+\n+                enrollAuditEventHelper.logEvent(USER_FOUND_ELIGIBLE_FOR_STUDY, auditRequest);\n+              }\n             }\n           } else {\n-            if (enrollmentBean.getToken().isEmpty()) {\n-              tokenValue = TokenUtil.randomString(8);\n-            }\n-            respBean =\n-                enrollmentTokenfService.enrollParticipant(\n-                    enrollmentBean.getStudyId(), tokenValue, userId, auditRequest);\n-            if (respBean != null) {\n-              respBean.setCode(ErrorCode.EC_200.code());\n-              respBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue().toLowerCase());\n+            errorBean = new ErrorBean();\n+            errorBean.setCode(ErrorCode.EC_103.code());\n+            errorBean.setMessage(ErrorResponseUtil.ErrorCodes.STUDYID_NOT_EXIST.getValue());\n+            ErrorResponseUtil.getFailureResponse(\n+                ErrorResponseUtil.ErrorCodes.STATUS_103.getValue(),\n+                ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                ErrorResponseUtil.ErrorCodes.STUDYID_NOT_EXIST.getValue(),\n+                response);\n \n-              enrollAuditEventHelper.logEvent(USER_FOUND_ELIGIBLE_FOR_STUDY, auditRequest);\n-            }\n+            return null;\n           }\n         } else {\n           errorBean = new ErrorBean();\n-          errorBean.setCode(ErrorCode.EC_103.code());\n-          errorBean.setMessage(ErrorResponseUtil.ErrorCodes.STUDYID_NOT_EXIST.getValue());\n+          errorBean.setCode(ErrorCode.EC_102.code());\n+          errorBean.setMessage(ErrorResponseUtil.ErrorCodes.ERROR_REQUIRED.getValue());\n           ErrorResponseUtil.getFailureResponse(\n-              ErrorResponseUtil.ErrorCodes.STATUS_103.getValue(),\n+              ErrorResponseUtil.ErrorCodes.STATUS_102.getValue(),\n               ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-              ErrorResponseUtil.ErrorCodes.STUDYID_NOT_EXIST.getValue(),\n+              ErrorResponseUtil.ErrorCodes.ERROR_REQUIRED.getValue(),\n               response);\n \n+          enrollAuditEventHelper.logEvent(USER_FOUND_INELIGIBLE_FOR_STUDY, auditRequest);\n           return null;\n         }\n       } else {\n         errorBean = new ErrorBean();\n         errorBean.setCode(ErrorCode.EC_102.code());\n-        errorBean.setMessage(ErrorResponseUtil.ErrorCodes.ERROR_REQUIRED.getValue());\n+        errorBean.setMessage(ErrorResponseUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+\n         ErrorResponseUtil.getFailureResponse(\n             ErrorResponseUtil.ErrorCodes.STATUS_102.getValue(),\n             ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-            ErrorResponseUtil.ErrorCodes.ERROR_REQUIRED.getValue(),\n+            ErrorResponseUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n \n-        enrollAuditEventHelper.logEvent(USER_FOUND_INELIGIBLE_FOR_STUDY, auditRequest);\n         return null;\n       }\n-    } else {\n-      errorBean = new ErrorBean();\n-      errorBean.setCode(ErrorCode.EC_102.code());\n-      errorBean.setMessage(ErrorResponseUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n \n-      ErrorResponseUtil.getFailureResponse(\n-          ErrorResponseUtil.ErrorCodes.STATUS_102.getValue(),\n-          ErrorResponseUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          ErrorResponseUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      return null;\n+    } catch (Exception e) {\n+      logger.error(\"EnrollmentTokenController enrollParticipant() - error \", e);\n+      enrollAuditEventHelper.logEvent(STUDY_ENROLLMENT_FAILED, auditRequest);\n+      throw e;\n     }\n-\n     logger.info(\"EnrollmentTokenController enrollParticipant() - Ends \");\n     return new ResponseEntity<>(respBean, HttpStatus.OK);\n   }\n"}}, {"oid": "27058ac5deb861dfdcf11d1de2ec1643e7d8457c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/27058ac5deb861dfdcf11d1de2ec1643e7d8457c", "message": "Added auditlog for failed conditions\n\nAdded auditlog for failed conditions", "committedDate": "2020-09-11T15:26:32Z", "type": "commit"}, {"oid": "654258e6552c3f72c125a303dceabb1ffac7b487", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/654258e6552c3f72c125a303dceabb1ffac7b487", "message": "Merge branch 'develop' into enroll-mgmt-exception-handling", "committedDate": "2020-09-15T06:01:28Z", "type": "commit"}, {"oid": "5cb19b636ea125145936ed1b852203629ccca636", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5cb19b636ea125145936ed1b852203629ccca636", "message": "removed throws SystemException, InvalidUserIdException\n\nthrows SystemException, InvalidUserIdException, since it was causing build issue.", "committedDate": "2020-09-15T06:33:49Z", "type": "commit"}, {"oid": "a27609ff9f5983d267e241a91f8025efea0f6222", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a27609ff9f5983d267e241a91f8025efea0f6222", "message": "Merge branch 'develop' into enroll-mgmt-exception-handling", "committedDate": "2020-09-15T14:34:20Z", "type": "commit"}]}