{"pr_number": 636, "pr_title": "participant-manager /apps endpoint implementation", "pr_createdAt": "2020-07-14T14:12:45Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636", "timeline": [{"oid": "4480d21d79f469097f9f336d238e3f879e099c4a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4480d21d79f469097f9f336d238e3f879e099c4a", "message": "participant-manager /apps endpoint implementation\n\nparticipant-manager /apps endpoint implementation", "committedDate": "2020-07-14T14:10:59Z", "type": "commit"}, {"oid": "50de9ea7377e1a1fdf5f6f9c65c8bae2519cb850", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/50de9ea7377e1a1fdf5f6f9c65c8bae2519cb850", "message": "modified headers and removed .project file\n\nmodified headers and removed .project file", "committedDate": "2020-07-14T15:29:57Z", "type": "commit"}, {"oid": "8e5e79eda692937f94530d774a4eea3729f8212c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8e5e79eda692937f94530d774a4eea3729f8212c", "message": "Reused CommonConstants\n\nReused CommonConstants", "committedDate": "2020-07-21T07:56:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTE0NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458885145", "bodyText": "any documentation on message codes with corresponding message strings?", "author": "saminguyen", "createdAt": "2020-07-22T15:35:25Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java", "diffHunk": "@@ -30,7 +30,7 @@\n \n   ADD_LOCATION_SUCCESS(HttpStatus.CREATED, \"MSG-0002\", \"New location added successfully\"),\n \n-  GET_APPS_SUCCESS(HttpStatus.OK, \"MSG-0001\", \"Get Apps successfull\");\n+  GET_APPS_SUCCESS(HttpStatus.OK, \"MSG-0003\", \"Get Apps successfull\");", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwNzA5NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459107094", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              GET_APPS_SUCCESS(HttpStatus.OK, \"MSG-0003\", \"Get Apps successfull\");\n          \n          \n            \n              GET_APPS_SUCCESS(HttpStatus.OK, \"MSG-0003\", \"Get Apps successfully\");", "author": "saminguyen", "createdAt": "2020-07-22T21:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MDIwMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459390200", "bodyText": "Our Analyst is working on message/error codes documentation. We will share the link once it is ready.\nFixed review comment.", "author": "monica-BTC", "createdAt": "2020-07-23T11:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java\nindex 5c832dbda..b93e84d9f 100644\n--- a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java\n+++ b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java\n\n@@ -30,7 +30,7 @@ public enum MessageCode {\n \n   ADD_LOCATION_SUCCESS(HttpStatus.CREATED, \"MSG-0002\", \"New location added successfully\"),\n \n-  GET_APPS_SUCCESS(HttpStatus.OK, \"MSG-0003\", \"Get Apps successfull\");\n+  GET_APPS_SUCCESS(HttpStatus.OK, \"MSG-0003\", \"Get Apps successfully\");\n \n   private final HttpStatus httpStatus;\n   private final String code;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5MTQ3MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458891470", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Long totalStudiesCount;\n          \n          \n            \n              private Long studiesCount;", "author": "saminguyen", "createdAt": "2020-07-22T15:44:17Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AppDetails.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class AppDetails {\n+  private String id;\n+\n+  private String customId;\n+\n+  private String name;\n+\n+  private Long invitedCount;\n+\n+  private Long enrolledCount;\n+\n+  private Double enrollmentPercentage;\n+\n+  private Long totalStudiesCount;", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MTc4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459391784", "bodyText": "Renamed to studiesCount", "author": "monica-BTC", "createdAt": "2020-07-23T11:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5MTQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AppDetails.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AppDetails.java\nindex 922ffe175..d5e013581 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AppDetails.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/AppDetails.java\n\n@@ -26,7 +26,7 @@ public class AppDetails {\n \n   private Double enrollmentPercentage;\n \n-  private Long totalStudiesCount;\n+  private Long studiesCount;\n \n   private Long appUsersCount;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzOTEyNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458939126", "bodyText": "You should probably extract variables for the key and values here (appEntity, studyEntity) for readability purposes", "author": "saminguyen", "createdAt": "2020-07-22T16:51:13Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MTk3Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459391973", "bodyText": "Extracted key to local variable.", "author": "monica-BTC", "createdAt": "2020-07-23T11:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzOTEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\nindex 9c7bfca7a..5e1aa3bb0 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n\n@@ -82,13 +82,13 @@ public class AppServiceImpl implements AppService {\n     List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n \n     List<ParticipantRegistrySiteEntity> participantRegistry =\n-        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+        participantRegistrySiteRepository.findParticipantRegistryBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithInvitedParticipantCountMap =\n         getSiteWithInvitedParticipantCountMap(participantRegistry);\n \n     List<ParticipantStudyEntity> participantsEnrollments =\n-        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+        participantStudiesRepository.findParticipantEnrollmentsBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithEnrolledParticipantCountMap =\n         participantsEnrollments\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzU1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458943550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      appInvitedCount = appInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n          \n          \n            \n                      appInvitedCount += siteWithInvitedParticipantCountMap.get(siteId);", "author": "saminguyen", "createdAt": "2020-07-22T16:58:37Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());\n+      appDetails.setCustomId(entry.getKey().getAppId());\n+      appDetails.setTotalStudiesCount((long) entry.getValue().size());\n+      appDetails.setName(entry.getKey().getAppName());\n+      appDetails.setAppUsersCount(appIdbyUsersCount.get(entry.getKey().getId()));\n+      appDetails.setAppUsersCount(0L);\n+\n+      if (appPermissionsByAppInfoId.get(entry.getKey().getId()) != null) {\n+        Integer appEditPermission = appPermissionsByAppInfoId.get(entry.getKey().getId()).getEdit();\n+        appDetails.setAppPermission(\n+            appEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          appDetails);\n+      apps.add(appDetails);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    AppResponse appResponse =\n+        new AppResponse(MessageCode.GET_APPS_SUCCESS, apps, studyPermissionMap.size());\n+    logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n+    return appResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry,\n+      AppDetails appDetails) {\n+    long appInvitedCount = 0L;\n+    long appEnrolledCount = 0L;\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> studyEntry :\n+        entry.getValue().entrySet()) {\n+      String studyType = studyEntry.getKey().getType();\n+      for (SitePermissionEntity sitePermission : studyEntry.getValue()) {\n+        String siteId = sitePermission.getSite().getId();\n+        if (siteWithInvitedParticipantCountMap.get(siteId) != null\n+            && CLOSE_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5Mjg2OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459392869", "bodyText": "Changed to \"+=\" operator.", "author": "monica-BTC", "createdAt": "2020-07-23T11:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\nindex 9c7bfca7a..5e1aa3bb0 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n\n@@ -82,13 +82,13 @@ public class AppServiceImpl implements AppService {\n     List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n \n     List<ParticipantRegistrySiteEntity> participantRegistry =\n-        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+        participantRegistrySiteRepository.findParticipantRegistryBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithInvitedParticipantCountMap =\n         getSiteWithInvitedParticipantCountMap(participantRegistry);\n \n     List<ParticipantStudyEntity> participantsEnrollments =\n-        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+        participantStudiesRepository.findParticipantEnrollmentsBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithEnrolledParticipantCountMap =\n         participantsEnrollments\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzczOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458943739", "bodyText": "same as above", "author": "saminguyen", "createdAt": "2020-07-22T16:58:54Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());\n+      appDetails.setCustomId(entry.getKey().getAppId());\n+      appDetails.setTotalStudiesCount((long) entry.getValue().size());\n+      appDetails.setName(entry.getKey().getAppName());\n+      appDetails.setAppUsersCount(appIdbyUsersCount.get(entry.getKey().getId()));\n+      appDetails.setAppUsersCount(0L);\n+\n+      if (appPermissionsByAppInfoId.get(entry.getKey().getId()) != null) {\n+        Integer appEditPermission = appPermissionsByAppInfoId.get(entry.getKey().getId()).getEdit();\n+        appDetails.setAppPermission(\n+            appEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          appDetails);\n+      apps.add(appDetails);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    AppResponse appResponse =\n+        new AppResponse(MessageCode.GET_APPS_SUCCESS, apps, studyPermissionMap.size());\n+    logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n+    return appResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry,\n+      AppDetails appDetails) {\n+    long appInvitedCount = 0L;\n+    long appEnrolledCount = 0L;\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> studyEntry :\n+        entry.getValue().entrySet()) {\n+      String studyType = studyEntry.getKey().getType();\n+      for (SitePermissionEntity sitePermission : studyEntry.getValue()) {\n+        String siteId = sitePermission.getSite().getId();\n+        if (siteWithInvitedParticipantCountMap.get(siteId) != null\n+            && CLOSE_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n+        }\n+\n+        if (OPEN_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + sitePermission.getSite().getTargetEnrollment();", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MjkzNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459392936", "bodyText": "Changed to \"+=\" operator.", "author": "monica-BTC", "createdAt": "2020-07-23T11:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\nindex 9c7bfca7a..5e1aa3bb0 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n\n@@ -82,13 +82,13 @@ public class AppServiceImpl implements AppService {\n     List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n \n     List<ParticipantRegistrySiteEntity> participantRegistry =\n-        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+        participantRegistrySiteRepository.findParticipantRegistryBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithInvitedParticipantCountMap =\n         getSiteWithInvitedParticipantCountMap(participantRegistry);\n \n     List<ParticipantStudyEntity> participantsEnrollments =\n-        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+        participantStudiesRepository.findParticipantEnrollmentsBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithEnrolledParticipantCountMap =\n         participantsEnrollments\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzgzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458943831", "bodyText": "same as above", "author": "saminguyen", "createdAt": "2020-07-22T16:59:03Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());\n+      appDetails.setCustomId(entry.getKey().getAppId());\n+      appDetails.setTotalStudiesCount((long) entry.getValue().size());\n+      appDetails.setName(entry.getKey().getAppName());\n+      appDetails.setAppUsersCount(appIdbyUsersCount.get(entry.getKey().getId()));\n+      appDetails.setAppUsersCount(0L);\n+\n+      if (appPermissionsByAppInfoId.get(entry.getKey().getId()) != null) {\n+        Integer appEditPermission = appPermissionsByAppInfoId.get(entry.getKey().getId()).getEdit();\n+        appDetails.setAppPermission(\n+            appEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          appDetails);\n+      apps.add(appDetails);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    AppResponse appResponse =\n+        new AppResponse(MessageCode.GET_APPS_SUCCESS, apps, studyPermissionMap.size());\n+    logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n+    return appResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry,\n+      AppDetails appDetails) {\n+    long appInvitedCount = 0L;\n+    long appEnrolledCount = 0L;\n+    for (Map.Entry<StudyEntity, List<SitePermissionEntity>> studyEntry :\n+        entry.getValue().entrySet()) {\n+      String studyType = studyEntry.getKey().getType();\n+      for (SitePermissionEntity sitePermission : studyEntry.getValue()) {\n+        String siteId = sitePermission.getSite().getId();\n+        if (siteWithInvitedParticipantCountMap.get(siteId) != null\n+            && CLOSE_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + siteWithInvitedParticipantCountMap.get(siteId);\n+        }\n+\n+        if (OPEN_STUDY.equals(studyType)) {\n+          appInvitedCount = appInvitedCount + sitePermission.getSite().getTargetEnrollment();\n+        }\n+\n+        if (siteWithEnrolledParticipantCountMap.get(siteId) != null) {\n+          appEnrolledCount = appEnrolledCount + siteWithEnrolledParticipantCountMap.get(siteId);", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5Mjk5OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459392999", "bodyText": "Changed to \"+=\" operator.", "author": "monica-BTC", "createdAt": "2020-07-23T11:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\nindex 9c7bfca7a..5e1aa3bb0 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n\n@@ -82,13 +82,13 @@ public class AppServiceImpl implements AppService {\n     List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n \n     List<ParticipantRegistrySiteEntity> participantRegistry =\n-        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+        participantRegistrySiteRepository.findParticipantRegistryBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithInvitedParticipantCountMap =\n         getSiteWithInvitedParticipantCountMap(participantRegistry);\n \n     List<ParticipantStudyEntity> participantsEnrollments =\n-        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+        participantStudiesRepository.findParticipantEnrollmentsBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithEnrolledParticipantCountMap =\n         participantsEnrollments\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NDY5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458944690", "bodyText": "move appDetails to be the first argument", "author": "saminguyen", "createdAt": "2020-07-22T17:00:22Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.CLOSE_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.OPEN_STUDY;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_AND_EDIT_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.READ_PERMISSION;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.VIEW_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppDetails;\n+import com.google.cloud.healthcare.fdamystudies.beans.AppResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppPermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantRegistrySiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsRepository;\n+\n+@Service\n+public class AppServiceImpl implements AppService {\n+  private XLogger logger = XLoggerFactory.getXLogger(AppServiceImpl.class.getName());\n+\n+  @Autowired private AppPermissionRepository appPermissionRepository;\n+\n+  @Autowired private UserDetailsRepository userDetailsRepository;\n+\n+  @Autowired private ParticipantRegistrySiteRepository participantRegistrySiteRepository;\n+\n+  @Autowired private ParticipantStudyRepository participantStudiesRepository;\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public AppResponse getApps(String userId) {\n+    logger.entry(\"getApps(userId)\");\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        sitePermissionRepository.findSitePermissionByUserId(userId);\n+    if (CollectionUtils.isEmpty(sitePermissions)) {\n+      logger.exit(ErrorCode.APP_NOT_FOUND);\n+      return new AppResponse(ErrorCode.APP_NOT_FOUND);\n+    }\n+\n+    List<String> appIds = getAppIds(sitePermissions);\n+\n+    Map<String, AppPermissionEntity> appPermissionsByAppInfoId =\n+        getAppPermissionsMap(userId, appIds);\n+\n+    Map<String, Long> appIdbyUsersCount = userDetailsRepository.findAppUsersCount(appIds);\n+\n+    Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+        sitePermissionByAppInfoAndStudyInfo = getPermissionByAppInfoAndStudyInfo(sitePermissions);\n+\n+    List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n+\n+    List<ParticipantRegistrySiteEntity> participantRegistry =\n+        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithInvitedParticipantCountMap =\n+        getSiteWithInvitedParticipantCountMap(participantRegistry);\n+\n+    List<ParticipantStudyEntity> participantsEnrollments =\n+        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+\n+    Map<String, Long> siteWithEnrolledParticipantCountMap =\n+        participantsEnrollments\n+            .stream()\n+            .collect(Collectors.groupingBy(e -> e.getSite().getId(), Collectors.counting()));\n+\n+    return prepareAppResponse(\n+        sitePermissions,\n+        appPermissionsByAppInfoId,\n+        appIdbyUsersCount,\n+        sitePermissionByAppInfoAndStudyInfo,\n+        siteWithInvitedParticipantCountMap,\n+        siteWithEnrolledParticipantCountMap);\n+  }\n+\n+  private AppResponse prepareAppResponse(\n+      List<SitePermissionEntity> sitePermissions,\n+      Map<String, AppPermissionEntity> appPermissionsByAppInfoId,\n+      Map<String, Long> appIdbyUsersCount,\n+      Map<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>>\n+          sitePermissionByAppInfoAndStudyInfo,\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap) {\n+    List<AppDetails> apps = new ArrayList<>();\n+    for (Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry :\n+        sitePermissionByAppInfoAndStudyInfo.entrySet()) {\n+      AppDetails appDetails = new AppDetails();\n+      appDetails.setId(entry.getKey().getId());\n+      appDetails.setCustomId(entry.getKey().getAppId());\n+      appDetails.setTotalStudiesCount((long) entry.getValue().size());\n+      appDetails.setName(entry.getKey().getAppName());\n+      appDetails.setAppUsersCount(appIdbyUsersCount.get(entry.getKey().getId()));\n+      appDetails.setAppUsersCount(0L);\n+\n+      if (appPermissionsByAppInfoId.get(entry.getKey().getId()) != null) {\n+        Integer appEditPermission = appPermissionsByAppInfoId.get(entry.getKey().getId()).getEdit();\n+        appDetails.setAppPermission(\n+            appEditPermission == VIEW_VALUE ? READ_PERMISSION : READ_AND_EDIT_PERMISSION);\n+      }\n+\n+      calculateEnrollmentPercentage(\n+          siteWithInvitedParticipantCountMap,\n+          siteWithEnrolledParticipantCountMap,\n+          entry,\n+          appDetails);\n+      apps.add(appDetails);\n+    }\n+\n+    Map<StudyEntity, List<SitePermissionEntity>> studyPermissionMap =\n+        sitePermissions.stream().collect(Collectors.groupingBy(SitePermissionEntity::getStudy));\n+\n+    AppResponse appResponse =\n+        new AppResponse(MessageCode.GET_APPS_SUCCESS, apps, studyPermissionMap.size());\n+    logger.exit(String.format(\"total apps=%d\", appResponse.getApps().size()));\n+    return appResponse;\n+  }\n+\n+  private void calculateEnrollmentPercentage(\n+      Map<String, Long> siteWithInvitedParticipantCountMap,\n+      Map<String, Long> siteWithEnrolledParticipantCountMap,\n+      Map.Entry<AppEntity, Map<StudyEntity, List<SitePermissionEntity>>> entry,\n+      AppDetails appDetails) {", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MzM5OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459393399", "bodyText": "Moved appDetails to the first argument.", "author": "monica-BTC", "createdAt": "2020-07-23T11:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NDY5MA=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\nindex 9c7bfca7a..5e1aa3bb0 100644\n--- a/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n+++ b/participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AppServiceImpl.java\n\n@@ -82,13 +82,13 @@ public class AppServiceImpl implements AppService {\n     List<String> usersSiteIds = getUserSiteIds(sitePermissions);\n \n     List<ParticipantRegistrySiteEntity> participantRegistry =\n-        participantRegistrySiteRepository.findParticipantRegistryOfSites(usersSiteIds);\n+        participantRegistrySiteRepository.findParticipantRegistryBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithInvitedParticipantCountMap =\n         getSiteWithInvitedParticipantCountMap(participantRegistry);\n \n     List<ParticipantStudyEntity> participantsEnrollments =\n-        participantStudiesRepository.findParticipantsEnrollmentsOfSites(usersSiteIds);\n+        participantStudiesRepository.findParticipantEnrollmentsBySiteIds(usersSiteIds);\n \n     Map<String, Long> siteWithEnrolledParticipantCountMap =\n         participantsEnrollments\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDM4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458970384", "bodyText": "move this to TestDataHelper?", "author": "saminguyen", "createdAt": "2020-07-22T17:42:55Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.AppService;\n+\n+public class AppControllerTest extends BaseMockIT {\n+\n+  @Autowired private AppController controller;\n+\n+  @Autowired private AppService appService;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+  private ParticipantStudyEntity participantStudyEntity;\n+  private UserRegAdminEntity userRegAdminEntity;\n+  private AppEntity appEntity;\n+  private StudyEntity studyEntity;\n+  private SiteEntity siteEntity;\n+  private UserDetailsEntity userDetailsEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    userDetailsEntity = testDataHelper.createUserDetails(appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(appService);\n+  }\n+\n+  @Test\n+  public void shouldReturnAppsRegisteredByUser() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.set(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.apps\").isArray())\n+        .andExpect(jsonPath(\"$.studyPermissionCount\").value(1));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForGetApps() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(jsonPath(\"$.violations\").isArray())\n+        .andExpect(jsonPath(\"$.violations[0].path\").value(\"userId\"))\n+        .andExpect(jsonPath(\"$.violations[0].message\").value(\"header is required\"));\n+  }\n+\n+  @Test\n+  public void shouldNotReturnApp() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.add(TestConstants.USER_ID_HEADER, IdGenerator.id());\n+\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isNotFound())\n+        .andExpect(jsonPath(\"$.error_description\").value(ErrorCode.APP_NOT_FOUND.getDescription()));\n+  }\n+\n+  public HttpHeaders newCommonHeaders() {", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MzIzNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459863234", "bodyText": "Moved to TestDataHelper.", "author": "monica-BTC", "createdAt": "2020-07-24T05:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java b/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java\nindex 78aaeee2f..2a8a26521 100644\n--- a/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java\n+++ b/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java\n\n@@ -14,14 +14,11 @@ import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import java.util.Collections;\n-\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpHeaders;\n-import org.springframework.http.MediaType;\n \n import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDkyMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r458970923", "bodyText": "We should also check for the actual value of the apps array", "author": "saminguyen", "createdAt": "2020-07-22T17:43:49Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.common.TestConstants;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.service.AppService;\n+\n+public class AppControllerTest extends BaseMockIT {\n+\n+  @Autowired private AppController controller;\n+\n+  @Autowired private AppService appService;\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+  private ParticipantStudyEntity participantStudyEntity;\n+  private UserRegAdminEntity userRegAdminEntity;\n+  private AppEntity appEntity;\n+  private StudyEntity studyEntity;\n+  private SiteEntity siteEntity;\n+  private UserDetailsEntity userDetailsEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    appEntity = testDataHelper.createAppEntity(userRegAdminEntity);\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    userDetailsEntity = testDataHelper.createUserDetails(appEntity);\n+    participantRegistrySiteEntity =\n+        testDataHelper.createParticipantRegistrySite(siteEntity, studyEntity);\n+    participantStudyEntity =\n+        testDataHelper.createParticipantStudyEntity(\n+            siteEntity, studyEntity, participantRegistrySiteEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(appService);\n+  }\n+\n+  @Test\n+  public void shouldReturnAppsRegisteredByUser() throws Exception {\n+    HttpHeaders headers = newCommonHeaders();\n+    headers.set(TestConstants.USER_ID_HEADER, userRegAdminEntity.getId());\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_APPS.getPath()).headers(headers).contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.apps\").isArray())", "originalCommit": "8e5e79eda692937f94530d774a4eea3729f8212c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5Mzc5NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459393794", "bodyText": "Added additional asserts.", "author": "monica-BTC", "createdAt": "2020-07-23T11:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTk2NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459641964", "bodyText": "You should check for size of apps array.", "author": "saminguyen", "createdAt": "2020-07-23T18:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MjY4Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459862687", "bodyText": "Checked for array length.", "author": "monica-BTC", "createdAt": "2020-07-24T05:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "chunk": "diff --git a/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java b/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java\nindex 78aaeee2f..2a8a26521 100644\n--- a/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java\n+++ b/participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AppControllerTest.java\n\n@@ -14,14 +14,11 @@ import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import java.util.Collections;\n-\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpHeaders;\n-import org.springframework.http.MediaType;\n \n import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n"}}, {"oid": "55204a27d44d6c5058352e8e39b8f8885b08bac2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/55204a27d44d6c5058352e8e39b8f8885b08bac2", "message": "Fixed PR comments\n\nFixed PR comments", "committedDate": "2020-07-23T11:41:11Z", "type": "commit"}, {"oid": "f31710c86e8f82aeba83cf10ded214df7d54d4e3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f31710c86e8f82aeba83cf10ded214df7d54d4e3", "message": "Added @ComponentScan to BaseMockIT to fix build issue\n\nAdded @ComponentScan to BaseMockIT to fix build issue", "committedDate": "2020-07-23T11:58:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MjQxNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459642417", "bodyText": "Similar comment to the other PR. Maybe look into a more verbose name for this field.", "author": "saminguyen", "createdAt": "2020-07-23T18:21:51Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetailsEntity.java", "diffHunk": "@@ -60,8 +59,12 @@\n   @Column(name = \"last_name\")\n   private String lastName;\n \n-  @Column(name = \"_ts\")\n-  private Date ts;\n+  @Column(\n+      name = \"timestamp\",\n+      insertable = false,\n+      updatable = false,\n+      columnDefinition = \"TIMESTAMP DEFAULT CURRENT_TIMESTAMP\")\n+  private Timestamp timestamp;", "originalCommit": "f31710c86e8f82aeba83cf10ded214df7d54d4e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NDM3OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r459854378", "bodyText": "This field is unused. Hence removed.", "author": "monica-BTC", "createdAt": "2020-07-24T05:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MjQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "b8707b824b67d08fbf233a60f6f1783ed724ca8d", "chunk": "diff --git a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetailsEntity.java b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetailsEntity.java\nindex 11e04c862..9e7017e9b 100644\n--- a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetailsEntity.java\n+++ b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserDetailsEntity.java\n\n@@ -59,13 +59,6 @@ public class UserDetailsEntity implements Serializable {\n   @Column(name = \"last_name\")\n   private String lastName;\n \n-  @Column(\n-      name = \"timestamp\",\n-      insertable = false,\n-      updatable = false,\n-      columnDefinition = \"TIMESTAMP DEFAULT CURRENT_TIMESTAMP\")\n-  private Timestamp timestamp;\n-\n   @ToString.Exclude\n   @Column(name = \"email\")\n   private String email;\n"}}, {"oid": "b8707b824b67d08fbf233a60f6f1783ed724ca8d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b8707b824b67d08fbf233a60f6f1783ed724ca8d", "message": "Fixed PR comments\n\nFixed PR comments", "committedDate": "2020-07-24T05:09:14Z", "type": "commit"}, {"oid": "32fd549ec98225a6f1671279d20ff418a06c16cc", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/32fd549ec98225a6f1671279d20ff418a06c16cc", "message": "Added required condition\n\nAdded required condition", "committedDate": "2020-08-06T10:52:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjAxMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r466546010", "bodyText": "nit: have fields with Setter Getter here instead.", "author": "saminguyen", "createdAt": "2020-08-06T16:45:57Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/AppCount.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+public interface AppCount {\n+\n+  String getAppId();", "originalCommit": "32fd549ec98225a6f1671279d20ff418a06c16cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyODg4Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/636#discussion_r466828882", "bodyText": "We have refered this 4.1. Customizing the Result of JPA Queries. Please review and approve.", "author": "monica-BTC", "createdAt": "2020-08-07T05:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjAxMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5c923111d708b47a48d2b3f6ab543b0ffd14b0c2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5c923111d708b47a48d2b3f6ab543b0ffd14b0c2", "message": "Merge branch 'develop' into participant-manager-apps-endpoint-implementation", "committedDate": "2020-08-11T04:22:54Z", "type": "commit"}, {"oid": "9b6bee24bd61be9f9390974d3e86929717f16d8e", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9b6bee24bd61be9f9390974d3e86929717f16d8e", "message": "resolved conflict errors\n\nresolved conflict errors", "committedDate": "2020-08-11T05:12:10Z", "type": "commit"}, {"oid": "ea6fd910716d69877175e0b370589633212f6fec", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ea6fd910716d69877175e0b370589633212f6fec", "message": "Merge branch 'develop' into participant-manager-apps-endpoint-implementation", "committedDate": "2020-08-11T05:30:36Z", "type": "commit"}]}