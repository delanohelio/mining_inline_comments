{"pr_number": 360, "pr_title": "Create user_institution table. Keyed by user_details_id rather than u\u2026", "pr_createdAt": "2020-05-08T01:22:47Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNzYxMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r421937611", "bodyText": "nit: I assume we want to explicitly import each lib instead of import *?", "author": "kuoyuchi", "createdAt": "2020-05-08T04:56:07Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.storage.*;", "originalCommit": "d81a901135a686f10ae7d974a822c32deac48a42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MDE4Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422160183", "bodyText": "yes, that's part of the styleguide https://google.github.io/styleguide/javaguide.html#s3.3.1-wildcard-imports", "author": "zohrehj", "createdAt": "2020-05-08T14:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNzYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NjA5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422286090", "bodyText": "Fixed here and elsewhere. Was a default in my ide to change to wildcard after 5 imports", "author": "wamills", "createdAt": "2020-05-08T17:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNzYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a965b5c75eb94750d6616328814b91005b452d2", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java\ndeleted file mode 100644\nindex e8e06f3de..000000000\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-package com.google.cloud.healthcare.fdamystudies.service;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.Base64;\n-import java.util.List;\n-import java.util.UUID;\n-import javax.annotation.PostConstruct;\n-\n-import com.google.api.gax.paging.Page;\n-import com.google.cloud.storage.*;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import com.google.cloud.WriteChannel;\n-import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n-\n-@Service\n-public class CloudStorageService {\n-\n-    private Storage storageService;\n-\n-    @Autowired\n-    private ApplicationPropertyConfiguration appConfig;\n-\n-    @PostConstruct\n-    private void init() {\n-        storageService = StorageOptions.getDefaultInstance().getService();\n-    }\n-\n-    public List<ByteArrayOutputStream> getAllInstitutionResources(String institutionId) {\n-        Bucket bucket = storageService.get(appConfig.getInstitutionBucketName());\n-        Page<Blob> blobs = bucket.list();\n-\n-        ArrayList<ByteArrayOutputStream> streams = new ArrayList<>();\n-        for (Blob blob : blobs.iterateAll()) {\n-            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-            blob.downloadTo(outputStream);\n-            streams.add(outputStream);\n-        }\n-        return streams;\n-    }\n-\n-}\n-\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MDE5OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r421940198", "bodyText": "I think we want to add a prefix(institutionId+\"/\") as argument of list (which, on cloud console UI, would look like each institution having a directory in the singleton InstitutionBucket).", "author": "kuoyuchi", "createdAt": "2020-05-08T05:06:02Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.storage.*;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.WriteChannel;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+\n+@Service\n+public class CloudStorageService {\n+\n+    private Storage storageService;\n+\n+    @Autowired\n+    private ApplicationPropertyConfiguration appConfig;\n+\n+    @PostConstruct\n+    private void init() {\n+        storageService = StorageOptions.getDefaultInstance().getService();\n+    }\n+\n+    public List<ByteArrayOutputStream> getAllInstitutionResources(String institutionId) {\n+        Bucket bucket = storageService.get(appConfig.getInstitutionBucketName());\n+        Page<Blob> blobs = bucket.list();", "originalCommit": "d81a901135a686f10ae7d974a822c32deac48a42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5Nzk1NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422297955", "bodyText": "Can a user belong to more than one institution?\nI initially just ported over the other CloudStorageService from the enroll-mgmt service but when converting forgot to update. Fixed to use the institutionId.\nI think I have more work to do on this though. I thought we could have the heroes top level bucket and then a bucket per institution within to have a true separation of institutions: https://cloud.google.com/appengine/docs/standard/java/googlecloudstorageclient/read-write-to-cloud-storage#cloud_storage_and_subdirectories\ndoesn't look like that is possible. I'll change to just search within a subdirectory", "author": "wamills", "createdAt": "2020-05-08T18:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwOTEzNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422309136", "bodyText": "We can assume a user belongs to a single institution for now because it's coming from results of a single choice question. It might change in the future but we don't have to build it now.", "author": "kuoyuchi", "createdAt": "2020-05-08T18:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2MDQ0Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422360443", "bodyText": "sg, changed to search within a subdirectory", "author": "wamills", "createdAt": "2020-05-08T20:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MDE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "6a965b5c75eb94750d6616328814b91005b452d2", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java\ndeleted file mode 100644\nindex e8e06f3de..000000000\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-package com.google.cloud.healthcare.fdamystudies.service;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.Base64;\n-import java.util.List;\n-import java.util.UUID;\n-import javax.annotation.PostConstruct;\n-\n-import com.google.api.gax.paging.Page;\n-import com.google.cloud.storage.*;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import com.google.cloud.WriteChannel;\n-import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n-\n-@Service\n-public class CloudStorageService {\n-\n-    private Storage storageService;\n-\n-    @Autowired\n-    private ApplicationPropertyConfiguration appConfig;\n-\n-    @PostConstruct\n-    private void init() {\n-        storageService = StorageOptions.getDefaultInstance().getService();\n-    }\n-\n-    public List<ByteArrayOutputStream> getAllInstitutionResources(String institutionId) {\n-        Bucket bucket = storageService.get(appConfig.getInstitutionBucketName());\n-        Page<Blob> blobs = bucket.list();\n-\n-        ArrayList<ByteArrayOutputStream> streams = new ArrayList<>();\n-        for (Blob blob : blobs.iterateAll()) {\n-            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-            blob.downloadTo(outputStream);\n-            streams.add(outputStream);\n-        }\n-        return streams;\n-    }\n-\n-}\n-\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyMjk2MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422022961", "bodyText": "user_details_id is the primary key for the user_details table, right? I don't think you need to set referencedColumnName explicitly, I think it will pick that automatically.", "author": "karepker", "createdAt": "2020-05-08T08:42:51Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserInstitution.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.google.cloud.healthcare.fdamystudies.model;\n+\n+import lombok.*;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.NotNull;\n+\n+@Setter\n+@Getter\n+@Entity\n+@AllArgsConstructor\n+@Builder\n+@NoArgsConstructor\n+@Table(name = \"user_institution\")\n+public class UserInstitution {\n+    @Id\n+    @Column(name = \"user_institution_id\")\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long userInstitutionId;\n+\n+    @OneToOne(fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"user_id\", referencedColumnName = \"user_details_id\")", "originalCommit": "d81a901135a686f10ae7d974a822c32deac48a42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NjE4MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422286181", "bodyText": "Done", "author": "wamills", "createdAt": "2020-05-08T17:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyMjk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a965b5c75eb94750d6616328814b91005b452d2", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserInstitution.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserInstitution.java\nindex eda6a399b..54a67fe96 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserInstitution.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/UserInstitution.java\n\n@@ -1,8 +1,6 @@\n package com.google.cloud.healthcare.fdamystudies.model;\n \n import lombok.*;\n-import org.hibernate.annotations.OnDelete;\n-import org.hibernate.annotations.OnDeleteAction;\n \n import javax.persistence.*;\n import javax.validation.constraints.NotNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyNDA4OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422024089", "bodyText": "nit: You can remove ().", "author": "karepker", "createdAt": "2020-05-08T08:45:22Z", "path": "user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResourcesTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import com.google.cloud.healthcare.fdamystudies.TestApplicationContextInitializer;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserInstitutionResources;\n+import com.google.cloud.healthcare.fdamystudies.model.UserInstitution;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserInstitutionRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.CloudStorageService;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Optional;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest()", "originalCommit": "d81a901135a686f10ae7d974a822c32deac48a42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NjI0Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422286242", "bodyText": "Done", "author": "wamills", "createdAt": "2020-05-08T17:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyNDA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a965b5c75eb94750d6616328814b91005b452d2", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResourcesTest.java b/user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResourcesTest.java\ndeleted file mode 100644\nindex 2d7056ba6..000000000\n--- a/user-registration-server-ws/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/util/GetUserInstitutionResourcesTest.java\n+++ /dev/null\n\n@@ -1,94 +0,0 @@\n-package com.google.cloud.healthcare.fdamystudies.util;\n-\n-import com.google.cloud.healthcare.fdamystudies.TestApplicationContextInitializer;\n-import com.google.cloud.healthcare.fdamystudies.beans.UserInstitutionResources;\n-import com.google.cloud.healthcare.fdamystudies.model.UserInstitution;\n-import com.google.cloud.healthcare.fdamystudies.repository.UserInstitutionRepository;\n-import com.google.cloud.healthcare.fdamystudies.service.CloudStorageService;\n-import org.apache.commons.io.FileUtils;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mockito;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n-import org.springframework.test.context.ActiveProfiles;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.DataOutputStream;\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.Optional;\n-\n-import static junit.framework.TestCase.assertTrue;\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.internal.verification.VerificationModeFactory.times;\n-\n-@RunWith(SpringRunner.class)\n-@SpringBootTest()\n-@ActiveProfiles(\"test\")\n-@ContextConfiguration(initializers = TestApplicationContextInitializer.class)\n-public class GetUserInstitutionResourcesTest {\n-    @MockBean\n-    UserInstitutionRepository userInstitutionRepository;\n-\n-    @MockBean\n-    CloudStorageService cloudStorageService;\n-\n-    @Autowired\n-    GetUserInstitutionResources getUserInstitutionResources;\n-\n-    @Test\n-    public void noUserFound() {\n-        assertFalse(getUserInstitutionResources.getInstitutionResourcesForUser(\n-                \"missing_id\").isPresent());\n-        verify(userInstitutionRepository, times(1)).findByUserUserId(\"missing_id\");\n-    }\n-\n-    @Test\n-    public void noInstitutionResourcesFound() {\n-        String fakeInstitution = \"fake_institution\";\n-        Mockito.when(userInstitutionRepository.findByUserUserId(\"fake_user_id\")).thenReturn(Optional.of(UserInstitution.builder()\n-                .institutionId(fakeInstitution)\n-                .build()));\n-        Mockito.when(cloudStorageService.getAllInstitutionResources(\n-                \"fake_institution\")).thenReturn(new ArrayList<ByteArrayOutputStream>());\n-\n-        assertFalse(getUserInstitutionResources.getInstitutionResourcesForUser(\n-                \"fake_user_id\").isPresent());\n-        verify(cloudStorageService, times(1)).getAllInstitutionResources(fakeInstitution);\n-\n-    }\n-\n-    @Test\n-    public void returnsInstitution() throws IOException {\n-        URL path = ClassLoader.getSystemResource(\"fake_html.html\");\n-        File f = new File(path.getFile());\n-        byte[] bytes = FileUtils.readFileToByteArray(f);\n-        String fakeInstitution = \"fake_institution\";\n-        Mockito.when(userInstitutionRepository.findByUserUserId(\"fake_user_id\"))\n-                .thenReturn(Optional.of(UserInstitution.builder()\n-                        .institutionId(fakeInstitution)\n-                        .build()));\n-        String html = \"<p>fake html</p>\";\n-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n-        byteArrayOutputStream.write(bytes);\n-        ArrayList<ByteArrayOutputStream> streams = new ArrayList<>();\n-        streams.add(byteArrayOutputStream);\n-        Mockito.when(cloudStorageService.getAllInstitutionResources(\n-                fakeInstitution)).thenReturn(streams);\n-        Optional<UserInstitutionResources> resources =\n-                getUserInstitutionResources.getInstitutionResourcesForUser(\n-                        \"fake_user_id\");\n-        assertTrue(resources.isPresent());\n-        assertTrue(resources.get().resources.size() == 1);\n-        assertThat(resources.get().resources.get(0).equals(html));\n-\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NzM2MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422287360", "bodyText": "Also we might want to change the return type here because the name of the blob (removing institutionId prefix) would be the resource title displayed, so we might want to change the return type to something like a pair<string,string>.", "author": "kuoyuchi", "createdAt": "2020-05-08T18:01:51Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.Bucket;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageException;\n+import com.google.cloud.storage.StorageOptions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+\n+@Service\n+public class CloudStorageService {\n+    private static Logger logger = LoggerFactory.getLogger(CloudStorageService.class);\n+\n+    private Storage storageService;\n+\n+    @Autowired\n+    private ApplicationPropertyConfiguration appConfig;\n+\n+    @PostConstruct\n+    private void init() {\n+        storageService = StorageOptions.getDefaultInstance().getService();\n+    }\n+\n+    public List<ByteArrayOutputStream> getAllInstitutionResources(String institutionId) {", "originalCommit": "1bbdf603c516fbe20442d3b4b90251c1e76c31ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5MTcwMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422291700", "bodyText": "I have a UserResourceBean that I'm checking in in pull #363. You should be able to use that.", "author": "karepker", "createdAt": "2020-05-08T18:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NzM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM2MDIyNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/360#discussion_r422360227", "bodyText": "Changed the return type to include the title and changed to use UserResourceBean a level up so we can still test some of the ByteArrayOutputStream logic. Can't create a fake StorageOptions without a new GCP test project. The local test version cannot lookup all contents in a bucket.\nThanks!", "author": "wamills", "createdAt": "2020-05-08T20:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NzM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "6a965b5c75eb94750d6616328814b91005b452d2", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java\ndeleted file mode 100644\nindex 2b206afce..000000000\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/CloudStorageService.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-package com.google.cloud.healthcare.fdamystudies.service;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.annotation.PostConstruct;\n-\n-import com.google.api.gax.paging.Page;\n-import com.google.cloud.storage.Blob;\n-import com.google.cloud.storage.Bucket;\n-import com.google.cloud.storage.Storage;\n-import com.google.cloud.storage.StorageException;\n-import com.google.cloud.storage.StorageOptions;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n-\n-@Service\n-public class CloudStorageService {\n-    private static Logger logger = LoggerFactory.getLogger(CloudStorageService.class);\n-\n-    private Storage storageService;\n-\n-    @Autowired\n-    private ApplicationPropertyConfiguration appConfig;\n-\n-    @PostConstruct\n-    private void init() {\n-        storageService = StorageOptions.getDefaultInstance().getService();\n-    }\n-\n-    public List<ByteArrayOutputStream> getAllInstitutionResources(String institutionId) {\n-        Bucket bucket = null;\n-        try {\n-            bucket =\n-                    storageService.get(appConfig.getInstitutionBucketName() + \"/\" + institutionId);\n-        } catch (StorageException e) {\n-            logger.error(e.getMessage());\n-        } finally {\n-            if (bucket == null) return new ArrayList<>();\n-        }\n-        Page<Blob> blobs = bucket.list();\n-\n-        ArrayList<ByteArrayOutputStream> streams = new ArrayList<>();\n-        for (Blob blob : blobs.iterateAll()) {\n-            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-            blob.downloadTo(outputStream);\n-            streams.add(outputStream);\n-        }\n-        return streams;\n-    }\n-\n-}\n-\n-\n"}}, {"oid": "6a965b5c75eb94750d6616328814b91005b452d2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6a965b5c75eb94750d6616328814b91005b452d2", "message": "Create user_institution table. Keyed by user_details_id rather than user_id (user_id is not a primary key in this table).", "committedDate": "2020-05-08T20:01:56Z", "type": "commit"}, {"oid": "9505318d7a800ce236d0c2248fc06c2cf666af51", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9505318d7a800ce236d0c2248fc06c2cf666af51", "message": "When UserDetailsBO is deleted UserInstitution is deleted.", "committedDate": "2020-05-08T20:02:02Z", "type": "commit"}, {"oid": "25d148cff478109fd68f6c40ff18f1f5c11067c5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/25d148cff478109fd68f6c40ff18f1f5c11067c5", "message": "Add component to read from the user_institution table and look up an institutions data from GCS.", "committedDate": "2020-05-08T20:02:02Z", "type": "commit"}, {"oid": "7798ad4654834fee7f0a92cac82da70c8882d02e", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7798ad4654834fee7f0a92cac82da70c8882d02e", "message": "Add more detailed test to show we can lookup UserInstitution by UserId.", "committedDate": "2020-05-08T20:02:02Z", "type": "commit"}, {"oid": "f794697574736b33b81602d8fe0cdd4af6ca6e23", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f794697574736b33b81602d8fe0cdd4af6ca6e23", "message": "Use institution_id in Cloud bucket lookup. Also some other cleanups, no wildcard imports, spring boot cleanups.", "committedDate": "2020-05-08T20:02:02Z", "type": "commit"}, {"oid": "cb4c459ee7589144630a38245c0b5429e88af1e5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/cb4c459ee7589144630a38245c0b5429e88af1e5", "message": "Use institutionId as a prefix for lookup.", "committedDate": "2020-05-08T20:02:02Z", "type": "commit"}, {"oid": "6c56895aa438dbde210be9ce78798a1ed3167405", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6c56895aa438dbde210be9ce78798a1ed3167405", "message": "Add user_institution make table command to sql startup script.", "committedDate": "2020-05-08T20:02:02Z", "type": "commit"}, {"oid": "15be63245813f7f750d49ef32e91ff768c5b7c62", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/15be63245813f7f750d49ef32e91ff768c5b7c62", "message": "Make it obvious that the foreign key is the user_details_id column in user_details column.", "committedDate": "2020-05-08T20:02:02Z", "type": "commit"}, {"oid": "73fffdd9a9b725c21c1dff76bd163b37e12a04a5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/73fffdd9a9b725c21c1dff76bd163b37e12a04a5", "message": "Return content title from CloudStorageService and use the UserResourceBean as the return value of GetUserInstitutionResources.", "committedDate": "2020-05-08T20:32:47Z", "type": "commit"}, {"oid": "73fffdd9a9b725c21c1dff76bd163b37e12a04a5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/73fffdd9a9b725c21c1dff76bd163b37e12a04a5", "message": "Return content title from CloudStorageService and use the UserResourceBean as the return value of GetUserInstitutionResources.", "committedDate": "2020-05-08T20:32:47Z", "type": "forcePushed"}, {"oid": "37cbd86a4178f69c3336fab70f69dc9fff58f155", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/37cbd86a4178f69c3336fab70f69dc9fff58f155", "message": "Remove institutionId directory prefix from title and skip placeholder GCS files.", "committedDate": "2020-05-08T22:29:35Z", "type": "commit"}, {"oid": "57fe9f270956ddc0fd762f46cd41e8a9e6ea1304", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/57fe9f270956ddc0fd762f46cd41e8a9e6ea1304", "message": "Use AUTO_INCREMENT for key of user_institution table.", "committedDate": "2020-05-09T15:42:24Z", "type": "commit"}]}