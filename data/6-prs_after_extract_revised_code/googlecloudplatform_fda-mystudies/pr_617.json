{"pr_number": 617, "pr_title": "POST /login implementation with integration tests", "pr_createdAt": "2020-07-13T05:42:03Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617", "timeline": [{"oid": "e9830413f40d3b51ce8e8276ab527006113e69a4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e9830413f40d3b51ce8e8276ab527006113e69a4", "message": "POST /login endpoint implementation\n\nPOST /login endpoint implementation", "committedDate": "2020-07-12T16:51:02Z", "type": "commit"}, {"oid": "52114bee86cb5ec1701aff321c1bdde7fffb89c5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/52114bee86cb5ec1701aff321c1bdde7fffb89c5", "message": "POST /authenticate endpoint implementation with integration tests\n\nPOST /authenticate endpoint implementation with integration tests", "committedDate": "2020-07-13T05:36:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0NDYzMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r454644630", "bodyText": "I suggest making a separate constant here instead of hard code value, and noting that the measurement of time is in seconds.", "author": "saminguyen", "createdAt": "2020-07-14T21:05:07Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/HydraOAuthServiceImpl.java", "diffHunk": "@@ -101,4 +111,34 @@ public void init() {\n \n     return getRestTemplate().getForEntity(url.toString(), JsonNode.class);\n   }\n+\n+  @Override\n+  public ResponseEntity<JsonNode> loginAccept(String email, String loginChallenge) {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+\n+    StringBuilder url = new StringBuilder(loginAcceptEndpoint);\n+    url.append(\"?\").append(LOGIN_CHALLENGE).append(\"=\").append(loginChallenge);\n+\n+    ObjectNode requestParams = JsonUtils.getObjectNode();\n+    requestParams.put(\"subject\", email);\n+    requestParams.put(\"remember\", true);\n+    requestParams.put(\"remember_for\", 3600);", "originalCommit": "52114bee86cb5ec1701aff321c1bdde7fffb89c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1MjcyMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r455752720", "bodyText": "Added private static final int REMEMBER_FOR_SECONDS = 3600;  other string values not extracted to constants because they are not used multiple-times.", "author": "dhanyak-btc", "createdAt": "2020-07-16T12:36:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0NDYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "8d85255344ffaca68c542bb9853813618140f926", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/HydraOAuthServiceImpl.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/HydraOAuthServiceImpl.java\nindex 3c551e3c3..e72293ffb 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/HydraOAuthServiceImpl.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/HydraOAuthServiceImpl.java\n\n@@ -125,7 +127,7 @@ class HydraOAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n     ObjectNode requestParams = JsonUtils.getObjectNode();\n     requestParams.put(\"subject\", email);\n     requestParams.put(\"remember\", true);\n-    requestParams.put(\"remember_for\", 3600);\n+    requestParams.put(\"remember_for\", REMEMBER_FOR_SECONDS);\n \n     HttpEntity<Object> requestEntity = new HttpEntity<>(requestParams, headers);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNzMzNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r454707334", "bodyText": "Replace 5 with a constant MAX_LOGIN_ATTEMPTS or something similar", "author": "saminguyen", "createdAt": "2020-07-14T23:43:32Z", "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginControllerTest.java", "diffHunk": "@@ -135,4 +155,123 @@ public void shouldReturnAutoSigninPage() throws Exception {\n         .andExpect(content().string(containsString(\"<title>Please wait</title>\")))\n         .andReturn();\n   }\n+\n+  @Test\n+  public void shouldAuthenticateTheUserAndRedirectToConsentPage() throws Exception {\n+    // Step-1 create a user account with ACTIVE status\n+    UserResponse userResponse = userService.createUser(newUserRequest());\n+    UserEntity userEntity = userRepository.findByUserId(userResponse.getUserId()).get();\n+    userEntity.setStatus(UserAccountStatus.ACTIVE.getStatus());\n+    userRepository.saveAndFlush(userEntity);\n+\n+    // Step-2 call API with login credentials\n+    MultiValueMap<String, String> requestParams = getLoginRequestParamsMap();\n+\n+    Cookie appIdCookie = new Cookie(APP_ID, \"MyStudies\");\n+    Cookie orgIdCookie = new Cookie(ORG_ID, \"FDA\");\n+    Cookie loginChallenge = new Cookie(LOGIN_CHALLENGE, LOGIN_CHALLENGE_VALUE);\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.LOGIN_PAGE.getPath())\n+                .contextPath(getContextPath())\n+                .params(requestParams)\n+                .cookie(appIdCookie, orgIdCookie, loginChallenge))\n+        .andDo(print())\n+        .andExpect(status().is3xxRedirection())\n+        .andExpect(redirectedUrl(ApiEndpoint.CONSENT_PAGE.getUrl()));\n+\n+    // Step-3 delete user account\n+    userRepository.delete(userEntity);\n+  }\n+\n+  @Test\n+  public void shouldReturnInvalidLoginCredentials() throws Exception {\n+    // Step-1 create a user account with ACTIVE status\n+    UserResponse userResponse = userService.createUser(newUserRequest());\n+    UserEntity userEntity = userRepository.findByUserId(userResponse.getUserId()).get();\n+    userEntity.setStatus(UserAccountStatus.ACTIVE.getStatus());\n+    userRepository.saveAndFlush(userEntity);\n+\n+    // Step-2 call API with invalid login credentials\n+    MultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();\n+\n+    Cookie appIdCookie = new Cookie(APP_ID, \"MyStudies\");\n+    Cookie orgIdCookie = new Cookie(ORG_ID, \"FDA\");\n+    Cookie loginChallenge = new Cookie(LOGIN_CHALLENGE, LOGIN_CHALLENGE_VALUE);\n+    mockMvc\n+        .perform(\n+            post(ApiEndpoint.LOGIN_PAGE.getPath())\n+                .contextPath(getContextPath())\n+                .params(requestParams)\n+                .cookie(appIdCookie, orgIdCookie, loginChallenge))\n+        .andDo(print())\n+        .andExpect(\n+            content().string(containsString(ErrorCode.INVALID_LOGIN_CREDENTIALS.getDescription())));\n+\n+    // Step-3 delete user account\n+    userRepository.delete(userEntity);\n+  }\n+\n+  @Test\n+  public void shouldSendAccountLockedEmail() throws Exception {\n+    // Step-1 create a user account with ACTIVE status\n+    UserResponse userResponse = userService.createUser(newUserRequest());\n+    UserEntity userEntity = userRepository.findByUserId(userResponse.getUserId()).get();\n+    userEntity.setStatus(UserAccountStatus.ACTIVE.getStatus());\n+    userRepository.saveAndFlush(userEntity);\n+\n+    // Step-2 call API for 5 times with invalid login credentials to lock the account\n+    MultiValueMap<String, String> requestParams = getLoginRequestParamsMap();\n+    requestParams.set(PASSWORD, \"invalid_password\");\n+    Cookie appIdCookie = new Cookie(APP_ID, \"MyStudies\");\n+    Cookie orgIdCookie = new Cookie(ORG_ID, \"FDA\");\n+    Cookie loginChallenge = new Cookie(LOGIN_CHALLENGE, LOGIN_CHALLENGE_VALUE);\n+\n+    for (int i = 1; i <= 5; i++) {", "originalCommit": "52114bee86cb5ec1701aff321c1bdde7fffb89c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1MzUzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r455753531", "bodyText": "Extracted to constant.  private static final int MAX_LOGIN_ATTEMPTS = 5;", "author": "dhanyak-btc", "createdAt": "2020-07-16T12:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNzMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "8d85255344ffaca68c542bb9853813618140f926", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginControllerTest.java b/oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginControllerTest.java\nindex e9e57116b..6b2bfca45 100644\n--- a/oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginControllerTest.java\n+++ b/oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginControllerTest.java\n\n@@ -227,7 +229,11 @@ public class LoginControllerTest extends BaseMockIT {\n     Cookie orgIdCookie = new Cookie(ORG_ID, \"FDA\");\n     Cookie loginChallenge = new Cookie(LOGIN_CHALLENGE, LOGIN_CHALLENGE_VALUE);\n \n-    for (int i = 1; i <= 5; i++) {\n+    ErrorCode expectedErrorCode = ErrorCode.INVALID_LOGIN_CREDENTIALS;\n+    for (int loginAttempts = 1; loginAttempts <= MAX_LOGIN_ATTEMPTS; loginAttempts++) {\n+      if (loginAttempts == MAX_LOGIN_ATTEMPTS) {\n+        expectedErrorCode = ErrorCode.ACCOUNT_LOCKED;\n+      }\n       mockMvc\n           .perform(\n               post(ApiEndpoint.LOGIN_PAGE.getPath())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODQ2MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r454708460", "bodyText": "I would move updating loginAttempts to before the if statement block, and have the condition be loginAttempts > appConfig.getMaxInvalidLoginAttempts() - it will behave the same way but logically, looking at it the code it would make more sense.", "author": "saminguyen", "createdAt": "2020-07-14T23:47:20Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -243,4 +270,138 @@ private ErrorCode validatePasswords(\n     logger.entry(\"begin findUserByTempRegId()\");\n     return repository.findByTempRegId(tempRegId);\n   }\n+\n+  @Override\n+  public AuthenticationResponse authenticate(UserRequest user) throws JsonProcessingException {\n+    logger.entry(\"begin authenticate(user)\");\n+    // check if the email present in the database\n+    Optional<UserEntity> optUserEntity =\n+        repository.findByAppIdAndOrgIdAndEmail(user.getAppId(), user.getOrgId(), user.getEmail());\n+\n+    if (!optUserEntity.isPresent()) {\n+      return new AuthenticationResponse(ErrorCode.USER_NOT_FOUND);\n+    }\n+\n+    UserEntity userEntity = optUserEntity.get();\n+    ObjectNode userInfo = (ObjectNode) toJsonNode(userEntity.getUserInfo());\n+    JsonNode passwordNode = userInfo.get(PASSWORD);\n+    String hash = getTextValue(passwordNode, HASH);\n+    String salt = getTextValue(passwordNode, SALT);\n+\n+    // check the account status and password expiry condition\n+    ErrorCode errorCode = validatePasswordExpiryAndAccountStatus(userEntity, userInfo);\n+    if (errorCode != null) {\n+      return new AuthenticationResponse(errorCode);\n+    }\n+\n+    String passwordHash = hash(encrypt(user.getPassword(), salt));\n+    if (StringUtils.equals(passwordHash, hash)) {\n+      // reset login attempts\n+      return updateLoginAttemptsAndAuthenticationTime(userEntity, userInfo);\n+    } else {\n+      // increment login attempts\n+      return updateInvalidLoginAttempts(userEntity, userInfo);\n+    }\n+  }\n+\n+  private EmailResponse sendAccountLockedEmail(UserEntity user, String tempPassword) {\n+    logger.entry(\"sendAccountLockedEmail()\");\n+    Map<String, String> templateArgs = new HashMap<>();\n+    templateArgs.put(\"appId\", user.getAppId());\n+    templateArgs.put(\"contactEmail\", appConfig.getContactEmail());\n+    templateArgs.put(\"tempPassword\", tempPassword);\n+    EmailRequest emailRequest =\n+        new EmailRequest(\n+            appConfig.getFromEmail(),\n+            new String[] {user.getEmail()},\n+            null,\n+            null,\n+            appConfig.getMailAccountLockedSubject(),\n+            appConfig.getMailAccountLockedBody(),\n+            templateArgs);\n+    EmailResponse emailResponse = emailService.sendSimpleMail(emailRequest);\n+    logger.exit(\n+        String.format(\"send account locked email status=%d\", emailResponse.getHttpStatusCode()));\n+    return emailResponse;\n+  }\n+\n+  private AuthenticationResponse updateInvalidLoginAttempts(\n+      UserEntity userEntity, ObjectNode userInfo) {\n+\n+    int loginAttempts =\n+        userInfo.hasNonNull(LOGIN_ATTEMPTS) ? userInfo.get(LOGIN_ATTEMPTS).intValue() : 0;\n+\n+    if (loginAttempts >= appConfig.getMaxInvalidLoginAttempts()) {\n+\n+      String tempPassword = PasswordGenerator.generate(12);\n+      setPasswordAndPasswordHistoryFields(\n+          tempPassword, userInfo, UserAccountStatus.ACCOUNT_LOCKED.getStatus());\n+      sendAccountLockedEmail(userEntity, tempPassword);\n+      userEntity.setStatus(UserAccountStatus.ACCOUNT_LOCKED.getStatus());\n+      userInfo.put(ACCOUNT_LOCK_EMAIL_TIMESTAMP, Instant.now().toEpochMilli());\n+    }\n+    userInfo.put(LOGIN_ATTEMPTS, ++loginAttempts);", "originalCommit": "52114bee86cb5ec1701aff321c1bdde7fffb89c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1NDk2NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r455754964", "bodyText": "I agree with you, refactored the code as per your suggestion.", "author": "dhanyak-btc", "createdAt": "2020-07-16T12:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "8d85255344ffaca68c542bb9853813618140f926", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java\nindex de0b1b3bf..d2d5c7f23 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java\n\n@@ -330,9 +330,9 @@ public class UserServiceImpl implements UserService {\n \n     int loginAttempts =\n         userInfo.hasNonNull(LOGIN_ATTEMPTS) ? userInfo.get(LOGIN_ATTEMPTS).intValue() : 0;\n-\n+    loginAttempts = loginAttempts + 1;\n+    userInfo.put(LOGIN_ATTEMPTS, loginAttempts);\n     if (loginAttempts >= appConfig.getMaxInvalidLoginAttempts()) {\n-\n       String tempPassword = PasswordGenerator.generate(12);\n       setPasswordAndPasswordHistoryFields(\n           tempPassword, userInfo, UserAccountStatus.ACCOUNT_LOCKED.getStatus());\n"}}, {"oid": "8d85255344ffaca68c542bb9853813618140f926", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8d85255344ffaca68c542bb9853813618140f926", "message": "Fixed PR#617 review comments\n\nFixed PR#617 review comments", "committedDate": "2020-07-16T12:46:42Z", "type": "commit"}, {"oid": "e6be66aefa1c620c9d1b7f172df97bfb59075ca3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e6be66aefa1c620c9d1b7f172df97bfb59075ca3", "message": "PR #617 Fixed build issue\n\nPR #617 Fixed build issue", "committedDate": "2020-07-16T12:59:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzU1Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r455923556", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                loginAttempts = loginAttempts + 1;\n          \n          \n            \n                userInfo.put(LOGIN_ATTEMPTS, loginAttempts);\n          \n          \n            \n            userInfo.put(LOGIN_ATTEMPTS, ++loginAttempts);", "author": "saminguyen", "createdAt": "2020-07-16T16:41:13Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java", "diffHunk": "@@ -330,17 +330,16 @@ private AuthenticationResponse updateInvalidLoginAttempts(\n \n     int loginAttempts =\n         userInfo.hasNonNull(LOGIN_ATTEMPTS) ? userInfo.get(LOGIN_ATTEMPTS).intValue() : 0;\n-\n+    loginAttempts = loginAttempts + 1;\n+    userInfo.put(LOGIN_ATTEMPTS, loginAttempts);", "originalCommit": "e6be66aefa1c620c9d1b7f172df97bfb59075ca3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1MTg4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r456551884", "bodyText": "Fixed above review comment", "author": "dhanyak-btc", "createdAt": "2020-07-17T16:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2ODcwOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/617#discussion_r456668709", "bodyText": "Reviewed. Good to merge", "author": "saminguyen", "createdAt": "2020-07-17T20:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3bbba5f105015e4c26117dbc8aa8c0bd5c92e954", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java\nindex d2d5c7f23..3d81e7e6f 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/service/UserServiceImpl.java\n\n@@ -330,9 +330,9 @@ public class UserServiceImpl implements UserService {\n \n     int loginAttempts =\n         userInfo.hasNonNull(LOGIN_ATTEMPTS) ? userInfo.get(LOGIN_ATTEMPTS).intValue() : 0;\n-    loginAttempts = loginAttempts + 1;\n-    userInfo.put(LOGIN_ATTEMPTS, loginAttempts);\n-    if (loginAttempts >= appConfig.getMaxInvalidLoginAttempts()) {\n+    userInfo.put(LOGIN_ATTEMPTS, ++loginAttempts);\n+\n+    if (userInfo.get(LOGIN_ATTEMPTS).intValue() >= appConfig.getMaxInvalidLoginAttempts()) {\n       String tempPassword = PasswordGenerator.generate(12);\n       setPasswordAndPasswordHistoryFields(\n           tempPassword, userInfo, UserAccountStatus.ACCOUNT_LOCKED.getStatus());\n"}}, {"oid": "3bbba5f105015e4c26117dbc8aa8c0bd5c92e954", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3bbba5f105015e4c26117dbc8aa8c0bd5c92e954", "message": "Fixed PR#617 review comments\n\nFixed PR#617 review comments", "committedDate": "2020-07-17T16:36:03Z", "type": "commit"}, {"oid": "2305c2a583f8374522deba3b9daa10b2daa3187d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2305c2a583f8374522deba3b9daa10b2daa3187d", "message": "Merge branch 'oauth_scim_login' into oauth_scim_authentication", "committedDate": "2020-07-19T05:46:21Z", "type": "commit"}, {"oid": "c0e6d693b213baf7d0e6954f285f1dad39b0ecbc", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c0e6d693b213baf7d0e6954f285f1dad39b0ecbc", "message": "Fixed build issue\n\nFixed build issue", "committedDate": "2020-07-19T05:52:05Z", "type": "commit"}, {"oid": "62d59a6992ebf77b50193d14dc325d63c0a39bc5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/62d59a6992ebf77b50193d14dc325d63c0a39bc5", "message": "Merge branch 'develop' into oauth_scim_authentication", "committedDate": "2020-08-02T05:23:40Z", "type": "commit"}, {"oid": "e0be4fecb1fd129cb487cd114072c3bd28131196", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e0be4fecb1fd129cb487cd114072c3bd28131196", "message": "Resolved merge conflicts and compilation issues\n\nResolved merge conflicts and compilation issues", "committedDate": "2020-08-02T05:24:14Z", "type": "commit"}, {"oid": "b0f3ec37d06469edd6acbfcc40c24933b711b21a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b0f3ec37d06469edd6acbfcc40c24933b711b21a", "message": "Merge branch 'develop' into oauth_scim_authentication", "committedDate": "2020-08-04T04:31:39Z", "type": "commit"}]}