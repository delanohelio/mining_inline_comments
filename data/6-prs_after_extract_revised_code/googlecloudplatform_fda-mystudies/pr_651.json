{"pr_number": 651, "pr_title": "OAuth Scim Service - /consent endpoint implementation with integration tests", "pr_createdAt": "2020-07-19T13:09:24Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651", "timeline": [{"oid": "929339099aca9ac86c03cdfb2521e0b03d2da0ce", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/929339099aca9ac86c03cdfb2521e0b03d2da0ce", "message": "/consent endpoint implementation with integration tests\n\n1. /consent endpoint implementation with integration tests\n2. Added @Transaction annotation to methods in service classes\n3. Removed duplicate dependency for commons-lang3\n4. Implemented scheduler task to remove expired temp_reg_id's", "committedDate": "2020-07-19T13:06:34Z", "type": "commit"}, {"oid": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "message": "added activation redirect url with integration tests\n\nadded activation redirect url with integration tests", "committedDate": "2020-07-21T06:08:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTEzNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460155134", "bodyText": "is this to be replaced with login URl?\nif yes, please add appropriate TODO", "author": "zohrehj", "createdAt": "2020-07-24T16:19:41Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -239,7 +256,16 @@ private String redirectToLoginOrSigninPage(\n     // tempRegId for auto signin after signup\n     if (StringUtils.isNotEmpty(tempRegId)) {\n       Optional<UserEntity> optUser = userService.findUserByTempRegId(tempRegId);\n-      return optUser.isPresent() ? \"signin\" : LOGIN;\n+      if (optUser.isPresent()) {\n+        UserEntity user = optUser.get();\n+        logger.exit(\"tempRegId is valid, return to auto signin page\");\n+        addCookie(response, USER_ID, user.getUserId());\n+        return \"signin\";", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MDM4NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461350385", "bodyText": "no, we've two views : login and signin. login view displays email & password fields whereas signin page displays please wait message.", "author": "dhanyak-btc", "createdAt": "2020-07-28T06:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxMTY1Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r465711652", "bodyText": "can we rename the wait page to make the difference more clear?", "author": "zohrehj", "createdAt": "2020-08-05T13:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5ODI4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r466898288", "bodyText": "renamed \"signin\"to \"autoLogin\" and signin.html to autoLogin.html", "author": "dhanyak-btc", "createdAt": "2020-08-07T08:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\nindex 3d82803d7..bbdb50ded 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\n\n@@ -259,12 +258,12 @@ public class LoginController {\n       if (optUser.isPresent()) {\n         UserEntity user = optUser.get();\n         logger.exit(\"tempRegId is valid, return to auto signin page\");\n-        addCookie(response, USER_ID, user.getUserId());\n+        cookieHelper.addCookie(response, USER_ID, user.getUserId());\n         return \"signin\";\n       }\n \n       logger.exit(\"tempRegId is invalid, return to login page\");\n-      deleteCookie(response, TEMP_REG_ID);\n+      cookieHelper.deleteCookie(response, TEMP_REG_ID);\n       return LOGIN;\n     }\n     return LOGIN;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1Nzg1MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460157851", "bodyText": "should be moved to the orgID PR, does not belong here", "author": "zohrehj", "createdAt": "2020-07-24T16:24:57Z", "path": "oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java", "diffHunk": "@@ -71,8 +71,6 @@\n \n   private static final String APP_ID_VALUE = \"MyStudies\";\n \n-  private static final String ORG_ID_VALUE = \"FDA\";", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MTUwMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461351503", "bodyText": "Yes, Org ID removed in PR 650 but forgot to remove this unused field. I noticed this in this PR hence removed.", "author": "dhanyak-btc", "createdAt": "2020-07-28T06:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1Nzg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxMTc5Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r465711796", "bodyText": "so why is it in this PR?", "author": "zohrehj", "createdAt": "2020-08-05T13:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1Nzg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwMzEwOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r466903109", "bodyText": "Removed ORG_ID_VALUE in PR #650", "author": "dhanyak-btc", "createdAt": "2020-08-07T08:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1Nzg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "85ff40b3e201ca87b5befc51755844e797b5d008", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java b/oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java\nindex 1c6e53774..c9b73a82c 100644\n--- a/oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java\n+++ b/oauth-scim-module/oauth-scim-service/src/test/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/UserControllerTest.java\n\n@@ -64,6 +67,8 @@ import org.skyscreamer.jsonassert.JSONCompareMode;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n+import org.springframework.mail.SimpleMailMessage;\n+import org.springframework.mail.javamail.JavaMailSender;\n import org.springframework.test.web.servlet.MvcResult;\n \n @TestMethodOrder(OrderAnnotation.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1OTA5Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460159093", "bodyText": "please move the numerical values to the top of the class and make into constant", "author": "zohrehj", "createdAt": "2020-07-24T16:27:22Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/task/RemoveExpiredTempRegIdScheduledTask.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.task;\n+\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.UserService;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RemoveExpiredTempRegIdScheduledTask {\n+\n+  private XLogger logger =\n+      XLoggerFactory.getXLogger(RemoveExpiredTempRegIdScheduledTask.class.getName());\n+\n+  @Autowired private UserService userService;\n+\n+  // 30min fixed delay and 10s initial delay\n+  @Scheduled(fixedDelay = 1800000, initialDelay = 10000)", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MzA2OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461353069", "bodyText": "Extracted to constants", "author": "dhanyak-btc", "createdAt": "2020-07-28T06:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1OTA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/task/RemoveExpiredTempRegIdScheduledTask.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/task/RemoveExpiredTempRegIdScheduledTask.java\nindex cc896ea0a..5aaba2110 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/task/RemoveExpiredTempRegIdScheduledTask.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/task/RemoveExpiredTempRegIdScheduledTask.java\n\n@@ -10,13 +10,17 @@ import org.springframework.stereotype.Component;\n @Component\n public class RemoveExpiredTempRegIdScheduledTask {\n \n+  private static final int INITIAL_DELAY_MILLI_SEC = 10000;\n+\n+  private static final int FIXED_DELAY_MILLI_SEC = 1800000;\n+\n   private XLogger logger =\n       XLoggerFactory.getXLogger(RemoveExpiredTempRegIdScheduledTask.class.getName());\n \n   @Autowired private UserService userService;\n \n   // 30min fixed delay and 10s initial delay\n-  @Scheduled(fixedDelay = 1800000, initialDelay = 10000)\n+  @Scheduled(fixedDelay = FIXED_DELAY_MILLI_SEC, initialDelay = INITIAL_DELAY_MILLI_SEC)\n   public void removeExpiredTempRegIds() {\n     logger.info(\"begin removeExpiredTempRegIds()\");\n     userService.removeExpiredTempRegIds();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MjU4NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460162585", "bodyText": "please rename to removeTempRegIDForUser", "author": "zohrehj", "createdAt": "2020-07-24T16:34:12Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java", "diffHunk": "@@ -25,4 +29,14 @@\n   public Optional<UserEntity> findByUserId(String userId);\n \n   public Optional<UserEntity> findByTempRegId(String tempRegId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.userId=:userId\")\n+  public void resetTempRegId(@Param(\"userId\") String userId);", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1NDM3MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461354371", "bodyText": "renamed to removeTempRegIDForUser", "author": "dhanyak-btc", "createdAt": "2020-07-28T06:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MjU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java\nindex 53349c8eb..5ae7c134f 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java\n\n@@ -33,10 +33,10 @@ public interface UserRepository extends JpaRepository<UserEntity, Long> {\n   @Transactional\n   @Modifying\n   @Query(\"update UserEntity u set u.tempRegId=null where u.userId=:userId\")\n-  public void resetTempRegId(@Param(\"userId\") String userId);\n+  public void removeTempRegIDForUser(@Param(\"userId\") String userId);\n \n   @Transactional\n   @Modifying\n   @Query(\"update UserEntity u set u.tempRegId=null where u.created < :timestamp\")\n-  public void updateTempRegId(@Param(\"timestamp\") Timestamp timestamp);\n+  public void removeTempRegIdBeforeTime(@Param(\"timestamp\") Timestamp timestamp);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MjgxMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460162810", "bodyText": "please rename to removeTempRegIdBeforeTime or other descriptive name", "author": "zohrehj", "createdAt": "2020-07-24T16:34:34Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java", "diffHunk": "@@ -25,4 +29,14 @@\n   public Optional<UserEntity> findByUserId(String userId);\n \n   public Optional<UserEntity> findByTempRegId(String tempRegId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.userId=:userId\")\n+  public void resetTempRegId(@Param(\"userId\") String userId);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"update UserEntity u set u.tempRegId=null where u.created < :timestamp\")\n+  public void updateTempRegId(@Param(\"timestamp\") Timestamp timestamp);", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1NDQ1OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461354458", "bodyText": "renamed to removeTempRegIdBeforeTime", "author": "dhanyak-btc", "createdAt": "2020-07-28T06:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MjgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java\nindex 53349c8eb..5ae7c134f 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/repository/UserRepository.java\n\n@@ -33,10 +33,10 @@ public interface UserRepository extends JpaRepository<UserEntity, Long> {\n   @Transactional\n   @Modifying\n   @Query(\"update UserEntity u set u.tempRegId=null where u.userId=:userId\")\n-  public void resetTempRegId(@Param(\"userId\") String userId);\n+  public void removeTempRegIDForUser(@Param(\"userId\") String userId);\n \n   @Transactional\n   @Modifying\n   @Query(\"update UserEntity u set u.tempRegId=null where u.created < :timestamp\")\n-  public void updateTempRegId(@Param(\"timestamp\") Timestamp timestamp);\n+  public void removeTempRegIdBeforeTime(@Param(\"timestamp\") Timestamp timestamp);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NTU3MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460165571", "bodyText": "do you still need these when you are just deleting the cookie?", "author": "zohrehj", "createdAt": "2020-07-24T16:39:40Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -285,4 +311,13 @@ public void addCookie(HttpServletResponse response, String cookieName, String co\n     cookie.setPath(\"/\");\n     response.addCookie(cookie);\n   }\n+\n+  public void deleteCookie(HttpServletResponse response, String cookieName) {\n+    Cookie cookie = new Cookie(cookieName, null);\n+    cookie.setMaxAge(0);\n+    cookie.setSecure(appConfig.isSecureCookie());\n+    cookie.setHttpOnly(true);\n+    cookie.setPath(\"/\");", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1NTc2Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461355763", "bodyText": "Yes, I checked accepted answer in SO post Delete cookie from a servlet response", "author": "dhanyak-btc", "createdAt": "2020-07-28T06:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NTU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\nindex 3d82803d7..bbdb50ded 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\n\n@@ -295,29 +294,4 @@ public class LoginController {\n     response.setStatus(HttpStatus.FOUND.value());\n     return \"redirect:\" + redirectUrl;\n   }\n-\n-  public void addCookies(\n-      HttpServletResponse response, MultiValueMap<String, String> params, String... cookieNames) {\n-    for (String cookieName : cookieNames) {\n-      addCookie(response, cookieName, params.getFirst(cookieName));\n-    }\n-  }\n-\n-  public void addCookie(HttpServletResponse response, String cookieName, String cookieValue) {\n-    Cookie cookie = new Cookie(cookieName, cookieValue);\n-    cookie.setMaxAge(600);\n-    cookie.setSecure(appConfig.isSecureCookie());\n-    cookie.setHttpOnly(true);\n-    cookie.setPath(\"/\");\n-    response.addCookie(cookie);\n-  }\n-\n-  public void deleteCookie(HttpServletResponse response, String cookieName) {\n-    Cookie cookie = new Cookie(cookieName, null);\n-    cookie.setMaxAge(0);\n-    cookie.setSecure(appConfig.isSecureCookie());\n-    cookie.setHttpOnly(true);\n-    cookie.setPath(\"/\");\n-    response.addCookie(cookie);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2Nzk3MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460167970", "bodyText": "do we need to add a common prefix to create a more identifiable cookieName?", "author": "zohrehj", "createdAt": "2020-07-24T16:43:54Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java", "diffHunk": "@@ -285,4 +311,13 @@ public void addCookie(HttpServletResponse response, String cookieName, String co\n     cookie.setPath(\"/\");\n     response.addCookie(cookie);\n   }\n+\n+  public void deleteCookie(HttpServletResponse response, String cookieName) {\n+    Cookie cookie = new Cookie(cookieName, null);", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1ODU2MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461358560", "bodyText": "not sure that makes any difference, but prefix can be added. I'm thinking to add mystudies_ prefix. Please suggest a prefix for cookies.", "author": "dhanyak-btc", "createdAt": "2020-07-28T06:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2Nzk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxMjgxMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r465712810", "bodyText": "mystudies_ sounds like a good one for now.", "author": "zohrehj", "createdAt": "2020-08-05T13:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2Nzk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\nindex 3d82803d7..bbdb50ded 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/LoginController.java\n\n@@ -295,29 +294,4 @@ public class LoginController {\n     response.setStatus(HttpStatus.FOUND.value());\n     return \"redirect:\" + redirectUrl;\n   }\n-\n-  public void addCookies(\n-      HttpServletResponse response, MultiValueMap<String, String> params, String... cookieNames) {\n-    for (String cookieName : cookieNames) {\n-      addCookie(response, cookieName, params.getFirst(cookieName));\n-    }\n-  }\n-\n-  public void addCookie(HttpServletResponse response, String cookieName, String cookieValue) {\n-    Cookie cookie = new Cookie(cookieName, cookieValue);\n-    cookie.setMaxAge(600);\n-    cookie.setSecure(appConfig.isSecureCookie());\n-    cookie.setHttpOnly(true);\n-    cookie.setPath(\"/\");\n-    response.addCookie(cookie);\n-  }\n-\n-  public void deleteCookie(HttpServletResponse response, String cookieName) {\n-    Cookie cookie = new Cookie(cookieName, null);\n-    cookie.setMaxAge(0);\n-    cookie.setSecure(appConfig.isSecureCookie());\n-    cookie.setHttpOnly(true);\n-    cookie.setPath(\"/\");\n-    response.addCookie(cookie);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2OTg1Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460169857", "bodyText": "This code is getting duplicated, please move to one place.", "author": "zohrehj", "createdAt": "2020-07-24T16:47:22Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";\n+      }\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private boolean skipConsent(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToCallbackUrl(\n+      HttpServletRequest request, boolean skipConsent, HttpServletResponse response) {\n+    String userId = WebUtils.getCookie(request, USER_ID).getValue();\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String callbackUrl = redirectConfig.getCallbackUrl(devicePlatform);\n+\n+    String redirectUrl =\n+        String.format(\"%s?skip_consent=%b&userId=%s\", callbackUrl, skipConsent, userId);\n+\n+    logger.exit(String.format(\"redirect to %s from /consent\", callbackUrl));\n+    return redirect(response, redirectUrl);\n+  }\n+\n+  private String redirect(HttpServletResponse response, String redirectUrl) {\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  @PostMapping(value = \"/consent\")\n+  public String authenticate(\n+      @CookieValue(name = CONSENT_CHALLENGE) String consentChallenge,\n+      @CookieValue(name = USER_ID) String userId,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+    ResponseEntity<JsonNode> consentResponse = oauthService.consentAccept(paramMap);\n+\n+    if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+      String redirectUrl = getTextValue(consentResponse.getBody(), REDIRECT_TO);\n+      return redirect(response, redirectUrl);\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private String redirectToError(HttpServletRequest request, HttpServletResponse response) {\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String redirectUrl = redirectConfig.getErrorUrl(devicePlatform);\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  public void addCookie(HttpServletResponse response, String cookieName, String cookieValue) {\n+    Cookie cookie = new Cookie(cookieName, cookieValue);\n+    cookie.setMaxAge(600);\n+    cookie.setSecure(appConfig.isSecureCookie());\n+    cookie.setHttpOnly(true);\n+    cookie.setPath(\"/\");\n+    response.addCookie(cookie);", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2MDMxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461360312", "bodyText": "Extracted to CookieHelper class.", "author": "dhanyak-btc", "createdAt": "2020-07-28T06:59:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2OTg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\nindex 5a9d5ab29..2f1e3d706 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\n\n@@ -16,13 +16,11 @@ import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScim\n import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.CookieHelper;\n import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDUyOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460170528", "bodyText": "nit: change to early exit instead.", "author": "zohrehj", "createdAt": "2020-07-24T16:48:40Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjU2MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461366560", "bodyText": "Fixed this review comment by removing required=false from @RequestParam", "author": "dhanyak-btc", "createdAt": "2020-07-28T07:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\nindex 5a9d5ab29..2f1e3d706 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\n\n@@ -16,13 +16,11 @@ import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScim\n import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.CookieHelper;\n import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDk0OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460170948", "bodyText": "is \"consent\" another yet to be added URL? if yes, then please mark it in the code accordingly.", "author": "zohrehj", "createdAt": "2020-07-24T16:49:23Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NzEzNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461367134", "bodyText": "This is a view name, it should be same as the template name i.e. consent.html", "author": "dhanyak-btc", "createdAt": "2020-07-28T07:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\nindex 5a9d5ab29..2f1e3d706 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\n\n@@ -16,13 +16,11 @@ import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScim\n import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.CookieHelper;\n import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MjQ0OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460172448", "bodyText": "why do you need \"redirect:\" prefix?", "author": "zohrehj", "createdAt": "2020-07-24T16:52:02Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.oauthscim.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.JsonUtils.getTextValue;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.CONSENT_CHALLENGE;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.DEVICE_PLATFORM;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.REDIRECT_TO;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.SKIP;\n+import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.CookieValue;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.WebUtils;\n+\n+@Controller\n+public class ConsentController {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserController.class.getName());\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RedirectConfig redirectConfig;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @GetMapping(value = \"/consent\")\n+  public String authorize(\n+      @RequestParam(required = false, name = CONSENT_CHALLENGE) String consentChallenge,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    if (StringUtils.isNotBlank(consentChallenge)) {\n+      addCookie(response, CONSENT_CHALLENGE, consentChallenge);\n+      // show or skip consent page\n+      MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+      paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+      ResponseEntity<JsonNode> consentResponse = oauthService.requestConsent(paramMap);\n+      if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+        JsonNode responseBody = consentResponse.getBody();\n+        return skipConsent(responseBody)\n+            ? redirectToCallbackUrl(request, true, response)\n+            : \"consent\";\n+      }\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private boolean skipConsent(JsonNode responseBody) {\n+    return responseBody.has(SKIP) && responseBody.get(SKIP).booleanValue();\n+  }\n+\n+  private String redirectToCallbackUrl(\n+      HttpServletRequest request, boolean skipConsent, HttpServletResponse response) {\n+    String userId = WebUtils.getCookie(request, USER_ID).getValue();\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String callbackUrl = redirectConfig.getCallbackUrl(devicePlatform);\n+\n+    String redirectUrl =\n+        String.format(\"%s?skip_consent=%b&userId=%s\", callbackUrl, skipConsent, userId);\n+\n+    logger.exit(String.format(\"redirect to %s from /consent\", callbackUrl));\n+    return redirect(response, redirectUrl);\n+  }\n+\n+  private String redirect(HttpServletResponse response, String redirectUrl) {\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;\n+  }\n+\n+  @PostMapping(value = \"/consent\")\n+  public String authenticate(\n+      @CookieValue(name = CONSENT_CHALLENGE) String consentChallenge,\n+      @CookieValue(name = USER_ID) String userId,\n+      HttpServletRequest request,\n+      HttpServletResponse response,\n+      Model model) {\n+    logger.entry(String.format(\"%s request\", request.getRequestURI()));\n+\n+    MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n+    paramMap.add(CONSENT_CHALLENGE, consentChallenge);\n+    ResponseEntity<JsonNode> consentResponse = oauthService.consentAccept(paramMap);\n+\n+    if (consentResponse.getStatusCode().is2xxSuccessful()) {\n+      String redirectUrl = getTextValue(consentResponse.getBody(), REDIRECT_TO);\n+      return redirect(response, redirectUrl);\n+    }\n+\n+    return redirectToError(request, response);\n+  }\n+\n+  private String redirectToError(HttpServletRequest request, HttpServletResponse response) {\n+    String devicePlatform = WebUtils.getCookie(request, DEVICE_PLATFORM).getValue();\n+    String redirectUrl = redirectConfig.getErrorUrl(devicePlatform);\n+    response.setHeader(\"Location\", redirectUrl);\n+    response.setStatus(HttpStatus.FOUND.value());\n+    return \"redirect:\" + redirectUrl;", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NzQ3Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461367473", "bodyText": "to redirect to the external application URLs.", "author": "dhanyak-btc", "createdAt": "2020-07-28T07:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MjQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\nindex 5a9d5ab29..2f1e3d706 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/controller/ConsentController.java\n\n@@ -16,13 +16,11 @@ import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScim\n import static com.google.cloud.healthcare.fdamystudies.oauthscim.common.AuthScimConstants.USER_ID;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.google.cloud.healthcare.fdamystudies.oauthscim.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.oauthscim.common.CookieHelper;\n import com.google.cloud.healthcare.fdamystudies.oauthscim.config.RedirectConfig;\n import com.google.cloud.healthcare.fdamystudies.oauthscim.service.OAuthService;\n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n import org.slf4j.ext.XLogger;\n import org.slf4j.ext.XLoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NDAyMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460174020", "bodyText": "There are a few new app params being added via this PR, this expiry time, app redirection URls etc.\nPlease file a bug and list these values and others (if there are more) to flag that they need to be accounted for in the documentation and deployment.", "author": "zohrehj", "createdAt": "2020-07-24T16:54:56Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppPropertyConfig.java", "diffHunk": "@@ -56,4 +56,7 @@\n \n   @Value(\"${cookie.secure:true}\")\n   private boolean secureCookie;\n+\n+  @Value(\"${tempregid.expiry.minutes:30}\")", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2ODk3Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461368976", "bodyText": "Created an issue #689", "author": "dhanyak-btc", "createdAt": "2020-07-28T07:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NDAyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NTE0NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r460175145", "bodyText": "Please add a db failure test to the controller methods that calls these, and verify that the all actions are getting rolled back properly and correct error response is returned.", "author": "zohrehj", "createdAt": "2020-07-24T16:57:06Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AuditEventServiceImpl.java", "diffHunk": "@@ -134,7 +137,8 @@ private AuditLogEventResponse saveAuditLogEvent(JsonNode requestBody, int httpSt\n     return new AuditLogEventResponse(HttpStatus.ACCEPTED, \"event saved for task scheduler\");\n   }\n \n-  private void updateAuditLogEventStatus(\n+  @Transactional\n+  public void updateAuditLogEventStatus(", "originalCommit": "a8e8a60e7c8a85817e4641aa10acbd9e5d193152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM3NzMwMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r461377300", "bodyText": "Audit Log Fallback option is removed in PR #592 this method will be removed when the branch is updated.", "author": "dhanyak-btc", "createdAt": "2020-07-28T07:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NTE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "85ff40b3e201ca87b5befc51755844e797b5d008", "chunk": "diff --git a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AuditEventServiceImpl.java b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AuditEventServiceImpl.java\nindex e750b19c5..fef03a7c4 100644\n--- a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AuditEventServiceImpl.java\n+++ b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/AuditEventServiceImpl.java\n\n@@ -45,144 +26,15 @@ public class AuditEventServiceImpl extends BaseServiceImpl implements AuditEvent\n \n   private XLogger logger = XLoggerFactory.getXLogger(AuditEventServiceImpl.class.getName());\n \n-  @Value(\"${auditlog.events_endpoint:}\")\n-  private String eventsEndpoint;\n-\n-  @Value(\"${auditlog.app.component.name:}\")\n-  private String appComponentName;\n-\n-  @Value(\"${auditlog.application.version:}\")\n-  private String applicationVersion;\n-\n-  @Autowired AuditEventRepository auditEventRepository;\n-\n-  @Autowired private OAuthService oauthService;\n-\n-  @Override\n-  @Transactional\n-  public AuditLogEventResponse postAuditLogEvent(\n-      AuditLogEvent eventEnum, AuditLogEventRequest aleRequest) {\n-    logger.entry(String.format(\"begin postAuditLogEvent() for %s event\", eventEnum.getEventName()));\n-\n-    // prepare the request for POST method\n-    aleRequest.setEventName(eventEnum.getEventName());\n-    aleRequest.setAlert(eventEnum.isAlert());\n-    aleRequest.setSystemId(eventEnum.getSystemId());\n-    aleRequest.setAccessLevel(eventEnum.getAccessLevel());\n-    aleRequest.setClientId(eventEnum.getClientId());\n-    aleRequest.setClientAccessLevel(eventEnum.getClientAccessLevel());\n-    aleRequest.setResourceServer(eventEnum.getResourceServer());\n-    aleRequest.setEventDetail(eventEnum.getEventDetail());\n-    aleRequest.setOccured(Instant.now().toEpochMilli());\n-\n-    JsonNode requestBody = getObjectMapper().convertValue(aleRequest, JsonNode.class);\n-\n-    AuditLogEventResponse aleResponse = callEventsApi(requestBody);\n-\n-    // save the event in the application database if fallback is true\n-    if (eventEnum.isFallback()\n-        && !HttpStatus.valueOf(aleResponse.getHttpStatusCode()).is2xxSuccessful()) {\n-      aleResponse = saveAuditLogEvent(requestBody, aleResponse.getHttpStatusCode());\n-    }\n-    logger.exit(String.format(\"status=%d\", aleResponse.getHttpStatusCode()));\n-    return aleResponse;\n-  }\n-\n-  private AuditLogEventResponse callEventsApi(JsonNode requestBody) {\n-    HttpHeaders headers = new HttpHeaders();\n-    headers.set(\"Authorization\", \"Bearer \" + oauthService.getAccessToken());\n-\n-    AuditLogEventResponse aleResponse;\n-    int httpStatusCode = 0;\n-    try {\n-      ResponseEntity<JsonNode> response =\n-          exchangeForJson(eventsEndpoint, headers, requestBody, HttpMethod.POST);\n-      httpStatusCode = response.getStatusCodeValue();\n-\n-      if (response.getStatusCode().is2xxSuccessful()) {\n-        aleResponse =\n-            getObjectMapper().convertValue(response.getBody(), AuditLogEventResponse.class);\n-        aleResponse.setHttpStatusCode(response.getStatusCodeValue());\n-        return aleResponse;\n-      } else if (response.getStatusCode().is4xxClientError()) {\n-        logger.error(\n-            String.format(\n-                \"%s failed with status=%d, response=%s\",\n-                eventsEndpoint, httpStatusCode, response.getBody()));\n-      }\n-    } catch (RestClientResponseException e) {\n-      httpStatusCode = e.getRawStatusCode();\n-      logger.error(String.format(\"%s failed with status=%d\", eventsEndpoint, httpStatusCode), e);\n-    } catch (Exception e) {\n-      httpStatusCode = HttpStatus.INTERNAL_SERVER_ERROR.value();\n-      logger.error(String.format(\"%s failed with status=%d\", eventsEndpoint, httpStatusCode), e);\n-    }\n-\n-    String eventName = getTextValue(requestBody, \"eventName\");\n-    return new AuditLogEventResponse(\n-        HttpStatus.valueOf(httpStatusCode),\n-        String.format(\n-            \"%s event not received/processed by the central audit log system.\", eventName));\n-  }\n-\n-  @Transactional\n-  public AuditLogEventResponse saveAuditLogEvent(JsonNode requestBody, int httpStatus) {\n-    AuditEventEntity auditLogEventEntity = new AuditEventEntity();\n-    auditLogEventEntity.setEventRequest(requestBody.toString());\n-    auditLogEventEntity.setRetryCount(0);\n-    auditLogEventEntity.setStatus(\n-        AuditLogEventStatus.NOT_RECORDED_AT_CENTRAL_AUDIT_LOG.getStatus());\n-    auditLogEventEntity.setHttpStatusCode(httpStatus);\n-    auditEventRepository.saveAndFlush(auditLogEventEntity);\n-    return new AuditLogEventResponse(HttpStatus.ACCEPTED, \"event saved for task scheduler\");\n-  }\n-\n-  @Transactional\n-  public void updateAuditLogEventStatus(\n-      String id, AuditLogEventStatus aleStatus, int httpStatusCode) {\n-    Optional<AuditEventEntity> record = auditEventRepository.findById(id);\n-    if (record.isPresent()) {\n-      AuditEventEntity aleEntity = record.get();\n-      aleEntity.setStatus(aleStatus.getStatus());\n-      aleEntity.setHttpStatusCode(httpStatusCode);\n-      aleEntity.setModified(new Timestamp(Instant.now().toEpochMilli()));\n-      aleEntity.setRetryCount(aleEntity.getRetryCount() + 1);\n-      auditEventRepository.saveAndFlush(aleEntity);\n-    }\n-  }\n-\n   @Override\n-  @Transactional\n-  public void resendAuditLogEvents() {\n-    logger.entry(\"begin resendLogAuditEvents() with no args\");\n-    try {\n-      List<AuditEventEntity> events =\n-          auditEventRepository.findByStatus(\n-              AuditLogEventStatus.NOT_RECORDED_AT_CENTRAL_AUDIT_LOG.getStatus());\n-\n-      logger.info(String.format(\"%d events found for scheduler task\", events.size()));\n-\n-      for (AuditEventEntity auditLogEventEntity : events) {\n-\n-        // ignore bad events\n-        if (HttpStatus.BAD_REQUEST.value() == auditLogEventEntity.getHttpStatusCode()) {\n-          continue;\n-        }\n-\n-        AuditLogEventResponse aleResponse =\n-            callEventsApi(toJsonNode(auditLogEventEntity.getEventRequest()));\n-\n-        AuditLogEventStatus aleStatus =\n-            HttpStatus.valueOf(aleResponse.getHttpStatusCode()).is2xxSuccessful()\n-                ? AuditLogEventStatus.RECORDED_AT_CENTRAL_AUDIT_LOG\n-                : AuditLogEventStatus.NOT_RECORDED_AT_CENTRAL_AUDIT_LOG;\n+  public void postAuditLogEvent(AuditLogEventRequest auditRequest) {\n+    logger.entry(\n+        String.format(\"begin postAuditLogEvent() for %s event\", auditRequest.getEventCode()));\n \n-        updateAuditLogEventStatus(\n-            auditLogEventEntity.getId(), aleStatus, aleResponse.getHttpStatusCode());\n-      }\n+    JsonNode requestBody = getObjectMapper().convertValue(auditRequest, JsonNode.class);\n \n-    } catch (Exception e) {\n-      logger.error(\"resendLogAuditEvents() failed with an exception\", e);\n-    }\n+    // TODO (#703) integration with GCP stackdriver. Please remove the requestBody from below logger\n+    // statement during stackdriver integration as it may contain PII information.\n+    logger.exit(String.format(\"audit request=%s\", requestBody));\n   }\n }\n"}}, {"oid": "c3dfa67d7a063233c799032c9a1156aafd268d2c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c3dfa67d7a063233c799032c9a1156aafd268d2c", "message": "Fixed PR 651 review comments\n\nFixed PR 651 review comments", "committedDate": "2020-07-28T07:19:33Z", "type": "commit"}, {"oid": "137c8437b23831099723e7a531e5134c231525f3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/137c8437b23831099723e7a531e5134c231525f3", "message": "Fixed review comment: renameed 'signin' to 'autoLogin'\n\nFixed review comment: renameed 'signin' to 'autoLogin'", "committedDate": "2020-08-07T08:31:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0NzU3Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r467047577", "bodyText": "would be nice to also rename this and  also the filename for consistency.", "author": "zohrehj", "createdAt": "2020-08-07T13:41:25Z", "path": "oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppConfig.java", "diffHunk": "@@ -25,7 +25,7 @@ public void addViewControllers(ViewControllerRegistry registry) {\n         .addViewController(String.format(\"%s/login\", context.getContextPath()))\n         .setViewName(\"login\");\n     registry\n-        .addViewController(String.format(\"%s/signin\", context.getContextPath()))\n+        .addViewController(String.format(\"%s/autoLogin\", context.getContextPath()))\n         .setViewName(\"signin\");", "originalCommit": "137c8437b23831099723e7a531e5134c231525f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MjMwNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/651#discussion_r467072306", "bodyText": "Replaced all \"Signin\" with \"AutoLogin\"  and \"signin\" with \"autoLogin\". Please review.", "author": "dhanyak-btc", "createdAt": "2020-08-07T14:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0NzU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cf8cc4d67e508ee2e313a8347e410e7be541965f", "chunk": "diff --git a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppConfig.java b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppConfig.java\nindex 22a191c3c..430faedb8 100644\n--- a/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppConfig.java\n+++ b/oauth-scim-module/oauth-scim-service/src/main/java/com/google/cloud/healthcare/fdamystudies/oauthscim/config/AppConfig.java\n\n@@ -26,7 +28,7 @@ public class AppConfig extends BaseAppConfig {\n         .setViewName(\"login\");\n     registry\n         .addViewController(String.format(\"%s/autoLogin\", context.getContextPath()))\n-        .setViewName(\"signin\");\n+        .setViewName(AUTO_LOGIN);\n     registry\n         .addViewController(String.format(\"%s/error\", context.getContextPath()))\n         .setViewName(\"error\");\n"}}, {"oid": "cf8cc4d67e508ee2e313a8347e410e7be541965f", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/cf8cc4d67e508ee2e313a8347e410e7be541965f", "message": "Fixed Review Comment: Replaced \"signin\" with \"autoLogin\" for consistency\n\nFixed Review Comment: Replaced \"signin\" with \"autoLogin\" for consistency", "committedDate": "2020-08-07T14:16:53Z", "type": "commit"}, {"oid": "7a4defd4ceed97cca2ee3910161c3f69fc2d9906", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7a4defd4ceed97cca2ee3910161c3f69fc2d9906", "message": "Fixed Review Comment\n\nFixed Review Comment", "committedDate": "2020-08-11T17:35:53Z", "type": "commit"}, {"oid": "3f570f69d19b692d8698eb68cfbada7c28b43277", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3f570f69d19b692d8698eb68cfbada7c28b43277", "message": "Fixed review comment - setting userId to subject field and removed remember and remember_for\n\nFixed review comment - setting userId to subject field and removed remember and remember_for", "committedDate": "2020-08-12T11:42:14Z", "type": "commit"}, {"oid": "85ff40b3e201ca87b5befc51755844e797b5d008", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/85ff40b3e201ca87b5befc51755844e797b5d008", "message": "Merge branch 'develop' into oauth_scim_consent_controller", "committedDate": "2020-08-14T14:13:26Z", "type": "commit"}, {"oid": "671daa872fc8009d8afe76e41d9466ce4f4043cc", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/671daa872fc8009d8afe76e41d9466ce4f4043cc", "message": "Fixed test failures\n\nFixed test failures", "committedDate": "2020-08-14T14:20:56Z", "type": "commit"}, {"oid": "66f2fc14509c184252a408d2dd354533c602daae", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/66f2fc14509c184252a408d2dd354533c602daae", "message": "Merge branch 'develop' into oauth_scim_consent_controller", "committedDate": "2020-08-14T14:32:13Z", "type": "commit"}, {"oid": "a2a7c9eedbe3af618f18181f56b86ae49026d552", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a2a7c9eedbe3af618f18181f56b86ae49026d552", "message": "fixed compilation issues\n\nfixed compilation issues", "committedDate": "2020-08-14T14:38:35Z", "type": "commit"}]}