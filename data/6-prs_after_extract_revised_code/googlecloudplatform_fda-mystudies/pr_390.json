{"pr_number": 390, "pr_title": "code push for unit test case changes for consent-mgmt bundle", "pr_createdAt": "2020-05-13T09:07:43Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390", "timeline": [{"oid": "cec19efdc766dcc986ea8483f4280255fa8c9844", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/cec19efdc766dcc986ea8483f4280255fa8c9844", "message": "code commit for unit test case code changes for consent-mgmt bundle", "committedDate": "2020-05-13T09:05:20Z", "type": "commit"}, {"oid": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "message": "code commit to change wiremock default port to 8001 from 8080", "committedDate": "2020-05-13T15:10:39Z", "type": "commit"}, {"oid": "39854663bfb9aa98b3be40c05f193e6d6c6beb38", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/39854663bfb9aa98b3be40c05f193e6d6c6beb38", "message": "change the property value to mocktest", "committedDate": "2020-05-13T17:19:10Z", "type": "commit"}, {"oid": "a512ad79b7306b42480e007176dd59c72b4c71e9", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a512ad79b7306b42480e007176dd59c72b4c71e9", "message": "reverted back property file propeties to original value", "committedDate": "2020-05-13T17:23:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MTc5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424441790", "bodyText": "commented out code should not be commited.", "author": "nikklassen", "createdAt": "2020-05-13T13:35:02Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockit {\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n+\n+  protected static final String INVALID_BEARER_TOKEN =\n+      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n+\n+  @Autowired private WireMockServer wireMockServer;\n+\n+  @LocalServerPort protected int randomServerPort;\n+\n+  @Autowired private TestRestTemplate restTemplate;\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  private boolean wireMockInitialized = false;\n+\n+  protected TestRestTemplate getRestTemplate() {\n+    return restTemplate;\n+  }\n+\n+  protected WireMockServer getWireMockServer() {\n+    return wireMockServer;\n+  }\n+\n+  protected ObjectNode getObjectNode() {\n+    return objectMapper.createObjectNode();\n+  }\n+\n+  protected ObjectMapper getObjectMapper() {\n+    return objectMapper;\n+  }\n+\n+  protected void setUpHydraMockResponse() {\n+    if (!wireMockInitialized) {\n+      //      getWireMockServer()", "originalCommit": "cec19efdc766dcc986ea8483f4280255fa8c9844", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxODY4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r426418688", "bodyText": "This has been removed.", "author": "abhijeetn-btc", "createdAt": "2020-05-18T07:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MTc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java\nindex 6fdebda05..bb3b5e996 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java\n\n@@ -19,6 +19,9 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.github.tomakehurst.wiremock.WireMockServer;\n import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n \n @ContextConfiguration(initializers = {WireMockInitializer.class})\n @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDk5MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424444991", "bodyText": "not used", "author": "nikklassen", "createdAt": "2020-05-13T13:39:19Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";", "originalCommit": "cec19efdc766dcc986ea8483f4280255fa8c9844", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMzQ1Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425203457", "bodyText": "These are used in the test cases, however I need to make it private as you suggested or move it (if you allow) to some constant class in a util package in src/test folder.", "author": "aswinijena100", "createdAt": "2020-05-14T14:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NjI4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r427376284", "bodyText": "I meant this field specifically. Your editor should show you which fields are not referenced anywhere.", "author": "nikklassen", "createdAt": "2020-05-19T15:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 328a4d3f2..4891258fe 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -79,7 +79,7 @@ public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n   public static final String FIELD_TYPE = \"type\";\n   public static final String FIELD_CONTENT = \"content\";\n \n-  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n \n   @BeforeEach\n   public void setWireMockUrl() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjEzMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424446130", "bodyText": "fields don't need to be public in test classes", "author": "nikklassen", "createdAt": "2020-05-13T13:40:46Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";", "originalCommit": "cec19efdc766dcc986ea8483f4280255fa8c9844", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 328a4d3f2..4891258fe 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -79,7 +79,7 @@ public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n   public static final String FIELD_TYPE = \"type\";\n   public static final String FIELD_CONTENT = \"content\";\n \n-  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n \n   @BeforeEach\n   public void setWireMockUrl() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NzAxNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424447017", "bodyText": "Tests should not rely on a particular ordering. If a test requires setup that another test performs then you should extract that setup to a method and run it for both tests.", "author": "nikklassen", "createdAt": "2020-05-13T13:42:00Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)", "originalCommit": "cec19efdc766dcc986ea8483f4280255fa8c9844", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 328a4d3f2..4891258fe 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -79,7 +79,7 @@ public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n   public static final String FIELD_TYPE = \"type\";\n   public static final String FIELD_CONTENT = \"content\";\n \n-  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n \n   @BeforeEach\n   public void setWireMockUrl() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MDkxOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424450919", "bodyText": "prefer lambda syntax, here and elsewhere", "author": "nikklassen", "createdAt": "2020-05-13T13:47:05Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {", "originalCommit": "cec19efdc766dcc986ea8483f4280255fa8c9844", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 328a4d3f2..4891258fe 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -79,7 +79,7 @@ public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n   public static final String FIELD_TYPE = \"type\";\n   public static final String FIELD_CONTENT = \"content\";\n \n-  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n \n   @BeforeEach\n   public void setWireMockUrl() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NTg4OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424455889", "bodyText": "should we be checking that this fails before the consent status is updated?", "author": "nikklassen", "createdAt": "2020-05-13T13:53:34Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());", "originalCommit": "cec19efdc766dcc986ea8483f4280255fa8c9844", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzQ4Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r426537482", "bodyText": "Nik,\nI couldn't understand your question? Could you please explain a little bit.", "author": "abhijeetn-btc", "createdAt": "2020-05-18T10:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NTg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 328a4d3f2..4891258fe 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -79,7 +79,7 @@ public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n   public static final String FIELD_TYPE = \"type\";\n   public static final String FIELD_CONTENT = \"content\";\n \n-  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n \n   @BeforeEach\n   public void setWireMockUrl() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1Njk3Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424456973", "bodyText": "why does this matter?", "author": "nikklassen", "createdAt": "2020-05-13T13:55:00Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference", "originalCommit": "cec19efdc766dcc986ea8483f4280255fa8c9844", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4MjUxNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428682515", "bodyText": "This one was also removed and bug was fixed.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1Njk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 328a4d3f2..4891258fe 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -79,7 +79,7 @@ public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n   public static final String FIELD_TYPE = \"type\";\n   public static final String FIELD_CONTENT = \"content\";\n \n-  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n \n   @BeforeEach\n   public void setWireMockUrl() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NzYyOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424457628", "bodyText": "This code is duplicated across several tests. Use a helper function instead.", "author": "nikklassen", "createdAt": "2020-05-13T13:55:54Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(", "originalCommit": "cec19efdc766dcc986ea8483f4280255fa8c9844", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4MzE2Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428683162", "bodyText": "This has been moved to a helper method as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:22:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NzYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 328a4d3f2..4891258fe 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -79,7 +79,7 @@ public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n   public static final String FIELD_TYPE = \"type\";\n   public static final String FIELD_CONTENT = \"content\";\n \n-  public static final String WIREMOCK_URL = \"http://localhost:8080/AuthServer/tokenAuthentication\";\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n \n   @BeforeEach\n   public void setWireMockUrl() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTc3Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424635772", "bodyText": "Please remove sample code", "author": "nikklassen", "createdAt": "2020-05-13T18:12:24Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4MzY0Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428683647", "bodyText": "This has been removed", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:23:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTg3Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424635872", "bodyText": "not used", "author": "nikklassen", "createdAt": "2020-05-13T18:12:35Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NTEzOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428685139", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTk4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424635984", "bodyText": "not used", "author": "nikklassen", "createdAt": "2020-05-13T18:12:43Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NTA2Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428685066", "bodyText": "This was updated as suggested and removed now.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjM3NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424636375", "bodyText": "Does this have significance? If not just use something that is helpful if printed out, like \"userId\"", "author": "nikklassen", "createdAt": "2020-05-13T18:13:24Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NTUxNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428685517", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MDQ1OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424660459", "bodyText": "This isn't necessary since the cast on the next line will fail if you're wrong. Please remove asserts on the class in this file", "author": "nikklassen", "createdAt": "2020-05-13T18:53:41Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4Nzg0NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428687845", "bodyText": "If the assert fails at class check, the flow will not go to the next line and cast will not happen.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MDQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjAyMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424666020", "bodyText": "This is mostly a suggestion (I'll bring it up in our technical catch up) but you can use Lombok's @EqualsAndHashCode annotation to create equals methods for beans. If we do that it means we can compare beans directly with assertEquals, which would make these asserts cleaner. i.e. if you add @EqualsAndHashCode to ConsentStudyResponseBean you could do\nConsentStudyResponseBean expected = new ConsentStudyResponseBean();\nexpected.setMessage(\"success\")\nassertEquals(expected, responseEntity);", "author": "nikklassen", "createdAt": "2020-05-13T19:03:22Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4MzMxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429183312", "bodyText": "This has been updated as requested", "author": "abhijeetn-btc", "createdAt": "2020-05-22T11:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjIxMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424666210", "bodyText": "assertNull", "author": "nikklassen", "createdAt": "2020-05-13T19:03:45Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NzkxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428687912", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzY4OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424673689", "bodyText": "Don't overdo it on asserting that functions weren't called. Verifying too many mock functions just makes tests brittle. Only include \"not called\" if it's very important and you can't check it any other way.", "author": "nikklassen", "createdAt": "2020-05-13T19:17:24Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4ODgxMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428688810", "bodyText": "This test class is removed now.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NDEyMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424674121", "bodyText": "Why not add a constructor that takes studyInfoId?", "author": "nikklassen", "createdAt": "2020-05-13T19:18:09Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4ODg4Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428688882", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NDEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NDU1NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424674555", "bodyText": "Consider adding more constructors to your beans or adding @Builder.", "author": "nikklassen", "createdAt": "2020-05-13T19:19:01Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4OTA2MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428689061", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NDU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NjQ3MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424676471", "bodyText": "Consider a static import for Mockito functions", "author": "nikklassen", "createdAt": "2020-05-13T19:22:30Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setVersion(\"\");\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4OTE0Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428689142", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NjQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODAxMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424678013", "bodyText": "Unless these values need to pass validation just use short strings like \"access token\"", "author": "nikklassen", "createdAt": "2020-05-13T19:25:25Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+  @Mock private RestTemplate restTemplate;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @Mock private CommonDao commonDao;\n+\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"kJSdYD2e\";\n+    Integer userDetailsId = 2;\n+    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n+\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    Mockito.when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4OTI0OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428689249", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\nindex b74309f22..bb7f22e0e 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n\n@@ -3,7 +3,9 @@ package com.google.cloud.healthcare.fdamystudies.service.tests;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import org.hibernate.HibernateException;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.runner.RunWith;\n import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MDk3MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424680970", "bodyText": "Why not just example.com?", "author": "nikklassen", "createdAt": "2020-05-13T19:30:47Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+  @Mock private RestTemplate restTemplate;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @Mock private CommonDao commonDao;\n+\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"kJSdYD2e\";\n+    Integer userDetailsId = 2;\n+    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n+\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    Mockito.when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n+    String clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n+    Mockito.when(appConfig.getAuthServerAccessTokenValidationUrl())\n+        .thenReturn(\"http://someurl-not-to-be-hit.com\");", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4OTI5Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428689293", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MDk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\nindex b74309f22..bb7f22e0e 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n\n@@ -3,7 +3,9 @@ package com.google.cloud.healthcare.fdamystudies.service.tests;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import org.hibernate.HibernateException;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.runner.RunWith;\n import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTIxMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424681211", "bodyText": "Not used", "author": "nikklassen", "createdAt": "2020-05-13T19:31:17Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5MDg5Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428690897", "bodyText": "We have written test cases for getStudyDetails as cloudStorageService was being used in getStudyDetails in UserConsentManagementServiceImpl.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjI5Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424682292", "bodyText": "Integer studyId = 1, here and elsewhere", "author": "nikklassen", "createdAt": "2020-05-13T19:33:25Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5MTAwOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428691009", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzQ3Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424683472", "bodyText": "You've already checked that result is the same object as bo. These assertions are redundent.", "author": "nikklassen", "createdAt": "2020-05-13T19:35:38Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5MTYwOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428691609", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTEzOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424685138", "bodyText": "remove", "author": "nikklassen", "createdAt": "2020-05-13T19:38:37Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5MTY5NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428691695", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTMxOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424689318", "bodyText": "This appears to be called twice and fails the second time.", "author": "nikklassen", "createdAt": "2020-05-13T19:46:35Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/config/WireMockInitializer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.config;\n+\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.event.ContextClosedEvent;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+\n+public class WireMockInitializer\n+    implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+  @Override\n+  public void initialize(ConfigurableApplicationContext configurableApplicationContext) {\n+    WireMockServer wireMockServer = new WireMockServer(new WireMockConfiguration().port(8001));", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NTI1Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428695257", "bodyText": "I couldn't find from where it was getting called twice. However, the exception has gone in the build after spring configuration related changes were done.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/config/WireMockInitializer.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/config/WireMockInitializer.java\nindex 0cc92a13a..ddcfdae06 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/config/WireMockInitializer.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/config/WireMockInitializer.java\n\n@@ -11,26 +11,24 @@ package com.google.cloud.healthcare.fdamystudies.config;\n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.event.ContextClosedEvent;\n+\n import com.github.tomakehurst.wiremock.WireMockServer;\n import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n \n-public class WireMockInitializer\n-    implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n-\n-  @Override\n-  public void initialize(ConfigurableApplicationContext configurableApplicationContext) {\n-    WireMockServer wireMockServer = new WireMockServer(new WireMockConfiguration().port(8001));\n-    wireMockServer.start();\n-\n-    configurableApplicationContext\n-        .getBeanFactory()\n-        .registerSingleton(\"wireMockServer\", wireMockServer);\n-\n-    configurableApplicationContext.addApplicationListener(\n-        applicationEvent -> {\n-          if (applicationEvent instanceof ContextClosedEvent) {\n-            wireMockServer.stop();\n-          }\n-        });\n-  }\n+public class WireMockInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+\t@Override\n+\tpublic void initialize(ConfigurableApplicationContext configurableApplicationContext) {\n+\t\tWireMockServer wireMockServer = new WireMockServer(new WireMockConfiguration().port(8001));\n+\t\twireMockServer.start();\n+\n+\t\tconfigurableApplicationContext.getBeanFactory().registerSingleton(\"wireMockServer\", wireMockServer);\n+\n+\t\tconfigurableApplicationContext.addApplicationListener(applicationEvent -> {\n+\t\t\tif (applicationEvent instanceof ContextClosedEvent) {\n+\t\t\t\twireMockServer.stop();\n+\t\t\t}\n+\n+\t\t});\n+\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTc3Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424689776", "bodyText": "You don't need captors here, you can just pass studyId to the verify call.", "author": "nikklassen", "createdAt": "2020-05-13T19:47:31Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5MjIzNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428692237", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDE1Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424690153", "bodyText": "Verify is redundant if you use participantStudiesList in when", "author": "nikklassen", "createdAt": "2020-05-13T19:48:11Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NTQyMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428695423", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDM1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424690350", "bodyText": "Don't need these", "author": "nikklassen", "createdAt": "2020-05-13T19:48:32Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudiesExceptionCase() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenThrow(HibernateException.class);\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyConsent() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+\n+    StudyConsentBO bo = new StudyConsentBO();\n+    bo.setStudyInfoId(studyId);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NTU5MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428695591", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDQ2Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424690467", "bodyText": "Same here", "author": "nikklassen", "createdAt": "2020-05-13T19:48:46Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudiesExceptionCase() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenThrow(HibernateException.class);\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyConsent() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+\n+    StudyConsentBO bo = new StudyConsentBO();\n+    bo.setStudyInfoId(studyId);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> consentVersionPassed = ArgumentCaptor.forClass(String.class);\n+\n+    Mockito.when(userConsentManagementDao.getStudyConsent(userId, studyId, consentVersion))\n+        .thenReturn(bo);\n+    StudyConsentBO result =\n+        userConsentManagementService.getStudyConsent(userId, studyId, consentVersion);\n+    Mockito.verify(userConsentManagementDao)\n+        .getStudyConsent(\n+            userIdPassed.capture(), studyIdPassed.capture(), consentVersionPassed.capture());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(consentVersion, consentVersionPassed.getValue());\n+    assertEquals(studyId, result.getStudyInfoId());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentExceptionCase() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NTc4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428695788", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MjE2OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424692169", "bodyText": "Looks like you are missing tests for getStudyConsentDetails", "author": "nikklassen", "createdAt": "2020-05-13T19:51:55Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NjUwNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428696504", "bodyText": "This was updated as suggested, but removed now as we have integration test.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MjE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyOTQwNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428729407", "bodyText": "In general, integration tests do not remove the need for unit tests of services. However, in this case is it probably fine.", "author": "nikklassen", "createdAt": "2020-05-21T15:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MjE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTQ5OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424695498", "bodyText": "Next line makes this redundant", "author": "nikklassen", "createdAt": "2020-05-13T19:57:58Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    Mockito.verify(userConsentManagementDao)\n+        .getParticipantStudies(studyIdPassed.capture(), userIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(bo, result);\n+    assertEquals(bo.getStudyInfo().getId(), result.getStudyInfo().getId());\n+    assertEquals(bo.getUserDetails().getUserId(), result.getUserDetails().getUserId());\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = Integer.valueOf(1);\n+    String userId = \"sdjUyd\";\n+    Mockito.when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    ;\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudiesExceptionCase() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    ArgumentCaptor<List<ParticipantStudiesBO>> participantStudiesBOListPassed =\n+        ArgumentCaptor.forClass(List.class);\n+    Mockito.when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenThrow(HibernateException.class);\n+    String result = userConsentManagementService.saveParticipantStudies(participantStudiesList);\n+    Mockito.verify(userConsentManagementDao)\n+        .saveParticipantStudies(participantStudiesBOListPassed.capture());\n+\n+    assertNotNull(participantStudiesBOListPassed.getValue());\n+    assertEquals(1, participantStudiesBOListPassed.getValue().size());\n+    assertEquals(participantStudiesBO, participantStudiesBOListPassed.getValue().get(0));\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyConsent() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+\n+    StudyConsentBO bo = new StudyConsentBO();\n+    bo.setStudyInfoId(studyId);\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> consentVersionPassed = ArgumentCaptor.forClass(String.class);\n+\n+    Mockito.when(userConsentManagementDao.getStudyConsent(userId, studyId, consentVersion))\n+        .thenReturn(bo);\n+    StudyConsentBO result =\n+        userConsentManagementService.getStudyConsent(userId, studyId, consentVersion);\n+    Mockito.verify(userConsentManagementDao)\n+        .getStudyConsent(\n+            userIdPassed.capture(), studyIdPassed.capture(), consentVersionPassed.capture());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(consentVersion, consentVersionPassed.getValue());\n+    assertEquals(studyId, result.getStudyInfoId());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentExceptionCase() {\n+    String userId = \"hdUydjsII\";\n+    Integer studyId = Integer.valueOf(2);\n+    String consentVersion = \"1.0\";\n+    ArgumentCaptor<String> userIdPassed = ArgumentCaptor.forClass(String.class);\n+    ArgumentCaptor<Integer> studyIdPassed = ArgumentCaptor.forClass(Integer.class);\n+    ArgumentCaptor<String> consentVersionPassed = ArgumentCaptor.forClass(String.class);\n+\n+    Mockito.when(userConsentManagementDao.getStudyConsent(userId, studyId, consentVersion))\n+        .thenThrow(HibernateException.class);\n+    StudyConsentBO result =\n+        userConsentManagementService.getStudyConsent(userId, studyId, consentVersion);\n+    Mockito.verify(userConsentManagementDao)\n+        .getStudyConsent(\n+            userIdPassed.capture(), studyIdPassed.capture(), consentVersionPassed.capture());\n+    assertEquals(userId, userIdPassed.getValue());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(consentVersion, consentVersionPassed.getValue());\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testSaveStudyConsent() {\n+    StudyConsentBO studyConsentBO = new StudyConsentBO();\n+    Mockito.when(userConsentManagementDao.saveStudyConsent(studyConsentBO)).thenReturn(\"SUCCESS\");\n+\n+    String result = userConsentManagementService.saveStudyConsent(studyConsentBO);\n+    assertEquals(\"SUCCESS\", result);\n+  }\n+\n+  @Test\n+  public void testSaveStudyConsentExceptionCase() {\n+    StudyConsentBO studyConsentBO = new StudyConsentBO();\n+    Mockito.when(userConsentManagementDao.saveStudyConsent(studyConsentBO))\n+        .thenThrow(HibernateException.class);\n+\n+    String result = userConsentManagementService.saveStudyConsent(studyConsentBO);\n+    assertEquals(\"FAILURE\", result);\n+  }\n+\n+  @Test\n+  public void testGetStudyInfoId() {\n+    String studyId = \"testStudyId\";\n+    StudyInfoBean bean = new StudyInfoBean();\n+    bean.setStudyInfoId(2);\n+\n+    Mockito.when(userConsentManagementDao.getStudyInfoId(studyId)).thenReturn(bean);\n+    ArgumentCaptor<String> studyIdPassed = ArgumentCaptor.forClass(String.class);\n+    StudyInfoBean result = userConsentManagementService.getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementDao).getStudyInfoId(studyIdPassed.capture());\n+    assertEquals(studyId, studyIdPassed.getValue());\n+    assertEquals(bean.getStudyInfoId(), result.getStudyInfoId());", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NjY2NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428696664", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMTM2NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429931364", "bodyText": "I don't see any change.", "author": "nikklassen", "createdAt": "2020-05-25T13:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex 18cc75605..a7b8bb7cf 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -1,18 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n import java.util.LinkedList;\n import java.util.List;\n import org.hibernate.HibernateException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTkzOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424695939", "bodyText": "How do you know this was caused by the exception you expected?", "author": "nikklassen", "createdAt": "2020-05-13T19:58:45Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+  @Mock private RestTemplate restTemplate;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @Mock private CommonDao commonDao;\n+\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"kJSdYD2e\";\n+    Integer userDetailsId = 2;\n+    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n+\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    Mockito.when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n+    String clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n+    Mockito.when(appConfig.getAuthServerAccessTokenValidationUrl())\n+        .thenReturn(\"http://someurl-not-to-be-hit.com\");\n+    Mockito.when(\n+            restTemplate.exchange(\n+                ArgumentMatchers.eq(\"http://someurl-not-to-be-hit.com\"),\n+                ArgumentMatchers.eq(HttpMethod.POST),\n+                ArgumentMatchers.any(HttpEntity.class),\n+                ArgumentMatchers.eq(String.class)))\n+        .thenReturn(new ResponseEntity<String>(\"1\", HttpStatus.OK));\n+\n+    Integer result = commonServiceImpl.validateAccessToken(userId, accessToken, clientToken);\n+    assertEquals(Integer.valueOf(1), result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessTokenExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n+    String clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n+    Mockito.when(appConfig.getAuthServerAccessTokenValidationUrl())\n+        .thenReturn(\"http://someurl-not-to-be-hit.com\");\n+    Mockito.when(\n+            restTemplate.exchange(\n+                ArgumentMatchers.eq(\"http://someurl-not-to-be-hit.com\"),\n+                ArgumentMatchers.eq(HttpMethod.POST),\n+                ArgumentMatchers.any(HttpEntity.class),\n+                ArgumentMatchers.eq(String.class)))\n+        .thenThrow(RestClientException.class);\n+\n+    Integer result = commonServiceImpl.validateAccessToken(userId, accessToken, clientToken);\n+    assertNull(result);", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NzU0NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428697545", "bodyText": "In case of exception, we are sure that null values will be returned. This test has been removed as we have integration test.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\nindex b74309f22..bb7f22e0e 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n\n@@ -3,7 +3,9 @@ package com.google.cloud.healthcare.fdamystudies.service.tests;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import org.hibernate.HibernateException;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.runner.RunWith;\n import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NjYyNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424696624", "bodyText": "Why do we include the code in the request body?", "author": "nikklassen", "createdAt": "2020-05-13T19:59:55Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4MzQzNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429183437", "bodyText": "We are keeping different internal application error codes like 76, 77 etc. for different error scenario. 200 is probably added along with them.", "author": "abhijeetn-btc", "createdAt": "2020-05-22T11:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NjYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NDI4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424574284", "bodyText": "please fix", "author": "zohrehj", "createdAt": "2020-05-13T16:31:55Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockit {\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n+\n+  protected static final String INVALID_BEARER_TOKEN =\n+      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n+\n+  @Autowired private WireMockServer wireMockServer;\n+\n+  @LocalServerPort protected int randomServerPort;\n+\n+  @Autowired private TestRestTemplate restTemplate;\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  private boolean wireMockInitialized = false;\n+\n+  protected TestRestTemplate getRestTemplate() {\n+    return restTemplate;\n+  }\n+\n+  protected WireMockServer getWireMockServer() {\n+    return wireMockServer;\n+  }\n+\n+  protected ObjectNode getObjectNode() {\n+    return objectMapper.createObjectNode();\n+  }\n+\n+  protected ObjectMapper getObjectMapper() {\n+    return objectMapper;\n+  }\n+\n+  protected void setUpHydraMockResponse() {\n+    if (!wireMockInitialized) {\n+      //      getWireMockServer()\n+      //          .stubFor(\n+      //              get(urlEqualTo(\"http://localhost:8080/AuthServer/tokenAuthentication\"))\n+      //\n+      // .willReturn(aResponse().withBodyFile(\"hydra/auth-server-token-validation.json\")));", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5ODQ5Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428698492", "bodyText": "This has been removed as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NDI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java\nindex 6fdebda05..bb3b5e996 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockit.java\n\n@@ -19,6 +19,9 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.github.tomakehurst.wiremock.WireMockServer;\n import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n \n @ContextConfiguration(initializers = {WireMockInitializer.class})\n @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzIwOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424587208", "bodyText": "please format this code and fix the indentation, it looks incorrect in some places", "author": "zohrehj", "createdAt": "2020-05-13T16:52:15Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyMzQwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428723405", "bodyText": "We are already using a specific code format tool that formats the code.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4OTY4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424589684", "bodyText": "let's not set specific order in place.\nI would like to reduce possibilities of tests developing dependencies overtime.", "author": "zohrehj", "createdAt": "2020-05-13T16:56:09Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MjkwMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424592901", "bodyText": "line break", "author": "zohrehj", "createdAt": "2020-05-13T17:01:05Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5OTIzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428699231", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MjkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTQwMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424601402", "bodyText": "@beforeeach or @before?", "author": "zohrehj", "createdAt": "2020-05-13T17:15:27Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTkyMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424601923", "bodyText": "Maybe WIREMOCK_URL and/or setWireMockUrl should be provided by the mock util?", "author": "zohrehj", "createdAt": "2020-05-13T17:16:24Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwMDM1NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428700355", "bodyText": "This is now taken from properties file.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODY4Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424628687", "bodyText": "If you are mocking this URL, is there really a need to setup a wireMock server?", "author": "zohrehj", "createdAt": "2020-05-13T18:00:30Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+  @Mock private RestTemplate restTemplate;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @Mock private CommonDao commonDao;\n+\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"kJSdYD2e\";\n+    Integer userDetailsId = 2;\n+    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n+\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"kJSdYD2e\";\n+    Mockito.when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertNull(result);\n+  }\n+\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"kJSdYD2e\";\n+    String accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n+    String clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n+    Mockito.when(appConfig.getAuthServerAccessTokenValidationUrl())", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwMTU5NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428701595", "bodyText": "In this particular test wire mock is not used. We are using wire mock in integration test only.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\nindex b74309f22..bb7f22e0e 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n\n@@ -3,7 +3,9 @@ package com.google.cloud.healthcare.fdamystudies.service.tests;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import org.hibernate.HibernateException;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.runner.RunWith;\n import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MjE5OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424642199", "bodyText": "JsonNode body = responseEntity.getBody();\nassertEquals(ConsentStudyResponseBean.class, body.getClass());\nassertEquals(\"success\", ((ConsentStudyResponseBean) body).getMessage());\n\n?", "author": "zohrehj", "createdAt": "2020-05-13T18:23:06Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwMjg1NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428702855", "bodyText": "This test class is removed as we have integration test.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MjE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0OTQwNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424649406", "bodyText": "Is defining an order required? if not, let's keep the default behavior.", "author": "zohrehj", "createdAt": "2020-05-13T18:34:59Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwMjM0MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428702341", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0OTQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1OTE0OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424659148", "bodyText": "this test is very dependent on the content of the implementation, checking the spacing would even break the test. It's better to assert more generic attributes, such as response status code in this case.", "author": "zohrehj", "createdAt": "2020-05-13T18:51:28Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwMzMxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428703312", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1OTE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MjE1Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424662156", "bodyText": "If the test can assert that response == success test, then we would not need to update the test when changing the language of the resonse.", "author": "zohrehj", "createdAt": "2020-05-13T18:56:28Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwMzYzMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428703632", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MjE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MjYzMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424662633", "bodyText": "previous check should be sufficient, no need to verify it manually.", "author": "zohrehj", "createdAt": "2020-05-13T18:57:18Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwMzk3Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428703976", "bodyText": "This has been removed.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MjYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2Mzk0Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424663947", "bodyText": "can these asserts be moved into a helper method, since they seem to be repeated on multiple tests?", "author": "zohrehj", "createdAt": "2020-05-13T18:59:40Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNDM1Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428704352", "bodyText": "This has been moved to a helper method as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2Mzk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDU4OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424664589", "bodyText": "move to a function? it can get content bytes as input", "author": "zohrehj", "createdAt": "2020-05-13T19:00:44Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNTMyOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428705329", "bodyText": "This has been moved to a helper method as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NzA1OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424667058", "bodyText": "seems to be repeating on all tests, please move to beforeeach or helper method", "author": "zohrehj", "createdAt": "2020-05-13T19:05:15Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get content without mentioning version\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(5)\n+  public void updateEligibilityConsentStatusInvalidInput() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+    headers.add(\"Content-Type\", \"application/json\");\n+    headers.add(\"Accept\", \"application/json\");\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+\n+    // without consent request\n+    ObjectNode consentRequest = null;\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent\n+    consentRequest = new ObjectMapper().createObjectNode();\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent version\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent pdf content\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent status\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without studyId\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consentRequest.put(FIELD_STUDY_ID, \"\");\n+\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without userId header\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    headers.put(USER_ID_HEADER, Collections.singletonList(\"\"));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.UNAUTHORIZED, responseEntity.getStatusCode());\n+\n+    // without a matching entry for userId and studyId in participantStudies\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    headers.put(USER_ID_HEADER, Collections.singletonList(\"BhGsYUyd\"));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // with empty version\n+    consent.put(FIELD_VERSION, \"\");\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    headers.put(USER_ID_HEADER, Collections.singletonList(VALID_USER_ID));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+  }\n+\n+  @Test\n+  @Order(6)\n+  public void testUpdateEligibilityConsentStatusEmptyPdf() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, \"\"); // empty pdf\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Verify that cloud storage wasn't called\n+    Mockito.verify(cloudStorageService, times(0))\n+        .saveFile(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+\n+    consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_3);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, \"\"); // empty pdf\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+    // Verify that cloud storage wasn't called\n+    Mockito.verify(cloudStorageService, times(0))\n+        .saveFile(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusSaveFailure() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);", "originalCommit": "7ad0b5e9e185c9337beec619cdd5a0a373d0d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNTYyMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428705623", "bodyText": "This has been moved to a helper method.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NzA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MTMyMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424671321", "bodyText": "not needed.", "author": "zohrehj", "createdAt": "2020-05-13T19:13:04Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNjA4OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428706089", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MTMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjAwMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424672002", "bodyText": "why not just use VERSION_1_0 here?\ndoesn't look like this queryParamVersion variable is used anywhere else", "author": "zohrehj", "createdAt": "2020-05-13T19:14:18Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNjM2NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428706365", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjI3NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424672274", "bodyText": "same here, no need to define a new variable for version for a single use.", "author": "zohrehj", "createdAt": "2020-05-13T19:14:50Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNjYwNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428706604", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjUyMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424672520", "bodyText": "and here, queryParamVersion doesn't look needed", "author": "zohrehj", "createdAt": "2020-05-13T19:15:14Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNjkzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428706931", "bodyText": "This has been removed.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MjUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTIwNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424681204", "bodyText": "let's keep things consistent, please move content type and accept header keys and values into constants.", "author": "zohrehj", "createdAt": "2020-05-13T19:31:15Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get content without mentioning version\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(5)\n+  public void updateEligibilityConsentStatusInvalidInput() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+    headers.add(\"Content-Type\", \"application/json\");", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNzM3MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428707371", "bodyText": "This has been updated as suggested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T14:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4Mjk0NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424682944", "bodyText": "not needed, since they are already set on the existing consent object", "author": "zohrehj", "createdAt": "2020-05-13T19:34:36Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get content without mentioning version\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(5)\n+  public void updateEligibilityConsentStatusInvalidInput() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+    headers.add(\"Content-Type\", \"application/json\");\n+    headers.add(\"Accept\", \"application/json\");\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+\n+    // without consent request\n+    ObjectNode consentRequest = null;\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent\n+    consentRequest = new ObjectMapper().createObjectNode();\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent version\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent pdf content\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without consent status\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    requestEntity = new HttpEntity<>(consentRequest, headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n+\n+    // without studyId\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_PDF, Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes()));\n+    consent.put(FIELD_STATUS, \"complete\");", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjMwMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424686301", "bodyText": "Is it possible to write this as a parameterized test instead?\ninput would be a consent object and expected output would be the statusCode.\nsee https://github.com/junit-team/junit4/wiki/Parameterized-tests", "author": "zohrehj", "createdAt": "2020-05-13T19:40:44Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,638 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.times;\n+import java.io.OutputStream;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ActiveProfiles;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+\n+@ActiveProfiles(\"mockit\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+\n+  public static final String ACCESS_TOKEN_VALUE = UUID.randomUUID().toString();\n+  public static final String CLIENT_TOKEN_VALUE = UUID.randomUUID().toString();\n+\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String WIREMOCK_URL = \"http://localhost:8001/AuthServer/tokenAuthentication\";\n+\n+  @BeforeEach\n+  public void setWireMockUrl() {\n+    appConfig.setAuthServerAccessTokenValidationUrl(WIREMOCK_URL);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  @Order(1)\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+\n+    String response = getRestTemplate().getForObject(\"/ping\", String.class);\n+    assertEquals(\"Mystudies UserRegistration Webservice Started !!!\", response);\n+  }\n+\n+  @Test\n+  @Order(2)\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=1.0\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(3)\n+  public void updateEligibilityConsentStatusUpdateExisting() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Invoke http api endpoint to Update study consent pdf content value\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_0);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_0;\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(4)\n+  public void updateEligibilityConsentStatusAddNewVersion() throws InterruptedException {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CLIENT_TOKEN_HEADER, CLIENT_TOKEN_VALUE);\n+    headers.add(ACCESS_TOKEN_HEADER, ACCESS_TOKEN_VALUE);\n+    headers.add(USER_ID_HEADER, VALID_USER_ID);\n+\n+    // Add sleep so that different consents are saved with some time difference\n+    TimeUnit.SECONDS.sleep(1);\n+\n+    // Invoke http api endpoint to Add new study consent pdf version\n+    // Set mockito expectations for saving file into cloudStorageService\n+    Mockito.when(\n+            cloudStorageService.saveFile(\n+                Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n+        .thenAnswer(\n+            new Answer<String>() {\n+\n+              @Override\n+              public String answer(InvocationOnMock invocation) throws Throwable {\n+                String fileName = invocation.getArgument(0);\n+                String underDirectory = invocation.getArgument(2);\n+                return underDirectory + \"/\" + fileName;\n+              }\n+            });\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();\n+    consent.put(FIELD_VERSION, VERSION_1_2);\n+    consent.put(FIELD_STATUS, \"complete\");\n+    consent.put(FIELD_PDF, pdfValue);\n+    consentRequest.put(FIELD_CONSENT, consent);\n+\n+    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n+    ResponseEntity<JsonNode> responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    JsonNode responseBody = responseEntity.getBody();\n+    assertEquals(200, responseBody.get(\"code\").intValue());\n+    assertEquals(\n+        \"Eligibility consent has been updated successfully\",\n+        responseBody.get(FIELD_MESSAGE).asText());\n+\n+    // Invoke http api endpoint to get consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    String queryParamVersion = VERSION_1_2;\n+\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get old consent and verify pdf content\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_0_UPDATED.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    requestEntity = new HttpEntity<>(headers);\n+    queryParamVersion = VERSION_1_0;\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_0_UPDATED.getBytes());\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + queryParamVersion,\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_0, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+\n+    // Invoke http api endpoint to get content without mentioning version\n+    // Set mockito expectations for downloading content from cloudStorage\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+\n+              @Override\n+              public Void answer(InvocationOnMock invocation) throws Throwable {\n+                OutputStream os = invocation.getArgument(1);\n+                // This is expected to rerun the actual decoded value\n+                os.write(CONTENT_1_2.getBytes());\n+                return null;\n+              }\n+            })\n+        .when(cloudStorageService)\n+        .downloadFileTo(Mockito.anyString(), Mockito.any(OutputStream.class));\n+    responseEntity =\n+        getRestTemplate()\n+            .exchange(\n+                \"/consentDocument?studyId=StudyofHealth\",\n+                HttpMethod.GET,\n+                requestEntity,\n+                JsonNode.class);\n+    pdfValue = Base64.getEncoder().encodeToString(CONTENT_1_2.getBytes());\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    responseBody = responseEntity.getBody();\n+    assertEquals(\"success\", responseBody.get(FIELD_MESSAGE).asText());\n+    consent = (ObjectNode) responseBody.get(FIELD_CONSENT);\n+    assertEquals(VERSION_1_2, consent.get(FIELD_VERSION).asText());\n+    assertEquals(\"application/pdf\", consent.get(FIELD_TYPE).asText());\n+    assertEquals(pdfValue, consent.get(FIELD_CONTENT).asText());\n+  }\n+\n+  @Test\n+  @Order(5)\n+  public void updateEligibilityConsentStatusInvalidInput() {", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwMTg4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r426701884", "bodyText": "Yes, it seems possible.\nHowever, looking into the example in the given url, we would need to have a test class for each method.  This will need complete refactoring of our code as we have a test class for a class that is to be tested instead of a method.", "author": "abhijeetn-btc", "createdAt": "2020-05-18T15:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex 4891258fe..2a93cefa8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -37,9 +37,7 @@ import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagement\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n \n-@ActiveProfiles(\"mockit\")\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n @ExtendWith(MockitoExtension.class)\n public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4ODMzMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424688330", "bodyText": "please remove unrelated mockito test", "author": "zohrehj", "createdAt": "2020-05-13T19:44:44Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDcyOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424690728", "bodyText": "use HttpStatus instead", "author": "zohrehj", "createdAt": "2020-05-13T19:49:17Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5Mjg5NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424692894", "bodyText": "nit:\nString now = new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\nString fileName = String.join(\"_\", userId, studyId, consentVersion, now, \".pdf\")", "author": "zohrehj", "createdAt": "2020-05-13T19:53:10Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MzY4Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424693687", "bodyText": "checking the statusCode is sufficient, no need to do this.", "author": "zohrehj", "createdAt": "2020-05-13T19:54:33Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NDA1OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424694058", "bodyText": "please reformat. It's hard to read as is.", "author": "zohrehj", "createdAt": "2020-05-13T19:55:16Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setVersion(\"\");\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NDc3OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424694779", "bodyText": "nit: use a single line to group related statements. e.g.\n    ConsentReqBean reqBean = new ConsentReqBean();\n    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n    reqBean.setStatus(\"completed\");\n    \n    ConsentStatusBean bean = new ConsentStatusBean();\n    bean.setStudyId(studyId);\n    bean.setEligibility(Boolean.TRUE);\n    bean.setSharing(\"true\");\n    bean.setConsent(reqBean);", "author": "zohrehj", "createdAt": "2020-05-13T19:56:39Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NjUyOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424696528", "bodyText": "out of scope, but why is sharing a string instead of boolean?", "author": "zohrehj", "createdAt": "2020-05-13T19:59:45Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NzM5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424697390", "bodyText": "any reason you are using singletonList here?", "author": "zohrehj", "createdAt": "2020-05-13T20:01:18Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setVersion(\"\");\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5ODEzNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424698137", "bodyText": "move to a variable since it's used in another location as well", "author": "zohrehj", "createdAt": "2020-05-13T20:02:47Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMDQxOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r424720419", "bodyText": "use HttpStatus", "author": "zohrehj", "createdAt": "2020-05-13T20:45:37Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,375 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n+import com.google.cloud.healthcare.fdamystudies.utils.ErrorCode;\n+\n+@SpringBootTest\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementControllerTests {\n+\n+  @Mock private List<String> list;\n+\n+  @Mock private UserConsentManagementService userConsentManagementService;\n+\n+  @Mock private CommonService commonService;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n+\n+  @InjectMocks private UserConsentManagementController userConsentManagementController;\n+\n+  @Test\n+  public void testList() {\n+    // Sample Mockito unit test that uses mocked java.util.List //\n+\n+    list.add(\"X\");\n+\n+    Mockito.verify(list, times(1)).add(\"X\");\n+\n+    Mockito.when(list.size()).thenReturn(2);\n+    assertEquals(2, list.size());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDF() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    ConsentStudyResponseBean resp = new ConsentStudyResponseBean();\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(resp);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\"success\", ((ConsentStudyResponseBean) responseEntity.getBody()).getMessage());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    // Mockito expectations\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(\n+            userConsentManagementService.getStudyConsentDetails(\n+                userId, studyInfoId, consentVersion))\n+        .thenReturn(null);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());\n+  }\n+\n+  @Test\n+  public void testGetStudyConsentPDFInvalidData() {\n+    HttpServletResponse response = new MockHttpServletResponse();\n+\n+    String studyId = \"\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.getStudyConsentPDF(\n+            userId, studyId, consentVersion, response);\n+\n+    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n+    Mockito.verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n+    Mockito.verify(userConsentManagementService, never())\n+        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatus() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+    Integer userDetailsId = 1;\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setVersion(\"1.0\");\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyConsentBO studyConsent = new StudyConsentBO();\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+    String underDirectory = userId + \"/\" + studyId;\n+    String fileName =\n+        userId\n+            + \"_\"\n+            + studyId\n+            + \"_\"\n+            + consentVersion\n+            + \"_\"\n+            + new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date())\n+            + \".pdf\";\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+    Mockito.when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n+        .thenReturn(studyConsent);\n+    Mockito.when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Mockito.when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n+    Mockito.when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n+        .thenReturn(fileName + \"/\" + underDirectory);\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n+    assertEquals(\n+        ErrorCode.EC_200.code(), ((ErrorBean) responseEntity.getBody()).getCode().intValue());\n+  }\n+\n+  @Test\n+  public void testUpdateEligibilityConsentStatusVersionRequired() {\n+    String studyId = \"testStudy\";\n+    int studyInfoId = 1;\n+    String userId = \"jdusYdDLI\";\n+    String consentVersion = \"1.0\";\n+\n+    HttpServletResponse response = new MockHttpServletResponse();\n+    ConsentStatusBean bean = new ConsentStatusBean();\n+    bean.setStudyId(studyId);\n+    bean.setEligibility(Boolean.TRUE);\n+    bean.setSharing(\"true\");\n+    ConsentReqBean reqBean = new ConsentReqBean();\n+    reqBean.setVersion(\"\");\n+    reqBean.setPdf(Base64.getEncoder().encodeToString(\"content\".getBytes()));\n+    reqBean.setStatus(\"completed\");\n+    bean.setConsent(reqBean);\n+\n+    StudyInfoBean studyInfo = new StudyInfoBean();\n+    studyInfo.setStudyInfoId(studyInfoId);\n+    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n+\n+    Mockito.when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n+    Mockito.when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n+        .thenReturn(participantStudies);\n+    Mockito.when(\n+            userConsentManagementService.saveParticipantStudies(\n+                Collections.singletonList(participantStudies)))\n+        .thenReturn(\"SUCCESS\");\n+\n+    ResponseEntity<?> responseEntity =\n+        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n+\n+    assertEquals(null, responseEntity);\n+    assertEquals(400, response.getStatus());", "originalCommit": "a512ad79b7306b42480e007176dd59c72b4c71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyMzgyNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428723827", "bodyText": "This class has been removed now as we have integration test.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMDQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\nindex 9ea5cf4f1..43d051fc1 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n\n@@ -1,21 +1,24 @@\n package com.google.cloud.healthcare.fdamystudies.controller.tests;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.List;\n import javax.servlet.http.HttpServletResponse;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.HttpStatus;\n"}}, {"oid": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "message": "code commit to resolve build check failed", "committedDate": "2020-05-14T10:27:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MDU3OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425150579", "bodyText": "This doesn't seem related to this change.", "author": "nikklassen", "createdAt": "2020-05-14T13:48:11Z", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/model/SiteBo.java", "diffHunk": "@@ -60,7 +60,7 @@\n \n   @Column(\n       name = \"modified_date\",\n-      columnDefinition = \"TIMESTAMP CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")\n+      columnDefinition = \"TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")", "originalCommit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyODgzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428728831", "bodyText": "This was a fix for syntax issue we found during integration test.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MDU3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1NDM2Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425154363", "bodyText": "The indentation was correct before. Please fix your IDE settings, your code often has formatting issues.", "author": "nikklassen", "createdAt": "2020-05-14T13:53:17Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -23,67 +25,52 @@\n @RunWith(MockitoJUnitRunner.class)\n public class CommonServiceImplTests {\n \n-  @Mock private RestTemplate restTemplate;\n+\t@Mock\n+\tprivate RestTemplate restTemplate;\n \n-  @Mock private ApplicationPropertyConfiguration appConfig;\n+\t@Mock\n+\tprivate ApplicationPropertyConfiguration appConfig;\n \n-  @Mock private CommonDao commonDao;\n+\t@Mock\n+\tprivate CommonDao commonDao;\n \n-  @InjectMocks private CommonServiceImpl commonServiceImpl;\n+\t@InjectMocks\n+\tprivate CommonServiceImpl commonServiceImpl;\n \n-  @Test\n-  public void testGetUserDetailsId() {\n-    String userId = \"kJSdYD2e\";\n-    Integer userDetailsId = 2;\n-    Mockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n-    Integer result = commonServiceImpl.getUserDetailsId(userId);\n-    assertEquals(userDetailsId, result);\n-  }\n+\t@Test\n+\tpublic void testGetUserDetailsId() {\n+\t\tString userId = \"kJSdYD2e\";", "originalCommit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\nindex bb7f22e0e..2717f06bd 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n\n@@ -25,52 +22,47 @@ import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n @RunWith(MockitoJUnitRunner.class)\n public class CommonServiceImplTests {\n \n-\t@Mock\n-\tprivate RestTemplate restTemplate;\n+  @Mock private RestTemplate restTemplate;\n \n-\t@Mock\n-\tprivate ApplicationPropertyConfiguration appConfig;\n+  @Mock private ApplicationPropertyConfiguration appConfig;\n \n-\t@Mock\n-\tprivate CommonDao commonDao;\n+  @Mock private CommonDao commonDao;\n \n-\t@InjectMocks\n-\tprivate CommonServiceImpl commonServiceImpl;\n+  @InjectMocks private CommonServiceImpl commonServiceImpl;\n \n-\t@Test\n-\tpublic void testGetUserDetailsId() {\n-\t\tString userId = \"kJSdYD2e\";\n-\t\tInteger userDetailsId = 2;\n-\t\tMockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n-\t\tInteger result = commonServiceImpl.getUserDetailsId(userId);\n-\t\tassertEquals(userDetailsId, result);\n-\t}\n+  @Test\n+  public void testGetUserDetailsId() {\n+    String userId = \"userId\";\n+    Integer userDetailsId = 2;\n+    when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+    Integer result = commonServiceImpl.getUserDetailsId(userId);\n+    assertEquals(userDetailsId, result);\n+  }\n \n-\t@Test\n-\tpublic void testGetUserDetailsIdExceptionCase() {\n-\t\tString userId = \"kJSdYD2e\";\n-\t\tInteger result=null;\n-\t\tMockito.when(commonDao.getUserDetailsId(userId)).thenThrow(new HibernateException(\"Some hibernate exception\"));\n-\t\ttry{\n-\t\t\t result = commonServiceImpl.getUserDetailsId(userId);\n-\t\t}catch (HibernateException expected) {\n-\t\t}\n-\t\tassertNull(result);\n-\t}\n+  @Test\n+  public void testGetUserDetailsIdExceptionCase() {\n+    String userId = \"userId\";\n+    Integer result = null;\n+    when(commonDao.getUserDetailsId(userId))\n+        .thenThrow(new HibernateException(\"Some hibernate exception\"));\n+    try {\n+      result = commonServiceImpl.getUserDetailsId(userId);\n+    } catch (HibernateException expected) {\n+    }\n+    assertNull(result);\n+  }\n \n-\t@Test\n-\t@Ignore\n-\tpublic void testValidateAccessToken() {\n-\t\tString userId = \"kJSdYD2e\";\n-\t\tString accessToken = \"jsdYUdbsKUDY&jshdDsknsdhjsds\";\n-\t\tString accessTokenUrl=\"http://someurl-not-to-be-hit.com\";\n-\t\tString clientToken = \"skdj7dsjhdhYTTD65TDjksbdbKSDHSDJAsjhdsjdsd\";\n-\t\tMockito.when(appConfig.getAuthServerAccessTokenValidationUrl()).thenReturn(accessTokenUrl);\n-\t\tMockito.when(restTemplate.exchange(ArgumentMatchers.eq(accessTokenUrl),\n-\t\t\t\tArgumentMatchers.eq(HttpMethod.POST), ArgumentMatchers.any(),\n-\t\t\t\tArgumentMatchers.eq(String.class))).thenReturn(new ResponseEntity<String>(\"1\", HttpStatus.OK));\n+  @Test\n+  public void testValidateAccessToken() {\n+    String userId = \"userId\";\n+    String accessToken = \"accessToken\";\n+    String accessTokenUrl = \"http://example.com\";\n+    String clientToken = \"clientToken\";\n+    when(appConfig.getAuthServerAccessTokenValidationUrl()).thenReturn(accessTokenUrl);\n+    when(restTemplate.exchange(eq(accessTokenUrl), eq(HttpMethod.POST), any(), eq(String.class)))\n+        .thenReturn(new ResponseEntity<String>(\"1\", HttpStatus.OK));\n \n-\t\tInteger result = commonServiceImpl.validateAccessToken(userId, accessToken, clientToken);\n-\t\tassertEquals(Integer.valueOf(1), result);\n-\t}\n+    Integer result = commonServiceImpl.validateAccessToken(userId, accessToken, clientToken);\n+    assertEquals(Integer.valueOf(1), result);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MDQwMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r425240402", "bodyText": "Why is this test ignored?", "author": "nikklassen", "createdAt": "2020-05-14T15:46:34Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import org.hibernate.HibernateException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.service.CommonServiceImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommonServiceImplTests {\n+\n+\t@Mock\n+\tprivate RestTemplate restTemplate;\n+\n+\t@Mock\n+\tprivate ApplicationPropertyConfiguration appConfig;\n+\n+\t@Mock\n+\tprivate CommonDao commonDao;\n+\n+\t@InjectMocks\n+\tprivate CommonServiceImpl commonServiceImpl;\n+\n+\t@Test\n+\tpublic void testGetUserDetailsId() {\n+\t\tString userId = \"kJSdYD2e\";\n+\t\tInteger userDetailsId = 2;\n+\t\tMockito.when(commonDao.getUserDetailsId(userId)).thenReturn(userDetailsId);\n+\t\tInteger result = commonServiceImpl.getUserDetailsId(userId);\n+\t\tassertEquals(userDetailsId, result);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetUserDetailsIdExceptionCase() {\n+\t\tString userId = \"kJSdYD2e\";\n+\t\tInteger result=null;\n+\t\tMockito.when(commonDao.getUserDetailsId(userId)).thenThrow(new HibernateException(\"Some hibernate exception\"));\n+\t\ttry{\n+\t\t\t result = commonServiceImpl.getUserDetailsId(userId);\n+\t\t}catch (HibernateException expected) {\n+\t\t}\n+\t\tassertNull(result);\n+\t}\n+\n+\t@Test\n+\t@Ignore", "originalCommit": "b1c824e7cd9cd87a4e09b79093a170c5c6c99f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\nindex bb7f22e0e..2717f06bd 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/CommonServiceImplTests.java\n\n@@ -2,21 +2,18 @@ package com.google.cloud.healthcare.fdamystudies.service.tests;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n import org.hibernate.HibernateException;\n-import org.junit.Ignore;\n import org.junit.Test;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.runner.RunWith;\n-import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.junit.MockitoJUnitRunner;\n-import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.web.client.RestClientException;\n import org.springframework.web.client.RestTemplate;\n import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n"}}, {"oid": "9fa501080ea1cd292220d2469cd49684ac317c0a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9fa501080ea1cd292220d2469cd49684ac317c0a", "message": "code commit for PR #390 comment issue fixes", "committedDate": "2020-05-20T09:23:13Z", "type": "commit"}, {"oid": "32433d2c7af7885f180948ae56577f0796ed342f", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/32433d2c7af7885f180948ae56577f0796ed342f", "message": "PR build failed issue fixes", "committedDate": "2020-05-20T14:09:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwODA2MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428008060", "bodyText": "FIELD_SHARING is still unused.", "author": "nikklassen", "createdAt": "2020-05-20T13:26:04Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+public class Constants {\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+  public static final String VERSION_BAD =\n+      \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+  public static final String ACCESS_TOKEN_VALUE = \"access Token value\";\n+  public static final String CLIENT_TOKEN_VALUE = \"client token value\";\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String CONTENT_TYPE_HEADER = \"Content-Type\";\n+  public static final String ACCEPT_HEADER = \"Accept\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_SHARING = \"sharing\";", "originalCommit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMDI1Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428730253", "bodyText": "This has been removed.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwODA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\nindex 60c6e6a09..019c18074 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\n\n@@ -5,7 +5,9 @@ public class Constants {\n   public static final String VERSION_1_0 = \"1.0\";\n   public static final String VERSION_1_2 = \"1.2\";\n   public static final String VERSION_1_3 = \"1.3\";\n-  public static final String VERSION_BAD =\n+\n+  // A very long version to cause db exception while saving study_consent\n+  public static final String VERSION_VERY_LONG =\n       \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n   public static final String CONTENT_1_0 = \"text pdf content\";\n   public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwODU1Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428008552", "bodyText": "Why is this \"bad\". Please add a comment and use a more descriptive name.", "author": "nikklassen", "createdAt": "2020-05-20T13:26:44Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+public class Constants {\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+  public static final String VERSION_BAD =", "originalCommit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMDM1NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428730355", "bodyText": "This has been updated.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwODU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\nindex 60c6e6a09..019c18074 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\n\n@@ -5,7 +5,9 @@ public class Constants {\n   public static final String VERSION_1_0 = \"1.0\";\n   public static final String VERSION_1_2 = \"1.2\";\n   public static final String VERSION_1_3 = \"1.3\";\n-  public static final String VERSION_BAD =\n+\n+  // A very long version to cause db exception while saving study_consent\n+  public static final String VERSION_VERY_LONG =\n       \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n   public static final String CONTENT_1_0 = \"text pdf content\";\n   public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwOTQxNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428009415", "bodyText": "Remove ACCEPT_HEADER and CONTENT_TYPE header and use the Spring HttpHeaders class instead.", "author": "nikklassen", "createdAt": "2020-05-20T13:27:51Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+public class Constants {\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+  public static final String VERSION_BAD =\n+      \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+  public static final String ACCESS_TOKEN_VALUE = \"access Token value\";\n+  public static final String CLIENT_TOKEN_VALUE = \"client token value\";\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String CONTENT_TYPE_HEADER = \"Content-Type\";\n+  public static final String ACCEPT_HEADER = \"Accept\";", "originalCommit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMTM4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428731384", "bodyText": "This has been update as requested", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwOTQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\nindex 60c6e6a09..019c18074 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\n\n@@ -5,7 +5,9 @@ public class Constants {\n   public static final String VERSION_1_0 = \"1.0\";\n   public static final String VERSION_1_2 = \"1.2\";\n   public static final String VERSION_1_3 = \"1.3\";\n-  public static final String VERSION_BAD =\n+\n+  // A very long version to cause db exception while saving study_consent\n+  public static final String VERSION_VERY_LONG =\n       \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n   public static final String CONTENT_1_0 = \"text pdf content\";\n   public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTIzOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428011239", "bodyText": "typo: rerun should be return", "author": "nikklassen", "createdAt": "2020-05-20T13:30:10Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+import java.io.OutputStream;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.storage.StorageException;\n+\n+public class MockUtils {\n+\n+  private MockUtils() {}\n+\n+  public static void setCloudStorageSaveFileExpectations(\n+      final FileStorageService cloudStorageService) {\n+    when(cloudStorageService.saveFile(anyString(), anyString(), anyString()))\n+        .thenAnswer(\n+            (invocation) -> {\n+              String fileName = invocation.getArgument(0);\n+              String underDirectory = invocation.getArgument(2);\n+              return underDirectory + \"/\" + fileName;\n+            });\n+  }\n+\n+  public static void setCloudStorageDownloadExpectations(\n+      final FileStorageService cloudStorageSerice, final String content) {\n+    doAnswer(\n+            (invocation) -> {\n+              OutputStream os = invocation.getArgument(1);\n+              // This is expected to rerun the actual decoded value", "originalCommit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMTU4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428731584", "bodyText": "This has been updated", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java\nindex a188116e0..fd42d1fb0 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java\n\n@@ -25,15 +25,15 @@ public class MockUtils {\n   }\n \n   public static void setCloudStorageDownloadExpectations(\n-      final FileStorageService cloudStorageSerice, final String content) {\n+      final FileStorageService cloudStorageService, final String content) {\n     doAnswer(\n             (invocation) -> {\n               OutputStream os = invocation.getArgument(1);\n-              // This is expected to rerun the actual decoded value\n+              // This is expected to return the actual decoded value\n               os.write(content.getBytes());\n               return null;\n             })\n-        .when(cloudStorageSerice)\n+        .when(cloudStorageService)\n         .downloadFileTo(anyString(), any(OutputStream.class));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTUxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428011512", "bodyText": "typo: cloudStorageService", "author": "nikklassen", "createdAt": "2020-05-20T13:30:32Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+import java.io.OutputStream;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.storage.StorageException;\n+\n+public class MockUtils {\n+\n+  private MockUtils() {}\n+\n+  public static void setCloudStorageSaveFileExpectations(\n+      final FileStorageService cloudStorageService) {\n+    when(cloudStorageService.saveFile(anyString(), anyString(), anyString()))\n+        .thenAnswer(\n+            (invocation) -> {\n+              String fileName = invocation.getArgument(0);\n+              String underDirectory = invocation.getArgument(2);\n+              return underDirectory + \"/\" + fileName;\n+            });\n+  }\n+\n+  public static void setCloudStorageDownloadExpectations(\n+      final FileStorageService cloudStorageSerice, final String content) {", "originalCommit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMTc3OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428731778", "bodyText": "This has been updated as suggested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java\nindex a188116e0..fd42d1fb0 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/MockUtils.java\n\n@@ -25,15 +25,15 @@ public class MockUtils {\n   }\n \n   public static void setCloudStorageDownloadExpectations(\n-      final FileStorageService cloudStorageSerice, final String content) {\n+      final FileStorageService cloudStorageService, final String content) {\n     doAnswer(\n             (invocation) -> {\n               OutputStream os = invocation.getArgument(1);\n-              // This is expected to rerun the actual decoded value\n+              // This is expected to return the actual decoded value\n               os.write(content.getBytes());\n               return null;\n             })\n-        .when(cloudStorageSerice)\n+        .when(cloudStorageService)\n         .downloadFileTo(anyString(), any(OutputStream.class));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMjg5OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428012898", "bodyText": "Use NoArgs annotation for consistency.", "author": "nikklassen", "createdAt": "2020-05-20T13:32:23Z", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentStudyResponseBean.java", "diffHunk": "@@ -7,18 +7,26 @@\n  */\n package com.google.cloud.healthcare.fdamystudies.bean;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.Setter;\n import lombok.ToString;\n \n @Setter\n @Getter\n @ToString\n+@EqualsAndHashCode\n public class ConsentStudyResponseBean {\n   private String message;\n   private ConsentResponseBean consent = new ConsentResponseBean();\n   private String sharing;\n \n+  public ConsentStudyResponseBean() {}", "originalCommit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentStudyResponseBean.java b/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentStudyResponseBean.java\nindex 63088cfad..29b91aa27 100644\n--- a/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentStudyResponseBean.java\n+++ b/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentStudyResponseBean.java\n\n@@ -9,6 +9,7 @@ package com.google.cloud.healthcare.fdamystudies.bean;\n \n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n+import lombok.NoArgsConstructor;\n import lombok.Setter;\n import lombok.ToString;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNDg1Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428014852", "bodyText": "Don't catch exception", "author": "nikklassen", "createdAt": "2020-05-20T13:34:56Z", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java", "diffHunk": "@@ -152,6 +151,17 @@ public static Date getCurrentUtilDateTime() {\n     return date;\n   }\n \n+  public static LocalDateTime getCurrentDateTime() {\n+    logger.info(\"INFO: MyStudiesUserRegUtil - getCurrentDateTime() :: starts\");\n+    try {\n+      return LocalDateTime.now(ZoneId.of(AppConstants.SERVER_TIMEZONE));\n+    } catch (Exception e) {", "originalCommit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java b/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java\nindex da6cfa160..f76f4aff8 100644\n--- a/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java\n+++ b/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/utils/MyStudiesUserRegUtil.java\n\n@@ -153,13 +153,9 @@ public class MyStudiesUserRegUtil {\n \n   public static LocalDateTime getCurrentDateTime() {\n     logger.info(\"INFO: MyStudiesUserRegUtil - getCurrentDateTime() :: starts\");\n-    try {\n-      return LocalDateTime.now(ZoneId.of(AppConstants.SERVER_TIMEZONE));\n-    } catch (Exception e) {\n-      logger.error(\"ERROR: MyStudiesUserRegUtil - getCurrentDateTime()\", e);\n-    }\n+    LocalDateTime currentDateTime = LocalDateTime.now(ZoneId.of(AppConstants.SERVER_TIMEZONE));\n     logger.info(\"INFO: MyStudiesUserRegUtil - getCurrentDateTime() :: ends\");\n-    return null;\n+    return currentDateTime;\n   }\n \n   public static String getCurrentDateTime(String pattern) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTAyMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428041023", "bodyText": "I think these tests would be cleaner and easier to read with the MockMvcController. I was just looking for articles about this and this one https://reflectoring.io/spring-boot-web-controller-test/ provides a lot of helpful information for writing tests that are easy to read and verify.", "author": "nikklassen", "createdAt": "2020-05-20T14:07:06Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -2,84 +2,43 @@\n \n import static org.junit.Assert.assertEquals;", "originalCommit": "9fa501080ea1cd292220d2469cd49684ac317c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1ODk2MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428658961", "bodyText": "MockMvcController is used to write test cases for @controller classes (Spring MVC Controller), but we are using @RestController to develop RESTful APIs. WireMock is easy to mock the RESTful APIs, so we have used this.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T13:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyNzEyMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428727122", "bodyText": "The first example in that blog post uses a @RestController. I tested it out myself and it works just fine here. MockMvc replaces your calls to getRestTemplate().exchange(...) which are not easy to read.\nWe're not mocking the REST API here, we're testing it. You're using WireMock to stub out external APIs which is not related to what I'm suggesting.", "author": "nikklassen", "createdAt": "2020-05-21T15:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0Nzk4Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r430347982", "bodyText": "We have updated UserConsentManagementControllerTest to use MockMvc in place of RestTemplate latest commit.", "author": "abhijeetn-btc", "createdAt": "2020-05-26T11:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDQ2OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r430524469", "bodyText": "Looks much better. These tests are easy to read now and should also be easy to maintain and update.", "author": "nikklassen", "createdAt": "2020-05-26T15:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "0b448e8924e0c311b281dd4aa81816c7d6b281e8", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\ndeleted file mode 100644\nindex fb44de2ba..000000000\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ /dev/null\n\n@@ -1,422 +0,0 @@\n-package com.google.cloud.healthcare.fdamystudies.controller.tests;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import java.util.Base64;\n-import java.util.Collections;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpEntity;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.ResponseEntity;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n-import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n-import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n-import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n-import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n-import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n-import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n-\n-@ExtendWith(MockitoExtension.class)\n-public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n-\n-  @Mock private FileStorageService cloudStorageService;\n-\n-  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n-\n-  @InjectMocks @Autowired private UserConsentManagementController controller;\n-\n-  @Test\n-  public void contextLoads() {\n-    assertNotNull(controller);\n-    assertNotNull(getRestTemplate());\n-    assertNotNull(cloudStorageService);\n-    assertNotNull(userConsentManagementService);\n-  }\n-\n-  @Test\n-  public void ping() {\n-\n-    HttpHeaders headers = new HttpHeaders();\n-    TestUtils.addTokenHeaders(headers);\n-\n-    ResponseEntity<String> response = getRestTemplate().getForEntity(\"/ping\", String.class);\n-    assertEquals(HttpStatus.OK, response.getStatusCode());\n-  }\n-\n-  @Test\n-  public void updateEligibilityConsentStatus() {\n-    HttpHeaders headers = new HttpHeaders();\n-    TestUtils.addTokenHeaders(headers);\n-    TestUtils.addUserIdHeader(headers);\n-\n-    // Invoke http api endpoint to save study consent first time\n-    // Set mockito expectations for saving file into cloudStorageService\n-\n-    MockUtils.setCloudStorageSaveFileExpectations(cloudStorageService);\n-\n-    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-    consentRequest.put(Constants.FIELD_ELIGIBILITY, true);\n-\n-    String pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_0.getBytes());\n-    ObjectNode consent = new ObjectMapper().createObjectNode();\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_0);\n-    consent.put(Constants.FIELD_STATUS, \"\");\n-    consent.put(Constants.FIELD_PDF, pdfValue);\n-    consentRequest.set(Constants.FIELD_CONSENT, consent);\n-\n-    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n-    ResponseEntity<JsonNode> responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-\n-    TestUtils.assertUpdateEligibility(responseEntity);\n-\n-    // Invoke http api endpoint to get consent and verify pdf content\n-    // Set mockito expectations for downloading content from cloudStorage\n-    MockUtils.setCloudStorageDownloadExpectations(cloudStorageService, Constants.CONTENT_1_0);\n-\n-    requestEntity = new HttpEntity<>(headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + Constants.VERSION_1_0,\n-                HttpMethod.GET,\n-                requestEntity,\n-                JsonNode.class);\n-\n-    TestUtils.assertGetConsentResponse(responseEntity, pdfValue, Constants.VERSION_1_0);\n-  }\n-\n-  @Test\n-  public void updateEligibilityConsentStatusUpdateExisting() {\n-    HttpHeaders headers = new HttpHeaders();\n-    TestUtils.addTokenHeaders(headers);\n-    TestUtils.addUserIdHeader(headers);\n-\n-    // Invoke http api endpoint to Update study consent pdf content value\n-    // Set mockito expectations for saving file into cloudStorageService\n-    MockUtils.setCloudStorageSaveFileExpectations(cloudStorageService);\n-\n-    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-    consentRequest.put(Constants.FIELD_ELIGIBILITY, true);\n-\n-    String pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_0_UPDATED.getBytes());\n-    ObjectNode consent = new ObjectMapper().createObjectNode();\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_0);\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consent.put(Constants.FIELD_PDF, pdfValue);\n-    consentRequest.set(Constants.FIELD_CONSENT, consent);\n-\n-    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n-    ResponseEntity<JsonNode> responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-\n-    TestUtils.assertUpdateEligibility(responseEntity);\n-\n-    // Invoke http api endpoint to get consent and verify pdf content\n-    // Set mockito expectations for downloading content from cloudStorage\n-    MockUtils.setCloudStorageDownloadExpectations(\n-        cloudStorageService, Constants.CONTENT_1_0_UPDATED);\n-\n-    requestEntity = new HttpEntity<>(headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + Constants.VERSION_1_0,\n-                HttpMethod.GET,\n-                requestEntity,\n-                JsonNode.class);\n-\n-    TestUtils.assertGetConsentResponse(responseEntity, pdfValue, Constants.VERSION_1_0);\n-  }\n-\n-  @Test\n-  public void updateEligibilityConsentStatusAddNewVersion() {\n-    HttpHeaders headers = new HttpHeaders();\n-    TestUtils.addTokenHeaders(headers);\n-    TestUtils.addUserIdHeader(headers);\n-\n-    // Invoke http api endpoint to Add new study consent pdf version\n-    // Set mockito expectations for saving file into cloudStorageService\n-    MockUtils.setCloudStorageSaveFileExpectations(cloudStorageService);\n-\n-    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-    consentRequest.put(Constants.FIELD_ELIGIBILITY, true);\n-\n-    String pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_2.getBytes());\n-    ObjectNode consent = new ObjectMapper().createObjectNode();\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_2);\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consent.put(Constants.FIELD_PDF, pdfValue);\n-    consentRequest.set(Constants.FIELD_CONSENT, consent);\n-\n-    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n-    ResponseEntity<JsonNode> responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-\n-    TestUtils.assertUpdateEligibility(responseEntity);\n-\n-    // Invoke http api endpoint to get consent and verify pdf content\n-    // Set mockito expectations for downloading content from cloudStorage\n-    MockUtils.setCloudStorageDownloadExpectations(cloudStorageService, Constants.CONTENT_1_2);\n-\n-    requestEntity = new HttpEntity<>(headers);\n-\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + Constants.VERSION_1_2,\n-                HttpMethod.GET,\n-                requestEntity,\n-                JsonNode.class);\n-\n-    TestUtils.assertGetConsentResponse(responseEntity, pdfValue, Constants.VERSION_1_2);\n-\n-    // Invoke http api endpoint to get old consent and verify pdf content\n-    // Set mockito expectations for downloading content from cloudStorage\n-    MockUtils.setCloudStorageDownloadExpectations(\n-        cloudStorageService, Constants.CONTENT_1_0_UPDATED);\n-\n-    requestEntity = new HttpEntity<>(headers);\n-    pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_0_UPDATED.getBytes());\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/consentDocument?studyId=StudyofHealth&consentVersion=\" + Constants.VERSION_1_0,\n-                HttpMethod.GET,\n-                requestEntity,\n-                JsonNode.class);\n-\n-    TestUtils.assertGetConsentResponse(responseEntity, pdfValue, Constants.VERSION_1_0);\n-\n-    // Invoke http api endpoint to get content without mentioning version\n-    // Set mockito expectations for downloading content from cloudStorage\n-    MockUtils.setCloudStorageDownloadExpectations(cloudStorageService, Constants.CONTENT_1_2);\n-\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/consentDocument?studyId=StudyofHealth\",\n-                HttpMethod.GET,\n-                requestEntity,\n-                JsonNode.class);\n-    pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_2.getBytes());\n-    TestUtils.assertGetConsentResponse(responseEntity, pdfValue, Constants.VERSION_1_2);\n-  }\n-\n-  @Test\n-  public void updateEligibilityConsentStatusInvalidInput() {\n-    HttpHeaders headers = new HttpHeaders();\n-    TestUtils.addTokenHeaders(headers);\n-    TestUtils.addUserIdHeader(headers);\n-    TestUtils.addJsonHeaders(headers);\n-\n-    // Invoke http api endpoint to Add new study consent pdf version\n-    // Set mockito expectations for saving file into cloudStorageService\n-\n-    // without consent request\n-    ObjectNode consentRequest = null;\n-    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n-    ResponseEntity<JsonNode> responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-\n-    // without consent\n-    consentRequest = new ObjectMapper().createObjectNode();\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-\n-    // without consent version\n-    ObjectNode consent = new ObjectMapper().createObjectNode();\n-    consentRequest.set(Constants.FIELD_CONSENT, consent);\n-\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-\n-    // without consent pdf content\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_0);\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-\n-    // without consent status\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_0);\n-    consent.put(\n-        Constants.FIELD_PDF, Base64.getEncoder().encodeToString(Constants.CONTENT_1_0.getBytes()));\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-\n-    // without studyId\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_0);\n-    consent.put(\n-        Constants.FIELD_PDF, Base64.getEncoder().encodeToString(Constants.CONTENT_1_0.getBytes()));\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"\");\n-\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-\n-    // without userId header\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_0);\n-    consent.put(\n-        Constants.FIELD_PDF, Base64.getEncoder().encodeToString(Constants.CONTENT_1_0.getBytes()));\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-\n-    headers.put(Constants.USER_ID_HEADER, Collections.singletonList(\"\"));\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.UNAUTHORIZED, responseEntity.getStatusCode());\n-\n-    // without a matching entry for userId and studyId in participantStudies\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_0);\n-    consent.put(\n-        Constants.FIELD_PDF, Base64.getEncoder().encodeToString(Constants.CONTENT_1_0.getBytes()));\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-\n-    headers.put(Constants.USER_ID_HEADER, Collections.singletonList(\"BhGsYUyd\"));\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-\n-    // with empty version\n-    consent.put(Constants.FIELD_VERSION, \"\");\n-    consent.put(\n-        Constants.FIELD_PDF, Base64.getEncoder().encodeToString(Constants.CONTENT_1_0.getBytes()));\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-\n-    headers.put(Constants.USER_ID_HEADER, Collections.singletonList(Constants.VALID_USER_ID));\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-  }\n-\n-  @Test\n-  public void testUpdateEligibilityConsentStatusEmptyPdf() {\n-    HttpHeaders headers = new HttpHeaders();\n-    TestUtils.addTokenHeaders(headers);\n-    TestUtils.addUserIdHeader(headers);\n-\n-    // Invoke http api endpoint to Add new study consent pdf version\n-    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-\n-    ObjectNode consent = new ObjectMapper().createObjectNode();\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_2);\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consent.put(Constants.FIELD_PDF, \"\"); // empty pdf\n-    consentRequest.set(Constants.FIELD_CONSENT, consent);\n-\n-    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n-    ResponseEntity<JsonNode> responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-\n-    TestUtils.assertUpdateEligibility(responseEntity);\n-\n-    // Verify that cloud storage wasn't called\n-    verify(cloudStorageService, times(0)).saveFile(anyString(), anyString(), anyString());\n-\n-    // Invoke http api endpoint to Add new study consent pdf version\n-    consentRequest = new ObjectMapper().createObjectNode();\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-\n-    consent = new ObjectMapper().createObjectNode();\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_1_3);\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consent.put(Constants.FIELD_PDF, \"\"); // empty pdf\n-    consentRequest.set(Constants.FIELD_CONSENT, consent);\n-\n-    requestEntity = new HttpEntity<>(consentRequest, headers);\n-    responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-\n-    TestUtils.assertUpdateEligibility(responseEntity);\n-    // Verify that cloud storage wasn't called\n-    verify(cloudStorageService, times(0)).saveFile(anyString(), anyString(), anyString());\n-  }\n-\n-  @Test\n-  public void testUpdateEligibilityConsentStatusSaveFailure() {\n-    HttpHeaders headers = new HttpHeaders();\n-    TestUtils.addTokenHeaders(headers);\n-    TestUtils.addUserIdHeader(headers);\n-\n-    // Invoke http api endpoint to Add new study consent pdf version\n-    // Set mockito expectations for saving file into cloudStorageService\n-    MockUtils.setCloudStorageSaveFileExpectations(cloudStorageService);\n-\n-    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n-    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n-\n-    String pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_2.getBytes());\n-    ObjectNode consent = new ObjectMapper().createObjectNode();\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_BAD);\n-    consent.put(Constants.FIELD_STATUS, \"complete\");\n-    consent.put(Constants.FIELD_PDF, pdfValue);\n-    consentRequest.set(Constants.FIELD_CONSENT, consent);\n-\n-    HttpEntity<JsonNode> requestEntity = new HttpEntity<>(consentRequest, headers);\n-    ResponseEntity<JsonNode> responseEntity =\n-        getRestTemplate()\n-            .exchange(\n-                \"/updateEligibilityConsentStatus\", HttpMethod.POST, requestEntity, JsonNode.class);\n-    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MTExNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428051117", "bodyText": "It doesn't seem like this file is necessary given that we are testing all the APIs with the \"IntegrationTest\" file.", "author": "nikklassen", "createdAt": "2020-05-20T14:19:28Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;", "originalCommit": "32433d2c7af7885f180948ae56577f0796ed342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5MzA2NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428493065", "bodyText": "Shall I remove it then?", "author": "abhijeetn-btc", "createdAt": "2020-05-21T07:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MTExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0MTQ5NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428641494", "bodyText": "Yes, let's rename the IntegrationTests file to UserConsentManagementControllerTests.java and remove this one. We should just pick the best way of testing the class instead of dividing the testing burden across two files.", "author": "nikklassen", "createdAt": "2020-05-21T13:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MTExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4NjU4Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429186582", "bodyText": "This has been updated as requested", "author": "abhijeetn-btc", "createdAt": "2020-05-22T11:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MTExNw=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\ndeleted file mode 100644\nindex 43d051fc1..000000000\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerTests.java\n+++ /dev/null\n\n@@ -1,280 +0,0 @@\n-package com.google.cloud.healthcare.fdamystudies.controller.tests;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyInt;\n-import static org.mockito.ArgumentMatchers.anyList;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import java.io.IOException;\n-import java.text.SimpleDateFormat;\n-import java.util.Base64;\n-import java.util.Collections;\n-import java.util.Date;\n-import javax.servlet.http.HttpServletResponse;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnitRunner;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.mock.web.MockHttpServletResponse;\n-import com.google.cloud.healthcare.fdamystudies.bean.ConsentReqBean;\n-import com.google.cloud.healthcare.fdamystudies.bean.ConsentStatusBean;\n-import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n-import com.google.cloud.healthcare.fdamystudies.bean.ErrorBean;\n-import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n-import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n-import com.google.cloud.healthcare.fdamystudies.model.ActivityLogBO;\n-import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n-import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n-import com.google.cloud.healthcare.fdamystudies.service.CommonService;\n-import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n-import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementService;\n-\n-@SpringBootTest\n-@RunWith(MockitoJUnitRunner.class)\n-public class UserConsentManagementControllerTests {\n-\n-  @Mock private UserConsentManagementService userConsentManagementService;\n-\n-  @Mock private CommonService commonService;\n-\n-  @Mock private FileStorageService cloudStorageService;\n-\n-  @InjectMocks private UserConsentManagementController userConsentManagementController;\n-\n-  @Test\n-  public void testGetStudyConsentPDF() {\n-    HttpServletResponse response = new MockHttpServletResponse();\n-\n-    String studyId = \"testStudy\";\n-    int studyInfoId = 1;\n-    String userId = \"userId\";\n-    String consentVersion = \"1.0\";\n-\n-    StudyInfoBean studyInfo = new StudyInfoBean(studyInfoId);\n-\n-    // Mockito expectations\n-    when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n-    ConsentStudyResponseBean resp = new ConsentStudyResponseBean(\"success\");\n-    when(userConsentManagementService.getStudyConsentDetails(userId, studyInfoId, consentVersion))\n-        .thenReturn(resp);\n-\n-    ResponseEntity<?> responseEntity =\n-        userConsentManagementController.getStudyConsentPDF(\n-            userId, studyId, consentVersion, response);\n-    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n-    assertEquals(ConsentStudyResponseBean.class, responseEntity.getBody().getClass());\n-    assertEquals(resp, responseEntity.getBody());\n-  }\n-\n-  @Test\n-  public void testGetStudyConsentPDFNoDataFound() throws IOException {\n-    HttpServletResponse response = new MockHttpServletResponse();\n-\n-    String studyId = \"testStudy\";\n-    int studyInfoId = 1;\n-    String userId = \"userId\";\n-    String consentVersion = \"1.0\";\n-\n-    StudyInfoBean studyInfo = new StudyInfoBean(studyInfoId);\n-\n-    // Mockito expectations\n-    when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n-\n-    when(userConsentManagementService.getStudyConsentDetails(userId, studyInfoId, consentVersion))\n-        .thenReturn(null);\n-\n-    ResponseEntity<?> responseEntity =\n-        userConsentManagementController.getStudyConsentPDF(\n-            userId, studyId, consentVersion, response);\n-    assertNull(responseEntity);\n-    assertEquals(400, response.getStatus());\n-  }\n-\n-  @Test\n-  public void testGetStudyConsentPDFInvalidData() {\n-    HttpServletResponse response = new MockHttpServletResponse();\n-\n-    String studyId = \"\";\n-    int studyInfoId = 1;\n-    String userId = \"userId\";\n-    String consentVersion = \"1.0\";\n-\n-    ResponseEntity<?> responseEntity =\n-        userConsentManagementController.getStudyConsentPDF(\n-            userId, studyId, consentVersion, response);\n-\n-    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n-    verify(userConsentManagementService, never()).getStudyInfoId(studyId);\n-    verify(userConsentManagementService, never())\n-        .getStudyConsentDetails(userId, studyInfoId, consentVersion);\n-  }\n-\n-  @Test\n-  public void testUpdateEligibilityConsentStatus() {\n-    String studyId = \"testStudy\";\n-    int studyInfoId = 1;\n-    String userId = \"userId\";\n-    String consentVersion = \"1.0\";\n-    Integer userDetailsId = 1;\n-\n-    HttpServletResponse response = new MockHttpServletResponse();\n-    ConsentReqBean reqBean =\n-        new ConsentReqBean(\n-            \"1.0\", \"completed\", Base64.getEncoder().encodeToString(\"content\".getBytes()));\n-    ConsentStatusBean bean = new ConsentStatusBean(studyId, Boolean.TRUE, reqBean, \"true\");\n-\n-    StudyConsentBO studyConsent = new StudyConsentBO();\n-    StudyInfoBean studyInfo = new StudyInfoBean(studyInfoId);\n-    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n-    String underDirectory = userId + \"/\" + studyId;\n-\n-    String now = new SimpleDateFormat(\"MMddyyyyHHmmss\").format(new Date());\n-    String fileName = String.join(\"_\", userId, studyId, consentVersion, now).concat(\".pdf\");\n-\n-    when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n-    when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n-        .thenReturn(participantStudies);\n-    when(userConsentManagementService.saveParticipantStudies(\n-            Collections.singletonList(participantStudies)))\n-        .thenReturn(\"SUCCESS\");\n-    when(userConsentManagementService.getStudyConsent(userId, studyInfoId, consentVersion))\n-        .thenReturn(studyConsent);\n-    when(userConsentManagementService.getUserDetailsId(userId)).thenReturn(userDetailsId);\n-    when(userConsentManagementService.saveStudyConsent(studyConsent)).thenReturn(\"SUCCESS\");\n-    when(cloudStorageService.saveFile(fileName, reqBean.getPdf(), underDirectory))\n-        .thenReturn(fileName + \"/\" + underDirectory);\n-\n-    ActivityLogBO activity = new ActivityLogBO();\n-    when(commonService.createActivityLog(anyString(), anyString(), anyString()))\n-        .thenReturn(activity);\n-\n-    ResponseEntity<?> responseEntity =\n-        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n-    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n-    assertEquals(ErrorBean.class, responseEntity.getBody().getClass());\n-  }\n-\n-  @Test\n-  public void testUpdateEligibilityConsentStatusVersionRequired() {\n-    String studyId = \"testStudy\";\n-    int studyInfoId = 1;\n-    String userId = \"userId\";\n-    String consentVersion = \"1.0\";\n-\n-    HttpServletResponse response = new MockHttpServletResponse();\n-    ConsentReqBean reqBean =\n-        new ConsentReqBean(\n-            \"\", \"completed\", Base64.getEncoder().encodeToString(\"content\".getBytes()));\n-    ConsentStatusBean bean = new ConsentStatusBean(studyId, Boolean.TRUE, reqBean, \"true\");\n-\n-    StudyInfoBean studyInfo = new StudyInfoBean(studyInfoId);\n-    ParticipantStudiesBO participantStudies = new ParticipantStudiesBO();\n-\n-    when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n-    when(userConsentManagementService.getParticipantStudies(studyInfoId, userId))\n-        .thenReturn(participantStudies);\n-    when(userConsentManagementService.saveParticipantStudies(\n-            Collections.singletonList(participantStudies)))\n-        .thenReturn(\"SUCCESS\");\n-\n-    ResponseEntity<?> responseEntity =\n-        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n-\n-    assertNull(responseEntity);\n-    assertEquals(400, response.getStatus());\n-    verify(userConsentManagementService, never())\n-        .getStudyConsent(userId, studyInfoId, consentVersion);\n-    verify(userConsentManagementService, never()).getUserDetailsId(userId);\n-    verify(userConsentManagementService, never()).saveStudyConsent(any(StudyConsentBO.class));\n-    verify(cloudStorageService, never()).saveFile(anyString(), anyString(), anyString());\n-  }\n-\n-  @Test\n-  public void testUpdateEligibilityConsentStatusNoDataAvailable() {\n-    String studyId = \"testStudy\";\n-    int studyInfoId = 1;\n-    String userId = \"userId\";\n-    String consentVersion = \"1.0\";\n-\n-    HttpServletResponse response = new MockHttpServletResponse();\n-    ConsentReqBean reqBean =\n-        new ConsentReqBean(\n-            \"\", \"completed\", Base64.getEncoder().encodeToString(\"content\".getBytes()));\n-    ConsentStatusBean bean = new ConsentStatusBean(studyId, Boolean.TRUE, reqBean, \"true\");\n-\n-    StudyInfoBean studyInfo = new StudyInfoBean(studyInfoId);\n-\n-    when(userConsentManagementService.getStudyInfoId(studyId)).thenReturn(studyInfo);\n-    when(userConsentManagementService.getParticipantStudies(studyInfoId, userId)).thenReturn(null);\n-\n-    ResponseEntity<?> responseEntity =\n-        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n-\n-    assertNull(responseEntity);\n-    assertEquals(400, response.getStatus());\n-    verify(userConsentManagementService, never())\n-        .getStudyConsent(userId, studyInfoId, consentVersion);\n-    verify(userConsentManagementService, never()).getUserDetailsId(anyString());\n-    verify(userConsentManagementService, never()).saveStudyConsent(any(StudyConsentBO.class));\n-    verify(cloudStorageService, never()).saveFile(anyString(), anyString(), anyString());\n-    verify(userConsentManagementService, never()).saveParticipantStudies(anyList());\n-  }\n-\n-  @Test\n-  public void testUpdateEligibilityConsentStatusInvalidUserId() {\n-    String studyId = \"testStudy\";\n-    String userId = \"\";\n-\n-    HttpServletResponse response = new MockHttpServletResponse();\n-    ConsentReqBean reqBean =\n-        new ConsentReqBean(\n-            \"1.0\", \"completed\", Base64.getEncoder().encodeToString(\"content\".getBytes()));\n-\n-    ConsentStatusBean bean = new ConsentStatusBean(studyId, Boolean.TRUE, reqBean, \"true\");\n-\n-    ResponseEntity<?> responseEntity =\n-        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n-\n-    assertNull(responseEntity);\n-    assertEquals(400, response.getStatus());\n-    verify(userConsentManagementService, never()).getStudyInfoId(anyString());\n-    verify(userConsentManagementService, never()).getParticipantStudies(anyInt(), anyString());\n-    verify(userConsentManagementService, never())\n-        .getStudyConsent(anyString(), anyInt(), anyString());\n-    verify(userConsentManagementService, never()).getUserDetailsId(anyString());\n-    verify(userConsentManagementService, never()).saveStudyConsent(any(StudyConsentBO.class));\n-    verify(cloudStorageService, never()).saveFile(anyString(), anyString(), anyString());\n-    verify(userConsentManagementService, never()).saveParticipantStudies(anyList());\n-  }\n-\n-  @Test\n-  public void testUpdateEligibilityConsentStatusInvalidConsent() {\n-    String studyId = \"testStudy\";\n-    String userId = \"\";\n-\n-    HttpServletResponse response = new MockHttpServletResponse();\n-    ConsentStatusBean bean = new ConsentStatusBean(studyId, Boolean.TRUE, null, \"true\");\n-\n-    ResponseEntity<?> responseEntity =\n-        userConsentManagementController.updateEligibilityConsentStatus(userId, bean, response);\n-\n-    assertNull(responseEntity);\n-    assertEquals(400, response.getStatus());\n-    verify(userConsentManagementService, never()).getStudyInfoId(anyString());\n-    verify(userConsentManagementService, never()).getParticipantStudies(anyInt(), anyString());\n-    verify(userConsentManagementService, never())\n-        .getStudyConsent(anyString(), anyInt(), anyString());\n-    verify(userConsentManagementService, never()).getUserDetailsId(anyString());\n-    verify(userConsentManagementService, never()).saveStudyConsent(any(StudyConsentBO.class));\n-    verify(cloudStorageService, never()).saveFile(anyString(), anyString(), anyString());\n-    verify(userConsentManagementService, never()).saveParticipantStudies(anyList());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDkzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428054931", "bodyText": "Use the constructor instead", "author": "nikklassen", "createdAt": "2020-05-20T14:24:04Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,261 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = 1;\n+    String userId = \"userId\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);", "originalCommit": "32433d2c7af7885f180948ae56577f0796ed342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMjM0Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428732346", "bodyText": "This has been updated as requested.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex a7b8bb7cf..fda41e49c 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -22,6 +22,7 @@ import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n \n @RunWith(MockitoJUnitRunner.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODU5MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428058591", "bodyText": "Use constants.", "author": "nikklassen", "createdAt": "2020-05-20T14:28:46Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java", "diffHunk": "@@ -0,0 +1,261 @@\n+package com.google.cloud.healthcare.fdamystudies.service.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.when;\n+import java.util.Base64;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.hibernate.HibernateException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.ConsentStudyResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.bean.StudyInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.dao.UserConsentManagementDao;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudiesBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentBO;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n+import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserConsentManagementServiceTests {\n+\n+  @Mock private UserConsentManagementDao userConsentManagementDao;\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @Test\n+  public void testGetParticipantStudies() {\n+\n+    Integer studyId = 1;\n+    String userId = \"userId\";\n+    ParticipantStudiesBO bo = new ParticipantStudiesBO();\n+\n+    StudyInfoBO sBO = new StudyInfoBO();\n+    sBO.setId(studyId);\n+    bo.setStudyInfo(sBO);\n+    UserDetailsBO uBO = new UserDetailsBO();\n+    uBO.setUserId(userId);\n+    bo.setUserDetails(uBO);\n+\n+    when(userConsentManagementDao.getParticipantStudies(studyId, userId)).thenReturn(bo);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+\n+    assertEquals(bo, result);\n+  }\n+\n+  @Test\n+  public void testGetParticipantStudiesExceptionCase() {\n+    Integer studyId = 1;\n+    String userId = \"userId\";\n+    when(userConsentManagementDao.getParticipantStudies(studyId, userId))\n+        .thenThrow(HibernateException.class);\n+    ParticipantStudiesBO result =\n+        userConsentManagementService.getParticipantStudies(studyId, userId);\n+    assertNull(result);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void testSaveParticipantStudies() {\n+    List<ParticipantStudiesBO> participantStudiesList = new LinkedList<>();\n+    ParticipantStudiesBO participantStudiesBO = new ParticipantStudiesBO();\n+    participantStudiesBO.setParticipantId(\"\");\n+    participantStudiesList.add(participantStudiesBO);\n+\n+    when(userConsentManagementDao.saveParticipantStudies(participantStudiesList))\n+        .thenReturn(\"SUCCESS\");", "originalCommit": "32433d2c7af7885f180948ae56577f0796ed342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyNzExOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428727119", "bodyText": "This has been updated.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T15:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\nindex a7b8bb7cf..fda41e49c 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/service/tests/UserConsentManagementServiceTests.java\n\n@@ -22,6 +22,7 @@ import com.google.cloud.healthcare.fdamystudies.model.StudyInfoBO;\n import com.google.cloud.healthcare.fdamystudies.model.UserDetailsBO;\n import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n \n @RunWith(MockitoJUnitRunner.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MDI3MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428060271", "bodyText": "You never pass null into this function. Since it's a test helper remove this check from these methods.", "author": "nikklassen", "createdAt": "2020-05-20T14:31:00Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+import static org.junit.Assert.assertEquals;\n+import javax.ws.rs.core.MediaType;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public class TestUtils {\n+\n+  public static void addUserIdHeader(HttpHeaders headers) {\n+    if (headers == null) {", "originalCommit": "32433d2c7af7885f180948ae56577f0796ed342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NTU5Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428495592", "bodyText": "I added it so that in case somebody else uses it in future, they don't need to construct it before calling.", "author": "abhijeetn-btc", "createdAt": "2020-05-21T07:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MDI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0MzgyMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428643821", "bodyText": "If you haven't written the tests that way I doubt that anyone is going to do it differently in the future. The team is probably just going to copy the style that you used in these tests, that's why I'm spending more time making sure we get the style here right. Also, this won't actually work, because it modifies what headers points to, it doesn't set it for the caller.", "author": "nikklassen", "createdAt": "2020-05-21T13:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MDI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4NjYzNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429186636", "bodyText": "This has been updated as requested.", "author": "abhijeetn-btc", "createdAt": "2020-05-22T11:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MDI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java\nindex e36f6e1c3..3f9b4836a 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/TestUtils.java\n\n@@ -29,8 +29,8 @@ public class TestUtils {\n     if (headers == null) {\n       headers = new HttpHeaders();\n     }\n-    headers.add(Constants.CONTENT_TYPE_HEADER, MediaType.APPLICATION_JSON);\n-    headers.add(Constants.ACCEPT_HEADER, MediaType.APPLICATION_JSON);\n+    headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n+    headers.add(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON);\n   }\n \n   public static void assertUpdateEligibility(ResponseEntity<JsonNode> responseEntity) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNTEyMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428115122", "bodyText": "Use ObjectMapper to serialize the Request Bean instead of manually constructing the requests.", "author": "nikklassen", "createdAt": "2020-05-20T15:42:06Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,422 @@\n+package com.google.cloud.healthcare.fdamystudies.controller.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import java.util.Base64;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockit;\n+import com.google.cloud.healthcare.fdamystudies.controller.UserConsentManagementController;\n+import com.google.cloud.healthcare.fdamystudies.service.FileStorageService;\n+import com.google.cloud.healthcare.fdamystudies.service.UserConsentManagementServiceImpl;\n+import com.google.cloud.healthcare.fdamystudies.testutils.Constants;\n+import com.google.cloud.healthcare.fdamystudies.testutils.MockUtils;\n+import com.google.cloud.healthcare.fdamystudies.testutils.TestUtils;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n+\n+  @Mock private FileStorageService cloudStorageService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementServiceImpl userConsentManagementService;\n+\n+  @InjectMocks @Autowired private UserConsentManagementController controller;\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(getRestTemplate());\n+    assertNotNull(cloudStorageService);\n+    assertNotNull(userConsentManagementService);\n+  }\n+\n+  @Test\n+  public void ping() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    TestUtils.addTokenHeaders(headers);\n+\n+    ResponseEntity<String> response = getRestTemplate().getForEntity(\"/ping\", String.class);\n+    assertEquals(HttpStatus.OK, response.getStatusCode());\n+  }\n+\n+  @Test\n+  public void updateEligibilityConsentStatus() {\n+    HttpHeaders headers = new HttpHeaders();\n+    TestUtils.addTokenHeaders(headers);\n+    TestUtils.addUserIdHeader(headers);\n+\n+    // Invoke http api endpoint to save study consent first time\n+    // Set mockito expectations for saving file into cloudStorageService\n+\n+    MockUtils.setCloudStorageSaveFileExpectations(cloudStorageService);\n+\n+    ObjectNode consentRequest = new ObjectMapper().createObjectNode();\n+    consentRequest.put(Constants.FIELD_STUDY_ID, \"StudyofHealth\");\n+    consentRequest.put(Constants.FIELD_ELIGIBILITY, true);\n+\n+    String pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_0.getBytes());\n+    ObjectNode consent = new ObjectMapper().createObjectNode();", "originalCommit": "32433d2c7af7885f180948ae56577f0796ed342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMTIxNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428501217", "bodyText": "Nik,\nI couldn't understand what you are trying to say. Did you mean to de-serialize request bean from a Json string ?\nString jsonString = \"{ \"version\" : \"1.0\"}\"; // with all fields\nconsent = new ObjectMapper().readTree(jsonString);", "author": "abhijeetn-btc", "createdAt": "2020-05-21T07:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNTEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0NjE2MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428646161", "bodyText": "I meant calling the API with\nConsentStatusBean bean = new ConsentStatusBean(\"StudyOfHealth\", true, /* other fields */);\nString consentJSON = new ObjectMapper().writeValueAsString(bean);\n// call API with consentJSON\n\nYou don't need to work with the ObjectNode API directly", "author": "nikklassen", "createdAt": "2020-05-21T13:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNTEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4NjY1OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429186659", "bodyText": "This has been updated as requested.", "author": "abhijeetn-btc", "createdAt": "2020-05-22T11:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNTEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\nindex b75666437..c77d78534 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/tests/UserConsentManagementControllerIntegrationTest.java\n\n@@ -407,7 +407,7 @@ public class UserConsentManagementControllerIntegrationTest extends BaseMockit {\n \n     String pdfValue = Base64.getEncoder().encodeToString(Constants.CONTENT_1_2.getBytes());\n     ObjectNode consent = new ObjectMapper().createObjectNode();\n-    consent.put(Constants.FIELD_VERSION, Constants.VERSION_BAD);\n+    consent.put(Constants.FIELD_VERSION, Constants.VERSION_VERY_LONG);\n     consent.put(Constants.FIELD_STATUS, \"complete\");\n     consent.put(Constants.FIELD_PDF, pdfValue);\n     consentRequest.set(Constants.FIELD_CONSENT, consent);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExOTY5NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428119694", "bodyText": "Prefer @Data to combine a bunch of these properties, or @Value if we don't need setters.", "author": "nikklassen", "createdAt": "2020-05-20T15:48:30Z", "path": "user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentReqBean.java", "diffHunk": "@@ -7,13 +7,17 @@\n  */\n package com.google.cloud.healthcare.fdamystudies.bean;\n \n+import lombok.AllArgsConstructor;\n import lombok.Getter;\n+import lombok.NoArgsConstructor;\n import lombok.Setter;\n import lombok.ToString;\n \n @Setter\n @Getter\n @ToString\n+@NoArgsConstructor\n+@AllArgsConstructor", "originalCommit": "32433d2c7af7885f180948ae56577f0796ed342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4Njc0OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429186748", "bodyText": "This has been updated as requested.", "author": "abhijeetn-btc", "createdAt": "2020-05-22T11:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExOTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0b448e8924e0c311b281dd4aa81816c7d6b281e8", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentReqBean.java b/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentReqBean.java\nindex 8b1b19f27..e1f7a6c06 100644\n--- a/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentReqBean.java\n+++ b/user-registration-server-ws/consent-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/bean/ConsentReqBean.java\n\n@@ -8,14 +8,10 @@\n package com.google.cloud.healthcare.fdamystudies.bean;\n \n import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import lombok.Data;\n import lombok.NoArgsConstructor;\n-import lombok.Setter;\n-import lombok.ToString;\n \n-@Setter\n-@Getter\n-@ToString\n+@Data\n @NoArgsConstructor\n @AllArgsConstructor\n public class ConsentReqBean {\n"}}, {"oid": "e90f51e5592297595759ea5d3344ce39a598e3d4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e90f51e5592297595759ea5d3344ce39a598e3d4", "message": "PR comment issue fixes", "committedDate": "2020-05-21T14:14:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2MTUxMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r428761511", "bodyText": "This is coming from MyStudiesUserRegUtil.ErrorCodes.SUCCESS. Use that value directly in your test.", "author": "nikklassen", "createdAt": "2020-05-21T16:18:05Z", "path": "user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.google.cloud.healthcare.fdamystudies.testutils;\n+\n+public class Constants {\n+\n+  public static final String VERSION_1_0 = \"1.0\";\n+  public static final String VERSION_1_2 = \"1.2\";\n+  public static final String VERSION_1_3 = \"1.3\";\n+\n+  // A very long version to cause db exception while saving study_consent\n+  public static final String VERSION_VERY_LONG =\n+      \"very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-very-long-content-\";\n+  public static final String CONTENT_1_0 = \"text pdf content\";\n+  public static final String CONTENT_1_0_UPDATED = CONTENT_1_0 + \" updated\";\n+  public static final String CONTENT_1_2 = \"text pdf content 1.2\";\n+  public static final String ACCESS_TOKEN_VALUE = \"access Token value\";\n+  public static final String CLIENT_TOKEN_VALUE = \"client token value\";\n+  public static final String ACCESS_TOKEN_HEADER = \"accessToken\";\n+  public static final String CLIENT_TOKEN_HEADER = \"clientToken\";\n+  public static final String USER_ID_HEADER = \"userId\";\n+  public static final String VALID_USER_ID = \"kR2g5m2pJPP0P31-WNFYK8Al7jBP0mJ-cTSFJJHJ4DewuCg\";\n+  public static final String FIELD_VERSION = \"version\";\n+  public static final String FIELD_STATUS = \"status\";\n+  public static final String FIELD_PDF = \"pdf\";\n+  public static final String FIELD_CONSENT = \"consent\";\n+  public static final String FIELD_ELIGIBILITY = \"eligibility\";\n+  public static final String FIELD_STUDY_ID = \"studyId\";\n+  public static final String FIELD_MESSAGE = \"message\";\n+  public static final String FIELD_TYPE = \"type\";\n+  public static final String FIELD_CONTENT = \"content\";\n+\n+  public static final String SUCCESS_MESSAGE = \"SUCCESS\";", "originalCommit": "e90f51e5592297595759ea5d3344ce39a598e3d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4NjgyOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/390#discussion_r429186829", "bodyText": "This has been updated as requested.", "author": "abhijeetn-btc", "createdAt": "2020-05-22T11:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2MTUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0b448e8924e0c311b281dd4aa81816c7d6b281e8", "chunk": "diff --git a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\nindex 019c18074..afa086551 100644\n--- a/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\n+++ b/user-registration-server-ws/consent-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/testutils/Constants.java\n\n@@ -28,9 +28,8 @@ public class Constants {\n   public static final String FIELD_TYPE = \"type\";\n   public static final String FIELD_CONTENT = \"content\";\n \n-  public static final String SUCCESS_MESSAGE = \"SUCCESS\";\n-  public static final String SUCCESS_MESSAGE_LOWERCASE = \"success\";\n-\n   public static final String UPDATE_CONSENT_SUCCESS_MSG =\n       \"Eligibility consent has been updated successfully\";\n+  public static final String STUDYOF_HEALTH = \"StudyofHealth\";\n+  public static final String STATUS_COMPLETE = \"complete\";\n }\n"}}, {"oid": "55964c60f20b8d88a571fb38628558d08a724202", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/55964c60f20b8d88a571fb38628558d08a724202", "message": "Updated .gitignore\n\ntarget, log and settings has been added to gitignore", "committedDate": "2020-05-22T05:46:54Z", "type": "commit"}, {"oid": "5d885ece327a37231e458698ddf79d03f8a7fac3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5d885ece327a37231e458698ddf79d03f8a7fac3", "message": "Removed as per comments in PR", "committedDate": "2020-05-22T07:30:04Z", "type": "commit"}, {"oid": "0b448e8924e0c311b281dd4aa81816c7d6b281e8", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0b448e8924e0c311b281dd4aa81816c7d6b281e8", "message": "Changes for review comments\n\nUsing json string ineast of ObjectNode or JsonNode\nChanges in use of constants", "committedDate": "2020-05-22T10:59:09Z", "type": "commit"}, {"oid": "c21fcca7936eaa47831573df1b8330755f98aa2c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c21fcca7936eaa47831573df1b8330755f98aa2c", "message": "PR #390 comment issue fix on 26/05/2020", "committedDate": "2020-05-26T10:45:06Z", "type": "commit"}, {"oid": "c82a4778396da7438b8d5b44e1a05cb18fd4cecf", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c82a4778396da7438b8d5b44e1a05cb18fd4cecf", "message": "removed WCP-WS from gitignore", "committedDate": "2020-05-26T10:47:23Z", "type": "commit"}, {"oid": "a7da1ed66078e3c26c1aceea216b1e365f738a7a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a7da1ed66078e3c26c1aceea216b1e365f738a7a", "message": "resolved compile time issue by refactoring class name", "committedDate": "2020-05-26T10:52:36Z", "type": "commit"}, {"oid": "2ab7ca658c53a8a96135022698f3c7113f5f7da4", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2ab7ca658c53a8a96135022698f3c7113f5f7da4", "message": "Merge branch 'early-access-consent-mgmt-unit-test-case' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access-consent-mgmt-unit-test-case", "committedDate": "2020-05-26T10:53:10Z", "type": "commit"}, {"oid": "3e6a8b56a310efe1ec77fb65bc41a0007b972f0d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3e6a8b56a310efe1ec77fb65bc41a0007b972f0d", "message": "Merge branch 'early-access' into early-access-consent-mgmt-unit-test-case", "committedDate": "2020-05-26T10:57:40Z", "type": "commit"}, {"oid": "e1aca9c9cf388947b46c0eb614842ced290a2960", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e1aca9c9cf388947b46c0eb614842ced290a2960", "message": "removed unneccessary hardcoded value", "committedDate": "2020-05-26T11:35:25Z", "type": "commit"}]}