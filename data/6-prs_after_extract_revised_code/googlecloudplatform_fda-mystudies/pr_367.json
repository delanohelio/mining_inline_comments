{"pr_number": 367, "pr_title": "backend changes for update email verification API and flow [ dependent PR##357 ]", "pr_createdAt": "2020-05-08T16:25:57Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367", "timeline": [{"oid": "5b535b2e3aec56608dd3cb1c81bd547229c2a560", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5b535b2e3aec56608dd3cb1c81bd547229c2a560", "message": "code commit for update email verification API and flow [ Part of Pull Request #357 ]", "committedDate": "2020-05-08T15:56:18Z", "type": "commit"}, {"oid": "bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-05-11T12:18:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjA4NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r423042085", "bodyText": "This function is too complicated. Please break it into smaller pieces.", "author": "nikklassen", "createdAt": "2020-05-11T13:33:27Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -44,21 +47,24 @@\n   @Autowired private UserManagementUtil userManagementUtil;\n \n   @Autowired private CommonService commonService;\n+  @Autowired UserManagementProfileService userManagementProfService;\n \n   @PostMapping(\"/verifyEmailId\")\n   public ResponseEntity<?> verifyEmailId(", "originalCommit": "bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43ea1c792901be898b75c15d54c902ab2ab5a2fb", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 45a79b81f..6f37e3ec2 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -44,9 +42,8 @@ public class VerifyEmailIdController {\n \n   @Autowired private FdaEaUserDetailsService userDetailsService;\n \n-  @Autowired private UserManagementUtil userManagementUtil;\n-\n   @Autowired private CommonService commonService;\n+\n   @Autowired UserManagementProfileService userManagementProfService;\n \n   @PostMapping(\"/verifyEmailId\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMzc5NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r423113794", "bodyText": "Use brackets\nWhy is comment here? Should the exception be a different type?", "author": "nikklassen", "createdAt": "2020-05-11T15:14:00Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -74,74 +80,104 @@\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n-      verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-      VerifyCodeResponse serviceResult = userDetailsService.verifyCode(verificationCode, userId);\n-\n-      if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        UpdateAccountInfoResponseBean authResponse =\n-            userManagementUtil.updateUserInfoInAuthServer(\n-                accountStatus, userId, accessToken, clientToken);\n-\n-        if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              response);\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-          verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-          verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          commonService.createActivityLog(\n-              userId,\n-              \"User Verification\",\n-              \"User verified for email \" + serviceResult.getEmailId() + \".\");\n-          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-        } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-          if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-          } else {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-          }\n+      isValidAppMsg =\n+          commonService.validatedUserAppDetailsByAllApi(\n+              \"\", verificationForm.getEmailId(), appId, orgId);\n+      if (!StringUtils.isEmpty(isValidAppMsg)) {\n+        AppOrgInfoBean appOrgInfoBean =\n+            commonService.getUserAppDetailsByAllApi(\n+                \"\", verificationForm.getEmailId(), appId, orgId);\n+        if (appOrgInfoBean != null) {\n+          participantDetails =\n+              userManagementProfService.getParticipantDetailsByEmail(\n+                  verificationForm.getEmailId(),\n+                  appOrgInfoBean.getAppInfoId(),\n+                  appOrgInfoBean.getOrgInfoId());\n+        }\n+        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n+          userId = participantDetails.getUserId();\n+          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n+          VerifyCodeResponse serviceResult =\n+              userDetailsService.verifyCode(verificationCode, userId);\n+\n+          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n+            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+            accountStatus.setEmailVerified(true);\n+            UpdateAccountInfoResponseBean authResponse =\n+                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n+\n+            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+                  response);\n+              verifyEmailIdResponse = new VerifyEmailIdResponse();\n+              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n+              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n+              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n+              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+\n+            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n+              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    authResponse.getCode(),\n+                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                    authResponse.getMessage(),\n+                    response);\n+                verifyEmailIdResponse = new VerifyEmailIdResponse();\n+                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n+                verifyEmailIdResponse.setMessage(\n+                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n+                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n+\n+                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n+              } else {\n+                MyStudiesUserRegUtil.getFailureResponse(\n+                    authResponse.getCode(),\n+                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+                    authResponse.getMessage(),\n+                    response);\n+                verifyEmailIdResponse = new VerifyEmailIdResponse();\n+                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+                verifyEmailIdResponse.setMessage(\n+                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n+\n+                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n+              }\n+            } else {\n+              MyStudiesUserRegUtil.getFailureResponse(\n+                  500 + \"\",\n+                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+                  response);\n+\n+              verifyEmailIdResponse = new VerifyEmailIdResponse();\n+              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+              verifyEmailIdResponse.setMessage(\n+                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n+              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+            }\n+          } else throw new InvalidUserIdException(); // InvalidEmailCodeException", "originalCommit": "bcaa55cca0c7bed4a3c35e4bc893037d4077cbd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43ea1c792901be898b75c15d54c902ab2ab5a2fb", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 45a79b81f..6f37e3ec2 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -55,27 +52,19 @@ public class VerifyEmailIdController {\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n"}}, {"oid": "7d43bece3904d796e3ef5d5ce365c971ac22cedf", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7d43bece3904d796e3ef5d5ce365c971ac22cedf", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-05-11T15:49:51Z", "type": "commit"}, {"oid": "b123177852fc2eaa4214bedc761e2ff0e8975cb9", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b123177852fc2eaa4214bedc761e2ff0e8975cb9", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-05-12T06:18:22Z", "type": "commit"}, {"oid": "8706d440357d30bab48cc83b4916bab2e2e9edbf", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/8706d440357d30bab48cc83b4916bab2e2e9edbf", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-05-18T07:48:00Z", "type": "commit"}, {"oid": "fb52401250aeb6f60d53245009c991a50cd552a9", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/fb52401250aeb6f60d53245009c991a50cd552a9", "message": "Merge branch 'early-access' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access-verifyemail-issue-fix", "committedDate": "2020-05-26T07:59:49Z", "type": "commit"}, {"oid": "43b807b9589b567a9585f1d69072cb1f00c3536a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/43b807b9589b567a9585f1d69072cb1f00c3536a", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-05-26T08:29:54Z", "type": "commit"}, {"oid": "9c4e48d1db3aa600c6b123e3cf7df8fa05d26ab1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9c4e48d1db3aa600c6b123e3cf7df8fa05d26ab1", "message": "Merge branch 'early-access-verifyemail-issue-fix' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access-verifyemail-issue-fix", "committedDate": "2020-05-26T12:58:10Z", "type": "commit"}, {"oid": "43ea1c792901be898b75c15d54c902ab2ab5a2fb", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/43ea1c792901be898b75c15d54c902ab2ab5a2fb", "message": "code commit for issue fixes based PR#367 comments", "committedDate": "2020-05-28T09:41:32Z", "type": "commit"}, {"oid": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9d153371e1ecfb6578c154b03a9c1e7ffa195596", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-05-28T13:15:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2MDcxNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431860715", "bodyText": "if (!serviceResult) {\n    throw new InvalidUserIdException();\n}\nbool serviceResponse ...", "author": "nikklassen", "createdAt": "2020-05-28T14:04:49Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMDM5Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438330392", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2MDcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 6f37e3ec2..c1bf575c0 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -63,10 +62,9 @@ public class VerifyEmailIdController {\n         || StringUtils.isBlank(appId)\n         || StringUtils.isBlank(orgId)\n         || StringUtils.isBlank(verificationForm.getCode())) {\n-\n-      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2MjMwNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431862307", "bodyText": "if (!serviceResponse) {\n    throw new SystemException();\n}\nverifyEmailIdResponse = ...", "author": "nikklassen", "createdAt": "2020-05-28T14:07:00Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMDUxNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438330514", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2MjMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 6f37e3ec2..c1bf575c0 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -63,10 +62,9 @@ public class VerifyEmailIdController {\n         || StringUtils.isBlank(appId)\n         || StringUtils.isBlank(orgId)\n         || StringUtils.isBlank(verificationForm.getCode())) {\n-\n-      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTQ1OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431865459", "bodyText": "All of these catch statements are very similar. I would do\ncatch (InvalidUserIdException|InvalidEmailCodeException|InvalidRequestException e) {\n    String errMessage = mapExceptionToMessage(e);\n    verifyEmailIdResponse = prepareResponse(response, errMessage);\n    logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n    return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n}\n\nOr better yet use the type in prepareResponse instead of creating another constant", "author": "nikklassen", "createdAt": "2020-05-28T14:11:23Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwMDUwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431900505", "bodyText": "In fact, this is essentially recreating the logic of @ExceptionHandler. If you create a @ControllerAdvice you only need to write this once.", "author": "nikklassen", "createdAt": "2020-05-28T14:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMTAyNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438331024", "bodyText": "changed as suggested to use prepareResponse.", "author": "aswinijena100", "createdAt": "2020-06-10T18:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 6f37e3ec2..c1bf575c0 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -63,10 +62,9 @@ public class VerifyEmailIdController {\n         || StringUtils.isBlank(appId)\n         || StringUtils.isBlank(orgId)\n         || StringUtils.isBlank(verificationForm.getCode())) {\n-\n-      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTkyNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431865924", "bodyText": "Don't catch Exception, explicitly catch SystemException here.", "author": "nikklassen", "createdAt": "2020-05-28T14:12:06Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n-\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_USERID_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n     } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_EMAIL_CODE_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n \n+    } catch (InvalidRequestException e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_REQUEST_EXCEPTION);\n+      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n+    } catch (Exception e) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMTExNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438331116", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2OTMyOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439569329", "bodyText": "Exception is back.", "author": "nikklassen", "createdAt": "2020-06-12T18:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNDIwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439734205", "bodyText": "This class refactored , hence SystemException had been removed . Now added Exception  to handle RunTimeException and return custom error message to mobile .", "author": "aswinijena100", "createdAt": "2020-06-13T12:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTE3MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r440341171", "bodyText": "That's why I asked you to remove Exception, you aren't supposed to catch RuntimeException in controllers. I'm not accepting code that doesn't follow the guidelines I laid out in the Exceptions doc I sent out.", "author": "nikklassen", "createdAt": "2020-06-15T17:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4Mjk1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r443682950", "bodyText": "Hi @nikklassen . Thanks for providing the details on Exception handling. As you aware we are refactoring the exception handling across all applications and planning to implement common-service to centralize the Exception handling . Hence could you please let us know if you can take it up this particular  comment fix as part of the code refactoring ? If yes please review and approve this PR , as Its a blocker for mobile as well .", "author": "aswinijena100", "createdAt": "2020-06-22T16:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNTYxNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r443835616", "bodyText": "Yes, let's resolve this separately.", "author": "nikklassen", "createdAt": "2020-06-22T21:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 6f37e3ec2..c1bf575c0 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -63,10 +62,9 @@ public class VerifyEmailIdController {\n         || StringUtils.isBlank(appId)\n         || StringUtils.isBlank(orgId)\n         || StringUtils.isBlank(verificationForm.getCode())) {\n-\n-      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5Njc0MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431896740", "bodyText": "what is included in \"both\". Also you should use consistent language, since this calls an \"update\" function it should also be \"update\".", "author": "nikklassen", "createdAt": "2020-05-28T14:48:29Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n-\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_USERID_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n     } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_EMAIL_CODE_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n \n+    } catch (InvalidRequestException e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_REQUEST_EXCEPTION);\n+      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n+    } catch (Exception e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.SYSTEM_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private VerifyEmailIdResponse prepareResponse(HttpServletResponse response, String flag) {\n+    VerifyEmailIdResponse verifyEmailIdResponse = new VerifyEmailIdResponse();\n+    switch (flag) {\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+      case AppConstants.INVALID_REQUEST_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SYSTEM_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.EC_500.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SUCCESS_RESPONSE:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n+        verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+        verifyEmailIdResponse.setVerified(true);\n+        return verifyEmailIdResponse;\n+\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  /*\n+   * prepare email doesn't exists Error Response\n+   */\n+  private ResponseEntity<?> prepareEmailNotExistsErrorResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        response);\n+    return null;\n+  }\n+\n+  /*\n+   * changing status in both servers", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMTI1Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438331253", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5Njc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 6f37e3ec2..c1bf575c0 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -63,10 +62,9 @@ public class VerifyEmailIdController {\n         || StringUtils.isBlank(appId)\n         || StringUtils.isBlank(orgId)\n         || StringUtils.isBlank(verificationForm.getCode())) {\n-\n-      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNjI1NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431906255", "bodyText": "you should let userDetailsService manage its own input validation.", "author": "nikklassen", "createdAt": "2020-05-28T15:00:51Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n-\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_USERID_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n     } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_EMAIL_CODE_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n \n+    } catch (InvalidRequestException e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_REQUEST_EXCEPTION);\n+      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n+    } catch (Exception e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.SYSTEM_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private VerifyEmailIdResponse prepareResponse(HttpServletResponse response, String flag) {\n+    VerifyEmailIdResponse verifyEmailIdResponse = new VerifyEmailIdResponse();\n+    switch (flag) {\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+      case AppConstants.INVALID_REQUEST_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SYSTEM_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.EC_500.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SUCCESS_RESPONSE:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n+        verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+        verifyEmailIdResponse.setVerified(true);\n+        return verifyEmailIdResponse;\n+\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  /*\n+   * prepare email doesn't exists Error Response\n+   */\n+  private ResponseEntity<?> prepareEmailNotExistsErrorResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        response);\n+    return null;\n+  }\n+\n+  /*\n+   * changing status in both servers\n+   */\n+  private boolean changeStatusInBothServers(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+    if (participantDetails != null) {\n+      return userDetailsService.updateStatus(participantDetails);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /*\n+   * verifying EmailCode(OTP)\n+   */\n+  private boolean verifyEmailCode(String verificationCode, String userId)\n+      throws SystemException, InvalidEmailCodeException, InvalidUserIdException {\n+    if (verificationCode == null || userId == null) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMjI3OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438332278", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNjI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 6f37e3ec2..c1bf575c0 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -63,10 +62,9 @@ public class VerifyEmailIdController {\n         || StringUtils.isBlank(appId)\n         || StringUtils.isBlank(orgId)\n         || StringUtils.isBlank(verificationForm.getCode())) {\n-\n-      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNjY5Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431906693", "bodyText": "userDetailsService.updateStatus already has this logic.", "author": "nikklassen", "createdAt": "2020-05-28T15:01:33Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -55,170 +52,175 @@\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n     String isValidAppMsg = \"\";\n     UserDetailsBO participantDetails = null;\n-    String userId = \"\";\n+\n     if (verificationForm == null\n-        || StringUtils.isEmpty(verificationForm.getEmailId())\n-        || StringUtils.isEmpty(appId)\n-        || StringUtils.isEmpty(orgId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n       logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n           commonService.validatedUserAppDetailsByAllApi(\n               \"\", verificationForm.getEmailId(), appId, orgId);\n-      if (!StringUtils.isEmpty(isValidAppMsg)) {\n-        AppOrgInfoBean appOrgInfoBean =\n-            commonService.getUserAppDetailsByAllApi(\n-                \"\", verificationForm.getEmailId(), appId, orgId);\n-        if (appOrgInfoBean != null) {\n-          participantDetails =\n-              userManagementProfService.getParticipantDetailsByEmail(\n-                  verificationForm.getEmailId(),\n-                  appOrgInfoBean.getAppInfoId(),\n-                  appOrgInfoBean.getOrgInfoId());\n-        }\n-        if (participantDetails != null && !participantDetails.getUserId().isEmpty()) {\n-          userId = participantDetails.getUserId();\n-          verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-          VerifyCodeResponse serviceResult =\n-              userDetailsService.verifyCode(verificationCode, userId);\n-\n-          if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-            UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-            accountStatus.setEmailVerified(true);\n-            UpdateAccountInfoResponseBean authResponse =\n-                userManagementUtil.updateUserInfoInAuthServer(accountStatus, userId, \"\", \"\");\n-\n-            if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-                  response);\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-              verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-              verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-            } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-              if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-              } else {\n-                MyStudiesUserRegUtil.getFailureResponse(\n-                    authResponse.getCode(),\n-                    MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                    authResponse.getMessage(),\n-                    response);\n-                verifyEmailIdResponse = new VerifyEmailIdResponse();\n-                verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-                verifyEmailIdResponse.setMessage(\n-                    MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-                logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-\n-                return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-              }\n-            } else {\n-              MyStudiesUserRegUtil.getFailureResponse(\n-                  500 + \"\",\n-                  MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-                  response);\n-\n-              verifyEmailIdResponse = new VerifyEmailIdResponse();\n-              verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-              verifyEmailIdResponse.setMessage(\n-                  MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-              logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-              return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-          } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n-              response);\n-          return null;\n-        }\n-      } else {\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n         MyStudiesUserRegUtil.getFailureResponse(\n             MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n             MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n             response);\n         return null;\n       }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails =\n+            userManagementProfService.getParticipantDetailsByEmail(\n+                verificationForm.getEmailId(),\n+                appOrgInfoBean.getAppInfoId(),\n+                appOrgInfoBean.getOrgInfoId());\n+      }\n+      if (participantDetails == null) {\n+        return prepareEmailNotExistsErrorResponse(response);\n+      }\n+      boolean serviceResult =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails.getUserId());\n+\n+      if (Boolean.TRUE.equals(serviceResult)) {\n+        boolean serviceResponse = changeStatusInBothServers(participantDetails);\n+        if (serviceResponse) {\n+          verifyEmailIdResponse = prepareResponse(response, AppConstants.SUCCESS_RESPONSE);\n+          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+        } else {\n+          throw new SystemException();\n+        }\n+      } else {\n+        throw new InvalidUserIdException();\n+      }\n     } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n-\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_USERID_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n     } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_EMAIL_CODE_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n \n+    } catch (InvalidRequestException e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.INVALID_REQUEST_EXCEPTION);\n+      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+\n+    } catch (Exception e) {\n+      verifyEmailIdResponse = prepareResponse(response, AppConstants.SYSTEM_EXCEPTION);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n       return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private VerifyEmailIdResponse prepareResponse(HttpServletResponse response, String flag) {\n+    VerifyEmailIdResponse verifyEmailIdResponse = new VerifyEmailIdResponse();\n+    switch (flag) {\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+      case AppConstants.INVALID_REQUEST_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_400.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SYSTEM_EXCEPTION:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.EC_500.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+        verifyEmailIdResponse.setMessage(\n+            MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+        return verifyEmailIdResponse;\n+      case AppConstants.SUCCESS_RESPONSE:\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+            response);\n+        verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n+        verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n+        verifyEmailIdResponse.setVerified(true);\n+        return verifyEmailIdResponse;\n+\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  /*\n+   * prepare email doesn't exists Error Response\n+   */\n+  private ResponseEntity<?> prepareEmailNotExistsErrorResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS.getValue(),\n+        response);\n+    return null;\n+  }\n+\n+  /*\n+   * changing status in both servers\n+   */\n+  private boolean changeStatusInBothServers(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+    if (participantDetails != null) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMjQyOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438332429", "bodyText": "removed this validation from here.", "author": "aswinijena100", "createdAt": "2020-06-10T18:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNjY5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex 6f37e3ec2..c1bf575c0 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -63,10 +62,9 @@ public class VerifyEmailIdController {\n         || StringUtils.isBlank(appId)\n         || StringUtils.isBlank(orgId)\n         || StringUtils.isBlank(verificationForm.getCode())) {\n-\n-      verifyEmailIdResponse = prepareResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n       isValidAppMsg =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNzA3OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431907079", "bodyText": "Doesn't the logger already have the class information?", "author": "nikklassen", "createdAt": "2020-05-28T15:02:07Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -36,7 +49,7 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n       logger.info(\"FdaEaUserDetailsDaoImpl loadUserDetailsByUserId() - ends\");\n       return userDetailsBO;\n     } catch (Exception e) {\n-      logger.error(\"UserRegistrationController.registerUser(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl.loadUserDetailsByUserId(): \", e);", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMzk1MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438333951", "bodyText": "it was wrongly logged here as \"logger.error(\"UserRegistrationController.registerUser(): \", e);\"", "author": "aswinijena100", "createdAt": "2020-06-10T18:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNzA3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwODYxMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431908610", "bodyText": "if (participantDetails == null) {\n    throw new InvalidArgumentException();\n}", "author": "nikklassen", "createdAt": "2020-05-28T15:04:08Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNDExNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438334115", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwODYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\nindex e77e4ced5..8abe8d736 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n\n@@ -90,46 +89,15 @@ public class FdaEaUserDetailsDaoImpl implements FdaEaUserDetailsDao {\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  @Transactional\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n \n     logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      Transaction transaction = null;\n-      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n-        transaction = session.beginTransaction();\n-\n-        participantDetails.setEmailCode(null);\n-        participantDetails.setCodeExpireDate(null);\n-        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n-        session.update(participantDetails);\n-\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        userManagementUtil.updateUserInfoInAuthServer(\n-            accountStatus, participantDetails.getUserId());\n-\n-        transaction.commit();\n-        return true;\n-      } catch (Exception e) {\n-        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-        if (transaction != null) {\n-          try {\n-            transaction.rollback();\n-          } catch (Exception e1) {\n-            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-          }\n-        }\n-        if (e instanceof InvalidRequestException) {\n-          throw new InvalidRequestException();\n-        } else {\n-          throw new SystemException();\n-        }\n-      }\n-    } else {\n-      logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - ends\");\n-      return false;\n+    if (participantDetails == null) {\n+      throw new IllegalArgumentException();\n     }\n+    entityManager.merge(participantDetails);\n+    return true;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwODkyNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431908924", "bodyText": "@Transactional?", "author": "nikklassen", "createdAt": "2020-05-28T15:04:36Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {\n+      Transaction transaction = null;", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNDI3MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438334270", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwODkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\nindex e77e4ced5..8abe8d736 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n\n@@ -90,46 +89,15 @@ public class FdaEaUserDetailsDaoImpl implements FdaEaUserDetailsDao {\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  @Transactional\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n \n     logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      Transaction transaction = null;\n-      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n-        transaction = session.beginTransaction();\n-\n-        participantDetails.setEmailCode(null);\n-        participantDetails.setCodeExpireDate(null);\n-        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n-        session.update(participantDetails);\n-\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        userManagementUtil.updateUserInfoInAuthServer(\n-            accountStatus, participantDetails.getUserId());\n-\n-        transaction.commit();\n-        return true;\n-      } catch (Exception e) {\n-        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-        if (transaction != null) {\n-          try {\n-            transaction.rollback();\n-          } catch (Exception e1) {\n-            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-          }\n-        }\n-        if (e instanceof InvalidRequestException) {\n-          throw new InvalidRequestException();\n-        } else {\n-          throw new SystemException();\n-        }\n-      }\n-    } else {\n-      logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - ends\");\n-      return false;\n+    if (participantDetails == null) {\n+      throw new IllegalArgumentException();\n     }\n+    entityManager.merge(participantDetails);\n+    return true;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTA0MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431909040", "bodyText": "Constant?", "author": "nikklassen", "createdAt": "2020-05-28T15:04:46Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {\n+      Transaction transaction = null;\n+      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+        transaction = session.beginTransaction();\n+\n+        participantDetails.setEmailCode(null);\n+        participantDetails.setCodeExpireDate(null);\n+        participantDetails.setStatus(1); // status 1--->> user's emailId verified", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNDMxMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438334313", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\nindex e77e4ced5..8abe8d736 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n\n@@ -90,46 +89,15 @@ public class FdaEaUserDetailsDaoImpl implements FdaEaUserDetailsDao {\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  @Transactional\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n \n     logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      Transaction transaction = null;\n-      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n-        transaction = session.beginTransaction();\n-\n-        participantDetails.setEmailCode(null);\n-        participantDetails.setCodeExpireDate(null);\n-        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n-        session.update(participantDetails);\n-\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        userManagementUtil.updateUserInfoInAuthServer(\n-            accountStatus, participantDetails.getUserId());\n-\n-        transaction.commit();\n-        return true;\n-      } catch (Exception e) {\n-        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-        if (transaction != null) {\n-          try {\n-            transaction.rollback();\n-          } catch (Exception e1) {\n-            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-          }\n-        }\n-        if (e instanceof InvalidRequestException) {\n-          throw new InvalidRequestException();\n-        } else {\n-          throw new SystemException();\n-        }\n-      }\n-    } else {\n-      logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - ends\");\n-      return false;\n+    if (participantDetails == null) {\n+      throw new IllegalArgumentException();\n     }\n+    entityManager.merge(participantDetails);\n+    return true;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTc2MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431909761", "bodyText": "You should create another constructor that wraps the thrown exception to help with debugging.", "author": "nikklassen", "createdAt": "2020-05-28T15:05:50Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {\n+      Transaction transaction = null;\n+      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+        transaction = session.beginTransaction();\n+\n+        participantDetails.setEmailCode(null);\n+        participantDetails.setCodeExpireDate(null);\n+        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n+        session.update(participantDetails);\n+\n+        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+        accountStatus.setEmailVerified(true);\n+        userManagementUtil.updateUserInfoInAuthServer(\n+            accountStatus, participantDetails.getUserId());\n+\n+        transaction.commit();\n+        return true;\n+      } catch (Exception e) {\n+        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n+        if (transaction != null) {\n+          try {\n+            transaction.rollback();\n+          } catch (Exception e1) {\n+            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n+          }\n+        }\n+        if (e instanceof InvalidRequestException) {\n+          throw new InvalidRequestException();", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNjEwNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438336107", "bodyText": "simplified the method to increase readability", "author": "aswinijena100", "createdAt": "2020-06-10T18:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\nindex e77e4ced5..8abe8d736 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n\n@@ -90,46 +89,15 @@ public class FdaEaUserDetailsDaoImpl implements FdaEaUserDetailsDao {\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  @Transactional\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n \n     logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      Transaction transaction = null;\n-      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n-        transaction = session.beginTransaction();\n-\n-        participantDetails.setEmailCode(null);\n-        participantDetails.setCodeExpireDate(null);\n-        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n-        session.update(participantDetails);\n-\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        userManagementUtil.updateUserInfoInAuthServer(\n-            accountStatus, participantDetails.getUserId());\n-\n-        transaction.commit();\n-        return true;\n-      } catch (Exception e) {\n-        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-        if (transaction != null) {\n-          try {\n-            transaction.rollback();\n-          } catch (Exception e1) {\n-            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-          }\n-        }\n-        if (e instanceof InvalidRequestException) {\n-          throw new InvalidRequestException();\n-        } else {\n-          throw new SystemException();\n-        }\n-      }\n-    } else {\n-      logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - ends\");\n-      return false;\n+    if (participantDetails == null) {\n+      throw new IllegalArgumentException();\n     }\n+    entityManager.merge(participantDetails);\n+    return true;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDA3MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431910070", "bodyText": "Same issues as the previous method.", "author": "nikklassen", "createdAt": "2020-05-28T15:06:17Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java", "diffHunk": "@@ -71,8 +84,87 @@ public UserDetailsBO loadEmailCodeByUserId(String userId) throws SystemException\n         return dbResponse;\n       }\n     } catch (Exception e) {\n-      logger.error(\"FdaEaUserDetailsDaoImpl.loadEmailCodeByUserId(): \", e);\n+      logger.error(\"FdaEaUserDetailsDaoImpl loadEmailCodeByUserId(): \", e);\n       throw new SystemException();\n     }\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+\n+    logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n+    if (participantDetails != null) {\n+      Transaction transaction = null;\n+      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n+        transaction = session.beginTransaction();\n+\n+        participantDetails.setEmailCode(null);\n+        participantDetails.setCodeExpireDate(null);\n+        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n+        session.update(participantDetails);\n+\n+        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+        accountStatus.setEmailVerified(true);\n+        userManagementUtil.updateUserInfoInAuthServer(\n+            accountStatus, participantDetails.getUserId());\n+\n+        transaction.commit();\n+        return true;\n+      } catch (Exception e) {\n+        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n+        if (transaction != null) {\n+          try {\n+            transaction.rollback();\n+          } catch (Exception e1) {\n+            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n+          }\n+        }\n+        if (e instanceof InvalidRequestException) {\n+          throw new InvalidRequestException();\n+        } else {\n+          throw new SystemException();\n+        }\n+      }\n+    } else {\n+      logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - ends\");\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public boolean saveAllRecords(", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNjc1Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438336756", "bodyText": "Not yet handled. This is part of registration flow. Will modify as part of separate PR", "author": "aswinijena100", "createdAt": "2020-06-10T18:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\nindex e77e4ced5..8abe8d736 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/dao/FdaEaUserDetailsDaoImpl.java\n\n@@ -90,46 +89,15 @@ public class FdaEaUserDetailsDaoImpl implements FdaEaUserDetailsDao {\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  @Transactional\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n \n     logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      Transaction transaction = null;\n-      try (Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession()) {\n-        transaction = session.beginTransaction();\n-\n-        participantDetails.setEmailCode(null);\n-        participantDetails.setCodeExpireDate(null);\n-        participantDetails.setStatus(1); // status 1--->> user's emailId verified\n-        session.update(participantDetails);\n-\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        userManagementUtil.updateUserInfoInAuthServer(\n-            accountStatus, participantDetails.getUserId());\n-\n-        transaction.commit();\n-        return true;\n-      } catch (Exception e) {\n-        logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-        if (transaction != null) {\n-          try {\n-            transaction.rollback();\n-          } catch (Exception e1) {\n-            logger.error(\"FdaEaUserDetailsDaoImpl updateStatus(): \", e);\n-          }\n-        }\n-        if (e instanceof InvalidRequestException) {\n-          throw new InvalidRequestException();\n-        } else {\n-          throw new SystemException();\n-        }\n-      }\n-    } else {\n-      logger.info(\"FdaEaUserDetailsDaoImpl updateStatus() - ends\");\n-      return false;\n+    if (participantDetails == null) {\n+      throw new IllegalArgumentException();\n     }\n+    entityManager.merge(participantDetails);\n+    return true;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMTE5OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431911198", "bodyText": "if (userId == null) {\n    throw new Invalid...Exception();\n}", "author": "nikklassen", "createdAt": "2020-05-28T15:07:50Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,11 +77,11 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n+  public boolean verifyCode(String code, String userId)\n+      throws InvalidUserIdException, InvalidEmailCodeException, SystemException {\n \n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - startes\");\n+    boolean response = false;\n     UserDetailsBO daoResopnse = null;\n     if (userId != null) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNjk0OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438336948", "bodyText": "changed as suggested", "author": "aswinijena100", "createdAt": "2020-06-10T18:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMTE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\nindex 5cb3ee66b..a8d9fc21c 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n\n@@ -77,41 +81,46 @@ public class FdaEaUserDetailsServiceImpl implements FdaEaUserDetailsService {\n   }\n \n   @Override\n-  public boolean verifyCode(String code, String userId)\n-      throws InvalidUserIdException, InvalidEmailCodeException, SystemException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - startes\");\n-    boolean response = false;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && LocalDateTime.now().isBefore(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-          return true;\n-        } else {\n-          logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n-          throw new InvalidEmailCodeException();\n-        }\n-      } else {\n-        logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n-        throw new InvalidUserIdException();\n-      }\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n+    boolean result = code == null || participantDetails == null;\n+    if (result) {\n+      throw new IllegalArgumentException();\n+    }\n+    if (code.equals(participantDetails.getEmailCode())\n+        && LocalDateTime.now().isBefore(participantDetails.getCodeExpireDate())) {\n+      return true;\n+    } else {\n+      logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+      return false;\n     }\n-    return response;\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n     logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      return userDetailsDao.updateStatus(participantDetails);\n-    } else {\n-      logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - ends\");\n-      return false;\n+    UserDetailsBO userDetailsBO = SerializationUtils.clone(participantDetails);\n+    userDetailsBO.setUserDetailsId(participantDetails.getUserDetailsId());\n+    userDetailsBO.setEmailCode(null);\n+    userDetailsBO.setCodeExpireDate(null);\n+    userDetailsBO.setStatus(\n+        AppConstants.EMAILID_VERIFIED_STATUS); // status 1--->> user's emailId verified\n+    boolean status = userDetailsDao.updateStatus(userDetailsBO);\n+\n+    if (status) {\n+      UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+      accountStatus.setEmailVerified(true);\n+      UpdateAccountInfoResponseBean value =\n+          userManagementUtil.updateUserInfoInAuthServer(\n+              accountStatus, participantDetails.getUserId());\n+      if (value.getHttpStatusCode() != 200) {\n+        status = false; // rolling back in registration server and returning false.\n+        boolean rollbackStatus = userDetailsDao.updateStatus(participantDetails);\n+        if (!rollbackStatus) {\n+          logger.error(\"Failed to rollback email status.\");\n+        }\n+      }\n     }\n+    return status;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMTI4Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431911283", "bodyText": "typo", "author": "nikklassen", "createdAt": "2020-05-28T15:07:57Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,11 +77,11 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n+  public boolean verifyCode(String code, String userId)\n+      throws InvalidUserIdException, InvalidEmailCodeException, SystemException {\n \n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - startes\");", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNzI5Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438337292", "bodyText": "corrected typo", "author": "aswinijena100", "createdAt": "2020-06-10T18:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMTI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\nindex 5cb3ee66b..a8d9fc21c 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n\n@@ -77,41 +81,46 @@ public class FdaEaUserDetailsServiceImpl implements FdaEaUserDetailsService {\n   }\n \n   @Override\n-  public boolean verifyCode(String code, String userId)\n-      throws InvalidUserIdException, InvalidEmailCodeException, SystemException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - startes\");\n-    boolean response = false;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && LocalDateTime.now().isBefore(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-          return true;\n-        } else {\n-          logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n-          throw new InvalidEmailCodeException();\n-        }\n-      } else {\n-        logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n-        throw new InvalidUserIdException();\n-      }\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n+    boolean result = code == null || participantDetails == null;\n+    if (result) {\n+      throw new IllegalArgumentException();\n+    }\n+    if (code.equals(participantDetails.getEmailCode())\n+        && LocalDateTime.now().isBefore(participantDetails.getCodeExpireDate())) {\n+      return true;\n+    } else {\n+      logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+      return false;\n     }\n-    return response;\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n     logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      return userDetailsDao.updateStatus(participantDetails);\n-    } else {\n-      logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - ends\");\n-      return false;\n+    UserDetailsBO userDetailsBO = SerializationUtils.clone(participantDetails);\n+    userDetailsBO.setUserDetailsId(participantDetails.getUserDetailsId());\n+    userDetailsBO.setEmailCode(null);\n+    userDetailsBO.setCodeExpireDate(null);\n+    userDetailsBO.setStatus(\n+        AppConstants.EMAILID_VERIFIED_STATUS); // status 1--->> user's emailId verified\n+    boolean status = userDetailsDao.updateStatus(userDetailsBO);\n+\n+    if (status) {\n+      UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+      accountStatus.setEmailVerified(true);\n+      UpdateAccountInfoResponseBean value =\n+          userManagementUtil.updateUserInfoInAuthServer(\n+              accountStatus, participantDetails.getUserId());\n+      if (value.getHttpStatusCode() != 200) {\n+        status = false; // rolling back in registration server and returning false.\n+        boolean rollbackStatus = userDetailsDao.updateStatus(participantDetails);\n+        if (!rollbackStatus) {\n+          logger.error(\"Failed to rollback email status.\");\n+        }\n+      }\n     }\n+    return status;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMjUzMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431912532", "bodyText": "All code paths either throw an Exception or return true. You should either return false and throw and exception from the caller, or return void.", "author": "nikklassen", "createdAt": "2020-05-28T15:09:40Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -90,26 +90,28 @@ public VerifyCodeResponse verifyCode(String code, String userId)\n         if (code.equals(daoResopnse.getEmailCode())\n             && LocalDateTime.now().isBefore(daoResopnse.getCodeExpireDate())) {\n           logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n-\n-          if (updatedUserDetails != null) {\n-            if (updatedUserDetails.getStatus() == 1) {\n-              response = new VerifyCodeResponse();\n-              response.setEmailId(updatedUserDetails.getEmail());\n-              response.setIsCodeVerified(true);\n-              return response;\n-            } else return response;\n-          } else throw new SystemException();\n-        } else throw new InvalidEmailCodeException();\n+          return true;", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNzQyNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438337427", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMjUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\nindex 5cb3ee66b..a8d9fc21c 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n\n@@ -77,41 +81,46 @@ public class FdaEaUserDetailsServiceImpl implements FdaEaUserDetailsService {\n   }\n \n   @Override\n-  public boolean verifyCode(String code, String userId)\n-      throws InvalidUserIdException, InvalidEmailCodeException, SystemException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - startes\");\n-    boolean response = false;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && LocalDateTime.now().isBefore(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-          return true;\n-        } else {\n-          logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n-          throw new InvalidEmailCodeException();\n-        }\n-      } else {\n-        logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n-        throw new InvalidUserIdException();\n-      }\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n+    boolean result = code == null || participantDetails == null;\n+    if (result) {\n+      throw new IllegalArgumentException();\n+    }\n+    if (code.equals(participantDetails.getEmailCode())\n+        && LocalDateTime.now().isBefore(participantDetails.getCodeExpireDate())) {\n+      return true;\n+    } else {\n+      logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+      return false;\n     }\n-    return response;\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n     logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      return userDetailsDao.updateStatus(participantDetails);\n-    } else {\n-      logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - ends\");\n-      return false;\n+    UserDetailsBO userDetailsBO = SerializationUtils.clone(participantDetails);\n+    userDetailsBO.setUserDetailsId(participantDetails.getUserDetailsId());\n+    userDetailsBO.setEmailCode(null);\n+    userDetailsBO.setCodeExpireDate(null);\n+    userDetailsBO.setStatus(\n+        AppConstants.EMAILID_VERIFIED_STATUS); // status 1--->> user's emailId verified\n+    boolean status = userDetailsDao.updateStatus(userDetailsBO);\n+\n+    if (status) {\n+      UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+      accountStatus.setEmailVerified(true);\n+      UpdateAccountInfoResponseBean value =\n+          userManagementUtil.updateUserInfoInAuthServer(\n+              accountStatus, participantDetails.getUserId());\n+      if (value.getHttpStatusCode() != 200) {\n+        status = false; // rolling back in registration server and returning false.\n+        boolean rollbackStatus = userDetailsDao.updateStatus(participantDetails);\n+        if (!rollbackStatus) {\n+          logger.error(\"Failed to rollback email status.\");\n+        }\n+      }\n     }\n+    return status;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMjk3Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431912977", "bodyText": "Same as before, let updateStatus do its own validation.", "author": "nikklassen", "createdAt": "2020-05-28T15:10:17Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -90,26 +90,28 @@ public VerifyCodeResponse verifyCode(String code, String userId)\n         if (code.equals(daoResopnse.getEmailCode())\n             && LocalDateTime.now().isBefore(daoResopnse.getCodeExpireDate())) {\n           logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n-\n-          if (updatedUserDetails != null) {\n-            if (updatedUserDetails.getStatus() == 1) {\n-              response = new VerifyCodeResponse();\n-              response.setEmailId(updatedUserDetails.getEmail());\n-              response.setIsCodeVerified(true);\n-              return response;\n-            } else return response;\n-          } else throw new SystemException();\n-        } else throw new InvalidEmailCodeException();\n+          return true;\n+        } else {\n+          logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+          throw new InvalidEmailCodeException();\n+        }\n       } else {\n-        logger.info(\"No User Found Exception\");\n+        logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n         throw new InvalidUserIdException();\n       }\n     }\n     return response;\n   }\n+\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails)\n+      throws InvalidRequestException, SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n+    if (participantDetails != null) {", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNzQ4OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438337489", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMjk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\nindex 5cb3ee66b..a8d9fc21c 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n\n@@ -77,41 +81,46 @@ public class FdaEaUserDetailsServiceImpl implements FdaEaUserDetailsService {\n   }\n \n   @Override\n-  public boolean verifyCode(String code, String userId)\n-      throws InvalidUserIdException, InvalidEmailCodeException, SystemException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - startes\");\n-    boolean response = false;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && LocalDateTime.now().isBefore(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-          return true;\n-        } else {\n-          logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n-          throw new InvalidEmailCodeException();\n-        }\n-      } else {\n-        logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n-        throw new InvalidUserIdException();\n-      }\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n+    boolean result = code == null || participantDetails == null;\n+    if (result) {\n+      throw new IllegalArgumentException();\n+    }\n+    if (code.equals(participantDetails.getEmailCode())\n+        && LocalDateTime.now().isBefore(participantDetails.getCodeExpireDate())) {\n+      return true;\n+    } else {\n+      logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+      return false;\n     }\n-    return response;\n   }\n \n   @Override\n-  public boolean updateStatus(UserDetailsBO participantDetails)\n-      throws InvalidRequestException, SystemException {\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n     logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n-    if (participantDetails != null) {\n-      return userDetailsDao.updateStatus(participantDetails);\n-    } else {\n-      logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - ends\");\n-      return false;\n+    UserDetailsBO userDetailsBO = SerializationUtils.clone(participantDetails);\n+    userDetailsBO.setUserDetailsId(participantDetails.getUserDetailsId());\n+    userDetailsBO.setEmailCode(null);\n+    userDetailsBO.setCodeExpireDate(null);\n+    userDetailsBO.setStatus(\n+        AppConstants.EMAILID_VERIFIED_STATUS); // status 1--->> user's emailId verified\n+    boolean status = userDetailsDao.updateStatus(userDetailsBO);\n+\n+    if (status) {\n+      UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+      accountStatus.setEmailVerified(true);\n+      UpdateAccountInfoResponseBean value =\n+          userManagementUtil.updateUserInfoInAuthServer(\n+              accountStatus, participantDetails.getUserId());\n+      if (value.getHttpStatusCode() != 200) {\n+        status = false; // rolling back in registration server and returning false.\n+        boolean rollbackStatus = userDetailsDao.updateStatus(participantDetails);\n+        if (!rollbackStatus) {\n+          logger.error(\"Failed to rollback email status.\");\n+        }\n+      }\n     }\n+    return status;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjIzMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431916230", "bodyText": "move log outside if statement so you don't have to duplicate?", "author": "nikklassen", "createdAt": "2020-05-28T15:14:43Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -173,40 +168,13 @@ public UpdateAccountInfoResponseBean updateUserInfoInAuthServer(\n \n     } catch (RestClientResponseException e) {\n \n-      if (e.getRawStatusCode() == 401) {\n-        Set<Entry<String, List<String>>> headerSet = e.getResponseHeaders().entrySet();\n-        authResponse = new UpdateAccountInfoResponseBean();\n-        for (Entry<String, List<String>> entry : headerSet) {\n-\n-          if (AppConstants.STATUS.equals(entry.getKey())) {\n-            authResponse.setCode(entry.getValue().get(0));\n-          }\n-          if (AppConstants.STATUS_MESSAGE.equals(entry.getKey())) {\n-            authResponse.setMessage(entry.getValue().get(0));\n-          }\n-        }\n-        authResponse.setHttpStatusCode(401 + \"\");\n-\n-      } else if (e.getRawStatusCode() == 500) {\n-        authResponse = new UpdateAccountInfoResponseBean();\n-        authResponse.setHttpStatusCode(500 + \"\");\n-\n+      if (e.getRawStatusCode() == 400) {\n+        logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNzcyMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438337722", "bodyText": "refactored code", "author": "aswinijena100", "createdAt": "2020-06-10T18:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\nindex b7d9b617e..46cb3c9db 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\n\n@@ -131,50 +131,28 @@ public class UserManagementUtil {\n   }\n \n   public UpdateAccountInfoResponseBean updateUserInfoInAuthServer(\n-      UpdateAccountInfo accountInfo, String userId)\n-      throws SystemException, InvalidRequestException {\n+      UpdateAccountInfo accountInfo, String userId) {\n     logger.info(\"(Util)....UserManagementUtil.updateUserInfoInAuthServer()......STARTED\");\n-    UpdateAccountInfoResponseBean authResponse = null;\n \n     HttpHeaders headers = new HttpHeaders();\n     headers.setContentType(MediaType.APPLICATION_JSON);\n     headers.set(AppConstants.USER_ID, userId);\n \n     HttpEntity<UpdateAccountInfo> request = new HttpEntity<>(accountInfo, headers);\n-    ObjectMapper objectMapper = null;\n-    try {\n+    ResponseEntity<?> responseEntity = null;\n \n-      ResponseEntity<?> responseEntity =\n+    try {\n+      responseEntity =\n           restTemplate.exchange(\n               appConfig.getAuthServerUpdateStatusUrl(), HttpMethod.POST, request, String.class);\n-\n-      if (responseEntity.getStatusCode() == HttpStatus.OK) {\n-        String body = (String) responseEntity.getBody();\n-        objectMapper = new ObjectMapper();\n-\n-        try {\n-          authResponse = objectMapper.readValue(body, UpdateAccountInfoResponseBean.class);\n-          return authResponse;\n-        } catch (JsonParseException e) {\n-          return authResponse;\n-        } catch (JsonMappingException e) {\n-          return authResponse;\n-        } catch (IOException e) {\n-          return authResponse;\n-        }\n-      } else {\n-        return authResponse;\n-      }\n+      return new UpdateAccountInfoResponseBean(\n+          responseEntity.getStatusCodeValue(), responseEntity.getStatusCode().getReasonPhrase());\n \n     } catch (RestClientResponseException e) {\n-\n-      if (e.getRawStatusCode() == 400) {\n-        logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");\n-        throw new InvalidRequestException();\n-      } else {\n-        logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");\n-        throw new SystemException();\n-      }\n+      logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");\n+      return new UpdateAccountInfoResponseBean(\n+          HttpStatus.INTERNAL_SERVER_ERROR.value(),\n+          HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase());\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjQ2OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431916468", "bodyText": "wrap original exception", "author": "nikklassen", "createdAt": "2020-05-28T15:15:02Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -173,40 +168,13 @@ public UpdateAccountInfoResponseBean updateUserInfoInAuthServer(\n \n     } catch (RestClientResponseException e) {\n \n-      if (e.getRawStatusCode() == 401) {\n-        Set<Entry<String, List<String>>> headerSet = e.getResponseHeaders().entrySet();\n-        authResponse = new UpdateAccountInfoResponseBean();\n-        for (Entry<String, List<String>> entry : headerSet) {\n-\n-          if (AppConstants.STATUS.equals(entry.getKey())) {\n-            authResponse.setCode(entry.getValue().get(0));\n-          }\n-          if (AppConstants.STATUS_MESSAGE.equals(entry.getKey())) {\n-            authResponse.setMessage(entry.getValue().get(0));\n-          }\n-        }\n-        authResponse.setHttpStatusCode(401 + \"\");\n-\n-      } else if (e.getRawStatusCode() == 500) {\n-        authResponse = new UpdateAccountInfoResponseBean();\n-        authResponse.setHttpStatusCode(500 + \"\");\n-\n+      if (e.getRawStatusCode() == 400) {\n+        logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");\n+        throw new InvalidRequestException();", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNzkwNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438337906", "bodyText": "refactored code", "author": "aswinijena100", "createdAt": "2020-06-10T18:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\nindex b7d9b617e..46cb3c9db 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\n\n@@ -131,50 +131,28 @@ public class UserManagementUtil {\n   }\n \n   public UpdateAccountInfoResponseBean updateUserInfoInAuthServer(\n-      UpdateAccountInfo accountInfo, String userId)\n-      throws SystemException, InvalidRequestException {\n+      UpdateAccountInfo accountInfo, String userId) {\n     logger.info(\"(Util)....UserManagementUtil.updateUserInfoInAuthServer()......STARTED\");\n-    UpdateAccountInfoResponseBean authResponse = null;\n \n     HttpHeaders headers = new HttpHeaders();\n     headers.setContentType(MediaType.APPLICATION_JSON);\n     headers.set(AppConstants.USER_ID, userId);\n \n     HttpEntity<UpdateAccountInfo> request = new HttpEntity<>(accountInfo, headers);\n-    ObjectMapper objectMapper = null;\n-    try {\n+    ResponseEntity<?> responseEntity = null;\n \n-      ResponseEntity<?> responseEntity =\n+    try {\n+      responseEntity =\n           restTemplate.exchange(\n               appConfig.getAuthServerUpdateStatusUrl(), HttpMethod.POST, request, String.class);\n-\n-      if (responseEntity.getStatusCode() == HttpStatus.OK) {\n-        String body = (String) responseEntity.getBody();\n-        objectMapper = new ObjectMapper();\n-\n-        try {\n-          authResponse = objectMapper.readValue(body, UpdateAccountInfoResponseBean.class);\n-          return authResponse;\n-        } catch (JsonParseException e) {\n-          return authResponse;\n-        } catch (JsonMappingException e) {\n-          return authResponse;\n-        } catch (IOException e) {\n-          return authResponse;\n-        }\n-      } else {\n-        return authResponse;\n-      }\n+      return new UpdateAccountInfoResponseBean(\n+          responseEntity.getStatusCodeValue(), responseEntity.getStatusCode().getReasonPhrase());\n \n     } catch (RestClientResponseException e) {\n-\n-      if (e.getRawStatusCode() == 400) {\n-        logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");\n-        throw new InvalidRequestException();\n-      } else {\n-        logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");\n-        throw new SystemException();\n-      }\n+      logger.info(\"(Util)....UserRegistrationController.updateUserInfoInAuthServer()......ENDED\");\n+      return new UpdateAccountInfoResponseBean(\n+          HttpStatus.INTERNAL_SERVER_ERROR.value(),\n+          HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase());\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTU4MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r431919581", "bodyText": "Use HttpStatus code instead", "author": "nikklassen", "createdAt": "2020-05-28T15:19:17Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/MyStudiesUserRegUtil.java", "diffHunk": "@@ -50,6 +50,9 @@\n     STATUS_129(\"129\"), // Client Id is missing\n     STATUS_130(\"130\"), // Secret Key is missing\n \n+    STATUS_400(\"400\"),", "originalCommit": "9d153371e1ecfb6578c154b03a9c1e7ffa195596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzODE4MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438338180", "bodyText": "changed as suggested..", "author": "aswinijena100", "createdAt": "2020-06-10T18:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/MyStudiesUserRegUtil.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/MyStudiesUserRegUtil.java\nindex ebd523d2b..b06efff03 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/MyStudiesUserRegUtil.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/MyStudiesUserRegUtil.java\n\n@@ -50,9 +50,6 @@ public class MyStudiesUserRegUtil {\n     STATUS_129(\"129\"), // Client Id is missing\n     STATUS_130(\"130\"), // Secret Key is missing\n \n-    STATUS_400(\"400\"),\n-    STATUS_401(\"401\"),\n-\n     EC_500(\"500\"), // Internal Server Error\n \n     INVALID_EMAILID(\"Enter a valid emailId\"),\n"}}, {"oid": "1d1351fff9816f936498af4c2605a95b36f7aa11", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1d1351fff9816f936498af4c2605a95b36f7aa11", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-05-29T05:56:35Z", "type": "commit"}, {"oid": "6a7739ebae1d9e5fbf779622b291603ec47dbf29", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6a7739ebae1d9e5fbf779622b291603ec47dbf29", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-06-02T16:43:46Z", "type": "commit"}, {"oid": "1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1d485c74a75e6ab87ecc8e4f146ab8308c3de809", "message": "PR comment issue fixes", "committedDate": "2020-06-10T18:20:04Z", "type": "commit"}, {"oid": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5cf6db4d27ced2c86d7e08583022b88cf72e346b", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-06-10T18:52:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MTA0Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438891043", "bodyText": "Remove debugging statement", "author": "nikklassen", "createdAt": "2020-06-11T15:50:29Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java", "diffHunk": "@@ -228,21 +177,21 @@ public DeleteAccountInfoResponseBean deleteUserInfoInAuthServer(\n           restTemplate.exchange(\n               appConfig.getAuthServerDeleteStatusUrl(), HttpMethod.DELETE, request, String.class);\n \n-      if (responseEntity.getStatusCode() != HttpStatus.OK) {\n-        return authResponse;\n-      }\n-\n-      String body = (String) responseEntity.getBody();\n-      objectMapper = new ObjectMapper();\n-\n-      try {\n-        authResponse = objectMapper.readValue(body, DeleteAccountInfoResponseBean.class);\n-        return authResponse;\n-      } catch (JsonParseException e) {\n-        return authResponse;\n-      } catch (JsonMappingException e) {\n-        return authResponse;\n-      } catch (IOException e) {\n+      if (responseEntity.getStatusCode() == HttpStatus.OK) {\n+        String body = (String) responseEntity.getBody();\n+        objectMapper = new ObjectMapper();\n+        try {\n+          authResponse = objectMapper.readValue(body, DeleteAccountInfoResponseBean.class);\n+          logger.info(\"authResponse: \" + authResponse);", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzOTA2Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439539067", "bodyText": "removed unwanted debugging statements.", "author": "aswinijena100", "createdAt": "2020-06-12T17:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MTA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\nindex cb2ac2878..b0b32ab31 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/UserManagementUtil.java\n\n@@ -182,7 +181,6 @@ public class UserManagementUtil {\n         objectMapper = new ObjectMapper();\n         try {\n           authResponse = objectMapper.readValue(body, DeleteAccountInfoResponseBean.class);\n-          logger.info(\"authResponse: \" + authResponse);\n           return authResponse;\n         } catch (JsonParseException e) {\n           return authResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzA3OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438893079", "bodyText": "These 4 values aren't used anywhere. Please remove.", "author": "nikklassen", "createdAt": "2020-06-11T15:52:40Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java", "diffHunk": "@@ -70,4 +70,19 @@ private AppConstants() {}\n   public static final String GATEWAY = \"Gateway\";\n \n   public static final String WITHDRAWN = \"Withdrawn\";\n+\n+  public static final String STATUS_200 = \"200\";\n+  public static final String STATUS_400 = \"400\";\n+  public static final String STATUS_401 = \"401\";\n+  public static final String OK = \"OK\";", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzOTI4Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439539287", "bodyText": "removed these unused constants.", "author": "aswinijena100", "createdAt": "2020-06-12T17:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java\nindex 1766627b9..d57bf7c6f 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java\n\n@@ -71,16 +71,11 @@ public class AppConstants {\n \n   public static final String WITHDRAWN = \"Withdrawn\";\n \n-  public static final String STATUS_200 = \"200\";\n-  public static final String STATUS_400 = \"400\";\n-  public static final String STATUS_401 = \"401\";\n-  public static final String OK = \"OK\";\n   public static final String MISSING_REQUIRED_PARAMETER = \"MissingRequiredParameter\";\n   public static final String INVALID_REQUEST_EXCEPTION = \"InvalidRequestException\";\n   public static final String INVALID_EMAIL_CODE_EXCEPTION = \"InvalidEmailCodeException\";\n   public static final String INVALID_USERID_EXCEPTION = \"InvalidUserIdException\";\n   public static final String SYSTEM_EXCEPTION = \"SystemException\";\n-  public static final String SUCCESS_RESPONSE = \"SuccessResponse\";\n   public static final String EMAIL_EXISTS_RESPONSE = \"EmailExistsResponse\";\n   public static final String INVALID_APPID_AND_ORGID = \"INVALID_APPID_AND_ORGID\";\n   public static final Integer EMAILID_VERIFIED_STATUS = 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzYwNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438893604", "bodyText": "SUCCESS_RESPONSE, EMAIL_EXISTS_RESPONSE and INVALID_APPID_AND_ORGID are also not used.", "author": "nikklassen", "createdAt": "2020-06-11T15:53:10Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java", "diffHunk": "@@ -70,4 +70,19 @@ private AppConstants() {}\n   public static final String GATEWAY = \"Gateway\";\n \n   public static final String WITHDRAWN = \"Withdrawn\";\n+\n+  public static final String STATUS_200 = \"200\";\n+  public static final String STATUS_400 = \"400\";\n+  public static final String STATUS_401 = \"401\";\n+  public static final String OK = \"OK\";\n+  public static final String MISSING_REQUIRED_PARAMETER = \"MissingRequiredParameter\";\n+  public static final String INVALID_REQUEST_EXCEPTION = \"InvalidRequestException\";\n+  public static final String INVALID_EMAIL_CODE_EXCEPTION = \"InvalidEmailCodeException\";\n+  public static final String INVALID_USERID_EXCEPTION = \"InvalidUserIdException\";\n+  public static final String SYSTEM_EXCEPTION = \"SystemException\";\n+  public static final String SUCCESS_RESPONSE = \"SuccessResponse\";\n+  public static final String EMAIL_EXISTS_RESPONSE = \"EmailExistsResponse\";\n+  public static final String INVALID_APPID_AND_ORGID = \"INVALID_APPID_AND_ORGID\";", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDExNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439540115", "bodyText": "removed only SUCCESS_RESPONSE constant. remaining constants are used in a separate file which is not part of this PR.", "author": "aswinijena100", "createdAt": "2020-06-12T17:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2ODk3OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439568979", "bodyText": "If they aren't in this PR then the related code should not be in this PR either. Please remove.", "author": "nikklassen", "createdAt": "2020-06-12T18:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMzc3Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439733776", "bodyText": "Removed unused one.", "author": "aswinijena100", "createdAt": "2020-06-13T11:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java\nindex 1766627b9..d57bf7c6f 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/AppConstants.java\n\n@@ -71,16 +71,11 @@ public class AppConstants {\n \n   public static final String WITHDRAWN = \"Withdrawn\";\n \n-  public static final String STATUS_200 = \"200\";\n-  public static final String STATUS_400 = \"400\";\n-  public static final String STATUS_401 = \"401\";\n-  public static final String OK = \"OK\";\n   public static final String MISSING_REQUIRED_PARAMETER = \"MissingRequiredParameter\";\n   public static final String INVALID_REQUEST_EXCEPTION = \"InvalidRequestException\";\n   public static final String INVALID_EMAIL_CODE_EXCEPTION = \"InvalidEmailCodeException\";\n   public static final String INVALID_USERID_EXCEPTION = \"InvalidUserIdException\";\n   public static final String SYSTEM_EXCEPTION = \"SystemException\";\n-  public static final String SUCCESS_RESPONSE = \"SuccessResponse\";\n   public static final String EMAIL_EXISTS_RESPONSE = \"EmailExistsResponse\";\n   public static final String INVALID_APPID_AND_ORGID = \"INVALID_APPID_AND_ORGID\";\n   public static final Integer EMAILID_VERIFIED_STATUS = 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5Mzk1Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438893952", "bodyText": "Comment is unnecessary, constant name is clear.", "author": "nikklassen", "createdAt": "2020-06-11T15:53:33Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,39 +81,46 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && !LocalDateTime.now().isAfter(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n+    boolean result = code == null || participantDetails == null;\n+    if (result) {\n+      throw new IllegalArgumentException();\n+    }\n+    if (code.equals(participantDetails.getEmailCode())\n+        && LocalDateTime.now().isBefore(participantDetails.getCodeExpireDate())) {\n+      return true;\n+    } else {\n+      logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+      return false;\n+    }\n+  }\n \n-          if (updatedUserDetails != null) {\n-            if (updatedUserDetails.getStatus() == 1) {\n-              response = new VerifyCodeResponse();\n-              response.setEmailId(updatedUserDetails.getEmail());\n-              response.setIsCodeVerified(true);\n-              return response;\n-            } else return response;\n-          } else throw new SystemException();\n-        } else throw new InvalidEmailCodeException();\n-      } else {\n-        logger.info(\"No User Found Exception\");\n-        throw new InvalidUserIdException();\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n+    logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n+    UserDetailsBO userDetailsBO = SerializationUtils.clone(participantDetails);\n+    userDetailsBO.setUserDetailsId(participantDetails.getUserDetailsId());\n+    userDetailsBO.setEmailCode(null);\n+    userDetailsBO.setCodeExpireDate(null);\n+    userDetailsBO.setStatus(\n+        AppConstants.EMAILID_VERIFIED_STATUS); // status 1--->> user's emailId verified", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDI4Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439540286", "bodyText": "removed unnecessary comment as suggested.", "author": "aswinijena100", "createdAt": "2020-06-12T17:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5Mzk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\nindex a8d9fc21c..f02c739dd 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n\n@@ -81,7 +80,7 @@ public class FdaEaUserDetailsServiceImpl implements FdaEaUserDetailsService {\n   }\n \n   @Override\n-  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) {\n     logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n     boolean result = code == null || participantDetails == null;\n     if (result) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5NDU2Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438894567", "bodyText": "HttpStatus.OK", "author": "nikklassen", "createdAt": "2020-06-11T15:54:12Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,39 +81,46 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && !LocalDateTime.now().isAfter(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n+    boolean result = code == null || participantDetails == null;\n+    if (result) {\n+      throw new IllegalArgumentException();\n+    }\n+    if (code.equals(participantDetails.getEmailCode())\n+        && LocalDateTime.now().isBefore(participantDetails.getCodeExpireDate())) {\n+      return true;\n+    } else {\n+      logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - ends\");\n+      return false;\n+    }\n+  }\n \n-          if (updatedUserDetails != null) {\n-            if (updatedUserDetails.getStatus() == 1) {\n-              response = new VerifyCodeResponse();\n-              response.setEmailId(updatedUserDetails.getEmail());\n-              response.setIsCodeVerified(true);\n-              return response;\n-            } else return response;\n-          } else throw new SystemException();\n-        } else throw new InvalidEmailCodeException();\n-      } else {\n-        logger.info(\"No User Found Exception\");\n-        throw new InvalidUserIdException();\n+  @Override\n+  public boolean updateStatus(UserDetailsBO participantDetails) {\n+    logger.info(\"FdaEaUserDetailsServiceImpl updateStatus() - starts\");\n+    UserDetailsBO userDetailsBO = SerializationUtils.clone(participantDetails);\n+    userDetailsBO.setUserDetailsId(participantDetails.getUserDetailsId());\n+    userDetailsBO.setEmailCode(null);\n+    userDetailsBO.setCodeExpireDate(null);\n+    userDetailsBO.setStatus(\n+        AppConstants.EMAILID_VERIFIED_STATUS); // status 1--->> user's emailId verified\n+    boolean status = userDetailsDao.updateStatus(userDetailsBO);\n+\n+    if (status) {\n+      UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n+      accountStatus.setEmailVerified(true);\n+      UpdateAccountInfoResponseBean value =\n+          userManagementUtil.updateUserInfoInAuthServer(\n+              accountStatus, participantDetails.getUserId());\n+      if (value.getHttpStatusCode() != 200) {", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDQ0Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439540442", "bodyText": "replaced with HttpStatus.OK", "author": "aswinijena100", "createdAt": "2020-06-12T17:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5NDU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\nindex a8d9fc21c..f02c739dd 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n\n@@ -81,7 +80,7 @@ public class FdaEaUserDetailsServiceImpl implements FdaEaUserDetailsService {\n   }\n \n   @Override\n-  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) {\n     logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n     boolean result = code == null || participantDetails == null;\n     if (result) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5NTQyMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438895422", "bodyText": "No SystemException thrown.", "author": "nikklassen", "createdAt": "2020-06-11T15:55:18Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java", "diffHunk": "@@ -77,39 +81,46 @@ public UserDetailsBO loadUserDetailsByUserId(String userId) throws SystemExcepti\n   }\n \n   @Override\n-  public VerifyCodeResponse verifyCode(String code, String userId)\n-      throws SystemException, InvalidUserIdException, InvalidEmailCodeException {\n-\n-    logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - calls\");\n-    VerifyCodeResponse response = null;\n-    UserDetailsBO daoResopnse = null;\n-    if (userId != null) {\n-      daoResopnse = userDetailsDao.loadEmailCodeByUserId(userId);\n-\n-      if (daoResopnse != null) {\n-        if (code.equals(daoResopnse.getEmailCode())\n-            && !LocalDateTime.now().isAfter(daoResopnse.getCodeExpireDate())) {\n-          logger.info(\"(S)......OTP CODE VERIFIED as true\");\n-\n-          daoResopnse.setStatus(1);\n-          daoResopnse.setEmailCode(null);\n-          daoResopnse.setCodeExpireDate(null);\n-          UserDetailsBO updatedUserDetails = userDetailsDao.saveUser(daoResopnse);\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDU2NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439540565", "bodyText": "removed", "author": "aswinijena100", "createdAt": "2020-06-12T17:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5NTQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\nindex a8d9fc21c..f02c739dd 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/FdaEaUserDetailsServiceImpl.java\n\n@@ -81,7 +80,7 @@ public class FdaEaUserDetailsServiceImpl implements FdaEaUserDetailsService {\n   }\n \n   @Override\n-  public boolean verifyCode(String code, UserDetailsBO participantDetails) throws SystemException {\n+  public boolean verifyCode(String code, UserDetailsBO participantDetails) {\n     logger.info(\"FdaEaUserDetailsServiceImpl verifyCode() - starts\");\n     boolean result = code == null || participantDetails == null;\n     if (result) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzYxMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438943610", "bodyText": "Call this function directly", "author": "nikklassen", "createdAt": "2020-06-11T17:15:29Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -41,147 +41,103 @@\n \n   @Autowired private FdaEaUserDetailsService userDetailsService;\n \n-  @Autowired private UserManagementUtil userManagementUtil;\n-\n   @Autowired private CommonService commonService;\n \n+  @Autowired UserManagementProfileService userManagementProfService;\n+\n   @PostMapping(\"/verifyEmailId\")\n   public ResponseEntity<?> verifyEmailId(\n       @RequestBody EmailIdVerificationForm verificationForm,\n-      @RequestHeader(\"userId\") String userId,\n-      @RequestHeader(\"clientToken\") String clientToken,\n-      @RequestHeader(\"accessToken\") String accessToken,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n-\n-     if (StringUtils.isEmpty(clientToken)\n-        || StringUtils.isEmpty(accessToken)\n-        || StringUtils.isEmpty(userId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+    String isValidAppMsg = \"\";\n+    UserDetailsBO participantDetails = null;\n+\n+    if (verificationForm == null\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n-      verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-      VerifyCodeResponse serviceResult = userDetailsService.verifyCode(verificationCode, userId);\n-\n-      if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        UpdateAccountInfoResponseBean authResponse =\n-            userManagementUtil.updateUserInfoInAuthServer(\n-                accountStatus, userId, accessToken, clientToken);\n-\n-        if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              response);\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-          verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-          verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          commonService.createActivityLog(\n-              userId,\n-              \"User Verification\",\n-              \"User verified for email \" + serviceResult.getEmailId() + \".\");\n-          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-        } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-          if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-          } else {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-          }\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              500 + \"\",\n-              MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-              response);\n-\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-          verifyEmailIdResponse.setMessage(\n-              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-        }\n-      } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-    } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+      isValidAppMsg =\n+          commonService.validatedUserAppDetailsByAllApi(\n+              \"\", verificationForm.getEmailId(), appId, orgId);\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        return null;\n+      }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails = getParticipantDetails(verificationForm, appOrgInfoBean);\n+      }\n+      if (participantDetails == null) {\n+        ResponseBean responseBean =\n+            ResponseUtil.prepareBadRequestResponse(response, AppConstants.EMAIL_NOT_EXISTS);\n+        return new ResponseEntity<>(responseBean, HttpStatus.BAD_REQUEST);\n+      }\n+      boolean verifyEmailCodeResponse =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails);\n+\n+      if (!verifyEmailCodeResponse) {\n+        ResponseBean respBean =\n+            ResponseUtil.prepareBadRequestResponse(response, new InvalidEmailCodeException());\n+        return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n+      }\n+\n+      boolean serviceResponse = updateStatus(participantDetails);\n+      if (!serviceResponse) {\n+        ResponseBean respBean = ResponseUtil.prepareSystemExceptionResponse(response);\n+        return new ResponseEntity<>(respBean, HttpStatus.INTERNAL_SERVER_ERROR);\n+      }\n+\n+      ResponseBean respBean = ResponseUtil.prepareSuccessResponse(response);\n+      verifyEmailIdResponse =\n+          new VerifyEmailIdResponse(respBean.getCode(), respBean.getMessage(), true);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+\n+    } catch (IllegalArgumentException e) {\n+      ResponseBean respBean = ResponseUtil.prepareBadRequestResponse(response, e);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n-      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n \n+    } catch (SystemException e) {\n+      ResponseBean respBean = ResponseUtil.prepareSystemExceptionResponse(response);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+      return new ResponseEntity<>(respBean, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private UserDetailsBO getParticipantDetails(\n+      EmailIdVerificationForm verificationForm, AppOrgInfoBean appOrgInfoBean) {\n+    UserDetailsBO participantDetails = null;\n+    participantDetails =\n+        userManagementProfService.getParticipantDetailsByEmail(\n+            verificationForm.getEmailId(),\n+            appOrgInfoBean.getAppInfoId(),\n+            appOrgInfoBean.getOrgInfoId());\n+    return participantDetails;\n+  }\n+\n+  private boolean updateStatus(UserDetailsBO participantDetails) {\n+    return userDetailsService.updateStatus(participantDetails);", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDg5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439540890", "bodyText": "changed to call directly this function.", "author": "aswinijena100", "createdAt": "2020-06-12T17:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex c1bf575c0..6079dd44c 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -90,7 +89,7 @@ public class VerifyEmailIdController {\n         return new ResponseEntity<>(responseBean, HttpStatus.BAD_REQUEST);\n       }\n       boolean verifyEmailCodeResponse =\n-          verifyEmailCode(verificationForm.getCode().trim(), participantDetails);\n+          userDetailsService.verifyCode(verificationForm.getCode().trim(), participantDetails);\n \n       if (!verifyEmailCodeResponse) {\n         ResponseBean respBean =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzY1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438943650", "bodyText": "Call this function directly", "author": "nikklassen", "createdAt": "2020-06-11T17:15:33Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "diffHunk": "@@ -41,147 +41,103 @@\n \n   @Autowired private FdaEaUserDetailsService userDetailsService;\n \n-  @Autowired private UserManagementUtil userManagementUtil;\n-\n   @Autowired private CommonService commonService;\n \n+  @Autowired UserManagementProfileService userManagementProfService;\n+\n   @PostMapping(\"/verifyEmailId\")\n   public ResponseEntity<?> verifyEmailId(\n       @RequestBody EmailIdVerificationForm verificationForm,\n-      @RequestHeader(\"userId\") String userId,\n-      @RequestHeader(\"clientToken\") String clientToken,\n-      @RequestHeader(\"accessToken\") String accessToken,\n+      @RequestHeader(\"appId\") String appId,\n+      @RequestHeader(\"orgId\") String orgId,\n       @Context HttpServletResponse response) {\n+\n     logger.info(\"VerifyEmailIdController verifyEmailId() - starts\");\n     VerifyEmailIdResponse verifyEmailIdResponse = null;\n-    String verificationCode = \"\";\n-\n-     if (StringUtils.isEmpty(clientToken)\n-        || StringUtils.isEmpty(accessToken)\n-        || StringUtils.isEmpty(userId)\n-        || StringUtils.isEmpty(verificationForm.getCode())) {\n-\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n-          response);\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue());\n-      logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n+    String isValidAppMsg = \"\";\n+    UserDetailsBO participantDetails = null;\n+\n+    if (verificationForm == null\n+        || StringUtils.isBlank(verificationForm.getEmailId())\n+        || StringUtils.isBlank(appId)\n+        || StringUtils.isBlank(orgId)\n+        || StringUtils.isBlank(verificationForm.getCode())) {\n+      ResponseBean respBean =\n+          ResponseUtil.prepareBadRequestResponse(response, AppConstants.MISSING_REQUIRED_PARAMETER);\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n     }\n     try {\n-      verificationCode = verificationForm.getCode().trim(); // trim the surrounding whitespace.\n-      VerifyCodeResponse serviceResult = userDetailsService.verifyCode(verificationCode, userId);\n-\n-      if (serviceResult != null && Boolean.TRUE.equals(serviceResult.getIsCodeVerified())) {\n-        UpdateAccountInfo accountStatus = new UpdateAccountInfo();\n-        accountStatus.setEmailVerified(true);\n-        UpdateAccountInfoResponseBean authResponse =\n-            userManagementUtil.updateUserInfoInAuthServer(\n-                accountStatus, userId, accessToken, clientToken);\n-\n-        if (authResponse != null && \"200\".equals(authResponse.getCode())) {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              MyStudiesUserRegUtil.ErrorCodes.STATUS_200.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n-              response);\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(ErrorCode.EC_200.code());\n-          verifyEmailIdResponse.setMessage(ErrorCode.EC_200.errorMessage());\n-          verifyEmailIdResponse.setVerified(serviceResult.getIsCodeVerified());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          commonService.createActivityLog(\n-              userId,\n-              \"User Verification\",\n-              \"User verified for email \" + serviceResult.getEmailId() + \".\");\n-          return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n-\n-        } else if (authResponse != null && \"400\".equals(authResponse.getHttpStatusCode())) {\n-          if (AppConstants.INVALID_CLIENTID_SECRETKEY.equals(authResponse.getMessage())) {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.UNAUTHORIZED.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.UNAUTHORIZED);\n-          } else {\n-            MyStudiesUserRegUtil.getFailureResponse(\n-                authResponse.getCode(),\n-                MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-                authResponse.getMessage(),\n-                response);\n-            verifyEmailIdResponse = new VerifyEmailIdResponse();\n-            verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-            verifyEmailIdResponse.setMessage(\n-                MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-            logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-            return new ResponseEntity<>(authResponse, HttpStatus.BAD_REQUEST);\n-          }\n-        } else {\n-          MyStudiesUserRegUtil.getFailureResponse(\n-              500 + \"\",\n-              MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-              response);\n-\n-          verifyEmailIdResponse = new VerifyEmailIdResponse();\n-          verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-          verifyEmailIdResponse.setMessage(\n-              MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n-          logger.info(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE);\n-          return new ResponseEntity<>(authResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n-        }\n-      } else throw new InvalidUserIdException(); // InvalidEmailCodeException\n-    } catch (InvalidUserIdException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID.getValue());\n+      isValidAppMsg =\n+          commonService.validatedUserAppDetailsByAllApi(\n+              \"\", verificationForm.getEmailId(), appId, orgId);\n+\n+      if (!StringUtils.isNotEmpty(isValidAppMsg)) {\n+        MyStudiesUserRegUtil.getFailureResponse(\n+            MyStudiesUserRegUtil.ErrorCodes.STATUS_102.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+            MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG.getValue(),\n+            response);\n+        return null;\n+      }\n+      AppOrgInfoBean appOrgInfoBean =\n+          commonService.getUserAppDetailsByAllApi(\"\", verificationForm.getEmailId(), appId, orgId);\n+      if (appOrgInfoBean != null) {\n+        participantDetails = getParticipantDetails(verificationForm, appOrgInfoBean);\n+      }\n+      if (participantDetails == null) {\n+        ResponseBean responseBean =\n+            ResponseUtil.prepareBadRequestResponse(response, AppConstants.EMAIL_NOT_EXISTS);\n+        return new ResponseEntity<>(responseBean, HttpStatus.BAD_REQUEST);\n+      }\n+      boolean verifyEmailCodeResponse =\n+          verifyEmailCode(verificationForm.getCode().trim(), participantDetails);\n+\n+      if (!verifyEmailCodeResponse) {\n+        ResponseBean respBean =\n+            ResponseUtil.prepareBadRequestResponse(response, new InvalidEmailCodeException());\n+        return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n+      }\n+\n+      boolean serviceResponse = updateStatus(participantDetails);\n+      if (!serviceResponse) {\n+        ResponseBean respBean = ResponseUtil.prepareSystemExceptionResponse(response);\n+        return new ResponseEntity<>(respBean, HttpStatus.INTERNAL_SERVER_ERROR);\n+      }\n+\n+      ResponseBean respBean = ResponseUtil.prepareSuccessResponse(response);\n+      verifyEmailIdResponse =\n+          new VerifyEmailIdResponse(respBean.getCode(), respBean.getMessage(), true);\n+      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.OK);\n+\n+    } catch (IllegalArgumentException e) {\n+      ResponseBean respBean = ResponseUtil.prepareBadRequestResponse(response, e);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (InvalidEmailCodeException e) {\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          400 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.BAD_REQUEST.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE.getValue());\n-      logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.BAD_REQUEST);\n-    } catch (Exception e) {\n-      // prepare system failure Response\n-      MyStudiesUserRegUtil.getFailureResponse(\n-          500 + \"\",\n-          MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n-          response);\n-\n-      verifyEmailIdResponse = new VerifyEmailIdResponse();\n-      verifyEmailIdResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n-      verifyEmailIdResponse.setMessage(\n-          MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+      return new ResponseEntity<>(respBean, HttpStatus.BAD_REQUEST);\n \n+    } catch (SystemException e) {\n+      ResponseBean respBean = ResponseUtil.prepareSystemExceptionResponse(response);\n       logger.error(AppConstants.VERIFY_EMAILID_CONTROLLER_ENDS_MESSAGE + \": \", e);\n-      return new ResponseEntity<>(verifyEmailIdResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n+      return new ResponseEntity<>(respBean, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private UserDetailsBO getParticipantDetails(\n+      EmailIdVerificationForm verificationForm, AppOrgInfoBean appOrgInfoBean) {\n+    UserDetailsBO participantDetails = null;\n+    participantDetails =\n+        userManagementProfService.getParticipantDetailsByEmail(\n+            verificationForm.getEmailId(),\n+            appOrgInfoBean.getAppInfoId(),\n+            appOrgInfoBean.getOrgInfoId());\n+    return participantDetails;\n+  }\n+\n+  private boolean updateStatus(UserDetailsBO participantDetails) {\n+    return userDetailsService.updateStatus(participantDetails);\n+  }\n+\n+  private boolean verifyEmailCode(String verificationCode, UserDetailsBO participantDetails)\n+      throws SystemException {\n+    return userDetailsService.verifyCode(verificationCode, participantDetails);", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDk0Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439540947", "bodyText": "changed to call directly this function.", "author": "aswinijena100", "createdAt": "2020-06-12T17:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\nindex c1bf575c0..6079dd44c 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java\n\n@@ -90,7 +89,7 @@ public class VerifyEmailIdController {\n         return new ResponseEntity<>(responseBean, HttpStatus.BAD_REQUEST);\n       }\n       boolean verifyEmailCodeResponse =\n-          verifyEmailCode(verificationForm.getCode().trim(), participantDetails);\n+          userDetailsService.verifyCode(verificationForm.getCode().trim(), participantDetails);\n \n       if (!verifyEmailCodeResponse) {\n         ResponseBean respBean =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDIzNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438944237", "bodyText": "As far as I can tell, you don't need to guard these log statements.", "author": "nikklassen", "createdAt": "2020-06-11T17:16:42Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import com.google.cloud.healthcare.fdamystudies.bean.ResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidEmailCodeException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidRequestException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidUserIdException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil.ErrorCodes;\n+\n+public final class ResponseUtil {\n+\n+  private ResponseUtil() {}\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ResponseUtil.class);\n+\n+  public static ResponseBean prepareBadRequestResponse(\n+      HttpServletResponse response, String errorType) {\n+    return prepareBadRequestResponse(response, null, errorType);\n+  }\n+\n+  public static ResponseBean prepareBadRequestResponse(\n+      HttpServletResponse response, Exception e, String... errorTypes) {\n+    String errorType = e != null ? mapExceptionToErrorType(e) : errorTypes[0];\n+    ResponseBean responseBean = new ResponseBean();\n+    // Default error code for missing required parameter and InvalidRequestException\n+    ErrorCodes errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG;\n+\n+    switch (errorType) {\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE;\n+        break;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID;\n+        break;\n+      case AppConstants.EMAIL_NOT_EXISTS:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS;\n+        break;\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG;\n+        break;\n+    }\n+\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        HttpStatus.BAD_REQUEST.toString(),\n+        MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+        errorMsg.getValue(),\n+        response);\n+    responseBean.setCode(HttpStatus.BAD_REQUEST.value());\n+    responseBean.setMessage(errorMsg.getValue());\n+    if (LOG.isDebugEnabled()) {", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjM1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439542350", "bodyText": "This is a SonarLint issue. Please let us know if we need to ignore this SonarLint rule. I'll remove all conditional logging.", "author": "aswinijena100", "createdAt": "2020-06-12T17:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3MDM0NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439570344", "bodyText": "Yes, Dhanya mentioned this to me. I don't think this SonarLint rule is very helpful.", "author": "nikklassen", "createdAt": "2020-06-12T18:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMzkwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439733905", "bodyText": "removed restriction for logging", "author": "aswinijena100", "createdAt": "2020-06-13T12:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java\nindex c3490035d..4ab9404f4 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java\n\n@@ -51,9 +51,7 @@ public final class ResponseUtil {\n         response);\n     responseBean.setCode(HttpStatus.BAD_REQUEST.value());\n     responseBean.setMessage(errorMsg.getValue());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(String.format(\"Bad Request Response =%s\", responseBean));\n-    }\n+    LOG.info(\"Bad Request Response: \", responseBean);\n     return responseBean;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NTE0OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r438945148", "bodyText": "HttpStatus.OK.value()", "author": "nikklassen", "createdAt": "2020-06-11T17:18:27Z", "path": "user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.healthcare.fdamystudies.util;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import com.google.cloud.healthcare.fdamystudies.bean.ResponseBean;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidEmailCodeException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidRequestException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.InvalidUserIdException;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.SystemException;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil.ErrorCodes;\n+\n+public final class ResponseUtil {\n+\n+  private ResponseUtil() {}\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ResponseUtil.class);\n+\n+  public static ResponseBean prepareBadRequestResponse(\n+      HttpServletResponse response, String errorType) {\n+    return prepareBadRequestResponse(response, null, errorType);\n+  }\n+\n+  public static ResponseBean prepareBadRequestResponse(\n+      HttpServletResponse response, Exception e, String... errorTypes) {\n+    String errorType = e != null ? mapExceptionToErrorType(e) : errorTypes[0];\n+    ResponseBean responseBean = new ResponseBean();\n+    // Default error code for missing required parameter and InvalidRequestException\n+    ErrorCodes errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG;\n+\n+    switch (errorType) {\n+      case AppConstants.INVALID_EMAIL_CODE_EXCEPTION:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_EMAIL_CODE;\n+        break;\n+      case AppConstants.INVALID_USERID_EXCEPTION:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_USER_ID;\n+        break;\n+      case AppConstants.EMAIL_NOT_EXISTS:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.EMAIL_NOT_EXISTS;\n+        break;\n+      case AppConstants.MISSING_REQUIRED_PARAMETER:\n+        errorMsg = MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT_ERROR_MSG;\n+        break;\n+    }\n+\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        HttpStatus.BAD_REQUEST.toString(),\n+        MyStudiesUserRegUtil.ErrorCodes.INVALID_INPUT.getValue(),\n+        errorMsg.getValue(),\n+        response);\n+    responseBean.setCode(HttpStatus.BAD_REQUEST.value());\n+    responseBean.setMessage(errorMsg.getValue());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(String.format(\"Bad Request Response =%s\", responseBean));\n+    }\n+    return responseBean;\n+  }\n+\n+  public static ResponseBean prepareSystemExceptionResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        HttpStatus.INTERNAL_SERVER_ERROR.toString(),\n+        MyStudiesUserRegUtil.ErrorCodes.UNKNOWN.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue(),\n+        response);\n+    ResponseBean responseBean = new ResponseBean();\n+    responseBean.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n+    responseBean.setMessage(MyStudiesUserRegUtil.ErrorCodes.CONNECTION_ERROR_MSG.getValue());\n+    return responseBean;\n+  }\n+\n+  public static ResponseBean prepareSuccessResponse(HttpServletResponse response) {\n+    MyStudiesUserRegUtil.getFailureResponse(\n+        HttpStatus.OK.toString(),\n+        MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+        MyStudiesUserRegUtil.ErrorCodes.SUCCESS.getValue(),\n+        response);\n+    ResponseBean responseBean = new ResponseBean();\n+    responseBean.setCode(ErrorCode.EC_200.code());", "originalCommit": "5cf6db4d27ced2c86d7e08583022b88cf72e346b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjU4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/367#discussion_r439542588", "bodyText": "changed to HttpStatus.OK.value()", "author": "aswinijena100", "createdAt": "2020-06-12T17:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NTE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "chunk": "diff --git a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java\nindex c3490035d..4ab9404f4 100644\n--- a/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java\n+++ b/user-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/util/ResponseUtil.java\n\n@@ -51,9 +51,7 @@ public final class ResponseUtil {\n         response);\n     responseBean.setCode(HttpStatus.BAD_REQUEST.value());\n     responseBean.setMessage(errorMsg.getValue());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(String.format(\"Bad Request Response =%s\", responseBean));\n-    }\n+    LOG.info(\"Bad Request Response: \", responseBean);\n     return responseBean;\n   }\n \n"}}, {"oid": "4edaaac95a64f76ae7479aa8e50205a9769beb08", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4edaaac95a64f76ae7479aa8e50205a9769beb08", "message": "PR review  comment fixes", "committedDate": "2020-06-12T17:01:45Z", "type": "commit"}, {"oid": "40bc3d5508c975b14cc239820be5e84222025020", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/40bc3d5508c975b14cc239820be5e84222025020", "message": "PR comment review fixes", "committedDate": "2020-06-13T11:58:37Z", "type": "commit"}, {"oid": "1616edbd5f1b78f68114da116f35dfd131c056e3", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1616edbd5f1b78f68114da116f35dfd131c056e3", "message": "added removed log", "committedDate": "2020-06-13T12:00:56Z", "type": "commit"}, {"oid": "94ee300b5520e14c7316aa16a7ec4c959a27b0e6", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/94ee300b5520e14c7316aa16a7ec4c959a27b0e6", "message": "Merge branch 'early-access' into early-access-verifyemail-issue-fix", "committedDate": "2020-06-13T12:06:13Z", "type": "commit"}, {"oid": "adbff98b46cafccc1a4e1b69bd2a61811629bff9", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/adbff98b46cafccc1a4e1b69bd2a61811629bff9", "message": "conflict issue fix", "committedDate": "2020-06-23T10:43:21Z", "type": "commit"}, {"oid": "7784d161b9d820ebbb4e29a0667dcd9d7dc03c5d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7784d161b9d820ebbb4e29a0667dcd9d7dc03c5d", "message": "Merge branch 'early-access' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access-verifyemail-issue-fix\n\n# Conflicts:\n#\tuser-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/EmailIdVerificationForm.java\n#\tuser-registration-server-ws/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/VerifyEmailIdController.java", "committedDate": "2020-06-23T10:45:45Z", "type": "commit"}]}