{"pr_number": 2199, "pr_title": "[participant-manager-datastore]: [POST] \"/users\", [PUT] \"/users/{adminUserId}/\" and [POST] \"/users/{userId}/invite\" end points refactored with email scheduler task implementation", "pr_createdAt": "2020-12-01T05:58:43Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199", "timeline": [{"oid": "6576bf2093b752c5ef981c54ff2ce3a170daa780", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6576bf2093b752c5ef981c54ff2ce3a170daa780", "message": "email scheduler task and and code refactored", "committedDate": "2020-12-01T05:21:20Z", "type": "commit"}, {"oid": "648b37ccb22707d52cb8c56a0e2ca87b2917052e", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/648b37ccb22707d52cb8c56a0e2ca87b2917052e", "message": "db script added", "committedDate": "2020-12-01T05:41:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTgzMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r533741830", "bodyText": "Even with the foreign key constraints, I would still suggest you use query injections for consistency with the project. If not, please shorten this comment to one line.", "author": "saminguyen", "createdAt": "2020-12-01T21:45:53Z", "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -127,211 +134,233 @@ public AdminUserResponse createUser(UserRequest user, AuditLogEventRequest audit\n     return userResponse;\n   }\n \n-  private EmailResponse sendInvitationEmail(String email, String firstName, String securityCode) {\n-    Map<String, String> templateArgs = new HashMap<>();\n-    templateArgs.put(\"ORG_NAME\", appConfig.getOrgName());\n-    templateArgs.put(\"FIRST_NAME\", firstName);\n-    templateArgs.put(\"ACTIVATION_LINK\", appConfig.getUserDetailsLink() + securityCode);\n-    templateArgs.put(\"CONTACT_EMAIL_ADDRESS\", appConfig.getContactEmail());\n-    EmailRequest emailRequest =\n-        new EmailRequest(\n-            appConfig.getFromEmail(),\n-            new String[] {email},\n-            null,\n-            null,\n-            appConfig.getRegisterUserSubject(),\n-            appConfig.getRegisterUserBody(),\n-            templateArgs);\n-    return emailService.sendMimeMail(emailRequest);\n-  }\n-\n   private ErrorCode validateUserRequest(UserRequest user) {\n     logger.entry(\"validateUserRequest()\");\n     Optional<UserRegAdminEntity> optAdminDetails =\n         userAdminRepository.findById(user.getSuperAdminUserId());\n-    if (!optAdminDetails.isPresent()) {\n-      return ErrorCode.USER_NOT_FOUND;\n-    }\n-\n-    UserRegAdminEntity loggedInUserDetails = optAdminDetails.get();\n-    if (!loggedInUserDetails.isSuperAdmin()) {\n-      return ErrorCode.NOT_SUPER_ADMIN_ACCESS;\n-    }\n \n-    if (!user.isSuperAdmin() && !hasAtleastOnePermission(user)) {\n-      return ErrorCode.PERMISSION_MISSING;\n+    UserRegAdminEntity admin =\n+        optAdminDetails.orElseThrow(() -> new ErrorCodeException(ErrorCode.USER_NOT_FOUND));\n+    if (!admin.isSuperAdmin()) {\n+      throw new ErrorCodeException(ErrorCode.NOT_SUPER_ADMIN_ACCESS);\n     }\n \n     Optional<UserRegAdminEntity> optUsers = userAdminRepository.findByEmail(user.getEmail());\n     logger.exit(\"Successfully validated user request\");\n     return optUsers.isPresent() ? ErrorCode.EMAIL_EXISTS : null;\n   }\n \n-  private boolean hasAtleastOnePermission(UserRequest user) {\n-    logger.entry(\"hasAtleastOnePermission()\");\n-    if (user.getManageLocations() != Permission.NO_PERMISSION.value()) {\n-      return true;\n-    } else if (CollectionUtils.isEmpty(user.getApps())) {\n-      return false;\n-    }\n+  private void addSelectedAppStudySiteIds(\n+      List<UserAppPermissionRequest> apps,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n \n     Predicate<UserAppPermissionRequest> appPredicate = app -> app.isSelected();\n     Predicate<UserStudyPermissionRequest> studyPredicate = study -> study.isSelected();\n     Predicate<UserSitePermissionRequest> sitePredicate = site -> site.isSelected();\n \n-    List<UserAppPermissionRequest> selectedApps =\n-        user.getApps().stream().filter(appPredicate).collect(Collectors.toList());\n-    if (CollectionUtils.isNotEmpty(selectedApps)) {\n-      return true;\n-    }\n-\n-    for (UserAppPermissionRequest appPermission : user.getApps()) {\n-      List<UserStudyPermissionRequest> selectedStudies =\n-          CollectionUtils.emptyIfNull(appPermission.getStudies())\n-              .stream()\n-              .filter(studyPredicate)\n-              .collect(Collectors.toList());\n-      if (CollectionUtils.isNotEmpty(selectedStudies)) {\n-        return true;\n+    if (apps != null) {\n+      List<UserAppPermissionRequest> selectedApps =\n+          (List<UserAppPermissionRequest>)\n+              CollectionUtils.emptyIfNull(\n+                  apps.stream().filter(appPredicate).collect(Collectors.toList()));\n+\n+      for (UserAppPermissionRequest appRequest : selectedApps) {\n+        AppPermissionDetails appPermissionDetails = new AppPermissionDetails();\n+        appPermissionDetails.setAppId(appRequest.getId());\n+        appPermissionDetails.setEdit(appRequest.getPermission());\n+        appPermissions.add(appPermissionDetails);\n       }\n \n-      for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n-        List<UserSitePermissionRequest> selectedSites =\n-            CollectionUtils.emptyIfNull(studyPermission.getSites())\n+      for (UserAppPermissionRequest appPermission : apps) {\n+        List<UserStudyPermissionRequest> selectedStudies =\n+            CollectionUtils.emptyIfNull(appPermission.getStudies())\n                 .stream()\n-                .filter(sitePredicate)\n+                .filter(studyPredicate)\n                 .collect(Collectors.toList());\n-        if (CollectionUtils.isNotEmpty(selectedSites)) {\n-          return true;\n+\n+        for (UserStudyPermissionRequest studyRequest : selectedStudies) {\n+          StudyPermissionDetails studyPermissionDetails = new StudyPermissionDetails();\n+          studyPermissionDetails.setAppId(appPermission.getId());\n+          studyPermissionDetails.setStudyId(studyRequest.getStudyId());\n+          studyPermissionDetails.setEdit(studyRequest.getPermission());\n+          studyPermissions.add(studyPermissionDetails);\n+        }\n+\n+        if (appPermission.getStudies() != null) {\n+          for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n+            List<UserSitePermissionRequest> selectedSites =\n+                CollectionUtils.emptyIfNull(studyPermission.getSites())\n+                    .stream()\n+                    .filter(sitePredicate)\n+                    .collect(Collectors.toList());\n+\n+            for (UserSitePermissionRequest siteRequest : selectedSites) {\n+              SitePermissionDetails sitePermissionDetails = new SitePermissionDetails();\n+              sitePermissionDetails.setAppId(appPermission.getId());\n+              sitePermissionDetails.setStudyId(studyPermission.getStudyId());\n+              sitePermissionDetails.setSiteId(siteRequest.getSiteId());\n+              sitePermissionDetails.setCanEdit(siteRequest.getPermission());\n+              sitePermissions.add(sitePermissionDetails);\n+            }\n+          }\n         }\n       }\n     }\n-\n-    logger.exit(\"No permissions found, return false\");\n-    return false;\n   }\n \n   private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventRequest auditRequest) {\n     logger.entry(\"saveAdminDetails()\");\n+    List<AppPermissionDetails> appPermissions = new ArrayList<>();\n+    List<StudyPermissionDetails> studyPermissions = new ArrayList<>();\n+    List<SitePermissionDetails> sitePermissions = new ArrayList<>();\n+    if (user.getApps() != null && !user.getApps().isEmpty()) {\n+      addSelectedAppStudySiteIds(user.getApps(), appPermissions, studyPermissions, sitePermissions);\n+    }\n+\n+    if (user.getManageLocations() == Permission.NO_PERMISSION.value()\n+        && appPermissions.isEmpty()\n+        && studyPermissions.isEmpty()\n+        && sitePermissions.isEmpty()) {\n+      throw new ErrorCodeException(ErrorCode.PERMISSION_MISSING);\n+    }\n+\n     UserRegAdminEntity adminDetails =\n         UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n     adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n \n     if (CollectionUtils.isNotEmpty(user.getApps())) {\n-      Map<Boolean, List<UserAppPermissionRequest>> groupBySelectedAppMap =\n-          user.getApps()\n-              .stream()\n-              .collect(Collectors.groupingBy(UserAppPermissionRequest::isSelected));\n-\n-      // save permissions for selected apps\n-      for (UserAppPermissionRequest app :\n-          CollectionUtils.emptyIfNull(groupBySelectedAppMap.get(CommonConstants.SELECTED))) {\n-        saveAppStudySitePermissions(user, adminDetails, app);\n-      }\n-\n-      // save permissions for unselected apps\n-      for (UserAppPermissionRequest app :\n-          CollectionUtils.emptyIfNull(groupBySelectedAppMap.get(CommonConstants.UNSELECTED))) {\n-        for (UserStudyPermissionRequest study : CollectionUtils.emptyIfNull(app.getStudies())) {\n-          if (study.isSelected()) {\n-            saveStudySitePermissions(user, adminDetails, study);\n-          } else if (CollectionUtils.isNotEmpty(study.getSites())) {\n-            saveSitePermissions(user, adminDetails, study);\n-          }\n-        }\n-      }\n+      saveAppLevelPermissions(user, adminDetails, appPermissions);\n+      saveStudyLevelPermissions(user, adminDetails, studyPermissions);\n+      saveSiteLevelPermissions(user, adminDetails, sitePermissions);\n     }\n \n-    EmailResponse emailResponse =\n-        sendInvitationEmail(user.getEmail(), user.getFirstName(), adminDetails.getSecurityCode());\n-    logger.debug(\n-        String.format(\"send add new user email status=%s\", emailResponse.getHttpStatusCode()));\n-\n-    Map<String, String> map =\n-        Collections.singletonMap(CommonConstants.NEW_USER_ID, adminDetails.getId());\n-    if (MessageCode.EMAIL_ACCEPTED_BY_MAIL_SERVER.getMessage().equals(emailResponse.getMessage())) {\n-      participantManagerHelper.logEvent(NEW_USER_INVITATION_EMAIL_SENT, auditRequest, map);\n-    } else {\n-      participantManagerHelper.logEvent(NEW_USER_INVITATION_EMAIL_FAILED, auditRequest, map);\n-    }\n+    UserAccountEmailSchedulerTaskEntity emailTaskEntity =\n+        UserMapper.toUserAccountEmailSchedulerTaskEntity(\n+            auditRequest, adminDetails, EmailTemplate.ACCOUNT_CREATED_EMAIL_TEMPLATE);\n+    userAccountEmailSchedulerTaskRepository.saveAndFlush(emailTaskEntity);\n \n     logger.exit(\"Successfully saved admin details.\");\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  private void saveAppStudySitePermissions(\n-      UserRequest user, UserRegAdminEntity adminDetails, UserAppPermissionRequest app) {\n-    logger.entry(\"saveAppStudySitePermissions()\");\n-    Optional<AppEntity> optApp = appRepository.findById(app.getId());\n-    if (!optApp.isPresent()) {\n+  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n+  // constraints defined on the table", "originalCommit": "648b37ccb22707d52cb8c56a0e2ca87b2917052e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIxODgyNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r534218824", "bodyText": "I want to emphasize on Sami's comment. SQL injection has nothing to do with foreignKey, and having foreign keys does not resolve the need to have good security.\nWe just went through a painful scrubbing of the code to fix exactly these issues; you need to make sure to not introduce new security issues like this one in future.\nAs far as I am concerned, this PR is completely unacceptable and all query generations need to be redone with security at the forefront. Please fix this and any other similar shortcuts you have taken.", "author": "zohrehj", "createdAt": "2020-12-02T14:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1MzIzMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r534253232", "bodyText": "@zohrehj @saminguyen This API was taking more time for JPA based implementation. I referred this link Bulk RDBMS Upserts with Spring  section #Extra: Further Improving batch inserts.\nBefore adopting this approach, we discussed about SQL Injection possibilities hence we left the comment in PR.\nThis is the only API we used string-based query approach to improve the API performance and wanted to discuss this on Thursday's call. I didn't see any security risks with this approach for this API.\nI've asked developers to keep SQL Injections and XSS in mind while implementing the features or issues fixes.\nPlease review the PR or we can discuss this in tomorrow's call.", "author": "dhanyak-btc", "createdAt": "2020-12-02T15:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "3c0beaaefdd8028fc7d8690d8c3184001eac5012", "chunk": "diff --git a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\nindex ce725080c..df4b70f57 100644\n--- a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n+++ b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n\n@@ -245,8 +245,6 @@ public class ManageUserServiceImpl implements ManageUserService {\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n   private void saveAppLevelPermissions(\n       UserRequest user,\n       UserRegAdminEntity adminDetails,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MjgzOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r533742839", "bodyText": "uncomment this line?", "author": "saminguyen", "createdAt": "2020-12-01T21:47:54Z", "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ParticipantManagerEvent.ACCOUNT_UPDATE_EMAIL_SENT;\n+import static com.google.cloud.healthcare.fdamystudies.common.ParticipantManagerEvent.NEW_USER_INVITATION_EMAIL_SENT;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.EmailTemplate;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.UserAccountEmailSchedulerTaskEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserAccountEmailSchedulerTaskRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ManageUserService;\n+import java.util.List;\n+import java.util.Map;\n+import javax.mail.internet.MimeMessage;\n+import org.apache.commons.collections4.map.HashedMap;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class AdminUsersAccountScheduledTaskTest extends BaseMockIT {\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  @Autowired private ManageUserService manageUserService;\n+\n+  @Autowired private UserAccountEmailSchedulerTaskRepository addNewAdminEmailServiceRepository;\n+\n+  @BeforeEach\n+  public void setUp() {}\n+\n+  @Test\n+  public void shouldSendEmailInvitationForNewAdmin() throws Exception {\n+\n+    UserRegAdminEntity admin = testDataHelper.createNonSuperAdmin();\n+    admin.setSecurityCode(IdGenerator.id());\n+    testDataHelper.getUserRegAdminRepository().saveAndFlush(admin);\n+\n+    UserAccountEmailSchedulerTaskEntity adminRecordToSendEmail =\n+        new UserAccountEmailSchedulerTaskEntity();\n+    adminRecordToSendEmail.setUserId(admin.getId());\n+    adminRecordToSendEmail.setAppId(\"GCPMS001\");\n+    adminRecordToSendEmail.setAppVersion(\"1.0\");\n+    adminRecordToSendEmail.setCorrelationId(IdGenerator.id());\n+    adminRecordToSendEmail.setSource(\"PARTICIPANT MANAGER\");\n+    adminRecordToSendEmail.setMobilePlatform(\"Unknown\");\n+    adminRecordToSendEmail.setEmailTemplateType(\n+        EmailTemplate.ACCOUNT_CREATED_EMAIL_TEMPLATE.getTemplate());\n+\n+    addNewAdminEmailServiceRepository.saveAndFlush(adminRecordToSendEmail);\n+\n+    manageUserService.sendUserEmail();\n+\n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));\n+\n+    List<UserAccountEmailSchedulerTaskEntity> invitedAdmins =\n+        addNewAdminEmailServiceRepository.findAll();\n+\n+    assertTrue(invitedAdmins.isEmpty());\n+\n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    //    auditRequest.setUserId(admin.getId());", "originalCommit": "648b37ccb22707d52cb8c56a0e2ca87b2917052e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMjg4Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r533902883", "bodyText": "Commented code removed", "author": "chiranjibi009", "createdAt": "2020-12-02T05:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MjgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "91f342fa8608de738e914445de210653677bf37c", "chunk": "diff --git a/participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java b/participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java\nindex 97a3e0c8c..835e2f47c 100644\n--- a/participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java\n+++ b/participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java\n\n@@ -74,7 +74,6 @@ public class AdminUsersAccountScheduledTaskTest extends BaseMockIT {\n     assertTrue(invitedAdmins.isEmpty());\n \n     AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n-    //    auditRequest.setUserId(admin.getId());\n     Map<String, AuditLogEventRequest> auditEventMap = new HashedMap<>();\n     auditEventMap.put(NEW_USER_INVITATION_EMAIL_SENT.getEventCode(), auditRequest);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MzAwNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r533743007", "bodyText": "same as above", "author": "saminguyen", "createdAt": "2020-12-01T21:48:13Z", "path": "participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ParticipantManagerEvent.ACCOUNT_UPDATE_EMAIL_SENT;\n+import static com.google.cloud.healthcare.fdamystudies.common.ParticipantManagerEvent.NEW_USER_INVITATION_EMAIL_SENT;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AuditLogEventRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.EmailTemplate;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.UserAccountEmailSchedulerTaskEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserAccountEmailSchedulerTaskRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ManageUserService;\n+import java.util.List;\n+import java.util.Map;\n+import javax.mail.internet.MimeMessage;\n+import org.apache.commons.collections4.map.HashedMap;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class AdminUsersAccountScheduledTaskTest extends BaseMockIT {\n+\n+  @Autowired private TestDataHelper testDataHelper;\n+\n+  @Autowired private ManageUserService manageUserService;\n+\n+  @Autowired private UserAccountEmailSchedulerTaskRepository addNewAdminEmailServiceRepository;\n+\n+  @BeforeEach\n+  public void setUp() {}\n+\n+  @Test\n+  public void shouldSendEmailInvitationForNewAdmin() throws Exception {\n+\n+    UserRegAdminEntity admin = testDataHelper.createNonSuperAdmin();\n+    admin.setSecurityCode(IdGenerator.id());\n+    testDataHelper.getUserRegAdminRepository().saveAndFlush(admin);\n+\n+    UserAccountEmailSchedulerTaskEntity adminRecordToSendEmail =\n+        new UserAccountEmailSchedulerTaskEntity();\n+    adminRecordToSendEmail.setUserId(admin.getId());\n+    adminRecordToSendEmail.setAppId(\"GCPMS001\");\n+    adminRecordToSendEmail.setAppVersion(\"1.0\");\n+    adminRecordToSendEmail.setCorrelationId(IdGenerator.id());\n+    adminRecordToSendEmail.setSource(\"PARTICIPANT MANAGER\");\n+    adminRecordToSendEmail.setMobilePlatform(\"Unknown\");\n+    adminRecordToSendEmail.setEmailTemplateType(\n+        EmailTemplate.ACCOUNT_CREATED_EMAIL_TEMPLATE.getTemplate());\n+\n+    addNewAdminEmailServiceRepository.saveAndFlush(adminRecordToSendEmail);\n+\n+    manageUserService.sendUserEmail();\n+\n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));\n+\n+    List<UserAccountEmailSchedulerTaskEntity> invitedAdmins =\n+        addNewAdminEmailServiceRepository.findAll();\n+\n+    assertTrue(invitedAdmins.isEmpty());\n+\n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    //    auditRequest.setUserId(admin.getId());\n+    Map<String, AuditLogEventRequest> auditEventMap = new HashedMap<>();\n+    auditEventMap.put(NEW_USER_INVITATION_EMAIL_SENT.getEventCode(), auditRequest);\n+\n+    verifyAuditEventCall(auditEventMap, NEW_USER_INVITATION_EMAIL_SENT);\n+  }\n+\n+  @Test\n+  public void shouldSendEmailInvitationForUpdateAdmin() throws Exception {\n+\n+    UserRegAdminEntity admin = testDataHelper.createNonSuperAdmin();\n+    admin.setSecurityCode(IdGenerator.id());\n+    testDataHelper.getUserRegAdminRepository().saveAndFlush(admin);\n+\n+    UserAccountEmailSchedulerTaskEntity adminRecordToSendEmail =\n+        new UserAccountEmailSchedulerTaskEntity();\n+    adminRecordToSendEmail.setUserId(admin.getId());\n+    adminRecordToSendEmail.setAppId(\"GCPMS001\");\n+    adminRecordToSendEmail.setAppVersion(\"1.0\");\n+    adminRecordToSendEmail.setCorrelationId(IdGenerator.id());\n+    adminRecordToSendEmail.setSource(\"PARTICIPANT MANAGER\");\n+    adminRecordToSendEmail.setMobilePlatform(\"Unknown\");\n+    adminRecordToSendEmail.setEmailTemplateType(\n+        EmailTemplate.ACCOUNT_UPDATED_EMAIL_TEMPLATE.getTemplate());\n+\n+    addNewAdminEmailServiceRepository.saveAndFlush(adminRecordToSendEmail);\n+\n+    manageUserService.sendUserEmail();\n+\n+    verify(emailSender, atLeastOnce()).send(isA(MimeMessage.class));\n+\n+    List<UserAccountEmailSchedulerTaskEntity> invitedAdmins =\n+        addNewAdminEmailServiceRepository.findAll();\n+\n+    assertTrue(invitedAdmins.isEmpty());\n+\n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    //    auditRequest.setUserId(admin.getId());", "originalCommit": "648b37ccb22707d52cb8c56a0e2ca87b2917052e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMjk1OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r533902958", "bodyText": "Commented code removed", "author": "chiranjibi009", "createdAt": "2020-12-02T05:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MzAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "91f342fa8608de738e914445de210653677bf37c", "chunk": "diff --git a/participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java b/participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java\nindex 97a3e0c8c..835e2f47c 100644\n--- a/participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java\n+++ b/participant-manager-datastore/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/AdminUsersAccountScheduledTaskTest.java\n\n@@ -74,7 +74,6 @@ public class AdminUsersAccountScheduledTaskTest extends BaseMockIT {\n     assertTrue(invitedAdmins.isEmpty());\n \n     AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n-    //    auditRequest.setUserId(admin.getId());\n     Map<String, AuditLogEventRequest> auditEventMap = new HashedMap<>();\n     auditEventMap.put(NEW_USER_INVITATION_EMAIL_SENT.getEventCode(), auditRequest);\n \n"}}, {"oid": "46c53dd25811be6700040a859c384479434afcd6", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/46c53dd25811be6700040a859c384479434afcd6", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-02T04:52:58Z", "type": "commit"}, {"oid": "91f342fa8608de738e914445de210653677bf37c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/91f342fa8608de738e914445de210653677bf37c", "message": "Update AdminUsersAccountScheduledTaskTest.java\n\ncommented code removed", "committedDate": "2020-12-02T04:55:35Z", "type": "commit"}, {"oid": "3c0beaaefdd8028fc7d8690d8c3184001eac5012", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3c0beaaefdd8028fc7d8690d8c3184001eac5012", "message": "removed commented lines", "committedDate": "2020-12-02T15:07:46Z", "type": "commit"}, {"oid": "238a12e737fde0ab981f5890846dc4cf75e4222a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/238a12e737fde0ab981f5890846dc4cf75e4222a", "message": "add and update user api refactored with batch operation", "committedDate": "2020-12-04T13:21:47Z", "type": "commit"}, {"oid": "7a008d9715eeeab0aaf4b2d3b54b8447f3334079", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7a008d9715eeeab0aaf4b2d3b54b8447f3334079", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-04T13:26:09Z", "type": "commit"}, {"oid": "e02c46cd2cf160865a8b2db4633cb89abc81e651", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e02c46cd2cf160865a8b2db4633cb89abc81e651", "message": "organized imports + formated the code", "committedDate": "2020-12-04T13:28:10Z", "type": "commit"}, {"oid": "c667f1e8a7fa8721da4cd2947da8aa6f66ba835c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c667f1e8a7fa8721da4cd2947da8aa6f66ba835c", "message": "property file changed for batch operation and site entity changed", "committedDate": "2020-12-07T10:49:23Z", "type": "commit"}, {"oid": "5d894f05d7a74daba0664db85f19d9856a24db50", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/5d894f05d7a74daba0664db85f19d9856a24db50", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-07T10:53:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxMDk2Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537810963", "bodyText": "typo: Entites -> Entities", "author": "saminguyen", "createdAt": "2020-12-07T20:30:13Z", "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -231,9 +235,22 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n \n     if (CollectionUtils.isNotEmpty(user.getApps())) {\n-      saveAppLevelPermissions(user, adminDetails, appPermissions);\n-      saveStudyLevelPermissions(user, adminDetails, studyPermissions);\n-      saveSiteLevelPermissions(user, adminDetails, sitePermissions);\n+      Map<String, AppEntity> appEntitesMap = new HashedMap<>();\n+      Map<String, StudyEntity> studyEntitesMap = new HashedMap<>();\n+      Map<String, SiteEntity> siteEntitesMap = new HashedMap<>();", "originalCommit": "5d894f05d7a74daba0664db85f19d9856a24db50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA1ODk4NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r538058984", "bodyText": "Typo corrected", "author": "chiranjibi009", "createdAt": "2020-12-08T06:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxMDk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "598b458e01dc2e3925eb9a9141f715e1b228db16", "chunk": "diff --git a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\nindex 1166b0aaf..5ec7e6957 100644\n--- a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n+++ b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n\n@@ -235,22 +235,22 @@ public class ManageUserServiceImpl implements ManageUserService {\n     adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n \n     if (CollectionUtils.isNotEmpty(user.getApps())) {\n-      Map<String, AppEntity> appEntitesMap = new HashedMap<>();\n-      Map<String, StudyEntity> studyEntitesMap = new HashedMap<>();\n-      Map<String, SiteEntity> siteEntitesMap = new HashedMap<>();\n-      getAndPutAppStudyAndSiteEntities(\n-          appEntitesMap,\n-          studyEntitesMap,\n-          siteEntitesMap,\n+      Map<String, AppEntity> appEntitiesMap = new HashedMap<>();\n+      Map<String, StudyEntity> studyEntitiesMap = new HashedMap<>();\n+      Map<String, SiteEntity> siteEntitiesMap = new HashedMap<>();\n+      getAppStudyAndSiteEntitiesMapFromPermissions(\n+          appEntitiesMap,\n+          studyEntitiesMap,\n+          siteEntitiesMap,\n           appPermissions,\n           studyPermissions,\n           sitePermissions);\n \n-      saveAppLevelPermissions(user, adminDetails, appPermissions, appEntitesMap);\n+      saveAppLevelPermissions(user, adminDetails, appPermissions, appEntitiesMap);\n       saveStudyLevelPermissions(\n-          user, adminDetails, studyPermissions, appEntitesMap, studyEntitesMap);\n+          user, adminDetails, studyPermissions, appEntitiesMap, studyEntitiesMap);\n       saveSiteLevelPermissions(\n-          user, adminDetails, sitePermissions, appEntitesMap, studyEntitesMap, siteEntitesMap);\n+          user, adminDetails, sitePermissions, appEntitiesMap, studyEntitiesMap, siteEntitiesMap);\n     }\n \n     UserAccountEmailSchedulerTaskEntity emailTaskEntity =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNDc3MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537814770", "bodyText": "Consider using HashMap here instead for efficiency when calling contains()", "author": "saminguyen", "createdAt": "2020-12-07T20:36:33Z", "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -245,121 +262,148 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n+  private void getAndPutAppStudyAndSiteEntities(\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap,\n+      Map<String, SiteEntity> siteEntitesMap,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n+\n+    List<String> appIds = new ArrayList<>();\n+    List<String> studyIds = new ArrayList<>();\n+    List<String> siteIds = new ArrayList<>();\n+    addAppStudySiteIds(\n+        appIds, studyIds, siteIds, appPermissions, studyPermissions, sitePermissions);\n+    List<AppEntity> apps = appRepository.findAllById(appIds);\n+    List<StudyEntity> studies = studyRepository.findAllById(studyIds);\n+    if (CollectionUtils.isNotEmpty(siteIds)) {\n+      List<SiteEntity> sites = siteRepository.findAllById(siteIds);\n+      for (SiteEntity siteEntity : sites) {\n+        siteEntitesMap.put(siteEntity.getId(), siteEntity);\n+      }\n+    }\n+\n+    for (AppEntity appEntity : apps) {\n+      appEntitesMap.put(appEntity.getId(), appEntity);\n+    }\n+\n+    for (StudyEntity studyEntity : studies) {\n+      studyEntitesMap.put(studyEntity.getId(), studyEntity);\n+    }\n+  }\n+\n+  private void addAppStudySiteIds(\n+      List<String> appIds,\n+      List<String> studyIds,\n+      List<String> siteIds,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n+    for (AppPermissionDetails appPermissionDetails : appPermissions) {\n+      appIds.add(appPermissionDetails.getAppId());\n+    }\n+\n+    for (StudyPermissionDetails studyPermissionDetails : studyPermissions) {\n+      if (!studyIds.contains(studyPermissionDetails.getStudyId())) {", "originalCommit": "5d894f05d7a74daba0664db85f19d9856a24db50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3Njc3OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r538076779", "bodyText": "@saminguyen I agree with you, HashMap is faster than ArrayList for contains() method, the time difference will be  in nanoseconds as the List size is small so it doesn't make big difference in API response time. Also, we are not using Key-Value pairs to use HashMap.\nWe noticed all the performance issues are due to too many SQL calls to database so we refactored the code to minimize the database calls. Please note, Batch operations take more seconds compared to Bulk Insert. Please review & approve the PR once Chiranjibi fixes other review comments.", "author": "dhanyak-btc", "createdAt": "2020-12-08T06:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNDc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "598b458e01dc2e3925eb9a9141f715e1b228db16", "chunk": "diff --git a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\nindex 1166b0aaf..5ec7e6957 100644\n--- a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n+++ b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n\n@@ -262,10 +262,10 @@ public class ManageUserServiceImpl implements ManageUserService {\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  private void getAndPutAppStudyAndSiteEntities(\n-      Map<String, AppEntity> appEntitesMap,\n-      Map<String, StudyEntity> studyEntitesMap,\n-      Map<String, SiteEntity> siteEntitesMap,\n+  private void getAppStudyAndSiteEntitiesMapFromPermissions(\n+      Map<String, AppEntity> appEntitiesMap,\n+      Map<String, StudyEntity> studyEntitiesMap,\n+      Map<String, SiteEntity> siteEntitiesMap,\n       List<AppPermissionDetails> appPermissions,\n       List<StudyPermissionDetails> studyPermissions,\n       List<SitePermissionDetails> sitePermissions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNTA1OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537815058", "bodyText": "typo: Entites -> Entities", "author": "saminguyen", "createdAt": "2020-12-07T20:37:00Z", "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -245,121 +262,148 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n+  private void getAndPutAppStudyAndSiteEntities(\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap,\n+      Map<String, SiteEntity> siteEntitesMap,", "originalCommit": "5d894f05d7a74daba0664db85f19d9856a24db50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA1OTA5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r538059090", "bodyText": "Typo corrected", "author": "chiranjibi009", "createdAt": "2020-12-08T06:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNTA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "598b458e01dc2e3925eb9a9141f715e1b228db16", "chunk": "diff --git a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\nindex 1166b0aaf..5ec7e6957 100644\n--- a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n+++ b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n\n@@ -262,10 +262,10 @@ public class ManageUserServiceImpl implements ManageUserService {\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  private void getAndPutAppStudyAndSiteEntities(\n-      Map<String, AppEntity> appEntitesMap,\n-      Map<String, StudyEntity> studyEntitesMap,\n-      Map<String, SiteEntity> siteEntitesMap,\n+  private void getAppStudyAndSiteEntitiesMapFromPermissions(\n+      Map<String, AppEntity> appEntitiesMap,\n+      Map<String, StudyEntity> studyEntitiesMap,\n+      Map<String, SiteEntity> siteEntitiesMap,\n       List<AppPermissionDetails> appPermissions,\n       List<StudyPermissionDetails> studyPermissions,\n       List<SitePermissionDetails> sitePermissions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMjkyOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537822928", "bodyText": "nit: rename getAppStudyAndSiteEntitiesMapFromPermissions? - I think it needs to be clearer.", "author": "saminguyen", "createdAt": "2020-12-07T20:50:16Z", "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -245,121 +262,148 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n+  private void getAndPutAppStudyAndSiteEntities(", "originalCommit": "5d894f05d7a74daba0664db85f19d9856a24db50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA1OTM3OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r538059379", "bodyText": "Renamed the method name", "author": "chiranjibi009", "createdAt": "2020-12-08T06:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMjkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "598b458e01dc2e3925eb9a9141f715e1b228db16", "chunk": "diff --git a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\nindex 1166b0aaf..5ec7e6957 100644\n--- a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n+++ b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n\n@@ -262,10 +262,10 @@ public class ManageUserServiceImpl implements ManageUserService {\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  private void getAndPutAppStudyAndSiteEntities(\n-      Map<String, AppEntity> appEntitesMap,\n-      Map<String, StudyEntity> studyEntitesMap,\n-      Map<String, SiteEntity> siteEntitesMap,\n+  private void getAppStudyAndSiteEntitiesMapFromPermissions(\n+      Map<String, AppEntity> appEntitiesMap,\n+      Map<String, StudyEntity> studyEntitiesMap,\n+      Map<String, SiteEntity> siteEntitiesMap,\n       List<AppPermissionDetails> appPermissions,\n       List<StudyPermissionDetails> studyPermissions,\n       List<SitePermissionDetails> sitePermissions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMzE4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r537823188", "bodyText": "same comment about typos", "author": "saminguyen", "createdAt": "2020-12-07T20:50:44Z", "path": "participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -245,121 +262,148 @@ private AdminUserResponse saveAdminDetails(UserRequest user, AuditLogEventReques\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, userId values as these fields have FK\n-  // constraints defined on the table\n+  private void getAndPutAppStudyAndSiteEntities(\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap,\n+      Map<String, SiteEntity> siteEntitesMap,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n+\n+    List<String> appIds = new ArrayList<>();\n+    List<String> studyIds = new ArrayList<>();\n+    List<String> siteIds = new ArrayList<>();\n+    addAppStudySiteIds(\n+        appIds, studyIds, siteIds, appPermissions, studyPermissions, sitePermissions);\n+    List<AppEntity> apps = appRepository.findAllById(appIds);\n+    List<StudyEntity> studies = studyRepository.findAllById(studyIds);\n+    if (CollectionUtils.isNotEmpty(siteIds)) {\n+      List<SiteEntity> sites = siteRepository.findAllById(siteIds);\n+      for (SiteEntity siteEntity : sites) {\n+        siteEntitesMap.put(siteEntity.getId(), siteEntity);\n+      }\n+    }\n+\n+    for (AppEntity appEntity : apps) {\n+      appEntitesMap.put(appEntity.getId(), appEntity);\n+    }\n+\n+    for (StudyEntity studyEntity : studies) {\n+      studyEntitesMap.put(studyEntity.getId(), studyEntity);\n+    }\n+  }\n+\n+  private void addAppStudySiteIds(\n+      List<String> appIds,\n+      List<String> studyIds,\n+      List<String> siteIds,\n+      List<AppPermissionDetails> appPermissions,\n+      List<StudyPermissionDetails> studyPermissions,\n+      List<SitePermissionDetails> sitePermissions) {\n+    for (AppPermissionDetails appPermissionDetails : appPermissions) {\n+      appIds.add(appPermissionDetails.getAppId());\n+    }\n+\n+    for (StudyPermissionDetails studyPermissionDetails : studyPermissions) {\n+      if (!studyIds.contains(studyPermissionDetails.getStudyId())) {\n+        studyIds.add(studyPermissionDetails.getStudyId());\n+      }\n+      if (!appIds.contains(studyPermissionDetails.getAppId())) {\n+        appIds.add(studyPermissionDetails.getAppId());\n+      }\n+    }\n+\n+    for (SitePermissionDetails sitePermissionDetails : sitePermissions) {\n+      if (!siteIds.contains(sitePermissionDetails.getSiteId())) {\n+        siteIds.add(sitePermissionDetails.getSiteId());\n+      }\n+      if (!studyIds.contains(sitePermissionDetails.getStudyId())) {\n+        studyIds.add(sitePermissionDetails.getStudyId());\n+      }\n+      if (!appIds.contains(sitePermissionDetails.getAppId())) {\n+        appIds.add(sitePermissionDetails.getAppId());\n+      }\n+    }\n+  }\n+\n   private void saveAppLevelPermissions(\n       UserRequest user,\n       UserRegAdminEntity adminDetails,\n-      List<AppPermissionDetails> appPermissions) {\n+      List<AppPermissionDetails> appPermissions,\n+      Map<String, AppEntity> appEntitesMap) {\n     logger.entry(\"saveAppLevelPermissions()\");\n     if (CollectionUtils.isEmpty(appPermissions)) {\n       return;\n     }\n \n-    StringBuilder sqlInsertBuilder =\n-        new StringBuilder(\n-            \"insert into app_permissions (id, ur_admin_user_id, app_info_id, edit, created_time, created_by) values\");\n-    appPermissions.forEach(\n-        (AppPermissionDetails appPermssion) -> {\n-          sqlInsertBuilder.append(\"(\");\n-          sqlInsertBuilder.append(\"'\" + IdGenerator.id() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + adminDetails.getId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + appPermssion.getAppId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + appPermssion.getEdit() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + new Timestamp(Instant.now().toEpochMilli()) + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + user.getSuperAdminUserId() + \"'\");\n-          sqlInsertBuilder.append(\")\");\n-          sqlInsertBuilder.append(\", \");\n-        });\n-    sqlInsertBuilder.deleteCharAt(sqlInsertBuilder.lastIndexOf(\",\"));\n+    List<AppPermissionEntity> appPermissionEntities = new ArrayList<>();\n+    for (AppPermissionDetails selectedApp : appPermissions) {\n+      AppPermissionEntity appPermissionEntity = new AppPermissionEntity();\n+      appPermissionEntity.setApp(appEntitesMap.get(selectedApp.getAppId()));\n+      appPermissionEntity.setUrAdminUser(adminDetails);\n+      appPermissionEntity.setCreated(new Timestamp(Instant.now().toEpochMilli()));\n+      appPermissionEntity.setCreatedBy(user.getSuperAdminUserId());\n+      appPermissionEntity.setEdit(Permission.fromValue(selectedApp.getEdit()));\n+      appPermissionEntities.add(appPermissionEntity);\n+    }\n \n-    entityManger.createNativeQuery(sqlInsertBuilder.toString()).executeUpdate();\n+    appPermissionRepository.saveAll(appPermissionEntities);\n     logger.exit(\"Successfully saved app level permissions\");\n   }\n \n-  // SQL Injection? No. No need to sanitize appId,studyId, userId values as these fields have FK\n-  // constraints defined on the table\n   private void saveStudyLevelPermissions(\n       UserRequest user,\n       UserRegAdminEntity adminDetails,\n-      List<StudyPermissionDetails> studyPermissions) {\n+      List<StudyPermissionDetails> studyPermissions,\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap) {\n     logger.entry(\"saveStudyLevelPermissions()\");\n     if (CollectionUtils.isEmpty(studyPermissions)) {\n       return;\n     }\n \n-    StringBuilder sqlInsertBuilder =\n-        new StringBuilder(\n-            \"insert into study_permissions (id, ur_admin_user_id, app_info_id, study_id, edit, created_time, created_by) values\");\n-    studyPermissions.forEach(\n-        (StudyPermissionDetails studyPermssion) -> {\n-          sqlInsertBuilder.append(\"(\");\n-          sqlInsertBuilder.append(\"'\" + IdGenerator.id() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + adminDetails.getId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + studyPermssion.getAppId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + studyPermssion.getStudyId() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + studyPermssion.getEdit() + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + new Timestamp(Instant.now().toEpochMilli()) + \"'\");\n-          sqlInsertBuilder.append(\",\");\n-          sqlInsertBuilder.append(\"'\" + user.getSuperAdminUserId() + \"'\");\n-          sqlInsertBuilder.append(\")\");\n-          sqlInsertBuilder.append(\", \");\n-        });\n-    sqlInsertBuilder.deleteCharAt(sqlInsertBuilder.lastIndexOf(\",\"));\n+    List<StudyPermissionEntity> studyPermissionEntities = new ArrayList<>();\n+    for (StudyPermissionDetails selectedStudy : studyPermissions) {\n+      StudyPermissionEntity studyPermissionEntity = new StudyPermissionEntity();\n+      studyPermissionEntity.setApp(appEntitesMap.get(selectedStudy.getAppId()));\n+      studyPermissionEntity.setStudy(studyEntitesMap.get(selectedStudy.getStudyId()));\n+      studyPermissionEntity.setUrAdminUser(adminDetails);\n+      studyPermissionEntity.setCreated(new Timestamp(Instant.now().toEpochMilli()));\n+      studyPermissionEntity.setCreatedBy(user.getSuperAdminUserId());\n+      studyPermissionEntity.setEdit(Permission.fromValue(selectedStudy.getEdit()));\n+      studyPermissionEntities.add(studyPermissionEntity);\n+    }\n \n-    entityManger.createNativeQuery(sqlInsertBuilder.toString()).executeUpdate();\n+    studyPermissionRepository.saveAll(studyPermissionEntities);\n     logger.exit(\"Successfully saved study level permissions\");\n   }\n \n-  // SQL Injection? No. No need to sanitize appId, studyId, siteId, userId values as these fields\n-  // have FK constraints defined on the table\n   private void saveSiteLevelPermissions(\n       UserRequest user,\n       UserRegAdminEntity adminDetails,\n-      List<SitePermissionDetails> sitePermissions) {\n+      List<SitePermissionDetails> sitePermissions,\n+      Map<String, AppEntity> appEntitesMap,\n+      Map<String, StudyEntity> studyEntitesMap,\n+      Map<String, SiteEntity> siteEntitesMap) {\n     logger.entry(\"saveSiteLevelPermissions()\");", "originalCommit": "5d894f05d7a74daba0664db85f19d9856a24db50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA1OTUxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/2199#discussion_r538059512", "bodyText": "Typo corrected", "author": "chiranjibi009", "createdAt": "2020-12-08T06:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMzE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "598b458e01dc2e3925eb9a9141f715e1b228db16", "chunk": "diff --git a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\nindex 1166b0aaf..5ec7e6957 100644\n--- a/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n+++ b/participant-manager-datastore/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java\n\n@@ -262,10 +262,10 @@ public class ManageUserServiceImpl implements ManageUserService {\n     return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n   }\n \n-  private void getAndPutAppStudyAndSiteEntities(\n-      Map<String, AppEntity> appEntitesMap,\n-      Map<String, StudyEntity> studyEntitesMap,\n-      Map<String, SiteEntity> siteEntitesMap,\n+  private void getAppStudyAndSiteEntitiesMapFromPermissions(\n+      Map<String, AppEntity> appEntitiesMap,\n+      Map<String, StudyEntity> studyEntitiesMap,\n+      Map<String, SiteEntity> siteEntitiesMap,\n       List<AppPermissionDetails> appPermissions,\n       List<StudyPermissionDetails> studyPermissions,\n       List<SitePermissionDetails> sitePermissions) {\n"}}, {"oid": "598b458e01dc2e3925eb9a9141f715e1b228db16", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/598b458e01dc2e3925eb9a9141f715e1b228db16", "message": "typo corrected", "committedDate": "2020-12-08T05:59:37Z", "type": "commit"}, {"oid": "693adc595a3e5b7f6493ac9ec32f2d35ebd55ddd", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/693adc595a3e5b7f6493ac9ec32f2d35ebd55ddd", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-08T05:59:51Z", "type": "commit"}, {"oid": "505397027e4393610bafc1e6751e92200416c5fb", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/505397027e4393610bafc1e6751e92200416c5fb", "message": "Merge branch 'add-new-user-and-update-user-and-send-invitation-api-changes' of https://github.com/GoogleCloudPlatform/fda-mystudies into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-08T06:00:06Z", "type": "commit"}, {"oid": "437b5a7360792dbeef1f57add79cc23b3ab57d86", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/437b5a7360792dbeef1f57add79cc23b3ab57d86", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-09T05:31:00Z", "type": "commit"}, {"oid": "0fd10eca0b6ddedae3ccd9326e238839efffc8e0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0fd10eca0b6ddedae3ccd9326e238839efffc8e0", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-09T05:33:56Z", "type": "commit"}, {"oid": "e6cdb4f4320d4e39a4562a7c0b35b1cef6b2cf4a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e6cdb4f4320d4e39a4562a7c0b35b1cef6b2cf4a", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-09T05:36:49Z", "type": "commit"}, {"oid": "89fe5d86f28437352203394140219e47d91049ea", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/89fe5d86f28437352203394140219e47d91049ea", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-09T10:33:08Z", "type": "commit"}, {"oid": "312cf1b9a17651cf8848a9a0f38f4ef675724b2d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/312cf1b9a17651cf8848a9a0f38f4ef675724b2d", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-10T05:23:47Z", "type": "commit"}, {"oid": "2ac57f0a2be20ee0a8c593d6532bf98f2b783ca9", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2ac57f0a2be20ee0a8c593d6532bf98f2b783ca9", "message": "Merge branch 'develop' into add-new-user-and-update-user-and-send-invitation-api-changes", "committedDate": "2020-12-10T14:10:58Z", "type": "commit"}]}