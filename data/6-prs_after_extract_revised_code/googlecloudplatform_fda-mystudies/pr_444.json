{"pr_number": 444, "pr_title": "audit log service - initial commit", "pr_createdAt": "2020-06-04T14:28:10Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444", "timeline": [{"oid": "505ef1f1297f09bf148f89991b82afc27c773522", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/505ef1f1297f09bf148f89991b82afc27c773522", "message": "initial commit for central audit log service\n\ninitial commit for central audit log service", "committedDate": "2020-06-04T14:21:56Z", "type": "commit"}, {"oid": "754e186be1f1668728fc27ba085d29658f9db7a8", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/754e186be1f1668728fc27ba085d29658f9db7a8", "message": "workflow config for audit log server\n\nworkflow config for audit log server", "committedDate": "2020-06-04T14:25:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjkwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437532905", "bodyText": "This shows up in every service. I'd really like to see a common module that the microservices can include to share this stuff.", "author": "nikklassen", "createdAt": "2020-06-09T15:44:21Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@RequiredArgsConstructor\n+public enum ErrorMessages {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NDQwMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438554400", "bodyText": "Renamed to ErrorCode and moved this enum to common-service module", "author": "dhanyak-btc", "createdAt": "2020-06-11T05:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java\ndeleted file mode 100644\nindex f436bfc63..000000000\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n-\n-import lombok.Getter;\n-import lombok.RequiredArgsConstructor;\n-import lombok.ToString;\n-\n-@Getter\n-@ToString\n-@RequiredArgsConstructor\n-public enum ErrorMessages {\n-  BAD_REQUEST(\n-      400, \"EC-400\", \"Bad Request\", \"Malformed request syntax or invalid request message framing.\"),\n-\n-  UNAUTHORIZED(401, \"EC-401\", \"Unauthorized\", \"Invalid token\"),\n-\n-  APPLICATION_ERROR(\n-      500,\n-      \"EC-500\",\n-      \"Internal Server Error\",\n-      \"Sorry, an error has occurred and your request could not be processed. Please try again later.\");\n-\n-  private final int statusCode;\n-  private final String description;\n-  private final String errorCode;\n-  private final String errorType;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTA3OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437535078", "bodyText": "Some of these properties, like PATH, STATE, etc. don't have enough context to be useful. Other people reading this code aren't going to know what PATH is for. If they are being serialization just keep the field names in that class.", "author": "nikklassen", "createdAt": "2020-06-09T15:47:16Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/FieldNames.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+public final class FieldNames {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NTYxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438555612", "bodyText": "Removed above mentioned properties from FieldNames and copied to individual classes to fix compilation-error.", "author": "dhanyak-btc", "createdAt": "2020-06-11T05:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwODA4MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438808081", "bodyText": "This file is now unused. Please remove.", "author": "nikklassen", "createdAt": "2020-06-11T13:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/FieldNames.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/FieldNames.java\nindex 95ef183ca..7adf5c587 100644\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/FieldNames.java\n+++ b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/FieldNames.java\n\n@@ -9,9 +9,6 @@\n package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n \n public final class FieldNames {\n-  public static final String STATE = \"state\";\n-\n-  public static final String STATUS = \"status\";\n \n   public static final String APP_ID = \"app_id\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTY4Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437535682", "bodyText": "This is usually \"dateTime\".", "author": "nikklassen", "createdAt": "2020-06-09T15:48:05Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorResponse.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.PATH;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n+import java.time.Instant;\n+import org.springframework.web.client.RestClientResponseException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public class ErrorResponse {\n+\n+  private String requestUri = null;\n+\n+  private RestClientResponseException restClientResponseException = null;\n+\n+  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n+    this.requestUri = requestUri;\n+    this.restClientResponseException = restClientResponseException;\n+  }\n+\n+  public JsonNode toJson() {\n+    ObjectMapper mapper = new ObjectMapper();\n+    ObjectNode errorResponse = mapper.createObjectNode();\n+    errorResponse.put(PATH, requestUri);\n+    errorResponse.put(\"datetime\", Instant.now().toEpochMilli());", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NTc4Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438555787", "bodyText": "Replaced \"dateTime\" with \"timestamp\"", "author": "dhanyak-btc", "createdAt": "2020-06-11T05:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorResponse.java b/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java\nsimilarity index 65%\nrename from audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorResponse.java\nrename to common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java\nindex 1986f9565..7d162490d 100644\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorResponse.java\n+++ b/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java\n\n@@ -6,11 +6,8 @@\n  * https://opensource.org/licenses/MIT.\n  */\n \n-package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+package com.google.cloud.healthcare.fdamystudies.common;\n \n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.PATH;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n import java.time.Instant;\n import org.springframework.web.client.RestClientResponseException;\n import com.fasterxml.jackson.databind.JsonNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNzA1NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437537054", "bodyText": "I personally don't like entry/exit logging, but if you're going to do it then the XLogger extension for SLF4J would be much better.", "author": "nikklassen", "createdAt": "2020-06-09T15:50:05Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthController.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@RestController\n+@RequestMapping(\"/v1\")\n+public class HealthController extends BaseController {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HealthController.class);\n+\n+  @GetMapping(\n+      value = \"/health\",\n+      produces = {MediaType.APPLICATION_JSON_VALUE})\n+  public ResponseEntity<JsonNode> health(HttpServletRequest request) {\n+    if (LOG.isInfoEnabled()) {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NjIyOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438556228", "bodyText": "Replaced logger statements with XLogger entry and exit methods.", "author": "dhanyak-btc", "createdAt": "2020-06-11T05:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNzA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzQ5OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438973499", "bodyText": "I'd like to see this used throughout the other services as well.", "author": "nikklassen", "createdAt": "2020-06-11T18:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNzA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthController.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthController.java\nindex f35c3bbb4..919775230 100644\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthController.java\n+++ b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthController.java\n\n@@ -9,8 +9,8 @@\n package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n \n import javax.servlet.http.HttpServletRequest;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0NDIwNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437544204", "bodyText": "Use generics instead of Object for request.", "author": "nikklassen", "createdAt": "2020-06-09T15:59:35Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n+import java.util.Collections;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n+\n+abstract class BaseServiceImpl {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  public ResponseEntity<JsonNode> exchangeForJson(\n+      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NjkxNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438556916", "bodyText": "Moved this class to common-service module and added overload methods for MultiValueMap<String, String> and JsonNode request body.", "author": "dhanyak-btc", "createdAt": "2020-06-11T05:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0NDIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java\ndeleted file mode 100644\nindex 5ee5d9cf5..000000000\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java\n+++ /dev/null\n\n@@ -1,70 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n-\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n-import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpEntity;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n-import org.springframework.web.client.RestTemplate;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n-\n-abstract class BaseServiceImpl {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n-  @Autowired private RestTemplate restTemplate;\n-\n-  public ResponseEntity<JsonNode> exchangeForJson(\n-      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {\n-    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n-    HttpEntity<Object> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, httpMethod, requestEntity, JsonNode.class);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err.toJson());\n-    } catch (Exception e) {\n-      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n-      return ResponseEntity.status(ErrorMessages.APPLICATION_ERROR.getStatusCode())\n-          .body(getErrorResponse(ErrorMessages.APPLICATION_ERROR));\n-    }\n-  }\n-\n-  protected ObjectNode getObjectNode() {\n-    return objectMapper.createObjectNode();\n-  }\n-\n-  protected JsonNode getErrorResponse(ErrorMessages error) {\n-    ObjectNode response = getObjectNode();\n-    response.put(STATUS, error.getStatusCode());\n-    response.put(ERROR_TYPE, error.getErrorType());\n-    response.put(ERROR_DESCRIPTION, error.getDescription());\n-    response.put(ERROR_CODE, error.getErrorCode());\n-    return response;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0NDcxNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437544714", "bodyText": "Don't catch Exception. Add a @ControllerAdvice to handle expected exceptions.", "author": "nikklassen", "createdAt": "2020-06-09T16:00:21Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n+import java.util.Collections;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n+\n+abstract class BaseServiceImpl {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  public ResponseEntity<JsonNode> exchangeForJson(\n+      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    HttpEntity<Object> requestEntity = new HttpEntity<>(request, headers);\n+    try {\n+      return restTemplate.exchange(url, httpMethod, requestEntity, JsonNode.class);\n+    } catch (HttpClientErrorException | HttpServerErrorException e) {\n+      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n+      ErrorResponse err = new ErrorResponse(url, e);\n+      return ResponseEntity.status(e.getRawStatusCode()).body(err.toJson());\n+    } catch (Exception e) {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3MzQ4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438173488", "bodyText": "See #482 for an example.", "author": "nikklassen", "createdAt": "2020-06-10T14:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0NDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3MDk5MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438570991", "bodyText": "Added RestExceptionHandler class in common-service module. Sometimes, we need to catch Exception to post audit log event to central audit log system.", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0NDcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java\ndeleted file mode 100644\nindex 5ee5d9cf5..000000000\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java\n+++ /dev/null\n\n@@ -1,70 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n-\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n-import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpEntity;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n-import org.springframework.web.client.RestTemplate;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n-\n-abstract class BaseServiceImpl {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n-  @Autowired private RestTemplate restTemplate;\n-\n-  public ResponseEntity<JsonNode> exchangeForJson(\n-      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {\n-    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n-    HttpEntity<Object> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, httpMethod, requestEntity, JsonNode.class);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err.toJson());\n-    } catch (Exception e) {\n-      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n-      return ResponseEntity.status(ErrorMessages.APPLICATION_ERROR.getStatusCode())\n-          .body(getErrorResponse(ErrorMessages.APPLICATION_ERROR));\n-    }\n-  }\n-\n-  protected ObjectNode getObjectNode() {\n-    return objectMapper.createObjectNode();\n-  }\n-\n-  protected JsonNode getErrorResponse(ErrorMessages error) {\n-    ObjectNode response = getObjectNode();\n-    response.put(STATUS, error.getStatusCode());\n-    response.put(ERROR_TYPE, error.getErrorType());\n-    response.put(ERROR_DESCRIPTION, error.getDescription());\n-    response.put(ERROR_CODE, error.getErrorCode());\n-    return response;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjE5Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437582197", "bodyText": "It would be better to use a real type here instead of JsonNode.", "author": "nikklassen", "createdAt": "2020-06-09T16:59:45Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthService.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import org.springframework.http.ResponseEntity;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+public interface OAuthService {\n+\n+  public ResponseEntity<JsonNode> health();", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3NDA0Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438574046", "bodyText": "I've used Jakson's JsonNode/ObjectNode for REST API's request/response payload. I've also used JSON Schema validator for request payload validation.", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NTIyNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438975225", "bodyText": "The Jackson JsonNode API isn't really intended to be used in your code, only during serialization/deserialization. In your code you should be using your own business data classes. Most, if not all, serialization should take place automatically.", "author": "nikklassen", "createdAt": "2020-06-11T18:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NjQ5MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r439946491", "bodyText": "I believe we can use JsonNode API's. I found this article useful: Jackson\u2019s JsonNode for Payload unaware request Handling", "author": "dhanyak-btc", "createdAt": "2020-06-15T06:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMzUzMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r440423532", "bodyText": "That blog post does cover this case, where we are just passing the packet through, so it's probably fine. However, if we need to analyze this response at all we should parse it.", "author": "nikklassen", "createdAt": "2020-06-15T20:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjE5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjU5Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437582596", "bodyText": "You are already adding this in BaseServiceImpl", "author": "nikklassen", "createdAt": "2020-06-09T17:00:23Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import java.util.Collections;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3ODU1Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438578553", "bodyText": "Removed Accept header from this method.", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\nindex b8fe89c8d..5deb5637f 100644\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\n+++ b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\n\n@@ -8,14 +8,11 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n \n-import java.util.Collections;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Service;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.BaseServiceImpl;\n \n @Service\n class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjkxOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437582919", "bodyText": "Do this in BaseServiceImpl, we are using JSON for everything.", "author": "nikklassen", "createdAt": "2020-06-09T17:00:55Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import java.util.Collections;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.setContentType(MediaType.APPLICATION_JSON);", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3ODgxOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438578818", "bodyText": "Removed Accept & ContentType header from this method", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\nindex b8fe89c8d..5deb5637f 100644\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\n+++ b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\n\n@@ -8,14 +8,11 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n \n-import java.util.Collections;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Service;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.BaseServiceImpl;\n \n @Service\n class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MzQxNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437583416", "bodyText": "Better to create an overload for GET because it will never have a request", "author": "nikklassen", "createdAt": "2020-06-09T17:01:48Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import java.util.Collections;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@Service\n+class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n+\n+  @Value(\"${security.oauth2.health_endpoint}\")\n+  private String healthEndpoint;\n+\n+  @Override\n+  public ResponseEntity<JsonNode> health() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+\n+    return exchangeForJson(healthEndpoint, headers, null, HttpMethod.GET);", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3OTQ3Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438579472", "bodyText": "Added a method for GET in BaseServiceImpl (in common-service module)", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MzQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\nindex b8fe89c8d..5deb5637f 100644\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\n+++ b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/OAuthServiceImpl.java\n\n@@ -8,14 +8,11 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n \n-import java.util.Collections;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Service;\n import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.cloud.healthcare.fdamystudies.service.BaseServiceImpl;\n \n @Service\n class OAuthServiceImpl extends BaseServiceImpl implements OAuthService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTgwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437591805", "bodyText": "serialization should be implemented in the ErrorMessage class, see my example in this commit", "author": "nikklassen", "createdAt": "2020-06-09T17:16:07Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n+import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n+import java.util.Collections;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n+\n+abstract class BaseServiceImpl {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  public ResponseEntity<JsonNode> exchangeForJson(\n+      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    HttpEntity<Object> requestEntity = new HttpEntity<>(request, headers);\n+    try {\n+      return restTemplate.exchange(url, httpMethod, requestEntity, JsonNode.class);\n+    } catch (HttpClientErrorException | HttpServerErrorException e) {\n+      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n+      ErrorResponse err = new ErrorResponse(url, e);\n+      return ResponseEntity.status(e.getRawStatusCode()).body(err.toJson());\n+    } catch (Exception e) {\n+      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n+      return ResponseEntity.status(ErrorMessages.APPLICATION_ERROR.getStatusCode())\n+          .body(getErrorResponse(ErrorMessages.APPLICATION_ERROR));\n+    }\n+  }\n+\n+  protected ObjectNode getObjectNode() {\n+    return objectMapper.createObjectNode();\n+  }\n+\n+  protected JsonNode getErrorResponse(ErrorMessages error) {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MDIyOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438580228", "bodyText": "Thank you for providing an example.\nRenamed this enum to ErrorCode and implemented serialization as per the example.", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java\ndeleted file mode 100644\nindex 5ee5d9cf5..000000000\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/service/BaseServiceImpl.java\n+++ /dev/null\n\n@@ -1,70 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.auditlog.service;\n-\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_CODE;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_DESCRIPTION;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.ERROR_TYPE;\n-import static com.google.cloud.healthcare.fdamystudies.auditlog.common.FieldNames.STATUS;\n-import java.util.Collections;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpEntity;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpServerErrorException;\n-import org.springframework.web.client.RestTemplate;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorMessages;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.common.ErrorResponse;\n-\n-abstract class BaseServiceImpl {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseServiceImpl.class);\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n-  @Autowired private RestTemplate restTemplate;\n-\n-  public ResponseEntity<JsonNode> exchangeForJson(\n-      String url, HttpHeaders headers, Object request, HttpMethod httpMethod) {\n-    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n-    HttpEntity<Object> requestEntity = new HttpEntity<>(request, headers);\n-    try {\n-      return restTemplate.exchange(url, httpMethod, requestEntity, JsonNode.class);\n-    } catch (HttpClientErrorException | HttpServerErrorException e) {\n-      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n-      ErrorResponse err = new ErrorResponse(url, e);\n-      return ResponseEntity.status(e.getRawStatusCode()).body(err.toJson());\n-    } catch (Exception e) {\n-      LOG.error(String.format(\"%s request failed with an exception\", url), e);\n-      return ResponseEntity.status(ErrorMessages.APPLICATION_ERROR.getStatusCode())\n-          .body(getErrorResponse(ErrorMessages.APPLICATION_ERROR));\n-    }\n-  }\n-\n-  protected ObjectNode getObjectNode() {\n-    return objectMapper.createObjectNode();\n-  }\n-\n-  protected JsonNode getErrorResponse(ErrorMessages error) {\n-    ObjectNode response = getObjectNode();\n-    response.put(STATUS, error.getStatusCode());\n-    response.put(ERROR_TYPE, error.getErrorType());\n-    response.put(ERROR_DESCRIPTION, error.getDescription());\n-    response.put(ERROR_CODE, error.getErrorCode());\n-    return response;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NDA0Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437594047", "bodyText": "Should be something like ErrorCode, is not just a message.", "author": "nikklassen", "createdAt": "2020-06-09T17:20:05Z", "path": "audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@RequiredArgsConstructor\n+public enum ErrorMessages {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MDM4Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438580383", "bodyText": "Renamed this enum to ErrorCode", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NDA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java b/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java\ndeleted file mode 100644\nindex f436bfc63..000000000\n--- a/audit-log-service/src/main/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ErrorMessages.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n-\n-import lombok.Getter;\n-import lombok.RequiredArgsConstructor;\n-import lombok.ToString;\n-\n-@Getter\n-@ToString\n-@RequiredArgsConstructor\n-public enum ErrorMessages {\n-  BAD_REQUEST(\n-      400, \"EC-400\", \"Bad Request\", \"Malformed request syntax or invalid request message framing.\"),\n-\n-  UNAUTHORIZED(401, \"EC-401\", \"Unauthorized\", \"Invalid token\"),\n-\n-  APPLICATION_ERROR(\n-      500,\n-      \"EC-500\",\n-      \"Internal Server Error\",\n-      \"Sorry, an error has occurred and your request could not be processed. Please try again later.\");\n-\n-  private final int statusCode;\n-  private final String description;\n-  private final String errorCode;\n-  private final String errorType;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NDQ0NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437594444", "bodyText": "Enums shouldn't be plural", "author": "nikklassen", "createdAt": "2020-06-09T17:20:42Z", "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public enum ApiEndpoints {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MDUzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438580531", "bodyText": "Renamed the enum to ApiEndpoint", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NDQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java b/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java\nsimilarity index 71%\nrename from audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java\nrename to audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java\nindex b8b6f05dd..87a8ac1cb 100644\n--- a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java\n+++ b/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java\n\n@@ -8,23 +8,17 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n \n-import org.apache.commons.lang3.StringUtils;\n-\n-public enum ApiEndpoints {\n+public enum ApiEndpoint {\n   HEALTH(\"http://localhost:8001/audit-log-service/v1/health\"),\n \n   EVENTS(\"http://localhost:8001/audit-log-service/v1/events\");\n \n   private String url;\n \n-  private ApiEndpoints(String url) {\n+  private ApiEndpoint(String url) {\n     this.url = url;\n   }\n \n-  public String getUrl(int port) {\n-    return StringUtils.replace(url, String.valueOf(8001), String.valueOf(port));\n-  }\n-\n   public String getUrl() {\n     return url;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NjM4Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437596386", "bodyText": "URLs with a different port should be a different URL", "author": "nikklassen", "createdAt": "2020-06-09T17:24:05Z", "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public enum ApiEndpoints {\n+  HEALTH(\"http://localhost:8001/audit-log-service/v1/health\"),\n+\n+  EVENTS(\"http://localhost:8001/audit-log-service/v1/events\");\n+\n+  private String url;\n+\n+  private ApiEndpoints(String url) {\n+    this.url = url;\n+  }\n+\n+  public String getUrl(int port) {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MTA4MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438581080", "bodyText": "Removed this unused method.", "author": "dhanyak-btc", "createdAt": "2020-06-11T06:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NjM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java b/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java\nsimilarity index 71%\nrename from audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java\nrename to audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java\nindex b8b6f05dd..87a8ac1cb 100644\n--- a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoints.java\n+++ b/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/ApiEndpoint.java\n\n@@ -8,23 +8,17 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n \n-import org.apache.commons.lang3.StringUtils;\n-\n-public enum ApiEndpoints {\n+public enum ApiEndpoint {\n   HEALTH(\"http://localhost:8001/audit-log-service/v1/health\"),\n \n   EVENTS(\"http://localhost:8001/audit-log-service/v1/events\");\n \n   private String url;\n \n-  private ApiEndpoints(String url) {\n+  private ApiEndpoint(String url) {\n     this.url = url;\n   }\n \n-  public String getUrl(int port) {\n-    return StringUtils.replace(url, String.valueOf(8001), String.valueOf(port));\n-  }\n-\n   public String getUrl() {\n     return url;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NjY2MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437596661", "bodyText": "This is another class that would be great to share across services.", "author": "nikklassen", "createdAt": "2020-06-09T17:24:34Z", "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.ResultMatcher;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@AutoConfigureMockMvc\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockIT {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MTc2OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438581768", "bodyText": "Moved this class and WireMockInitializer to common-tests module.", "author": "dhanyak-btc", "createdAt": "2020-06-11T07:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NjY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java b/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java\ndeleted file mode 100644\nindex 9f9759f52..000000000\n--- a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java\n+++ /dev/null\n\n@@ -1,99 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n-\n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.test.context.ActiveProfiles;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.web.servlet.MockMvc;\n-import org.springframework.test.web.servlet.ResultMatcher;\n-import com.github.tomakehurst.wiremock.WireMockServer;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.config.WireMockInitializer;\n-\n-@ContextConfiguration(initializers = {WireMockInitializer.class})\n-@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n-@AutoConfigureMockMvc\n-@ActiveProfiles(\"mockit\")\n-public class BaseMockIT {\n-\n-  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n-\n-  protected static final String INVALID_BEARER_TOKEN =\n-      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n-\n-  protected static final ResultMatcher OK = status().isOk();\n-\n-  protected static final ResultMatcher BAD_REQUEST = status().isBadRequest();\n-\n-  protected static final ResultMatcher UNAUTHORIZED = status().isUnauthorized();\n-\n-  protected static final ResultMatcher CREATED = status().isCreated();\n-\n-  protected static final ResultMatcher NOT_FOUND = status().isNotFound();\n-\n-  @Autowired private WireMockServer wireMockServer;\n-\n-  @Autowired protected MockMvc mockMvc;\n-\n-  @Value(\"${server.servlet.contextPath}\")\n-  protected String contextPath;\n-\n-  protected WireMockServer getWireMockServer() {\n-    return wireMockServer;\n-  }\n-\n-  protected void performPost(\n-      String path,\n-      String requestBody,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher)\n-      throws Exception {\n-    mockMvc\n-        .perform(post(path).contextPath(contextPath).content(requestBody).headers(headers))\n-        .andDo(print())\n-        .andExpect(httpStatusMatcher)\n-        .andExpect(content().string(containsString(expectedTextInResponseBody)));\n-  }\n-\n-  protected void performGet(\n-      String path,\n-      String requestBody,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher)\n-      throws Exception {\n-\n-    if (StringUtils.isEmpty(requestBody)) {\n-      mockMvc\n-          .perform(get(path).contextPath(contextPath).headers(headers))\n-          .andDo(print())\n-          .andExpect(httpStatusMatcher)\n-          .andExpect(content().string(containsString(expectedTextInResponseBody)));\n-    } else {\n-      mockMvc\n-          .perform(get(path).contextPath(contextPath).content(requestBody).headers(headers))\n-          .andDo(print())\n-          .andExpect(httpStatusMatcher)\n-          .andExpect(content().string(containsString(expectedTextInResponseBody)));\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NzYyMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437597620", "bodyText": "Only wrap the revelant part of the code in the condition. i.e.\nrequest = get(path)\nif (!StringUtils.isEmpty(requestBody)) {\n    request = request.content(requestBody)\n}\n\nBut if we don't perform get requests with a body than this is unnecessary.", "author": "nikklassen", "createdAt": "2020-06-09T17:26:08Z", "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.ResultMatcher;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@AutoConfigureMockMvc\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockIT {\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n+\n+  protected static final String INVALID_BEARER_TOKEN =\n+      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n+\n+  protected static final ResultMatcher OK = status().isOk();\n+\n+  protected static final ResultMatcher BAD_REQUEST = status().isBadRequest();\n+\n+  protected static final ResultMatcher UNAUTHORIZED = status().isUnauthorized();\n+\n+  protected static final ResultMatcher CREATED = status().isCreated();\n+\n+  protected static final ResultMatcher NOT_FOUND = status().isNotFound();\n+\n+  @Autowired private WireMockServer wireMockServer;\n+\n+  @Autowired protected MockMvc mockMvc;\n+\n+  @Value(\"${server.servlet.contextPath}\")\n+  protected String contextPath;\n+\n+  protected WireMockServer getWireMockServer() {\n+    return wireMockServer;\n+  }\n+\n+  protected void performPost(\n+      String path,\n+      String requestBody,\n+      HttpHeaders headers,\n+      String expectedTextInResponseBody,\n+      ResultMatcher httpStatusMatcher)\n+      throws Exception {\n+    mockMvc\n+        .perform(post(path).contextPath(contextPath).content(requestBody).headers(headers))\n+        .andDo(print())\n+        .andExpect(httpStatusMatcher)\n+        .andExpect(content().string(containsString(expectedTextInResponseBody)));\n+  }\n+\n+  protected void performGet(\n+      String path,\n+      String requestBody,\n+      HttpHeaders headers,\n+      String expectedTextInResponseBody,\n+      ResultMatcher httpStatusMatcher)\n+      throws Exception {\n+\n+    if (StringUtils.isEmpty(requestBody)) {", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5OTIwNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438599204", "bodyText": "I've used MockHttpServletRequestBuilder to conditionally add request body, cookies and query params. Please review the refactored code in common-tests module.", "author": "dhanyak-btc", "createdAt": "2020-06-11T07:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NzYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java b/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java\ndeleted file mode 100644\nindex 9f9759f52..000000000\n--- a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/common/BaseMockIT.java\n+++ /dev/null\n\n@@ -1,99 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.auditlog.common;\n-\n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.test.context.ActiveProfiles;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.web.servlet.MockMvc;\n-import org.springframework.test.web.servlet.ResultMatcher;\n-import com.github.tomakehurst.wiremock.WireMockServer;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.config.WireMockInitializer;\n-\n-@ContextConfiguration(initializers = {WireMockInitializer.class})\n-@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n-@AutoConfigureMockMvc\n-@ActiveProfiles(\"mockit\")\n-public class BaseMockIT {\n-\n-  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n-\n-  protected static final String INVALID_BEARER_TOKEN =\n-      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n-\n-  protected static final ResultMatcher OK = status().isOk();\n-\n-  protected static final ResultMatcher BAD_REQUEST = status().isBadRequest();\n-\n-  protected static final ResultMatcher UNAUTHORIZED = status().isUnauthorized();\n-\n-  protected static final ResultMatcher CREATED = status().isCreated();\n-\n-  protected static final ResultMatcher NOT_FOUND = status().isNotFound();\n-\n-  @Autowired private WireMockServer wireMockServer;\n-\n-  @Autowired protected MockMvc mockMvc;\n-\n-  @Value(\"${server.servlet.contextPath}\")\n-  protected String contextPath;\n-\n-  protected WireMockServer getWireMockServer() {\n-    return wireMockServer;\n-  }\n-\n-  protected void performPost(\n-      String path,\n-      String requestBody,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher)\n-      throws Exception {\n-    mockMvc\n-        .perform(post(path).contextPath(contextPath).content(requestBody).headers(headers))\n-        .andDo(print())\n-        .andExpect(httpStatusMatcher)\n-        .andExpect(content().string(containsString(expectedTextInResponseBody)));\n-  }\n-\n-  protected void performGet(\n-      String path,\n-      String requestBody,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher)\n-      throws Exception {\n-\n-    if (StringUtils.isEmpty(requestBody)) {\n-      mockMvc\n-          .perform(get(path).contextPath(contextPath).headers(headers))\n-          .andDo(print())\n-          .andExpect(httpStatusMatcher)\n-          .andExpect(content().string(containsString(expectedTextInResponseBody)));\n-    } else {\n-      mockMvc\n-          .perform(get(path).contextPath(contextPath).content(requestBody).headers(headers))\n-          .andDo(print())\n-          .andExpect(httpStatusMatcher)\n-          .andExpect(content().string(containsString(expectedTextInResponseBody)));\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNzgzMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r437617832", "bodyText": "We don't need to add this to requests, we know the API produces JSON", "author": "nikklassen", "createdAt": "2020-06-09T18:00:32Z", "path": "audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthControllerTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n+\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoints;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.BaseMockIT;\n+\n+public class HealthControllerTest extends BaseMockIT {\n+\n+  @Test\n+  public void health() throws Exception {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));", "originalCommit": "754e186be1f1668728fc27ba085d29658f9db7a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5OTUwNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438599506", "bodyText": "Removed the Accept header.", "author": "dhanyak-btc", "createdAt": "2020-06-11T07:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNzgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "chunk": "diff --git a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthControllerTest.java b/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthControllerTest.java\nindex 1af9f6d4f..8789a2bf7 100644\n--- a/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthControllerTest.java\n+++ b/audit-log-service/src/test/java/com/google/cloud/healthcare/fdamystudies/auditlog/controller/HealthControllerTest.java\n\n@@ -8,20 +8,15 @@\n \n package com.google.cloud.healthcare.fdamystudies.auditlog.controller;\n \n-import java.util.Collections;\n import org.junit.jupiter.api.Test;\n import org.springframework.http.HttpHeaders;\n-import org.springframework.http.MediaType;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoints;\n-import com.google.cloud.healthcare.fdamystudies.auditlog.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.auditlog.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n \n public class HealthControllerTest extends BaseMockIT {\n \n   @Test\n   public void health() throws Exception {\n-    HttpHeaders headers = new HttpHeaders();\n-    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n-\n-    performGet(ApiEndpoints.HEALTH.getPath(), null, headers, \"OK\", OK);\n+    performGet(ApiEndpoint.HEALTH.getPath(), new HttpHeaders(), \"OK\", OK);\n   }\n }\n"}}, {"oid": "3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/3981c3f46bf7e8821d300134f8ce9d41c6e930d7", "message": "PR review comments fixed\n\nPR review comments fixed", "committedDate": "2020-06-11T10:14:28Z", "type": "commit"}, {"oid": "bf6fe3a98886dc7a0ace7fa2bafc9d890f42cc1c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bf6fe3a98886dc7a0ace7fa2bafc9d890f42cc1c", "message": "Added dependent modules to run\n\nAdded dependent modules to run", "committedDate": "2020-06-11T10:32:33Z", "type": "commit"}, {"oid": "422636263b540aeafbfc1370e0688b96ed028acd", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/422636263b540aeafbfc1370e0688b96ed028acd", "message": "Fixed build issue\n\nFixed build issue - no such directory or file", "committedDate": "2020-06-11T10:35:36Z", "type": "commit"}, {"oid": "ce220e268b7a878a45159ef63a1cec57d3fab284", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ce220e268b7a878a45159ef63a1cec57d3fab284", "message": "Fixing build issues\n\nFixing build issues", "committedDate": "2020-06-11T10:38:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MTI2OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438791268", "bodyText": "This should also be a StdSerializer.", "author": "nikklassen", "createdAt": "2020-06-11T13:41:06Z", "path": "common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import java.time.Instant;\n+import org.springframework.web.client.RestClientResponseException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public class ErrorResponse {\n+\n+  public static final String PATH = \"path\";\n+\n+  public static final String STATUS = \"status\";\n+\n+  public static final String ERROR_DESCRIPTION = \"error_description\";\n+\n+  private String requestUri;\n+\n+  private RestClientResponseException restClientResponseException;\n+\n+  public ErrorResponse(String requestUri, RestClientResponseException restClientResponseException) {\n+    this.requestUri = requestUri;\n+    this.restClientResponseException = restClientResponseException;\n+  }\n+\n+  public JsonNode toJson() {", "originalCommit": "ce220e268b7a878a45159ef63a1cec57d3fab284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0OTM4Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438849382", "bodyText": "Refactored the code to use StdSerializer", "author": "dhanyak-btc", "createdAt": "2020-06-11T14:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MTI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTYxNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438969617", "bodyText": "You shouldn't need this method anymore then. Jackson should automatically be called to serialize your ErrorResponse when you use ResponseEntity.body(new ErrorResponse()). That's the main advantage of doing this way, and the ability to compose serialization.", "author": "nikklassen", "createdAt": "2020-06-11T17:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MTI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MjkyNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r439952926", "bodyText": "Removed toJson() method from ErrorCode enum and ErrorResponse class. Fixed compilation issues.", "author": "dhanyak-btc", "createdAt": "2020-06-15T06:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MTI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "542ec3abe5561028b1724eba7471e7c8868fba6b", "chunk": "diff --git a/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java b/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java\nindex 7d162490d..bbcddd65a 100644\n--- a/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java\n+++ b/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorResponse.java\n\n@@ -8,20 +8,23 @@\n \n package com.google.cloud.healthcare.fdamystudies.common;\n \n+import java.io.IOException;\n import java.time.Instant;\n import org.springframework.web.client.RestClientResponseException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import lombok.Getter;\n+import lombok.ToString;\n \n+@Getter\n+@ToString\n+@JsonSerialize(using = ErrorResponse.ErrorResponseSerializer.class)\n public class ErrorResponse {\n \n-  public static final String PATH = \"path\";\n-\n-  public static final String STATUS = \"status\";\n-\n-  public static final String ERROR_DESCRIPTION = \"error_description\";\n-\n   private String requestUri;\n \n   private RestClientResponseException restClientResponseException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MjY0Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438792647", "bodyText": "Shouldn't we always be logging errors?", "author": "nikklassen", "createdAt": "2020-06-11T13:42:34Z", "path": "common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.web.context.request.WebRequest;\n+import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@ControllerAdvice\n+public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n+\n+  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n+      \"%s request failed with an exception\";\n+\n+  @ExceptionHandler(Exception.class)\n+  public ResponseEntity<JsonNode> handleSystemException(Exception ex, WebRequest request) {\n+    HttpServletRequest httpRequest = ((ServletWebRequest) request).getRequest();\n+\n+    if (LOG.isErrorEnabled()) {", "originalCommit": "ce220e268b7a878a45159ef63a1cec57d3fab284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyMzQwMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438823402", "bodyText": "I personally don't like conditional logging but this is a SonarLint issue.  Please refer Sonarlint rules and the example in Compliant Solution. Please let us know if we need to ignore this SonarLint rule. I'll remove all conditional logging.", "author": "dhanyak-btc", "createdAt": "2020-06-11T14:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MjY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MzI0MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438963240", "bodyText": "Thanks for the context on this being a Sonarlint rule, that explains why I saw other PRs with it too. I definitely think it's an over-optimization except maybe in performance critical code. I think we should disable this rule, but follow their advice for using the builtin formatting instead of String.format when possible.", "author": "nikklassen", "createdAt": "2020-06-11T17:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MjY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "542ec3abe5561028b1724eba7471e7c8868fba6b", "chunk": "diff --git a/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java b/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java\nindex c1e565bba..7ddc89a30 100644\n--- a/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java\n+++ b/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java\n\n@@ -1,37 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n-import javax.servlet.http.HttpServletRequest;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n-import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.context.request.WebRequest;\n import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n \n @ControllerAdvice\n public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n-\n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n   @ExceptionHandler(Exception.class)\n   public ResponseEntity<JsonNode> handleSystemException(Exception ex, WebRequest request) {\n-    HttpServletRequest httpRequest = ((ServletWebRequest) request).getRequest();\n-\n-    if (LOG.isErrorEnabled()) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, httpRequest.getRequestURI()), ex);\n-    }\n-\n-    ObjectNode response = (ObjectNode) ErrorCode.APPLICATION_ERROR.toJson();\n-    response.put(\"path\", httpRequest.getPathInfo());\n-\n-    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);\n+    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+        .body(ErrorCode.APPLICATION_ERROR.toJson());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NDYwNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438794604", "bodyText": "What value does this serve? The client knows what request they made.", "author": "nikklassen", "createdAt": "2020-06-11T13:44:30Z", "path": "common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.context.request.ServletWebRequest;\n+import org.springframework.web.context.request.WebRequest;\n+import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+@ControllerAdvice\n+public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n+\n+  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n+      \"%s request failed with an exception\";\n+\n+  @ExceptionHandler(Exception.class)\n+  public ResponseEntity<JsonNode> handleSystemException(Exception ex, WebRequest request) {\n+    HttpServletRequest httpRequest = ((ServletWebRequest) request).getRequest();\n+\n+    if (LOG.isErrorEnabled()) {\n+      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, httpRequest.getRequestURI()), ex);\n+    }\n+\n+    ObjectNode response = (ObjectNode) ErrorCode.APPLICATION_ERROR.toJson();\n+    response.put(\"path\", httpRequest.getPathInfo());", "originalCommit": "ce220e268b7a878a45159ef63a1cec57d3fab284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MDg4Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438850886", "bodyText": "Removed the \"path\".", "author": "dhanyak-btc", "createdAt": "2020-06-11T15:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NDYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "542ec3abe5561028b1724eba7471e7c8868fba6b", "chunk": "diff --git a/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java b/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java\nindex c1e565bba..7ddc89a30 100644\n--- a/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java\n+++ b/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/RestExceptionHandler.java\n\n@@ -1,37 +1,19 @@\n package com.google.cloud.healthcare.fdamystudies.common;\n \n-import javax.servlet.http.HttpServletRequest;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n-import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.context.request.WebRequest;\n import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n \n @ControllerAdvice\n public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(RestExceptionHandler.class);\n-\n-  private static final String REQUEST_FAILED_WITH_AN_EXCEPTION =\n-      \"%s request failed with an exception\";\n-\n   @ExceptionHandler(Exception.class)\n   public ResponseEntity<JsonNode> handleSystemException(Exception ex, WebRequest request) {\n-    HttpServletRequest httpRequest = ((ServletWebRequest) request).getRequest();\n-\n-    if (LOG.isErrorEnabled()) {\n-      LOG.error(String.format(REQUEST_FAILED_WITH_AN_EXCEPTION, httpRequest.getRequestURI()), ex);\n-    }\n-\n-    ObjectNode response = (ObjectNode) ErrorCode.APPLICATION_ERROR.toJson();\n-    response.put(\"path\", httpRequest.getPathInfo());\n-\n-    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);\n+    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+        .body(ErrorCode.APPLICATION_ERROR.toJson());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDQ0Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438804443", "bodyText": "The whole point of the fluent/builder API is to be flexible. You are essentially undoing that by creating overloads for every possible way of making a request. I am fine with a couple \"abbreviations\", but if there is a one-off method that needs to use cookies they can just write the full request themselves. Also, you don't know what you are going to need yet, so only write helpers for things that exist.", "author": "nikklassen", "createdAt": "2020-06-11T13:55:01Z", "path": "common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.common;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import java.util.Base64;\n+import java.util.Collections;\n+import javax.servlet.http.Cookie;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.ResultMatcher;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.util.MultiValueMap;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n+\n+@ContextConfiguration(initializers = {WireMockInitializer.class})\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@AutoConfigureMockMvc\n+@ActiveProfiles(\"mockit\")\n+public class BaseMockIT {\n+\n+  protected static final String AUTHORIZATION = \"Authorization\";\n+\n+  public static final String CORRELATION_ID = \"correlation_id\";\n+\n+  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n+\n+  protected static final String INVALID_BEARER_TOKEN =\n+      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n+\n+  protected static final String VALID_CORRELATION_ID = \"8a56d20c-d755-4487-b80d-22d5fa383046\";\n+\n+  protected static final ResultMatcher OK = status().isOk();\n+\n+  protected static final ResultMatcher BAD_REQUEST = status().isBadRequest();\n+\n+  protected static final ResultMatcher UNAUTHORIZED = status().isUnauthorized();\n+\n+  protected static final ResultMatcher CREATED = status().isCreated();\n+\n+  protected static final ResultMatcher NOT_FOUND = status().isNotFound();\n+\n+  protected static final ResultMatcher UNSUPPORTED_MEDIATYPE = status().isUnsupportedMediaType();\n+\n+  protected static final ResultMatcher REDIRECTION = status().is3xxRedirection();\n+\n+  protected static final ResultMatcher CONFLICT = status().isConflict();\n+\n+  @Autowired private WireMockServer wireMockServer;\n+\n+  @LocalServerPort protected int randomServerPort;\n+\n+  @Autowired private ObjectMapper objectMapper;\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Value(\"${server.servlet.contextPath}\")\n+  private String contextPath;\n+\n+  protected WireMockServer getWireMockServer() {\n+    return wireMockServer;\n+  }\n+\n+  protected ObjectNode getObjectNode() {\n+    return objectMapper.createObjectNode();\n+  }\n+\n+  protected ObjectMapper getObjectMapper() {\n+    return objectMapper;\n+  }\n+\n+  protected String getEncodedAuthorization(String clientId, String clientSecret) {\n+    String credentials = clientId + \":\" + clientSecret;\n+    return Base64.getEncoder().encodeToString(credentials.getBytes());\n+  }\n+\n+  protected HttpHeaders getCommonHeaders() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+    headers.add(AUTHORIZATION, VALID_BEARER_TOKEN);\n+    headers.add(CORRELATION_ID, VALID_CORRELATION_ID);\n+    return headers;\n+  }\n+\n+  protected MvcResult performPost(\n+      String path,\n+      String requestBody,\n+      HttpHeaders headers,\n+      String expectedTextInResponseBody,\n+      ResultMatcher httpStatusMatcher,\n+      Cookie... cookies)\n+      throws Exception {\n+\n+    MockHttpServletRequestBuilder reqBuilder =\n+        post(path).contextPath(contextPath).content(requestBody).headers(headers);\n+\n+    if (cookies.length > 0) {\n+      reqBuilder.cookie(cookies);\n+    }\n+\n+    return mockMvc\n+        .perform(reqBuilder)\n+        .andDo(print())\n+        .andExpect(httpStatusMatcher)\n+        .andExpect(content().string(containsString(expectedTextInResponseBody)))\n+        .andReturn();\n+  }\n+\n+  protected MvcResult performPost(", "originalCommit": "ce220e268b7a878a45159ef63a1cec57d3fab284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyODEwMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438828103", "bodyText": "We've used all these methods in different services (for integration tests) so added them here since it's a common BaseMockIT for all services. Please let me know if I need to keep only methods related to this PR.", "author": "dhanyak-btc", "createdAt": "2020-06-11T14:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTg4MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r438971880", "bodyText": "Yes, please only keep the ones relevant for this PR. If the other integration tests are all making requests in slightly different ways then that's a code smell we should look into refactoring.", "author": "nikklassen", "createdAt": "2020-06-11T17:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0ODYxMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/444#discussion_r439948613", "bodyText": "Removed unused perform* methods from BaseMockIT class.", "author": "dhanyak-btc", "createdAt": "2020-06-15T06:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "618f4852d04f4ef97100f17e13e89fbcc11fa30f", "chunk": "diff --git a/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java b/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java\ndeleted file mode 100644\nindex cc6dbc5c5..000000000\n--- a/common-tests/src/main/java/com/google/cloud/healthcare/fdamystudies/common/BaseMockIT.java\n+++ /dev/null\n\n@@ -1,315 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Use of this source code is governed by an MIT-style\n- * license that can be found in the LICENSE file or at\n- * https://opensource.org/licenses/MIT.\n- */\n-\n-package com.google.cloud.healthcare.fdamystudies.common;\n-\n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-import java.util.Base64;\n-import java.util.Collections;\n-import javax.servlet.http.Cookie;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n-import org.springframework.boot.web.server.LocalServerPort;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.MediaType;\n-import org.springframework.test.context.ActiveProfiles;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.web.servlet.MockMvc;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.ResultMatcher;\n-import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n-import org.springframework.util.MultiValueMap;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.github.tomakehurst.wiremock.WireMockServer;\n-import com.google.cloud.healthcare.fdamystudies.config.WireMockInitializer;\n-\n-@ContextConfiguration(initializers = {WireMockInitializer.class})\n-@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n-@AutoConfigureMockMvc\n-@ActiveProfiles(\"mockit\")\n-public class BaseMockIT {\n-\n-  protected static final String AUTHORIZATION = \"Authorization\";\n-\n-  public static final String CORRELATION_ID = \"correlation_id\";\n-\n-  protected static final String VALID_BEARER_TOKEN = \"Bearer 7fd50c2c-d618-493c-89d6-f1887e3e4bb8\";\n-\n-  protected static final String INVALID_BEARER_TOKEN =\n-      \"Bearer cd57710c-1d19-4058-8bfe-a6aac3a39e35\";\n-\n-  protected static final String VALID_CORRELATION_ID = \"8a56d20c-d755-4487-b80d-22d5fa383046\";\n-\n-  protected static final ResultMatcher OK = status().isOk();\n-\n-  protected static final ResultMatcher BAD_REQUEST = status().isBadRequest();\n-\n-  protected static final ResultMatcher UNAUTHORIZED = status().isUnauthorized();\n-\n-  protected static final ResultMatcher CREATED = status().isCreated();\n-\n-  protected static final ResultMatcher NOT_FOUND = status().isNotFound();\n-\n-  protected static final ResultMatcher UNSUPPORTED_MEDIATYPE = status().isUnsupportedMediaType();\n-\n-  protected static final ResultMatcher REDIRECTION = status().is3xxRedirection();\n-\n-  protected static final ResultMatcher CONFLICT = status().isConflict();\n-\n-  @Autowired private WireMockServer wireMockServer;\n-\n-  @LocalServerPort protected int randomServerPort;\n-\n-  @Autowired private ObjectMapper objectMapper;\n-\n-  @Autowired private MockMvc mockMvc;\n-\n-  @Value(\"${server.servlet.contextPath}\")\n-  private String contextPath;\n-\n-  protected WireMockServer getWireMockServer() {\n-    return wireMockServer;\n-  }\n-\n-  protected ObjectNode getObjectNode() {\n-    return objectMapper.createObjectNode();\n-  }\n-\n-  protected ObjectMapper getObjectMapper() {\n-    return objectMapper;\n-  }\n-\n-  protected String getEncodedAuthorization(String clientId, String clientSecret) {\n-    String credentials = clientId + \":\" + clientSecret;\n-    return Base64.getEncoder().encodeToString(credentials.getBytes());\n-  }\n-\n-  protected HttpHeaders getCommonHeaders() {\n-    HttpHeaders headers = new HttpHeaders();\n-    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n-    headers.setContentType(MediaType.APPLICATION_JSON);\n-    headers.add(AUTHORIZATION, VALID_BEARER_TOKEN);\n-    headers.add(CORRELATION_ID, VALID_CORRELATION_ID);\n-    return headers;\n-  }\n-\n-  protected MvcResult performPost(\n-      String path,\n-      String requestBody,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher,\n-      Cookie... cookies)\n-      throws Exception {\n-\n-    MockHttpServletRequestBuilder reqBuilder =\n-        post(path).contextPath(contextPath).content(requestBody).headers(headers);\n-\n-    if (cookies.length > 0) {\n-      reqBuilder.cookie(cookies);\n-    }\n-\n-    return mockMvc\n-        .perform(reqBuilder)\n-        .andDo(print())\n-        .andExpect(httpStatusMatcher)\n-        .andExpect(content().string(containsString(expectedTextInResponseBody)))\n-        .andReturn();\n-  }\n-\n-  protected MvcResult performPost(\n-      String path,\n-      MultiValueMap<String, String> paramsMap,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher,\n-      Cookie... cookies)\n-      throws Exception {\n-\n-    MockHttpServletRequestBuilder reqBuilder =\n-        post(path).contextPath(contextPath).params(paramsMap).headers(headers);\n-\n-    if (cookies.length > 0) {\n-      reqBuilder.cookie(cookies);\n-    }\n-\n-    return mockMvc\n-        .perform(reqBuilder)\n-        .andDo(print())\n-        .andExpect(httpStatusMatcher)\n-        .andExpect(content().string(containsString(expectedTextInResponseBody)))\n-        .andReturn();\n-  }\n-\n-  protected MvcResult performPost(\n-      String path,\n-      MultiValueMap<String, String> paramsMap,\n-      HttpHeaders headers,\n-      String redirectUrl,\n-      Cookie... cookies)\n-      throws Exception {\n-\n-    MockHttpServletRequestBuilder reqBuilder =\n-        post(path).contextPath(contextPath).params(paramsMap).headers(headers);\n-\n-    if (cookies.length > 0) {\n-      reqBuilder.cookie(cookies);\n-    }\n-\n-    return mockMvc\n-        .perform(reqBuilder)\n-        .andDo(print())\n-        .andExpect(status().is3xxRedirection())\n-        .andExpect(redirectedUrl(redirectUrl))\n-        .andReturn();\n-  }\n-\n-  protected MvcResult performPatch(\n-      String path,\n-      String requestBody,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher,\n-      Cookie... cookies)\n-      throws Exception {\n-\n-    MockHttpServletRequestBuilder reqBuilder =\n-        patch(path).contextPath(contextPath).headers(headers);\n-\n-    if (cookies.length > 0) {\n-      reqBuilder.cookie(cookies);\n-    }\n-\n-    if (StringUtils.isNotEmpty(requestBody)) {\n-      reqBuilder.content(requestBody);\n-    }\n-\n-    return mockMvc\n-        .perform(reqBuilder)\n-        .andDo(print())\n-        .andExpect(httpStatusMatcher)\n-        .andExpect(content().string(containsString(expectedTextInResponseBody)))\n-        .andReturn();\n-  }\n-\n-  protected MvcResult performGet(\n-      String path,\n-      MultiValueMap<String, String> queryParamsMap,\n-      HttpHeaders headers,\n-      String redirectUrl,\n-      Cookie... cookies)\n-      throws Exception {\n-\n-    MockHttpServletRequestBuilder reqBuilder = get(path).contextPath(contextPath).headers(headers);\n-\n-    if (queryParamsMap != null) {\n-      reqBuilder.queryParams(queryParamsMap);\n-    }\n-\n-    if (cookies.length > 0) {\n-      reqBuilder.cookie(cookies);\n-    }\n-\n-    return mockMvc\n-        .perform(reqBuilder)\n-        .andDo(print())\n-        .andExpect(status().is3xxRedirection())\n-        .andExpect(redirectedUrl(redirectUrl))\n-        .andReturn();\n-  }\n-\n-  protected MvcResult performGet(\n-      String path,\n-      MultiValueMap<String, String> paramsMap,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher,\n-      Cookie... cookies)\n-      throws Exception {\n-\n-    MockHttpServletRequestBuilder reqBuilder = get(path).contextPath(contextPath).headers(headers);\n-\n-    if (cookies.length > 0) {\n-      reqBuilder.cookie(cookies);\n-    }\n-\n-    if (paramsMap != null) {\n-      reqBuilder.params(paramsMap);\n-    }\n-\n-    return mockMvc\n-        .perform(reqBuilder)\n-        .andDo(print())\n-        .andExpect(httpStatusMatcher)\n-        .andExpect(content().string(containsString(expectedTextInResponseBody)))\n-        .andReturn();\n-  }\n-\n-  protected MvcResult performGet(\n-      String path,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher,\n-      Cookie... cookies)\n-      throws Exception {\n-\n-    MockHttpServletRequestBuilder reqBuilder = get(path).contextPath(contextPath).headers(headers);\n-\n-    if (cookies.length > 0) {\n-      reqBuilder.cookie(cookies);\n-    }\n-\n-    return mockMvc\n-        .perform(reqBuilder)\n-        .andDo(print())\n-        .andExpect(httpStatusMatcher)\n-        .andExpect(content().string(containsString(expectedTextInResponseBody)))\n-        .andReturn();\n-  }\n-\n-  protected MvcResult performDelete(\n-      String path,\n-      String requestBody,\n-      HttpHeaders headers,\n-      String expectedTextInResponseBody,\n-      ResultMatcher httpStatusMatcher,\n-      Cookie... cookies)\n-      throws Exception {\n-\n-    MockHttpServletRequestBuilder reqBuilder =\n-        delete(path).contextPath(contextPath).headers(headers);\n-\n-    if (cookies.length > 0) {\n-      reqBuilder.cookie(cookies);\n-    }\n-\n-    if (StringUtils.isNotEmpty(requestBody)) {\n-      reqBuilder.content(requestBody);\n-    }\n-\n-    return mockMvc\n-        .perform(reqBuilder)\n-        .andDo(print())\n-        .andExpect(httpStatusMatcher)\n-        .andExpect(content().string(containsString(expectedTextInResponseBody)))\n-        .andReturn();\n-  }\n-}\n"}}, {"oid": "542ec3abe5561028b1724eba7471e7c8868fba6b", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/542ec3abe5561028b1724eba7471e7c8868fba6b", "message": "Fixed PR review comments\n\nFixed PR review comments", "committedDate": "2020-06-11T15:03:09Z", "type": "commit"}, {"oid": "618f4852d04f4ef97100f17e13e89fbcc11fa30f", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/618f4852d04f4ef97100f17e13e89fbcc11fa30f", "message": "Created audit-log-modules and common-modules\n\nCreated audit-log-modules and common-modules", "committedDate": "2020-06-15T09:57:06Z", "type": "commit"}, {"oid": "1f9d567c96662277fcc693f79d9254ef9aefb5b5", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/1f9d567c96662277fcc693f79d9254ef9aefb5b5", "message": "Merge branch 'early-access' into early-access-audit-log-service", "committedDate": "2020-06-16T07:17:44Z", "type": "commit"}]}