{"pr_number": 441, "pr_title": "Android- check style linter fixes", "pr_createdAt": "2020-06-03T15:59:26Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441", "timeline": [{"oid": "c759d6747c45014b5a531b75acfc400448091502", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c759d6747c45014b5a531b75acfc400448091502", "message": "lint fixes", "committedDate": "2020-05-26T07:26:08Z", "type": "commit"}, {"oid": "80fd49a91f664b2760192acad8610bf1571b48df", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/80fd49a91f664b2760192acad8610bf1571b48df", "message": "lint fixes", "committedDate": "2020-05-26T17:29:09Z", "type": "commit"}, {"oid": "ce56d91676eff29d7106902f3ea9989dbc443d02", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ce56d91676eff29d7106902f3ea9989dbc443d02", "message": "Copyright changes", "committedDate": "2020-05-27T15:20:57Z", "type": "commit"}, {"oid": "310d11db9631c94d4ab20998af0687c8beefa82a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/310d11db9631c94d4ab20998af0687c8beefa82a", "message": "crash due to runId fix", "committedDate": "2020-06-02T15:53:18Z", "type": "commit"}, {"oid": "204bdbb0b61e067a5ba0169542f92f3b6b0b5142", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/204bdbb0b61e067a5ba0169542f92f3b6b0b5142", "message": "Merge branch 'early-access' into early-access_linter-fixes\n\n# Conflicts:\n#\tAndroid/app/src/main/java/com/harvard/notificationmodule/AlarmReceiver.java\n#\tAndroid/app/src/main/java/com/harvard/notificationmodule/NotificationModuleSubscriber.java", "committedDate": "2020-06-03T04:25:24Z", "type": "commit"}, {"oid": "c62f59309553b67c27395c0e6524665f1b130908", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c62f59309553b67c27395c0e6524665f1b130908", "message": "Merge branch 'early-access' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access_linter-fixes", "committedDate": "2020-06-03T04:25:45Z", "type": "commit"}, {"oid": "b734609e93b87465adb9b52f3339a1d712cf8e9d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b734609e93b87465adb9b52f3339a1d712cf8e9d", "message": "git ignore merge update", "committedDate": "2020-06-03T04:33:12Z", "type": "commit"}, {"oid": "d9caf337cc559c22a513b2b63bc42f6755103847", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d9caf337cc559c22a513b2b63bc42f6755103847", "message": "linter fixes for class name", "committedDate": "2020-06-03T13:51:24Z", "type": "commit"}, {"oid": "35ec6c6585b14093afe7549da56f2cac59cb2798", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/35ec6c6585b14093afe7549da56f2cac59cb2798", "message": "Merge branch 'early-access' of https://github.com/GoogleCloudPlatform/fda-mystudies into early-access_linter-fixes", "committedDate": "2020-06-03T15:40:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTkyNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435341924", "bodyText": "This looks like a bad merge", "author": "nikklassen", "createdAt": "2020-06-04T15:20:42Z", "path": "Android/app/src/main/java/com/harvard/notificationmodule/AlarmReceiver.java", "diffHunk": "@@ -68,231 +65,215 @@ public void onReceive(Context context, Intent intent) {\n     } catch (Exception e) {\n       Logger.log(e);\n     }\n-    if (pendingIntentId == REQUEST_CODE_24HR_NOTIFICATION) {\n-      notificationForTodayAnd24HrAlarm(context);\n-    } else {\n-      showLocalNotification(context, intent);\n-    }\n-  }\n-\n-  private void showLocalNotification(Context context, Intent intent) {\n-    Intent notificationIntent1 = new Intent(context, NotificationActivity.class);\n-\n-    TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);\n-    stackBuilder.addParentStack(NotificationActivity.class);\n-    stackBuilder.addNextIntent(notificationIntent1);\n+    if (pendingIntentId == 1) {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2MzMwNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r436063307", "bodyText": "Thanks for catching this issue. it's addressed in the latest commit", "author": "naveenr-btc", "createdAt": "2020-06-05T17:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/notificationmodule/AlarmReceiver.java b/Android/app/src/main/java/com/harvard/notificationmodule/AlarmReceiver.java\nindex 296de17c6..bcc58d815 100644\n--- a/Android/app/src/main/java/com/harvard/notificationmodule/AlarmReceiver.java\n+++ b/Android/app/src/main/java/com/harvard/notificationmodule/AlarmReceiver.java\n\n@@ -65,215 +67,231 @@ public class AlarmReceiver extends BroadcastReceiver {\n     } catch (Exception e) {\n       Logger.log(e);\n     }\n-    if (pendingIntentId == 1) {\n-      Realm realm = AppController.getRealmobj(context);\n-      DbServiceSubscriber dbServiceSubscriber = new DbServiceSubscriber();\n-      RealmResults<NotificationDb> notificationDbs =\n-          dbServiceSubscriber.getNotificationDbByCurrentDate(realm);\n-      NotificationModuleSubscriber notificationModuleSubscriber =\n-          new NotificationModuleSubscriber(dbServiceSubscriber, realm);\n-      if (notificationDbs != null && notificationDbs.size() > 0) {\n-        for (int i = 0; i < notificationDbs.size(); i++) {\n-          Calendar time = Calendar.getInstance();\n-          time.setTime(notificationDbs.get(i).getDateTime());\n-          notificationModuleSubscriber.setAlarm(\n-              context,\n-              notificationDbs.get(i).getTitle(),\n-              notificationDbs.get(i).getDescription(),\n-              notificationDbs.get(i).getType(),\n-              notificationDbs.get(i).getNotificationId(),\n-              notificationDbs.get(i).getStudyId(),\n-              notificationDbs.get(i).getActivityId(),\n-              time);\n-        }\n-      }\n-      Calendar calendar = Calendar.getInstance();\n-      calendar.set(Calendar.HOUR_OF_DAY, 0);\n-      calendar.set(Calendar.MINUTE, 0);\n-      calendar.set(Calendar.SECOND, 0);\n-      calendar.set(Calendar.MILLISECOND, 0);\n-      calendar.add(Calendar.DATE, 1);\n-\n-      try {\n-        Intent notificationIntent = new Intent(context, AlarmReceiver.class);\n-        notificationIntent.setAction(\"android.media.action.DISPLAY_NOTIFICATION\");\n-        notificationIntent.addCategory(\"android.intent.category.DEFAULT\");\n-        notificationIntent.putExtra(\"pendingIntentId\", 1);\n-        AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\n-        PendingIntent broadcast =\n-            PendingIntent.getBroadcast(\n-                context, 1, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n-        try {\n-          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-            alarmManager.setExactAndAllowWhileIdle(\n-                AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), broadcast);\n-          } else {\n-            alarmManager.setExact(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), broadcast);\n-          }\n-        } catch (NullPointerException e) {\n-          Logger.log(e);\n-        }\n-      } catch (Exception e) {\n-        Logger.log(e);\n-      }\n-\n-      try {\n-        dbServiceSubscriber.closeRealmObj(realm);\n-      } catch (Exception e) {\n-        Logger.log(e);\n-      }\n+    if (pendingIntentId == REQUEST_CODE_24HR_NOTIFICATION) {\n+      notificationForTodayAnd24HrAlarm(context);\n     } else {\n+      showLocalNotification(context, intent);\n+    }\n+  }\n \n-      Intent notificationIntent1 = new Intent(context, NotificationActivity.class);\n+  private void showLocalNotification(Context context, Intent intent) {\n+    Intent notificationIntent1 = new Intent(context, NotificationActivity.class);\n \n-      TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);\n-      stackBuilder.addParentStack(NotificationActivity.class);\n-      stackBuilder.addNextIntent(notificationIntent1);\n+    TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);\n+    stackBuilder.addParentStack(NotificationActivity.class);\n+    stackBuilder.addNextIntent(notificationIntent1);\n \n-      String title = intent.getStringExtra(\"title\");\n-      String description = intent.getStringExtra(\"description\");\n-      String studyId = null;\n-      if (intent.getStringExtra(\"studyId\") != null) {\n-        studyId = intent.getStringExtra(\"studyId\");\n-      }\n+    String title = intent.getStringExtra(\"title\");\n+    String description = intent.getStringExtra(\"description\");\n+    String studyId = null;\n+    if (intent.getStringExtra(\"studyId\") != null) {\n+      studyId = intent.getStringExtra(\"studyId\");\n+    }\n \n-      String activityId = null;\n-      if (intent.getStringExtra(\"activityId\") != null) {\n-        activityId = intent.getStringExtra(\"activityId\");\n-      }\n+    String activityId = null;\n+    if (intent.getStringExtra(\"activityId\") != null) {\n+      activityId = intent.getStringExtra(\"activityId\");\n+    }\n \n-      int notificationId = intent.getIntExtra(\"notificationId\", 0);\n+    int notificationId = intent.getIntExtra(\"notificationId\", 0);\n \n-      Intent notificationIntent;\n-      if (AppConfig.AppType.equalsIgnoreCase(context.getString(R.string.app_gateway))) {\n-        notificationIntent = new Intent(context, StudyActivity.class);\n+    Intent notificationIntent;\n+    if (AppConfig.AppType.equalsIgnoreCase(context.getString(R.string.app_gateway))) {\n+      notificationIntent = new Intent(context, StudyActivity.class);\n+    } else {\n+      notificationIntent = new Intent(context, StandaloneActivity.class);\n+    }\n+    PendingIntent contentIntent = null;\n+    String type = intent.getStringExtra(\"type\");\n+    if (!type.equalsIgnoreCase(NotificationModuleSubscriber.NO_USE_NOTIFICATION)) {\n+      notificationIntent.putExtra(StudyActivity.FROM, NOTIFICATION_INTENT);\n+\n+      notificationIntent.putExtra(TYPE, \"Study\");\n+      if (type.equalsIgnoreCase(\"resources\")) {\n+        notificationIntent.putExtra(SUBTYPE, \"Resource\");\n       } else {\n-        notificationIntent = new Intent(context, StandaloneActivity.class);\n+        notificationIntent.putExtra(SUBTYPE, \"Activity\");\n       }\n-      String type = intent.getStringExtra(\"type\");\n-      PendingIntent contentIntent = null;\n-      if (!type.equalsIgnoreCase(NotificationModuleSubscriber.NO_USE_NOTIFICATION)) {\n-        notificationIntent.putExtra(StudyActivity.FROM, NOTIFICATION_INTENT);\n+      notificationIntent\n+              .putExtra(STUDYID, studyId)\n+              .putExtra(ACTIVITYID, activityId)\n+              .putExtra(AUDIENCE, \"\")\n+              .putExtra(LOCAL_NOTIFICATION, \"true\")\n+              .putExtra(TITLE, title)\n+              .putExtra(MESSAGE, description)\n+              .setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n+      contentIntent =\n+              PendingIntent.getActivity(\n+                      context, notificationId, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n+    }\n \n-        notificationIntent.putExtra(TYPE, \"Study\");\n-        if (type.equalsIgnoreCase(\"resources\")) {\n-          notificationIntent.putExtra(SUBTYPE, \"Resource\");\n-        } else {\n-          notificationIntent.putExtra(SUBTYPE, \"Activity\");\n+    int notifyIcon = R.mipmap.ic_launcher;\n+    Bitmap icon = BitmapFactory.decodeResource(context.getResources(), notifyIcon);\n+    Notification notification = null;\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+      notification =\n+              createNotificationForLollipopAndAbove(\n+                      context, type, title, description, icon, contentIntent);\n+    } else {\n+      notification =\n+              createNotificationForBelowLollipop(context, type, title, description, contentIntent);\n+    }\n+\n+    try {\n+      int count =\n+              Integer.parseInt(\n+                      AppController.getHelperSharedPreference()\n+                              .readPreference(\n+                                      context,\n+                                      context.getResources().getString(R.string.notificationCount),\n+                                      \"0\"))\n+                      + 1;\n+      AppController.getHelperSharedPreference()\n+              .writePreference(\n+                      context, context.getResources().getString(R.string.notificationCount), \"\" + count);\n+      NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);\n+\n+      Realm realm = AppController.getRealmobj(context);\n+      DbServiceSubscriber dbServiceSubscriber = new DbServiceSubscriber();\n+      UserProfileData userProfileData = dbServiceSubscriber.getUserProfileData(realm);\n+      StudyList studyList = dbServiceSubscriber.getStudiesDetails(studyId, realm);\n+      boolean isNotification = true;\n+      if (userProfileData != null) {\n+        isNotification = userProfileData.getSettings().isLocalNotifications();\n+      }\n+      if (!studyList.getStatus().equalsIgnoreCase(\"paused\")\n+              && (isNotification\n+              || type.equalsIgnoreCase(\n+              NotificationModuleSubscriber.NOTIFICATION_TURN_OFF_NOTIFICATION))) {\n+        notificationManager.notify(count, notification);\n+        if (type.equalsIgnoreCase(\n+                NotificationModuleSubscriber.NOTIFICATION_TURN_OFF_NOTIFICATION)) {\n+          NotificationModuleSubscriber notificationModuleSubscriber =\n+                  new NotificationModuleSubscriber(dbServiceSubscriber, realm);\n+          notificationModuleSubscriber.generateNotificationTurnOffNotification(\n+                  Calendar.getInstance().getTime(), context);\n         }\n-        notificationIntent.putExtra(STUDYID, studyId);\n-        notificationIntent.putExtra(ACTIVITYID, activityId);\n-        notificationIntent.putExtra(AUDIENCE, \"\");\n-        notificationIntent.putExtra(LOCAL_NOTIFICATION, \"true\");\n-        notificationIntent.putExtra(TITLE, title);\n-        notificationIntent.putExtra(MESSAGE, description);\n-        notificationIntent.setFlags(\n-            Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n-        contentIntent =\n-            PendingIntent.getActivity(\n-                context, notificationId, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n       }\n \n-      int notifyIcon = R.mipmap.ic_launcher;\n-      Bitmap icon = BitmapFactory.decodeResource(context.getResources(), notifyIcon);\n-      NotificationCompat.Builder builder = new NotificationCompat.Builder(context);\n-      Notification notification = null;\n-      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n-        if (type.equalsIgnoreCase(NotificationModuleSubscriber.NO_USE_NOTIFICATION)) {\n-          notification =\n+      dbServiceSubscriber.closeRealmObj(realm);\n+    } catch (NumberFormatException | Resources.NotFoundException e) {\n+      Logger.log(e);\n+    } catch (Exception e) {\n+      Logger.log(e);\n+    }\n+  }\n+\n+  private Notification createNotificationForBelowLollipop(\n+          Context context, String type, String title, String description, PendingIntent contentIntent) {\n+    NotificationCompat.Builder builder = new NotificationCompat.Builder(context);\n+    Notification notification;\n+    if (type.equalsIgnoreCase(NotificationModuleSubscriber.NO_USE_NOTIFICATION)) {\n+      notification =\n               builder\n-                  .setContentTitle(title)\n-                  .setLargeIcon(Bitmap.createScaledBitmap(icon, 128, 128, false))\n-                  .setContentText(description)\n-                  .setChannelId(FdaApplication.NOTIFICATION_CHANNEL_ID_INFO)\n-                  .setStyle(new NotificationCompat.BigTextStyle().bigText(description))\n-                  .setSmallIcon(R.mipmap.ic_launcher)\n-                  .setAutoCancel(true)\n-                  .setGroup(\"group\")\n-                  .build();\n-        } else {\n-          notification =\n+                      .setContentTitle(title)\n+                      .setContentText(description)\n+                      .setChannelId(FdaApplication.NOTIFICATION_CHANNEL_ID_INFO)\n+                      .setStyle(new NotificationCompat.BigTextStyle().bigText(description))\n+                      .setSmallIcon(R.mipmap.ic_launcher)\n+                      .setAutoCancel(true)\n+                      .setGroup(\"group\")\n+                      .build();\n+    } else {\n+      notification =\n               builder\n-                  .setContentTitle(title)\n-                  .setLargeIcon(Bitmap.createScaledBitmap(icon, 128, 128, false))\n-                  .setContentText(description)\n-                  .setChannelId(FdaApplication.NOTIFICATION_CHANNEL_ID_INFO)\n-                  .setStyle(new NotificationCompat.BigTextStyle().bigText(description))\n-                  .setSmallIcon(R.mipmap.ic_launcher)\n-                  .setAutoCancel(true)\n-                  .setContentIntent(contentIntent)\n-                  .setGroup(\"group\")\n-                  .build();\n-        }\n-      } else {\n-        if (type.equalsIgnoreCase(NotificationModuleSubscriber.NO_USE_NOTIFICATION)) {\n-          notification =\n+                      .setContentTitle(title)\n+                      .setContentText(description)\n+                      .setChannelId(FdaApplication.NOTIFICATION_CHANNEL_ID_INFO)\n+                      .setStyle(new NotificationCompat.BigTextStyle().bigText(description))\n+                      .setSmallIcon(R.mipmap.ic_launcher)\n+                      .setAutoCancel(true)\n+                      .setContentIntent(contentIntent)\n+                      .setGroup(\"group\")\n+                      .build();\n+    }\n+    return notification;\n+  }\n+\n+  private Notification createNotificationForLollipopAndAbove(\n+          Context context,\n+          String type,\n+          String title,\n+          String description,\n+          Bitmap icon,\n+          PendingIntent contentIntent) {\n+    NotificationCompat.Builder builder = new NotificationCompat.Builder(context);\n+    Notification notification;\n+    if (type.equalsIgnoreCase(NotificationModuleSubscriber.NO_USE_NOTIFICATION)) {\n+      notification =\n               builder\n-                  .setContentTitle(title)\n-                  .setContentText(description)\n-                  .setChannelId(FdaApplication.NOTIFICATION_CHANNEL_ID_INFO)\n-                  .setStyle(new NotificationCompat.BigTextStyle().bigText(description))\n-                  .setSmallIcon(R.mipmap.ic_launcher)\n-                  .setAutoCancel(true)\n-                  .setGroup(\"group\")\n-                  .build();\n-        } else {\n-          notification =\n+                      .setContentTitle(title)\n+                      .setLargeIcon(Bitmap.createScaledBitmap(icon, 128, 128, false))\n+                      .setContentText(description)\n+                      .setChannelId(FdaApplication.NOTIFICATION_CHANNEL_ID_INFO)\n+                      .setStyle(new NotificationCompat.BigTextStyle().bigText(description))\n+                      .setSmallIcon(R.mipmap.ic_launcher)\n+                      .setAutoCancel(true)\n+                      .setGroup(\"group\")\n+                      .build();\n+    } else {\n+      notification =\n               builder\n-                  .setContentTitle(title)\n-                  .setContentText(description)\n-                  .setChannelId(FdaApplication.NOTIFICATION_CHANNEL_ID_INFO)\n-                  .setStyle(new NotificationCompat.BigTextStyle().bigText(description))\n-                  .setSmallIcon(R.mipmap.ic_launcher)\n-                  .setAutoCancel(true)\n-                  .setContentIntent(contentIntent)\n-                  .setGroup(\"group\")\n-                  .build();\n-        }\n-      }\n-\n-      try {\n-        int count =\n-            Integer.parseInt(\n-                    AppController.getHelperSharedPreference()\n-                        .readPreference(\n-                            context,\n-                            context.getResources().getString(R.string.notificationCount),\n-                            \"0\"))\n-                + 1;\n-        AppController.getHelperSharedPreference()\n-            .writePreference(\n-                context, context.getResources().getString(R.string.notificationCount), \"\" + count);\n-        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);\n-\n-        Realm realm = AppController.getRealmobj(context);\n-        DbServiceSubscriber dbServiceSubscriber = new DbServiceSubscriber();\n-        UserProfileData userProfileData = dbServiceSubscriber.getUserProfileData(realm);\n-        StudyList studyList = dbServiceSubscriber.getStudiesDetails(studyId, realm);\n-        boolean isNotification = true;\n-        if (userProfileData != null) {\n-          isNotification = userProfileData.getSettings().isLocalNotifications();\n-        }\n-        if (!studyList.getStatus().equalsIgnoreCase(\"paused\")\n-            && (isNotification\n-                || type.equalsIgnoreCase(\n-                    NotificationModuleSubscriber.NOTIFICATION_TURN_OFF_NOTIFICATION))) {\n-          notificationManager.notify(count, notification);\n-          if (type.equalsIgnoreCase(\n-              NotificationModuleSubscriber.NOTIFICATION_TURN_OFF_NOTIFICATION)) {\n-            NotificationModuleSubscriber notificationModuleSubscriber =\n-                new NotificationModuleSubscriber(dbServiceSubscriber, realm);\n-            notificationModuleSubscriber.generateNotificationTurnOffNotification(\n-                Calendar.getInstance().getTime(), context);\n-          }\n-        }\n+                      .setContentTitle(title)\n+                      .setLargeIcon(Bitmap.createScaledBitmap(icon, 128, 128, false))\n+                      .setContentText(description)\n+                      .setChannelId(FdaApplication.NOTIFICATION_CHANNEL_ID_INFO)\n+                      .setStyle(new NotificationCompat.BigTextStyle().bigText(description))\n+                      .setSmallIcon(R.mipmap.ic_launcher)\n+                      .setAutoCancel(true)\n+                      .setContentIntent(contentIntent)\n+                      .setGroup(\"group\")\n+                      .build();\n+    }\n+    return notification;\n+  }\n \n-        dbServiceSubscriber.closeRealmObj(realm);\n-      } catch (NumberFormatException | Resources.NotFoundException e) {\n-        Logger.log(e);\n-      } catch (Exception e) {\n-        Logger.log(e);\n+  private void notificationForTodayAnd24HrAlarm(Context context) {\n+    Realm realm = AppController.getRealmobj(context);\n+    DbServiceSubscriber dbServiceSubscriber = new DbServiceSubscriber();\n+    RealmResults<NotificationDb> notificationDbs =\n+            dbServiceSubscriber.getNotificationDbByCurrentDate(realm);\n+    NotificationModuleSubscriber notificationModuleSubscriber =\n+            new NotificationModuleSubscriber(dbServiceSubscriber, realm);\n+    if (notificationDbs != null) {\n+      for (NotificationDb notificationDb : notificationDbs) {\n+        Calendar time = Calendar.getInstance();\n+        time.setTime(notificationDb.getDateTime());\n+        notificationModuleSubscriber.setAlarm(\n+                context,\n+                notificationDb.getTitle(),\n+                notificationDb.getDescription(),\n+                notificationDb.getType(),\n+                notificationDb.getNotificationId(),\n+                notificationDb.getStudyId(),\n+                notificationDb.getActivityId(),\n+                time);\n       }\n     }\n+    Calendar calendar = NotificationModuleSubscriber.getCalenderNextDay();\n+\n+    Intent notificationIntent =\n+            new Intent(context, AlarmReceiver.class)\n+                    .setAction(\"android.media.action.DISPLAY_NOTIFICATION\")\n+                    .addCategory(\"android.intent.category.DEFAULT\")\n+                    .putExtra(\"pendingIntentId\", REQUEST_CODE_24HR_NOTIFICATION);\n+    AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\n+    PendingIntent broadcast =\n+            PendingIntent.getBroadcast(\n+                    context,\n+                    REQUEST_CODE_24HR_NOTIFICATION,\n+                    notificationIntent,\n+                    PendingIntent.FLAG_UPDATE_CURRENT);\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+      alarmManager.setExactAndAllowWhileIdle(\n+              AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), broadcast);\n+    } else {\n+      alarmManager.setExact(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), broadcast);\n+    }\n+    dbServiceSubscriber.closeRealmObj(realm);\n   }\n-}\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0Mzg1OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435343858", "bodyText": "Use App (or something else) instead of My. My is like using Foo.", "author": "nikklassen", "createdAt": "2020-06-04T15:23:18Z", "path": "Android/app/src/main/java/com/harvard/MyFirebaseInstanceIdService.java", "diffHunk": "@@ -18,7 +19,7 @@\n import com.google.firebase.iid.FirebaseInstanceIdService;\n import com.harvard.utils.AppController;\n \n-public class MyFirebaseInstanceIDService extends FirebaseInstanceIdService {\n+public class MyFirebaseInstanceIdService extends FirebaseInstanceIdService {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/MyFirebaseInstanceIdService.java b/Android/app/src/main/java/com/harvard/AppFirebaseInstanceIdService.java\nsimilarity index 95%\nrename from Android/app/src/main/java/com/harvard/MyFirebaseInstanceIdService.java\nrename to Android/app/src/main/java/com/harvard/AppFirebaseInstanceIdService.java\nindex e4b743e65..1ece7625d 100644\n--- a/Android/app/src/main/java/com/harvard/MyFirebaseInstanceIdService.java\n+++ b/Android/app/src/main/java/com/harvard/AppFirebaseInstanceIdService.java\n\n@@ -19,7 +19,7 @@ import com.google.firebase.iid.FirebaseInstanceId;\n import com.google.firebase.iid.FirebaseInstanceIdService;\n import com.harvard.utils.AppController;\n \n-public class MyFirebaseInstanceIdService extends FirebaseInstanceIdService {\n+public class AppFirebaseInstanceIdService extends FirebaseInstanceIdService {\n \n   @Override\n   public void onTokenRefresh() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDk3NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435344974", "bodyText": "instance", "author": "nikklassen", "createdAt": "2020-06-04T15:24:46Z", "path": "Android/app/src/main/java/com/harvard/FdaApplication.java", "diffHunk": "@@ -35,14 +35,14 @@\n import io.fabric.sdk.android.Fabric;\n import io.realm.Realm;\n \n-public class FDAApplication extends Application {\n-  private static FDAApplication sInstance;\n-  private FDAEventBusRegistry mRegistry;\n+public class FdaApplication extends Application {\n+  private static FdaApplication sInstance;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/FdaApplication.java b/Android/app/src/main/java/com/harvard/FdaApplication.java\nindex d89b419ef..a2da62625 100644\n--- a/Android/app/src/main/java/com/harvard/FdaApplication.java\n+++ b/Android/app/src/main/java/com/harvard/FdaApplication.java\n\n@@ -36,19 +36,19 @@ import io.fabric.sdk.android.Fabric;\n import io.realm.Realm;\n \n public class FdaApplication extends Application {\n-  private static FdaApplication sInstance;\n+  private static FdaApplication instance;\n   private FdaEventBusRegistry registry;\n \n   public static final String NOTIFICATION_CHANNEL_ID_SERVICE = AppConfig.PackageName + \".service\";\n   public static final String NOTIFICATION_CHANNEL_ID_INFO = AppConfig.PackageName + \".general\";\n \n   public static FdaApplication getInstance() {\n-    return sInstance;\n+    return instance;\n   }\n \n   @Override\n   public void onCreate() {\n-    sInstance = this;\n+    instance = this;\n     super.onCreate();\n     Fabric.with(this, new Crashlytics());\n     dbInitialize();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0Nzk1NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435347954", "bodyText": "Bad merge here too", "author": "nikklassen", "createdAt": "2020-06-04T15:28:46Z", "path": "Android/app/src/main/java/com/harvard/notificationmodule/NotificationModuleSubscriber.java", "diffHunk": "@@ -72,130 +69,216 @@ public void generateActivityLocalNotification(\n     Calendar time1 = Calendar.getInstance();\n     ActivitiesWS activitiesWS =\n         dbServiceSubscriber.getActivityItem(\n-            activityRun.getStudyId(), activityRun.getActivityId(), mRealm);\n-\n-    if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_ONE_TIME)) {\n-      Date date = removeOffset(activityRun.getEndDate(), offset);\n-      time.setTime(date);\n-      time.add(Calendar.HOUR_OF_DAY, -24);\n-\n-      Date date1 = removeOffset(activityRun.getStartDate(), offset);\n-      time1.setTime(date1);\n-\n-      description =\n-          context.getResources().getString(R.string.the_activity)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \" \"\n-              + context.getResources().getString(R.string.participation_is_important);\n-      description1 =\n-          context.getResources().getString(R.string.the_activity)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \", \"\n-              + context.getResources().getString(R.string.now_available_to_take);\n-    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MANUALLY_SCHEDULE)) {\n-      Date date = removeOffset(activityRun.getStartDate(), offset);\n-      time.setTime(date);\n-      description =\n-          context.getResources().getString(R.string.scheduled_activity)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \", \"\n-              + context.getResources().getString(R.string.valid_until)\n-              + \" \"\n-              + notificationFormat.format(activityRun.getEndDate())\n-              + context.getResources().getString(R.string.participation_is_important2);\n-    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WEEKLY)) {\n-      Date date = removeOffset(activityRun.getEndDate(), offset);\n-      time.setTime(date);\n-      time.add(Calendar.HOUR_OF_DAY, -24);\n-\n-      Date date1 = removeOffset(activityRun.getStartDate(), offset);\n-      time1.setTime(date1);\n-\n-      description =\n-          context.getResources().getString(R.string.weekly_activity)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \", \"\n-              + context.getResources().getString(R.string.participation_is_important);\n-      description1 =\n-          context.getResources().getString(R.string.new_run)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \", \"\n-              + context.getResources().getString(R.string.study_complete);\n-    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MONTHLY)) {\n-      Date date = removeOffset(activityRun.getEndDate(), offset);\n-      time.setTime(date);\n-      time.add(Calendar.HOUR_OF_DAY, -72);\n-\n-      Date date1 = removeOffset(activityRun.getStartDate(), offset);\n-      time1.setTime(date1);\n-\n-      description =\n-          context.getResources().getString(R.string.monthly_activity)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \", \"\n-              + context.getResources().getString(R.string.expire_in_three_days);\n-      description1 =\n-          context.getResources().getString(R.string.new_run_monthly_activity)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \", \"\n-              + context.getResources().getString(R.string.study_complete);\n-    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_DAILY)) {\n-      Date date = removeOffset(activityRun.getStartDate(), offset);\n-      time.setTime(date);\n-      description =\n-          context.getResources().getString(R.string.new_run_daily_activity)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \", \"\n-              + context.getResources().getString(R.string.your_participation_important);\n-    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WITHIN_A_DAY)) {\n-      Date date = removeOffset(activityRun.getStartDate(), offset);\n-      time.setTime(date);\n-      description =\n-          context.getResources().getString(R.string.new_run_daily_activity)\n-              + \" \"\n-              + activitiesWS.getTitle()\n-              + \", \"\n-              + context.getResources().getString(R.string.valid_until)\n-              + \" \"\n-              + notificationFormat.format(activityRun.getEndDate())\n-              + context.getResources().getString(R.string.participation_is_important2);\n-    }\n-    updateNotificationToDbAndSetAlarm(context, activityRun, time, title, description, offset);\n-    // Notification availability for monthly, weekly, One time\n-    if ((type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MONTHLY)\n-        || type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WEEKLY)\n-        || type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_ONE_TIME))) {\n-      updateNotificationToDbAndSetAlarm(context, activityRun, time1, title, description1, offset);\n+            activityRun.getStudyId(), activityRun.getActivityId(), realm);\n+\n+    try {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/notificationmodule/NotificationModuleSubscriber.java b/Android/app/src/main/java/com/harvard/notificationmodule/NotificationModuleSubscriber.java\nindex 9e6b15fdf..588f8485c 100644\n--- a/Android/app/src/main/java/com/harvard/notificationmodule/NotificationModuleSubscriber.java\n+++ b/Android/app/src/main/java/com/harvard/notificationmodule/NotificationModuleSubscriber.java\n\n@@ -68,217 +69,131 @@ public class NotificationModuleSubscriber {\n     Calendar time = Calendar.getInstance();\n     Calendar time1 = Calendar.getInstance();\n     ActivitiesWS activitiesWS =\n-        dbServiceSubscriber.getActivityItem(\n-            activityRun.getStudyId(), activityRun.getActivityId(), realm);\n-\n-    try {\n-      if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_ONE_TIME)) {\n-        Date date = removeOffset(activityRun.getEndDate(), offset);\n-        time.setTime(date);\n-        time.add(Calendar.HOUR_OF_DAY, -24);\n-\n-        Date date1 = removeOffset(activityRun.getStartDate(), offset);\n-        time1.setTime(date1);\n-\n-        description =\n-            context.getResources().getString(R.string.the_activity)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \" \"\n-                + context.getResources().getString(R.string.participation_is_important);\n-        description1 =\n-            context.getResources().getString(R.string.the_activity)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \", \"\n-                + context.getResources().getString(R.string.now_available_to_take);\n-      } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MANUALLY_SCHEDULE)) {\n-        Date date = removeOffset(activityRun.getStartDate(), offset);\n-        time.setTime(date);\n-        description =\n-            context.getResources().getString(R.string.scheduled_activity)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \", \"\n-                + context.getResources().getString(R.string.valid_until)\n-                + \" \"\n-                + notificationFormat.format(activityRun.getEndDate())\n-                + context.getResources().getString(R.string.participation_is_important2);\n-      } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WEEKLY)) {\n-        Date date = removeOffset(activityRun.getEndDate(), offset);\n-        time.setTime(date);\n-        time.add(Calendar.HOUR_OF_DAY, -24);\n-\n-        Date date1 = removeOffset(activityRun.getStartDate(), offset);\n-        time1.setTime(date1);\n-\n-        description =\n-            context.getResources().getString(R.string.weekly_activity)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \", \"\n-                + context.getResources().getString(R.string.participation_is_important);\n-        description1 =\n-            context.getResources().getString(R.string.new_run)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \", \"\n-                + context.getResources().getString(R.string.study_complete);\n-      } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MONTHLY)) {\n-        Date date = removeOffset(activityRun.getEndDate(), offset);\n-        time.setTime(date);\n-        time.add(Calendar.HOUR_OF_DAY, -72);\n-\n-        Date date1 = removeOffset(activityRun.getStartDate(), offset);\n-        time1.setTime(date1);\n-\n-        description =\n-            context.getResources().getString(R.string.monthly_activity)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \", \"\n-                + context.getResources().getString(R.string.expire_in_three_days);\n-        description1 =\n-            context.getResources().getString(R.string.new_run_monthly_activity)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \", \"\n-                + context.getResources().getString(R.string.study_complete);\n-      } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_DAILY)) {\n-        Date date = removeOffset(activityRun.getStartDate(), offset);\n-        time.setTime(date);\n-        description =\n-            context.getResources().getString(R.string.new_run_daily_activity)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \", \"\n-                + context.getResources().getString(R.string.your_participation_important);\n-      } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WITHIN_A_DAY)) {\n-        Date date = removeOffset(activityRun.getStartDate(), offset);\n-        time.setTime(date);\n-        description =\n-            context.getResources().getString(R.string.new_run_daily_activity)\n-                + \" \"\n-                + activitiesWS.getTitle()\n-                + \", \"\n-                + context.getResources().getString(R.string.valid_until)\n-                + \" \"\n-                + notificationFormat.format(activityRun.getEndDate())\n-                + context.getResources().getString(R.string.participation_is_important2);\n-      }\n-\n-      int notificationId;\n-\n-      if (time.getTime().after(new Date())) {\n-        notificationId = new Random().nextInt();\n-        NotificationDb notificationDb = new NotificationDb();\n-        notificationDb.setStudyId(activityRun.getStudyId());\n-        notificationDb.setActivityId(activityRun.getActivityId());\n-        notificationDb.setNotificationId(notificationId);\n-        notificationDb.setDateTime(time.getTime());\n-        notificationDb.setType(ACTIVITY);\n-        notificationDb.setId(1);\n-        notificationDb.setTitle(title);\n-        notificationDb.setDescription(description);\n-        notificationDb.setEndDateTime(removeOffset(activityRun.getEndDate(), offset));\n-        dbServiceSubscriber.updateNotificationToDb(context, notificationDb);\n-\n-        set24hourScheduler(context);\n-        if (isSameDay(new Date(), time.getTime())) {\n-          setAlarm(\n-              context,\n-              title,\n-              description,\n-              ACTIVITY,\n-              notificationId,\n-              activityRun.getStudyId(),\n-              activityRun.getActivityId(),\n-              time);\n-        }\n-      }\n-\n-      // Notification availability for monthly, weekly, One time\n-      if ((type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MONTHLY)\n-          || type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WEEKLY)\n-          || type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_ONE_TIME))) {\n-        if (time1.getTime().after(new Date())) {\n-          notificationId = new Random().nextInt();\n-          NotificationDb notificationDb = new NotificationDb();\n-          notificationDb.setStudyId(activityRun.getStudyId());\n-          notificationDb.setActivityId(activityRun.getActivityId());\n-          notificationDb.setNotificationId(notificationId);\n-          notificationDb.setDateTime(time1.getTime());\n-          notificationDb.setType(ACTIVITY);\n-          notificationDb.setTitle(title);\n-          notificationDb.setDescription(description1);\n-          notificationDb.setId(1);\n-          notificationDb.setEndDateTime(removeOffset(activityRun.getEndDate(), offset));\n-          dbServiceSubscriber.updateNotificationToDb(context, notificationDb);\n-          set24hourScheduler(context);\n-          if (isSameDay(new Date(), time1.getTime())) {\n-            setAlarm(\n-                context,\n-                title,\n-                description1,\n-                ACTIVITY,\n-                notificationId,\n-                activityRun.getStudyId(),\n-                activityRun.getActivityId(),\n-                time1);\n-          }\n-        }\n-      }\n-\n-    } catch (Exception e) {\n-      Logger.log(e);\n+            dbServiceSubscriber.getActivityItem(\n+                    activityRun.getStudyId(), activityRun.getActivityId(), realm);\n+\n+    if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_ONE_TIME)) {\n+      Date date = removeOffset(activityRun.getEndDate(), offset);\n+      time.setTime(date);\n+      time.add(Calendar.HOUR_OF_DAY, -24);\n+\n+      Date date1 = removeOffset(activityRun.getStartDate(), offset);\n+      time1.setTime(date1);\n+\n+      description =\n+              context.getResources().getString(R.string.the_activity)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \" \"\n+                      + context.getResources().getString(R.string.participation_is_important);\n+      description1 =\n+              context.getResources().getString(R.string.the_activity)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \", \"\n+                      + context.getResources().getString(R.string.now_available_to_take);\n+    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MANUALLY_SCHEDULE)) {\n+      Date date = removeOffset(activityRun.getStartDate(), offset);\n+      time.setTime(date);\n+      description =\n+              context.getResources().getString(R.string.scheduled_activity)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \", \"\n+                      + context.getResources().getString(R.string.valid_until)\n+                      + \" \"\n+                      + notificationFormat.format(activityRun.getEndDate())\n+                      + context.getResources().getString(R.string.participation_is_important2);\n+    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WEEKLY)) {\n+      Date date = removeOffset(activityRun.getEndDate(), offset);\n+      time.setTime(date);\n+      time.add(Calendar.HOUR_OF_DAY, -24);\n+\n+      Date date1 = removeOffset(activityRun.getStartDate(), offset);\n+      time1.setTime(date1);\n+\n+      description =\n+              context.getResources().getString(R.string.weekly_activity)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \", \"\n+                      + context.getResources().getString(R.string.participation_is_important);\n+      description1 =\n+              context.getResources().getString(R.string.new_run)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \", \"\n+                      + context.getResources().getString(R.string.study_complete);\n+    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MONTHLY)) {\n+      Date date = removeOffset(activityRun.getEndDate(), offset);\n+      time.setTime(date);\n+      time.add(Calendar.HOUR_OF_DAY, -72);\n+\n+      Date date1 = removeOffset(activityRun.getStartDate(), offset);\n+      time1.setTime(date1);\n+\n+      description =\n+              context.getResources().getString(R.string.monthly_activity)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \", \"\n+                      + context.getResources().getString(R.string.expire_in_three_days);\n+      description1 =\n+              context.getResources().getString(R.string.new_run_monthly_activity)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \", \"\n+                      + context.getResources().getString(R.string.study_complete);\n+    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_DAILY)) {\n+      Date date = removeOffset(activityRun.getStartDate(), offset);\n+      time.setTime(date);\n+      description =\n+              context.getResources().getString(R.string.new_run_daily_activity)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \", \"\n+                      + context.getResources().getString(R.string.your_participation_important);\n+    } else if (type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WITHIN_A_DAY)) {\n+      Date date = removeOffset(activityRun.getStartDate(), offset);\n+      time.setTime(date);\n+      description =\n+              context.getResources().getString(R.string.new_run_daily_activity)\n+                      + \" \"\n+                      + activitiesWS.getTitle()\n+                      + \", \"\n+                      + context.getResources().getString(R.string.valid_until)\n+                      + \" \"\n+                      + notificationFormat.format(activityRun.getEndDate())\n+                      + context.getResources().getString(R.string.participation_is_important2);\n+    }\n+    updateNotificationToDbAndSetAlarm(context, activityRun, time, title, description, offset);\n+    // Notification availability for monthly, weekly, One time\n+    if ((type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_MONTHLY)\n+            || type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_WEEKLY)\n+            || type.equalsIgnoreCase(SurveyScheduler.FREQUENCY_TYPE_ONE_TIME))) {\n+      updateNotificationToDbAndSetAlarm(context, activityRun, time1, title, description1, offset);\n     }\n   }\n \n   private void set24hourScheduler(Context context) {\n-    // checking if alram is working with pendingIntent\n-    boolean isWorking = false;\n-    try {\n-      Intent notificationIntent1 = new Intent(context, AlarmReceiver.class);\n-      notificationIntent1.setAction(\"android.media.action.DISPLAY_NOTIFICATION\");\n-      notificationIntent1.addCategory(\"android.intent.category.DEFAULT\");\n-      notificationIntent1.putExtra(\"pendingIntentId\", 1);\n-      isWorking =\n-          (PendingIntent.getBroadcast(context, 1, notificationIntent1, PendingIntent.FLAG_NO_CREATE)\n-              != null); // just changed the flag\n-    } catch (Exception e) {\n-      Logger.log(e);\n-    }\n-\n-    if (!isWorking) {\n-      Calendar calendar = Calendar.getInstance();\n-      calendar.set(Calendar.HOUR_OF_DAY, 0);\n-      calendar.set(Calendar.MINUTE, 0);\n-      calendar.set(Calendar.SECOND, 0);\n-      calendar.set(Calendar.MILLISECOND, 0);\n-      calendar.add(Calendar.DATE, 1);\n-\n-      try {\n-        Intent notificationIntent = new Intent(context, AlarmReceiver.class);\n-        notificationIntent.setAction(\"android.media.action.DISPLAY_NOTIFICATION\");\n-        notificationIntent.addCategory(\"android.intent.category.DEFAULT\");\n-        notificationIntent.putExtra(\"pendingIntentId\", 1);\n-        AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\n-        PendingIntent broadcast =\n+    Calendar calendar = getCalenderNextDay();\n+    Intent notificationIntent =\n+            new Intent(context, AlarmReceiver.class)\n+                    .setAction(\"android.media.action.DISPLAY_NOTIFICATION\")\n+                    .addCategory(\"android.intent.category.DEFAULT\")\n+                    .putExtra(\"pendingIntentId\", REQUEST_CODE_24HR_NOTIFICATION);\n+    AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\n+    PendingIntent broadcast =\n             PendingIntent.getBroadcast(\n-                context, 1, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n-        try {\n-          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-            alarmManager.setExactAndAllowWhileIdle(\n-                AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), broadcast);\n-          } else {\n-            alarmManager.setExact(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), broadcast);\n-          }\n-        } catch (NullPointerException e) {\n-          Logger.log(e);\n-        }\n-      } catch (Exception e) {\n-        Logger.log(e);\n-      }\n+                    context,\n+                    REQUEST_CODE_24HR_NOTIFICATION,\n+                    notificationIntent,\n+                    PendingIntent.FLAG_UPDATE_CURRENT);\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+      alarmManager.setExactAndAllowWhileIdle(\n+              AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), broadcast);\n+    } else {\n+      alarmManager.setExact(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), broadcast);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MDExOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435350118", "bodyText": "Fix these getters/setters as well.", "author": "nikklassen", "createdAt": "2020-06-04T15:31:51Z", "path": "Android/app/src/main/java/com/harvard/storagemodule/events/DatabaseEvent.java", "diffHunk": "@@ -33,42 +34,42 @@ public void setWhereParams(HashMap<String, String> whereParams) {\n   }\n \n   public String getmType() {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/storagemodule/events/DatabaseEvent.java b/Android/app/src/main/java/com/harvard/storagemodule/events/DatabaseEvent.java\nindex 396d1513e..ff2db3609 100644\n--- a/Android/app/src/main/java/com/harvard/storagemodule/events/DatabaseEvent.java\n+++ b/Android/app/src/main/java/com/harvard/storagemodule/events/DatabaseEvent.java\n\n@@ -33,11 +33,11 @@ public class DatabaseEvent<E> {\n     this.whereParams = whereParams;\n   }\n \n-  public String getmType() {\n+  public String getType() {\n     return type;\n   }\n \n-  public void setmType(String type) {\n+  public void setType(String type) {\n     this.type = type;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1ODc2Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435358762", "bodyText": "viewPdf", "author": "nikklassen", "createdAt": "2020-06-04T15:41:00Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/ConsentCompletedActivity.java", "diffHunk": "@@ -51,26 +51,26 @@\n public class ConsentCompletedActivity extends AppCompatActivity {\n \n   private static final int PERMISSION_REQUEST_CODE = 1000;\n-  private TextView mConsentCompleteTxt;\n-  private TextView mTextSecRow;\n-  private TextView mViewpdf;\n-  private TextView mNext;\n+  private TextView consentCompleteTxt;\n+  private TextView textSecRow;\n+  private TextView viewpdf;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/ConsentCompletedActivity.java b/Android/app/src/main/java/com/harvard/studyappmodule/ConsentCompletedActivity.java\nindex 74a517da5..4fc84ef73 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/ConsentCompletedActivity.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/ConsentCompletedActivity.java\n\n@@ -53,7 +53,7 @@ public class ConsentCompletedActivity extends AppCompatActivity {\n   private static final int PERMISSION_REQUEST_CODE = 1000;\n   private TextView consentCompleteTxt;\n   private TextView textSecRow;\n-  private TextView viewpdf;\n+  private TextView viewPdf;\n   private TextView next;\n \n   public static String FROM = \"from\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1OTY3MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435359670", "bodyText": "What does 1 mean? Please use more descriptive names.", "author": "nikklassen", "createdAt": "2020-06-04T15:42:13Z", "path": "Android/app/src/main/java/com/harvard/utils/AppController.java", "diffHunk": "@@ -237,12 +247,12 @@ public static SimpleDateFormat getDateFormat() {\n     return new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n   }\n \n-  public static SimpleDateFormat getDateFormatUTC() {\n+  public static SimpleDateFormat getDateFormatUtc() {\n     SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n     return simpleDateFormat;\n   }\n \n-  public static SimpleDateFormat getDateFormatUTC1() {\n+  public static SimpleDateFormat getDateFormatUtc1() {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/utils/AppController.java b/Android/app/src/main/java/com/harvard/utils/AppController.java\nindex 8a263598d..b6d6cb60d 100644\n--- a/Android/app/src/main/java/com/harvard/utils/AppController.java\n+++ b/Android/app/src/main/java/com/harvard/utils/AppController.java\n\n@@ -243,67 +243,55 @@ public class AppController {\n     return new SimpleDateFormat(\"MM-dd-yyyy hh:mm:ss a\");\n   }\n \n-  public static SimpleDateFormat getDateFormat() {\n+  public static SimpleDateFormat getDateFormatForApi() {\n     return new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n   }\n \n-  public static SimpleDateFormat getDateFormatUtc() {\n-    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n-    return simpleDateFormat;\n-  }\n \n-  public static SimpleDateFormat getDateFormatUtc1() {\n+  public static SimpleDateFormat getDateFormatUtcNoZone() {\n     SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n     return simpleDateFormat;\n   }\n \n-  public static SimpleDateFormat getDateFormatType1() {\n+  public static SimpleDateFormat getDateFormatForNotification() {\n     return new SimpleDateFormat(\"MMM dd yyyy\");\n   }\n \n-  public static SimpleDateFormat getDateFormatType12() {\n+  public static SimpleDateFormat getDateFormatForActivityList() {\n     return new SimpleDateFormat(\"MMM dd, yyyy\");\n   }\n \n-  public static SimpleDateFormat getDateFormatType4() {\n+  public static SimpleDateFormat getDateFormatForDailyRun() {\n     return new SimpleDateFormat(\"yyyy-MM-dd\");\n   }\n \n-  public static String getDateFormatType3() {\n+  public static String getDateFormatForConsentPdf() {\n     Date date = new Date();\n     return new SimpleDateFormat(\"yyyyMMdd_HHmmss\", Locale.getDefault()).format(date);\n   }\n \n-  public static SimpleDateFormat getDateFormatType2() {\n-    return new SimpleDateFormat(\"hha, MMM dd yyyy\");\n-  }\n-\n-  public static SimpleDateFormat getDateFormatType9() {\n+  public static SimpleDateFormat getDateFormatForOtherFreq() {\n     return new SimpleDateFormat(\"hh:mma, MMM dd, yyyy\");\n   }\n \n-  public static SimpleDateFormat getDateFormatType10() {\n+  public static SimpleDateFormat getDateFormatForResourceAvailability() {\n     return new SimpleDateFormat(\"yyyy-MM-dd\");\n   }\n \n-  public static SimpleDateFormat getDateFormatType11() {\n+  public static SimpleDateFormat getDateFormatForDailyRunStartAndEnd() {\n     SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n     return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n   }\n \n-  public static SimpleDateFormat getDateFormatFormatIn() {\n-    return new SimpleDateFormat(\"MM yyyy\");\n-  }\n-\n-  public static SimpleDateFormat getDateFormatFormatOut() {\n+  public static SimpleDateFormat getDateFormatForChartAndStat() {\n     return new SimpleDateFormat(\"MMM yyyy\");\n   }\n \n-  public static SimpleDateFormat getDateFormatFormatInType1() {\n+  public static SimpleDateFormat getDateFormatForDashboardCurrentDay() {\n     return new SimpleDateFormat(\"dd MM yyyy\");\n   }\n \n-  public static SimpleDateFormat getDateFormatFormatOutType1() {\n+  public static SimpleDateFormat getDateFormatForDashboardAndChartCurrentDayOut() {\n     return new SimpleDateFormat(\"dd, MMM yyyy\");\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2MjU3OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435362579", "bodyText": "These variable names should also be fixed by removing the s prefix.", "author": "nikklassen", "createdAt": "2020-06-04T15:46:29Z", "path": "Android/app/src/main/java/com/harvard/utils/AppController.java", "diffHunk": "@@ -93,22 +93,30 @@\n   private static String mKeystoreValue = null;\n \n   public static SharedPreferenceHelper getHelperSharedPreference() {\n-    if (sSharedPreferenceHelper == null) sSharedPreferenceHelper = new SharedPreferenceHelper();\n+    if (sSharedPreferenceHelper == null) {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/utils/AppController.java b/Android/app/src/main/java/com/harvard/utils/AppController.java\nindex 8a263598d..b6d6cb60d 100644\n--- a/Android/app/src/main/java/com/harvard/utils/AppController.java\n+++ b/Android/app/src/main/java/com/harvard/utils/AppController.java\n\n@@ -83,41 +83,41 @@ import javax.security.auth.x500.X500Principal;\n \n public class AppController {\n \n-  private static SharedPreferenceHelper sSharedPreferenceHelper;\n-  private static JsonFormatHelper sJsonFormatHelper;\n-  private static SetDialogHelper sSetDialogHelper;\n-  private static ProgressDialogHelper sProgressDialogHelper;\n+  private static SharedPreferenceHelper sharedPreferenceHelper;\n+  private static JsonFormatHelper jsonFormatHelper;\n+  private static SetDialogHelper setDialogHelper;\n+  private static ProgressDialogHelper progressDialogHelper;\n   private static RealmConfiguration config;\n-  private static KeyStore mKeyStore;\n+  private static KeyStore keyStore;\n   private static final String TAG = \"FDAKeystore\";\n-  private static String mKeystoreValue = null;\n+  private static String keystoreValue = null;\n \n   public static SharedPreferenceHelper getHelperSharedPreference() {\n-    if (sSharedPreferenceHelper == null) {\n-      sSharedPreferenceHelper = new SharedPreferenceHelper();\n+    if (sharedPreferenceHelper == null) {\n+      sharedPreferenceHelper = new SharedPreferenceHelper();\n     }\n-    return sSharedPreferenceHelper;\n+    return sharedPreferenceHelper;\n   }\n \n   public static JsonFormatHelper getHelperJsonFormat() {\n-    if (sJsonFormatHelper == null) {\n-      sJsonFormatHelper = new JsonFormatHelper();\n+    if (jsonFormatHelper == null) {\n+      jsonFormatHelper = new JsonFormatHelper();\n     }\n-    return sJsonFormatHelper;\n+    return jsonFormatHelper;\n   }\n \n   public static ProgressDialogHelper getHelperProgressDialog() {\n-    if (sProgressDialogHelper == null) {\n-      sProgressDialogHelper = new ProgressDialogHelper();\n+    if (progressDialogHelper == null) {\n+      progressDialogHelper = new ProgressDialogHelper();\n     }\n-    return sProgressDialogHelper;\n+    return progressDialogHelper;\n   }\n \n   public static SetDialogHelper getHelperSetDialog() {\n-    if (sSetDialogHelper == null) {\n-      sSetDialogHelper = new SetDialogHelper();\n+    if (setDialogHelper == null) {\n+      setDialogHelper = new SetDialogHelper();\n     }\n-    return sSetDialogHelper;\n+    return setDialogHelper;\n   }\n \n   public static boolean getHelperIsValidEmail(String target) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2MzExMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435363110", "bodyText": "typo: generateEncryptedConsentPdf", "author": "nikklassen", "createdAt": "2020-06-04T15:47:18Z", "path": "Android/app/src/main/java/com/harvard/utils/AppController.java", "diffHunk": "@@ -703,12 +715,14 @@ public static String ivBytesToString() {\n   }\n \n   // encrypt the pdf file and return File\n-  public static File genarateEncryptedConsentPDF(String filePath, String timeStamp) {\n+  public static File genarateEncryptedConsentPdf(String filePath, String timeStamp) {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/utils/AppController.java b/Android/app/src/main/java/com/harvard/utils/AppController.java\nindex 8a263598d..b6d6cb60d 100644\n--- a/Android/app/src/main/java/com/harvard/utils/AppController.java\n+++ b/Android/app/src/main/java/com/harvard/utils/AppController.java\n\n@@ -715,7 +703,7 @@ public class AppController {\n   }\n \n   // encrypt the pdf file and return File\n-  public static File genarateEncryptedConsentPdf(String filePath, String timeStamp) {\n+  public static File generateEncryptedConsentPdf(String filePath, String timeStamp) {\n     try {\n       FileInputStream fis = new FileInputStream(new File(filePath + timeStamp + \".pdf\"));\n       File encryptFile = new File(filePath + File.separator + timeStamp + \".txt\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2MzMwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435363305", "bodyText": "typo: generateDecryptedConsentPdf", "author": "nikklassen", "createdAt": "2020-06-04T15:47:36Z", "path": "Android/app/src/main/java/com/harvard/utils/AppController.java", "diffHunk": "@@ -747,7 +761,7 @@ public static File genarateEncryptedConsentPDF(String filePath, String timeStamp\n   }\n \n   // decrypt the pdf file and return CipherInputStream\n-  public static CipherInputStream genarateDecryptedConsentPDF(String filePath) {\n+  public static CipherInputStream genarateDecryptedConsentPdf(String filePath) {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/utils/AppController.java b/Android/app/src/main/java/com/harvard/utils/AppController.java\nindex 8a263598d..b6d6cb60d 100644\n--- a/Android/app/src/main/java/com/harvard/utils/AppController.java\n+++ b/Android/app/src/main/java/com/harvard/utils/AppController.java\n\n@@ -761,7 +749,7 @@ public class AppController {\n   }\n \n   // decrypt the pdf file and return CipherInputStream\n-  public static CipherInputStream genarateDecryptedConsentPdf(String filePath) {\n+  public static CipherInputStream generateDecryptedConsentPdf(String filePath) {\n     try {\n       FileInputStream fis = new FileInputStream(new File(filePath));\n       Cipher encipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NTQ0OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435365448", "bodyText": "These getter/setters need to be fixed as well.", "author": "nikklassen", "createdAt": "2020-06-04T15:50:52Z", "path": "Android/app/src/main/java/com/harvard/webservicemodule/events/WebserviceConfigEvent.java", "diffHunk": "@@ -64,112 +65,112 @@ public WebserviceConfigEvent(\n       HashMap<String, String> header,\n       JSONArray jsonArray,\n       boolean showAlert,\n-      V v) {\n-    mUrl = url;\n-    tClass = modelclass;\n-    this.v = v;\n-    mHeaders = header;\n-    mRequestParamsJsonArray = jsonArray;\n-    mShowAlert = showAlert;\n-    mRequestType = method;\n-    mResponseCode = requestCode;\n-    mContext = context;\n+      V objV) {\n+    this.url = url;\n+    this.objT = modelclass;\n+    this.objV = objV;\n+    this.headers = header;\n+    this.requestParamsJsonArray = jsonArray;\n+    this.showAlert = showAlert;\n+    this.requestType = method;\n+    this.responseCode = requestCode;\n+    this.context = context;\n   }\n \n   public JSONArray getmRequestParamsJsonArray() {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/webservicemodule/events/WebserviceConfigEvent.java b/Android/app/src/main/java/com/harvard/webservicemodule/events/WebserviceConfigEvent.java\nindex bbee207d8..df11148a8 100644\n--- a/Android/app/src/main/java/com/harvard/webservicemodule/events/WebserviceConfigEvent.java\n+++ b/Android/app/src/main/java/com/harvard/webservicemodule/events/WebserviceConfigEvent.java\n\n@@ -77,11 +77,11 @@ public abstract class WebserviceConfigEvent<T, V> {\n     this.context = context;\n   }\n \n-  public JSONArray getmRequestParamsJsonArray() {\n+  public JSONArray getRequestParamsJsonArray() {\n     return requestParamsJsonArray;\n   }\n \n-  public void setmRequestParamsJsonArray(JSONArray requestParamsJsonArray) {\n+  public void setRequestParamsJsonArray(JSONArray requestParamsJsonArray) {\n     this.requestParamsJsonArray = requestParamsJsonArray;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3MTM3Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435371373", "bodyText": "Don't use my", "author": "nikklassen", "createdAt": "2020-06-04T15:59:06Z", "path": "Android/app/src/main/java/com/harvard/utils/VerticalSeekBar.java", "diffHunk": "@@ -32,8 +47,8 @@ protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpe\n   }\n \n   @Override\n-  public void setOnSeekBarChangeListener(OnSeekBarChangeListener mListener) {\n-    this.myListener = mListener;\n+  public void setOnSeekBarChangeListener(OnSeekBarChangeListener listener) {\n+    this.myListener = listener;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/utils/VerticalSeekBar.java b/Android/app/src/main/java/com/harvard/utils/VerticalSeekBar.java\nindex 8dd3759c1..c9a186747 100644\n--- a/Android/app/src/main/java/com/harvard/utils/VerticalSeekBar.java\n+++ b/Android/app/src/main/java/com/harvard/utils/VerticalSeekBar.java\n\n@@ -48,7 +48,7 @@ public class VerticalSeekBar extends android.support.v7.widget.AppCompatSeekBar\n \n   @Override\n   public void setOnSeekBarChangeListener(OnSeekBarChangeListener listener) {\n-    this.myListener = listener;\n+    this.seekBarListener = listener;\n   }\n \n   protected void onDraw(Canvas c) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3MzQ2Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435373462", "bodyText": "close?", "author": "nikklassen", "createdAt": "2020-06-04T16:02:25Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/CustomActivitiesDailyDialogClass.java", "diffHunk": "@@ -63,35 +64,35 @@ protected void onCreate(Bundle savedInstanceState) {\n     getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n     getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n \n-    RelativeLayout mClossBtnLayout = (RelativeLayout) findViewById(R.id.mClossBtnLayout);\n-    mClossBtnLayout.setOnClickListener(this);\n+    RelativeLayout clossBtnLayout = (RelativeLayout) findViewById(R.id.mClossBtnLayout);", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/CustomActivitiesDailyDialogClass.java b/Android/app/src/main/java/com/harvard/studyappmodule/CustomActivitiesDailyDialogClass.java\nindex e6cd4facc..383c940d3 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/CustomActivitiesDailyDialogClass.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/CustomActivitiesDailyDialogClass.java\n\n@@ -64,8 +64,8 @@ public class CustomActivitiesDailyDialogClass extends Dialog implements View.OnC\n     getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n     getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n \n-    RelativeLayout clossBtnLayout = (RelativeLayout) findViewById(R.id.mClossBtnLayout);\n-    clossBtnLayout.setOnClickListener(this);\n+    RelativeLayout closeBtnLayout = (RelativeLayout) findViewById(R.id.mCloseBtnLayout);\n+    closeBtnLayout.setOnClickListener(this);\n     LinearLayout l = (LinearLayout) findViewById(R.id.lin_layout_hours);\n     for (int i = 0; i < scheduledTime.size(); i++) {\n       TextView textDynamic = new TextView(getContext());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxOTIyNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435419227", "bodyText": "deleteIndexNumberDb", "author": "nikklassen", "createdAt": "2020-06-04T17:15:45Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/ProfileFragment.java", "diffHunk": "@@ -62,60 +62,60 @@\n \n public class ProfileFragment extends Fragment\n     implements ApiCall.OnAsyncRequestComplete, CompoundButton.OnCheckedChangeListener {\n-  private Context mContext;\n-  private AppCompatEditText mFirstName;\n-  private AppCompatEditText mLastName;\n-  private AppCompatEditText mEmail;\n-  private AppCompatTextView mPassword;\n-  private Switch mSwitchUsePasscode;\n-  private AppCompatTextView mUsePasscodeLabel;\n-  private Switch mSwitchTouch;\n-  private AppCompatTextView mTouchIdLabel;\n-  private Switch mSwitchRecvPushNotifctn;\n-  private AppCompatTextView mRecvPushNotifctnLabel;\n-  private Switch mSwitchRecvStdyRemindr;\n-  private AppCompatTextView mRecvStdyActRemLabel;\n-  private RelativeLayout mPickerReminderBtn;\n-  private AppCompatTextView mPickerReminderLabel;\n-  private AppCompatTextView mReminderLabel;\n-  private AppCompatTextView mSignOutButton;\n-  private AppCompatTextView mDeleteMyAccount;\n-  private AppCompatTextView mFirstNameLabel;\n-  private AppCompatTextView mLastNameLabel;\n-  private AppCompatTextView mEmailLabel;\n-  private AppCompatTextView mPasswordLabel;\n-  private AppCompatTextView mHrLine12;\n-  private AppCompatTextView mPasscode;\n-  private int USER_PROFILE_REQUEST = 6;\n-  private int UPDATE_USER_PROFILE_REQUEST = 7;\n+  private Context context;\n+  private AppCompatEditText firstName;\n+  private AppCompatEditText lastName;\n+  private AppCompatEditText email;\n+  private AppCompatTextView password;\n+  private Switch switchUsePasscode;\n+  private AppCompatTextView usePasscodeLabel;\n+  private Switch switchTouch;\n+  private AppCompatTextView touchIdLabel;\n+  private Switch switchRecvPushNotifctn;\n+  private AppCompatTextView recvPushNotifctnLabel;\n+  private Switch switchRecvStdyRemindr;\n+  private AppCompatTextView recvStdyActRemLabel;\n+  private RelativeLayout pickerReminderBtn;\n+  private AppCompatTextView pickerReminderLabel;\n+  private AppCompatTextView reminderLabel;\n+  private AppCompatTextView signOutButton;\n+  private AppCompatTextView deleteMyAccount;\n+  private AppCompatTextView firstNameLabel;\n+  private AppCompatTextView lastNameLabel;\n+  private AppCompatTextView emailLabel;\n+  private AppCompatTextView passwordLabel;\n+  private AppCompatTextView hrLine12;\n+  private AppCompatTextView passcode;\n+  private static final int USER_PROFILE_REQUEST = 6;\n+  private static final int UPDATE_USER_PROFILE_REQUEST = 7;\n   private static final int LOGOUT_REPSONSECODE = 100;\n   private static final int DELETE_ACCOUNT_REPSONSECODE = 101;\n   private static final int PASSCODE_REPSONSE = 102;\n   private static final int NEW_PASSCODE_REPSONSE = 103;\n   private static final int CHANGE_PASSCODE_REPSONSE = 104;\n   private static final int PASSCODE_CHANGE_REPSONSE = 105;\n-  private UserProfileData mUserProfileData = null;\n-  private UpdateProfileRequestData mUpdateProfileRequestData = null;\n-  private int DELETE_ACCOUNT = 5;\n-  private int mDeleteIndexNumberDB;\n-  private DBServiceSubscriber dbServiceSubscriber;\n-  private Realm mRealm;\n+  private UserProfileData userProfileData = null;\n+  private UpdateProfileRequestData updateProfileRequestData = null;\n+  private static final int DELETE_ACCOUNT = 5;\n+  private int deleteIndexNumberDB;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/ProfileFragment.java b/Android/app/src/main/java/com/harvard/studyappmodule/ProfileFragment.java\nindex 5d3c75711..055e78104 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/ProfileFragment.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/ProfileFragment.java\n\n@@ -97,7 +97,7 @@ public class ProfileFragment extends Fragment\n   private UserProfileData userProfileData = null;\n   private UpdateProfileRequestData updateProfileRequestData = null;\n   private static final int DELETE_ACCOUNT = 5;\n-  private int deleteIndexNumberDB;\n+  private int deleteIndexNumberDb;\n   private DbServiceSubscriber dbServiceSubscriber;\n   private Realm realm;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyNzIwMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435427201", "bodyText": "noData", "author": "nikklassen", "createdAt": "2020-06-04T17:29:02Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java", "diffHunk": "@@ -40,118 +40,117 @@\n import com.harvard.utils.AppController;\n import com.harvard.utils.Logger;\n import com.harvard.utils.SharedPreferenceHelper;\n-import com.harvard.utils.URLs;\n+import com.harvard.utils.Urls;\n import com.harvard.webservicemodule.apihelper.ApiCall;\n import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n-import com.harvard.webservicemodule.events.WCPConfigEvent;\n+import com.harvard.webservicemodule.events.WcpConfigEvent;\n+import io.realm.Realm;\n+import io.realm.RealmResults;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import io.realm.Realm;\n-import io.realm.RealmResults;\n \n public class DeleteAccountActivity extends AppCompatActivity\n     implements ApiCall.OnAsyncRequestComplete {\n-  private RelativeLayout mBackBtn;\n-  private AppCompatTextView mTitle;\n-  private View mHrLine;\n-  private AppCompatTextView mContent;\n-  private AppCompatTextView mIAgree;\n-  private AppCompatTextView mIDisagree;\n+  private RelativeLayout backBtn;\n+  private AppCompatTextView title;\n+  private View hrLine;\n+  private AppCompatTextView content;\n+  private AppCompatTextView iagree;\n+  private AppCompatTextView idisagree;\n   private LinearLayout middleLayaout;\n   private static final int DELETE_ACCOUNT_REPSONSECODE = 101;\n-  private ArrayList<String> mStoreWithdrawalTypeDeleteFlag = new ArrayList<>();\n-  private ArrayList<String> mStudyIdList = new ArrayList<>();\n-  private ArrayList<String> mStudyTitleList = new ArrayList<>();\n-  private ArrayList<String> mWithdrawalTypeList = new ArrayList<>();\n-  private String mNoData = \"nodata\";\n-  private boolean mNoDataFlag = false;\n-  private int mTempPos;\n+  private ArrayList<String> storeWithdrawalTypeDeleteFlag = new ArrayList<>();\n+  private ArrayList<String> studyIdList = new ArrayList<>();\n+  private ArrayList<String> studyTitleList = new ArrayList<>();\n+  private ArrayList<String> withdrawalTypeList = new ArrayList<>();\n+  private String noData = \"nodata\";\n+  private boolean noDataFlag = false;\n+  private int tempPos;\n   private static final int STUDY_INFO = 10;\n-  private RealmResults<Studies> mRealmStudie;\n-  private DBServiceSubscriber mDBServiceSubscriber;\n-  private Realm mRealm;\n+  private DbServiceSubscriber dbServiceSubscriber;\n+  private Realm realm;\n \n   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n     super.onCreate(savedInstanceState);\n     setContentView(R.layout.activity_delete_account);\n-    mDBServiceSubscriber = new DBServiceSubscriber();\n-    mRealm = AppController.getRealmobj(this);\n-    initializeXMLId();\n+    dbServiceSubscriber = new DbServiceSubscriber();\n+    realm = AppController.getRealmobj(this);\n+    initializeXmlId();\n     setTextForView();\n     setFont();\n     bindEvents();\n     checkAndCreateDataList();\n   }\n \n-  private void initializeXMLId() {\n-    mBackBtn = (RelativeLayout) findViewById(R.id.backBtn);\n-    mTitle = (AppCompatTextView) findViewById(R.id.title);\n-    mHrLine = findViewById(R.id.mHrLine);\n-    mContent = (AppCompatTextView) findViewById(R.id.mContent);\n-    mIAgree = (AppCompatTextView) findViewById(R.id.mIAgree);\n-    mIDisagree = (AppCompatTextView) findViewById(R.id.mIDisagree);\n+  private void initializeXmlId() {\n+    backBtn = (RelativeLayout) findViewById(R.id.backBtn);\n+    title = (AppCompatTextView) findViewById(R.id.title);\n+    hrLine = findViewById(R.id.mHrLine);\n+    content = (AppCompatTextView) findViewById(R.id.mContent);\n+    iagree = (AppCompatTextView) findViewById(R.id.mIAgree);\n+    idisagree = (AppCompatTextView) findViewById(R.id.mIDisagree);\n     middleLayaout = (LinearLayout) findViewById(R.id.middleLayaout);\n   }\n \n   private void setTextForView() {\n-    mTitle.setText(getResources().getString(R.string.confirmation));\n+    title.setText(getResources().getString(R.string.confirmation));\n   }\n \n   private void setFont() {\n     try {\n-      mTitle.setTypeface(AppController.getTypeface(DeleteAccountActivity.this, \"medium\"));\n-      mContent.setTypeface(AppController.getTypeface(DeleteAccountActivity.this, \"regular\"));\n-      mIAgree.setTypeface(AppController.getTypeface(DeleteAccountActivity.this, \"regular\"));\n-      mIDisagree.setTypeface(AppController.getTypeface(DeleteAccountActivity.this, \"regular\"));\n+      title.setTypeface(AppController.getTypeface(DeleteAccountActivity.this, \"medium\"));\n+      content.setTypeface(AppController.getTypeface(DeleteAccountActivity.this, \"regular\"));\n+      iagree.setTypeface(AppController.getTypeface(DeleteAccountActivity.this, \"regular\"));\n+      idisagree.setTypeface(AppController.getTypeface(DeleteAccountActivity.this, \"regular\"));\n     } catch (Exception e) {\n       Logger.log(e);\n     }\n   }\n \n   private void bindEvents() {\n-    mBackBtn.setOnClickListener(\n+    backBtn.setOnClickListener(\n         new View.OnClickListener() {\n           @Override\n           public void onClick(View view) {\n             finish();\n           }\n         });\n \n-    mIDisagree.setOnClickListener(\n+    idisagree.setOnClickListener(\n         new View.OnClickListener() {\n           @Override\n           public void onClick(View view) {\n             finish();\n           }\n         });\n \n-    mIAgree.setOnClickListener(\n+    iagree.setOnClickListener(\n         new View.OnClickListener() {\n           @Override\n           public void onClick(View view) {\n-            boolean noData = false;\n-            if (mStoreWithdrawalTypeDeleteFlag.size() > 0) {\n-              for (int i = 0; i < mStoreWithdrawalTypeDeleteFlag.size(); i++) {\n-                if (mStoreWithdrawalTypeDeleteFlag.get(i).equalsIgnoreCase(mNoData)) {\n+            boolean noDatabol = false;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java b/Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java\nindex 4c800fbb1..ea8e964f4 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java\n\n@@ -132,7 +132,7 @@ public class DeleteAccountActivity extends AppCompatActivity\n         new View.OnClickListener() {\n           @Override\n           public void onClick(View view) {\n-            boolean noDatabol = false;\n+            boolean noDataAvaliable = false;\n             if (storeWithdrawalTypeDeleteFlag.size() > 0) {\n               for (int i = 0; i < storeWithdrawalTypeDeleteFlag.size(); i++) {\n                 if (storeWithdrawalTypeDeleteFlag.get(i).equalsIgnoreCase(noData)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzNTQzNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435435434", "bodyText": "filteredCompletionAdherenceCalcs", "author": "nikklassen", "createdAt": "2020-06-04T17:42:44Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/StudyFragment.java", "diffHunk": "@@ -742,7 +743,7 @@ private void addFilterCriteria(\n                 for (int l = 0; list3.size() > l; l++) {\n                   if (studyListArrayList.get(i).getCategory().equalsIgnoreCase(list3.get(l))) {\n                     studyList.add(studyListArrayList.get(i));\n-                    mFilteredCompletionAdeherenceCalcs.add(completionAdeherenceCalcs.get(i));\n+                    filteredCompletionAdeherenceCalcs.add(completionAdeherenceCalcs.get(i));", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d42554f503f9b19e417c9f3c9e553dbd88ce3c65", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/StudyFragment.java b/Android/app/src/main/java/com/harvard/studyappmodule/StudyFragment.java\nindex d6c9ca033..92731267f 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/StudyFragment.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/StudyFragment.java\n\n@@ -743,7 +743,7 @@ public class StudyFragment extends Fragment implements ApiCall.OnAsyncRequestCom\n                 for (int l = 0; list3.size() > l; l++) {\n                   if (studyListArrayList.get(i).getCategory().equalsIgnoreCase(list3.get(l))) {\n                     studyList.add(studyListArrayList.get(i));\n-                    filteredCompletionAdeherenceCalcs.add(completionAdeherenceCalcs.get(i));\n+                    filteredCompletionAdherenceCalcs.add(completionAdherenceCalcs.get(i));\n                     break;\n                   }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzOTM2MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435439360", "bodyText": "title, but that conflicts with the other variable named title. Please make one more specific", "author": "nikklassen", "createdAt": "2020-06-04T17:49:07Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/SurveyActivitiesFragment.java", "diffHunk": "@@ -165,48 +165,47 @@\n \n   private String eligibilityType = \"\";\n \n-  private OrderedTask mTask;\n-  private ActivityObj mActivityObj;\n-  private ActivityStatus mActivityStatusData;\n+  private OrderedTask task;\n+  private ActivityObj activityObj;\n+  private ActivityStatus activityStatusData;\n   private boolean locationPermission = false;\n-  private int mDeleteIndexNumberDB;\n+  private int deleteIndexNumberDb;\n   private EligibilityConsent eligibilityConsent;\n-  private String mTitl;\n-  private DBServiceSubscriber dbServiceSubscriber;\n-  private Realm mRealm;\n-  private boolean mActivityUpdated = false;\n+  private String titl;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/SurveyActivitiesFragment.java b/Android/app/src/main/java/com/harvard/studyappmodule/SurveyActivitiesFragment.java\nindex c52afa28d..526f20f10 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/SurveyActivitiesFragment.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/SurveyActivitiesFragment.java\n\n@@ -171,7 +171,6 @@ public class SurveyActivitiesFragment extends Fragment\n   private boolean locationPermission = false;\n   private int deleteIndexNumberDb;\n   private EligibilityConsent eligibilityConsent;\n-  private String titl;\n   private DbServiceSubscriber dbServiceSubscriber;\n   private Realm realm;\n   private boolean activityUpdated = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0NTYxOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435445618", "bodyText": "please fix.", "author": "nikklassen", "createdAt": "2020-06-04T17:59:33Z", "path": "Android/app/src/main/java/com/harvard/usermodule/model/User.java", "diffHunk": "@@ -17,94 +18,94 @@\n import java.util.ArrayList;\n \n public class User {\n-  private String mFirstName;\n-  private String mLastName;\n-  private String mEmailId;\n-  private String mUserId;\n-  private boolean mVerified;\n-  private String mAuthToken;\n-  private String mUserType;\n-  private Settings mSettings;\n-  private ArrayList<UserStudyStatus> mUserStudyStatuses = new ArrayList<>();\n-  private ArrayList<UserActivityStatus> mUserActivityStatuses = new ArrayList<>();\n+  private String firstName;\n+  private String lastName;\n+  private String emailId;\n+  private String userId;\n+  private boolean verified;\n+  private String authToken;\n+  private String userType;\n+  private Settings settings;\n+  private ArrayList<UserStudyStatus> userStudyStatuses = new ArrayList<>();\n+  private ArrayList<UserActivityStatus> userActivityStatuses = new ArrayList<>();\n \n   public String getmFirstName() {\n-    return mFirstName;\n+    return firstName;\n   }\n \n-  public void setmFirstName(String mFirstName) {\n-    this.mFirstName = mFirstName;\n+  public void setmFirstName(String firstName) {\n+    this.firstName = firstName;\n   }\n \n   public String getmLastName() {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/usermodule/model/User.java b/Android/app/src/main/java/com/harvard/usermodule/model/User.java\nindex 627931c62..d40add401 100644\n--- a/Android/app/src/main/java/com/harvard/usermodule/model/User.java\n+++ b/Android/app/src/main/java/com/harvard/usermodule/model/User.java\n\n@@ -29,83 +29,83 @@ public class User {\n   private ArrayList<UserStudyStatus> userStudyStatuses = new ArrayList<>();\n   private ArrayList<UserActivityStatus> userActivityStatuses = new ArrayList<>();\n \n-  public String getmFirstName() {\n+  public String getFirstName() {\n     return firstName;\n   }\n \n-  public void setmFirstName(String firstName) {\n+  public void setFirstName(String firstName) {\n     this.firstName = firstName;\n   }\n \n-  public String getmLastName() {\n+  public String getLastName() {\n     return lastName;\n   }\n \n-  public void setmLastName(String lastName) {\n+  public void setLastName(String lastName) {\n     this.lastName = lastName;\n   }\n \n-  public String getmEmailId() {\n+  public String getEmailId() {\n     return emailId;\n   }\n \n-  public void setmEmailId(String emailId) {\n+  public void setEmailId(String emailId) {\n     this.emailId = emailId;\n   }\n \n-  public String getmUserId() {\n+  public String getUserId() {\n     return userId;\n   }\n \n-  public void setmUserId(String userId) {\n+  public void setUserId(String userId) {\n     this.userId = userId;\n   }\n \n-  public boolean ismVerified() {\n+  public boolean isVerified() {\n     return verified;\n   }\n \n-  public void setmVerified(boolean verified) {\n+  public void setVerified(boolean verified) {\n     this.verified = verified;\n   }\n \n-  public String getmAuthToken() {\n+  public String getAuthToken() {\n     return authToken;\n   }\n \n-  public void setmAuthToken(String authToken) {\n+  public void setAuthToken(String authToken) {\n     this.authToken = authToken;\n   }\n \n-  public String getmUserType() {\n+  public String getUserType() {\n     return userType;\n   }\n \n-  public void setmUserType(String userType) {\n+  public void setUserType(String userType) {\n     this.userType = userType;\n   }\n \n-  public Settings getmSettings() {\n+  public Settings getSettings() {\n     return settings;\n   }\n \n-  public void setmSettings(Settings settings) {\n+  public void setSettings(Settings settings) {\n     this.settings = settings;\n   }\n \n-  public ArrayList<UserStudyStatus> getmUserStudyStatuses() {\n+  public ArrayList<UserStudyStatus> getUserStudyStatuses() {\n     return userStudyStatuses;\n   }\n \n-  public void setmUserStudyStatuses(ArrayList<UserStudyStatus> userStudyStatuses) {\n+  public void setUserStudyStatuses(ArrayList<UserStudyStatus> userStudyStatuses) {\n     this.userStudyStatuses = userStudyStatuses;\n   }\n \n-  public ArrayList<UserActivityStatus> getmUserActivityStatuses() {\n+  public ArrayList<UserActivityStatus> getUserActivityStatuses() {\n     return userActivityStatuses;\n   }\n \n-  public void setmUserActivityStatuses(ArrayList<UserActivityStatus> userActivityStatuses) {\n+  public void setUserActivityStatuses(ArrayList<UserActivityStatus> userActivityStatuses) {\n     this.userActivityStatuses = userActivityStatuses;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0NjM5NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435446395", "bodyText": "please fix", "author": "nikklassen", "createdAt": "2020-06-04T18:00:54Z", "path": "Android/app/src/main/java/com/harvard/usermodule/model/UserActivityStatus.java", "diffHunk": "@@ -1,49 +1,64 @@\n+/*\n+ * Copyright \u00a9 2017-2019 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Copyright 2020 Google LLC\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * Funding Source: Food and Drug Administration (\u201cFunding Agency\u201d) effective 18 September 2014 as Contract no. HHSF22320140030I/HHSF22301006T (the \u201cPrime Contract\u201d).\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */\n+\n package com.harvard.usermodule.model;\n \n public class UserActivityStatus {\n-  private String mActivityStatus;\n-  private boolean mBookmarked;\n-  private String mActivityId;\n-  private String mStudyId;\n-  private String mActivityVersion;\n+  private String activityStatus;\n+  private boolean bookmarked;\n+  private String activityId;\n+  private String studyId;\n+  private String activityVersion;\n \n   public String getmActivityStatus() {\n-    return mActivityStatus;\n+    return activityStatus;\n   }\n \n-  public void setmActivityStatus(String mActivityStatus) {\n-    this.mActivityStatus = mActivityStatus;\n+  public void setmActivityStatus(String activityStatus) {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/usermodule/model/UserActivityStatus.java b/Android/app/src/main/java/com/harvard/usermodule/model/UserActivityStatus.java\nindex 8e70b9c0f..c4edf2896 100644\n--- a/Android/app/src/main/java/com/harvard/usermodule/model/UserActivityStatus.java\n+++ b/Android/app/src/main/java/com/harvard/usermodule/model/UserActivityStatus.java\n\n@@ -22,43 +22,43 @@ public class UserActivityStatus {\n   private String studyId;\n   private String activityVersion;\n \n-  public String getmActivityStatus() {\n+  public String getActivityStatus() {\n     return activityStatus;\n   }\n \n-  public void setmActivityStatus(String activityStatus) {\n+  public void setActivityStatus(String activityStatus) {\n     this.activityStatus = activityStatus;\n   }\n \n-  public boolean ismBookmarked() {\n+  public boolean isBookmarked() {\n     return bookmarked;\n   }\n \n-  public void setmBookmarked(boolean bookmarked) {\n+  public void setBookmarked(boolean bookmarked) {\n     this.bookmarked = bookmarked;\n   }\n \n-  public String getmActivityId() {\n+  public String getActivityId() {\n     return activityId;\n   }\n \n-  public void setmActivityId(String activityId) {\n+  public void setActivityId(String activityId) {\n     this.activityId = activityId;\n   }\n \n-  public String getmStudyId() {\n+  public String getStudyId() {\n     return studyId;\n   }\n \n-  public void setmStudyId(String studyId) {\n+  public void setStudyId(String studyId) {\n     this.studyId = studyId;\n   }\n \n-  public String getmActivityVersion() {\n+  public String getActivityVersion() {\n     return activityVersion;\n   }\n \n-  public void setmActivityVersion(String activityVersion) {\n+  public void setActivityVersion(String activityVersion) {\n     this.activityVersion = activityVersion;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MTc3NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435451775", "bodyText": "thread instead of obj", "author": "nikklassen", "createdAt": "2020-06-04T18:10:26Z", "path": "Android/app/src/main/java/com/harvard/utils/ActiveTaskService.java", "diffHunk": "@@ -41,19 +41,19 @@\n import com.harvard.webservicemodule.apihelper.ApiCall;\n import com.harvard.webservicemodule.events.RegistrationServerEnrollmentConfigEvent;\n import com.harvard.webservicemodule.events.ResponseServerConfigEvent;\n-import org.json.JSONException;\n-import org.json.JSONObject;\n-import java.util.Calendar;\n-import java.util.HashMap;\n import io.realm.Realm;\n import io.realm.RealmResults;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n \n public class ActiveTaskService extends Service implements ApiCall.OnAsyncRequestComplete {\n   private int sec;\n-  private Thread t;\n-  private int UPDATE_USERPREFERENCE_RESPONSECODE = 102;\n-  private DBServiceSubscriber dbServiceSubscriber;\n-  private Realm mRealm;\n+  private Thread obj;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/utils/ActiveTaskService.java b/Android/app/src/main/java/com/harvard/utils/ActiveTaskService.java\nindex 163cd5660..e66bc3128 100644\n--- a/Android/app/src/main/java/com/harvard/utils/ActiveTaskService.java\n+++ b/Android/app/src/main/java/com/harvard/utils/ActiveTaskService.java\n\n@@ -50,7 +50,7 @@ import org.json.JSONObject;\n \n public class ActiveTaskService extends Service implements ApiCall.OnAsyncRequestComplete {\n   private int sec;\n-  private Thread obj;\n+  private Thread thread;\n   private static final int UPDATE_USERPREFERENCE_RESPONSECODE = 102;\n   private DbServiceSubscriber dbServiceSubscriber;\n   private Realm realm;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2MjU2OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435462568", "bodyText": "Remove m prefix", "author": "nikklassen", "createdAt": "2020-06-04T18:26:22Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/ActivityBuilder.java", "diffHunk": "@@ -16,25 +16,25 @@\n package com.harvard.studyappmodule.activitybuilder;\n \n import android.content.Context;\n-import com.harvard.storagemodule.DBServiceSubscriber;\n+import com.harvard.storagemodule.DbServiceSubscriber;\n import com.harvard.studyappmodule.activitybuilder.model.servicemodel.ActivityObj;\n import com.harvard.studyappmodule.activitybuilder.model.servicemodel.Steps;\n import com.harvard.studyappmodule.custom.result.StepRecordCustom;\n import com.harvard.utils.AppController;\n import com.harvard.utils.Logger;\n+import io.realm.Realm;\n+import io.realm.RealmList;\n+import java.util.List;\n+import java.util.Map;\n import org.researchstack.backbone.result.StepResult;\n import org.researchstack.backbone.result.TaskResult;\n import org.researchstack.backbone.step.Step;\n import org.researchstack.backbone.task.OrderedTask;\n-import java.util.List;\n-import java.util.Map;\n-import io.realm.Realm;\n-import io.realm.RealmList;\n \n public class ActivityBuilder extends OrderedTask {\n \n   private static boolean mBranching;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/ActivityBuilder.java b/Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/ActivityBuilder.java\nindex 90196a301..d56026371 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/ActivityBuilder.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/ActivityBuilder.java\n\n@@ -33,35 +33,35 @@ import org.researchstack.backbone.task.OrderedTask;\n \n public class ActivityBuilder extends OrderedTask {\n \n-  private static boolean mBranching;\n-  private static DbServiceSubscriber mDBServiceSubscriber;\n-  private static String mIdentifier;\n+  private static boolean branching;\n+  private static DbServiceSubscriber dbServiceSubscriber;\n+  private static String identifier;\n   private static RealmList<Steps> activityQuestionStep;\n-  private static Context mcontext;\n+  private static Context context;\n \n   private ActivityBuilder(String identifier, List<Step> steps) {\n     super(identifier, steps);\n   }\n \n   public static ActivityBuilder create(\n-      Context context,\n-      String identifier,\n+      Context contextParam,\n+      String identifierParam,\n       List<Step> steps,\n-      ActivityObj activityObj,\n-      boolean branching,\n-      DbServiceSubscriber dbServiceSubscriber) {\n-    mIdentifier = identifier;\n-    activityQuestionStep = activityObj.getSteps();\n-    mBranching = branching;\n-    mDBServiceSubscriber = dbServiceSubscriber;\n-    mcontext = context;\n-    return new ActivityBuilder(identifier, steps);\n+      ActivityObj activityParam,\n+      boolean branchingObj,\n+      DbServiceSubscriber dbServiceSubscriberParam) {\n+    identifier = identifierParam;\n+    activityQuestionStep = activityParam.getSteps();\n+    branching = branchingObj;\n+    dbServiceSubscriber = dbServiceSubscriberParam;\n+    context = contextParam;\n+    return new ActivityBuilder(identifierParam, steps);\n   }\n \n   @Override\n   public Step getStepAfterStep(Step previousStep, TaskResult taskResult) {\n \n-    if (mBranching) {\n+    if (branching) {\n       Steps stepsData = null;\n       for (int i = 0; i < activityQuestionStep.size(); i++) {\n         if (previousStep == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2Mjc1MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435462751", "bodyText": "please fix", "author": "nikklassen", "createdAt": "2020-06-04T18:26:42Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/model/Destinations.java", "diffHunk": "@@ -16,22 +16,22 @@\n package com.harvard.studyappmodule.activitybuilder.model;\n \n public class Destinations {\n-  private String mEvaluation;\n-  private String mDestination;\n+  private String evaluation;\n+  private String destination;\n \n   public String getmEvaluation() {", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/model/Destinations.java b/Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/model/Destinations.java\nindex 2383c5888..359e1a641 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/model/Destinations.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/activitybuilder/model/Destinations.java\n\n@@ -19,19 +19,19 @@ public class Destinations {\n   private String evaluation;\n   private String destination;\n \n-  public String getmEvaluation() {\n+  public String getEvaluation() {\n     return evaluation;\n   }\n \n-  public void setmEvaluation(String evaluation) {\n+  public void setEvaluation(String evaluation) {\n     this.evaluation = evaluation;\n   }\n \n-  public String getmDestination() {\n+  public String getDestination() {\n     return destination;\n   }\n \n-  public void setmDestination(String destination) {\n+  public void setDestination(String destination) {\n     this.destination = destination;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NTMwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r435465305", "bodyText": "please fix member variable name and setter", "author": "nikklassen", "createdAt": "2020-06-04T18:30:18Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/studymodel/ConsentDocumentData.java", "diffHunk": "@@ -27,8 +27,8 @@ public String getmStudyId() {\n     return mStudyId;\n   }\n \n-  public void setmStudyId(String mStudyId) {\n-    this.mStudyId = mStudyId;\n+  public void setmStudyId(String studyId) {\n+    this.mStudyId = studyId;", "originalCommit": "35ec6c6585b14093afe7549da56f2cac59cb2798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2NDU0Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r436064542", "bodyText": "Replace the method name but not the variable since it's a Db column name", "author": "naveenr-btc", "createdAt": "2020-06-05T17:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NTMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "150bea8b036b6b6d2eab85c28be135582356eadc", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/studymodel/ConsentDocumentData.java b/Android/app/src/main/java/com/harvard/studyappmodule/studymodel/ConsentDocumentData.java\nindex 99637f309..1ee4f8c5e 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/studymodel/ConsentDocumentData.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/studymodel/ConsentDocumentData.java\n\n@@ -20,14 +20,14 @@ import io.realm.annotations.PrimaryKey;\n public class ConsentDocumentData extends RealmObject {\n   private String message;\n   private ConsentDocObj consent;\n+  @PrimaryKey\n+  private String mStudyId;\n \n-  @PrimaryKey private String mStudyId;\n-\n-  public String getmStudyId() {\n+  public String getStudyId() {\n     return mStudyId;\n   }\n \n-  public void setmStudyId(String studyId) {\n+  public void setStudyId(String studyId) {\n     this.mStudyId = studyId;\n   }\n \n"}}, {"oid": "150bea8b036b6b6d2eab85c28be135582356eadc", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/150bea8b036b6b6d2eab85c28be135582356eadc", "message": "Code review updates", "committedDate": "2020-06-05T17:19:41Z", "type": "commit"}, {"oid": "d42554f503f9b19e417c9f3c9e553dbd88ce3c65", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/d42554f503f9b19e417c9f3c9e553dbd88ce3c65", "message": "code review updates for typo", "committedDate": "2020-06-05T17:30:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyMjQwOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r436722409", "bodyText": "typo: noDataAvailable", "author": "nikklassen", "createdAt": "2020-06-08T13:53:59Z", "path": "Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java", "diffHunk": "@@ -132,7 +132,7 @@ public void onClick(View view) {\n         new View.OnClickListener() {\n           @Override\n           public void onClick(View view) {\n-            boolean noDatabol = false;\n+            boolean noDataAvaliable = false;", "originalCommit": "d42554f503f9b19e417c9f3c9e553dbd88ce3c65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MjMwMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/441#discussion_r436792301", "bodyText": "Thanks, updated in the latest commit", "author": "naveenr-btc", "createdAt": "2020-06-08T15:23:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyMjQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "97b3ce1a94b6f3153b3dc6349276f40bc32bbd7d", "chunk": "diff --git a/Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java b/Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java\nindex ea8e964f4..742c274f9 100644\n--- a/Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java\n+++ b/Android/app/src/main/java/com/harvard/studyappmodule/DeleteAccountActivity.java\n\n@@ -132,7 +132,7 @@ public class DeleteAccountActivity extends AppCompatActivity\n         new View.OnClickListener() {\n           @Override\n           public void onClick(View view) {\n-            boolean noDataAvaliable = false;\n+            boolean noDataAvailable = false;\n             if (storeWithdrawalTypeDeleteFlag.size() > 0) {\n               for (int i = 0; i < storeWithdrawalTypeDeleteFlag.size(); i++) {\n                 if (storeWithdrawalTypeDeleteFlag.get(i).equalsIgnoreCase(noData)) {\n"}}, {"oid": "97b3ce1a94b6f3153b3dc6349276f40bc32bbd7d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/97b3ce1a94b6f3153b3dc6349276f40bc32bbd7d", "message": "typo fix", "committedDate": "2020-06-08T15:22:19Z", "type": "commit"}, {"oid": "b046a1b7f0d098132069ef9577475f3bc7310600", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b046a1b7f0d098132069ef9577475f3bc7310600", "message": "Merge branch 'early-access' into early-access_linter-fixes_Android", "committedDate": "2020-06-09T04:57:04Z", "type": "commit"}]}