{"pr_number": 785, "pr_title": "User Management Service: /register endpoint refactoring and integration with oauth-scim-service", "pr_createdAt": "2020-08-21T07:47:56Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785", "timeline": [{"oid": "81054ab64c40c1d10815b085ffb9ba369a7e0274", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/81054ab64c40c1d10815b085ffb9ba369a7e0274", "message": "/register implementation and new auth server integration with test cases.", "committedDate": "2020-08-20T18:40:00Z", "type": "commit"}, {"oid": "b4cf309005b4b3836626998b5a1244f3341f3b1e", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b4cf309005b4b3836626998b5a1244f3341f3b1e", "message": "/register api implementation with oauth-scim-server integration", "committedDate": "2020-08-21T07:21:56Z", "type": "commit"}, {"oid": "0fcec4ac5547f49264696c003c3436497ba5d811", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0fcec4ac5547f49264696c003c3436497ba5d811", "message": "test cases for /register API endpoint", "committedDate": "2020-08-21T07:34:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjQ5NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474772494", "bodyText": "why is unauthorized the very last fallback?\nthis is something we should identify at the very start of a call and not risk potentially leaking other information out to unauthorized users.", "author": "zohrehj", "createdAt": "2020-08-21T15:31:35Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java", "diffHunk": "@@ -38,6 +38,8 @@ public void handleError(ClientHttpResponse response) throws IOException {\n         String code = JsonPath.read(responseBody, \"$.error_code\");\n         String description = JsonPath.read(responseBody, \"$.error_description\");\n         errorCode = ErrorCode.fromCodeAndDescription(code, description);\n+      } else if (HttpStatus.UNAUTHORIZED == response.getStatusCode()) {", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODI2OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228269", "bodyText": "Fixed review comment", "author": "madhurya-btc", "createdAt": "2020-08-23T14:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "f0be44e3c1c8936c27233b2b799dd48a77169653", "chunk": "diff --git a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java\nindex 30569c3d1..b0a3a7c63 100644\n--- a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java\n+++ b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/exceptions/RestResponseErrorHandler.java\n\n@@ -33,13 +33,13 @@ public class RestResponseErrorHandler implements ResponseErrorHandler {\n     } else if (response.getStatusCode().series() == HttpStatus.Series.CLIENT_ERROR\n         && StringUtils.containsIgnoreCase(headers.getFirst(\"Content-Type\"), \"json\")) {\n       // handle 4xx errors\n-      if (StringUtils.contains(responseBody, \"error_code\")\n+      if (HttpStatus.UNAUTHORIZED == response.getStatusCode()) {\n+        errorCode = ErrorCode.UNAUTHORIZED;\n+      } else if (StringUtils.contains(responseBody, \"error_code\")\n           && StringUtils.contains(responseBody, \"error_description\")) {\n         String code = JsonPath.read(responseBody, \"$.error_code\");\n         String description = JsonPath.read(responseBody, \"$.error_description\");\n         errorCode = ErrorCode.fromCodeAndDescription(code, description);\n-      } else if (HttpStatus.UNAUTHORIZED == response.getStatusCode()) {\n-        errorCode = ErrorCode.UNAUTHORIZED;\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjkzOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474772938", "bodyText": "static imports should be added below normal imports", "author": "zohrehj", "createdAt": "2020-08-21T15:32:27Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -8,12 +8,20 @@\n \n package com.google.cloud.healthcare.fdamystudies.beans;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX_MESSAGE;", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzM4Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227387", "bodyText": "All developers IDE configured to have static import first and then import statements. We've used this settings for all the PR's raised so far. Please let me know the correct order of \"Organize Imports\", will ask the developers to change the IDE settings.", "author": "dhanyak-btc", "createdAt": "2020-08-23T14:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMzA2OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475633069", "bodyText": "My mistake, You are correct.", "author": "zohrehj", "createdAt": "2020-08-24T13:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MjkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "958b223cc4766b0ed8ff51d36a700476f7ea6522", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java\nindex fd7122a3b..94158bd43 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java\n\n@@ -8,6 +8,7 @@\n \n package com.google.cloud.healthcare.fdamystudies.beans;\n \n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.EMAIL_LENGTH;\n import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX;\n import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.PASSWORD_REGEX_MESSAGE;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474773280", "bodyText": "Can we use the standard length for this instead of a onetime size?", "author": "zohrehj", "createdAt": "2020-08-21T15:33:04Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -24,8 +32,18 @@\n   private String userId;\n   private String firstName;\n   private String lastName;\n-  @NotNull private String emailId;\n+\n+  @ToString.Exclude\n+  @NotBlank\n+  @Size(max = 320)", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzYwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227605", "bodyText": "I referred this SO post: What is the maximum length of a valid email address?\nso we've used max length value as 320.", "author": "dhanyak-btc", "createdAt": "2020-08-23T14:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMTMxNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475631314", "bodyText": "out of scope for this PR, but we should move this into the length constants and make sure every place is using the same length", "author": "zohrehj", "createdAt": "2020-08-24T13:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMzczNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475633735", "bodyText": "not that it matters much but the post mentions 254 character as the max length", "author": "zohrehj", "createdAt": "2020-08-24T14:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyMTAwNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475721007", "bodyText": "Fixed for this PR, but needs to be addressed in multiple places, Issue: #797 We'll fix this in follow-up PR.", "author": "madhurya-btc", "createdAt": "2020-08-24T15:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "958b223cc4766b0ed8ff51d36a700476f7ea6522", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java\nindex fd7122a3b..94158bd43 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java\n\n@@ -35,7 +36,7 @@ public class UserRegistrationForm {\n \n   @ToString.Exclude\n   @NotBlank\n-  @Size(max = 320)\n+  @Size(max = EMAIL_LENGTH)\n   @Email\n   private String emailId;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDM1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474774350", "bodyText": "we just removed orgId, why is it added again here?", "author": "zohrehj", "createdAt": "2020-08-21T15:34:58Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationForm.java", "diffHunk": "@@ -35,6 +53,8 @@\n   private int status;\n   private boolean tempPassword;\n   private LocalDateTime tempPasswordDate;\n+  private String appId;\n+  private String orgId;", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzgxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227812", "bodyText": "This needs to be addressed for all the services, Issue: #688 We'll fix this in follow-up PR.", "author": "dhanyak-btc", "createdAt": "2020-08-23T14:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDM1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDY1Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474774657", "bodyText": "same here, I believe this should be removed", "author": "zohrehj", "createdAt": "2020-08-21T15:35:31Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/config/ApplicationPropertyConfiguration.java", "diffHunk": "@@ -125,4 +125,7 @@\n \n   @Value(\"${auth.server.deactivateurl}\")\n   private String authServerDeactivateUrl;\n+\n+  @Value(\"${org.name}\")\n+  private String orgName;", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzg0MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227841", "bodyText": "This needs to be addressed for all the services, Issue: #688 We'll fix this in follow-up PR.", "author": "dhanyak-btc", "createdAt": "2020-08-23T14:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDY1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDUzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474810531", "bodyText": "maybe remove lombok.ToString? since you are excluding all the fields", "author": "zohrehj", "createdAt": "2020-08-21T16:45:19Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODIyOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228229", "bodyText": "Fixed review comment.", "author": "madhurya-btc", "createdAt": "2020-08-23T14:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f0be44e3c1c8936c27233b2b799dd48a77169653", "chunk": "diff --git a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java\nindex 23e88670c..c27943403 100644\n--- a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java\n+++ b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java\n\n@@ -13,7 +13,6 @@ import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n-import lombok.ToString;\n \n @Getter\n @Setter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTY4Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474811683", "bodyText": "remove orgId?", "author": "zohrehj", "createdAt": "2020-08-21T16:47:27Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java", "diffHunk": "@@ -74,230 +43,19 @@\n   }\n \n   @PostMapping(\"/register\")\n-  public ResponseEntity<?> registerUser(\n-      @Valid @RequestBody UserRegistrationForm userForm,\n+  public ResponseEntity<UserRegistrationResponse> registerUser(\n+      @Valid @RequestBody UserRegistrationForm user,\n       @RequestHeader(\"appId\") String appId,\n       @RequestHeader(\"orgId\") String orgId,", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNzg5NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475227895", "bodyText": "This needs to be addressed for all the services, Issue: #688 We'll fix this in follow-up PR.", "author": "dhanyak-btc", "createdAt": "2020-08-23T14:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "06fe79bbe960624056e8757ee91fbf2ede86e26b", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java\nindex 65a0aecf6..655e2ee2f 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationController.java\n\n@@ -49,11 +54,13 @@ public class UserRegistrationController {\n       @RequestHeader(\"orgId\") String orgId,\n       HttpServletRequest request) {\n     logger.entry(String.format(BEGIN_REQUEST_LOG, request.getRequestURI()));\n+    AuditLogEventRequest auditRequest = AuditEventMapper.fromHttpServletRequest(request);\n \n     user.setAppId(appId);\n     user.setOrgId(orgId);\n \n-    UserRegistrationResponse userRegistrationResponse = userRegistrationService.register(user);\n+    UserRegistrationResponse userRegistrationResponse =\n+        userRegistrationService.register(user, auditRequest);\n \n     logger.exit(\"User registration successful\");\n     return ResponseEntity.status(HttpStatus.CREATED).body(userRegistrationResponse);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNDM0NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474814344", "bodyText": "nit: rename to deactivateAcct to be consistent with the casing in DeactivateAcctBean", "author": "zohrehj", "createdAt": "2020-08-21T16:52:56Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java", "diffHunk": "@@ -33,8 +33,7 @@ public UserDetailsBO getParticipantDetailsByEmail(\n \n   public UserDetailsBO saveParticipant(UserDetailsBO participant);\n \n-  public String deActivateAcct(\n-      String userId, DeactivateAcctBean deactivateBean, String accessToken, String clientToken);\n+  public String deActivateAcct(String userId, DeactivateAcctBean deactivateBean);", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODIxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228212", "bodyText": "Fixed review comment", "author": "madhurya-btc", "createdAt": "2020-08-23T14:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNDM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "f0be44e3c1c8936c27233b2b799dd48a77169653", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java\nindex d0e2bc9d4..a2e23ad4e 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserManagementProfileService.java\n\n@@ -33,7 +33,7 @@ public interface UserManagementProfileService {\n \n   public UserDetailsBO saveParticipant(UserDetailsBO participant);\n \n-  public String deActivateAcct(String userId, DeactivateAcctBean deactivateBean);\n+  public String deactivateAccount(String userId, DeactivateAcctBean deactivateBean);\n \n   public int resendConfirmationthroughEmail(\n       String applicationId, String securityToken, String emailId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDc5Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474820796", "bodyText": "please remove", "author": "zohrehj", "createdAt": "2020-08-21T17:06:10Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODQyNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228424", "bodyText": "Fixed review comment.", "author": "madhurya-btc", "createdAt": "2020-08-23T14:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f0be44e3c1c8936c27233b2b799dd48a77169653", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\nindex f43c4072e..cd3d19ee8 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\n\n@@ -37,6 +37,8 @@ import org.springframework.web.client.RestTemplate;\n @Service\n public class UserRegistrationServiceImpl implements UserRegistrationService {\n \n+  private static final int VERIFICATION_CODE_LENGTH = 6;\n+\n   private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n \n   @Autowired private UserDetailsBORepository userDetailsRepository;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTgxNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474821817", "bodyText": "please remove these warn logs, since the exception handling code seems to be providing the proper error log", "author": "zohrehj", "createdAt": "2020-08-21T17:08:24Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODQzMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228433", "bodyText": "Fixed review comment.", "author": "madhurya-btc", "createdAt": "2020-08-23T14:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "f0be44e3c1c8936c27233b2b799dd48a77169653", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\nindex f43c4072e..cd3d19ee8 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\n\n@@ -37,6 +37,8 @@ import org.springframework.web.client.RestTemplate;\n @Service\n public class UserRegistrationServiceImpl implements UserRegistrationService {\n \n+  private static final int VERIFICATION_CODE_LENGTH = 6;\n+\n   private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n \n   @Autowired private UserDetailsBORepository userDetailsRepository;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjA2Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474822066", "bodyText": "this should be a constant", "author": "zohrehj", "createdAt": "2020-08-21T17:08:57Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());\n+      throw new ErrorCodeException(EMAIL_SEND_FAILED_EXCEPTION);\n+    }\n+\n+    logger.exit(\"user account successfully created and email sent with verification code\");\n+\n+    return new UserRegistrationResponse(\n+        String.valueOf(userDetailsBO.getUserDetailsId()),\n+        authUserResponse.getTempRegId(),\n+        authUserResponse.getUserId());\n+  }\n+\n+  private boolean generateVerificationCode(UserDetailsBO userDetailsBO) {\n+    return UserAccountStatus.PENDING_CONFIRMATION.getStatus() == userDetailsBO.getStatus()\n+        && (StringUtils.isEmpty(userDetailsBO.getEmailCode())\n+            || LocalDateTime.now().isAfter(userDetailsBO.getCodeExpireDate()));\n+  }\n+\n+  private UserDetailsBO generateAndSaveVerificationCode(UserDetailsBO userDetailsBO) {\n+    String verificationCode = RandomStringUtils.randomAlphanumeric(6);", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyODU1Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475228552", "bodyText": "Fixed review comment.", "author": "madhurya-btc", "createdAt": "2020-08-23T14:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f0be44e3c1c8936c27233b2b799dd48a77169653", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\nindex f43c4072e..cd3d19ee8 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\n\n@@ -37,6 +37,8 @@ import org.springframework.web.client.RestTemplate;\n @Service\n public class UserRegistrationServiceImpl implements UserRegistrationService {\n \n+  private static final int VERIFICATION_CODE_LENGTH = 6;\n+\n   private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n \n   @Autowired private UserDetailsBORepository userDetailsRepository;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk5OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474822998", "bodyText": "nit: either put in UserRegistrationForm or put in userDetailsBO and rename to fromUserRegistrationForm", "author": "zohrehj", "createdAt": "2020-08-21T17:10:51Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.EMAIL_SEND_FAILED_EXCEPTION;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.USER_ALREADY_EXISTS;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.AppOrgInfoBean;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.EmailResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationForm;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRegistrationResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserResponse;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.common.UserAccountStatus;\n+import com.google.cloud.healthcare.fdamystudies.config.ApplicationPropertyConfiguration;\n+import com.google.cloud.healthcare.fdamystudies.dao.CommonDao;\n+import com.google.cloud.healthcare.fdamystudies.exceptions.ErrorCodeException;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserDetailsBORepository;\n+import com.google.cloud.healthcare.fdamystudies.usermgmt.model.UserDetailsBO;\n+import com.google.cloud.healthcare.fdamystudies.util.MyStudiesUserRegUtil;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Service\n+public class UserRegistrationServiceImpl implements UserRegistrationService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n+\n+  @Autowired private UserDetailsBORepository userDetailsRepository;\n+\n+  @Autowired private CommonDao commonDao;\n+\n+  @Autowired private OAuthService oauthService;\n+\n+  @Autowired private RestTemplate restTemplate;\n+\n+  @Autowired private ApplicationPropertyConfiguration appConfig;\n+\n+  @Autowired private EmailService emailService;\n+\n+  @Value(\"${register.url}\")\n+  private String authRegisterUrl;\n+\n+  @Value(\"${email.code.expire_time}\")\n+  private long expireTime;\n+\n+  @Override\n+  public UserRegistrationResponse register(UserRegistrationForm user) {\n+    logger.entry(\"begin register()\");\n+\n+    // find appInfoId using appId\n+    AppOrgInfoBean appOrgInfoBean =\n+        commonDao.getUserAppDetailsByAllApi(user.getUserId(), user.getAppId(), user.getOrgId());\n+\n+    // find user by email and appId\n+    Optional<UserDetailsBO> optUserDetails =\n+        userDetailsRepository.findByEmailAndAppInfoId(\n+            user.getEmailId(), appOrgInfoBean.getAppInfoId());\n+\n+    // Return USER_ALREADY_EXISTS error code if user account already exists for the given email\n+    UserDetailsBO userDetailsBO = new UserDetailsBO();\n+    if (optUserDetails.isPresent()) {\n+      userDetailsBO = optUserDetails.get();\n+      if (StringUtils.isNotEmpty(userDetailsBO.getUserId())) {\n+        if (generateVerificationCode(userDetailsBO)) {\n+          generateAndSaveVerificationCode(userDetailsBO);\n+        }\n+\n+        logger.warn(USER_ALREADY_EXISTS.toString());\n+        throw new ErrorCodeException(USER_ALREADY_EXISTS);\n+      }\n+    }\n+\n+    // save user details\n+    userDetailsBO = toUserDetailsBO(user, userDetailsBO);\n+    userDetailsBO.setAppInfoId(appOrgInfoBean.getAppInfoId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // Call POST /users API to create a user account in oauth-scim-server\n+    UserResponse authUserResponse = registerUserInAuthServer(user);\n+\n+    // save authUserId and verfication code\n+    userDetailsBO.setUserId(authUserResponse.getUserId());\n+    userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+\n+    // generate save and email the verification code\n+    userDetailsBO = generateAndSaveVerificationCode(userDetailsBO);\n+\n+    // verification code is empty if send email is failed\n+    if (StringUtils.isEmpty(userDetailsBO.getEmailCode())) {\n+      logger.warn(EMAIL_SEND_FAILED_EXCEPTION.toString());\n+      throw new ErrorCodeException(EMAIL_SEND_FAILED_EXCEPTION);\n+    }\n+\n+    logger.exit(\"user account successfully created and email sent with verification code\");\n+\n+    return new UserRegistrationResponse(\n+        String.valueOf(userDetailsBO.getUserDetailsId()),\n+        authUserResponse.getTempRegId(),\n+        authUserResponse.getUserId());\n+  }\n+\n+  private boolean generateVerificationCode(UserDetailsBO userDetailsBO) {\n+    return UserAccountStatus.PENDING_CONFIRMATION.getStatus() == userDetailsBO.getStatus()\n+        && (StringUtils.isEmpty(userDetailsBO.getEmailCode())\n+            || LocalDateTime.now().isAfter(userDetailsBO.getCodeExpireDate()));\n+  }\n+\n+  private UserDetailsBO generateAndSaveVerificationCode(UserDetailsBO userDetailsBO) {\n+    String verificationCode = RandomStringUtils.randomAlphanumeric(6);\n+    EmailResponse emailResponse = sendConfirmationEmail(userDetailsBO, verificationCode);\n+    if (MessageCode.EMAIL_ACCEPTED_BY_MAIL_SERVER.getMessage().equals(emailResponse.getMessage())) {\n+      userDetailsBO.setEmailCode(verificationCode);\n+      userDetailsBO.setCodeExpireDate(LocalDateTime.now().plusMinutes(expireTime));\n+      userDetailsBO = userDetailsRepository.saveAndFlush(userDetailsBO);\n+    }\n+    return userDetailsBO;\n+  }\n+\n+  private UserDetailsBO toUserDetailsBO(UserRegistrationForm user, UserDetailsBO userDetailsBO) {\n+    userDetailsBO.setStatus(UserAccountStatus.PENDING_CONFIRMATION.getStatus());\n+    userDetailsBO.setVerificationDate(MyStudiesUserRegUtil.getCurrentUtilDateTime());\n+    userDetailsBO.setUserId(user.getUserId());\n+    userDetailsBO.setEmail(user.getEmailId());\n+    userDetailsBO.setUsePassCode(user.isUsePassCode());\n+    userDetailsBO.setLocalNotificationFlag(user.isLocalNotification());\n+    userDetailsBO.setRemoteNotificationFlag(user.isRemoteNotification());\n+    userDetailsBO.setTouchId(user.isTouchId());\n+    return userDetailsBO;", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyOTM2MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475229361", "bodyText": "Fixed review comment", "author": "madhurya-btc", "createdAt": "2020-08-23T14:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "f0be44e3c1c8936c27233b2b799dd48a77169653", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\nindex f43c4072e..cd3d19ee8 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/main/java/com/google/cloud/healthcare/fdamystudies/service/UserRegistrationServiceImpl.java\n\n@@ -37,6 +37,8 @@ import org.springframework.web.client.RestTemplate;\n @Service\n public class UserRegistrationServiceImpl implements UserRegistrationService {\n \n+  private static final int VERIFICATION_CODE_LENGTH = 6;\n+\n   private XLogger logger = XLoggerFactory.getXLogger(UserRegistrationServiceImpl.class.getName());\n \n   @Autowired private UserDetailsBORepository userDetailsRepository;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r474824324", "bodyText": "nit: break into multiple lines", "author": "zohrehj", "createdAt": "2020-08-21T17:13:37Z", "path": "user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java", "diffHunk": "@@ -62,87 +75,67 @@ public void healthCheck() throws Exception {\n     mockMvc.perform(get(\"/healthCheck\")).andDo(print()).andExpect(status().isOk());\n   }\n \n-  @Order(1)\n   @Test\n-  public void shouldReturnBadRequestForInvalidUserDetails() throws Exception {\n+  public void shouldReturnBadRequestForRegisterUser() throws Exception {\n     HttpHeaders headers =\n-        TestUtils.getCommonHeaders(\n-            Constants.APP_ID_HEADER,\n-            Constants.ORG_ID_HEADER,\n-            Constants.CLIENT_ID_HEADER,\n-            Constants.SECRET_KEY_HEADER);\n-\n-    // password is equalTo emailId\n-    String requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.EMAIL_ID);\n-    mockMvc\n-        .perform(\n-            post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))\n-        .andDo(print())\n-        .andExpect(status().isBadRequest())\n-        .andExpect(jsonPath(\"$.code\", is(HttpStatus.BAD_REQUEST.value())))\n-        .andExpect(jsonPath(\"$.message\", is(Constants.INVALID_PASSWORD)));\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n-    verify(\n-        1,\n-        postRequestedFor(urlEqualTo(\"/AuthServer/register\"))\n-            .withRequestBody(new ContainsPattern(Constants.EMAIL_ID)));\n+    UserRegistrationForm userRegistrationForm = new UserRegistrationForm();\n+    MvcResult result =\n+        mockMvc\n+            .perform(\n+                post(REGISTER_PATH)\n+                    .content(asJsonString(userRegistrationForm))\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andDo(print())\n+            .andExpect(status().isBadRequest())\n+            .andExpect(jsonPath(\"$.violations\").isArray())\n+            .andReturn();\n+\n+    String actualResponse = result.getResponse().getContentAsString();\n+    String expectedResponse = readJsonFile(\"/responses/register_account_bad_request.json\");\n+    JSONAssert.assertEquals(expectedResponse, actualResponse, JSONCompareMode.NON_EXTENSIBLE);\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestForInvalidPassword() throws Exception {\n+    HttpHeaders headers =\n+        TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n     // invalid  password\n-    requestJson = getRegisterUser(Constants.EMAIL_ID, Constants.INVALID_PASSWORD);\n+    String requestJson = getRegisterUser(\"mockito123@gmail.com\", Constants.INVALID_PASSWORD);\n     mockMvc\n         .perform(\n             post(REGISTER_PATH).content(requestJson).headers(headers).contextPath(getContextPath()))", "originalCommit": "0fcec4ac5547f49264696c003c3436497ba5d811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyOTYzMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475229630", "bodyText": "There is only 94 characters so it fits into single line.", "author": "madhurya-btc", "createdAt": "2020-08-23T15:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyOTg1Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475629857", "bodyText": "it's more readable when you break a chain into multiple lines", "author": "zohrehj", "createdAt": "2020-08-24T13:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMDU5OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475710599", "bodyText": "Even though if we break a chain into multiple lines, IDE will auto format.", "author": "madhurya-btc", "createdAt": "2020-08-24T15:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMyNA=="}], "type": "inlineReview", "revised_code": {"commit": "4ff1cd96138b9797f55302dfcd111fda482919d2", "chunk": "diff --git a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java\nindex 989b30e97..5e416592d 100644\n--- a/user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java\n+++ b/user-registration-server-ws/user-mgmt-module/user-mgmt/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/UserRegistrationControllerTest.java\n\n@@ -103,6 +130,19 @@ public class UserRegistrationControllerTest extends BaseMockIT {\n     HttpHeaders headers =\n         TestUtils.getCommonHeaders(Constants.APP_ID_HEADER, Constants.ORG_ID_HEADER);\n \n+    AuditLogEventRequest auditRequest = new AuditLogEventRequest();\n+    auditRequest.setAppId(Constants.APP_ID_VALUE);\n+\n+    Map<String, AuditLogEventRequest> auditEventMap = new HashedMap<>();\n+    auditEventMap.put(\n+        USER_NOT_CREATED_AFTER_REGISTRATION_FAILED_IN_AUTH_SERVER.getEventCode(), auditRequest);\n+    auditEventMap.put(ACCOUNT_REGISTRATION_REQUEST_RECEIVED.getEventCode(), auditRequest);\n+\n+    verifyAuditEventCall(\n+        auditEventMap,\n+        USER_NOT_CREATED_AFTER_REGISTRATION_FAILED_IN_AUTH_SERVER,\n+        ACCOUNT_REGISTRATION_REQUEST_RECEIVED);\n+\n     // invalid  password\n     String requestJson = getRegisterUser(\"mockito123@gmail.com\", Constants.INVALID_PASSWORD);\n     mockMvc\n"}}, {"oid": "f0be44e3c1c8936c27233b2b799dd48a77169653", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f0be44e3c1c8936c27233b2b799dd48a77169653", "message": "PR comment fixes", "committedDate": "2020-08-23T15:08:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNDkzNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475634935", "bodyText": "you can remove the @ToString.Exclude clause from all methods now", "author": "zohrehj", "createdAt": "2020-08-24T14:01:22Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java", "diffHunk": "@@ -13,7 +13,6 @@\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n-import lombok.ToString;", "originalCommit": "f0be44e3c1c8936c27233b2b799dd48a77169653", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMTMyMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/785#discussion_r475711321", "bodyText": "Fixed review comment.", "author": "madhurya-btc", "createdAt": "2020-08-24T15:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNDkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "958b223cc4766b0ed8ff51d36a700476f7ea6522", "chunk": "diff --git a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java\nindex c27943403..a1097892f 100644\n--- a/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java\n+++ b/common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/UserRegistrationResponse.java\n\n@@ -20,11 +20,11 @@ import lombok.Setter;\n @NoArgsConstructor\n public class UserRegistrationResponse extends BaseResponse {\n \n-  @ToString.Exclude private String userId;\n+  private String userId;\n \n-  @ToString.Exclude private String tempRegId;\n+  private String tempRegId;\n \n-  @ToString.Exclude private String authUserId;\n+  private String authUserId;\n \n   public UserRegistrationResponse(ErrorCode errorCode) {\n     super(errorCode);\n"}}, {"oid": "958b223cc4766b0ed8ff51d36a700476f7ea6522", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/958b223cc4766b0ed8ff51d36a700476f7ea6522", "message": "PR comment fixes.", "committedDate": "2020-08-24T16:05:44Z", "type": "commit"}, {"oid": "14038340a2434a80115843dce481aee8be84f0fd", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/14038340a2434a80115843dce481aee8be84f0fd", "message": "As per mobile team requirement, attribute value authUserId is changed to userId", "committedDate": "2020-08-26T08:54:39Z", "type": "commit"}, {"oid": "4d80fb9eb32333eb860c0e33f91333037ad9889c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4d80fb9eb32333eb860c0e33f91333037ad9889c", "message": "test cases failure fix", "committedDate": "2020-08-26T09:24:35Z", "type": "commit"}, {"oid": "4ff1cd96138b9797f55302dfcd111fda482919d2", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4ff1cd96138b9797f55302dfcd111fda482919d2", "message": "Merge branch 'develop' into user-mgmt-oauth-scim-register-implementation", "committedDate": "2020-08-26T14:44:09Z", "type": "commit"}, {"oid": "c165d8c6e95e68ecac00f7a529898a55787a64f8", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c165d8c6e95e68ecac00f7a529898a55787a64f8", "message": "Resolved conflicts", "committedDate": "2020-08-27T05:43:32Z", "type": "commit"}, {"oid": "06fe79bbe960624056e8757ee91fbf2ede86e26b", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/06fe79bbe960624056e8757ee91fbf2ede86e26b", "message": "resolved Testcases issue\n\nresolved Testcases issue", "committedDate": "2020-08-27T07:39:43Z", "type": "commit"}, {"oid": "bba9dc1ae5965aa895f66e5e07ff5d721491d9b1", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bba9dc1ae5965aa895f66e5e07ff5d721491d9b1", "message": "Merge branch 'develop' into user-mgmt-oauth-scim-register-implementation", "committedDate": "2020-08-27T10:42:16Z", "type": "commit"}, {"oid": "0ea565e78fc264e4c1faa55434371c843f04cb6b", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0ea565e78fc264e4c1faa55434371c843f04cb6b", "message": "resolved conflicts and organized imports", "committedDate": "2020-08-27T10:58:03Z", "type": "commit"}]}