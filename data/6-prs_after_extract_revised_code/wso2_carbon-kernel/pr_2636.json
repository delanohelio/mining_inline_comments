{"pr_number": 2636, "pr_title": "Add symmetric encryption support for Crypto Util", "pr_createdAt": "2020-03-16T13:06:55Z", "pr_url": "https://github.com/wso2/carbon-kernel/pull/2636", "timeline": [{"oid": "3cc12ad595ff763296e1688ab093e4b0a44c6ba7", "url": "https://github.com/wso2/carbon-kernel/commit/3cc12ad595ff763296e1688ab093e4b0a44c6ba7", "message": "Add symmetric encryption support for Crypto Util", "committedDate": "2020-03-16T12:53:39Z", "type": "commit"}, {"oid": "4cd122ccf51d93fecd008f25eeede82f3d414334", "url": "https://github.com/wso2/carbon-kernel/commit/4cd122ccf51d93fecd008f25eeede82f3d414334", "message": "Remove additional new lines", "committedDate": "2020-03-16T13:09:01Z", "type": "commit"}, {"oid": "e4845ed143657a426d6daa9190b963f657f72e73", "url": "https://github.com/wso2/carbon-kernel/commit/e4845ed143657a426d6daa9190b963f657f72e73", "message": "Remove unnecessary lines", "committedDate": "2020-03-16T13:16:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwODk2MQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393208961", "bodyText": "Avoid unnecessary concatenation", "author": "malithie", "createdAt": "2020-03-16T17:54:36Z", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -52,6 +52,10 @@\n     private static final String DEFAULT_CRYPTO_ALGORITHM = \"RSA\";\n \n     private static final String CRYPTO_API_PROVIDER_BC = \"BC\";\n+    private static final String INTERNAL_CRYPTO_PROVIDER = \"CryptoService.InternalCryptoProviderClassName\";\n+    private static final String SYMMETRIC_INTERNAL_CRYPTO_PROVIDER_CLASS_NAME =\n+            \"org.wso2.carbon.crypto.provider\" + \".SymmetricKeyInternalCryptoProvider\";", "originalCommit": "e4845ed143657a426d6daa9190b963f657f72e73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzODY1OA==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393438658", "bodyText": "Fixed with 004c781", "author": "denuwanthi", "createdAt": "2020-03-17T04:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwODk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "004c781ec5153daf95a6906b0c8ada5191a8c889", "chunk": "diff --git a/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java b/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\nindex 684ec733f..8afe046c6 100644\n--- a/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\n+++ b/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\n\n@@ -54,7 +54,7 @@ public class CryptoUtil {\n     private static final String CRYPTO_API_PROVIDER_BC = \"BC\";\n     private static final String INTERNAL_CRYPTO_PROVIDER = \"CryptoService.InternalCryptoProviderClassName\";\n     private static final String SYMMETRIC_INTERNAL_CRYPTO_PROVIDER_CLASS_NAME =\n-            \"org.wso2.carbon.crypto.provider\" + \".SymmetricKeyInternalCryptoProvider\";\n+            \"org.wso2.carbon.crypto.provider.SymmetricKeyInternalCryptoProvider\";\n     private static final String DEFAULT_SYMMETRIC_CRYPTO_ALGORITHM = \"AES\";\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMjQyOQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393212429", "bodyText": "Same code got refactored ?", "author": "malithie", "createdAt": "2020-03-16T18:00:28Z", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -149,14 +153,16 @@ public RegistryService getRegistryService() {\n                     log.debug(\"Plaintext is empty. An empty array will be used as the ciphertext bytes.\");\n                 }\n                 encryptedKey = StringUtils.EMPTY.getBytes();\n-            }else{\n+            } else {\n                 encryptedKey = cryptoService.encrypt(plainTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);\n             }\n \n-            if (StringUtils.isNotBlank(cipherTransformation) && returnSelfContainedCipherText) {\n+            if (StringUtils.isNotBlank(cipherTransformation) && returnSelfContainedCipherText\n+                    && !isSymmetricKeyEncryptionEnabled) {\n \n-                Certificate certificate = cryptoService.getCertificate(CryptoContext.buildEmptyContext(\n-                        MultitenantConstants.SUPER_TENANT_ID, MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));\n+                Certificate certificate = cryptoService.getCertificate(CryptoContext\n+                        .buildEmptyContext(MultitenantConstants.SUPER_TENANT_ID,\n+                                MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));", "originalCommit": "e4845ed143657a426d6daa9190b963f657f72e73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzODkwMg==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393438902", "bodyText": "This was due to using old wso2 check style. Fixed with 004c781.", "author": "denuwanthi", "createdAt": "2020-03-17T04:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMjQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "004c781ec5153daf95a6906b0c8ada5191a8c889", "chunk": "diff --git a/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java b/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\nindex 684ec733f..8afe046c6 100644\n--- a/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\n+++ b/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\n\n@@ -160,9 +160,8 @@ public class CryptoUtil {\n             if (StringUtils.isNotBlank(cipherTransformation) && returnSelfContainedCipherText\n                     && !isSymmetricKeyEncryptionEnabled) {\n \n-                Certificate certificate = cryptoService.getCertificate(CryptoContext\n-                        .buildEmptyContext(MultitenantConstants.SUPER_TENANT_ID,\n-                                MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));\n+                Certificate certificate = cryptoService.getCertificate(CryptoContext.buildEmptyContext(\n+                        MultitenantConstants.SUPER_TENANT_ID, MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));\n \n                 encryptedKey = createSelfContainedCiphertext(encryptedKey, algorithm, certificate);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNzA2OA==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393217068", "bodyText": "What if this method is utilized in 'getDefaultEncryptionAlgorithm' rather than passing an additional boolean", "author": "malithie", "createdAt": "2020-03-16T18:06:28Z", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -441,5 +445,21 @@ private String calculateThumbprint(Certificate certificate, String digest)\n \n         return strBuffer.toString();\n     }\n+\n+    private String getDefaultEncryptionAlgorithm(boolean isSymmetricKeyEncryptionEnabled) {\n+\n+        if (isSymmetricKeyEncryptionEnabled) {\n+            return DEFAULT_SYMMETRIC_CRYPTO_ALGORITHM;\n+        } else {\n+            // Set the default crypto algorithm.\n+            return DEFAULT_CRYPTO_ALGORITHM;\n+        }\n+    }\n+\n+    private boolean isSymmetricKeyEncryptionEnabled() {\n+\n+        return SYMMETRIC_INTERNAL_CRYPTO_PROVIDER_CLASS_NAME\n+                .equals(serverConfigService.getFirstProperty(INTERNAL_CRYPTO_PROVIDER));\n+    }", "originalCommit": "e4845ed143657a426d6daa9190b963f657f72e73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMzAzOA==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393433038", "bodyText": "Since we use this variable at https://github.com/wso2/carbon-kernel/pull/2636/files#diff-8b0422c9fd8f481b4c8261829499efe4R161 also, I defined it seperately. If use this inside the getDefaultEncryptionAlgorithm method, it is not accessible in https://github.com/wso2/carbon-kernel/pull/2636/files#diff-8b0422c9fd8f481b4c8261829499efe4R161.\nWe can declare an instance variable and assign to it in getDefaultEncryptionAlgorithm also. Instead I went with this approach.", "author": "denuwanthi", "createdAt": "2020-03-17T04:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "f2344fd6aafaab24887fb7b351027c4630c29eb1", "chunk": "diff --git a/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java b/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\nindex 684ec733f..346f457b9 100644\n--- a/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\n+++ b/core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java\n\n@@ -445,21 +453,5 @@ public class CryptoUtil {\n \n         return strBuffer.toString();\n     }\n-\n-    private String getDefaultEncryptionAlgorithm(boolean isSymmetricKeyEncryptionEnabled) {\n-\n-        if (isSymmetricKeyEncryptionEnabled) {\n-            return DEFAULT_SYMMETRIC_CRYPTO_ALGORITHM;\n-        } else {\n-            // Set the default crypto algorithm.\n-            return DEFAULT_CRYPTO_ALGORITHM;\n-        }\n-    }\n-\n-    private boolean isSymmetricKeyEncryptionEnabled() {\n-\n-        return SYMMETRIC_INTERNAL_CRYPTO_PROVIDER_CLASS_NAME\n-                .equals(serverConfigService.getFirstProperty(INTERNAL_CRYPTO_PROVIDER));\n-    }\n }\n \n"}}, {"oid": "004c781ec5153daf95a6906b0c8ada5191a8c889", "url": "https://github.com/wso2/carbon-kernel/commit/004c781ec5153daf95a6906b0c8ada5191a8c889", "message": "Fix PR comments", "committedDate": "2020-03-17T04:22:30Z", "type": "commit"}, {"oid": "f2344fd6aafaab24887fb7b351027c4630c29eb1", "url": "https://github.com/wso2/carbon-kernel/commit/f2344fd6aafaab24887fb7b351027c4630c29eb1", "message": "Refactor to use CryptoService", "committedDate": "2020-03-17T14:03:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MjQ1OA==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393872458", "bodyText": "Did we verify this will not have an impact on previously encrypted data for asymmetric flow", "author": "malithie", "createdAt": "2020-03-17T18:05:46Z", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -231,20 +222,20 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n                 throw new CryptoException(\"A crypto service implementation has not been registered.\");\n             }\n \n-            // Set the default crypto algorithm to be used when a cipher transformation is not found.\n-            String algorithm = DEFAULT_CRYPTO_ALGORITHM;\n+            String algorithm = null;\n \n             String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n \n             if (cipherTransformation != null) {\n-                CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-                if (cipherHolder != null) {\n+                CipherMetaDataHolder\n+                        cipherMetaDataHolder = cipherTextToCipherMetaDataHolder(cipherTextBytes);\n+                if (cipherMetaDataHolder != null) {", "originalCommit": "f2344fd6aafaab24887fb7b351027c4630c29eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMDM4Ng==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r394110386", "bodyText": "I think, during migration effort we can handle this. When there are previously encrypted data on asymmetric , we will have to do a migration anyway. This can also be handled from there i think.", "author": "denuwanthi", "createdAt": "2020-03-18T05:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MjQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3MzU5Ng==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r394273596", "bodyText": "Verified this. No issues observed.", "author": "denuwanthi", "createdAt": "2020-03-18T11:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MjQ1OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2202aa4c92fe3c9407232b4e85ce608a78bc18b1", "url": "https://github.com/wso2/carbon-kernel/commit/2202aa4c92fe3c9407232b4e85ce608a78bc18b1", "message": "Fix code review suggestions", "committedDate": "2020-03-18T13:24:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2MjI4MQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r394762281", "bodyText": "Let's deprecate CipherHolder class as well", "author": "malithie", "createdAt": "2020-03-19T02:50:40Z", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -406,10 +398,12 @@ public boolean base64DecodeAndIsSelfContainedCipherText(String base64CipherText)\n \n     /**\n      * Function to convert cipher byte array to {@link CipherHolder}\n+     * @deprecated  use {@link #cipherTextToCipherMetaDataHolder(byte[])} instead.\n      *\n      * @param cipherText cipher text as a byte array\n      * @return if cipher text is not a cipher with meta data\n      */\n+    @Deprecated\n     public CipherHolder cipherTextToCipherHolder(byte[] cipherText) {", "originalCommit": "2202aa4c92fe3c9407232b4e85ce608a78bc18b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NjkyMQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r394796921", "bodyText": "Fixed with 99475c9", "author": "denuwanthi", "createdAt": "2020-03-19T05:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2MjI4MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "99475c9adeb0b1dfb5ee8b8952b0abaedf970cfd", "url": "https://github.com/wso2/carbon-kernel/commit/99475c9adeb0b1dfb5ee8b8952b0abaedf970cfd", "message": "Deperecate the CipherHolder class", "committedDate": "2020-03-19T05:15:46Z", "type": "commit"}, {"oid": "2bc0e213f19071ff78206e57b97b153f5acda16c", "url": "https://github.com/wso2/carbon-kernel/commit/2bc0e213f19071ff78206e57b97b153f5acda16c", "message": "Refactor code", "committedDate": "2020-03-19T05:21:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwMjg0Ng==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r395202846", "bodyText": "I guess this will not apply as we will now have it in crypto service layer.\nStill keep a note and verify", "author": "malithie", "createdAt": "2020-03-19T17:35:07Z", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CipherHolder.java", "diffHunk": "@@ -24,9 +24,14 @@\n /**\n  * Holds ciphertext with related metadata.\n  *\n+ * @deprecated This is deprecated since version 4.6.1.\n+ * This is replaced with org.wso2.carbon.crypto.api.CipherMetaDataHolder.\n+ * This is deprecated due to moving self contained cipher text creation logic to crypto-service project.\n+ *\n  * IMPORTANT: this is replicated at org.wso2.carbon.user.core.config.UserStoreConfigXMLProcessor.CipherHolder,\n- *              what ever changes applied here need to update on above. This is done to avoid cyclic dependency.\n+ * what ever changes applied here need to update on above. This is done to avoid cyclic dependency.", "originalCommit": "2bc0e213f19071ff78206e57b97b153f5acda16c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwMTM5OA==", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r395501398", "bodyText": "Since the class deprecated, I think this will not matter. Yes, there is a cyclic dependecy between carbon.core and carbon.user.core. Therefore in user.core we have to add a new CipherMetaDataHolder instead of this deprecated one.", "author": "denuwanthi", "createdAt": "2020-03-20T08:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwMjg0Ng=="}], "type": "inlineReview", "revised_code": null}]}