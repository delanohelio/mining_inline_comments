{"pr_number": 2544, "pr_title": "Added interface methods needed for group-id implementation", "pr_createdAt": "2020-01-24T04:38:36Z", "pr_url": "https://github.com/wso2/carbon-kernel/pull/2544", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyNTMyOQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r370525329", "bodyText": "Let's not return null. better we return java 8 optional. as this is 4.6.x kernel or we can return empty list even", "author": "senthalan", "createdAt": "2020-01-24T08:52:08Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,174 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param UserID    User ID.\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    default List<Group> getGroupListOfUser(String UserID, Condition condition, int limit, int offset)\n+            throws UserStoreException {\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    default List<User> getUserListOfGroup(String groupID, Condition condition, int limit, int offset)\n+            throws UserStoreException {\n+\n+        return null;", "originalCommit": "0bf567e574f8cfa17e4a93b037fd438fd3ba3041", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ffa5fad6d43fe0963e82100b1882bd476121d2d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex c4333e271..49db844ed 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -402,11 +402,8 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n      * @return List of Group objects.\n      * @throws UserStoreException thrown by the underlying UserStoreManager.\n      */\n-    default List<Group> getGroupListOfUser(String UserID, Condition condition, int limit, int offset)\n-            throws UserStoreException {\n-\n-        return null;\n-    }\n+    List<Group> getGroupListOfUser(String UserID, Condition condition, int limit, int offset)\n+            throws UserStoreException;\n \n     /**\n      * Retrieves list of Users that belongs to a given group ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyODQ2OA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r370528468", "bodyText": "The permission is also an attribute of the Group", "author": "senthalan", "createdAt": "2020-01-24T09:00:29Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Group.\n+ */\n+public class Group extends AbstractEntity {", "originalCommit": "0bf567e574f8cfa17e4a93b037fd438fd3ba3041", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjMxOQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r370582319", "bodyText": "Added", "author": "GDRDABARERA", "createdAt": "2020-01-24T11:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyODQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java\nindex c6eb493f9..f28b0c48e 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java\n\n@@ -19,6 +19,8 @@\n \n package org.wso2.carbon.user.core.common;\n \n+import org.wso2.carbon.user.core.Permission;\n+\n import java.util.Map;\n \n /**\n"}}, {"oid": "8ffa5fad6d43fe0963e82100b1882bd476121d2d", "url": "https://github.com/wso2/carbon-kernel/commit/8ffa5fad6d43fe0963e82100b1882bd476121d2d", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-24T10:06:30Z", "type": "forcePushed"}, {"oid": "f5d1780a546656886ff3425504ba6eff5bd8c5a7", "url": "https://github.com/wso2/carbon-kernel/commit/f5d1780a546656886ff3425504ba6eff5bd8c5a7", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-24T10:15:56Z", "type": "forcePushed"}, {"oid": "8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d", "url": "https://github.com/wso2/carbon-kernel/commit/8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-24T11:08:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDEwNQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r370584105", "bodyText": "sortBy, sortOrder", "author": "IsuraD", "createdAt": "2020-01-24T11:14:33Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,143 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param UserID    User ID.\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String UserID, Condition condition, int limit, int offset)", "originalCommit": "8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ee19f4dcef89e35a1c59edbda7e31e03bbceff", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 49db844ed..ec448cd00 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -394,29 +394,60 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n     /**\n      * Retrieves list of group IDs of a given user ID.\n      *\n-     * @param UserID    User ID.\n-     * @param condition Conditional filter.\n+     * @param userId    User ID.\n      * @param limit     No of search results. If the given value is greater than the system configured max limit\n      *                  it will be reset to the system configured max limit.\n      * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n      * @return List of Group objects.\n      * @throws UserStoreException thrown by the underlying UserStoreManager.\n      */\n-    List<Group> getGroupListOfUser(String UserID, Condition condition, int limit, int offset)\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n             throws UserStoreException;\n \n     /**\n      * Retrieves list of Users that belongs to a given group ID.\n      *\n      * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users by evaluating the condition.\n+     *\n      * @param condition Conditional filter.\n      * @param limit     No of search results. If the given value is greater than the system configured max limit\n      *                  it will be reset to the system configured max limit.\n      * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n      * @return List of Users.\n      * @throws UserStoreException thrown by the underlying UserStoreManager.\n      */\n-    List<User> getUserListOfGroup(String groupID, Condition condition, int limit, int offset)\n+    List<User> getUserList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n             throws UserStoreException;\n \n     /**\n"}}, {"oid": "46ee19f4dcef89e35a1c59edbda7e31e03bbceff", "url": "https://github.com/wso2/carbon-kernel/commit/46ee19f4dcef89e35a1c59edbda7e31e03bbceff", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-24T12:03:02Z", "type": "forcePushed"}, {"oid": "1bb8dfd1578c43d788767b91be6fcfc698e5c8c9", "url": "https://github.com/wso2/carbon-kernel/commit/1bb8dfd1578c43d788767b91be6fcfc698e5c8c9", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-27T03:47:11Z", "type": "forcePushed"}, {"oid": "a6e23eb60bd3c4e7470d9abd743f19f1c70d03d8", "url": "https://github.com/wso2/carbon-kernel/commit/a6e23eb60bd3c4e7470d9abd743f19f1c70d03d8", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-27T04:01:26Z", "type": "forcePushed"}, {"oid": "b3a05698adfb9736b469a84729817155cf8901fc", "url": "https://github.com/wso2/carbon-kernel/commit/b3a05698adfb9736b469a84729817155cf8901fc", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-27T05:08:30Z", "type": "forcePushed"}, {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "url": "https://github.com/wso2/carbon-kernel/commit/9898f884800b1fb7ecb03ca679a7062684b45cb8", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-27T05:25:41Z", "type": "commit"}, {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "url": "https://github.com/wso2/carbon-kernel/commit/9898f884800b1fb7ecb03ca679a7062684b45cb8", "message": "Added interface methods needed for group-id implementation", "committedDate": "2020-01-27T05:25:41Z", "type": "forcePushed"}, {"oid": "f92f9decdb42c5461c858b13ca42eb0b631d51a3", "url": "https://github.com/wso2/carbon-kernel/commit/f92f9decdb42c5461c858b13ca42eb0b631d51a3", "message": "Merge branch '4.6.x' of https://github.com/wso2/carbon-kernel into group-id-feature", "committedDate": "2020-01-27T09:09:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5OTI1MQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371599251", "bodyText": "Is this differ from getGroupList?", "author": "IsuraD", "createdAt": "2020-01-28T03:55:26Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users by evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    default Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException {\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Check whether a group exists or not.\n+     *\n+     * @param groupID Group ID.\n+     * @return Return true if group exists in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isGroupExist(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroups(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroups(Condition condition, int limit, int offset, String sortBy, String sortOrder)", "originalCommit": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b853468833f3a2b064a7e4069982ba0eab3e0301", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 95714d9cc..4ed7a873c 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -392,7 +392,7 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n     /**\n-     * Retrieves list of group IDs of a given user ID.\n+     * Retrieves list of groups of a given user ID.\n      *\n      * @param userId    User ID.\n      * @param limit     No of search results. If the given value is greater than the system configured max limit\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNjU2Ng==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371606566", "bodyText": "Complete the method comment.", "author": "ashensw", "createdAt": "2020-01-28T04:33:23Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return", "originalCommit": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b853468833f3a2b064a7e4069982ba0eab3e0301", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 95714d9cc..4ed7a873c 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -392,7 +392,7 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n     /**\n-     * Retrieves list of group IDs of a given user ID.\n+     * Retrieves list of groups of a given user ID.\n      *\n      * @param userId    User ID.\n      * @param limit     No of search results. If the given value is greater than the system configured max limit\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNjcwMA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371606700", "bodyText": "This method is returning the list of groups I assume. Not only the group IDs?", "author": "ashensw", "createdAt": "2020-01-28T04:34:16Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.", "originalCommit": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b853468833f3a2b064a7e4069982ba0eab3e0301", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 95714d9cc..4ed7a873c 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -392,7 +392,7 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n     /**\n-     * Retrieves list of group IDs of a given user ID.\n+     * Retrieves list of groups of a given user ID.\n      *\n      * @param userId    User ID.\n      * @param limit     No of search results. If the given value is greater than the system configured max limit\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzI3MQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371607271", "bodyText": "A similar method is already there in the interface. Check whether this is really needed.", "author": "ashensw", "createdAt": "2020-01-28T04:37:42Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users by evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserList(Condition condition, int limit, int offset, String sortBy, String sortOrder)", "originalCommit": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b853468833f3a2b064a7e4069982ba0eab3e0301", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 95714d9cc..4ed7a873c 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -392,7 +392,7 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n     /**\n-     * Retrieves list of group IDs of a given user ID.\n+     * Retrieves list of groups of a given user ID.\n      *\n      * @param userId    User ID.\n      * @param limit     No of search results. If the given value is greater than the system configured max limit\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzU2MA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371607560", "bodyText": "Shall we remove this default method as well.", "author": "ashensw", "createdAt": "2020-01-28T04:39:40Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users by evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    default Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException {", "originalCommit": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b853468833f3a2b064a7e4069982ba0eab3e0301", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 95714d9cc..4ed7a873c 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -392,7 +392,7 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n     /**\n-     * Retrieves list of group IDs of a given user ID.\n+     * Retrieves list of groups of a given user ID.\n      *\n      * @param userId    User ID.\n      * @param limit     No of search results. If the given value is greater than the system configured max limit\n"}}, {"oid": "b853468833f3a2b064a7e4069982ba0eab3e0301", "url": "https://github.com/wso2/carbon-kernel/commit/b853468833f3a2b064a7e4069982ba0eab3e0301", "message": "Resolve PR comments", "committedDate": "2020-01-28T05:27:19Z", "type": "forcePushed"}, {"oid": "e0b593ef6563c5c398162ea1b18497f8d239b617", "url": "https://github.com/wso2/carbon-kernel/commit/e0b593ef6563c5c398162ea1b18497f8d239b617", "message": "Resolve PR comments", "committedDate": "2020-01-28T09:39:44Z", "type": "forcePushed"}, {"oid": "cec0df3ee622ee4f11eedd0d0f7c24680ca988fb", "url": "https://github.com/wso2/carbon-kernel/commit/cec0df3ee622ee4f11eedd0d0f7c24680ca988fb", "message": "Resolve PR comments", "committedDate": "2020-01-28T10:14:04Z", "type": "forcePushed"}, {"oid": "29800dadd82d537c654010daf9642145105b46e5", "url": "https://github.com/wso2/carbon-kernel/commit/29800dadd82d537c654010daf9642145105b46e5", "message": "Resolve PR comments", "committedDate": "2020-01-28T12:42:31Z", "type": "forcePushed"}, {"oid": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "url": "https://github.com/wso2/carbon-kernel/commit/93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "message": "Resolve PR comments", "committedDate": "2020-01-29T05:18:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5ODc3NA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372198774", "bodyText": "The class comment seems not correct.", "author": "ashensw", "createdAt": "2020-01-29T05:44:35Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Entity.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+/**\n+ * Abstract implementation of Groups and Users.", "originalCommit": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "060a72f804e4757f48714bb35ef00c0240dac13d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Entity.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Entity.java\nindex 2868b8ec9..3b1a28f42 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Entity.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Entity.java\n\n@@ -22,7 +22,7 @@ import java.io.Serializable;\n import java.util.Map;\n \n /**\n- * Abstract implementation of Groups and Users.\n+ * Represents Entity class, which is the super class of Group and User.\n  */\n public class Entity implements Serializable {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5ODg3NQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372198875", "bodyText": "Add a new line.", "author": "ashensw", "createdAt": "2020-01-29T05:45:08Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import org.wso2.carbon.user.core.Permission;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Group.\n+ */\n+public class Group extends Entity {\n+\n+    private static final long serialVersionUID = -6157030956831929121L;\n+    private String groupID;\n+    private String groupName;\n+    private Permission[] permissions;\n+\n+    public Group() {\n+       super();", "originalCommit": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "060a72f804e4757f48714bb35ef00c0240dac13d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java\nindex 3373dfdde..9f3cd71b9 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java\n\n@@ -33,6 +33,7 @@ public class Group extends Entity {\n     private Permission[] permissions;\n \n     public Group() {\n+\n        super();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTEwNQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372199105", "bodyText": "Better to keep the same order.", "author": "ashensw", "createdAt": "2020-01-29T05:46:18Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/User.java", "diffHunk": "@@ -20,24 +20,19 @@\n \n import org.wso2.carbon.user.core.util.UserCoreUtil;\n \n-import java.io.Serializable;\n import java.util.Map;\n \n /**\n  * Represents the user.\n  *\n  * @since 4.6.0\n  */\n-public class User implements Serializable {\n+public class User extends Entity {\n \n     private static final long serialVersionUID = -8811345359211553015L;\n+    private String preferredUsername;", "originalCommit": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "060a72f804e4757f48714bb35ef00c0240dac13d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/User.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/User.java\nindex 1f71bdb82..9737da7d6 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/User.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/User.java\n\n@@ -30,9 +30,9 @@ import java.util.Map;\n public class User extends Entity {\n \n     private static final long serialVersionUID = -8811345359211553015L;\n-    private String preferredUsername;\n     private String userID;\n     private String username;\n+    private String preferredUsername;\n \n     public User() {\n \n"}}, {"oid": "060a72f804e4757f48714bb35ef00c0240dac13d", "url": "https://github.com/wso2/carbon-kernel/commit/060a72f804e4757f48714bb35ef00c0240dac13d", "message": "Resolve PR comments", "committedDate": "2020-01-29T06:09:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNTA5OA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372205098", "bodyText": "Let's return the User object as we have done in the other addUser APIs.", "author": "ashensw", "createdAt": "2020-01-29T06:15:36Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,156 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException;\n+\n+    /**\n+     * Check whether a group exists or not.\n+     *\n+     * @param groupID Group ID.\n+     * @return Return true if group exists in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isGroupExist(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Delete a group.\n+     *\n+     * @param groupID Group ID.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void deleteGroup(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Rename an existing group.\n+     *\n+     * @param groupID      Group ID.\n+     * @param newGroupName New group name.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void renameGroup(String groupID, String newGroupName) throws UserStoreException;\n+\n+    /**\n+     * Add a user.\n+     *\n+     * @param userName    User Name.\n+     * @param credential  Credentials.\n+     * @param claims      Maps of user claim values.\n+     * @param groupIDs    Array of group IDs.\n+     * @param profileName Profile name.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addUser(String userName, Object credential, Map<String, String> claims, String[] groupIDs,", "originalCommit": "060a72f804e4757f48714bb35ef00c0240dac13d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 4ed7a873c..c9def4c22 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -460,9 +460,10 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n      * @param permissions   Array of permissions of the group.\n      * @param isSharedGroup Whether the added group is a shared or not.\n      * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     * @return created Group object.\n      */\n-    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n-                  boolean isSharedGroup) throws UserStoreException;\n+    Group addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                   boolean isSharedGroup) throws UserStoreException;\n \n     /**\n      * Update users that belongs to a group.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNTI2MQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372205261", "bodyText": "Better to return the new Group object here.", "author": "ashensw", "createdAt": "2020-01-29T06:16:16Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,156 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException;\n+\n+    /**\n+     * Check whether a group exists or not.\n+     *\n+     * @param groupID Group ID.\n+     * @return Return true if group exists in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isGroupExist(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Delete a group.\n+     *\n+     * @param groupID Group ID.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void deleteGroup(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Rename an existing group.\n+     *\n+     * @param groupID      Group ID.\n+     * @param newGroupName New group name.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void renameGroup(String groupID, String newGroupName) throws UserStoreException;", "originalCommit": "060a72f804e4757f48714bb35ef00c0240dac13d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 4ed7a873c..c9def4c22 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -460,9 +460,10 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n      * @param permissions   Array of permissions of the group.\n      * @param isSharedGroup Whether the added group is a shared or not.\n      * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     * @return created Group object.\n      */\n-    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n-                  boolean isSharedGroup) throws UserStoreException;\n+    Group addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                   boolean isSharedGroup) throws UserStoreException;\n \n     /**\n      * Update users that belongs to a group.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNzk1MA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372207950", "bodyText": "This should return a Map with Groups list.", "author": "ashensw", "createdAt": "2020-01-29T06:27:15Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,156 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException;", "originalCommit": "060a72f804e4757f48714bb35ef00c0240dac13d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 4ed7a873c..c9def4c22 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -460,9 +460,10 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n      * @param permissions   Array of permissions of the group.\n      * @param isSharedGroup Whether the added group is a shared or not.\n      * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     * @return created Group object.\n      */\n-    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n-                  boolean isSharedGroup) throws UserStoreException;\n+    Group addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                   boolean isSharedGroup) throws UserStoreException;\n \n     /**\n      * Update users that belongs to a group.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwODg2NA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372208864", "bodyText": "Let's return the Group object here.", "author": "ashensw", "createdAt": "2020-01-29T06:31:05Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,156 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,", "originalCommit": "060a72f804e4757f48714bb35ef00c0240dac13d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "chunk": "diff --git a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\nindex 4ed7a873c..c9def4c22 100644\n--- a/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n+++ b/core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java\n\n@@ -460,9 +460,10 @@ public interface UniqueIDUserStoreManager extends UserStoreManager {\n      * @param permissions   Array of permissions of the group.\n      * @param isSharedGroup Whether the added group is a shared or not.\n      * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     * @return created Group object.\n      */\n-    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n-                  boolean isSharedGroup) throws UserStoreException;\n+    Group addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                   boolean isSharedGroup) throws UserStoreException;\n \n     /**\n      * Update users that belongs to a group.\n"}}, {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "url": "https://github.com/wso2/carbon-kernel/commit/2e1256ea9acbfaedd1b33654557649a2152b2b5d", "message": "Resolve PR comments", "committedDate": "2020-01-29T07:08:10Z", "type": "commit"}, {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "url": "https://github.com/wso2/carbon-kernel/commit/2e1256ea9acbfaedd1b33654557649a2152b2b5d", "message": "Resolve PR comments", "committedDate": "2020-01-29T07:08:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDg2MQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r374010861", "bodyText": "Add id and name", "author": "GDRDABARERA", "createdAt": "2020-02-03T09:58:11Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Entity.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+/**\n+ * Represents Entity class, which is the super class of Group and User.\n+ */\n+public class Entity implements Serializable {\n+\n+    private static final long serialVersionUID = -9038468040609754623L;\n+    protected String displayName;\n+    protected String tenantDomain;\n+    protected String userStoreDomain;\n+    protected Map<String, String> attributes;\n+\n+    public Entity() {\n+\n+    }\n+\n+    public Entity(String displayName, String tenantDomain,\n+                  String userStoreDomain, Map<String, String> attributes) {\n+", "originalCommit": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMTMzMA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r374011330", "bodyText": "Use a List", "author": "GDRDABARERA", "createdAt": "2020-02-03T09:59:07Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import org.wso2.carbon.user.core.Permission;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Group.\n+ */\n+public class Group extends Entity {\n+\n+    private static final long serialVersionUID = -6157030956831929121L;\n+    private String groupID;\n+    private String groupName;\n+    private Permission[] permissions;", "originalCommit": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMzI2NQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r374013265", "bodyText": "use List instead of all arrays", "author": "GDRDABARERA", "createdAt": "2020-02-03T10:03:01Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,159 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     * @return created Group object.\n+     */\n+    Group addGroup(String groupName, String[] userIDList, Permission[] permissions,", "originalCommit": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxNDA3MA==", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r374014070", "bodyText": "Remove sharedGroups", "author": "GDRDABARERA", "createdAt": "2020-02-03T10:04:40Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,159 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     * @return created Group object.\n+     */\n+    Group addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                   boolean isSharedGroup) throws UserStoreException;", "originalCommit": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}