{"pr_number": 2690, "pr_title": "Add GCloud module for Google Cloud Datastore, Firestore, PubSub, and Spanner emulators", "pr_createdAt": "2020-05-09T19:51:49Z", "pr_url": "https://github.com/testcontainers/testcontainers-java/pull/2690", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r424686433", "bodyText": "does it really need to be an image? Can't we just use the command for it, since the image is not cached anyways?", "author": "bsideup", "createdAt": "2020-05-13T19:40:58Z", "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.images.builder.dockerfile.DockerfileBuilder;\n+\n+/**\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {\n+\n+\tpublic static final String DEFAULT_GCLOUD_IMAGE = \"google/cloud-sdk:291.0.0-alpine\";\n+\n+\tprivate List<String> commands = new ArrayList<>();\n+\n+\tpublic GCloudGenericContainer(String image) {\n+\t\tsuper(image);\n+\t}\n+\n+\tpublic GCloudGenericContainer(String image, String mainCmd, String[] prerequisiteCmds) {\n+\t\tsuper(buildImage(image, mainCmd, prerequisiteCmds));\n+\t}\n+\n+\t@Override\n+\tprotected void containerIsStarted(InspectContainerResponse containerInfo) {\n+\t\trunAdditionalCommands();\n+\t}\n+\n+\tprivate void runAdditionalCommands() {\n+\t\tthis.commands.forEach(cmd -> {\n+\t\t\ttry {\n+\t\t\t\texecInContainer(cmd);\n+\t\t\t} catch (IOException | InterruptedException e) {\n+\t\t\t\tlogger().error(\"Failed to execute {}. Exception message: {}\", cmd, e.getMessage());\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic SELF withAdditionalCommands(String... cmds) {\n+\t\tthis.commands.addAll(Arrays.asList(cmds));\n+\t\treturn self();\n+\t}\n+\n+\tprivate static ImageFromDockerfile buildImage(String image, String mainCmd, String[] prerequisiteCmds) {", "originalCommit": "64f426c620372d757fa16d63b966620dd4e5d7d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NTk5Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r424845996", "bodyText": "At the beginning I was not able to run it using command but that led me to know more about testcontainers. Now, I did it but had to set up a startupTimeout.", "author": "eddumelendez", "createdAt": "2020-05-14T03:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMzIwNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425203207", "bodyText": "Are we sure about this? \ud83d\ude04\nIt looks like these setup steps will require a non-trivial amount of time to execute - perhaps even the majority of the startup time.\nWould it be worth trying to get more attention on GoogleCloudPlatform/cloud-sdk-docker#202 so that we can avoid having these setup steps entirely?", "author": "rnorth", "createdAt": "2020-05-14T14:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNTA0Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425205046", "bodyText": "Actually, I missed that we install Java and other things... Yeah, I believe we need to wait for these images :(", "author": "bsideup", "createdAt": "2020-05-14T14:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwODc2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425208767", "bodyText": "/cc @jamesward @saturnism", "author": "bsideup", "createdAt": "2020-05-14T15:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "c69bfb0592a1e1ef697cdaa15a9650e54940b9ff", "chunk": "diff --git a/modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java b/modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java\nindex 842e7a95..904083dc 100644\n--- a/modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java\n+++ b/modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java\n\n@@ -1,9 +1,6 @@\n package org.testcontainers.containers;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n \n import com.github.dockerjava.api.command.InspectContainerResponse;\n import org.testcontainers.images.builder.ImageFromDockerfile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwODY4NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425208685", "bodyText": "We should probably remove these printlns or use slf4j.", "author": "rnorth", "createdAt": "2020-05-14T15:04:29Z", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.testcontainers.containers;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Instance;\n+import com.google.cloud.spanner.InstanceAdminClient;\n+import com.google.cloud.spanner.InstanceConfigId;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.InstanceInfo;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SpannerEmulatorContainerTest {\n+\n+\t@Rule\n+\tpublic SpannerEmulatorContainer emulator = new SpannerEmulatorContainer();\n+\n+\tprivate static final String PROJECT_NAME = \"test-project\";\n+\tprivate static final String INSTANCE_NAME = \"test-instance\";\n+\tprivate static final String DATABASE_NAME = \"test-database\";\n+\n+\t@Test\n+\tpublic void testSimple() throws ExecutionException, InterruptedException {\n+\t\tSpannerOptions options = SpannerOptions.newBuilder()\n+\t\t\t\t.setEmulatorHost(emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(9010))\n+\t\t\t\t.setCredentials(NoCredentials.getInstance())\n+\t\t\t\t.build();\n+\n+\t\tSpanner spanner = options.getService();\n+\n+\t\tInstanceId instanceId = createInstance(spanner);\n+\n+\t\tcreateDatabase(spanner);\n+\n+\t\tDatabaseId databaseId = DatabaseId.of(instanceId, DATABASE_NAME);\n+\t\tDatabaseClient dbClient = spanner.getDatabaseClient(databaseId);\n+\t\tdbClient.readWriteTransaction()\n+\t\t\t\t.run(tx -> {\n+\t\t\t\t\tString sql1 = \"Delete from TestTable where 1=1\";\n+\t\t\t\t\ttx.executeUpdate(Statement.of(sql1));\n+\t\t\t\t\tString sql = \"INSERT INTO TestTable (Key, Value) VALUES (1, 'Java'), (2, 'Go')\";\n+\t\t\t\t\ttx.executeUpdate(Statement.of(sql));\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\n+\t\tResultSet resultSet = dbClient.readOnlyTransaction()\n+\t\t\t\t.executeQuery(Statement.of(\"select * from TestTable order by Key\"));\n+\t\tresultSet.next();\n+\t\tassertThat(resultSet.getLong(0)).isEqualTo(1);\n+\t\tassertThat(resultSet.getString(1)).isEqualTo(\"Java\");\n+\t}\n+\n+\tprivate void createDatabase(Spanner spanner) throws InterruptedException, ExecutionException {\n+\t\tDatabaseAdminClient dbAdminClient = spanner.getDatabaseAdminClient();\n+\t\tDatabase database = dbAdminClient.createDatabase(INSTANCE_NAME, DATABASE_NAME, Arrays.asList(\"CREATE TABLE TestTable (Key INT64, Value STRING(MAX)) PRIMARY KEY (Key)\")).get();\n+\t\tSystem.out.println(\">>>\" + database.getState());\n+\t}\n+\n+\tprivate InstanceId createInstance(Spanner spanner) throws InterruptedException, ExecutionException {\n+\t\tInstanceConfigId instanceConfig = InstanceConfigId.of(PROJECT_NAME, \"emulator-config\");\n+\t\tInstanceId instanceId = InstanceId.of(PROJECT_NAME, INSTANCE_NAME);\n+\t\tInstanceAdminClient insAdminClient = spanner.getInstanceAdminClient();\n+\t\tInstance instance = insAdminClient.createInstance(InstanceInfo.newBuilder(instanceId).setInstanceConfigId(instanceConfig).build()).get();\n+\t\tSystem.out.println(\">>>\" + instance.getState());", "originalCommit": "bb74295396171501ae57d495609e1f5fd90ca8e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyNDcxMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425224712", "bodyText": "(There are a few other instances of println in other tests as well)", "author": "rnorth", "createdAt": "2020-05-14T15:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwODY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ff7c3d290b42a0757409c60943ae1e648609c4c", "chunk": "diff --git a/modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java b/modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java\nindex b3819e37..27ce656e 100644\n--- a/modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java\n+++ b/modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java\n\n@@ -24,57 +24,57 @@ import static org.assertj.core.api.Assertions.assertThat;\n \n public class SpannerEmulatorContainerTest {\n \n-\t@Rule\n-\tpublic SpannerEmulatorContainer emulator = new SpannerEmulatorContainer();\n+    @Rule\n+    public SpannerEmulatorContainer emulator = new SpannerEmulatorContainer();\n \n-\tprivate static final String PROJECT_NAME = \"test-project\";\n-\tprivate static final String INSTANCE_NAME = \"test-instance\";\n-\tprivate static final String DATABASE_NAME = \"test-database\";\n+    private static final String PROJECT_NAME = \"test-project\";\n+    private static final String INSTANCE_NAME = \"test-instance\";\n+    private static final String DATABASE_NAME = \"test-database\";\n \n-\t@Test\n-\tpublic void testSimple() throws ExecutionException, InterruptedException {\n-\t\tSpannerOptions options = SpannerOptions.newBuilder()\n-\t\t\t\t.setEmulatorHost(emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(9010))\n-\t\t\t\t.setCredentials(NoCredentials.getInstance())\n-\t\t\t\t.build();\n+    @Test\n+    public void testSimple() throws ExecutionException, InterruptedException {\n+        SpannerOptions options = SpannerOptions.newBuilder()\n+                .setEmulatorHost(emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(9010))\n+                .setCredentials(NoCredentials.getInstance())\n+                .build();\n \n-\t\tSpanner spanner = options.getService();\n+        Spanner spanner = options.getService();\n \n-\t\tInstanceId instanceId = createInstance(spanner);\n+        InstanceId instanceId = createInstance(spanner);\n \n-\t\tcreateDatabase(spanner);\n+        createDatabase(spanner);\n \n-\t\tDatabaseId databaseId = DatabaseId.of(instanceId, DATABASE_NAME);\n-\t\tDatabaseClient dbClient = spanner.getDatabaseClient(databaseId);\n-\t\tdbClient.readWriteTransaction()\n-\t\t\t\t.run(tx -> {\n-\t\t\t\t\tString sql1 = \"Delete from TestTable where 1=1\";\n-\t\t\t\t\ttx.executeUpdate(Statement.of(sql1));\n-\t\t\t\t\tString sql = \"INSERT INTO TestTable (Key, Value) VALUES (1, 'Java'), (2, 'Go')\";\n-\t\t\t\t\ttx.executeUpdate(Statement.of(sql));\n-\t\t\t\t\treturn null;\n-\t\t\t\t});\n+        DatabaseId databaseId = DatabaseId.of(instanceId, DATABASE_NAME);\n+        DatabaseClient dbClient = spanner.getDatabaseClient(databaseId);\n+        dbClient.readWriteTransaction()\n+                .run(tx -> {\n+                    String sql1 = \"Delete from TestTable where 1=1\";\n+                    tx.executeUpdate(Statement.of(sql1));\n+                    String sql = \"INSERT INTO TestTable (Key, Value) VALUES (1, 'Java'), (2, 'Go')\";\n+                    tx.executeUpdate(Statement.of(sql));\n+                    return null;\n+                });\n \n-\t\tResultSet resultSet = dbClient.readOnlyTransaction()\n-\t\t\t\t.executeQuery(Statement.of(\"select * from TestTable order by Key\"));\n-\t\tresultSet.next();\n-\t\tassertThat(resultSet.getLong(0)).isEqualTo(1);\n-\t\tassertThat(resultSet.getString(1)).isEqualTo(\"Java\");\n-\t}\n+        ResultSet resultSet = dbClient.readOnlyTransaction()\n+                .executeQuery(Statement.of(\"select * from TestTable order by Key\"));\n+        resultSet.next();\n+        assertThat(resultSet.getLong(0)).isEqualTo(1);\n+        assertThat(resultSet.getString(1)).isEqualTo(\"Java\");\n+    }\n \n-\tprivate void createDatabase(Spanner spanner) throws InterruptedException, ExecutionException {\n-\t\tDatabaseAdminClient dbAdminClient = spanner.getDatabaseAdminClient();\n-\t\tDatabase database = dbAdminClient.createDatabase(INSTANCE_NAME, DATABASE_NAME, Arrays.asList(\"CREATE TABLE TestTable (Key INT64, Value STRING(MAX)) PRIMARY KEY (Key)\")).get();\n-\t\tSystem.out.println(\">>>\" + database.getState());\n-\t}\n+    private void createDatabase(Spanner spanner) throws InterruptedException, ExecutionException {\n+        DatabaseAdminClient dbAdminClient = spanner.getDatabaseAdminClient();\n+        Database database = dbAdminClient.createDatabase(INSTANCE_NAME, DATABASE_NAME, Arrays.asList(\"CREATE TABLE TestTable (Key INT64, Value STRING(MAX)) PRIMARY KEY (Key)\")).get();\n+        System.out.println(\">>>\" + database.getState());\n+    }\n \n-\tprivate InstanceId createInstance(Spanner spanner) throws InterruptedException, ExecutionException {\n-\t\tInstanceConfigId instanceConfig = InstanceConfigId.of(PROJECT_NAME, \"emulator-config\");\n-\t\tInstanceId instanceId = InstanceId.of(PROJECT_NAME, INSTANCE_NAME);\n-\t\tInstanceAdminClient insAdminClient = spanner.getInstanceAdminClient();\n-\t\tInstance instance = insAdminClient.createInstance(InstanceInfo.newBuilder(instanceId).setInstanceConfigId(instanceConfig).build()).get();\n-\t\tSystem.out.println(\">>>\" + instance.getState());\n-\t\treturn instanceId;\n-\t}\n+    private InstanceId createInstance(Spanner spanner) throws InterruptedException, ExecutionException {\n+        InstanceConfigId instanceConfig = InstanceConfigId.of(PROJECT_NAME, \"emulator-config\");\n+        InstanceId instanceId = InstanceId.of(PROJECT_NAME, INSTANCE_NAME);\n+        InstanceAdminClient insAdminClient = spanner.getInstanceAdminClient();\n+        Instance instance = insAdminClient.createInstance(InstanceInfo.newBuilder(instanceId).setInstanceConfigId(instanceConfig).build()).get();\n+        System.out.println(\">>>\" + instance.getState());\n+        return instanceId;\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwOTI2OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425209268", "bodyText": "Is this assertion useful by this point in time?", "author": "rnorth", "createdAt": "2020-05-14T15:05:17Z", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+\t@Rule\n+\tpublic PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+\t@Test\n+\tpublic void testSimple() throws IOException {\n+\t\tString hostport = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8085);\n+\t\tManagedChannel channel = ManagedChannelBuilder.forTarget(hostport).usePlaintext().build();\n+\t\ttry {\n+\t\t\tTransportChannelProvider channelProvider =\n+\t\t\t\t\tFixedTransportChannelProvider.create(GrpcTransportChannel.create(channel));\n+\t\t\tCredentialsProvider credentialsProvider = NoCredentialsProvider.create();\n+\n+\t\t\tTopicAdminClient topicClient =\n+\t\t\t\t\tTopicAdminClient.create(\n+\t\t\t\t\t\t\tTopicAdminSettings.newBuilder()\n+\t\t\t\t\t\t\t\t\t.setTransportChannelProvider(channelProvider)\n+\t\t\t\t\t\t\t\t\t.setCredentialsProvider(credentialsProvider)\n+\t\t\t\t\t\t\t\t\t.build());\n+\t\t\tTopic topic = Topic.newBuilder().setName(\"projects/my-project-id/topics/my-topic-id\").build();\n+\t\t\ttopicClient.createTopic(topic);\n+\n+\t\t\tPublisher publisher = Publisher.newBuilder(topic.getName()).build();\n+\t\t\tPubsubMessage message = PubsubMessage.newBuilder().setData(ByteString.copyFromUtf8(\"test message\")).build();\n+\t\t\tApiFuture<String> future = publisher.publish(message);\n+\t\t\tApiFutures.addCallback(future, new ApiFutureCallback<String>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onFailure(Throwable t) {\n+\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onSuccess(String result) {\n+\t\t\t\t\tassertThat(result).isNotNull();\n+\t\t\t\t}\n+\t\t\t}, MoreExecutors.directExecutor());\n+\t\t} finally {\n+\t\t\tchannel.shutdown();\n+\t\t}\n+\n+\n+\t\tassertThat(emulator.getMappedPort(8085)).isNotNull();", "originalCommit": "bb74295396171501ae57d495609e1f5fd90ca8e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3eae24fff1f3726ef0086452f03eedcb6922dac0", "chunk": "diff --git a/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java b/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\nindex 9804ee9f..4d052830 100644\n--- a/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\n+++ b/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\n\n@@ -64,9 +64,6 @@ public class PubSubEmulatorContainerTest {\n \t\t} finally {\n \t\t\tchannel.shutdown();\n \t\t}\n-\n-\n-\t\tassertThat(emulator.getMappedPort(8085)).isNotNull();\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyMzQzMA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425223430", "bodyText": "Don't we need to call get() on future to ensure that the callback and assertion are fired on this thread?\nAlso, should we have an Assert.fail() inside onFailure?", "author": "rnorth", "createdAt": "2020-05-14T15:24:17Z", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+\t@Rule\n+\tpublic PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+\t@Test\n+\tpublic void testSimple() throws IOException {\n+\t\tString hostport = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8085);\n+\t\tManagedChannel channel = ManagedChannelBuilder.forTarget(hostport).usePlaintext().build();\n+\t\ttry {\n+\t\t\tTransportChannelProvider channelProvider =\n+\t\t\t\t\tFixedTransportChannelProvider.create(GrpcTransportChannel.create(channel));\n+\t\t\tCredentialsProvider credentialsProvider = NoCredentialsProvider.create();\n+\n+\t\t\tTopicAdminClient topicClient =\n+\t\t\t\t\tTopicAdminClient.create(\n+\t\t\t\t\t\t\tTopicAdminSettings.newBuilder()\n+\t\t\t\t\t\t\t\t\t.setTransportChannelProvider(channelProvider)\n+\t\t\t\t\t\t\t\t\t.setCredentialsProvider(credentialsProvider)\n+\t\t\t\t\t\t\t\t\t.build());\n+\t\t\tTopic topic = Topic.newBuilder().setName(\"projects/my-project-id/topics/my-topic-id\").build();\n+\t\t\ttopicClient.createTopic(topic);\n+\n+\t\t\tPublisher publisher = Publisher.newBuilder(topic.getName()).build();\n+\t\t\tPubsubMessage message = PubsubMessage.newBuilder().setData(ByteString.copyFromUtf8(\"test message\")).build();\n+\t\t\tApiFuture<String> future = publisher.publish(message);\n+\t\t\tApiFutures.addCallback(future, new ApiFutureCallback<String>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onFailure(Throwable t) {\n+\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onSuccess(String result) {\n+\t\t\t\t\tassertThat(result).isNotNull();\n+\t\t\t\t}\n+\t\t\t}, MoreExecutors.directExecutor());", "originalCommit": "bb74295396171501ae57d495609e1f5fd90ca8e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyOTY4Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425229682", "bodyText": "Ah, I was too excited to look at the code and missed:\n\nIt is pending to polish the pubsub test \ud83d\ude48\n\n\ud83d\ude04", "author": "rnorth", "createdAt": "2020-05-14T15:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyMzQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "3eae24fff1f3726ef0086452f03eedcb6922dac0", "chunk": "diff --git a/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java b/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\nindex 9804ee9f..4d052830 100644\n--- a/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\n+++ b/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\n\n@@ -64,9 +64,6 @@ public class PubSubEmulatorContainerTest {\n \t\t} finally {\n \t\t\tchannel.shutdown();\n \t\t}\n-\n-\n-\t\tassertThat(emulator.getMappedPort(8085)).isNotNull();\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyNjA3NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425226075", "bodyText": "Sorry for the mundane comment, but please could you reformat using 4 spaces for indentation? If you have an editorconfig-aware IDE this convention should get picked up automatically.", "author": "rnorth", "createdAt": "2020-05-14T15:27:42Z", "path": "modules/gcloud/src/main/java/org/testcontainers/containers/DatastoreEmulatorContainer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.testcontainers.containers;\n+\n+import java.util.Arrays;\n+\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+/**\n+ * A Datastore container that relies in google cloud sdk. The container provides\n+ * additional instructions to install the components needed in the alpine images.\n+ *\n+ * Default port is 8081.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class DatastoreEmulatorContainer extends GCloudGenericContainer<DatastoreEmulatorContainer> {\n+\n+\tprivate static final String[] CMDS = {\"apk --update add openjdk8-jre\",", "originalCommit": "bb74295396171501ae57d495609e1f5fd90ca8e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c69bfb0592a1e1ef697cdaa15a9650e54940b9ff", "chunk": "diff --git a/modules/gcloud/src/main/java/org/testcontainers/containers/DatastoreEmulatorContainer.java b/modules/gcloud/src/main/java/org/testcontainers/containers/DatastoreEmulatorContainer.java\nindex 9479da64..6da212d1 100644\n--- a/modules/gcloud/src/main/java/org/testcontainers/containers/DatastoreEmulatorContainer.java\n+++ b/modules/gcloud/src/main/java/org/testcontainers/containers/DatastoreEmulatorContainer.java\n\n@@ -1,7 +1,5 @@\n package org.testcontainers.containers;\n \n-import java.util.Arrays;\n-\n import org.testcontainers.containers.wait.strategy.Wait;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDg3Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r475390876", "bodyText": "It would be nice to have a(nother) test that:\n\nPublishes a message with some trivial contents\nPulls that message from a subscription to that topic\nVerifies that the trivial contents was received", "author": "walles", "createdAt": "2020-08-24T07:22:31Z", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+    @Rule\n+    public PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+    @Test\n+    public void testSimple() throws IOException, ExecutionException, InterruptedException {", "originalCommit": "198a88f0d5526d32a601aecb393aa71b1c62d369", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkwNzU4Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r479907587", "bodyText": "@walles thanks for the suggestions. I have added one more commit introducing that change. \ud83d\udc4d\ud83c\udffd", "author": "eddumelendez", "createdAt": "2020-08-31T05:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMzk4OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r479933989", "bodyText": "Beautiful! \ud83e\udd47", "author": "walles", "createdAt": "2020-08-31T06:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c69bfb0592a1e1ef697cdaa15a9650e54940b9ff", "chunk": "diff --git a/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java b/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\nindex 2a398a20..9804ee9f 100644\n--- a/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\n+++ b/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\n\n@@ -1,11 +1,11 @@\n package org.testcontainers.containers;\n \n import java.io.IOException;\n-import java.util.concurrent.ExecutionException;\n \n import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutureCallback;\n import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.CredentialsProvider;\n import com.google.api.gax.core.NoCredentialsProvider;\n import com.google.api.gax.grpc.GrpcTransportChannel;\n import com.google.api.gax.rpc.FixedTransportChannelProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzNTc2Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r500835762", "bodyText": "Do we really need this class? Looks redundant to me :)", "author": "bsideup", "createdAt": "2020-10-07T08:36:45Z", "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.testcontainers.containers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {", "originalCommit": "20a39f0d1dbcf2fbbbbe4fc18b23b5c811a59bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c69bfb0592a1e1ef697cdaa15a9650e54940b9ff", "chunk": "diff --git a/modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java b/modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java\nindex fa59df21..904083dc 100644\n--- a/modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java\n+++ b/modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java\n\n@@ -1,19 +1,56 @@\n package org.testcontainers.containers;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.Arrays;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.images.builder.dockerfile.DockerfileBuilder;\n \n /**\n  * @author Edd\u00fa Mel\u00e9ndez\n  */\n public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {\n \n-    public static final String DEFAULT_GCLOUD_IMAGE = \"gcr.io/google.com/cloudsdktool/cloud-sdk:306.0.0\";\n+\tpublic static final String DEFAULT_GCLOUD_IMAGE = \"google/cloud-sdk:291.0.0-alpine\";\n+\n+\tpublic GCloudGenericContainer(String image) {\n+\t\tsuper(image);\n+\t}\n+\n+\tpublic GCloudGenericContainer(String image, String mainCmd, String[] prerequisiteCmds) {\n+\t\tsuper(buildImage(image, mainCmd, prerequisiteCmds));\n+\t}\n+\n+\t@Override\n+\tprotected void containerIsStarted(InspectContainerResponse containerInfo) {\n+\t//\twithAdditionalCmds();\n+\t}\n+\n+//\tpublic void withAdditionalCmds() {\n+//\t\ttry {\n+//\t\t\tif (cmds != null) {\n+//\t\t\t\texecInContainer(cmds);\n+//\t\t\t}\n+//\t\t} catch (IOException | InterruptedException e) {\n+//\t\t\tlogger().error(\"Failed to execute {}. Exception message: {}\", cmds, e.getMessage());\n+//\t\t}\n+//\t}\n \n-    private List<String> commands = new ArrayList<>();\n+\tprivate static ImageFromDockerfile buildImage(String image, String mainCmd, String[] prerequisiteCmds) {\n+\t\treturn new ImageFromDockerfile()\n+\t\t\t\t.withDockerfileFromBuilder(builder -> {\n+\t\t\t\t\tDockerfileBuilder from = builder\n+\t\t\t\t\t\t\t.from(image);\n+\t\t\t\t\tif (prerequisiteCmds != null) {\n+\t\t\t\t\t\tfrom.run(parseCmds(prerequisiteCmds));\n+\t\t\t\t\t}\n+\t\t\t\t\tfrom.cmd(mainCmd);\n+\t\t\t\t\tfrom.build();\n+\t\t\t\t});\n+\t}\n \n-    public GCloudGenericContainer(String image) {\n-        super(image);\n-    }\n+\tprivate static String parseCmds(String... cmds) {\n+\t\treturn String.join(\" && \\n\", Arrays.asList(cmds));\n+\t}\n \n }\n"}}, {"oid": "c69bfb0592a1e1ef697cdaa15a9650e54940b9ff", "url": "https://github.com/testcontainers/testcontainers-java/commit/c69bfb0592a1e1ef697cdaa15a9650e54940b9ff", "message": "Add gcloud module\n\nBased on google cloud sdk docker image. This module provides:\n\n* DatastoreEmulatorContainer\n* FirestoreEmulatorContainer\n* PubSubEmulatorContainer\n\n`SpannerEmulatorContainer` is also provided but is based on its own\ndocker image.\n\nSee gh-2633", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "67b0ddd03f63ce59fe8fc47d14f30830ac49616d", "url": "https://github.com/testcontainers/testcontainers-java/commit/67b0ddd03f63ce59fe8fc47d14f30830ac49616d", "message": "Add docs", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "b05704ae7c151953ff7b3404ca13911beea5d045", "url": "https://github.com/testcontainers/testcontainers-java/commit/b05704ae7c151953ff7b3404ca13911beea5d045", "message": "Add support to perform additional commands in the container", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "927cc6d7b12eb4e10ac9cf238bc3e98ee1d7f350", "url": "https://github.com/testcontainers/testcontainers-java/commit/927cc6d7b12eb4e10ac9cf238bc3e98ee1d7f350", "message": "Build images using CMD", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "3eae24fff1f3726ef0086452f03eedcb6922dac0", "url": "https://github.com/testcontainers/testcontainers-java/commit/3eae24fff1f3726ef0086452f03eedcb6922dac0", "message": "Remove port assertion", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "cdc415eeef8a229fc5c006c1db5497c982128d64", "url": "https://github.com/testcontainers/testcontainers-java/commit/cdc415eeef8a229fc5c006c1db5497c982128d64", "message": "Add incubating module note", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "ae437762da096cb0f89fc82ae3df5ff351436209", "url": "https://github.com/testcontainers/testcontainers-java/commit/ae437762da096cb0f89fc82ae3df5ff351436209", "message": "Use codeinclude macro", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "1ff7c3d290b42a0757409c60943ae1e648609c4c", "url": "https://github.com/testcontainers/testcontainers-java/commit/1ff7c3d290b42a0757409c60943ae1e648609c4c", "message": "spaces instead of tabs", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "fe7a55ee6f718380ca72850be35de49c29264567", "url": "https://github.com/testcontainers/testcontainers-java/commit/fe7a55ee6f718380ca72850be35de49c29264567", "message": "Polish tests", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "1542b170b332ee97a752c49619b363fd5655e122", "url": "https://github.com/testcontainers/testcontainers-java/commit/1542b170b332ee97a752c49619b363fd5655e122", "message": "Update base image and polish commands", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "6991cef38b10e16561c1fdd901ef2a1c51e05f7d", "url": "https://github.com/testcontainers/testcontainers-java/commit/6991cef38b10e16561c1fdd901ef2a1c51e05f7d", "message": "Fix datastore test", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "84d1172a305030ea62b241627b90d51b50c26aa1", "url": "https://github.com/testcontainers/testcontainers-java/commit/84d1172a305030ea62b241627b90d51b50c26aa1", "message": "Polish Spanner test", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "0d3ea39615d3d3004296911803da3c9de67afefa", "url": "https://github.com/testcontainers/testcontainers-java/commit/0d3ea39615d3d3004296911803da3c9de67afefa", "message": "Fix docs", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "a5fdcb7713b7840eb3ad0ac449eff1087ac8937c", "url": "https://github.com/testcontainers/testcontainers-java/commit/a5fdcb7713b7840eb3ad0ac449eff1087ac8937c", "message": "Update base image", "committedDate": "2020-10-07T14:09:30Z", "type": "commit"}, {"oid": "548e6bf246b11234a8799b11c6bcf6be9af970d7", "url": "https://github.com/testcontainers/testcontainers-java/commit/548e6bf246b11234a8799b11c6bcf6be9af970d7", "message": "Remove startupTimeout", "committedDate": "2020-10-07T14:09:31Z", "type": "commit"}, {"oid": "802228f41b12e94ffc3acfba07362434fe461f6f", "url": "https://github.com/testcontainers/testcontainers-java/commit/802228f41b12e94ffc3acfba07362434fe461f6f", "message": "Set projectId", "committedDate": "2020-10-07T14:09:31Z", "type": "commit"}, {"oid": "465e487bae5cf456964b9678c8d2f99560eaf32c", "url": "https://github.com/testcontainers/testcontainers-java/commit/465e487bae5cf456964b9678c8d2f99560eaf32c", "message": "Rename project-id", "committedDate": "2020-10-07T14:09:31Z", "type": "commit"}, {"oid": "810962944ea4c575878e5e7fb05d9059975dee28", "url": "https://github.com/testcontainers/testcontainers-java/commit/810962944ea4c575878e5e7fb05d9059975dee28", "message": "Polish", "committedDate": "2020-10-07T14:09:31Z", "type": "commit"}, {"oid": "70befd341ed151663e1f1ed63ac114ced7a75145", "url": "https://github.com/testcontainers/testcontainers-java/commit/70befd341ed151663e1f1ed63ac114ced7a75145", "message": "Polish", "committedDate": "2020-10-07T14:09:31Z", "type": "commit"}, {"oid": "ac133f0a4ab4177b2e16a2197f9eb960325981d1", "url": "https://github.com/testcontainers/testcontainers-java/commit/ac133f0a4ab4177b2e16a2197f9eb960325981d1", "message": "Fix docs", "committedDate": "2020-10-07T14:09:31Z", "type": "commit"}, {"oid": "40dac6517084953eb91c0011718216ae4252a22e", "url": "https://github.com/testcontainers/testcontainers-java/commit/40dac6517084953eb91c0011718216ae4252a22e", "message": "Add subscriber in pubsub sample", "committedDate": "2020-10-07T14:09:31Z", "type": "commit"}, {"oid": "56839982da1197513585dca224dc0beb92bd844e", "url": "https://github.com/testcontainers/testcontainers-java/commit/56839982da1197513585dca224dc0beb92bd844e", "message": "Update with master changes", "committedDate": "2020-10-08T02:26:05Z", "type": "commit"}, {"oid": "56839982da1197513585dca224dc0beb92bd844e", "url": "https://github.com/testcontainers/testcontainers-java/commit/56839982da1197513585dca224dc0beb92bd844e", "message": "Update with master changes", "committedDate": "2020-10-08T02:26:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MzQxOQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r502873419", "bodyText": "When rendered, this has to be scrolled quite a bit. Let's perhaps wrap it?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\"));\n          \n          \n            \n                public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(\n          \n          \n            \n                    DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\")\n          \n          \n            \n                );", "author": "rnorth", "createdAt": "2020-10-11T06:39:33Z", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.testcontainers.containers;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.ServiceOptions;\n+import com.google.cloud.datastore.Datastore;\n+import com.google.cloud.datastore.DatastoreOptions;\n+import com.google.cloud.datastore.Entity;\n+import com.google.cloud.datastore.Key;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.utility.DockerImageName;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DatastoreEmulatorContainerTest {\n+\n+    @Rule\n+    // creatingDatastoreEmulatorContainer {\n+    public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\"));", "originalCommit": "56839982da1197513585dca224dc0beb92bd844e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d50670537c526bef905349e1e25aa3759b7a8b0", "chunk": "diff --git a/modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java b/modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java\nindex 3cc3d6c6..f8285e4c 100644\n--- a/modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java\n+++ b/modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java\n\n@@ -16,7 +16,9 @@ public class DatastoreEmulatorContainerTest {\n \n     @Rule\n     // creatingDatastoreEmulatorContainer {\n-    public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\"));\n+    public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(\n+        DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\")\n+    );\n     // }\n \n     //  startingDatastoreEmulatorContainer {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MzUwMQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r502873501", "bodyText": "Please could you reformat this file with spaces, not tabs? \ud83e\udd13", "author": "rnorth", "createdAt": "2020-10-11T06:40:28Z", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.SubscriptionAdminClient;\n+import com.google.cloud.pubsub.v1.SubscriptionAdminSettings;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.cloud.pubsub.v1.stub.GrpcSubscriberStub;\n+import com.google.cloud.pubsub.v1.stub.SubscriberStub;\n+import com.google.cloud.pubsub.v1.stub.SubscriberStubSettings;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.PullRequest;\n+import com.google.pubsub.v1.PullResponse;\n+import com.google.pubsub.v1.PushConfig;\n+import com.google.pubsub.v1.TopicName;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.utility.DockerImageName;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {", "originalCommit": "56839982da1197513585dca224dc0beb92bd844e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb43494dadd8aba74cdc28feaf39696b60507d82", "chunk": "diff --git a/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java b/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\nindex 4355684e..0c5ec888 100644\n--- a/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\n+++ b/modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java\n\n@@ -31,72 +31,72 @@ import static org.assertj.core.api.Assertions.assertThat;\n \n public class PubSubEmulatorContainerTest {\n \n-\tpublic static final String PROJECT_ID = \"my-project-id\";\n+    public static final String PROJECT_ID = \"my-project-id\";\n \n-\t@Rule\n-\tpublic PubSubEmulatorContainer emulator = new PubSubEmulatorContainer(DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\"));\n+    @Rule\n+    public PubSubEmulatorContainer emulator = new PubSubEmulatorContainer(DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\"));\n \n-\t@Test\n-\tpublic void testSimple() throws IOException {\n-\t\tString hostport = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8085);\n-\t\tManagedChannel channel = ManagedChannelBuilder.forTarget(hostport).usePlaintext().build();\n-\t\ttry {\n-\t\t\tTransportChannelProvider channelProvider =\n-\t\t\t\t\tFixedTransportChannelProvider.create(GrpcTransportChannel.create(channel));\n-\t\t\tNoCredentialsProvider credentialsProvider = NoCredentialsProvider.create();\n+    @Test\n+    public void testSimple() throws IOException {\n+        String hostport = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8085);\n+        ManagedChannel channel = ManagedChannelBuilder.forTarget(hostport).usePlaintext().build();\n+        try {\n+            TransportChannelProvider channelProvider =\n+                    FixedTransportChannelProvider.create(GrpcTransportChannel.create(channel));\n+            NoCredentialsProvider credentialsProvider = NoCredentialsProvider.create();\n \n-\t\t\tString topicId = \"my-topic-id\";\n-\t\t\tcreateTopic(topicId, channelProvider, credentialsProvider);\n+            String topicId = \"my-topic-id\";\n+            createTopic(topicId, channelProvider, credentialsProvider);\n \n-\t\t\tString subscriptionId = \"my-subscription-id\";\n-\t\t\tcreateSubscription(subscriptionId, topicId, channelProvider, credentialsProvider);\n+            String subscriptionId = \"my-subscription-id\";\n+            createSubscription(subscriptionId, topicId, channelProvider, credentialsProvider);\n \n-\t\t\tPublisher publisher = Publisher.newBuilder(TopicName.of(PROJECT_ID, topicId))\n-\t\t\t\t\t.setChannelProvider(channelProvider)\n-\t\t\t\t\t.setCredentialsProvider(credentialsProvider)\n-\t\t\t\t\t.build();\n-\t\t\tPubsubMessage message = PubsubMessage.newBuilder().setData(ByteString.copyFromUtf8(\"test message\")).build();\n-\t\t\tpublisher.publish(message);\n+            Publisher publisher = Publisher.newBuilder(TopicName.of(PROJECT_ID, topicId))\n+                    .setChannelProvider(channelProvider)\n+                    .setCredentialsProvider(credentialsProvider)\n+                    .build();\n+            PubsubMessage message = PubsubMessage.newBuilder().setData(ByteString.copyFromUtf8(\"test message\")).build();\n+            publisher.publish(message);\n \n-\t\t\tSubscriberStubSettings subscriberStubSettings =\n-\t\t\t\t\tSubscriberStubSettings.newBuilder()\n-\t\t\t\t\t\t\t.setTransportChannelProvider(channelProvider)\n-\t\t\t\t\t\t\t.setCredentialsProvider(credentialsProvider)\n-\t\t\t\t\t\t\t.build();\n-\t\t\ttry (SubscriberStub subscriber = GrpcSubscriberStub.create(subscriberStubSettings)) {\n-\t\t\t\tPullRequest pullRequest = PullRequest.newBuilder()\n-\t\t\t\t\t\t.setMaxMessages(1)\n-\t\t\t\t\t\t.setSubscription(ProjectSubscriptionName.format(PROJECT_ID, subscriptionId))\n-\t\t\t\t\t\t.build();\n-\t\t\t\tPullResponse pullResponse = subscriber.pullCallable().call(pullRequest);\n+            SubscriberStubSettings subscriberStubSettings =\n+                    SubscriberStubSettings.newBuilder()\n+                            .setTransportChannelProvider(channelProvider)\n+                            .setCredentialsProvider(credentialsProvider)\n+                            .build();\n+            try (SubscriberStub subscriber = GrpcSubscriberStub.create(subscriberStubSettings)) {\n+                PullRequest pullRequest = PullRequest.newBuilder()\n+                        .setMaxMessages(1)\n+                        .setSubscription(ProjectSubscriptionName.format(PROJECT_ID, subscriptionId))\n+                        .build();\n+                PullResponse pullResponse = subscriber.pullCallable().call(pullRequest);\n \n-\t\t\t\tassertThat(pullResponse.getReceivedMessagesList()).hasSize(1);\n-\t\t\t\tassertThat(pullResponse.getReceivedMessages(0).getMessage().getData().toStringUtf8()).isEqualTo(\"test message\");\n-\t\t\t}\n-\t\t} finally {\n-\t\t\tchannel.shutdown();\n-\t\t}\n-\t}\n+                assertThat(pullResponse.getReceivedMessagesList()).hasSize(1);\n+                assertThat(pullResponse.getReceivedMessages(0).getMessage().getData().toStringUtf8()).isEqualTo(\"test message\");\n+            }\n+        } finally {\n+            channel.shutdown();\n+        }\n+    }\n \n-\tprivate void createTopic(String topicId, TransportChannelProvider channelProvider, NoCredentialsProvider credentialsProvider) throws IOException {\n-\t\tTopicAdminSettings topicAdminSettings = TopicAdminSettings.newBuilder()\n-\t\t\t\t.setTransportChannelProvider(channelProvider)\n-\t\t\t\t.setCredentialsProvider(credentialsProvider)\n-\t\t\t\t.build();\n-\t\ttry (TopicAdminClient topicAdminClient = TopicAdminClient.create(topicAdminSettings)) {\n-\t\t\tTopicName topicName = TopicName.of(PROJECT_ID, topicId);\n-\t\t\ttopicAdminClient.createTopic(topicName);\n-\t\t}\n-\t}\n+    private void createTopic(String topicId, TransportChannelProvider channelProvider, NoCredentialsProvider credentialsProvider) throws IOException {\n+        TopicAdminSettings topicAdminSettings = TopicAdminSettings.newBuilder()\n+                .setTransportChannelProvider(channelProvider)\n+                .setCredentialsProvider(credentialsProvider)\n+                .build();\n+        try (TopicAdminClient topicAdminClient = TopicAdminClient.create(topicAdminSettings)) {\n+            TopicName topicName = TopicName.of(PROJECT_ID, topicId);\n+            topicAdminClient.createTopic(topicName);\n+        }\n+    }\n \n-\tprivate void createSubscription(String subscriptionId, String topicId, TransportChannelProvider channelProvider, NoCredentialsProvider credentialsProvider) throws IOException {\n-\t\tSubscriptionAdminSettings subscriptionAdminSettings = SubscriptionAdminSettings.newBuilder()\n-\t\t\t\t.setTransportChannelProvider(channelProvider)\n-\t\t\t\t.setCredentialsProvider(credentialsProvider)\n-\t\t\t\t.build();\n-\t\tSubscriptionAdminClient subscriptionAdminClient = SubscriptionAdminClient.create(subscriptionAdminSettings);\n-\t\tProjectSubscriptionName subscriptionName = ProjectSubscriptionName.of(PROJECT_ID, subscriptionId);\n-\t\tsubscriptionAdminClient.createSubscription(subscriptionName, TopicName.of(PROJECT_ID, topicId), PushConfig.getDefaultInstance(), 10);\n-\t}\n+    private void createSubscription(String subscriptionId, String topicId, TransportChannelProvider channelProvider, NoCredentialsProvider credentialsProvider) throws IOException {\n+        SubscriptionAdminSettings subscriptionAdminSettings = SubscriptionAdminSettings.newBuilder()\n+                .setTransportChannelProvider(channelProvider)\n+                .setCredentialsProvider(credentialsProvider)\n+                .build();\n+        SubscriptionAdminClient subscriptionAdminClient = SubscriptionAdminClient.create(subscriptionAdminSettings);\n+        ProjectSubscriptionName subscriptionName = ProjectSubscriptionName.of(PROJECT_ID, subscriptionId);\n+        subscriptionAdminClient.createSubscription(subscriptionName, TopicName.of(PROJECT_ID, topicId), PushConfig.getDefaultInstance(), 10);\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3Mzc2OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r502873769", "bodyText": "I wonder, maybe these should be public constants so that they can be used by tests? If we did that, we could do so for the other container classes in this PR.\nWDYT @bsideup, @kiview?", "author": "rnorth", "createdAt": "2020-10-11T06:43:25Z", "path": "modules/gcloud/src/main/java/org/testcontainers/containers/SpannerEmulatorContainer.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.testcontainers.containers;\n+\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n+\n+/**\n+ * A Spanner container. Default ports: 9010 for GRPC and 9020 for HTTP.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class SpannerEmulatorContainer extends GenericContainer<SpannerEmulatorContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"gcr.io/cloud-spanner-emulator/emulator\");\n+\n+    private static final int GRPC_PORT = 9010;\n+    private static final int HTTP_PORT = 9020;", "originalCommit": "56839982da1197513585dca224dc0beb92bd844e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3ODA5NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r503278095", "bodyText": "WDYT about not exposing the constants, but getGrpcPort/getHttpPort methods?", "author": "bsideup", "createdAt": "2020-10-12T12:58:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3Mzc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NzAyOQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r503477029", "bodyText": "looking at some of the other modules, private static final seems like the norm/convention atm. would it make sense to follow up w/ an issue for the broader change to expose these across modules?", "author": "saturnism", "createdAt": "2020-10-12T18:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3Mzc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNzI5MQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r504017291", "bodyText": "I've been persuaded by @bsideup - many of our other modules have some mechanism for getting the mapped ports, address or URL for the running container. It seems like we should do this here, instead of exposing constants, as it's fundamentally more useful for the user.\nI'll take the action to do this, as we've asked @eddumelendez to do too much already. I'll raise a quick PR tonight, and will merge this PR now.", "author": "rnorth", "createdAt": "2020-10-13T14:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3Mzc2OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4d50670537c526bef905349e1e25aa3759b7a8b0", "url": "https://github.com/testcontainers/testcontainers-java/commit/4d50670537c526bef905349e1e25aa3759b7a8b0", "message": "Update modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java\n\nCo-authored-by: Richard North <rich.north@gmail.com>", "committedDate": "2020-10-11T06:44:08Z", "type": "commit"}, {"oid": "fb43494dadd8aba74cdc28feaf39696b60507d82", "url": "https://github.com/testcontainers/testcontainers-java/commit/fb43494dadd8aba74cdc28feaf39696b60507d82", "message": "To spaces", "committedDate": "2020-10-11T06:48:29Z", "type": "commit"}, {"oid": "fb43494dadd8aba74cdc28feaf39696b60507d82", "url": "https://github.com/testcontainers/testcontainers-java/commit/fb43494dadd8aba74cdc28feaf39696b60507d82", "message": "To spaces", "committedDate": "2020-10-11T06:48:29Z", "type": "forcePushed"}]}