{"pr_number": 3102, "pr_title": "Image substitution", "pr_createdAt": "2020-08-16T13:16:16Z", "pr_url": "https://github.com/testcontainers/testcontainers-java/pull/3102", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExMjI1Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r471112256", "bodyText": "Risk: if so-called tiny image (alpine:3.5) is overridden in config, all usages of that image will be replaced. Substitution is now along image-identity lines rather than semantic lines.", "author": "rnorth", "createdAt": "2020-08-16T13:20:04Z", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -238,4 +157,19 @@ private static Properties readProperties(URL url) {\n         }\n         return properties;\n     }\n+\n+    DockerImageName getConfiguredSubstituteImage(DockerImageName original) {\n+        for (final Map.Entry<DockerImageName, String> entry : CONTAINER_MAPPING.entrySet()) {\n+            if (original.isCompatibleWith(entry.getKey())) {", "originalCommit": "b01ec3e339c8b9058cf1a2cb119cb42e6e049135", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "289c4e50db6a356ea48e44404ad6499b5511ff2b", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\nindex b83b3080..fe8032cc 100644\n--- a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n+++ b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n\n@@ -158,6 +237,10 @@ public class TestcontainersConfiguration {\n         return properties;\n     }\n \n+    private DockerImageName getImage(final String defaultValue) {\n+        return getConfiguredSubstituteImage(DockerImageName.parse(defaultValue));\n+    }\n+\n     DockerImageName getConfiguredSubstituteImage(DockerImageName original) {\n         for (final Map.Entry<DockerImageName, String> entry : CONTAINER_MAPPING.entrySet()) {\n             if (original.isCompatibleWith(entry.getKey())) {\n"}}, {"oid": "289c4e50db6a356ea48e44404ad6499b5511ff2b", "url": "https://github.com/testcontainers/testcontainers-java/commit/289c4e50db6a356ea48e44404ad6499b5511ff2b", "message": "WIP", "committedDate": "2020-09-30T10:35:13Z", "type": "forcePushed"}, {"oid": "c77675547505eaae487ed5b3cd5cf5f3d7ee46e0", "url": "https://github.com/testcontainers/testcontainers-java/commit/c77675547505eaae487ed5b3cd5cf5f3d7ee46e0", "message": "Image Substitution\n\n* adds a pluggable image substitution mechanism using ServiceLoader, enabling users to perform custom substitution/auditing of images being used by their tests\n* provides a default implementation that behaves similarly to legacy `TestcontainersConfiguration` approach (`testcontainers.properties`)", "committedDate": "2020-09-30T10:57:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r500925086", "bodyText": "not really related to this PR, but perhaps now is a good time to pin socat? :D\nOr re-publish it under testcontainers  as an automated build with FROM alpine/socat:latest to pin it?", "author": "bsideup", "createdAt": "2020-10-07T11:05:30Z", "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -17,7 +17,7 @@\n     private final Map<Integer, String> targets = new HashMap<>();\n \n     public SocatContainer() {\n-        this(TestcontainersConfiguration.getInstance().getSocatDockerImageName());\n+        this(DockerImageName.parse(\"alpine/socat:latest\"));", "originalCommit": "e3cb2a9199b1f7cb0607020279b8093257cf8e9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NDMxMA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r502874310", "bodyText": "Good point!", "author": "rnorth", "createdAt": "2020-10-11T06:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2NDU0Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r504464547", "bodyText": "Done in 7b8cedf", "author": "rnorth", "createdAt": "2020-10-14T07:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4NDgwNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r504484806", "bodyText": "Nice! Although SocatContainer still refers :latest \ud83d\ude05", "author": "bsideup", "createdAt": "2020-10-14T08:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMjkzOQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r504812939", "bodyText": "\ud83e\udd26", "author": "rnorth", "createdAt": "2020-10-14T16:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MzExNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r505783117", "bodyText": "Should be fixed now.", "author": "rnorth", "createdAt": "2020-10-15T19:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "da114db4f2165c9d3b97d49c5d11708be119d0e6", "chunk": "diff --git a/core/src/main/java/org/testcontainers/containers/SocatContainer.java b/core/src/main/java/org/testcontainers/containers/SocatContainer.java\nindex 6660dc3b..7592d9f4 100644\n--- a/core/src/main/java/org/testcontainers/containers/SocatContainer.java\n+++ b/core/src/main/java/org/testcontainers/containers/SocatContainer.java\n\n@@ -17,7 +15,7 @@ public class SocatContainer extends GenericContainer<SocatContainer> {\n     private final Map<Integer, String> targets = new HashMap<>();\n \n     public SocatContainer() {\n-        this(DockerImageName.parse(\"alpine/socat:latest\"));\n+        this(DockerImageName.parse(\"alpine/socat:1.7.3.4-r0\"));\n     }\n \n     public SocatContainer(final DockerImageName dockerImageName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTMyNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r502875327", "bodyText": "This is currently only used by the PrefixingImageNameSubstitutor, but I'm very tempted to use it for most of the other properties that are configurable.\nI think most of the properties would benefit from having an equivalent environment variable.\nI know we discussed having the reuse.enabled as a config file property instead of an env var some time back, so perhaps we'd leave that as is?", "author": "rnorth", "createdAt": "2020-10-11T07:00:26Z", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -185,6 +167,23 @@ public Integer getImagePullPauseTimeout() {\n         return Integer.parseInt((String) properties.getOrDefault(\"pull.pause.timeout\", \"30\"));\n     }\n \n+    /**\n+     * Gets a configured setting from an environment variable (if present) or a configuration file property otherwise.\n+     * @param propertyName name of configuration file property (dot-separated lower case)\n+     * @return the found value, or null if not set\n+     */\n+    @Nullable\n+    public String getEnvVarOrProperty(final String propertyName) {", "originalCommit": "7b8cedfd2a9f41edf8d341225c71d63ccacec26a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4NDAzNQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r504484035", "bodyText": "yes, let's keep reuse.enabled as an environment property \ud83d\udc4d", "author": "bsideup", "createdAt": "2020-10-14T08:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4Mjk3MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r505782970", "bodyText": "Would you be happy with every other property also being settable with an env var?", "author": "rnorth", "createdAt": "2020-10-15T19:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTQ4Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r508821486", "bodyText": "I've done this as proposed.", "author": "rnorth", "createdAt": "2020-10-20T20:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "da114db4f2165c9d3b97d49c5d11708be119d0e6", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\nindex ebd3738d..e52a8be7 100644\n--- a/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n+++ b/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java\n\n@@ -147,24 +159,25 @@ public class TestcontainersConfiguration {\n     }\n \n     public boolean isDisableChecks() {\n-        return Boolean.parseBoolean((String) environmentProperties.getOrDefault(\"checks.disable\", \"false\"));\n+        return Boolean.parseBoolean(getEnvVarOrProperty(\"checks.disable\", \"false\"));\n     }\n \n     @UnstableAPI\n     public boolean environmentSupportsReuse() {\n+        // specifically not supported as an environment variable\n         return Boolean.parseBoolean((String) environmentProperties.getOrDefault(\"testcontainers.reuse.enable\", \"false\"));\n     }\n \n     public String getDockerClientStrategyClassName() {\n-        return (String) environmentProperties.get(\"docker.client.strategy\");\n+        return getEnvVarOrProperty(\"docker.client.strategy\", null);\n     }\n \n     public String getTransportType() {\n-        return properties.getProperty(\"transport.type\", \"okhttp\");\n+        return getEnvVarOrProperty(\"transport.type\", \"okhttp\");\n     }\n \n     public Integer getImagePullPauseTimeout() {\n-        return Integer.parseInt((String) properties.getOrDefault(\"pull.pause.timeout\", \"30\"));\n+        return Integer.parseInt(getEnvVarOrProperty(\"pull.pause.timeout\", \"30\"));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTU2MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r502875560", "bodyText": "I've made this as a default out-of-the-box substitutor that delegates to both the config file settings and a simple 'prefix' substitutor which can apply a common prefix to all image names.\nI suspect this might be enough for 80% of situations where people need a substitutor, which is why I think it's worth including it by default.", "author": "rnorth", "createdAt": "2020-10-11T07:02:45Z", "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * TODO: Javadocs\n+ */\n+@Slf4j\n+public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {", "originalCommit": "7b8cedfd2a9f41edf8d341225c71d63ccacec26a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2ODE1NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514268155", "bodyText": "FTR for others looking at this PR:\nthis comment is outdated, see #3413 for the prefixing substitutor", "author": "bsideup", "createdAt": "2020-10-29T13:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "da114db4f2165c9d3b97d49c5d11708be119d0e6", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java b/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\nindex dada0d5f..6c4e106a 100644\n--- a/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\n+++ b/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\n\n@@ -4,7 +4,8 @@ import com.google.common.annotations.VisibleForTesting;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n- * TODO: Javadocs\n+ * Testcontainers' default implementation of {@link ImageNameSubstitutor}.\n+ * Delegates to {@link ConfigurationFileImageNameSubstitutor} followed by {@link PrefixingImageNameSubstitutor}.\n  */\n @Slf4j\n public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {\n"}}, {"oid": "da114db4f2165c9d3b97d49c5d11708be119d0e6", "url": "https://github.com/testcontainers/testcontainers-java/commit/da114db4f2165c9d3b97d49c5d11708be119d0e6", "message": "Change image used for test to avoid image name cache preventing proper pull", "committedDate": "2020-10-21T18:26:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTM1NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514055355", "bodyText": "shouldn't it be DEFAULT_IMAGE, similar to KafkaContainer and others?", "author": "bsideup", "createdAt": "2020-10-29T07:37:04Z", "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "diffHunk": "@@ -22,8 +22,7 @@\n     private String password = \"oracle\";\n \n     private static String resolveImageName() {\n-        String image = TestcontainersConfiguration.getInstance()\n-            .getProperties().getProperty(\"oracle.container.image\");\n+        String image = TestcontainersConfiguration.getInstance().getOracleImage();", "originalCommit": "8cdb94f952392f003d10b29f98e173781bb97d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MDc3MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514090770", "bodyText": "Oracle is weird, because we (currently) have no default image to point to. I think perhaps we should resolve that, and do so in a separate change.", "author": "rnorth", "createdAt": "2020-10-29T08:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5OTkzOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514099938", "bodyText": "oh, right! I completely forgot about it \ud83d\ude05", "author": "bsideup", "createdAt": "2020-10-29T09:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0f51dfa6206162baa610463ce5d56358b5812d60", "chunk": "diff --git a/modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java b/modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java\nindex 0a66ad6f..b5700c1e 100644\n--- a/modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java\n+++ b/modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java\n\n@@ -22,7 +22,8 @@ public class OracleContainer extends JdbcDatabaseContainer<OracleContainer> {\n     private String password = \"oracle\";\n \n     private static String resolveImageName() {\n-        String image = TestcontainersConfiguration.getInstance().getOracleImage();\n+        String image = TestcontainersConfiguration.getInstance()\n+            .getProperties().getProperty(\"oracle.container.image\");\n \n         if (image == null) {\n             throw new IllegalStateException(\"An image to use for Oracle containers must be configured. \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NzE3Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514057172", "bodyText": "just a random thought:\ncan't we make this test pass by substituting registry.mycompany.com/mirror/mysql with mysql (aka reverse substitution)?", "author": "bsideup", "createdAt": "2020-10-29T07:40:52Z", "path": "docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package generic;\n+\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.testcontainers.containers.MySQLContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class ImageNameSubstitutionTest {\n+\n+    @Test\n+    public void simpleExample() {\n+        try (\n+            // directDockerHubReference {\n+            // Referring directly to an image on Docker Hub (mysql:8.0.22)\n+            final MySQLContainer<?> mysql = new MySQLContainer<>(\n+                DockerImageName.parse(\"mysql:8.0.22\")\n+            )\n+\n+            // start the container and use it for testing\n+            // }\n+        ) {\n+            mysql.start();\n+        }\n+    }\n+\n+    @Test @Ignore", "originalCommit": "8cdb94f952392f003d10b29f98e173781bb97d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MDkxNA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514090914", "bodyText": "Very good idea - will do.", "author": "rnorth", "createdAt": "2020-10-29T08:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MTI0OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514261249", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-10-29T13:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NzE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0f51dfa6206162baa610463ce5d56358b5812d60", "chunk": "diff --git a/docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java b/docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java\ndeleted file mode 100644\nindex dcb421a7..00000000\n--- a/docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-package generic;\n-\n-\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.testcontainers.containers.MySQLContainer;\n-import org.testcontainers.utility.DockerImageName;\n-\n-public class ImageNameSubstitutionTest {\n-\n-    @Test\n-    public void simpleExample() {\n-        try (\n-            // directDockerHubReference {\n-            // Referring directly to an image on Docker Hub (mysql:8.0.22)\n-            final MySQLContainer<?> mysql = new MySQLContainer<>(\n-                DockerImageName.parse(\"mysql:8.0.22\")\n-            )\n-\n-            // start the container and use it for testing\n-            // }\n-        ) {\n-            mysql.start();\n-        }\n-    }\n-\n-    @Test @Ignore\n-    public void substitutedExample() {\n-        try (\n-            // hardcodedMirror {\n-            // Referring directly to an image on a private registry - image name will vary\n-            final MySQLContainer<?> mysql = new MySQLContainer<>(\n-                DockerImageName.parse(\"registry.mycompany.com/mirror/mysql:8.0.22\")\n-                               .asCompatibleSubstituteFor(\"mysql\")\n-            )\n-\n-            // start the container and use it for testing\n-            // }\n-        ) {\n-            mysql.start();\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1OTY4OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514059688", "bodyText": "WDYT about either adding an extra assert after the property is removed (to ensure that it is not cached, for example) or splitting the test into 2 (user properties, environment)?", "author": "bsideup", "createdAt": "2020-10-29T07:46:36Z", "path": "core/src/test/java/org/testcontainers/utility/TestcontainersConfigurationTest.java", "diffHunk": "@@ -1,57 +1,112 @@\n package org.testcontainers.utility;\n \n-import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n-import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n-import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.UUID;\n-import org.junit.Test;\n+\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n \n public class TestcontainersConfigurationTest {\n \n-    final Properties environmentProperties = new Properties();\n+    private Properties userProperties;\n+    private Properties classpathProperties;\n+    private Map<String, String> environment;\n \n-    final Properties classpathProperties = new Properties();\n+    @Before\n+    public void setUp() {\n+        userProperties = new Properties();\n+        classpathProperties = new Properties();\n+        environment = new HashMap<>();\n+    }\n \n     @Test\n-    public void shouldReadChecksFromEnvironmentOnly() {\n+    public void shouldSubstituteImageNamesFromClasspathProperties() {\n+        classpathProperties.setProperty(\"ryuk.container.image\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from classpath properties\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldSubstituteImageNamesFromUserProperties() {\n+        userProperties.setProperty(\"ryuk.container.image\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from user properties\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldSubstituteImageNamesFromEnvironmentVariables() {\n+        environment.put(\"TESTCONTAINERS_RYUK_CONTAINER_IMAGE\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from an environment variable\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldReadChecksFromUserPropertiesOrEnvironmentOnly() {\n         assertFalse(\"checks enabled by default\", newConfig().isDisableChecks());\n \n         classpathProperties.setProperty(\"checks.disable\", \"true\");\n         assertFalse(\"checks are not affected by classpath properties\", newConfig().isDisableChecks());\n \n-        environmentProperties.setProperty(\"checks.disable\", \"true\");\n-        assertTrue(\"checks disabled\", newConfig().isDisableChecks());\n+        userProperties.setProperty(\"checks.disable\", \"true\");\n+        assertTrue(\"checks disabled via user properties\", newConfig().isDisableChecks());\n+\n+        userProperties.remove(\"checks.disable\");\n+        environment.put(\"TESTCONTAINERS_CHECKS_DISABLE\", \"true\");\n+        assertTrue(\"checks disabled via env var\", newConfig().isDisableChecks());\n     }\n \n     @Test\n-    public void shouldReadDockerClientStrategyFromEnvironmentOnly() {\n+    public void shouldReadDockerClientStrategyFromUserPropertiesOrEnvironmentOnly() {\n         String currentValue = newConfig().getDockerClientStrategyClassName();\n \n         classpathProperties.setProperty(\"docker.client.strategy\", UUID.randomUUID().toString());\n         assertEquals(\"Docker client strategy is not affected by classpath properties\", currentValue, newConfig().getDockerClientStrategyClassName());\n \n-        environmentProperties.setProperty(\"docker.client.strategy\", \"foo\");\n-        assertEquals(\"Docker client strategy is changed\", \"foo\", newConfig().getDockerClientStrategyClassName());\n+        userProperties.setProperty(\"docker.client.strategy\", \"foo\");\n+        assertEquals(\"Docker client strategy is changed by user property\", \"foo\", newConfig().getDockerClientStrategyClassName());\n+\n+        userProperties.remove(\"docker.client.strategy\");", "originalCommit": "8cdb94f952392f003d10b29f98e173781bb97d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDY0NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515174645", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-10-30T15:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1OTY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "a7f72af07e89306dae2e80f67e9f71d949fbd50c", "chunk": "diff --git a/core/src/test/java/org/testcontainers/utility/TestcontainersConfigurationTest.java b/core/src/test/java/org/testcontainers/utility/TestcontainersConfigurationTest.java\nindex 44c8e699..147e5e60 100644\n--- a/core/src/test/java/org/testcontainers/utility/TestcontainersConfigurationTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/TestcontainersConfigurationTest.java\n\n@@ -56,14 +56,24 @@ public class TestcontainersConfigurationTest {\n     }\n \n     @Test\n-    public void shouldReadChecksFromUserPropertiesOrEnvironmentOnly() {\n+    public void shouldNotReadChecksFromClasspathProperties() {\n         assertFalse(\"checks enabled by default\", newConfig().isDisableChecks());\n \n         classpathProperties.setProperty(\"checks.disable\", \"true\");\n         assertFalse(\"checks are not affected by classpath properties\", newConfig().isDisableChecks());\n+    }\n+\n+    @Test\n+    public void shouldReadChecksFromUserProperties() {\n+        assertFalse(\"checks enabled by default\", newConfig().isDisableChecks());\n \n         userProperties.setProperty(\"checks.disable\", \"true\");\n         assertTrue(\"checks disabled via user properties\", newConfig().isDisableChecks());\n+    }\n+\n+    @Test\n+    public void shouldReadChecksFromEnvironment() {\n+        assertFalse(\"checks enabled by default\", newConfig().isDisableChecks());\n \n         userProperties.remove(\"checks.disable\");\n         environment.put(\"TESTCONTAINERS_CHECKS_DISABLE\", \"true\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MDkzMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514060932", "bodyText": "we should also add a test for images from custom registries (e.g. mcr.microsoft.com/mssql/server), to define the behaviour", "author": "bsideup", "createdAt": "2020-10-29T07:49:21Z", "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {", "originalCommit": "8cdb94f952392f003d10b29f98e173781bb97d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDgwNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515174806", "bodyText": "Removed from this PR", "author": "rnorth", "createdAt": "2020-10-30T15:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MDkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "0f51dfa6206162baa610463ce5d56358b5812d60", "chunk": "diff --git a/core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java b/core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java\ndeleted file mode 100644\nindex 3e667566..00000000\n--- a/core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java\n+++ /dev/null\n\n@@ -1,75 +0,0 @@\n-package org.testcontainers.utility;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n-import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PROPERTY_KEY;\n-\n-public class PrefixingImageNameSubstitutorTest {\n-\n-    private TestcontainersConfiguration mockConfiguration;\n-    private PrefixingImageNameSubstitutor underTest;\n-\n-    @Before\n-    public void setUp() {\n-        mockConfiguration = mock(TestcontainersConfiguration.class);\n-        underTest = new PrefixingImageNameSubstitutor(mockConfiguration);\n-    }\n-\n-    @Test\n-    public void testHappyPath() {\n-        when(mockConfiguration.getEnvVarOrProperty(eq(PROPERTY_KEY), any())).thenReturn(\"someregistry.com/\");\n-\n-        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));\n-\n-        assertEquals(\n-            \"The prefix is applied\",\n-            \"someregistry.com/some/image:tag\",\n-            result.asCanonicalNameString()\n-        );\n-    }\n-\n-    @Test\n-    public void testNoDoublePrefixing() {\n-        when(mockConfiguration.getEnvVarOrProperty(eq(PROPERTY_KEY), any())).thenReturn(\"someregistry.com/\");\n-\n-        final DockerImageName result = underTest.apply(DockerImageName.parse(\"someregistry.com/some/image:tag\"));\n-\n-        assertEquals(\n-            \"The prefix is not applied if already present\",\n-            \"someregistry.com/some/image:tag\",\n-            result.asCanonicalNameString()\n-        );\n-    }\n-\n-    @Test\n-    public void testHandlesNullValue() {\n-        when(mockConfiguration.getEnvVarOrProperty(eq(PROPERTY_KEY), any())).thenReturn(null);\n-\n-        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));\n-\n-        assertEquals(\n-            \"The prefix is not applied if the env var is not set\",\n-            \"some/image:tag\",\n-            result.asCanonicalNameString()\n-        );\n-    }\n-\n-    @Test\n-    public void testHandlesEmptyValue() {\n-        when(mockConfiguration.getEnvVarOrProperty(eq(PROPERTY_KEY), any())).thenReturn(\"\");\n-\n-        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));\n-\n-        assertEquals(\n-            \"The prefix is not applied if the env var is not set\",\n-            \"some/image:tag\",\n-            result.asCanonicalNameString()\n-        );\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTQyMA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514061420", "bodyText": "JFYI we also have MockTestcontainersConfigurationRule available :)", "author": "bsideup", "createdAt": "2020-10-29T07:50:20Z", "path": "core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.utility.ImageNameSubstitutor.LogWrappedImageNameSubstitutor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DefaultImageNameSubstitutorTest {\n+\n+    public static final DockerImageName ORIGINAL_IMAGE = DockerImageName.parse(\"foo\");\n+    public static final DockerImageName SUBSTITUTE_IMAGE = DockerImageName.parse(\"bar\");\n+    private ConfigurationFileImageNameSubstitutor underTest;\n+    private TestcontainersConfiguration mockConfiguration;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);", "originalCommit": "8cdb94f952392f003d10b29f98e173781bb97d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDkxOQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515174919", "bodyText": "Updated to use it!", "author": "rnorth", "createdAt": "2020-10-30T15:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "a7f72af07e89306dae2e80f67e9f71d949fbd50c", "chunk": "diff --git a/core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java b/core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java\nindex 4c099ab1..a6f7813c 100644\n--- a/core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java\n\n@@ -1,43 +1,38 @@\n package org.testcontainers.utility;\n \n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n-import org.testcontainers.utility.ImageNameSubstitutor.LogWrappedImageNameSubstitutor;\n+import org.mockito.Mockito;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n \n public class DefaultImageNameSubstitutorTest {\n \n     public static final DockerImageName ORIGINAL_IMAGE = DockerImageName.parse(\"foo\");\n     public static final DockerImageName SUBSTITUTE_IMAGE = DockerImageName.parse(\"bar\");\n     private ConfigurationFileImageNameSubstitutor underTest;\n-    private TestcontainersConfiguration mockConfiguration;\n+\n+    @Rule\n+    public MockTestcontainersConfigurationRule config = new MockTestcontainersConfigurationRule();\n \n     @Before\n     public void setUp() {\n-        mockConfiguration = mock(TestcontainersConfiguration.class);\n-        underTest = new ConfigurationFileImageNameSubstitutor(mockConfiguration);\n+        underTest = new ConfigurationFileImageNameSubstitutor(TestcontainersConfiguration.getInstance());\n     }\n \n     @Test\n     public void testConfigurationLookup() {\n-        when(mockConfiguration.getConfiguredSubstituteImage(eq(ORIGINAL_IMAGE))).thenReturn(SUBSTITUTE_IMAGE);\n+        Mockito\n+            .doReturn(SUBSTITUTE_IMAGE)\n+            .when(TestcontainersConfiguration.getInstance())\n+            .getConfiguredSubstituteImage(eq(ORIGINAL_IMAGE));\n \n         final DockerImageName substitute = underTest.apply(ORIGINAL_IMAGE);\n \n         assertEquals(\"match is found\", SUBSTITUTE_IMAGE, substitute);\n         assertTrue(\"compatibility is automatically set\", substitute.isCompatibleWith(ORIGINAL_IMAGE));\n     }\n-\n-    @Test\n-    public void testServiceLoaderFindsDefaultImplementation() {\n-        final ImageNameSubstitutor instance = ImageNameSubstitutor.instance();\n-\n-        assertTrue(instance instanceof LogWrappedImageNameSubstitutor);\n-        assertTrue(((LogWrappedImageNameSubstitutor) instance).wrappedInstance instanceof DefaultImageNameSubstitutor);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTczMw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514061733", "bodyText": "duplicate of ImageNameSubstitutorTest#simpleServiceLoadingTest?", "author": "bsideup", "createdAt": "2020-10-29T07:50:58Z", "path": "core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.utility.ImageNameSubstitutor.LogWrappedImageNameSubstitutor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DefaultImageNameSubstitutorTest {\n+\n+    public static final DockerImageName ORIGINAL_IMAGE = DockerImageName.parse(\"foo\");\n+    public static final DockerImageName SUBSTITUTE_IMAGE = DockerImageName.parse(\"bar\");\n+    private ConfigurationFileImageNameSubstitutor underTest;\n+    private TestcontainersConfiguration mockConfiguration;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new ConfigurationFileImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testConfigurationLookup() {\n+        when(mockConfiguration.getConfiguredSubstituteImage(eq(ORIGINAL_IMAGE))).thenReturn(SUBSTITUTE_IMAGE);\n+\n+        final DockerImageName substitute = underTest.apply(ORIGINAL_IMAGE);\n+\n+        assertEquals(\"match is found\", SUBSTITUTE_IMAGE, substitute);\n+        assertTrue(\"compatibility is automatically set\", substitute.isCompatibleWith(ORIGINAL_IMAGE));\n+    }\n+\n+    @Test\n+    public void testServiceLoaderFindsDefaultImplementation() {", "originalCommit": "8cdb94f952392f003d10b29f98e173781bb97d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDk2OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515174968", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-10-30T15:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTczMw=="}], "type": "inlineReview", "revised_code": {"commit": "a7f72af07e89306dae2e80f67e9f71d949fbd50c", "chunk": "diff --git a/core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java b/core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java\nindex 4c099ab1..a6f7813c 100644\n--- a/core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java\n+++ b/core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java\n\n@@ -1,43 +1,38 @@\n package org.testcontainers.utility;\n \n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n-import org.testcontainers.utility.ImageNameSubstitutor.LogWrappedImageNameSubstitutor;\n+import org.mockito.Mockito;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n \n public class DefaultImageNameSubstitutorTest {\n \n     public static final DockerImageName ORIGINAL_IMAGE = DockerImageName.parse(\"foo\");\n     public static final DockerImageName SUBSTITUTE_IMAGE = DockerImageName.parse(\"bar\");\n     private ConfigurationFileImageNameSubstitutor underTest;\n-    private TestcontainersConfiguration mockConfiguration;\n+\n+    @Rule\n+    public MockTestcontainersConfigurationRule config = new MockTestcontainersConfigurationRule();\n \n     @Before\n     public void setUp() {\n-        mockConfiguration = mock(TestcontainersConfiguration.class);\n-        underTest = new ConfigurationFileImageNameSubstitutor(mockConfiguration);\n+        underTest = new ConfigurationFileImageNameSubstitutor(TestcontainersConfiguration.getInstance());\n     }\n \n     @Test\n     public void testConfigurationLookup() {\n-        when(mockConfiguration.getConfiguredSubstituteImage(eq(ORIGINAL_IMAGE))).thenReturn(SUBSTITUTE_IMAGE);\n+        Mockito\n+            .doReturn(SUBSTITUTE_IMAGE)\n+            .when(TestcontainersConfiguration.getInstance())\n+            .getConfiguredSubstituteImage(eq(ORIGINAL_IMAGE));\n \n         final DockerImageName substitute = underTest.apply(ORIGINAL_IMAGE);\n \n         assertEquals(\"match is found\", SUBSTITUTE_IMAGE, substitute);\n         assertTrue(\"compatibility is automatically set\", substitute.isCompatibleWith(ORIGINAL_IMAGE));\n     }\n-\n-    @Test\n-    public void testServiceLoaderFindsDefaultImplementation() {\n-        final ImageNameSubstitutor instance = ImageNameSubstitutor.instance();\n-\n-        assertTrue(instance instanceof LogWrappedImageNameSubstitutor);\n-        assertTrue(((LogWrappedImageNameSubstitutor) instance).wrappedInstance instanceof DefaultImageNameSubstitutor);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MzgwMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514063802", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n          \n          \n            \n            public final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {", "author": "bsideup", "createdAt": "2020-10-29T07:55:31Z", "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {", "originalCommit": "8cdb94f952392f003d10b29f98e173781bb97d37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7f72af07e89306dae2e80f67e9f71d949fbd50c", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java b/core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java\nindex 39ad49bc..6253f478 100644\n--- a/core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java\n+++ b/core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java\n\n@@ -8,12 +8,16 @@ import org.testcontainers.UnstableAPI;\n  * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n  * The prefix may be set via an environment variable (<code>TESTCONTAINERS_IMAGE_NAME_PREFIX</code>) or an equivalent\n  * configuration file entry (see {@link TestcontainersConfiguration}).\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n+ * requires it to be so. Public visibility DOES NOT make it part of the public API.\n  */\n @UnstableAPI\n @NoArgsConstructor\n-public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n+public final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n \n-    @VisibleForTesting static final String PROPERTY_KEY = \"testcontainers.image.name.prefix\";\n+    @VisibleForTesting\n+    static final String PROPERTY_KEY = \"testcontainers.image.name.prefix\";\n \n     private TestcontainersConfiguration configuration = TestcontainersConfiguration.getInstance();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2NDQ1Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514064456", "bodyText": "Suggestion: let's add a warning that this class is public only because Java's ServiceLoader requires it to be public, similar to:\nhttps://github.com/reactor/reactor-core/blob/246251727bb5020c21abc1d34847d29afd8c7ec3/reactor-core/src/main/java/reactor/core/scheduler/ReactorBlockHoundIntegration.java#L27-L28", "author": "bsideup", "createdAt": "2020-10-29T07:57:03Z", "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {", "originalCommit": "8cdb94f952392f003d10b29f98e173781bb97d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NTE1NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515175155", "bodyText": "Removed from this PR", "author": "rnorth", "createdAt": "2020-10-30T15:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2NDQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a7f72af07e89306dae2e80f67e9f71d949fbd50c", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java b/core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java\nindex 39ad49bc..6253f478 100644\n--- a/core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java\n+++ b/core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java\n\n@@ -8,12 +8,16 @@ import org.testcontainers.UnstableAPI;\n  * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n  * The prefix may be set via an environment variable (<code>TESTCONTAINERS_IMAGE_NAME_PREFIX</code>) or an equivalent\n  * configuration file entry (see {@link TestcontainersConfiguration}).\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n+ * requires it to be so. Public visibility DOES NOT make it part of the public API.\n  */\n @UnstableAPI\n @NoArgsConstructor\n-public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n+public final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n \n-    @VisibleForTesting static final String PROPERTY_KEY = \"testcontainers.image.name.prefix\";\n+    @VisibleForTesting\n+    static final String PROPERTY_KEY = \"testcontainers.image.name.prefix\";\n \n     private TestcontainersConfiguration configuration = TestcontainersConfiguration.getInstance();\n \n"}}, {"oid": "a7f72af07e89306dae2e80f67e9f71d949fbd50c", "url": "https://github.com/testcontainers/testcontainers-java/commit/a7f72af07e89306dae2e80f67e9f71d949fbd50c", "message": "Image substitution\n\nBuilds upon #3021:\n\n* adds a pluggable image substitution mechanism using ServiceLoader, enabling users to perform custom substitution/auditing of images being used by their tests\n\n* provides a default implementation that behaves similarly to legacy `TestcontainersConfiguration` approach (`testcontainers.properties`), but also...\n\n* For many orgs, sticking a prefix on the front of image names might be enough to use a private registry. I've added a default behaviour whereby, if a particular environment variable is present, image names are automatically substituted. e.g. `TESTCONTAINERS_IMAGE_NAME_PREFIX=my.registry.com/` would transform `redis` to `my.registry.com/redis` etc.\n\nNotes:\n\n* behaviour is similar but not quite identical to `TestcontainersConfiguration`: use of a configured custom image for, e.g. Kafka/Pulsar that does not have a tag specified causes the substitution to take effect for all usages. It seems very unlikely that people would be using a mix of the config file image overrides in some places _and_ specific images specified in code in others.\n\n* Duplication of default image names in modules vs `TestcontainersConfiguration` class is intentional: specifying image overrides in `testcontainers.properties` should be removed in the future.\n\n* ~Add log deprecation warnings when `testcontainers.properties` image overrides are used.~ Defer to a future release?", "committedDate": "2020-10-29T10:50:41Z", "type": "forcePushed"}, {"oid": "a51f3a520a671dc66a4b98ebb93ee05613d0ea23", "url": "https://github.com/testcontainers/testcontainers-java/commit/a51f3a520a671dc66a4b98ebb93ee05613d0ea23", "message": "Updates following review comments", "committedDate": "2020-10-29T10:47:47Z", "type": "forcePushed"}, {"oid": "83df05af09a4b1536a744b0360652ff7c12e5396", "url": "https://github.com/testcontainers/testcontainers-java/commit/83df05af09a4b1536a744b0360652ff7c12e5396", "message": "Image substitution\n\nBuilds upon #3021:\n\n* adds a pluggable image substitution mechanism using ServiceLoader, enabling users to perform custom substitution/auditing of images being used by their tests\n\n* provides a default implementation that behaves similarly to legacy `TestcontainersConfiguration` approach (`testcontainers.properties`), but also...\n\n* For many orgs, sticking a prefix on the front of image names might be enough to use a private registry. I've added a default behaviour whereby, if a particular environment variable is present, image names are automatically substituted. e.g. `TESTCONTAINERS_IMAGE_NAME_PREFIX=my.registry.com/` would transform `redis` to `my.registry.com/redis` etc.\n\nNotes:\n\n* behaviour is similar but not quite identical to `TestcontainersConfiguration`: use of a configured custom image for, e.g. Kafka/Pulsar that does not have a tag specified causes the substitution to take effect for all usages. It seems very unlikely that people would be using a mix of the config file image overrides in some places _and_ specific images specified in code in others.\n\n* Duplication of default image names in modules vs `TestcontainersConfiguration` class is intentional: specifying image overrides in `testcontainers.properties` should be removed in the future.\n\n* ~Add log deprecation warnings when `testcontainers.properties` image overrides are used.~ Defer to a future release?", "committedDate": "2020-10-29T11:02:48Z", "type": "forcePushed"}, {"oid": "0f51dfa6206162baa610463ce5d56358b5812d60", "url": "https://github.com/testcontainers/testcontainers-java/commit/0f51dfa6206162baa610463ce5d56358b5812d60", "message": "Refactor Testcontainers configuration to allow config by env var", "committedDate": "2020-10-29T11:42:21Z", "type": "commit"}, {"oid": "950af34178f3a28a3747b0b446738e83c7b62bbf", "url": "https://github.com/testcontainers/testcontainers-java/commit/950af34178f3a28a3747b0b446738e83c7b62bbf", "message": "Add Image substitution mechanism\n\nBuilds upon #3021 and #3411:\n\n* adds a pluggable image substitution mechanism using ServiceLoader, enabling users to perform custom substitution/auditing of images being used by their tests\n\n* provides a default implementation that behaves similarly to legacy `TestcontainersConfiguration` approach (`testcontainers.properties`)\n\nNotes:\n\n* behaviour is similar but not quite identical to `TestcontainersConfiguration`: use of a configured custom image for, e.g. Kafka/Pulsar that does not have a tag specified causes the substitution to take effect for all usages. It seems very unlikely that people would be using a mix of the config file image overrides in some places _and_ specific images specified in code in others.\n\n* Duplication of default image names in modules vs `TestcontainersConfiguration` class is intentional: specifying image overrides in `testcontainers.properties` should be removed in the future.\n\n* ~Add log deprecation warnings when `testcontainers.properties` image overrides are used.~ Defer to a future release?", "committedDate": "2020-10-29T12:14:54Z", "type": "commit"}, {"oid": "950af34178f3a28a3747b0b446738e83c7b62bbf", "url": "https://github.com/testcontainers/testcontainers-java/commit/950af34178f3a28a3747b0b446738e83c7b62bbf", "message": "Add Image substitution mechanism\n\nBuilds upon #3021 and #3411:\n\n* adds a pluggable image substitution mechanism using ServiceLoader, enabling users to perform custom substitution/auditing of images being used by their tests\n\n* provides a default implementation that behaves similarly to legacy `TestcontainersConfiguration` approach (`testcontainers.properties`)\n\nNotes:\n\n* behaviour is similar but not quite identical to `TestcontainersConfiguration`: use of a configured custom image for, e.g. Kafka/Pulsar that does not have a tag specified causes the substitution to take effect for all usages. It seems very unlikely that people would be using a mix of the config file image overrides in some places _and_ specific images specified in code in others.\n\n* Duplication of default image names in modules vs `TestcontainersConfiguration` class is intentional: specifying image overrides in `testcontainers.properties` should be removed in the future.\n\n* ~Add log deprecation warnings when `testcontainers.properties` image overrides are used.~ Defer to a future release?", "committedDate": "2020-10-29T12:14:54Z", "type": "forcePushed"}, {"oid": "51c320ee285cf8010e777e48daed186b4ec6d6aa", "url": "https://github.com/testcontainers/testcontainers-java/commit/51c320ee285cf8010e777e48daed186b4ec6d6aa", "message": "Merge remote-tracking branch 'origin/master' into image-substitutor", "committedDate": "2020-10-29T13:17:10Z", "type": "commit"}, {"oid": "b02c734d12858a416a11f49a1cd978a350a54977", "url": "https://github.com/testcontainers/testcontainers-java/commit/b02c734d12858a416a11f49a1cd978a350a54977", "message": "Remove extraneous change", "committedDate": "2020-10-29T13:20:17Z", "type": "commit"}, {"oid": "192475997afd7868e3b2674066c4e4acd8c6aeb1", "url": "https://github.com/testcontainers/testcontainers-java/commit/192475997afd7868e3b2674066c4e4acd8c6aeb1", "message": "Un-ignore docs example test by implementing a 'reversing' image name substitutor", "committedDate": "2020-10-29T13:31:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2ODkyOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514268928", "bodyText": "do we need to delegate here? I thought that ConfigurationFileImageNameSubstitutor will be applied before (given its -2 priority) this one by the SPI mechanism in ImageNameSubstitutor", "author": "bsideup", "createdAt": "2020-10-29T13:44:51Z", "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Testcontainers' default implementation of {@link ImageNameSubstitutor}.\n+ * Delegates to {@link ConfigurationFileImageNameSubstitutor}.\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n+ * requires it to be so. Public visibility DOES NOT make it part of the public API.\n+ */\n+@Slf4j\n+public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final ConfigurationFileImageNameSubstitutor configurationFileImageNameSubstitutor;\n+\n+    public DefaultImageNameSubstitutor() {\n+        configurationFileImageNameSubstitutor = new ConfigurationFileImageNameSubstitutor();\n+    }\n+\n+    @VisibleForTesting\n+    DefaultImageNameSubstitutor(\n+        final ConfigurationFileImageNameSubstitutor configurationFileImageNameSubstitutor\n+    ) {\n+        this.configurationFileImageNameSubstitutor = configurationFileImageNameSubstitutor;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        return configurationFileImageNameSubstitutor.apply(original);", "originalCommit": "192475997afd7868e3b2674066c4e4acd8c6aeb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NTk2OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515175969", "bodyText": "As we've updated to not use service loader or priorities, this no longer applies \ud83d\ude04", "author": "rnorth", "createdAt": "2020-10-30T15:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2ODkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "f94089bb8689914e92cb208ecbdfc28bf2d31fc5", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java b/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\nindex 5657a905..75e0ae6e 100644\n--- a/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\n+++ b/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\n\n@@ -31,11 +31,6 @@ public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {\n         return configurationFileImageNameSubstitutor.apply(original);\n     }\n \n-    @Override\n-    protected int getPriority() {\n-        return 0;\n-    }\n-\n     @Override\n     protected String getDescription() {\n         return \"DefaultImageNameSubstitutor (delegates to '\" + configurationFileImageNameSubstitutor.getDescription() + \"')\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3MTMzMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514271332", "bodyText": "why not just return original? Given the priority of 1, I thought that TestSpecificImageNameSubstitutor will go after the default (0) one :)", "author": "bsideup", "createdAt": "2020-10-29T13:48:07Z", "path": "docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package generic.support;\n+\n+import org.testcontainers.utility.DefaultImageNameSubstitutor;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.ImageNameSubstitutor;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which makes it possible to use fake image names in\n+ * {@link generic.ImageNameSubstitutionTest}. This implementation simply reverses a fake image name when presented, and\n+ * is hardcoded to act upon the specific fake name in that test.\n+ */\n+public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final DefaultImageNameSubstitutor defaultImageNameSubstitutor = new DefaultImageNameSubstitutor();\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        if (original.equals(DockerImageName.parse(\"registry.mycompany.com/mirror/mysql:8.0.22\"))) {\n+            return defaultImageNameSubstitutor.apply(DockerImageName.parse(\"mysql\"));\n+        } else {\n+            return defaultImageNameSubstitutor.apply(original);", "originalCommit": "192475997afd7868e3b2674066c4e4acd8c6aeb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NjAxMA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515176010", "bodyText": "As we've updated to not use service loader or priorities, this no longer applies \ud83d\ude04", "author": "rnorth", "createdAt": "2020-10-30T15:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3MTMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "f94089bb8689914e92cb208ecbdfc28bf2d31fc5", "chunk": "diff --git a/docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java b/docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java\nindex aa5e6b30..2f83cf20 100644\n--- a/docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java\n+++ b/docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java\n\n@@ -22,11 +22,6 @@ public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {\n         }\n     }\n \n-    @Override\n-    protected int getPriority() {\n-        return 1;\n-    }\n-\n     @Override\n     protected String getDescription() {\n         return TestSpecificImageNameSubstitutor.class.getSimpleName();\n"}}, {"oid": "f94089bb8689914e92cb208ecbdfc28bf2d31fc5", "url": "https://github.com/testcontainers/testcontainers-java/commit/f94089bb8689914e92cb208ecbdfc28bf2d31fc5", "message": "Use configuration, not service loader, to select an ImageNameSubstitutor", "committedDate": "2020-10-29T20:37:51Z", "type": "commit"}, {"oid": "3d0866949abfe9738fab6bef06342c664398d111", "url": "https://github.com/testcontainers/testcontainers-java/commit/3d0866949abfe9738fab6bef06342c664398d111", "message": "Add check for order of config setting precedence", "committedDate": "2020-10-29T20:51:26Z", "type": "commit"}, {"oid": "f8dabd4b940ca692a97cd9142c57ae9cbe79ea4b", "url": "https://github.com/testcontainers/testcontainers-java/commit/f8dabd4b940ca692a97cd9142c57ae9cbe79ea4b", "message": "Extract classpath scanner and support finding of multiple resources", "committedDate": "2020-10-29T21:28:00Z", "type": "commit"}, {"oid": "23ac3941d886e0b9a47e8df43314b2d2fa506ee0", "url": "https://github.com/testcontainers/testcontainers-java/commit/23ac3941d886e0b9a47e8df43314b2d2fa506ee0", "message": "Introduce deterministic merging of classpath properties files", "committedDate": "2020-10-30T14:03:36Z", "type": "commit"}, {"oid": "09e4e7caeb2c4b8ca1fc1de9e9b909ab02ef72c3", "url": "https://github.com/testcontainers/testcontainers-java/commit/09e4e7caeb2c4b8ca1fc1de9e9b909ab02ef72c3", "message": "Update docs", "committedDate": "2020-10-30T14:03:53Z", "type": "commit"}, {"oid": "d1974059f102ce333b990d1d12ab60396d9f379b", "url": "https://github.com/testcontainers/testcontainers-java/commit/d1974059f102ce333b990d1d12ab60396d9f379b", "message": "Update docs", "committedDate": "2020-10-30T14:05:08Z", "type": "commit"}, {"oid": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7", "url": "https://github.com/testcontainers/testcontainers-java/commit/3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7", "message": "Remove service loader reference", "committedDate": "2020-10-30T15:20:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMzk2Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515533966", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {\n          \n          \n            \n            public final class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {", "author": "bsideup", "createdAt": "2020-10-31T20:04:48Z", "path": "core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * {@link ImageNameSubstitutor} which takes replacement image names from configuration.\n+ * See {@link TestcontainersConfiguration} for the subset of image names which can be substituted using this mechanism.\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n+ * requires it to be so. Public visibility DOES NOT make it part of the public API.\n+ */\n+@Slf4j\n+public class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {", "originalCommit": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bcd2f7664c4722256da057cb43e52e8784ceb1cd", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java b/core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java\nindex 29314668..530d5a76 100644\n--- a/core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java\n+++ b/core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java\n\n@@ -6,12 +6,9 @@ import lombok.extern.slf4j.Slf4j;\n /**\n  * {@link ImageNameSubstitutor} which takes replacement image names from configuration.\n  * See {@link TestcontainersConfiguration} for the subset of image names which can be substituted using this mechanism.\n- * <p>\n- * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n- * requires it to be so. Public visibility DOES NOT make it part of the public API.\n  */\n @Slf4j\n-public class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {\n+final class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {\n \n     private final TestcontainersConfiguration configuration;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDA3Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534073", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {\n          \n          \n            \n            public final class DefaultImageNameSubstitutor extends ImageNameSubstitutor {", "author": "bsideup", "createdAt": "2020-10-31T20:05:51Z", "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Testcontainers' default implementation of {@link ImageNameSubstitutor}.\n+ * Delegates to {@link ConfigurationFileImageNameSubstitutor}.\n+ */\n+@Slf4j\n+public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {", "originalCommit": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9651adedac0933ce5ed94cccfaab6f7e40cc19b7", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java b/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\nindex 9a0e3dab..f928b920 100644\n--- a/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\n+++ b/core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java\n\n@@ -30,6 +30,6 @@ public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {\n \n     @Override\n     protected String getDescription() {\n-        return \"DefaultImageNameSubstitutor (delegates to '\" + configurationFileImageNameSubstitutor.getDescription() + \"')\";\n+        return \"DefaultImageNameSubstitutor (\" + configurationFileImageNameSubstitutor.getDescription() + \")\";\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDExNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534116", "bodyText": "outdated comment\nbtw, since we delegate to it, perhaps we can make it package private?", "author": "bsideup", "createdAt": "2020-10-31T20:06:21Z", "path": "core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * {@link ImageNameSubstitutor} which takes replacement image names from configuration.\n+ * See {@link TestcontainersConfiguration} for the subset of image names which can be substituted using this mechanism.\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}", "originalCommit": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bcd2f7664c4722256da057cb43e52e8784ceb1cd", "chunk": "diff --git a/core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java b/core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java\nindex 29314668..530d5a76 100644\n--- a/core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java\n+++ b/core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java\n\n@@ -6,12 +6,9 @@ import lombok.extern.slf4j.Slf4j;\n /**\n  * {@link ImageNameSubstitutor} which takes replacement image names from configuration.\n  * See {@link TestcontainersConfiguration} for the subset of image names which can be substituted using this mechanism.\n- * <p>\n- * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n- * requires it to be so. Public visibility DOES NOT make it part of the public API.\n  */\n @Slf4j\n-public class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {\n+final class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {\n \n     private final TestcontainersConfiguration configuration;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDQyNQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534425", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return null;\n          \n          \n            \n                    return original;", "author": "bsideup", "createdAt": "2020-10-31T20:09:56Z", "path": "core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.testcontainers.utility;\n+\n+public class FakeImageSubstitutor extends ImageNameSubstitutor {\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        return null;", "originalCommit": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9651adedac0933ce5ed94cccfaab6f7e40cc19b7", "chunk": "diff --git a/core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java b/core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java\nindex 076bd540..f74a6c94 100644\n--- a/core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java\n+++ b/core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java\n\n@@ -3,11 +3,11 @@ package org.testcontainers.utility;\n public class FakeImageSubstitutor extends ImageNameSubstitutor {\n     @Override\n     public DockerImageName apply(final DockerImageName original) {\n-        return null;\n+        return DockerImageName.parse(\"transformed-\" + original.asCanonicalNameString());\n     }\n \n     @Override\n     protected String getDescription() {\n-        return null;\n+        return \"test implementation\";\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDQ1Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return null;\n          \n          \n            \n                    return \"FakeImageSubstitutor\";", "author": "bsideup", "createdAt": "2020-10-31T20:10:06Z", "path": "core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.testcontainers.utility;\n+\n+public class FakeImageSubstitutor extends ImageNameSubstitutor {\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        return null;\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return null;", "originalCommit": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9651adedac0933ce5ed94cccfaab6f7e40cc19b7", "chunk": "diff --git a/core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java b/core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java\nindex 076bd540..f74a6c94 100644\n--- a/core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java\n+++ b/core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java\n\n@@ -3,11 +3,11 @@ package org.testcontainers.utility;\n public class FakeImageSubstitutor extends ImageNameSubstitutor {\n     @Override\n     public DockerImageName apply(final DockerImageName original) {\n-        return null;\n+        return DockerImageName.parse(\"transformed-\" + original.asCanonicalNameString());\n     }\n \n     @Override\n     protected String getDescription() {\n-        return null;\n+        return \"test implementation\";\n     }\n }\n"}}, {"oid": "9651adedac0933ce5ed94cccfaab6f7e40cc19b7", "url": "https://github.com/testcontainers/testcontainers-java/commit/9651adedac0933ce5ed94cccfaab6f7e40cc19b7", "message": "Chain substitution through default and configured implementations", "committedDate": "2020-11-01T12:50:42Z", "type": "commit"}, {"oid": "bcd2f7664c4722256da057cb43e52e8784ceb1cd", "url": "https://github.com/testcontainers/testcontainers-java/commit/bcd2f7664c4722256da057cb43e52e8784ceb1cd", "message": "Small tweaks following review", "committedDate": "2020-11-04T09:12:03Z", "type": "commit"}, {"oid": "008b0365f17d87594abb4ab4e140011204dfa4af", "url": "https://github.com/testcontainers/testcontainers-java/commit/008b0365f17d87594abb4ab4e140011204dfa4af", "message": "Fix test compile error", "committedDate": "2020-11-04T10:34:15Z", "type": "commit"}, {"oid": "6587210a35416d59cc33dda1e6be70f3bdbf239e", "url": "https://github.com/testcontainers/testcontainers-java/commit/6587210a35416d59cc33dda1e6be70f3bdbf239e", "message": "Add UnstableAPI annotation", "committedDate": "2020-11-05T09:47:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTU4NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r517995584", "bodyText": "is it still needed, with the latest change where we always apply the default?\nIt is a nit but, since we refer to it from the docs, serves as an important example :)", "author": "bsideup", "createdAt": "2020-11-05T11:55:20Z", "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/utility/TestSpecificImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.testcontainers.utility;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which makes it possible to use fake image names in\n+ * {@link generic.ImageNameSubstitutionTest}. This implementation simply reverses a fake image name when presented, and\n+ * is hardcoded to act upon the specific fake name in that test.\n+ */\n+public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final DefaultImageNameSubstitutor defaultImageNameSubstitutor = new DefaultImageNameSubstitutor();\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        if (original.equals(DockerImageName.parse(\"registry.mycompany.com/mirror/mysql:8.0.22\"))) {\n+            return defaultImageNameSubstitutor.apply(DockerImageName.parse(\"mysql\"));\n+        } else {\n+            return defaultImageNameSubstitutor.apply(original);", "originalCommit": "6587210a35416d59cc33dda1e6be70f3bdbf239e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5Nzk2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r517997967", "bodyText": "I just realized... DefaultImageNameSubstitutor is internal, so we definitely should avoid using it in this example :) I would even move it to some other package to ensure that everyone can write a custom substitutor", "author": "bsideup", "createdAt": "2020-11-05T11:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODgzMA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r517998830", "bodyText": "Argh, good point. Removed, which also means that I can move this class back out of the org.testcontainers.utility package because there's no longer a dependency on the default substitutor.", "author": "rnorth", "createdAt": "2020-11-05T12:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "16ef03d2da8a67362497544d2ab4a9efa93174d7", "chunk": "diff --git a/docs/examples/junit4/generic/src/test/java/org/testcontainers/utility/TestSpecificImageNameSubstitutor.java b/docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java\nsimilarity index 70%\nrename from docs/examples/junit4/generic/src/test/java/org/testcontainers/utility/TestSpecificImageNameSubstitutor.java\nrename to docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java\nindex ff9508bb..5f9e92c0 100644\n--- a/docs/examples/junit4/generic/src/test/java/org/testcontainers/utility/TestSpecificImageNameSubstitutor.java\n+++ b/docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java\n\n@@ -1,4 +1,7 @@\n-package org.testcontainers.utility;\n+package generic.support;\n+\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.ImageNameSubstitutor;\n \n /**\n  * An {@link ImageNameSubstitutor} which makes it possible to use fake image names in\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzQ4Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r517997486", "bodyText": "WDYT about using ConfigurationFileImageNameSubstitutor directly, since we no longer expose DefaultImageNameSubstitutor to public?", "author": "bsideup", "createdAt": "2020-11-05T11:58:36Z", "path": "core/src/main/java/org/testcontainers/utility/ImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * An image name substitutor converts a Docker image name, as may be specified in code, to an alternative name.\n+ * This is intended to provide a way to override image names, for example to enforce pulling of images from a private\n+ * registry.\n+ * <p>\n+ * This is marked as @{@link UnstableAPI} as this API is new. While we do not think major changes will be required, we\n+ * will react to feedback if necessary.\n+ */\n+@Slf4j\n+@UnstableAPI\n+public abstract class ImageNameSubstitutor implements Function<DockerImageName, DockerImageName> {\n+\n+    @VisibleForTesting\n+    static ImageNameSubstitutor instance;\n+\n+    @VisibleForTesting\n+    static ImageNameSubstitutor defaultImplementation = new DefaultImageNameSubstitutor();", "originalCommit": "6587210a35416d59cc33dda1e6be70f3bdbf239e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwMTE1NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r518001155", "bodyText": "Ah, there's a reason for this: DefaultImageNameSubstitutor will be the place where we hook in the 'prefixing' image name substitutor in 1.15.1.\nRight now the default substitutor is pretty useless, but I'd prefer not to remove it given that I think we'll have to re-add it very soon.", "author": "rnorth", "createdAt": "2020-11-05T12:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxODc2OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r518018768", "bodyText": "ah, okay \ud83d\udc4d", "author": "bsideup", "createdAt": "2020-11-05T12:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzQ4Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "16ef03d2da8a67362497544d2ab4a9efa93174d7", "url": "https://github.com/testcontainers/testcontainers-java/commit/16ef03d2da8a67362497544d2ab4a9efa93174d7", "message": "Move TestSpecificImageNameSubstitutor back to original package and remove duplicate use of default substitutor", "committedDate": "2020-11-05T12:07:41Z", "type": "commit"}, {"oid": "38f2695cadeeeb88e6fd1bcd334b51d6c2a7681f", "url": "https://github.com/testcontainers/testcontainers-java/commit/38f2695cadeeeb88e6fd1bcd334b51d6c2a7681f", "message": "Merge branch 'master' into image-substitutor", "committedDate": "2020-11-05T15:26:40Z", "type": "commit"}]}