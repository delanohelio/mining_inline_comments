{"pr_number": 2245, "pr_title": "Prevent duplicate attempts to start Ryuk container", "pr_createdAt": "2020-01-13T10:02:12Z", "pr_url": "https://github.com/testcontainers/testcontainers-java/pull/2245", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMTA5Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r365721093", "bodyText": "Using VisibleAssertions for the logging in checks seems like major overkill, so I've changed it to use simple log statements.", "author": "rnorth", "createdAt": "2020-01-13T10:04:04Z", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -17,9 +17,6 @@\n import lombok.SneakyThrows;\n import lombok.Synchronized;\n import lombok.extern.slf4j.Slf4j;\n-import org.hamcrest.BaseMatcher;\n-import org.hamcrest.Description;\n-import org.rnorth.visibleassertions.VisibleAssertions;", "originalCommit": "d23519dcefaf1841f5873f925fe7dea92804d3ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMTkzOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r365721938", "bodyText": "It seems like a bug that currently checks can fail one time and then even try to run the checks again. We shouldn't; we should be forcing a failure so that the check failure gets investigated (rather than just the first test failing).", "author": "rnorth", "createdAt": "2020-01-13T10:06:04Z", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;\n+            }", "originalCommit": "d23519dcefaf1841f5873f925fe7dea92804d3ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63392d9921603444266cb349dfe4edded2134c20", "chunk": "diff --git a/core/src/main/java/org/testcontainers/DockerClientFactory.java b/core/src/main/java/org/testcontainers/DockerClientFactory.java\nindex c3d319d0..1ad81699 100644\n--- a/core/src/main/java/org/testcontainers/DockerClientFactory.java\n+++ b/core/src/main/java/org/testcontainers/DockerClientFactory.java\n\n@@ -141,16 +139,24 @@ public class DockerClientFactory {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n+        final String ryukContainerId;\n+\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk && ryukContainerId == null) {\n+        if (useRyuk) {\n+            log.debug(\"Ryuk is enabled\");\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n+        } else {\n+            log.debug(\"Ryuk is disabled\");\n+            ryukContainerId = null;\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n+            log.debug(\"Checks are enabled\");\n             // fail-fast if checks have failed previously\n             if (cachedChecksFailure != null) {\n+                log.debug(\"There is a cached checks failure - throwing\", cachedChecksFailure);\n                 throw cachedChecksFailure;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r365740644", "bodyText": "WDYT about catching any Exception, not just RuntimeException?", "author": "bsideup", "createdAt": "2020-01-13T10:49:13Z", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;\n+            }\n+\n+            try {\n+                log.info(\"Checking the system...\");\n+                checkDockerVersion(version.getVersion());\n+                if (ryukContainerId != null) {\n+                    checkDiskSpace(client, ryukContainerId);\n+                } else {\n+                    runInsideDocker(\n+                        client,\n+                        createContainerCmd -> {\n+                            createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n+                            createContainerCmd.getHostConfig().withAutoRemove(true);\n+                            createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n+                        },\n+                        (__, containerId) -> {\n+                            checkDiskSpace(client, containerId);\n+                            return \"\";\n+                        }\n+                    );\n+                }\n+            } catch (RuntimeException e) {", "originalCommit": "d23519dcefaf1841f5873f925fe7dea92804d3ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNDEyNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r366004127", "bodyText": "Well, unless there's a naughty @SneakyThrows somewhere, it doesn't look like any checked exceptions are thrown. Also, if we catch an Exception we're in a situation where the client() method would have to be able to thow Exception. We could wrap a cached Exception inside a RuntimeException. But this feels a bit excessive.", "author": "rnorth", "createdAt": "2020-01-13T20:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyMTIwMQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r366021201", "bodyText": "I am just cautious about the future changes where we may introduce a checked exception that is thrown but not stored to be re-thrown later", "author": "bsideup", "createdAt": "2020-01-13T20:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyMTM1OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r366021359", "bodyText": "@SneakyThrows is another good point, yes", "author": "bsideup", "createdAt": "2020-01-13T20:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxOTA5OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r368219099", "bodyText": "Perhaps the good news is that a newly thrown checked exception would force us to catch it (client doesn't declare throws) - unless we use @SneakyThrows a lot more, which I think we should try and avoid. \ud83d\ude00", "author": "rnorth", "createdAt": "2020-01-18T10:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "63392d9921603444266cb349dfe4edded2134c20", "chunk": "diff --git a/core/src/main/java/org/testcontainers/DockerClientFactory.java b/core/src/main/java/org/testcontainers/DockerClientFactory.java\nindex c3d319d0..1ad81699 100644\n--- a/core/src/main/java/org/testcontainers/DockerClientFactory.java\n+++ b/core/src/main/java/org/testcontainers/DockerClientFactory.java\n\n@@ -141,16 +139,24 @@ public class DockerClientFactory {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n+        final String ryukContainerId;\n+\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk && ryukContainerId == null) {\n+        if (useRyuk) {\n+            log.debug(\"Ryuk is enabled\");\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n+        } else {\n+            log.debug(\"Ryuk is disabled\");\n+            ryukContainerId = null;\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n+            log.debug(\"Checks are enabled\");\n             // fail-fast if checks have failed previously\n             if (cachedChecksFailure != null) {\n+                log.debug(\"There is a cached checks failure - throwing\", cachedChecksFailure);\n                 throw cachedChecksFailure;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MTEwMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r365741102", "bodyText": "if we throw it before attempting to start Ryuk, we won't need to store ryukContainerId in a field I suppose", "author": "bsideup", "createdAt": "2020-01-13T10:50:13Z", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;", "originalCommit": "d23519dcefaf1841f5873f925fe7dea92804d3ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNDIwMQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r366004201", "bodyText": "Good point, refactoring with that in mind.", "author": "rnorth", "createdAt": "2020-01-13T20:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MTEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "63392d9921603444266cb349dfe4edded2134c20", "chunk": "diff --git a/core/src/main/java/org/testcontainers/DockerClientFactory.java b/core/src/main/java/org/testcontainers/DockerClientFactory.java\nindex c3d319d0..1ad81699 100644\n--- a/core/src/main/java/org/testcontainers/DockerClientFactory.java\n+++ b/core/src/main/java/org/testcontainers/DockerClientFactory.java\n\n@@ -141,16 +139,24 @@ public class DockerClientFactory {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n+        final String ryukContainerId;\n+\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk && ryukContainerId == null) {\n+        if (useRyuk) {\n+            log.debug(\"Ryuk is enabled\");\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n+        } else {\n+            log.debug(\"Ryuk is disabled\");\n+            ryukContainerId = null;\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n+            log.debug(\"Checks are enabled\");\n             // fail-fast if checks have failed previously\n             if (cachedChecksFailure != null) {\n+                log.debug(\"There is a cached checks failure - throwing\", cachedChecksFailure);\n                 throw cachedChecksFailure;\n             }\n \n"}}, {"oid": "2fb77466cb918ea8fc6337bd69f9dc021d7c3058", "url": "https://github.com/testcontainers/testcontainers-java/commit/2fb77466cb918ea8fc6337bd69f9dc021d7c3058", "message": "Prevent duplicate attempts to start Ryuk container\nIf for example, checks fail once but the Docker client is otherwise initialized, an error would occur due to an attempt to start a Ryuk container twice with the same name.\nThis changed is aimed at avoiding that situation.\n\nAdditionally, if checks fail once they should fail on every subsequent attempt to start a client. Therefore, we cache the failure and rethrow it.", "committedDate": "2020-01-13T20:14:33Z", "type": "commit"}, {"oid": "63392d9921603444266cb349dfe4edded2134c20", "url": "https://github.com/testcontainers/testcontainers-java/commit/63392d9921603444266cb349dfe4edded2134c20", "message": "Update following review", "committedDate": "2020-01-13T20:14:35Z", "type": "commit"}, {"oid": "63392d9921603444266cb349dfe4edded2134c20", "url": "https://github.com/testcontainers/testcontainers-java/commit/63392d9921603444266cb349dfe4edded2134c20", "message": "Update following review", "committedDate": "2020-01-13T20:14:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0OTAwNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r368249007", "bodyText": "it seems that we're throwing too late. We should do it before attempting to start Ryuk, otherwise the method will fail due to Ryuk name conflict and not the cached failure", "author": "bsideup", "createdAt": "2020-01-18T21:16:28Z", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,51 +139,61 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n+        final String ryukContainerId;\n+\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n         if (useRyuk) {\n+            log.debug(\"Ryuk is enabled\");\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n+        } else {\n+            log.debug(\"Ryuk is disabled\");\n+            ryukContainerId = null;\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            log.debug(\"Checks are enabled\");\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                log.debug(\"There is a cached checks failure - throwing\", cachedChecksFailure);\n+                throw cachedChecksFailure;", "originalCommit": "63392d9921603444266cb349dfe4edded2134c20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60dccf67fdcaf9df381ccfd1c65a23bf258f7b54", "chunk": "diff --git a/core/src/main/java/org/testcontainers/DockerClientFactory.java b/core/src/main/java/org/testcontainers/DockerClientFactory.java\nindex 1ad81699..2edcdf38 100644\n--- a/core/src/main/java/org/testcontainers/DockerClientFactory.java\n+++ b/core/src/main/java/org/testcontainers/DockerClientFactory.java\n\n@@ -154,11 +162,6 @@ public class DockerClientFactory {\n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n             log.debug(\"Checks are enabled\");\n-            // fail-fast if checks have failed previously\n-            if (cachedChecksFailure != null) {\n-                log.debug(\"There is a cached checks failure - throwing\", cachedChecksFailure);\n-                throw cachedChecksFailure;\n-            }\n \n             try {\n                 log.info(\"Checking the system...\");\n"}}, {"oid": "60dccf67fdcaf9df381ccfd1c65a23bf258f7b54", "url": "https://github.com/testcontainers/testcontainers-java/commit/60dccf67fdcaf9df381ccfd1c65a23bf258f7b54", "message": "Fail fast, add a test", "committedDate": "2020-01-19T11:29:57Z", "type": "commit"}, {"oid": "cc6dd2c6424deca8edab3d2c52466d5438167beb", "url": "https://github.com/testcontainers/testcontainers-java/commit/cc6dd2c6424deca8edab3d2c52466d5438167beb", "message": "make sure that Ryuk is started", "committedDate": "2020-01-19T11:59:31Z", "type": "commit"}, {"oid": "52f901fec5bb1564556f01502b3f292e9f25e53c", "url": "https://github.com/testcontainers/testcontainers-java/commit/52f901fec5bb1564556f01502b3f292e9f25e53c", "message": "expect more generic `DockerException` since in some environments it is `BadRequestException`", "committedDate": "2020-01-19T12:23:41Z", "type": "commit"}]}