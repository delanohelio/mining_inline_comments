{"pr_number": 621, "pr_title": "Add names next to scores in FFA in /match and sort by score.", "pr_createdAt": "2020-08-19T20:07:18Z", "pr_url": "https://github.com/PGMDev/PGM/pull/621", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NjQ1Nw==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473376457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TextComponent getStatusMessage() {\n          \n          \n            \n                TextComponent message = this.getScoreMessage();\n          \n          \n            \n              public Component getStatusMessage() {\n          \n          \n            \n                Component message = this.getScoreMessage();", "author": "KingOfSquares", "createdAt": "2020-08-19T22:13:23Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      (TextComponent)\n+                          x.getKey()\n+                              .getName(NameStyle.VERBOSE)\n+                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n+                              .append(\n+                                  TextComponent.of(\n+                                      x.getKey().getColor().toString()\n+                                          + ((int) (double) x.getValue())))));\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(ChatColor.DARK_AQUA + \"Score: \")\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public TextComponent getStatusMessage() {\n+    TextComponent message = this.getScoreMessage();", "originalCommit": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex e5d93420..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -86,45 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public TextComponent getScoreMessage() {\n-    List<TextComponent> scoreMessages = Lists.newArrayList();\n-    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n-                      (TextComponent)\n-                          x.getKey()\n-                              .getName(NameStyle.VERBOSE)\n-                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n-                              .append(\n-                                  TextComponent.of(\n-                                      x.getKey().getColor().toString()\n-                                          + ((int) (double) x.getValue())))));\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(ChatColor.DARK_AQUA + \"Score: \")\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public TextComponent getStatusMessage() {\n-    TextComponent message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NzAxNA==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473377014", "bodyText": "(int) x.getValue().doubleValue()\nsame for the scorePair.getValue call", "author": "KingOfSquares", "createdAt": "2020-08-19T22:14:09Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      (TextComponent)\n+                          x.getKey()\n+                              .getName(NameStyle.VERBOSE)\n+                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n+                              .append(\n+                                  TextComponent.of(\n+                                      x.getKey().getColor().toString()\n+                                          + ((int) (double) x.getValue())))));", "originalCommit": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex e5d93420..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -86,45 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public TextComponent getScoreMessage() {\n-    List<TextComponent> scoreMessages = Lists.newArrayList();\n-    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n-                      (TextComponent)\n-                          x.getKey()\n-                              .getName(NameStyle.VERBOSE)\n-                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n-                              .append(\n-                                  TextComponent.of(\n-                                      x.getKey().getColor().toString()\n-                                          + ((int) (double) x.getValue())))));\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(ChatColor.DARK_AQUA + \"Score: \")\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public TextComponent getStatusMessage() {\n-    TextComponent message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4MDE5OA==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473380198", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TextComponent getScoreMessage() {\n          \n          \n            \n                List<TextComponent> scoreMessages = Lists.newArrayList();\n          \n          \n            \n                FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n          \n          \n            \n              public Component getScoreMessage() {\n          \n          \n            \n                final List<Component> scoreMessages = Lists.newArrayList();\n          \n          \n            \n                final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);", "author": "KingOfSquares", "createdAt": "2020-08-19T22:18:12Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);", "originalCommit": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex e5d93420..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -86,45 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public TextComponent getScoreMessage() {\n-    List<TextComponent> scoreMessages = Lists.newArrayList();\n-    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n-                      (TextComponent)\n-                          x.getKey()\n-                              .getName(NameStyle.VERBOSE)\n-                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n-                              .append(\n-                                  TextComponent.of(\n-                                      x.getKey().getColor().toString()\n-                                          + ((int) (double) x.getValue())))));\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(ChatColor.DARK_AQUA + \"Score: \")\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public TextComponent getStatusMessage() {\n-    TextComponent message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4MzAyMg==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473383022", "bodyText": "Remove this wildcard import", "author": "KingOfSquares", "createdAt": "2020-08-19T22:21:40Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -2,14 +2,10 @@\n \n import static com.google.common.base.Preconditions.checkState;\n \n-import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n import java.time.Instant;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;", "originalCommit": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex e5d93420..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -4,18 +4,25 @@ import static com.google.common.base.Preconditions.checkState;\n \n import com.google.common.collect.Lists;\n import java.time.Instant;\n-import java.util.*;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n import net.kyori.text.TextComponent;\n import net.kyori.text.TranslatableComponent;\n import net.kyori.text.format.TextColor;\n-import org.bukkit.ChatColor;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.EventPriority;\n import org.bukkit.event.Listener;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.inventory.PlayerInventory;\n import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n import tc.oc.pgm.api.event.CoarsePlayerMoveEvent;\n import tc.oc.pgm.api.event.PlayerItemTransferEvent;\n import tc.oc.pgm.api.match.Match;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODI3MA==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474508270", "bodyText": "use a .limit(10) on the stream instead", "author": "Pablete1234", "createdAt": "2020-08-21T08:15:17Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }", "originalCommit": "b08151ae505f0ef4cfed606979a76e47759ba8dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex 0273bf63..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -90,48 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public Component getScoreMessage() {\n-    final List<Component> scoreMessages = Lists.newArrayList();\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n     final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n                       TextComponent.builder()\n                           .append(x.getKey().getName(NameStyle.VERBOSE))\n-                          .append(\n-                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n                           .append(TextComponent.of((int) x.getValue().doubleValue()))\n                           .color(TextColor.WHITE)\n-                          .build()));\n-      while (scoreMessages.size() > 10) {\n-        scoreMessages.remove(scoreMessages.size() - 1);\n-      }\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString()\n-                    + ((int) scorePair.getValue().doubleValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(\"Score: \")\n-        .color(TextColor.DARK_AQUA)\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public Component getStatusMessage() {\n-    Component message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMDEzNg==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474510136", "bodyText": "Use a proper reducer instead of forEachOrdered", "author": "Pablete1234", "createdAt": "2020-08-21T08:17:22Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));", "originalCommit": "b08151ae505f0ef4cfed606979a76e47759ba8dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex 0273bf63..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -90,48 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public Component getScoreMessage() {\n-    final List<Component> scoreMessages = Lists.newArrayList();\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n     final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n                       TextComponent.builder()\n                           .append(x.getKey().getName(NameStyle.VERBOSE))\n-                          .append(\n-                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n                           .append(TextComponent.of((int) x.getValue().doubleValue()))\n                           .color(TextColor.WHITE)\n-                          .build()));\n-      while (scoreMessages.size() > 10) {\n-        scoreMessages.remove(scoreMessages.size() - 1);\n-      }\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString()\n-                    + ((int) scorePair.getValue().doubleValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(\"Score: \")\n-        .color(TextColor.DARK_AQUA)\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public Component getStatusMessage() {\n-    Component message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMDg5OQ==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474510899", "bodyText": "Don't use chat colors as strings, use them on the components instead", "author": "Pablete1234", "createdAt": "2020-08-21T08:18:19Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()\n+                    + ((int) scorePair.getValue().doubleValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(\"Score: \")\n+        .color(TextColor.DARK_AQUA)\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public Component getStatusMessage() {\n+    Component message = this.getScoreMessage();\n     if (this.config.scoreLimit > 0) {\n       message\n-          .append(\"  \")\n-          .append(ChatColor.GRAY)\n-          .append(\"[\")\n-          .append(this.config.scoreLimit)\n-          .append(\"]\");\n+          .append(TextComponent.of(\"  \"))\n+          .append(TextComponent.of(TextColor.GRAY + \"[\"))", "originalCommit": "b08151ae505f0ef4cfed606979a76e47759ba8dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex 0273bf63..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -90,48 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public Component getScoreMessage() {\n-    final List<Component> scoreMessages = Lists.newArrayList();\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n     final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n                       TextComponent.builder()\n                           .append(x.getKey().getName(NameStyle.VERBOSE))\n-                          .append(\n-                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n                           .append(TextComponent.of((int) x.getValue().doubleValue()))\n                           .color(TextColor.WHITE)\n-                          .build()));\n-      while (scoreMessages.size() > 10) {\n-        scoreMessages.remove(scoreMessages.size() - 1);\n-      }\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString()\n-                    + ((int) scorePair.getValue().doubleValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(\"Score: \")\n-        .color(TextColor.DARK_AQUA)\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public Component getStatusMessage() {\n-    Component message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NzkzMg==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474887932", "bodyText": "When working with TextComponent.of you can use the color in the primary constructor.\nWhat I mean is instead of\nTextComponent.of(\"Text\").color(TextColor.WHITE);\nyou do\nTextComponent.of(\"Text\", TextColor.WHITE);\nAlso, on line 105, why are you using a builder instead of just a simple TextComponent.of()?", "author": "KingOfSquares", "createdAt": "2020-08-21T19:22:47Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));", "originalCommit": "b08151ae505f0ef4cfed606979a76e47759ba8dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex 0273bf63..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -90,48 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public Component getScoreMessage() {\n-    final List<Component> scoreMessages = Lists.newArrayList();\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n     final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n                       TextComponent.builder()\n                           .append(x.getKey().getName(NameStyle.VERBOSE))\n-                          .append(\n-                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n                           .append(TextComponent.of((int) x.getValue().doubleValue()))\n                           .color(TextColor.WHITE)\n-                          .build()));\n-      while (scoreMessages.size() > 10) {\n-        scoreMessages.remove(scoreMessages.size() - 1);\n-      }\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString()\n-                    + ((int) scorePair.getValue().doubleValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(\"Score: \")\n-        .color(TextColor.DARK_AQUA)\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public Component getStatusMessage() {\n-    Component message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4OTE5NQ==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474889195", "bodyText": "Use TextFormatter#convert on the color to use it as a TextColor instead.", "author": "KingOfSquares", "createdAt": "2020-08-21T19:24:21Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()", "originalCommit": "b08151ae505f0ef4cfed606979a76e47759ba8dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex 0273bf63..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -90,48 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public Component getScoreMessage() {\n-    final List<Component> scoreMessages = Lists.newArrayList();\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n     final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n                       TextComponent.builder()\n                           .append(x.getKey().getName(NameStyle.VERBOSE))\n-                          .append(\n-                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n                           .append(TextComponent.of((int) x.getValue().doubleValue()))\n                           .color(TextColor.WHITE)\n-                          .build()));\n-      while (scoreMessages.size() > 10) {\n-        scoreMessages.remove(scoreMessages.size() - 1);\n-      }\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString()\n-                    + ((int) scorePair.getValue().doubleValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(\"Score: \")\n-        .color(TextColor.DARK_AQUA)\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public Component getStatusMessage() {\n-    Component message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg5MDEwNQ==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474890105", "bodyText": "Any reason why you are splitting up these symbols into different appends? Seems like they could be a single one(since you are not doing any newlines)", "author": "KingOfSquares", "createdAt": "2020-08-21T19:25:25Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()\n+                    + ((int) scorePair.getValue().doubleValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(\"Score: \")\n+        .color(TextColor.DARK_AQUA)\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public Component getStatusMessage() {\n+    Component message = this.getScoreMessage();\n     if (this.config.scoreLimit > 0) {\n       message\n-          .append(\"  \")\n-          .append(ChatColor.GRAY)\n-          .append(\"[\")\n-          .append(this.config.scoreLimit)\n-          .append(\"]\");\n+          .append(TextComponent.of(\"  \"))\n+          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n+          .append(TextComponent.of(this.config.scoreLimit))\n+          .append(TextComponent.of(\"]\"));", "originalCommit": "b08151ae505f0ef4cfed606979a76e47759ba8dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex 0273bf63..efd1e8c8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -90,48 +95,58 @@ public class ScoreMatchModule implements MatchModule, Listener {\n   }\n \n   /** Gets the score message for the match. */\n-  public Component getScoreMessage() {\n-    final List<Component> scoreMessages = Lists.newArrayList();\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n     final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n     if (ffamm != null) {\n-      this.scores.entrySet().stream()\n-          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n-          .forEachOrdered(\n-              x ->\n-                  scoreMessages.add(\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n                       TextComponent.builder()\n                           .append(x.getKey().getName(NameStyle.VERBOSE))\n-                          .append(\n-                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n                           .append(TextComponent.of((int) x.getValue().doubleValue()))\n                           .color(TextColor.WHITE)\n-                          .build()));\n-      while (scoreMessages.size() > 10) {\n-        scoreMessages.remove(scoreMessages.size() - 1);\n-      }\n+                          .build())\n+              .collect(Collectors.toList());\n     } else {\n \n       for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n         scoreMessages.add(\n             TextComponent.of(\n-                scorePair.getKey().getColor().toString()\n-                    + ((int) scorePair.getValue().doubleValue())));\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n       }\n     }\n-    return TextComponent.of(\"Score: \")\n-        .color(TextColor.DARK_AQUA)\n-        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    TextComponent returnMessage =\n+        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+    if (matchPlayer != null && ffamm != null) {\n+      returnMessage =\n+          returnMessage.append(\n+              TextComponent.builder()\n+                  .color(TextColor.GRAY)\n+                  .append(\" | \")\n+                  .append(\"You: \")\n+                  .color(TextColor.DARK_AQUA)\n+                  .append(\n+                      TextComponent.of(\n+                          (int) scores.get(matchPlayer).doubleValue(), TextColor.WHITE))\n+                  .build());\n+    }\n+    return returnMessage;\n   }\n \n   /** Gets the status message for the match. */\n-  public Component getStatusMessage() {\n-    Component message = this.getScoreMessage();\n+  public Component getStatusMessage(MatchPlayer matchPlayer) {\n+    Component message = this.getScoreMessage(matchPlayer);\n+\n     if (this.config.scoreLimit > 0) {\n-      message\n-          .append(TextComponent.of(\"  \"))\n-          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n-          .append(TextComponent.of(this.config.scoreLimit))\n-          .append(TextComponent.of(\"]\"));\n+      message =\n+          message.append(TextComponent.of(\"  [\" + this.config.scoreLimit + \"]\", TextColor.GRAY));\n     }\n     return message;\n   }\n"}}, {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "url": "https://github.com/PGMDev/PGM/commit/8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "message": "Add names next to scores in FFA in /match and sort by score.\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>", "committedDate": "2020-08-24T15:12:04Z", "type": "commit"}, {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "url": "https://github.com/PGMDev/PGM/commit/8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "message": "Add names next to scores in FFA in /match and sort by score.\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>", "committedDate": "2020-08-24T15:12:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r480273712", "bodyText": "You can simplify this using a reducer instead of a collector:\n    TextComponent result =\n        this.scores.entrySet().stream()\n            .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n            .limit(10)\n            .reduce(\n                TextComponent.builder(),\n                (builder, entry) ->\n                    builder\n                        .append(entry.getKey().getName(NameStyle.VERBOSE))\n                        .append(\": \", TextColor.GRAY)\n                        .append(\"\" + entry.getValue().intValue(), TextColor.WHITE),\n                ComponentBuilder::append)\n            .build();", "author": "Pablete1234", "createdAt": "2020-08-31T17:20:34Z", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "originalCommit": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4NDYzMQ==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r480484631", "bodyText": "Well, I need the output to be a list, so I can use TextFormatter.list(...) to list the names in a nice format: Player1, Player2, ... , and PlayerN. Using a collector seems like the proper way right?", "author": "mrcookieunderscore13", "createdAt": "2020-09-01T00:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU2OTk5NQ==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r480569995", "bodyText": "A joining collector may be a better alternative then, look at how the Collectors.joining collector works for strings and do a similar one for this", "author": "Pablete1234", "createdAt": "2020-09-01T01:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NjIxMA==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r481476210", "bodyText": "Using Collectors.joining, there is no easy way to have the last element separated like <element n-1>, and <element n>, rather than just a comma. I don't understand what is wrong with the method I am currently using.", "author": "mrcookieunderscore13", "createdAt": "2020-09-01T22:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzQ0Mw==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r490143443", "bodyText": "@mrcookieunderscore13 Maybe you are looking for something like what is in TextFormatter#list ?", "author": "KingOfSquares", "createdAt": "2020-09-17T10:37:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxMDQxNA==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r491710414", "bodyText": "@KingOfSquares I do use that method. I use the stream to make an ordered list of the players, and then a few lines down use TextFormatter#list to format it properly.", "author": "mrcookieunderscore13", "createdAt": "2020-09-20T16:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNjAwNA==", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r491726004", "bodyText": "Right, then I think I misunderstood the argument between you and Pablo", "author": "KingOfSquares", "createdAt": "2020-09-20T19:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "bbccc4f1661867e9082ae4f994eb70b95266b512", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\nindex efd1e8c8..4c3645f8 100644\n--- a/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java\n\n@@ -122,15 +122,19 @@ public class ScoreMatchModule implements MatchModule, Listener {\n       }\n     }\n     TextComponent returnMessage =\n-        TextComponent.of(\"Score: \", TextColor.DARK_AQUA)\n-            .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n+        TextComponent.builder()\n+            .append(TranslatableComponent.of(\"match.info.score\").color(TextColor.DARK_AQUA))\n+            .append(TextComponent.of(\": \", TextColor.DARK_AQUA))\n+            .append(TextFormatter.list(scoreMessages, TextColor.GRAY))\n+            .build();\n     if (matchPlayer != null && ffamm != null) {\n       returnMessage =\n           returnMessage.append(\n               TextComponent.builder()\n                   .color(TextColor.GRAY)\n                   .append(\" | \")\n-                  .append(\"You: \")\n+                  .append(TranslatableComponent.of(\"match.info.you\"))\n+                  .append(\": \")\n                   .color(TextColor.DARK_AQUA)\n                   .append(\n                       TextComponent.of(\n"}}, {"oid": "bbccc4f1661867e9082ae4f994eb70b95266b512", "url": "https://github.com/PGMDev/PGM/commit/bbccc4f1661867e9082ae4f994eb70b95266b512", "message": "Added translations\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>", "committedDate": "2020-10-01T02:09:56Z", "type": "commit"}, {"oid": "43a0e72822df2b7d2966ffef131cb4d95e6ab45a", "url": "https://github.com/PGMDev/PGM/commit/43a0e72822df2b7d2966ffef131cb4d95e6ab45a", "message": "Change color of \"You: \" to match your team color\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>", "committedDate": "2020-10-01T02:35:04Z", "type": "commit"}]}