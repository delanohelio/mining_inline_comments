{"pr_number": 758, "pr_title": "Add Selectable Monument Modes", "pr_createdAt": "2020-12-25T05:21:03Z", "pr_url": "https://github.com/PGMDev/PGM/pull/758", "timeline": [{"oid": "e33029f453ad2c79a5e2e1c2efc8ba418bc7b9a3", "url": "https://github.com/PGMDev/PGM/commit/e33029f453ad2c79a5e2e1c2efc8ba418bc7b9a3", "message": "Add id to Mode module\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-25T01:51:17Z", "type": "commit"}, {"oid": "23637aecf913816a3a6855048296479e57624a0c", "url": "https://github.com/PGMDev/PGM/commit/23637aecf913816a3a6855048296479e57624a0c", "message": "Add mode attribute to Core module\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-25T04:23:52Z", "type": "commit"}, {"oid": "5aa4628989a64f3aca08b8d657584da71618873e", "url": "https://github.com/PGMDev/PGM/commit/5aa4628989a64f3aca08b8d657584da71618873e", "message": "Add mode attribute to Destroyable module\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-25T04:37:29Z", "type": "commit"}, {"oid": "885f8256afe2ed939588419a027f8d007db1d59e", "url": "https://github.com/PGMDev/PGM/commit/885f8256afe2ed939588419a027f8d007db1d59e", "message": "Add mode checking to onObjectiveModeSwitch\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-25T05:04:51Z", "type": "commit"}, {"oid": "549117aef3e42ff659f0890ec8a2171914921623", "url": "https://github.com/PGMDev/PGM/commit/549117aef3e42ff659f0890ec8a2171914921623", "message": "Rename id attribute in Mode to stage, rename mode xml attributes in Core/Destroyable to modes\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-26T04:32:58Z", "type": "commit"}, {"oid": "8007cc001671326b9ee9917c4e62c95160531d62", "url": "https://github.com/PGMDev/PGM/commit/8007cc001671326b9ee9917c4e62c95160531d62", "message": "Revise ObjectiveModeSwitch on DestroyableMatchModule\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-26T04:33:58Z", "type": "commit"}, {"oid": "4611d346bd28b7de72fed298881671b337aba756", "url": "https://github.com/PGMDev/PGM/commit/4611d346bd28b7de72fed298881671b337aba756", "message": "Update function call on CoreMatchModule\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-26T04:37:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NDM5OA==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r548954398", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (destroyable.getMode() != null\n          \n          \n            \n                        && destroyable.getMode().equals(event.getMode().getStage())) {\n          \n          \n            \n                    } else if (destroyable.getMode().equals(event.getMode().getStage())) {\n          \n      \n    \n    \n  \n\nSince the previous if statement is already checking if the mode is null, no need to check again if it's not null \ud83d\ude04", "author": "applenick", "createdAt": "2020-12-26T07:26:22Z", "path": "core/src/main/java/tc/oc/pgm/destroyable/DestroyableMatchModule.java", "diffHunk": "@@ -126,7 +126,12 @@ public void onObjectiveModeSwitch(final ObjectiveModeChangeEvent event) {\n     for (Destroyable destroyable : this.destroyables) {\n       if (destroyable.isAffectedByModeChanges()) {\n         double oldCompletion = destroyable.getCompletion();\n-        destroyable.replaceBlocks(event.getMode().getMaterialData());\n+        if (destroyable.getMode() == null) {\n+          destroyable.replaceBlocks(event.getMode().getMaterialData());\n+        } else if (destroyable.getMode() != null\n+            && destroyable.getMode().equals(event.getMode().getStage())) {", "originalCommit": "4611d346bd28b7de72fed298881671b337aba756", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ad766e925c16cb11098361f05c52c12bfe6f11b", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/destroyable/DestroyableMatchModule.java b/core/src/main/java/tc/oc/pgm/destroyable/DestroyableMatchModule.java\nindex d71bee6d..98240dd6 100644\n--- a/core/src/main/java/tc/oc/pgm/destroyable/DestroyableMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/destroyable/DestroyableMatchModule.java\n\n@@ -128,8 +128,7 @@ public class DestroyableMatchModule implements MatchModule, Listener {\n         double oldCompletion = destroyable.getCompletion();\n         if (destroyable.getMode() == null) {\n           destroyable.replaceBlocks(event.getMode().getMaterialData());\n-        } else if (destroyable.getMode() != null\n-            && destroyable.getMode().equals(event.getMode().getStage())) {\n+        } else if (destroyable.getMode().equals(event.getMode().getStage())) {\n           destroyable.replaceBlocks(event.getMode().getMaterialData());\n         }\n         if (oldCompletion != destroyable.getCompletion()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NDU0NA==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r548954544", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (core.getMode() != null && core.getMode().equals(event.getMode().getStage())) {\n          \n          \n            \n                      core.replaceBlocks(event.getMode().getMaterialData());\n          \n          \n            \n                    } else if (core.getMode().equals(event.getMode().getStage())) {\n          \n          \n            \n                      core.replaceBlocks(event.getMode().getMaterialData());\n          \n      \n    \n    \n  \n\nSee other comment", "author": "applenick", "createdAt": "2020-12-26T07:27:31Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java", "diffHunk": "@@ -155,7 +155,11 @@ public void lavaProtection(final BlockTransformEvent event) {\n   public void onObjectiveModeSwitch(final ObjectiveModeChangeEvent event) {\n     for (Core core : this.cores) {\n       if (core.isAffectedByModeChanges()) {\n-        core.replaceBlocks(event.getMode().getMaterialData());\n+        if (core.getMode() == null) {\n+          core.replaceBlocks(event.getMode().getMaterialData());\n+        } else if (core.getMode() != null && core.getMode().equals(event.getMode().getStage())) {\n+          core.replaceBlocks(event.getMode().getMaterialData());", "originalCommit": "4611d346bd28b7de72fed298881671b337aba756", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ad766e925c16cb11098361f05c52c12bfe6f11b", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java b/core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java\nindex c48e6a52..4ce3609a 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java\n\n@@ -157,7 +157,7 @@ public class CoreMatchModule implements MatchModule, Listener {\n       if (core.isAffectedByModeChanges()) {\n         if (core.getMode() == null) {\n           core.replaceBlocks(event.getMode().getMaterialData());\n-        } else if (core.getMode() != null && core.getMode().equals(event.getMode().getStage())) {\n+        } else if (core.getMode().equals(event.getMode().getStage())) {\n           core.replaceBlocks(event.getMode().getMaterialData());\n         }\n       }\n"}}, {"oid": "9ad766e925c16cb11098361f05c52c12bfe6f11b", "url": "https://github.com/PGMDev/PGM/commit/9ad766e925c16cb11098361f05c52c12bfe6f11b", "message": "Simplify ObjectiveModeSwitch logic\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-26T20:22:18Z", "type": "commit"}, {"oid": "8a92f2d64b295ee3bc46ef418a0d7ecb7a89f076", "url": "https://github.com/PGMDev/PGM/commit/8a92f2d64b295ee3bc46ef418a0d7ecb7a89f076", "message": "Revert stage to id on <mode>\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-26T20:36:37Z", "type": "commit"}, {"oid": "e34eae1248365fd48f70b47886e9de4590ea83c0", "url": "https://github.com/PGMDev/PGM/commit/e34eae1248365fd48f70b47886e9de4590ea83c0", "message": "Turn mode attriute to StringList\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-27T02:58:42Z", "type": "commit"}, {"oid": "1b61583b414fcdc71ed98e1d171c0a90ebd9fdc5", "url": "https://github.com/PGMDev/PGM/commit/1b61583b414fcdc71ed98e1d171c0a90ebd9fdc5", "message": "Update something\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-27T23:14:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNTEyMw==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r549235123", "bodyText": "You no longer need isAffectedByModeChanges.\nIf the list of modes is an empty collection, that's your validation that this is in fact, not affected by modes.\nOn the parsing side, make sure to make it so that if mode-changes is mutually exclusive with modes, and if modes isn't included you fall-back to either an empty set of modes (not affected by modes) or a null one or (possibly one that includes all modes) if it is mode-change affected", "author": "Pablete1234", "createdAt": "2020-12-28T06:50:33Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java", "diffHunk": "@@ -155,10 +155,7 @@ public void lavaProtection(final BlockTransformEvent event) {\n   public void onObjectiveModeSwitch(final ObjectiveModeChangeEvent event) {\n     for (Core core : this.cores) {\n       if (core.isAffectedByModeChanges()) {", "originalCommit": "1b61583b414fcdc71ed98e1d171c0a90ebd9fdc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afc5f6308f2e2c51bc88029e71ac263651acc8ad", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java b/core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java\nindex 25108ed0..154e4151 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreMatchModule.java\n\n@@ -154,10 +154,8 @@ public class CoreMatchModule implements MatchModule, Listener {\n   @EventHandler(priority = EventPriority.MONITOR)\n   public void onObjectiveModeSwitch(final ObjectiveModeChangeEvent event) {\n     for (Core core : this.cores) {\n-      if (core.isAffectedByModeChanges()) {\n-        if (core.getModeList() == null || core.getModeList().contains(event.getMode())) {\n-          core.replaceBlocks(event.getMode().getMaterialData());\n-        }\n+      if (core.getModeList() == null || core.getModeList().contains(event.getMode())) {\n+        core.replaceBlocks(event.getMode().getMaterialData());\n       }\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNTM3MA==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r549235370", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public List<Mode> getModeList() {\n          \n          \n            \n              public Set<Mode> getModeList() {\n          \n      \n    \n    \n  \n\nAcross the code, replace List with Set, you're primarily going to be doing contains on this collection, sets are better for that", "author": "Pablete1234", "createdAt": "2020-12-28T06:51:46Z", "path": "core/src/main/java/tc/oc/pgm/core/Core.java", "diffHunk": "@@ -161,7 +162,7 @@ public void markLeaked() {\n     this.leaked = true;\n   }\n \n-  public List<String> getModeList() {\n+  public List<Mode> getModeList() {", "originalCommit": "1b61583b414fcdc71ed98e1d171c0a90ebd9fdc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxODc0MA==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r549918740", "bodyText": "Is there a reason why these shouldn't be ImmutableSets? These are after the sets are created and passed to the core object.", "author": "CoWinkKeyDinkInc", "createdAt": "2020-12-30T02:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNTM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "afc5f6308f2e2c51bc88029e71ac263651acc8ad", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/Core.java b/core/src/main/java/tc/oc/pgm/core/Core.java\nindex 1f62723f..5205713e 100644\n--- a/core/src/main/java/tc/oc/pgm/core/Core.java\n+++ b/core/src/main/java/tc/oc/pgm/core/Core.java\n\n@@ -162,7 +161,7 @@ public class Core extends TouchableGoal<CoreFactory>\n     this.leaked = true;\n   }\n \n-  public List<Mode> getModeList() {\n+  public Set<SelfIdentifyingFeatureDefinition> getModeList() {\n     return this.definition.getModeList();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNTU3Nw==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r549235577", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      for (String mode : Splitter.on(\" \").split(modes)) {\n          \n          \n            \n                      for (String mode : Splitter.on(\"\\\\s\").split(modes)) {\n          \n      \n    \n    \n  \n\nuse whitespace as a separator, similar to the example in https://github.com/PGMDev/PGM/blob/dev/core/src/main/java/tc/oc/pgm/flag/FlagParser.java#L105", "author": "Pablete1234", "createdAt": "2020-12-28T06:52:50Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreModule.java", "diffHunk": "@@ -118,13 +119,14 @@ public CoreModule parse(MapFactory context, Logger logger, Document doc)\n         }\n \n         String modes = coreEl.getAttributeValue(\"modes\");\n-        List<String> modeList = new ArrayList<>();\n+        List<Mode> modeList = new ArrayList<>();\n         if (modes != null) {\n-          Node node = Node.fromAttr(coreEl, modes);\n-          if (node != null) {\n-            for (String mode : Splitter.on(\" \").split(node.getValue())) {\n-              modeList.add(mode);\n-            }\n+          for (String mode : Splitter.on(\" \").split(modes)) {", "originalCommit": "1b61583b414fcdc71ed98e1d171c0a90ebd9fdc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afc5f6308f2e2c51bc88029e71ac263651acc8ad", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreModule.java b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\nindex c14207b7..cfc8dcec 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n\n@@ -118,16 +129,9 @@ public class CoreModule implements MapModule {\n           serialNumbers.put(owner, serial + 1);\n         }\n \n-        String modes = coreEl.getAttributeValue(\"modes\");\n-        List<Mode> modeList = new ArrayList<>();\n-        if (modes != null) {\n-          for (String mode : Splitter.on(\" \").split(modes)) {\n-            Iterable bigcontext = context.getFeatures().getAll(Mode.class);\n-            System.out.println(bigcontext);\n-            Mode mode1 = context.getFeatures().get(mode, Mode.class);\n-            modeList.add(mode1);\n-            System.out.println(mode1);\n-          }\n+        ImmutableSet<SelfIdentifyingFeatureDefinition> modeList = null;\n+        if (!coreEl.getAttributeValue(\"modes\").isEmpty()) {\n+          modeList = parseModeSet(Objects.requireNonNull(Node.fromAttr(coreEl, \"modes\")), context);\n         }\n \n         boolean modeChanges = XMLUtils.parseBoolean(coreEl.getAttribute(\"mode-changes\"), false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNTY2Nw==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r549235667", "bodyText": "Make this an ImmutableSet, like the example in https://github.com/PGMDev/PGM/blob/dev/core/src/main/java/tc/oc/pgm/flag/FlagParser.java#L105", "author": "Pablete1234", "createdAt": "2020-12-28T06:53:13Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreModule.java", "diffHunk": "@@ -118,13 +119,14 @@ public CoreModule parse(MapFactory context, Logger logger, Document doc)\n         }\n \n         String modes = coreEl.getAttributeValue(\"modes\");\n-        List<String> modeList = new ArrayList<>();\n+        List<Mode> modeList = new ArrayList<>();", "originalCommit": "1b61583b414fcdc71ed98e1d171c0a90ebd9fdc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afc5f6308f2e2c51bc88029e71ac263651acc8ad", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreModule.java b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\nindex c14207b7..cfc8dcec 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n\n@@ -118,16 +129,9 @@ public class CoreModule implements MapModule {\n           serialNumbers.put(owner, serial + 1);\n         }\n \n-        String modes = coreEl.getAttributeValue(\"modes\");\n-        List<Mode> modeList = new ArrayList<>();\n-        if (modes != null) {\n-          for (String mode : Splitter.on(\" \").split(modes)) {\n-            Iterable bigcontext = context.getFeatures().getAll(Mode.class);\n-            System.out.println(bigcontext);\n-            Mode mode1 = context.getFeatures().get(mode, Mode.class);\n-            modeList.add(mode1);\n-            System.out.println(mode1);\n-          }\n+        ImmutableSet<SelfIdentifyingFeatureDefinition> modeList = null;\n+        if (!coreEl.getAttributeValue(\"modes\").isEmpty()) {\n+          modeList = parseModeSet(Objects.requireNonNull(Node.fromAttr(coreEl, \"modes\")), context);\n         }\n \n         boolean modeChanges = XMLUtils.parseBoolean(coreEl.getAttribute(\"mode-changes\"), false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNTkwMQ==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r549235901", "bodyText": "You left out some debugs here, also, you need to check that the mode returned isn't null or else it means that mode hasn't been found, again, you have a perfect 1 to 1 example in https://github.com/PGMDev/PGM/blob/dev/core/src/main/java/tc/oc/pgm/flag/FlagParser.java#L105", "author": "Pablete1234", "createdAt": "2020-12-28T06:54:13Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreModule.java", "diffHunk": "@@ -118,13 +119,14 @@ public CoreModule parse(MapFactory context, Logger logger, Document doc)\n         }\n \n         String modes = coreEl.getAttributeValue(\"modes\");\n-        List<String> modeList = new ArrayList<>();\n+        List<Mode> modeList = new ArrayList<>();\n         if (modes != null) {\n-          Node node = Node.fromAttr(coreEl, modes);\n-          if (node != null) {\n-            for (String mode : Splitter.on(\" \").split(node.getValue())) {\n-              modeList.add(mode);\n-            }\n+          for (String mode : Splitter.on(\" \").split(modes)) {\n+            Iterable bigcontext = context.getFeatures().getAll(Mode.class);\n+            System.out.println(bigcontext);\n+            Mode mode1 = context.getFeatures().get(mode, Mode.class);\n+            modeList.add(mode1);\n+            System.out.println(mode1);", "originalCommit": "1b61583b414fcdc71ed98e1d171c0a90ebd9fdc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afc5f6308f2e2c51bc88029e71ac263651acc8ad", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreModule.java b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\nindex c14207b7..cfc8dcec 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n\n@@ -118,16 +129,9 @@ public class CoreModule implements MapModule {\n           serialNumbers.put(owner, serial + 1);\n         }\n \n-        String modes = coreEl.getAttributeValue(\"modes\");\n-        List<Mode> modeList = new ArrayList<>();\n-        if (modes != null) {\n-          for (String mode : Splitter.on(\" \").split(modes)) {\n-            Iterable bigcontext = context.getFeatures().getAll(Mode.class);\n-            System.out.println(bigcontext);\n-            Mode mode1 = context.getFeatures().get(mode, Mode.class);\n-            modeList.add(mode1);\n-            System.out.println(mode1);\n-          }\n+        ImmutableSet<SelfIdentifyingFeatureDefinition> modeList = null;\n+        if (!coreEl.getAttributeValue(\"modes\").isEmpty()) {\n+          modeList = parseModeSet(Objects.requireNonNull(Node.fromAttr(coreEl, \"modes\")), context);\n         }\n \n         boolean modeChanges = XMLUtils.parseBoolean(coreEl.getAttribute(\"mode-changes\"), false);\n"}}, {"oid": "afc5f6308f2e2c51bc88029e71ac263651acc8ad", "url": "https://github.com/PGMDev/PGM/commit/afc5f6308f2e2c51bc88029e71ac263651acc8ad", "message": "Convert modelist to ImmutableSet, fully implement to cores and monuments\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-30T04:27:01Z", "type": "commit"}, {"oid": "1c4e2040264e1a4643873c11fe2c57c023d4df1c", "url": "https://github.com/PGMDev/PGM/commit/1c4e2040264e1a4643873c11fe2c57c023d4df1c", "message": "Merge branch 'dev' into add-modes-selectable", "committedDate": "2020-12-30T04:38:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzMDczMg==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r550130732", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Set<SelfIdentifyingFeatureDefinition> getModeList() {\n          \n          \n            \n              public ImmutableSet<Mode> getModes() {\n          \n      \n    \n    \n  \n\nAnd make this change across the places with this set, it's a set of Modes, not a set of any type of feature definition, also just call it getModes, and the variable in the definition modes,  it's not a list to start with (it's a set) and that's also the naming used in the xml, so easiest to keep it consistent.\nYou also need to move this up the hierarchy in interfaces to ModeChangeGoal, replacing isAffectedByModeChanges", "author": "Pablete1234", "createdAt": "2020-12-30T10:41:16Z", "path": "core/src/main/java/tc/oc/pgm/core/Core.java", "diffHunk": "@@ -160,6 +161,10 @@ public void markLeaked() {\n     this.leaked = true;\n   }\n \n+  public Set<SelfIdentifyingFeatureDefinition> getModeList() {", "originalCommit": "1c4e2040264e1a4643873c11fe2c57c023d4df1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/Core.java b/core/src/main/java/tc/oc/pgm/core/Core.java\nindex 5205713e..b5cf6620 100644\n--- a/core/src/main/java/tc/oc/pgm/core/Core.java\n+++ b/core/src/main/java/tc/oc/pgm/core/Core.java\n\n@@ -161,8 +163,8 @@ public class Core extends TouchableGoal<CoreFactory>\n     this.leaked = true;\n   }\n \n-  public Set<SelfIdentifyingFeatureDefinition> getModeList() {\n-    return this.definition.getModeList();\n+  public ImmutableSet<Mode> getModes() {\n+    return this.definition.getModes();\n   }\n \n   public boolean hasLeaked() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzNzQ5Ng==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r550137496", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ImmutableSet.Builder<SelfIdentifyingFeatureDefinition> modes = ImmutableSet.builder();\n          \n          \n            \n                  for (String modeId : node.getValue().split(\"\\\\s\")) {\n          \n          \n            \n                    SelfIdentifyingFeatureDefinition mode =\n          \n          \n            \n                        context.getFeatures().get(modeId, SelfIdentifyingFeatureDefinition.class);\n          \n          \n            \n                    if (mode == null) {\n          \n          \n            \n                      throw new InvalidXMLException(\"No mode with ID '\" + modeId + \"'\", node);\n          \n          \n            \n                    }\n          \n          \n            \n                    modes.add(mode);\n          \n          \n            \n                  }\n          \n          \n            \n                  return modes.build();\n          \n          \n            \n                  ImmutableSet.Builder<Mode> modes = ImmutableSet.builder();\n          \n          \n            \n                  for (String modeId : node.getValue().split(\"\\\\s\")) {\n          \n          \n            \n                    Mode mode = context.getFeatures().get(modeId, Mode.class);\n          \n          \n            \n                    if (mode == null) {\n          \n          \n            \n                      throw new InvalidXMLException(\"No mode with ID '\" + modeId + \"'\", node);\n          \n          \n            \n                    }\n          \n          \n            \n                    modes.add(mode);\n          \n          \n            \n                  }\n          \n          \n            \n                  return modes.build();\n          \n      \n    \n    \n  \n\nGet modes, not SelfIdentifyingFeatureDefinitions", "author": "Pablete1234", "createdAt": "2020-12-30T10:50:34Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreModule.java", "diffHunk": "@@ -71,6 +71,20 @@ public MatchModule createMatchModule(Match match) {\n       return ImmutableList.of(RegionModule.class, TeamModule.class);\n     }\n \n+    public ImmutableSet<SelfIdentifyingFeatureDefinition> parseModeSet(\n+        Node node, MapFactory context) throws InvalidXMLException {\n+      ImmutableSet.Builder<SelfIdentifyingFeatureDefinition> modes = ImmutableSet.builder();\n+      for (String modeId : node.getValue().split(\"\\\\s\")) {\n+        SelfIdentifyingFeatureDefinition mode =\n+            context.getFeatures().get(modeId, SelfIdentifyingFeatureDefinition.class);\n+        if (mode == null) {\n+          throw new InvalidXMLException(\"No mode with ID '\" + modeId + \"'\", node);\n+        }\n+        modes.add(mode);\n+      }\n+      return modes.build();", "originalCommit": "1c4e2040264e1a4643873c11fe2c57c023d4df1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreModule.java b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\nindex cfc8dcec..a0b492e9 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n\n@@ -71,12 +74,10 @@ public class CoreModule implements MapModule {\n       return ImmutableList.of(RegionModule.class, TeamModule.class);\n     }\n \n-    public ImmutableSet<SelfIdentifyingFeatureDefinition> parseModeSet(\n-        Node node, MapFactory context) throws InvalidXMLException {\n-      ImmutableSet.Builder<SelfIdentifyingFeatureDefinition> modes = ImmutableSet.builder();\n+    public ImmutableSet<Mode> parseModeSet(Node node, MapFactory context) throws InvalidXMLException {\n+      ImmutableSet.Builder<Mode> modes = ImmutableSet.builder();\n       for (String modeId : node.getValue().split(\"\\\\s\")) {\n-        SelfIdentifyingFeatureDefinition mode =\n-            context.getFeatures().get(modeId, SelfIdentifyingFeatureDefinition.class);\n+        Mode mode = context.getFeatures().get(modeId, Mode.class);\n         if (mode == null) {\n           throw new InvalidXMLException(\"No mode with ID '\" + modeId + \"'\", node);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE0NDU3NA==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r550144574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ImmutableSet<SelfIdentifyingFeatureDefinition> parseModeSet(\n          \n          \n            \n                    Node node, MapFactory context) throws InvalidXMLException {\n          \n          \n            \n                public ImmutableSet<Mode> parseModeSet(Node node) throws InvalidXMLException {\n          \n      \n    \n    \n  \n\nMake the factory a field in the class, no need to pass it as parameter", "author": "Pablete1234", "createdAt": "2020-12-30T11:00:36Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreModule.java", "diffHunk": "@@ -71,6 +71,20 @@ public MatchModule createMatchModule(Match match) {\n       return ImmutableList.of(RegionModule.class, TeamModule.class);\n     }\n \n+    public ImmutableSet<SelfIdentifyingFeatureDefinition> parseModeSet(\n+        Node node, MapFactory context) throws InvalidXMLException {", "originalCommit": "1c4e2040264e1a4643873c11fe2c57c023d4df1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreModule.java b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\nindex cfc8dcec..a0b492e9 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n\n@@ -71,12 +74,10 @@ public class CoreModule implements MapModule {\n       return ImmutableList.of(RegionModule.class, TeamModule.class);\n     }\n \n-    public ImmutableSet<SelfIdentifyingFeatureDefinition> parseModeSet(\n-        Node node, MapFactory context) throws InvalidXMLException {\n-      ImmutableSet.Builder<SelfIdentifyingFeatureDefinition> modes = ImmutableSet.builder();\n+    public ImmutableSet<Mode> parseModeSet(Node node, MapFactory context) throws InvalidXMLException {\n+      ImmutableSet.Builder<Mode> modes = ImmutableSet.builder();\n       for (String modeId : node.getValue().split(\"\\\\s\")) {\n-        SelfIdentifyingFeatureDefinition mode =\n-            context.getFeatures().get(modeId, SelfIdentifyingFeatureDefinition.class);\n+        Mode mode = context.getFeatures().get(modeId, Mode.class);\n         if (mode == null) {\n           throw new InvalidXMLException(\"No mode with ID '\" + modeId + \"'\", node);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE0ODQ3Ng==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r550148476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ImmutableSet<SelfIdentifyingFeatureDefinition> modeList = null;\n          \n          \n            \n                    if (!coreEl.getAttributeValue(\"modes\").isEmpty()) {\n          \n          \n            \n                      modeList = parseModeSet(Objects.requireNonNull(Node.fromAttr(coreEl, \"modes\")), context);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    boolean modeChanges = XMLUtils.parseBoolean(coreEl.getAttribute(\"mode-changes\"), false);\n          \n          \n            \n                    ImmutableSet<Mode> modes;\n          \n          \n            \n                    Node modes = Node.fromAttr(coreEl, \"modes\");\n          \n          \n            \n                    if (modes != null) {\n          \n          \n            \n                        if (coreEl.getAttribute(\"mode-changes\") != null)\n          \n          \n            \n                            throw new InvalidXMLException(\"Cannot combine modes and mode-changes\");\n          \n          \n            \n                            \n          \n          \n            \n                        modes = parseModeSet(modes, context); // Specific set of modes\n          \n          \n            \n                    } else if (XMLUtils.parseBoolean(coreEl.getAttribute(\"mode-changes\"), false)) {\n          \n          \n            \n                        modes = null; // All modes\n          \n          \n            \n                    } else {\n          \n          \n            \n                        modes = ImmutableSet.of(); // No modes\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nMake parsing for modes properly support the legacy mode-changes, also make sure to throw an exception if they're combined.\nYou also need to remove all traces of modeChanges in the rest of the codebase, it is no longer a thing since we have a specific set now", "author": "Pablete1234", "createdAt": "2020-12-30T11:05:41Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreModule.java", "diffHunk": "@@ -115,6 +129,11 @@ public CoreModule parse(MapFactory context, Logger logger, Document doc)\n           serialNumbers.put(owner, serial + 1);\n         }\n \n+        ImmutableSet<SelfIdentifyingFeatureDefinition> modeList = null;\n+        if (!coreEl.getAttributeValue(\"modes\").isEmpty()) {\n+          modeList = parseModeSet(Objects.requireNonNull(Node.fromAttr(coreEl, \"modes\")), context);\n+        }\n+\n         boolean modeChanges = XMLUtils.parseBoolean(coreEl.getAttribute(\"mode-changes\"), false);", "originalCommit": "1c4e2040264e1a4643873c11fe2c57c023d4df1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreModule.java b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\nindex cfc8dcec..a0b492e9 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n\n@@ -129,9 +130,17 @@ public class CoreModule implements MapModule {\n           serialNumbers.put(owner, serial + 1);\n         }\n \n-        ImmutableSet<SelfIdentifyingFeatureDefinition> modeList = null;\n-        if (!coreEl.getAttributeValue(\"modes\").isEmpty()) {\n-          modeList = parseModeSet(Objects.requireNonNull(Node.fromAttr(coreEl, \"modes\")), context);\n+        ImmutableSet<Mode> modeSet;\n+        Node modes = Node.fromAttr(coreEl, \"modes\");\n+        if (modes != null) {\n+          if (coreEl.getAttribute(\"mode-changes\") != null) {\n+            throw new InvalidXMLException(\"Cannot combine modes and mode-changes\", coreEl);\n+          }\n+          modeSet = parseModeSet(modes, context); // Specific set of modes\n+        } else if (XMLUtils.parseBoolean(coreEl.getAttribute(\"mode-changes\"), false)) {\n+          modeSet = null; // All modes\n+        } else {\n+          modeSet = ImmutableSet.of(); // No modes\n         }\n \n         boolean modeChanges = XMLUtils.parseBoolean(coreEl.getAttribute(\"mode-changes\"), false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzNjQyMA==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r550136420", "bodyText": "You can replace instances of SelfIdentifyingFeatureDefinition Mode in this and a few other classes when used in return types and lists as it extends it.", "author": "Pugzy", "createdAt": "2020-12-30T10:49:12Z", "path": "core/src/main/java/tc/oc/pgm/core/Core.java", "diffHunk": "@@ -160,6 +161,10 @@ public void markLeaked() {\n     this.leaked = true;\n   }\n \n+  public Set<SelfIdentifyingFeatureDefinition> getModeList() {", "originalCommit": "1c4e2040264e1a4643873c11fe2c57c023d4df1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/Core.java b/core/src/main/java/tc/oc/pgm/core/Core.java\nindex 5205713e..b5cf6620 100644\n--- a/core/src/main/java/tc/oc/pgm/core/Core.java\n+++ b/core/src/main/java/tc/oc/pgm/core/Core.java\n\n@@ -161,8 +163,8 @@ public class Core extends TouchableGoal<CoreFactory>\n     this.leaked = true;\n   }\n \n-  public Set<SelfIdentifyingFeatureDefinition> getModeList() {\n-    return this.definition.getModeList();\n+  public ImmutableSet<Mode> getModes() {\n+    return this.definition.getModes();\n   }\n \n   public boolean hasLeaked() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzNzU2OA==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r550137568", "bodyText": "Avoid wildcard imports (can be turned off in Intellij).", "author": "Pugzy", "createdAt": "2020-12-30T10:50:44Z", "path": "core/src/main/java/tc/oc/pgm/core/CoreModule.java", "diffHunk": "@@ -1,10 +1,9 @@\n package tc.oc.pgm.core;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n+import java.util.*;", "originalCommit": "1c4e2040264e1a4643873c11fe2c57c023d4df1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/core/CoreModule.java b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\nindex cfc8dcec..a0b492e9 100644\n--- a/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n+++ b/core/src/main/java/tc/oc/pgm/core/CoreModule.java\n\n@@ -3,7 +3,10 @@ package tc.oc.pgm.core;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n-import java.util.*;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n import java.util.logging.Logger;\n import org.bukkit.Material;\n import org.bukkit.material.MaterialData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzOTI5Mg==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r550139292", "bodyText": "Should use if (destroyableEl.getAttributeValue(\"modes\") != null) { rather than isEmpty and ! not.\ngetAttributeValue returns the Attribute or null so calling isEmpty produces an NPE on maps without modes defined.", "author": "Pugzy", "createdAt": "2020-12-30T10:53:31Z", "path": "core/src/main/java/tc/oc/pgm/destroyable/DestroyableModule.java", "diffHunk": "@@ -111,6 +124,13 @@ public DestroyableModule parse(MapFactory context, Logger logger, Document doc)\n         Set<SingleMaterialMatcher> materials =\n             XMLUtils.parseMaterialPatternSet(\n                 Node.fromRequiredAttr(destroyableEl, \"materials\", \"material\"));\n+\n+        ImmutableSet<SelfIdentifyingFeatureDefinition> modeList = null;\n+        if (!destroyableEl.getAttributeValue(\"modes\").isEmpty()) {", "originalCommit": "1c4e2040264e1a4643873c11fe2c57c023d4df1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/destroyable/DestroyableModule.java b/core/src/main/java/tc/oc/pgm/destroyable/DestroyableModule.java\nindex 76b4a002..6e73c69a 100644\n--- a/core/src/main/java/tc/oc/pgm/destroyable/DestroyableModule.java\n+++ b/core/src/main/java/tc/oc/pgm/destroyable/DestroyableModule.java\n\n@@ -125,10 +124,17 @@ public class DestroyableModule implements MapModule {\n             XMLUtils.parseMaterialPatternSet(\n                 Node.fromRequiredAttr(destroyableEl, \"materials\", \"material\"));\n \n-        ImmutableSet<SelfIdentifyingFeatureDefinition> modeList = null;\n-        if (!destroyableEl.getAttributeValue(\"modes\").isEmpty()) {\n-          modeList =\n-              parseModeSet(Objects.requireNonNull(Node.fromAttr(destroyableEl, \"modes\")), context);\n+        ImmutableSet<Mode> modeSet;\n+        Node modes = Node.fromAttr(destroyableEl, \"modes\");\n+        if (modes != null) {\n+          if (destroyableEl.getAttribute(\"mode-changes\") != null) {\n+            throw new InvalidXMLException(\"Cannot combine modes and mode-changes\", destroyableEl);\n+          }\n+          modeSet = parseModeSet(modes, context); // Specific set of modes\n+        } else if (XMLUtils.parseBoolean(destroyableEl.getAttribute(\"mode-changes\"), false)) {\n+          modeSet = null; // All modes\n+        } else {\n+          modeSet = ImmutableSet.of(); // No modes\n         }\n \n         boolean modeChanges =\n"}}, {"oid": "d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "url": "https://github.com/PGMDev/PGM/commit/d270e6c52885e2f9ae50ed5baaee1ab1b7ebd73d", "message": "Make ImmutableSets use Mode object, update parsing for modes\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-31T06:21:40Z", "type": "commit"}, {"oid": "dbb87dc402ae16fa9ef1d67e00085d844e391177", "url": "https://github.com/PGMDev/PGM/commit/dbb87dc402ae16fa9ef1d67e00085d844e391177", "message": "Remove internal references of isAffectedByModeChanges\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2020-12-31T06:36:18Z", "type": "commit"}, {"oid": "705aa4e5207081609dbe9bbb6e5a3591b40e2428", "url": "https://github.com/PGMDev/PGM/commit/705aa4e5207081609dbe9bbb6e5a3591b40e2428", "message": "Create factory instance in Core/Destroyable parse\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2021-01-01T20:23:20Z", "type": "commit"}, {"oid": "549265921c4f26810b6e05ec558b12a5a22701b2", "url": "https://github.com/PGMDev/PGM/commit/549265921c4f26810b6e05ec558b12a5a22701b2", "message": "reformat files\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2021-01-01T20:34:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgyNTI4Mg==", "url": "https://github.com/PGMDev/PGM/pull/758#discussion_r550825282", "bodyText": "Consider adding here ImmutableSet<Mode> getModes to replace the previous method", "author": "Pablete1234", "createdAt": "2021-01-02T00:41:51Z", "path": "core/src/main/java/tc/oc/pgm/goals/ModeChangeGoal.java", "diffHunk": "@@ -11,6 +11,4 @@\n   boolean isObjectiveMaterial(Block block);\n \n   String getModeChangeMessage(Material material);\n-\n-  boolean isAffectedByModeChanges();", "originalCommit": "549265921c4f26810b6e05ec558b12a5a22701b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79fc8519a0fc99148c0779e96fbd41c9e25e198b", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/goals/ModeChangeGoal.java b/core/src/main/java/tc/oc/pgm/goals/ModeChangeGoal.java\nindex e4566869..a6f0c73e 100644\n--- a/core/src/main/java/tc/oc/pgm/goals/ModeChangeGoal.java\n+++ b/core/src/main/java/tc/oc/pgm/goals/ModeChangeGoal.java\n\n@@ -10,5 +12,5 @@ public interface ModeChangeGoal<T extends GoalDefinition> extends Goal<T> {\n \n   boolean isObjectiveMaterial(Block block);\n \n-  String getModeChangeMessage(Material material);\n+  ImmutableSet<Mode> getModes();\n }\n"}}, {"oid": "79fc8519a0fc99148c0779e96fbd41c9e25e198b", "url": "https://github.com/PGMDev/PGM/commit/79fc8519a0fc99148c0779e96fbd41c9e25e198b", "message": "Add getModes to ModeChangeGoal Interface\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2021-01-02T20:38:23Z", "type": "commit"}, {"oid": "6d38fd9fa84239332bafbd75f0c61c49e286b029", "url": "https://github.com/PGMDev/PGM/commit/6d38fd9fa84239332bafbd75f0c61c49e286b029", "message": "reformat code\n\nSigned-off-by: Patrick <cowinkkeydinkinc@gmail.com>", "committedDate": "2021-01-02T20:45:49Z", "type": "commit"}, {"oid": "9ab7e027b8b280466ec8823d1ebacdef71ea6dd0", "url": "https://github.com/PGMDev/PGM/commit/9ab7e027b8b280466ec8823d1ebacdef71ea6dd0", "message": "Merge branch 'dev' into add-modes-selectable", "committedDate": "2021-01-02T21:23:18Z", "type": "commit"}]}