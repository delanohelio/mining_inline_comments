{"pr_number": 594, "pr_title": "Update legacy flag beams with proposed changes from #550", "pr_createdAt": "2020-08-05T02:07:40Z", "pr_url": "https://github.com/PGMDev/PGM/pull/594", "timeline": [{"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd", "url": "https://github.com/PGMDev/PGM/commit/d43a97782ebf10168b3f11b4a15bee6f87769dbd", "message": "Adds configurable legacy wool flag beams for versions > 1.7, increases flag vertical spawn range, and respects flag definition's beam setting.\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-05T02:08:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMjQ2Mg==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465432462", "bodyText": "Is this unused? did you mean to call this from trackFlag?", "author": "Pablete1234", "createdAt": "2020-08-05T02:18:11Z", "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -50,6 +53,13 @@ public LegacyFlagBeamMatchModule(Match match) {\n     this.beams = new HashMap<>();\n   }\n \n+  private boolean shouldShowBeams(Flag flag) {", "originalCommit": "d43a97782ebf10168b3f11b4a15bee6f87769dbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjQyOA==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465436428", "bodyText": "Ah this is my bad, forgot to remove this and didn't end up using it.", "author": "jasoryeh", "createdAt": "2020-08-05T02:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMjQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjQ5MQ==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465436491", "bodyText": "Resolved in new commit.", "author": "jasoryeh", "createdAt": "2020-08-05T02:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMjQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "701bdc471181940eb164c1a4ca254c2f91aef959", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java b/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\nindex fa3eeaf0..f42bcd6f 100644\n--- a/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\n\n@@ -53,13 +50,6 @@ public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n     this.beams = new HashMap<>();\n   }\n \n-  private boolean shouldShowBeams(Flag flag) {\n-    FlagDefinition definition = flag.getDefinition();\n-    Config configuration = PGM.get().getConfiguration();\n-    return definition.showBeam() // considers the flag definition's flag beam setting.\n-        && configuration.shouldShowLegacyFlagBeamsGlobally();\n-  }\n-\n   protected Stream<Flag> flags() {\n     FlagMatchModule module = match.getModule(FlagMatchModule.class);\n     return module == null ? Stream.empty() : module.getFlags().stream();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465433019", "bodyText": "Having 100 zombie entities may be a bit too much on the client, and i doubt in any reasonable scenario this will actually be a factor that limits/helps one player or another, maybe 64 because 32 does look a bit on the lower side?", "author": "Pablete1234", "createdAt": "2020-08-05T02:20:16Z", "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -188,7 +204,8 @@ public void run() {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 32)\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably", "originalCommit": "d43a97782ebf10168b3f11b4a15bee6f87769dbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzODIyOA==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465438228", "bodyText": "I get what you mean, however at times a beam of 32 zombies can sometimes be a bit too short for maps which have underground play areas, and these beams at times stuck out not as high as the particle beams.", "author": "jasoryeh", "createdAt": "2020-08-05T02:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzOTUzMg==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465439532", "bodyText": "Yeah, that's why i suggested maybe make it 64, i'm hoping that should be more than enough, 32 can be short at times", "author": "Pablete1234", "createdAt": "2020-08-05T02:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0Mjk3NQ==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465442975", "bodyText": "64 is okay, but I believe the official flag beams(particle beams( are supposed to run 48 blocks tall if I'm reading \n  \n    \n      PGM/core/src/main/java/tc/oc/pgm/flag/state/Spawned.java\n    \n    \n        Lines 62 to 72\n      in\n      7bd6dd2\n    \n    \n    \n    \n\n        \n          \n           .playEffect( \n        \n\n        \n          \n               this.getLocation().clone().add(0, 56, 0), \n        \n\n        \n          \n               Effect.TILE_DUST, \n        \n\n        \n          \n               Material.WOOL.getId(), \n        \n\n        \n          \n               flag.getDyeColor().getWoolData(), \n        \n\n        \n          \n               0.15f, // radius on each axis of the particle ball \n        \n\n        \n          \n               24f, \n        \n\n        \n          \n               0.15f, \n        \n\n        \n          \n               0f, // initial horizontal velocity \n        \n\n        \n          \n               40, // number of particles \n        \n\n        \n          \n               200); // radius in blocks to show particles \n        \n    \n  \n\n correctly, but in-game these particles exist no matter how high you go, they just decrease in amount the higher you go.", "author": "jasoryeh", "createdAt": "2020-08-05T02:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MzMwNw==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465483307", "bodyText": "Some particles aren't an exact science, this ones spawn 56 blocks above the flag, and go \"roughly\" 24 blocks up/down, this all has randomness to it and the particles themselves will spawn randomly and fall too.\nTechnically speaking, particles should spawn from 32 blocks above the flag to 80 blocks above the flag, but they fall and cover a larger area", "author": "Pablete1234", "createdAt": "2020-08-05T05:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMTE5MA==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465811190", "bodyText": "Yea, the particles are weird since they spawn and fall like that. Even though they are supposed to spawn anywhere from 32 to 80 blocks above, theres a weird thing where a few particles still spawn about 130 blocks above the flag (in my testing flag spawns at y=20, particles appear to stop completely above y=150)", "author": "jasoryeh", "createdAt": "2020-08-05T15:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNzI4OA==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467327288", "bodyText": "Changed to 64.", "author": "jasoryeh", "createdAt": "2020-08-07T23:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "701bdc471181940eb164c1a4ca254c2f91aef959", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java b/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\nindex fa3eeaf0..f42bcd6f 100644\n--- a/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\n\n@@ -204,8 +188,7 @@ public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably\n-              // visible (similar amount to amount closest to the flag)\n+          range(0, 32)\n               .mapToObj(i -> new NMSHacks.FakeZombie(match.getWorld(), true, false))\n               .collect(Collectors.toList());\n       show();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MzM0Ng==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465763346", "bodyText": "useLegacyFlagBeams", "author": "Electroid", "createdAt": "2020-08-05T14:21:27Z", "path": "core/src/main/java/tc/oc/pgm/api/Config.java", "diffHunk": "@@ -202,6 +202,14 @@\n    */\n   boolean shouldRefillWool();\n \n+  /**\n+   * Whether the wool flag beams created for older versions (pre-1.8) should be shown to all\n+   * players.\n+   *\n+   * @return If the wool flag beams should be shown to players >=1.8\n+   */\n+  boolean shouldShowLegacyFlagBeamsGlobally();", "originalCommit": "1ba973be8034f7828f5672007990ede248c1cb46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "701bdc471181940eb164c1a4ca254c2f91aef959", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/api/Config.java b/core/src/main/java/tc/oc/pgm/api/Config.java\nindex d0f6b87a..1075fea8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/Config.java\n+++ b/core/src/main/java/tc/oc/pgm/api/Config.java\n\n@@ -202,14 +225,6 @@ public interface Config {\n    */\n   boolean shouldRefillWool();\n \n-  /**\n-   * Whether the wool flag beams created for older versions (pre-1.8) should be shown to all\n-   * players.\n-   *\n-   * @return If the wool flag beams should be shown to players >=1.8\n-   */\n-  boolean shouldShowLegacyFlagBeamsGlobally();\n-\n   /**\n    * Gets a group of players, used for prefixes and player sorting.\n    *\n"}}, {"oid": "701bdc471181940eb164c1a4ca254c2f91aef959", "url": "https://github.com/PGMDev/PGM/commit/701bdc471181940eb164c1a4ca254c2f91aef959", "message": "Add flag beams\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-05T15:06:39Z", "type": "commit"}, {"oid": "9ac473915a8ebfdb8b6dd2138f0f898b2b83118b", "url": "https://github.com/PGMDev/PGM/commit/9ac473915a8ebfdb8b6dd2138f0f898b2b83118b", "message": "Adds configurable legacy wool flag beams for versions > 1.7, increases flag vertical spawn range, and respects flag definition's beam setting.\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-05T15:06:46Z", "type": "commit"}, {"oid": "22581152a3d94fface642243053504a52acd11cb", "url": "https://github.com/PGMDev/PGM/commit/22581152a3d94fface642243053504a52acd11cb", "message": "Remove unused beam check method in LegacyFlagBeamMatchModule\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-05T15:06:46Z", "type": "commit"}, {"oid": "75bb12c2eb1d68df92e0238575fc76d4f65f09b9", "url": "https://github.com/PGMDev/PGM/commit/75bb12c2eb1d68df92e0238575fc76d4f65f09b9", "message": "Remove unused import.\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-05T15:06:46Z", "type": "commit"}, {"oid": "75bb12c2eb1d68df92e0238575fc76d4f65f09b9", "url": "https://github.com/PGMDev/PGM/commit/75bb12c2eb1d68df92e0238575fc76d4f65f09b9", "message": "Remove unused import.\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-05T15:06:46Z", "type": "forcePushed"}, {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0", "url": "https://github.com/PGMDev/PGM/commit/9d906f1586ba0bab42a06158ce456245f65f4fc0", "message": "Move gameplay.global-legacy-flag-beams to ui.flag-beams;\nshouldShowLegacyFlagBeamsGlobally -> useLegacyFlagBeams;\nglobal legacy beams off by default.\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-05T15:20:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NTE4NQ==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r466485185", "bodyText": "Can we not juse *?", "author": "Electroid", "createdAt": "2020-08-06T15:12:23Z", "path": "core/src/main/java/tc/oc/pgm/flag/Flag.java", "diffHunk": "@@ -40,11 +41,7 @@\n import tc.oc.pgm.api.region.Region;\n import tc.oc.pgm.flag.event.FlagCaptureEvent;\n import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n-import tc.oc.pgm.flag.state.BaseState;\n-import tc.oc.pgm.flag.state.Captured;\n-import tc.oc.pgm.flag.state.Completed;\n-import tc.oc.pgm.flag.state.Returned;\n-import tc.oc.pgm.flag.state.State;\n+import tc.oc.pgm.flag.state.*;", "originalCommit": "9d906f1586ba0bab42a06158ce456245f65f4fc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNzIxNA==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467327214", "bodyText": "As you wish.", "author": "jasoryeh", "createdAt": "2020-08-07T23:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NTE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7f7c6e7cc5e151ec86b474fe4ccdcdb097102796", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/flag/Flag.java b/core/src/main/java/tc/oc/pgm/flag/Flag.java\nindex b6b37c54..669dc8c9 100644\n--- a/core/src/main/java/tc/oc/pgm/flag/Flag.java\n+++ b/core/src/main/java/tc/oc/pgm/flag/Flag.java\n\n@@ -41,7 +41,12 @@ import tc.oc.pgm.api.player.ParticipantState;\n import tc.oc.pgm.api.region.Region;\n import tc.oc.pgm.flag.event.FlagCaptureEvent;\n import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n-import tc.oc.pgm.flag.state.*;\n+import tc.oc.pgm.flag.state.BaseState;\n+import tc.oc.pgm.flag.state.Captured;\n+import tc.oc.pgm.flag.state.Completed;\n+import tc.oc.pgm.flag.state.Returned;\n+import tc.oc.pgm.flag.state.Spawned;\n+import tc.oc.pgm.flag.state.State;\n import tc.oc.pgm.goals.TouchableGoal;\n import tc.oc.pgm.goals.events.GoalCompleteEvent;\n import tc.oc.pgm.goals.events.GoalEvent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NTYyNw==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r466485627", "bodyText": "flagBeams", "author": "Electroid", "createdAt": "2020-08-06T15:13:06Z", "path": "core/src/main/java/tc/oc/pgm/PGMConfig.java", "diffHunk": "@@ -67,6 +67,7 @@\n \n   // gameplay.*\n   private final boolean woolRefill;\n+  private final boolean globalLegacyFlagBeams;", "originalCommit": "9d906f1586ba0bab42a06158ce456245f65f4fc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2ba60611c586c76ef4f4232ac831adc5bf2c399", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/PGMConfig.java b/core/src/main/java/tc/oc/pgm/PGMConfig.java\nindex a3811b3c..cb01ee70 100644\n--- a/core/src/main/java/tc/oc/pgm/PGMConfig.java\n+++ b/core/src/main/java/tc/oc/pgm/PGMConfig.java\n\n@@ -67,7 +67,7 @@ public final class PGMConfig implements Config {\n \n   // gameplay.*\n   private final boolean woolRefill;\n-  private final boolean globalLegacyFlagBeams;\n+  private final boolean flagBeams;\n \n   // join.*\n   private final long minPlayers;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxODY5OQ==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467318699", "bodyText": "can both be final right?", "author": "KingOfSquares", "createdAt": "2020-08-07T22:53:31Z", "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package tc.oc.pgm.flag;\n+\n+import static java.util.stream.IntStream.range;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.player.PlayerChangedWorldEvent;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchStartEvent;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.events.PlayerJoinMatchEvent;\n+import tc.oc.pgm.events.PlayerJoinPartyEvent;\n+import tc.oc.pgm.events.PlayerLeaveMatchEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.flag.state.Spawned;\n+import tc.oc.pgm.util.bukkit.ViaUtils;\n+import tc.oc.pgm.util.inventory.ItemBuilder;\n+import tc.oc.pgm.util.nms.NMSHacks;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n+\n+  private static int UPDATE_DELAY = 0;\n+  private static int UPDATE_FREQUENCY = 50;", "originalCommit": "9d906f1586ba0bab42a06158ce456245f65f4fc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMjcxOA==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467322718", "bodyText": "Was going to play around with this a bit before, but I guess it can be.", "author": "jasoryeh", "createdAt": "2020-08-07T23:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxODY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bce78cd0dc13a3a9e5725477c9d35ffc93a2bcd5", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java b/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\nindex e747dca0..222aa268 100644\n--- a/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\n\n@@ -40,8 +40,8 @@ import tc.oc.pgm.util.nms.NMSHacks;\n @ListenerScope(MatchScope.LOADED)\n public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n \n-  private static int UPDATE_DELAY = 0;\n-  private static int UPDATE_FREQUENCY = 50;\n+  private final static int UPDATE_DELAY = 0;\n+  private final static int UPDATE_FREQUENCY = 50;\n \n   private UpdateTask task;\n   private final Match match;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxODcxMw==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467318713", "bodyText": "I think there is some typo here? \ud83e\udd14", "author": "KingOfSquares", "createdAt": "2020-08-07T22:53:35Z", "path": "core/src/main/java/tc/oc/pgm/api/Modules.java", "diffHunk": "@@ -159,6 +160,9 @@ static void registerAll() {\n     register(StatsMatchModule.class, StatsMatchModule::new);\n     register(MapmakerMatchModule.class, MapmakerMatchModule::new);\n \n+    // Modules that depend help older player versions", "originalCommit": "9d906f1586ba0bab42a06158ce456245f65f4fc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzI0Ng==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467323246", "bodyText": "\ud83e\udd14", "author": "jasoryeh", "createdAt": "2020-08-07T23:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxODcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "0d4b9123f36f28af4ec9f25e1c36efe5cc8eed04", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/api/Modules.java b/core/src/main/java/tc/oc/pgm/api/Modules.java\nindex 4c31797c..ffbb417d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/Modules.java\n+++ b/core/src/main/java/tc/oc/pgm/api/Modules.java\n\n@@ -160,7 +160,7 @@ public interface Modules {\n     register(StatsMatchModule.class, StatsMatchModule::new);\n     register(MapmakerMatchModule.class, MapmakerMatchModule::new);\n \n-    // Modules that depend help older player versions\n+    // Modules that help older player versions\n     register(LegacyFlagBeamMatchModule.class, LegacyFlagBeamMatchModule::new);\n \n     // Community MatchModules\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMTIyMw==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467321223", "bodyText": "If I am understanding this correctly the carrying player can not see their own beam?", "author": "KingOfSquares", "createdAt": "2020-08-07T23:04:39Z", "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package tc.oc.pgm.flag;\n+\n+import static java.util.stream.IntStream.range;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.player.PlayerChangedWorldEvent;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchStartEvent;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.events.PlayerJoinMatchEvent;\n+import tc.oc.pgm.events.PlayerJoinPartyEvent;\n+import tc.oc.pgm.events.PlayerLeaveMatchEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.flag.state.Spawned;\n+import tc.oc.pgm.util.bukkit.ViaUtils;\n+import tc.oc.pgm.util.inventory.ItemBuilder;\n+import tc.oc.pgm.util.nms.NMSHacks;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n+\n+  private static int UPDATE_DELAY = 0;\n+  private static int UPDATE_FREQUENCY = 50;\n+\n+  private UpdateTask task;\n+  private final Match match;\n+  private final Map<MatchPlayer, Map<Flag, Beam>> beams;\n+\n+  public LegacyFlagBeamMatchModule(Match match) {\n+    this.match = match;\n+    this.beams = new HashMap<>();\n+  }\n+\n+  protected Stream<Flag> flags() {\n+    FlagMatchModule module = match.getModule(FlagMatchModule.class);\n+    return module == null ? Stream.empty() : module.getFlags().stream();\n+  }\n+\n+  protected void retrackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> retrackFlag(flag, p));\n+  }\n+\n+  protected void retrackFlag(Flag flag, MatchPlayer player) {\n+    untrackFlag(flag, player);\n+    trackFlag(flag, player);\n+  }\n+\n+  protected void trackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> trackFlag(flag, p));\n+  }\n+\n+  protected void trackFlag(Flag flag, MatchPlayer player) {\n+    Map<Flag, Beam> flags = beams.containsKey(player) ? beams.get(player) : new HashMap<>();\n+    if (flags.containsKey(flag) // beam duplication check\n+        || !flag.getDefinition().showBeam() // considers the flag definition's flag beam setting.\n+        || (ViaUtils.getProtocolVersion(player.getBukkit())\n+                > ViaUtils.VERSION_1_7 // version greater than 1.7 &\n+            && !PGM.get()\n+                .getConfiguration()\n+                .useLegacyFlagBeams())) { // we shouldn't show to >1.7 players\n+      return;\n+    }\n+\n+    flags.put(flag, new Beam(flag, player.getBukkit()));\n+\n+    beams.put(player, flags);\n+  }\n+\n+  protected void untrackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> untrackFlag(flag, p));\n+  }\n+\n+  protected void untrackFlag(Flag flag, MatchPlayer player) {\n+    if (beams.containsKey(player)) {\n+      Beam beam = beams.get(player).get(flag);\n+      if (beam != null) {\n+        beams.get(player).remove(flag).hide();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void enable() {\n+    flags().filter(flag -> flag.getState() instanceof Spawned).forEach(this::trackFlag);\n+    this.task = new UpdateTask();\n+  }\n+\n+  @Override\n+  public void disable() {\n+    flags().forEach(this::untrackFlag);\n+    beams.clear();\n+    this.task.stop();\n+  }\n+\n+  // retrackFlags when players join a party so players are able to see the wool beams\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerJoinParty(PlayerJoinPartyEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> retrackFlag(flag, event.getPlayer()));\n+  }\n+\n+  // retrackFlags when players switch worlds\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerChangedWorld(PlayerChangedWorldEvent event) {\n+    try {\n+      flags()\n+          .filter(flag -> flag.getState() instanceof Spawned)\n+          .forEach(flag -> retrackFlag(flag, match.getParticipant(event.getPlayer())));\n+    } catch (NullPointerException e) {\n+      /* ignore */\n+    }\n+  }\n+\n+  // retrackFlags when match starts to ensure all players can see flag beams\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onMatchStart(MatchStartEvent event) {\n+    flags().filter(flag -> flag.getState() instanceof Spawned).forEach(flag -> retrackFlag(flag));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerJoinMatch(PlayerJoinMatchEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> trackFlag(flag, event.getPlayer()));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerLeaveMatch(PlayerLeaveMatchEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> untrackFlag(flag, event.getPlayer()));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onFlagStateChange(FlagStateChangeEvent event) {\n+    Flag flag = event.getFlag();\n+    untrackFlag(flag);\n+    if (event.getNewState() instanceof Spawned) {\n+      trackFlag(flag);\n+    }\n+  }\n+\n+  private class UpdateTask implements Runnable {\n+\n+    private final Future<?> task;\n+\n+    private UpdateTask() {\n+      this.task =\n+          match\n+              .getExecutor(MatchScope.RUNNING)\n+              .scheduleAtFixedRate(this, UPDATE_DELAY, UPDATE_FREQUENCY, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public void stop() {\n+      this.task.cancel(true);\n+    }\n+\n+    @Override\n+    public void run() {\n+      ImmutableList.copyOf(beams.values()).forEach(flags -> flags.forEach((f, b) -> b.update()));\n+    }\n+  }\n+\n+  class Beam {\n+\n+    final Flag flag;\n+    final Player bukkit;\n+    final List<NMSHacks.FakeZombie> segments;\n+\n+    Beam(Flag flag, Player bukkit) {\n+      this.flag = flag;\n+      this.bukkit = bukkit;\n+      this.segments =\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably\n+              // visible (similar amount to amount closest to the flag)\n+              .mapToObj(i -> new NMSHacks.FakeZombie(match.getWorld(), true, false))\n+              .collect(Collectors.toList());\n+      show();\n+    }\n+\n+    Optional<Player> carrier() {\n+      return Optional.ofNullable(\n+          flag.getState() instanceof Carried\n+              ? ((Carried) flag.getState()).getCarrier().getBukkit()\n+              : null);\n+    }\n+\n+    Optional<Location> location() {\n+      if (!flag.getLocation().isPresent()) {\n+        return Optional.empty();\n+      }\n+\n+      Location location = flag.getLocation().get().clone();\n+      location.setPitch(0);\n+      return Optional.of(location);\n+    }\n+\n+    ItemStack wool() {\n+      return new ItemBuilder()\n+          .material(Material.WOOL)\n+          .enchant(Enchantment.DURABILITY, 1)\n+          .color(flag.getDyeColor())\n+          .build();\n+    }\n+\n+    void show() {\n+      if (carrier().map(carrier -> carrier.equals(bukkit)).orElse(false)) return;", "originalCommit": "9d906f1586ba0bab42a06158ce456245f65f4fc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNDMzOQ==", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467324339", "bodyText": "I believe if the flag can be seen by the carrier then there might be a zombie in them which can block the vision.", "author": "jasoryeh", "createdAt": "2020-08-07T23:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMTIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "bce78cd0dc13a3a9e5725477c9d35ffc93a2bcd5", "chunk": "diff --git a/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java b/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\nindex e747dca0..222aa268 100644\n--- a/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java\n\n@@ -40,8 +40,8 @@ import tc.oc.pgm.util.nms.NMSHacks;\n @ListenerScope(MatchScope.LOADED)\n public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n \n-  private static int UPDATE_DELAY = 0;\n-  private static int UPDATE_FREQUENCY = 50;\n+  private final static int UPDATE_DELAY = 0;\n+  private final static int UPDATE_FREQUENCY = 50;\n \n   private UpdateTask task;\n   private final Match match;\n"}}, {"oid": "e2ba60611c586c76ef4f4232ac831adc5bf2c399", "url": "https://github.com/PGMDev/PGM/commit/e2ba60611c586c76ef4f4232ac831adc5bf2c399", "message": "Rename flag beam configuration var\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-07T23:12:21Z", "type": "commit"}, {"oid": "0d4b9123f36f28af4ec9f25e1c36efe5cc8eed04", "url": "https://github.com/PGMDev/PGM/commit/0d4b9123f36f28af4ec9f25e1c36efe5cc8eed04", "message": "Fix legacy support module comment\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-07T23:13:25Z", "type": "commit"}, {"oid": "7f7c6e7cc5e151ec86b474fe4ccdcdb097102796", "url": "https://github.com/PGMDev/PGM/commit/7f7c6e7cc5e151ec86b474fe4ccdcdb097102796", "message": "De-wildcard flag state imports\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-07T23:15:07Z", "type": "commit"}, {"oid": "bce78cd0dc13a3a9e5725477c9d35ffc93a2bcd5", "url": "https://github.com/PGMDev/PGM/commit/bce78cd0dc13a3a9e5725477c9d35ffc93a2bcd5", "message": "Make update delay and frequency magic vars final\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-07T23:16:35Z", "type": "commit"}, {"oid": "fb9c2335fad7cf56ec4494003555eea1f3186f7c", "url": "https://github.com/PGMDev/PGM/commit/fb9c2335fad7cf56ec4494003555eea1f3186f7c", "message": "Limit flag height to 64 blocks\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-07T23:29:18Z", "type": "commit"}, {"oid": "21c6b46a4fd6afcb0105b9bb1bff2a438dd257df", "url": "https://github.com/PGMDev/PGM/commit/21c6b46a4fd6afcb0105b9bb1bff2a438dd257df", "message": "Fix spaced out config comment\n\nSigned-off-by: Jason Ho <jason@jasonho.tk>", "committedDate": "2020-08-07T23:29:21Z", "type": "commit"}]}