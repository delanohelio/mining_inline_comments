{"pr_number": 178, "pr_title": "Cleanup sync createWorld mess", "pr_createdAt": "2020-01-02T18:07:17Z", "pr_url": "https://github.com/PGMDev/PGM/pull/178", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3MjE4OA==", "url": "https://github.com/PGMDev/PGM/pull/178#discussion_r362572188", "bodyText": "Logger?", "author": "Electroid", "createdAt": "2020-01-02T18:12:51Z", "path": "src/main/java/tc/oc/pgm/match/MatchManagerImpl.java", "diffHunk": "@@ -197,39 +197,30 @@ private World createMatchWorld(String worldName, MapInfo info, TerrainModule ter\n   }\n \n   /**\n-   * Creates a new world, wich must be done on the primary thread. If already running on the primary\n-   * thread, calls createWorld, otherwise, starts a sync task to run create world, and waits until\n-   * it's done.\n+   * Creates a new world, which must be done on the primary thread. If already running on the\n+   * primary thread, calls createWorld, otherwise, starts a sync task to run create world, and waits\n+   * until it's done.\n    *\n    * @param creator The creator for the world\n    * @return A world if it was able to be created, null otherwise\n    */\n   private World createWorld(final WorldCreator creator) {\n     if (server.isPrimaryThread()) return server.createWorld(creator);\n-\n-    // FIXME: This is pretty dirty, there must be a better way to run & wait on main\n-    final Object LOCK = new Object();\n+    final CountDownLatch latch = new CountDownLatch(1);\n     final AtomicReference<World> world = new AtomicReference<>();\n-    final AtomicBoolean isDone = new AtomicBoolean();\n     PGM.get()\n         .getServer()\n         .getScheduler()\n         .runTask(\n             PGM.get(),\n             () -> {\n               world.set(server.createWorld(creator));\n-              isDone.set(true);\n-              synchronized (LOCK) {\n-                LOCK.notifyAll();\n-              }\n+              latch.countDown();\n             });\n-    while (!isDone.get()) {\n-      synchronized (LOCK) {\n-        try {\n-          LOCK.wait();\n-        } catch (InterruptedException ignore) {\n-        }\n-      }\n+    try {\n+      latch.await();\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();", "originalCommit": "0313bd663f2fb5c8d9edf2bdfb069ac809247c63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3MjQ1MQ==", "url": "https://github.com/PGMDev/PGM/pull/178#discussion_r362572451", "bodyText": "This is the main thread, if it's getting interrupted it's likely shutting down the server anyways, but will add the logger", "author": "Pablete1234", "createdAt": "2020-01-02T18:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3MjE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3NDQ1NQ==", "url": "https://github.com/PGMDev/PGM/pull/178#discussion_r362574455", "bodyText": "logger.log(Level.SEVERE, \"...\", e)\nWe want to always use the logger for when I add Sentry/other logging support.", "author": "Electroid", "createdAt": "2020-01-02T18:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3MjE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3NDYzOQ==", "url": "https://github.com/PGMDev/PGM/pull/178#discussion_r362574639", "bodyText": "Had already changed it, was failing to push stuff properly", "author": "Pablete1234", "createdAt": "2020-01-02T18:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3MjE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8a11e3f74b06bf8add99a44d1c17c7e3ec5f3efe", "chunk": "diff --git a/src/main/java/tc/oc/pgm/match/MatchManagerImpl.java b/src/main/java/tc/oc/pgm/match/MatchManagerImpl.java\nindex 8609f57..cfde2d3 100644\n--- a/src/main/java/tc/oc/pgm/match/MatchManagerImpl.java\n+++ b/src/main/java/tc/oc/pgm/match/MatchManagerImpl.java\n\n@@ -220,6 +220,7 @@ public class MatchManagerImpl implements MatchManager, MultiAudience {\n     try {\n       latch.await();\n     } catch (InterruptedException e) {\n+      logger.severe(\"World creation was interrupted, is the server shutting down?\");\n       e.printStackTrace();\n     }\n     return world.get();\n"}}, {"oid": "8a11e3f74b06bf8add99a44d1c17c7e3ec5f3efe", "url": "https://github.com/PGMDev/PGM/commit/8a11e3f74b06bf8add99a44d1c17c7e3ec5f3efe", "message": "Cleanup sync createWorld mess\n\nSigned-off-by: Pablete1234 <pabloherrerapalacio@gmail.com>", "committedDate": "2020-01-02T18:16:26Z", "type": "forcePushed"}, {"oid": "c14e363960ff92c15938817a3d21324a7a5421d4", "url": "https://github.com/PGMDev/PGM/commit/c14e363960ff92c15938817a3d21324a7a5421d4", "message": "Cleanup sync createWorld mess\n\nSigned-off-by: Pablete1234 <pabloherrerapalacio@gmail.com>", "committedDate": "2020-01-02T18:18:01Z", "type": "forcePushed"}, {"oid": "f34c6e7f2f15bd45f9d423fc529a946fce59627b", "url": "https://github.com/PGMDev/PGM/commit/f34c6e7f2f15bd45f9d423fc529a946fce59627b", "message": "Cleanup sync createWorld mess\n\nSigned-off-by: Pablete1234 <pabloherrerapalacio@gmail.com>", "committedDate": "2020-01-02T18:18:37Z", "type": "commit"}, {"oid": "f34c6e7f2f15bd45f9d423fc529a946fce59627b", "url": "https://github.com/PGMDev/PGM/commit/f34c6e7f2f15bd45f9d423fc529a946fce59627b", "message": "Cleanup sync createWorld mess\n\nSigned-off-by: Pablete1234 <pabloherrerapalacio@gmail.com>", "committedDate": "2020-01-02T18:18:37Z", "type": "forcePushed"}]}