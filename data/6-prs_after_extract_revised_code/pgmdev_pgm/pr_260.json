{"pr_number": 260, "pr_title": "Add Observer Tools", "pr_createdAt": "2020-01-25T19:30:04Z", "pr_url": "https://github.com/PGMDev/PGM/pull/260", "timeline": [{"oid": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c", "url": "https://github.com/PGMDev/PGM/commit/f690a7af8898b2a1c4a9191cd82a0ba56694c04c", "message": "Add Observer Tools\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-25T19:20:50Z", "type": "commit"}, {"oid": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b", "url": "https://github.com/PGMDev/PGM/commit/bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b", "message": "Fix missing documentation for MatchPlayer\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-25T19:39:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjA2Ng==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952066", "bodyText": "Keep it private or protected, please.", "author": "TheMolkaPL", "createdAt": "2020-01-25T19:45:12Z", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package tc.oc.pgm.gui;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryGUI {\n+\n+  /*\n+   * Code extracted from PickerMatchModule to allow for reuse\n+   */\n+\n+  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+\n+  public String title; // Title of the inventory", "originalCommit": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjQxMw==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952413", "bodyText": "Thanks for the suggestions @TheMolkaPL !", "author": "applenick", "createdAt": "2020-01-25T19:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "49d0164aab30e777da6b560ec1388a0db861fd16", "chunk": "diff --git a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\nindex 9d7dfd38..dd584e4e 100644\n--- a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n+++ b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n\n@@ -1,5 +1,8 @@\n package tc.oc.pgm.gui;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import com.google.common.collect.Sets;\n import java.util.Set;\n import javax.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjA4Mg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952082", "bodyText": "checkNotNull please", "author": "TheMolkaPL", "createdAt": "2020-01-25T19:45:22Z", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package tc.oc.pgm.gui;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryGUI {\n+\n+  /*\n+   * Code extracted from PickerMatchModule to allow for reuse\n+   */\n+\n+  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+\n+  public String title; // Title of the inventory\n+  private int size; // Size of inventory\n+\n+  public InventoryGUI(String title, int size) {\n+    this.title = title;", "originalCommit": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49d0164aab30e777da6b560ec1388a0db861fd16", "chunk": "diff --git a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\nindex 9d7dfd38..dd584e4e 100644\n--- a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n+++ b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n\n@@ -1,5 +1,8 @@\n package tc.oc.pgm.gui;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import com.google.common.collect.Sets;\n import java.util.Set;\n import javax.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjEyNA==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952124", "bodyText": "Check if the size is positive and can be divided by 9.", "author": "TheMolkaPL", "createdAt": "2020-01-25T19:45:51Z", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package tc.oc.pgm.gui;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryGUI {\n+\n+  /*\n+   * Code extracted from PickerMatchModule to allow for reuse\n+   */\n+\n+  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+\n+  public String title; // Title of the inventory\n+  private int size; // Size of inventory\n+\n+  public InventoryGUI(String title, int size) {\n+    this.title = title;\n+    this.size = size;", "originalCommit": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49d0164aab30e777da6b560ec1388a0db861fd16", "chunk": "diff --git a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\nindex 9d7dfd38..dd584e4e 100644\n--- a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n+++ b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n\n@@ -1,5 +1,8 @@\n package tc.oc.pgm.gui;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import com.google.common.collect.Sets;\n import java.util.Set;\n import javax.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjI5Mg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952292", "bodyText": "This should be translatable.", "author": "TheMolkaPL", "createdAt": "2020-01-25T19:49:31Z", "path": "src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class FlySpeedTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.flyspeed\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_RED;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component flySpeed = FlySpeed.of(player.getBukkit().getFlySpeed()).getName();\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.flyspeed.lore\", flySpeed)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return Material.FEATHER;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryGUI menu, MatchPlayer player) {\n+    incrementSpeed(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  private void incrementSpeed(MatchPlayer player) {\n+    FlySpeed speed = FlySpeed.of(player.getBukkit().getFlySpeed());\n+    player.getBukkit().setFlySpeed(speed.getNext().getValue());\n+  }\n+\n+  public static enum FlySpeed {\n+    NORMAL(ChatColor.YELLOW, 0.1f),\n+    FAST(ChatColor.GOLD, 0.25f),\n+    FASTER(ChatColor.RED, 0.5f),\n+    HYPERSPEED(ChatColor.LIGHT_PURPLE, 0.9f);\n+\n+    private ChatColor color;\n+    private float value;\n+\n+    FlySpeed(ChatColor color, float value) {\n+      this.color = color;\n+      this.value = value;\n+    }\n+\n+    public float getValue() {\n+      return value;\n+    }\n+\n+    public Component getName() {\n+      return new PersonalizedText(WordUtils.capitalize(this.name().toLowerCase())).color(color);\n+    }", "originalCommit": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49d0164aab30e777da6b560ec1388a0db861fd16", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java b/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java\nindex 29da3528..06e716ea 100644\n--- a/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java\n+++ b/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java\n\n@@ -3,11 +3,9 @@ package tc.oc.pgm.observers.tools;\n import com.google.common.collect.Lists;\n import java.util.List;\n import net.md_5.bungee.api.ChatColor;\n-import org.apache.commons.lang.WordUtils;\n import org.bukkit.Material;\n import tc.oc.component.Component;\n import tc.oc.component.render.ComponentRenderers;\n-import tc.oc.component.types.PersonalizedText;\n import tc.oc.component.types.PersonalizedTranslatable;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.gui.InventoryGUI;\n"}}, {"oid": "49d0164aab30e777da6b560ec1388a0db861fd16", "url": "https://github.com/PGMDev/PGM/commit/49d0164aab30e777da6b560ec1388a0db861fd16", "message": "Clean up InventoryGUI; add translations to FlySpeedTool\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-26T01:54:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2ODQ3NQ==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370968475", "bodyText": "You forgot final :p", "author": "TheMolkaPL", "createdAt": "2020-01-26T02:04:12Z", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -13,18 +16,27 @@\n \n public abstract class InventoryGUI {\n \n-  /*\n-   * Code extracted from PickerMatchModule to allow for reuse\n-   */\n-\n-  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+  protected static int ROW_WIDTH = 9; // Number of columns per row\n+  protected static int MAX_ROWS = 6; // Max allowed row size", "originalCommit": "49d0164aab30e777da6b560ec1388a0db861fd16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2ODc3MA==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370968770", "bodyText": "\ud83e\udd26\u200d\u2642 Haha, whoops.", "author": "applenick", "createdAt": "2020-01-26T02:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2ODQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5969f31828c357d291d4a88f91956b4c4a4af708", "chunk": "diff --git a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\nindex dd584e4e..dde84ba9 100644\n--- a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n+++ b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n\n@@ -16,12 +16,13 @@ import tc.oc.util.StringUtils;\n \n public abstract class InventoryGUI {\n \n-  protected static int ROW_WIDTH = 9; // Number of columns per row\n-  protected static int MAX_ROWS = 6; // Max allowed row size\n+  protected static final int ROW_WIDTH = 9; // Number of columns per row\n+  protected static final int MAX_ROWS = 6; // Max allowed row size\n \n-  private Set<MatchPlayer> viewing = Sets.newHashSet(); // Set of players who are viewing the gui\n-  private String title; // Title of the inventory\n-  private int rows; // The # of rows in the inventory\n+  private final Set<MatchPlayer> viewing =\n+      Sets.newHashSet(); // Set of players who are viewing the gui\n+  private final String title; // Title of the inventory\n+  private final int rows; // The # of rows in the inventory\n \n   /**\n    * InventoryGUI: An easy way to make an GUI menu that users can interact with.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2ODU3NA==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370968574", "bodyText": "I think all of these can be final?", "author": "TheMolkaPL", "createdAt": "2020-01-26T02:06:35Z", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -13,18 +16,27 @@\n \n public abstract class InventoryGUI {\n \n-  /*\n-   * Code extracted from PickerMatchModule to allow for reuse\n-   */\n-\n-  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+  protected static int ROW_WIDTH = 9; // Number of columns per row\n+  protected static int MAX_ROWS = 6; // Max allowed row size\n \n-  public String title; // Title of the inventory\n-  private int size; // Size of inventory\n+  private Set<MatchPlayer> viewing = Sets.newHashSet(); // Set of players who are viewing the gui\n+  private String title; // Title of the inventory\n+  private int rows; // The # of rows in the inventory", "originalCommit": "49d0164aab30e777da6b560ec1388a0db861fd16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5969f31828c357d291d4a88f91956b4c4a4af708", "chunk": "diff --git a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\nindex dd584e4e..dde84ba9 100644\n--- a/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n+++ b/src/main/java/tc/oc/pgm/gui/InventoryGUI.java\n\n@@ -16,12 +16,13 @@ import tc.oc.util.StringUtils;\n \n public abstract class InventoryGUI {\n \n-  protected static int ROW_WIDTH = 9; // Number of columns per row\n-  protected static int MAX_ROWS = 6; // Max allowed row size\n+  protected static final int ROW_WIDTH = 9; // Number of columns per row\n+  protected static final int MAX_ROWS = 6; // Max allowed row size\n \n-  private Set<MatchPlayer> viewing = Sets.newHashSet(); // Set of players who are viewing the gui\n-  private String title; // Title of the inventory\n-  private int rows; // The # of rows in the inventory\n+  private final Set<MatchPlayer> viewing =\n+      Sets.newHashSet(); // Set of players who are viewing the gui\n+  private final String title; // Title of the inventory\n+  private final int rows; // The # of rows in the inventory\n \n   /**\n    * InventoryGUI: An easy way to make an GUI menu that users can interact with.\n"}}, {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708", "url": "https://github.com/PGMDev/PGM/commit/5969f31828c357d291d4a88f91956b4c4a4af708", "message": "Make InventoryGUI variables final\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-26T02:15:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTAyNg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969026", "bodyText": "We should keep a comment here saying that this command is from WorldEdit and it unstucks the player. Also having worldedit: there would be cool.", "author": "TheMolkaPL", "createdAt": "2020-01-26T02:21:06Z", "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))\n+            .color(ChatColor.AQUA);\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.gamemode.lore\", gamemode)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return isCreative(player) ? Material.SEA_LANTERN : Material.PRISMARINE;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryGUI menu, MatchPlayer player) {\n+    toggleObserverGameMode(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  public void toggleObserverGameMode(MatchPlayer player) {\n+    player.setGameMode(getOppositeMode(player.getGameMode()));\n+    if (player.getGameMode() == GameMode.SPECTATOR) {\n+      player.sendWarning(getToggleMessage(), true);\n+    } else if (isCreative(player)) {\n+      player.getBukkit().performCommand(\"!\");", "originalCommit": "5969f31828c357d291d4a88f91956b4c4a4af708", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d2941c19dd333cee77f1fa2cfd0f0ff89855cb5", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java b/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\nindex 394a3d09..96ffaa5f 100644\n--- a/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\n+++ b/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\n\n@@ -56,7 +56,8 @@ public class GamemodeTool implements ObserverTool {\n     if (player.getGameMode() == GameMode.SPECTATOR) {\n       player.sendWarning(getToggleMessage(), true);\n     } else if (isCreative(player)) {\n-      player.getBukkit().performCommand(\"!\");\n+      // Note: This performs the WorldEdit command to ensure the player is not stuck\n+      player.getBukkit().performCommand(\"worldedit:!\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969066", "bodyText": "I'm sure there is a translation for this in the client for th\u00ecs. Can we use it?", "author": "TheMolkaPL", "createdAt": "2020-01-26T02:22:32Z", "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))", "originalCommit": "5969f31828c357d291d4a88f91956b4c4a4af708", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTg1NQ==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969855", "bodyText": "Curious. I\u2019m not familiar with the client translations, could you explain?", "author": "applenick", "createdAt": "2020-01-26T02:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTk4NA==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969984", "bodyText": "These are the values in the 1.8.9 en_US.lang file:\ngameMode.survival=Survival Mode\ngameMode.creative=Creative Mode\ngameMode.adventure=Adventure Mode\ngameMode.spectator=Spectator Mode\n\nAlternatively:\nselectWorld.gameMode.survival=Survival\nselectWorld.gameMode.creative=Creative\nselectWorld.gameMode.adventure=Adventure\nselectWorld.gameMode.spectator=Spectator", "author": "Meeples10", "createdAt": "2020-01-26T02:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MDE0Mg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370970142", "bodyText": "Thanks @Meeples10!\nAh I understand now, that\u2019s very useful \ud83d\udc4d", "author": "applenick", "createdAt": "2020-01-26T02:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MDc3NQ==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370970775", "bodyText": "Have you confirmed that this actually works? I'm not sure if PGM translates vanilla messages.", "author": "Meeples10", "createdAt": "2020-01-26T03:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8d2941c19dd333cee77f1fa2cfd0f0ff89855cb5", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java b/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\nindex 394a3d09..96ffaa5f 100644\n--- a/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\n+++ b/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\n\n@@ -56,7 +56,8 @@ public class GamemodeTool implements ObserverTool {\n     if (player.getGameMode() == GameMode.SPECTATOR) {\n       player.sendWarning(getToggleMessage(), true);\n     } else if (isCreative(player)) {\n-      player.getBukkit().performCommand(\"!\");\n+      // Note: This performs the WorldEdit command to ensure the player is not stuck\n+      player.getBukkit().performCommand(\"worldedit:!\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTExMg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969112", "bodyText": "Should be translatable.", "author": "TheMolkaPL", "createdAt": "2020-01-26T02:23:39Z", "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))\n+            .color(ChatColor.AQUA);\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.gamemode.lore\", gamemode)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return isCreative(player) ? Material.SEA_LANTERN : Material.PRISMARINE;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryGUI menu, MatchPlayer player) {\n+    toggleObserverGameMode(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  public void toggleObserverGameMode(MatchPlayer player) {\n+    player.setGameMode(getOppositeMode(player.getGameMode()));\n+    if (player.getGameMode() == GameMode.SPECTATOR) {\n+      player.sendWarning(getToggleMessage(), true);\n+    } else if (isCreative(player)) {\n+      player.getBukkit().performCommand(\"!\");\n+    }\n+  }\n+\n+  private boolean isCreative(MatchPlayer player) {\n+    return player.getGameMode().equals(GameMode.CREATIVE);\n+  }\n+\n+  private Component getToggleMessage() {\n+    Component command =\n+        new PersonalizedText(\"/tools\")\n+            .color(ChatColor.AQUA)\n+            .hoverEvent(\n+                HoverEvent.Action.SHOW_TEXT,\n+                new PersonalizedText(\"Click to open tool menu\").color(ChatColor.GRAY).render())", "originalCommit": "5969f31828c357d291d4a88f91956b4c4a4af708", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d2941c19dd333cee77f1fa2cfd0f0ff89855cb5", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java b/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\nindex 394a3d09..96ffaa5f 100644\n--- a/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\n+++ b/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\n\n@@ -56,7 +56,8 @@ public class GamemodeTool implements ObserverTool {\n     if (player.getGameMode() == GameMode.SPECTATOR) {\n       player.sendWarning(getToggleMessage(), true);\n     } else if (isCreative(player)) {\n-      player.getBukkit().performCommand(\"!\");\n+      // Note: This performs the WorldEdit command to ensure the player is not stuck\n+      player.getBukkit().performCommand(\"worldedit:!\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTEyOA==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969128", "bodyText": "Should be translatable.", "author": "TheMolkaPL", "createdAt": "2020-01-26T02:24:08Z", "path": "src/main/java/tc/oc/pgm/observers/tools/NightVisionTool.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class NightVisionTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.nightvision\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_PURPLE;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component status =\n+        new PersonalizedText(hasNightVision(player) ? \"On\" : \"Off\")", "originalCommit": "5969f31828c357d291d4a88f91956b4c4a4af708", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d2941c19dd333cee77f1fa2cfd0f0ff89855cb5", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/tools/NightVisionTool.java b/src/main/java/tc/oc/pgm/observers/tools/NightVisionTool.java\nindex b3d2158b..80963afb 100644\n--- a/src/main/java/tc/oc/pgm/observers/tools/NightVisionTool.java\n+++ b/src/main/java/tc/oc/pgm/observers/tools/NightVisionTool.java\n\n@@ -8,7 +8,6 @@ import org.bukkit.potion.PotionEffect;\n import org.bukkit.potion.PotionEffectType;\n import tc.oc.component.Component;\n import tc.oc.component.render.ComponentRenderers;\n-import tc.oc.component.types.PersonalizedText;\n import tc.oc.component.types.PersonalizedTranslatable;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.gui.InventoryGUI;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTEzNg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969136", "bodyText": "Should be translatable.", "author": "TheMolkaPL", "createdAt": "2020-01-26T02:24:47Z", "path": "src/main/java/tc/oc/pgm/observers/tools/VisibilityTool.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.api.setting.Settings;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class VisibilityTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.visibility\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.YELLOW;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component status =\n+        new PersonalizedText(isVisible(player) ? \"Shown\" : \"Hidden\")", "originalCommit": "5969f31828c357d291d4a88f91956b4c4a4af708", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d2941c19dd333cee77f1fa2cfd0f0ff89855cb5", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/tools/VisibilityTool.java b/src/main/java/tc/oc/pgm/observers/tools/VisibilityTool.java\nindex 7df7cb07..6e8c9ae9 100644\n--- a/src/main/java/tc/oc/pgm/observers/tools/VisibilityTool.java\n+++ b/src/main/java/tc/oc/pgm/observers/tools/VisibilityTool.java\n\n@@ -6,7 +6,6 @@ import net.md_5.bungee.api.ChatColor;\n import org.bukkit.Material;\n import tc.oc.component.Component;\n import tc.oc.component.render.ComponentRenderers;\n-import tc.oc.component.types.PersonalizedText;\n import tc.oc.component.types.PersonalizedTranslatable;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.api.setting.SettingKey;\n"}}, {"oid": "8d2941c19dd333cee77f1fa2cfd0f0ff89855cb5", "url": "https://github.com/PGMDev/PGM/commit/8d2941c19dd333cee77f1fa2cfd0f0ff89855cb5", "message": "Translate more messages and add note regarding WorldEdit\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-26T02:47:59Z", "type": "commit"}, {"oid": "6c0b10b608076ce0d88e106f3203ee0b9cb92d03", "url": "https://github.com/PGMDev/PGM/commit/6c0b10b608076ce0d88e106f3203ee0b9cb92d03", "message": "Use translations for gamemode name\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-26T03:00:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI3Mg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370961272", "bodyText": "I don't think this command is really needed since the item on the inventory exists.\nIf the concern is not being able to open the menu if you throw out the diamond, make it so any diamond right-clicking works.", "author": "Pablete1234", "createdAt": "2020-01-25T23:01:38Z", "path": "src/main/java/tc/oc/pgm/commands/ObserverCommands.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package tc.oc.pgm.commands;\n+\n+import app.ashcon.intake.Command;\n+import app.ashcon.intake.CommandException;\n+import java.util.Optional;\n+import org.bukkit.command.CommandSender;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.observers.ObserverToolsMatchModule;\n+\n+public class ObserverCommands {\n+\n+  @Command(\n+      aliases = {\"tools\", \"observertools\", \"ot\"},\n+      desc = \"Open the observer tool menu\")\n+  public static void openObserverToolMenu(CommandSender sender, MatchPlayer player)", "originalCommit": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NTkzOQ==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370975939", "bodyText": "Hey @Pablete1234,\nSo what I encountered during testing was the lack of the ability to use any item while a player is in the spectator gamemode. Unless there is some odd method to access items as a spectator which I\u2019m unaware of, I\u2019m unsure how exactly one can return to the menu without using the command.\nHere\u2019s a look at what I mean:", "author": "applenick", "createdAt": "2020-01-26T06:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzQ3NA==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371043474", "bodyText": "@applenick the item you have selected is still the diamond, right-ckicking brings uo the menu again. IIRC, you must click againt block while in gm3 or there's no event", "author": "Pablete1234", "createdAt": "2020-01-27T01:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTM0NQ==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371045345", "bodyText": "@Pablete1234 So I just did some more testing and I see what I missed the first time. You are correct right-clicking blocks are the only way to fire the event as a spectator. Unfortunately I was only right-clicking the air so \ud83e\udd37\u200d\u2642. However I fear that if we rely solely on just the right-clicking of blocks we may run into players who are unfamiliar as I was.\nFor now I believe it\u2019s important to offer the command, the same way there is a command to join the match although we have the picker.\nAlso in regards to your original comment, clicking any diamond does open the menu.", "author": "applenick", "createdAt": "2020-01-27T01:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MTEyMQ==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370971121", "bodyText": "maybe rename to canUse instead ?", "author": "Pablete1234", "createdAt": "2020-01-26T03:32:00Z", "path": "src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package tc.oc.pgm.observers;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.inventory.InventoryCloseEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.match.MatchModule;\n+import tc.oc.pgm.match.MatchModuleFactory;\n+import tc.oc.pgm.module.ModuleLoadException;\n+import tc.oc.pgm.observers.tools.FlySpeedTool;\n+import tc.oc.pgm.observers.tools.GamemodeTool;\n+import tc.oc.pgm.observers.tools.NightVisionTool;\n+import tc.oc.pgm.observers.tools.VisibilityTool;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class ObserverToolsMatchModule extends MatchModule implements Listener {\n+\n+  public static class Factory implements MatchModuleFactory<ObserverToolsMatchModule> {\n+    @Override\n+    public ObserverToolsMatchModule createMatchModule(Match match) throws ModuleLoadException {\n+      return new ObserverToolsMatchModule(match);\n+    }\n+  }\n+\n+  // Slot where tool item is placed\n+  public static final int TOOL_BUTTON_SLOT = 8;\n+\n+  // Material of tool item item\n+  public static final Material TOOL_MATERIAL = Material.DIAMOND;\n+\n+  private ObserverToolMenu menu;\n+\n+  public ObserverToolsMatchModule(Match match) {\n+    super(match);\n+    this.menu = new ObserverToolMenu();\n+  }\n+\n+  @EventHandler\n+  public void onObserverKitApply(ObserverKitApplyEvent event) {\n+    refreshKit(event.getPlayer());\n+  }\n+\n+  @EventHandler\n+  public void onToolClick(PlayerInteractEvent event) {\n+    if (isRightClick(event.getAction())) {\n+      ItemStack item = event.getPlayer().getItemInHand();\n+\n+      if (item.getType().equals(TOOL_MATERIAL)) {\n+        MatchPlayer player = getMatch().getPlayer(event.getPlayer());\n+        openMenu(player);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOWEST)\n+  public void onInventoryClick(final InventoryClickEvent event) {\n+    if (event.getCurrentItem() == null\n+        || event.getCurrentItem().getItemMeta() == null\n+        || event.getCurrentItem().getItemMeta().getDisplayName() == null) return;\n+\n+    if (event.getWhoClicked() instanceof Player) {\n+      MatchPlayer player = match.getPlayer(event.getWhoClicked());\n+      if (menu.isViewing(player)) {\n+        ItemStack clicked = event.getCurrentItem();\n+        menu.getTools()\n+            .forEach(\n+                tool -> {\n+                  if (clicked.getType().equals(tool.getMaterial(player))) {\n+                    tool.onInventoryClick(menu, player);\n+                  }\n+                });\n+      }\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onInventoryClose(final InventoryCloseEvent event) {\n+    // Remove viewing of menu upon inventory close\n+    menu.remove(getMatch().getPlayer((Player) event.getPlayer()));\n+  }\n+\n+  public void openMenu(MatchPlayer player) {\n+    if (hasUse(player)) {\n+      menu.display(player);\n+    }\n+  }\n+\n+  private boolean hasUse(MatchPlayer player) {", "originalCommit": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "679317d70b9746cb510fcc8ba0e5b38a568bfe9f", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java b/src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java\nindex e9365c11..1e23fb46 100644\n--- a/src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java\n+++ b/src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java\n\n@@ -22,7 +22,8 @@ import tc.oc.pgm.api.match.Match;\n import tc.oc.pgm.api.match.MatchScope;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.events.ListenerScope;\n-import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.gui.InventoryMenu;\n+import tc.oc.pgm.gui.InventoryMenuItem;\n import tc.oc.pgm.match.MatchModule;\n import tc.oc.pgm.match.MatchModuleFactory;\n import tc.oc.pgm.module.ModuleLoadException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MTM0MA==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370971340", "bodyText": "have a:\nprivate static FlySpeed[] speeds = values();\nand have this method be:\nreturn speeds[(ordinal() + 1) % speeds.length]", "author": "Pablete1234", "createdAt": "2020-01-26T03:38:28Z", "path": "src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class FlySpeedTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.flyspeed\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_RED;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component flySpeed = FlySpeed.of(player.getBukkit().getFlySpeed()).getName();\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.flyspeed.lore\", flySpeed)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return Material.FEATHER;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryGUI menu, MatchPlayer player) {\n+    incrementSpeed(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  private void incrementSpeed(MatchPlayer player) {\n+    FlySpeed speed = FlySpeed.of(player.getBukkit().getFlySpeed());\n+    player.getBukkit().setFlySpeed(speed.getNext().getValue());\n+  }\n+\n+  public static enum FlySpeed {\n+    NORMAL(ChatColor.YELLOW, 0.1f),\n+    FAST(ChatColor.GOLD, 0.25f),\n+    FASTER(ChatColor.RED, 0.5f),\n+    HYPERSPEED(ChatColor.LIGHT_PURPLE, 0.9f);\n+\n+    private ChatColor color;\n+    private float value;\n+\n+    FlySpeed(ChatColor color, float value) {\n+      this.color = color;\n+      this.value = value;\n+    }\n+\n+    public float getValue() {\n+      return value;\n+    }\n+\n+    public Component getName() {\n+      return new PersonalizedText(WordUtils.capitalize(this.name().toLowerCase())).color(color);\n+    }\n+\n+    public FlySpeed getNext() {\n+      return ordinal() < (values().length - 1) ? values()[ordinal() + 1] : NORMAL;", "originalCommit": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "679317d70b9746cb510fcc8ba0e5b38a568bfe9f", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java b/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java\nindex 29da3528..5401714a 100644\n--- a/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java\n+++ b/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java\n\n@@ -3,17 +3,17 @@ package tc.oc.pgm.observers.tools;\n import com.google.common.collect.Lists;\n import java.util.List;\n import net.md_5.bungee.api.ChatColor;\n-import org.apache.commons.lang.WordUtils;\n import org.bukkit.Material;\n import tc.oc.component.Component;\n import tc.oc.component.render.ComponentRenderers;\n-import tc.oc.component.types.PersonalizedText;\n import tc.oc.component.types.PersonalizedTranslatable;\n import tc.oc.pgm.api.player.MatchPlayer;\n-import tc.oc.pgm.gui.InventoryGUI;\n-import tc.oc.pgm.observers.ObserverTool;\n+import tc.oc.pgm.gui.InventoryMenu;\n+import tc.oc.pgm.gui.InventoryMenuItem;\n \n-public class FlySpeedTool implements ObserverTool {\n+public class FlySpeedTool implements InventoryMenuItem {\n+\n+  private static String TRANSLATION_KEY = \"observer.tools.flyspeed.\";\n \n   @Override\n   public Component getName() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MTQ0Mg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370971442", "bodyText": "maybe have this be a generic gui item thing?", "author": "Pablete1234", "createdAt": "2020-01-26T03:42:27Z", "path": "src/main/java/tc/oc/pgm/observers/ObserverTool.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package tc.oc.pgm.observers;\n+\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+\n+public interface ObserverTool {", "originalCommit": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "679317d70b9746cb510fcc8ba0e5b38a568bfe9f", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/ObserverTool.java b/src/main/java/tc/oc/pgm/gui/InventoryMenuItem.java\nsimilarity index 85%\nrename from src/main/java/tc/oc/pgm/observers/ObserverTool.java\nrename to src/main/java/tc/oc/pgm/gui/InventoryMenuItem.java\nindex 44e514a7..3ba7456e 100644\n--- a/src/main/java/tc/oc/pgm/observers/ObserverTool.java\n+++ b/src/main/java/tc/oc/pgm/gui/InventoryMenuItem.java\n\n@@ -1,4 +1,4 @@\n-package tc.oc.pgm.observers;\n+package tc.oc.pgm.gui;\n \n import java.util.List;\n import net.md_5.bungee.api.ChatColor;\n"}}, {"oid": "679317d70b9746cb510fcc8ba0e5b38a568bfe9f", "url": "https://github.com/PGMDev/PGM/commit/679317d70b9746cb510fcc8ba0e5b38a568bfe9f", "message": "Refactor GUI related classes; clean up FlySpeed enum logic\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-26T06:01:23Z", "type": "commit"}, {"oid": "0111450600cd5721dc18c5e625df504ff87910a4", "url": "https://github.com/PGMDev/PGM/commit/0111450600cd5721dc18c5e625df504ff87910a4", "message": "Update package name from gui -> menu\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-26T06:10:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3MTUyNg==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371071526", "bodyText": "What happens if WorldEdit is not loaded? Will it show a command not found error?", "author": "Electroid", "createdAt": "2020-01-27T05:51:59Z", "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+\n+public class GamemodeTool implements InventoryMenuItem {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedTranslatable(\"gameMode.\" + player.getGameMode().name().toLowerCase())\n+            .color(ChatColor.AQUA);\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.gamemode.lore\", gamemode)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return isCreative(player) ? Material.SEA_LANTERN : Material.PRISMARINE;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryMenu menu, MatchPlayer player) {\n+    toggleObserverGameMode(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  public void toggleObserverGameMode(MatchPlayer player) {\n+    player.setGameMode(getOppositeMode(player.getGameMode()));\n+    if (player.getGameMode() == GameMode.SPECTATOR) {\n+      player.sendWarning(getToggleMessage(), true);\n+    } else if (isCreative(player)) {\n+      // Note: This performs the WorldEdit command to ensure the player is not stuck\n+      player.getBukkit().performCommand(\"worldedit:!\");", "originalCommit": "0111450600cd5721dc18c5e625df504ff87910a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MjY5NA==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371082694", "bodyText": "Good catch. I\u2019ll add a check to see if WorldEdit is enabled or not.\nThanks @Electroid!", "author": "applenick", "createdAt": "2020-01-27T06:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3MTUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "356f7a7d8f3ca3d45c1ea80413198c42ff39c806", "chunk": "diff --git a/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java b/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\nindex f4a09425..54d4bbd9 100644\n--- a/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\n+++ b/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java\n\n@@ -5,6 +5,7 @@ import java.util.List;\n import net.md_5.bungee.api.ChatColor;\n import net.md_5.bungee.api.chat.ClickEvent;\n import net.md_5.bungee.api.chat.HoverEvent;\n+import org.bukkit.Bukkit;\n import org.bukkit.GameMode;\n import org.bukkit.Material;\n import tc.oc.component.Component;\n"}}, {"oid": "356f7a7d8f3ca3d45c1ea80413198c42ff39c806", "url": "https://github.com/PGMDev/PGM/commit/356f7a7d8f3ca3d45c1ea80413198c42ff39c806", "message": "Add a check to see if WorldEdit is enabled\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-27T06:49:39Z", "type": "commit"}, {"oid": "f9e8700224b77f6f44e43e943c77e3fde2745ae6", "url": "https://github.com/PGMDev/PGM/commit/f9e8700224b77f6f44e43e943c77e3fde2745ae6", "message": "Merge branch 'master' into observer-tools", "committedDate": "2020-01-27T06:55:20Z", "type": "commit"}, {"oid": "df09e973d74aef22b5eeb2c24db8f9058b8cac26", "url": "https://github.com/PGMDev/PGM/commit/df09e973d74aef22b5eeb2c24db8f9058b8cac26", "message": "Fix formatting error\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-27T07:01:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM2NTUxOQ==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371365519", "bodyText": "This doesn't seem to get cleaned up anywhere? How about using WeakHashMap ?", "author": "Electroid", "createdAt": "2020-01-27T17:04:18Z", "path": "src/main/java/tc/oc/pgm/menu/InventoryMenu.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package tc.oc.pgm.menu;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryMenu {\n+\n+  protected static final int ROW_WIDTH = 9; // Number of columns per row\n+  protected static final int MAX_ROWS = 6; // Max allowed row size\n+\n+  private final Set<MatchPlayer> viewing =\n+      Sets.newHashSet(); // Set of players who are viewing the gui", "originalCommit": "df09e973d74aef22b5eeb2c24db8f9058b8cac26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2ODk4Ng==", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371568986", "bodyText": "Hey @Electroid,\nThe viewing map does get cleaned up via the ObserverToolsMatchModule manually. I switched it over to a WeakHashMap as suggested, to accommodate for when future implementations are added, just so cleanup occurs in case not manually done.\nThanks!", "author": "applenick", "createdAt": "2020-01-28T01:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM2NTUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "446506763691484aa0cea5632d5b3cb9b3fb8ad1", "chunk": "diff --git a/src/main/java/tc/oc/pgm/menu/InventoryMenu.java b/src/main/java/tc/oc/pgm/menu/InventoryMenu.java\nindex 8ea8e7f1..d0acee77 100644\n--- a/src/main/java/tc/oc/pgm/menu/InventoryMenu.java\n+++ b/src/main/java/tc/oc/pgm/menu/InventoryMenu.java\n\n@@ -3,8 +3,7 @@ package tc.oc.pgm.menu;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n \n-import com.google.common.collect.Sets;\n-import java.util.Set;\n+import java.util.WeakHashMap;\n import javax.annotation.Nullable;\n import org.bukkit.Bukkit;\n import org.bukkit.inventory.Inventory;\n"}}, {"oid": "446506763691484aa0cea5632d5b3cb9b3fb8ad1", "url": "https://github.com/PGMDev/PGM/commit/446506763691484aa0cea5632d5b3cb9b3fb8ad1", "message": "Use a WeakHashMap in InventoryMenu\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-01-28T01:15:19Z", "type": "commit"}, {"oid": "94c741eacfae6d238aa8055129261ab332527eee", "url": "https://github.com/PGMDev/PGM/commit/94c741eacfae6d238aa8055129261ab332527eee", "message": "Merge branch 'master' into observer-tools", "committedDate": "2020-01-29T00:58:14Z", "type": "commit"}]}