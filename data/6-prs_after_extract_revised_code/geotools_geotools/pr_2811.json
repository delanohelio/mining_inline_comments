{"pr_number": 2811, "pr_title": "[GEOT-6523] geopkg datetime", "pr_createdAt": "2020-02-19T16:22:00Z", "pr_url": "https://github.com/geotools/geotools/pull/2811", "timeline": [{"oid": "5d281abedaec95a1c0043179f56e7bc43fcad74e", "url": "https://github.com/geotools/geotools/commit/5d281abedaec95a1c0043179f56e7bc43fcad74e", "message": "add support for DateTime to GeoPKG", "committedDate": "2020-02-19T16:13:01Z", "type": "commit"}, {"oid": "0b7943ea37d19fbd78727112eff566b306f6ada1", "url": "https://github.com/geotools/geotools/commit/0b7943ea37d19fbd78727112eff566b306f6ada1", "message": "add date and datetime test geopkg", "committedDate": "2020-02-19T16:20:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r381405080", "bodyText": "Ouch, this fixes the issue but severely limits usability of geopackages with time/elevation/custom dimensions, when having fast min/max/unique is a must. Production systems will work only on very small geopackages in this case.\nThinking out loud, if it's really just a matter of conversion of result datatype, one might consider also doing type conversions around here?\n\n  \n    \n      geotools/modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCDataStore.java\n    \n    \n         Line 1499\n      in\n      bae4ea1\n    \n    \n    \n    \n\n        \n          \n           while (rs.next()) { \n        \n    \n  \n\n\nOr is it sqlite that does the aggregate in an unexpected way? min/max should work even with strings, aren't dates are saved as ISO dates in sqlite, so they should sort lexicographically anyways?\nJust a thought.", "author": "aaime", "createdAt": "2020-02-19T16:51:11Z", "path": "modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java", "diffHunk": "@@ -82,6 +85,18 @@ public GeoPkgDialect(JDBCDataStore dataStore) {\n         geomWriterConfig = new GeoPkgGeomWriter.Configuration();\n     }\n \n+    // The JDBC aggregate functions doesn't support the geopkg DateTime types.\n+    //  This is because they are stored as strings in the database instead of real Date types\n+    //   and the JDBC aggregate driver does NOT provide the needed conversions.\n+    //\n+    // since this doesn't work, we don't support it.\n+    @Override\n+    public void registerAggregateFunctions(", "originalCommit": "0b7943ea37d19fbd78727112eff566b306f6ada1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMTExMw==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r381431113", "bodyText": "Yes - there's a line all setup for the conversion here;\n\n  \n    \n      geotools/modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCDataStore.java\n    \n    \n         Line 1502\n      in\n      bae4ea1\n    \n    \n    \n    \n\n        \n          \n           result = value; \n        \n    \n  \n\n\nHowever, there isn't much support for the conversion, so it's likely going to require interface changes.\nI ran into this issue in the Time dimension GetCapabilities - which runs a UniqueVisitor on the dataset.  There were several problems in the GeoPKG with this - i.e. having to change the column from \"time\" to \"datetime(time)\" in the filters (otherwise the DB returns the wrong results).\nUnless you have an idea how to determine if those values need conversion (I think they can be more complicated than just simple column references).", "author": "davidblasby", "createdAt": "2020-02-19T17:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMzk2NA==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r381433964", "bodyText": "Right, my only worry is that caps generation will become really really slow... we did quite a bit of work optimizing it with visitors back in the day exactly because caps gen time was getting out of hand real quick...", "author": "aaime", "createdAt": "2020-02-19T17:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDk5NA==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r381560994", "bodyText": "I could not find a way of checking the columns the operation is operating on, like if we can confirm everything is simple (and not subject to mapping) then the visitors can be used. In the specific use of GetCapabilities generation making a summary of TIMESTAMP is a common case.\nI had thought about making the CalcResult smarter (giving it a target class that it accepts, and it could be responsible for providing a conversation as values are collected). This would solve the problem \"once\" and not involve making special cases in all the places where visitors are called.", "author": "jodygarnett", "createdAt": "2020-02-19T21:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkzNzA1Mw==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r381937053", "bodyText": "Thinking out loud here... the visitor does not really know what the type is, because it's determined at runtime evaluating expressions (besides the visitors that only work on a specific type). JDBCDataStore on the other hand has the aggregateExpression, from which one can determine the type of the visitor input by using the ExpressionTypeVisitor.\nNow, that is not enough, many visitors just return the same type as the input, but for example avg and sttdev do not.\nIt would be easy however to add a default method to FeatureCalc or FeatureAttributeVisitor or to the implementations (getExpression is really not present in FeatureCalc for example, but determined through reflection.. not sure why, since there is FeatureAttributeVisitor that can do the job, probably historical reasons).\n/**\n * Returns the expected output type given the input type, or null if uknown\nClass[] getResultType(Class[] inputs);\n*/\n\nWith that one could do the right type conversion no?", "author": "aaime", "createdAt": "2020-02-20T11:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5OTk1NA==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r382099954", "bodyText": "Mind, these \"thinking out loud\" mean \"let's talk but I'm not asking you to do it\". If you are hard pressed to get a fix in, I'd suggest to go head with this, open a new ticket warning users that performance of aggregations on sqlite will become really bad (for the cases where it works, like numbers and strings, which is used for example by SLDService), and hope that someone steps in to follow up. Right now I don't have an installation of gpkg + aggregations that would be affected, someone out there might though.", "author": "aaime", "createdAt": "2020-02-20T16:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMzcyOA==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r382503728", "bodyText": "I just added a geopackage \u2018model.gpkg\u2019 with several tables and views in it to\nhttps://osgeo-org.atlassian.net/browse/GEOS-9392\nTo test I would use  \u2018view3\u2019  (>34000 polygons and a datetime column) with given model.sld.\nBut to test how it \u2018detoriates\u2019 the generation of the capabilities it is also a good one because it contains 3 views and tables.", "author": "rduivenvoorde", "createdAt": "2020-02-21T10:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMjcyNQ==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r385432725", "bodyText": "https://osgeo-org.atlassian.net/browse/GEOT-6520\n@jodygarnett  - I think this is ok to merge now.", "author": "davidblasby", "createdAt": "2020-02-27T23:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNTczMw==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r385435733", "bodyText": "Thanks I will review", "author": "jodygarnett", "createdAt": "2020-02-27T23:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNTA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "7fd7432b36feeac7063511485a94a325157557cb", "chunk": "diff --git a/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java b/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java\nindex 6d737c2aa8..0e02c7ea95 100644\n--- a/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java\n+++ b/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java\n\n@@ -85,11 +84,13 @@ public class GeoPkgDialect extends PreparedStatementSQLDialect {\n         geomWriterConfig = new GeoPkgGeomWriter.Configuration();\n     }\n \n-    // The JDBC aggregate functions doesn't support the geopkg DateTime types.\n-    //  This is because they are stored as strings in the database instead of real Date types\n-    //   and the JDBC aggregate driver does NOT provide the needed conversions.\n-    //\n-    // since this doesn't work, we don't support it.\n+    /**\n+     * The JDBC aggregate functions doesn't support the geopkg DateTime types.\n+     * This is because they are stored as strings in the database instead of real Date types\n+     * and the JDBC aggregate driver does NOT provide the needed conversions.\n+     * <p>\n+     * Since this doesn't work, we don't support it.\n+     */\n     @Override\n     public void registerAggregateFunctions(\n             Map<Class<? extends FeatureVisitor>, String> aggregates) {\n"}}, {"oid": "24b2597e6c488b12684105203982bcc103a77fbd", "url": "https://github.com/geotools/geotools/commit/24b2597e6c488b12684105203982bcc103a77fbd", "message": "add test cases for new geopkg datetime support", "committedDate": "2020-02-20T08:06:51Z", "type": "commit"}, {"oid": "32aac27c98f7f4848ba5637d6448bd50c028ee7b", "url": "https://github.com/geotools/geotools/commit/32aac27c98f7f4848ba5637d6448bd50c028ee7b", "message": "update code formating", "committedDate": "2020-02-20T11:07:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNTU4Mw==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r385435583", "bodyText": "We tend to use javadoc comments, C style comments are okay inside the code block.", "author": "jodygarnett", "createdAt": "2020-02-27T23:47:31Z", "path": "modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java", "diffHunk": "@@ -82,6 +84,18 @@ public GeoPkgDialect(JDBCDataStore dataStore) {\n         geomWriterConfig = new GeoPkgGeomWriter.Configuration();\n     }\n \n+    // The JDBC aggregate functions doesn't support the geopkg DateTime types.\n+    //  This is because they are stored as strings in the database instead of real Date types\n+    //   and the JDBC aggregate driver does NOT provide the needed conversions.\n+    //\n+    // since this doesn't work, we don't support it.", "originalCommit": "32aac27c98f7f4848ba5637d6448bd50c028ee7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fd7432b36feeac7063511485a94a325157557cb", "chunk": "diff --git a/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java b/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java\nindex fa46fa56af..0e02c7ea95 100644\n--- a/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java\n+++ b/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDialect.java\n\n@@ -84,11 +84,13 @@ public class GeoPkgDialect extends PreparedStatementSQLDialect {\n         geomWriterConfig = new GeoPkgGeomWriter.Configuration();\n     }\n \n-    // The JDBC aggregate functions doesn't support the geopkg DateTime types.\n-    //  This is because they are stored as strings in the database instead of real Date types\n-    //   and the JDBC aggregate driver does NOT provide the needed conversions.\n-    //\n-    // since this doesn't work, we don't support it.\n+    /**\n+     * The JDBC aggregate functions doesn't support the geopkg DateTime types.\n+     * This is because they are stored as strings in the database instead of real Date types\n+     * and the JDBC aggregate driver does NOT provide the needed conversions.\n+     * <p>\n+     * Since this doesn't work, we don't support it.\n+     */\n     @Override\n     public void registerAggregateFunctions(\n             Map<Class<? extends FeatureVisitor>, String> aggregates) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNTg3NA==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r385435874", "bodyText": "Please use javadoc comment", "author": "jodygarnett", "createdAt": "2020-02-27T23:48:28Z", "path": "modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgFilterToSQL.java", "diffHunk": "@@ -44,6 +44,39 @@ public GeoPkgFilterToSQL(GeoPkgDialect dialect) {\n         this.dialect = dialect;\n     }\n \n+    // cf.  visit(Literal expression,...)\n+    // When doing temporal queries (like \"time BETWEEN t1 AND t2\")\n+    //\n+    // The encoding of the column name (\"time\") and the literals must be the same!\n+    //\n+    //  datetime(\"Time\",'localtime') BETWEEN datetime(?,'localtime') AND datetime(?,'localtime')\n+    //\n+    // For non-time columns, this just relegates to the superclass\n+    // For GeoPKG, the time column is actually stored as a STRING.", "originalCommit": "32aac27c98f7f4848ba5637d6448bd50c028ee7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fd7432b36feeac7063511485a94a325157557cb", "chunk": "diff --git a/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgFilterToSQL.java b/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgFilterToSQL.java\nindex b5a60e0cbb..2321df0270 100644\n--- a/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgFilterToSQL.java\n+++ b/modules/plugin/geopkg/src/main/java/org/geotools/geopkg/GeoPkgFilterToSQL.java\n\n@@ -44,15 +44,18 @@ public class GeoPkgFilterToSQL extends PreparedFilterToSQL {\n         this.dialect = dialect;\n     }\n \n-    // cf.  visit(Literal expression,...)\n-    // When doing temporal queries (like \"time BETWEEN t1 AND t2\")\n-    //\n-    // The encoding of the column name (\"time\") and the literals must be the same!\n-    //\n-    //  datetime(\"Time\",'localtime') BETWEEN datetime(?,'localtime') AND datetime(?,'localtime')\n-    //\n-    // For non-time columns, this just relegates to the superclass\n-    // For GeoPKG, the time column is actually stored as a STRING.\n+    /**\n+     * cf.  visit(Literal expression,...)\n+     * When doing temporal queries (like \"time BETWEEN t1 AND t2\")\n+     * <p>\n+     * The encoding of the column name (\"time\") and the literals must be the same!\n+     * <p>\n+     * datetime(\"Time\",'localtime') BETWEEN datetime(?,'localtime') AND datetime(?,'localtime')\n+     * <p>\n+     * For non-time columns, this just relegates to the superclass\n+     * <p>\n+     * For GeoPKG, the time column is actually stored as a STRING.\n+     */\n     @Override\n     public String escapeName(String name) {\n         String super_result = super.escapeName(name);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNTkzNQ==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r385435935", "bodyText": "new file new date, 2020", "author": "jodygarnett", "createdAt": "2020-02-27T23:48:41Z", "path": "modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2017, Open Source Geospatial Foundation (OSGeo)", "originalCommit": "32aac27c98f7f4848ba5637d6448bd50c028ee7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fd7432b36feeac7063511485a94a325157557cb", "chunk": "diff --git a/modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java b/modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java\nindex b054e9ee86..471205f6e4 100644\n--- a/modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java\n+++ b/modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java\n\n@@ -2,7 +2,7 @@\n  *    GeoTools - The Open Source Java GIS Toolkit\n  *    http://geotools.org\n  *\n- *    (C) 2017, Open Source Geospatial Foundation (OSGeo)\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n  *\n  *    This library is free software; you can redistribute it and/or\n  *    modify it under the terms of the GNU Lesser General Public\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNjA0Mg==", "url": "https://github.com/geotools/geotools/pull/2811#discussion_r385436042", "bodyText": "thanks, good practice to note the bug report :)", "author": "jodygarnett", "createdAt": "2020-02-27T23:49:01Z", "path": "modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2017, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.geopkg;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import org.geotools.data.DataStore;\n+import org.geotools.data.DataStoreFinder;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.data.simple.SimpleFeatureSource;\n+import org.geotools.data.util.NullProgressListener;\n+import org.geotools.feature.visitor.UniqueVisitor;\n+import org.geotools.filter.text.cql2.CQLException;\n+import org.geotools.filter.text.ecql.ECQL;\n+import org.geotools.test.TestData;\n+import org.geotools.util.URLs;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.opengis.feature.simple.SimpleFeature;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.filter.Filter;\n+\n+public class GeoPkgDatetimeTest {\n+    private DataStore gpkg;\n+\n+    /** @throws java.lang.Exception */\n+    @Before\n+    public void setUp() throws Exception {\n+        URL url = TestData.url(this.getClass(), \"datetime_date.gpkg\");\n+        // open the geopkg\n+        HashMap<String, Object> params = new HashMap<>();\n+        params.put(GeoPkgDataStoreFactory.DBTYPE.key, GeoPkgDataStoreFactory.DBTYPE.sample);\n+        params.put(GeoPkgDataStoreFactory.DATABASE.key, URLs.urlToFile(url));\n+\n+        gpkg = DataStoreFinder.getDataStore(params);\n+        assertNotNull(gpkg);\n+    }\n+\n+    /**\n+     * Test for GEOS-9392 - recognition of DATETIME and DATE.", "originalCommit": "32aac27c98f7f4848ba5637d6448bd50c028ee7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fd7432b36feeac7063511485a94a325157557cb", "chunk": "diff --git a/modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java b/modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java\nindex b054e9ee86..471205f6e4 100644\n--- a/modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java\n+++ b/modules/plugin/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDatetimeTest.java\n\n@@ -2,7 +2,7 @@\n  *    GeoTools - The Open Source Java GIS Toolkit\n  *    http://geotools.org\n  *\n- *    (C) 2017, Open Source Geospatial Foundation (OSGeo)\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n  *\n  *    This library is free software; you can redistribute it and/or\n  *    modify it under the terms of the GNU Lesser General Public\n"}}, {"oid": "7fd7432b36feeac7063511485a94a325157557cb", "url": "https://github.com/geotools/geotools/commit/7fd7432b36feeac7063511485a94a325157557cb", "message": "change comments to javadoc comments", "committedDate": "2020-02-27T23:55:10Z", "type": "commit"}, {"oid": "2b0251d9875acb7cfdcbcaeb4d3921e69abc6cea", "url": "https://github.com/geotools/geotools/commit/2b0251d9875acb7cfdcbcaeb4d3921e69abc6cea", "message": "change format of javadocs (via maven build)", "committedDate": "2020-02-28T00:44:43Z", "type": "commit"}]}