{"pr_number": 2941, "pr_title": "[GEOT-6598] Ogc filter to mongo operator translation fails", "pr_createdAt": "2020-05-21T16:01:47Z", "pr_url": "https://github.com/geotools/geotools/pull/2941", "timeline": [{"oid": "bf111a646ddcf92697dc3d3044ea2f6550d0e0b4", "url": "https://github.com/geotools/geotools/commit/bf111a646ddcf92697dc3d3044ea2f6550d0e0b4", "message": "[GEOT-6598] Ogc filter to mongo operator translation fails", "committedDate": "2020-05-21T17:28:34Z", "type": "forcePushed"}, {"oid": "151f56e0f2ea2892d4db58c539d46440e7bba41c", "url": "https://github.com/geotools/geotools/commit/151f56e0f2ea2892d4db58c539d46440e7bba41c", "message": "[GEOT-6598] Ogc filter to mongo operator translation fails", "committedDate": "2020-05-21T19:26:28Z", "type": "forcePushed"}, {"oid": "5310d2e56a93e2dfb554920fdc818da1701f6e0a", "url": "https://github.com/geotools/geotools/commit/5310d2e56a93e2dfb554920fdc818da1701f6e0a", "message": "[GEOT-6598] Ogc filter to mongo operator translation fails", "committedDate": "2020-05-22T07:22:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ2MjI1MA==", "url": "https://github.com/geotools/geotools/pull/2941#discussion_r430462250", "bodyText": "For reference:\nhttps://docs.mongodb.com/manual/reference/operator/query/not/#not", "author": "nmco", "createdAt": "2020-05-26T14:36:47Z", "path": "modules/plugin/mongodb/src/main/java/org/geotools/data/mongodb/FilterToMongo.java", "diffHunk": "@@ -211,8 +212,41 @@ public Object visit(Or filter, Object extraData) {\n     @Override\n     public Object visit(Not filter, Object extraData) {", "originalCommit": "5310d2e56a93e2dfb554920fdc818da1701f6e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ2NDk0Nw==", "url": "https://github.com/geotools/geotools/pull/2941#discussion_r430464947", "bodyText": "If I understand this correctly:\n\nThe existing FilterAttributeExtractor can be used directly because it stores the found properties on a Set and you need to obtain the first found property?\nThis is why here you only take the first found property?", "author": "nmco", "createdAt": "2020-05-26T14:40:27Z", "path": "modules/plugin/mongodb/src/main/java/org/geotools/data/mongodb/FilterToMongo.java", "diffHunk": "@@ -211,8 +212,41 @@ public Object visit(Or filter, Object extraData) {\n     @Override\n     public Object visit(Not filter, Object extraData) {\n         BasicDBObject output = asDBObject(extraData);\n+        // in case of a not operator we cannot simply wrap the child filter\n+        // with a $not since mongo syntax is {property:{$not:{operator-expression}}}\n+        // thus using a Visitor to find the PropertyName\n+        class PropertyNameFinder extends FilterAttributeExtractor {\n+            List<PropertyName> pNames = new ArrayList<>();\n+\n+            @Override\n+            public Object visit(PropertyName expression, Object data) {\n+                pNames.add(expression);\n+                return super.visit(expression, data);\n+            }\n+\n+            PropertyName getPropertyName() {\n+                if (pNames.size() > 0) return pNames.get(0);", "originalCommit": "5310d2e56a93e2dfb554920fdc818da1701f6e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzODIzMA==", "url": "https://github.com/geotools/geotools/pull/2941#discussion_r431138230", "bodyText": "thanks for your point @nmco , I should have clarified this with a comment before: FilterAttributeExtractor would extract also Literal adding them to the Set as PropertyName, so I preferred to extend it with the above method class", "author": "taba90", "createdAt": "2020-05-27T13:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ2NDk0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MDIwNg==", "url": "https://github.com/geotools/geotools/pull/2941#discussion_r430470206", "bodyText": "I would add a few extra tests:\n\na not equal to between two properties\na not filter with and nested and filter with two branches\nan or with two branches containing a not filter with", "author": "nmco", "createdAt": "2020-05-26T14:47:26Z", "path": "modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoDataStoreTest.java", "diffHunk": "@@ -229,4 +229,47 @@ public void testSortBy() throws Exception {\n         assertTrue(first.before(second));\n         assertTrue(second.before(third));\n     }\n+\n+    public void testIsNullFilter() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        PropertyName pn = ff.property(\"properties.nullableAttribute\");\n+        PropertyIsNull isNull = ff.isNull(pn);\n+        Query q = new Query(\"ft1\", isNull);\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        assertEquals(features.size(), 2);\n+        SimpleFeatureIterator it = features.features();\n+        while (it.hasNext()) {\n+            SimpleFeature f = it.next();\n+            assertNull(pn.evaluate(f));\n+        }\n+    }\n+\n+    public void testNotFilter() throws Exception {", "originalCommit": "5310d2e56a93e2dfb554920fdc818da1701f6e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzODM0MQ==", "url": "https://github.com/geotools/geotools/pull/2941#discussion_r431138341", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-05-27T13:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MDIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "34db923e09b97cc37cb8aad940bc72d5c13fed8a", "chunk": "diff --git a/modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoDataStoreTest.java b/modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoDataStoreTest.java\nindex cc3585795c..d9f47e4f3b 100644\n--- a/modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoDataStoreTest.java\n+++ b/modules/plugin/mongodb/src/test/java/org/geotools/data/mongodb/MongoDataStoreTest.java\n\n@@ -272,4 +272,88 @@ public abstract class MongoDataStoreTest extends MongoTestSupport {\n         SimpleFeature f = features.features().next();\n         assertNotNull(pn.evaluate(f));\n     }\n+\n+    public void testNotNotEqualFilter() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        PropertyName pnS = ff.property(\"properties.stringProperty\");\n+        PropertyIsNotEqualTo notEqualTo = ff.notEqual(pnS, ff.literal(\"one\"));\n+        Not not = ff.not(notEqualTo);\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        Query q = new Query(\"ft1\", not);\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        assertEquals(1, features.size());\n+        SimpleFeature f = features.features().next();\n+        assertEquals(pnS.evaluate(f), \"one\");\n+    }\n+\n+    public void testNotEqualBetweenPropertiesFilter() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        PropertyName pnS = ff.property(\"properties.stringProperty\");\n+        PropertyIsNotEqualTo notEqualTo = ff.notEqual(pnS, ff.literal(\"one\"));\n+        Not not = ff.not(notEqualTo);\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        Query q = new Query(\"ft1\", not);\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        assertEquals(1, features.size());\n+        SimpleFeature f = features.features().next();\n+        assertEquals(pnS.evaluate(f), \"one\");\n+    }\n+\n+    public void testAndNotFilter() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        PropertyName pn = ff.property(\"properties.stringProperty\");\n+        PropertyIsNull isNull = ff.isNull(ff.property(\"properties.nullableAttribute\"));\n+        PropertyIsNotEqualTo equalTo = ff.notEqual(pn, ff.literal(\"zero\"));\n+        Not notFirst = ff.not(isNull);\n+        Not notSecond = ff.not(equalTo);\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        Query q = new Query(\"ft1\", ff.and(notFirst, notSecond));\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        assertEquals(1, features.size());\n+        SimpleFeature f = features.features().next();\n+        assertEquals(pn.evaluate(f), \"zero\");\n+    }\n+\n+    public void testOrNotFilter() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        PropertyName pn = ff.property(\"properties.stringProperty\");\n+        PropertyIsNull isNull = ff.isNull(ff.property(\"properties.nullableAttribute\"));\n+        PropertyIsNotEqualTo equalTo = ff.notEqual(pn, ff.literal(\"zero\"));\n+        Not notFirst = ff.not(isNull);\n+        Not notSecond = ff.not(equalTo);\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        Query q = new Query(\"ft1\", ff.or(notFirst, notSecond));\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        assertEquals(1, features.size());\n+        SimpleFeature f = features.features().next();\n+        assertEquals(pn.evaluate(f), \"zero\");\n+    }\n+\n+    public void testEqualFilter() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        PropertyName pn = ff.property(\"properties.stringProperty\");\n+        PropertyIsEqualTo equalTo = ff.equals(pn, ff.literal(\"zero\"));\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        Query q = new Query(\"ft1\", equalTo);\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        assertEquals(1, features.size());\n+        SimpleFeature f = features.features().next();\n+        assertEquals(pn.evaluate(f), \"zero\");\n+    }\n+\n+    public void testNotWithEqualFilter() throws Exception {\n+        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+        PropertyName pn = ff.property(\"properties.stringProperty\");\n+        PropertyIsEqualTo equalTo = ff.equals(pn, ff.literal(\"zero\"));\n+        Not not = ff.not(equalTo);\n+        SimpleFeatureSource source = dataStore.getFeatureSource(\"ft1\");\n+        Query q = new Query(\"ft1\", not);\n+        SimpleFeatureCollection features = source.getFeatures(q);\n+        SimpleFeatureIterator it = features.features();\n+        assertEquals(2, features.size());\n+        while (it.hasNext()) {\n+            SimpleFeature f = it.next();\n+            assertFalse(pn.evaluate(f).equals(\"zero\"));\n+        }\n+    }\n }\n"}}, {"oid": "025e539fdfd57fc64357b336bb7cc5c6449351ae", "url": "https://github.com/geotools/geotools/commit/025e539fdfd57fc64357b336bb7cc5c6449351ae", "message": "[GEOT-6598] Ogc filter to mongo operator translation fails", "committedDate": "2020-05-28T05:56:23Z", "type": "commit"}, {"oid": "34db923e09b97cc37cb8aad940bc72d5c13fed8a", "url": "https://github.com/geotools/geotools/commit/34db923e09b97cc37cb8aad940bc72d5c13fed8a", "message": "reviewer's suggestions applied", "committedDate": "2020-05-28T05:56:23Z", "type": "commit"}, {"oid": "34db923e09b97cc37cb8aad940bc72d5c13fed8a", "url": "https://github.com/geotools/geotools/commit/34db923e09b97cc37cb8aad940bc72d5c13fed8a", "message": "reviewer's suggestions applied", "committedDate": "2020-05-28T05:56:23Z", "type": "forcePushed"}]}