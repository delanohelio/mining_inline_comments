{"pr_number": 2951, "pr_title": "[GEOT-6605] Add SqlServer support to ImageMosaic Index", "pr_createdAt": "2020-05-28T11:09:54Z", "pr_url": "https://github.com/geotools/geotools/pull/2951", "timeline": [{"oid": "8575b970e85b5ea863889914f5c2602ad906f6a2", "url": "https://github.com/geotools/geotools/commit/8575b970e85b5ea863889914f5c2602ad906f6a2", "message": "[GEOT-6605] Add SqlServer support to ImageMosaic Index", "committedDate": "2020-05-28T12:50:21Z", "type": "forcePushed"}, {"oid": "868410745ff21f1c8bd5231368b2c1f0420b55f3", "url": "https://github.com/geotools/geotools/commit/868410745ff21f1c8bd5231368b2c1f0420b55f3", "message": "[GEOT-6605] Add SqlServer support to ImageMosaic Index", "committedDate": "2020-06-04T10:06:38Z", "type": "commit"}, {"oid": "868410745ff21f1c8bd5231368b2c1f0420b55f3", "url": "https://github.com/geotools/geotools/commit/868410745ff21f1c8bd5231368b2c1f0420b55f3", "message": "[GEOT-6605] Add SqlServer support to ImageMosaic Index", "committedDate": "2020-06-04T10:06:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNzMyMg==", "url": "https://github.com/geotools/geotools/pull/2951#discussion_r435217322", "bodyText": "see my comment about eventually moving duplicated code on a superclass.", "author": "dromagnoli", "createdAt": "2020-06-04T12:33:42Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/catalog/sqlserver/SQLServerTypeMapper.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic.catalog.sqlserver;\n+\n+import java.util.*;\n+import org.geotools.data.simple.SimpleFeatureSource;\n+import org.geotools.data.transform.Definition;\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\n+import org.geotools.filter.text.cql2.CQLException;\n+import org.geotools.filter.text.ecql.ECQL;\n+import org.geotools.gce.imagemosaic.catalog.oracle.DataStoreWrapper;\n+import org.geotools.gce.imagemosaic.catalog.oracle.FeatureTypeMapper;\n+import org.geotools.jdbc.JDBCDataStore;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.feature.type.AttributeDescriptor;\n+import org.opengis.feature.type.AttributeType;\n+import org.opengis.feature.type.GeometryType;\n+import org.opengis.feature.type.Name;\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\n+\n+/**\n+ * Specific SQLServer implementation for a {@link DataStoreWrapper} By default, SQLServer\n+ * identifiers can't be longer than 128 chars. See <a\n+ * href=\"https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers?view=sql-server-ver15\">SQL\n+ * Syntax identifiers</a>\n+ */\n+public class SQLServerTypeMapper implements FeatureTypeMapper {", "originalCommit": "868410745ff21f1c8bd5231368b2c1f0420b55f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1ODQ4Nw==", "url": "https://github.com/geotools/geotools/pull/2951#discussion_r435358487", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-06-04T15:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNzMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "30f4eb0d759f8260f00bdfc7632ddb5e396b28a9", "chunk": "diff --git a/modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/catalog/sqlserver/SQLServerTypeMapper.java b/modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/catalog/sqlserver/SQLServerTypeMapper.java\nindex 2d3e011f41..684d4f855f 100644\n--- a/modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/catalog/sqlserver/SQLServerTypeMapper.java\n+++ b/modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/catalog/sqlserver/SQLServerTypeMapper.java\n\n@@ -17,20 +17,17 @@\n package org.geotools.gce.imagemosaic.catalog.sqlserver;\n \n import java.util.*;\n-import org.geotools.data.simple.SimpleFeatureSource;\n import org.geotools.data.transform.Definition;\n import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\n import org.geotools.filter.text.cql2.CQLException;\n-import org.geotools.filter.text.ecql.ECQL;\n+import org.geotools.gce.imagemosaic.catalog.oracle.AbstractFeatureTypeMapper;\n import org.geotools.gce.imagemosaic.catalog.oracle.DataStoreWrapper;\n-import org.geotools.gce.imagemosaic.catalog.oracle.FeatureTypeMapper;\n import org.geotools.jdbc.JDBCDataStore;\n import org.opengis.feature.simple.SimpleFeatureType;\n import org.opengis.feature.type.AttributeDescriptor;\n import org.opengis.feature.type.AttributeType;\n import org.opengis.feature.type.GeometryType;\n import org.opengis.feature.type.Name;\n-import org.opengis.referencing.crs.CoordinateReferenceSystem;\n \n /**\n  * Specific SQLServer implementation for a {@link DataStoreWrapper} By default, SQLServer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxODAyMQ==", "url": "https://github.com/geotools/geotools/pull/2951#discussion_r435218021", "bodyText": "Not sure you are Simone, actually  :-)", "author": "dromagnoli", "createdAt": "2020-06-04T12:34:58Z", "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java", "diffHunk": "@@ -0,0 +1,682 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.awt.*;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.sql.*;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.commons.io.FileUtils;\n+import org.geotools.coverage.grid.GridEnvelope2D;\n+import org.geotools.coverage.grid.GridGeometry2D;\n+import org.geotools.coverage.grid.io.AbstractGridFormat;\n+import org.geotools.coverage.grid.io.DimensionDescriptor;\n+import org.geotools.coverage.util.FeatureUtilities;\n+import org.geotools.data.Query;\n+import org.geotools.filter.SortByImpl;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalogVisitor;\n+import org.geotools.geometry.GeneralEnvelope;\n+import org.geotools.test.OnlineTestCase;\n+import org.geotools.test.TestData;\n+import org.geotools.util.NumberRange;\n+import org.geotools.util.factory.Hints;\n+import org.geotools.util.logging.Logging;\n+import org.junit.Test;\n+import org.opengis.feature.simple.SimpleFeature;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.filter.sort.SortBy;\n+import org.opengis.filter.sort.SortOrder;\n+import org.opengis.parameter.GeneralParameterValue;\n+import org.opengis.parameter.ParameterValue;\n+\n+/** Testing using a SQLServer database for storing the index for the ImageMosaic */\n+public class ImageMosaicSQLServerIndexOnlineTest extends OnlineTestCase {\n+\n+    private static final Logger LOGGER =\n+            Logging.getLogger(ImageMosaicSQLServerIndexOnlineTest.class);\n+\n+    static final String metadataTable = \"GEOMETRY_METADATA\";\n+\n+    static final String tempFolderNoEpsg = \"rgbNoEpsg\";\n+\n+    static final String tempFolderName1 = \"waterTempPG\";\n+\n+    static final String tempFolderName2 = \"waterTempPG2\";\n+\n+    static final String tempFolderName3 = \"waterTempPG3\";\n+\n+    static final String tempFolderName4 = \"waterTempPGCD\";\n+\n+    static final String tempFolderNameWrap = \"waterTempPGWrap\";\n+\n+    static final String VERY_LONG_NAME_SQLSERVER =\n+            \"very_very_long_name_with_number_of_chars_greater_than_128_to_test_the_sqlserver_wrapper_even_if_has_some_more_characters_compared_with_oracle_and_postgres\";\n+\n+    private static final String CREATE_METADATA_TABLE_SQL =\n+            \"IF NOT EXISTS (select * from sysobjects where name= '\"\n+                    + metadataTable\n+                    + \"' and xtype='U') \"\n+                    + \"CREATE TABLE \"\n+                    + metadataTable\n+                    + \" (\"\n+                    + \"F_TABLE_SCHEMA VARCHAR(30) NOT NULL,\"\n+                    + \"F_TABLE_NAME VARCHAR(200) NOT NULL,\"\n+                    + \"F_GEOMETRY_COLUMN VARCHAR(30) NOT NULL,\"\n+                    + \"COORD_DIMENSION INTEGER,\"\n+                    + \"SRID INTEGER NOT NULL,\"\n+                    + \"TYPE VARCHAR(30) NOT NULL,\"\n+                    + \"UNIQUE(F_TABLE_SCHEMA, F_TABLE_NAME, F_GEOMETRY_COLUMN),\"\n+                    + \"CHECK(TYPE IN ('POINT','LINE', 'POLYGON', 'COLLECTION', 'MULTIPOINT', 'MULTILINE', 'MULTIPOLYGON', 'GEOMETRY') ))\";\n+\n+    /**\n+     * Simple Class for better testing raster manager\n+     *\n+     * @author Simone Giannecchini, GeoSolutions SAS\n+     */", "originalCommit": "868410745ff21f1c8bd5231368b2c1f0420b55f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1OTQxMQ==", "url": "https://github.com/geotools/geotools/pull/2951#discussion_r435359411", "bodyText": "indeed :). Updated it", "author": "taba90", "createdAt": "2020-06-04T15:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxODAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "30f4eb0d759f8260f00bdfc7632ddb5e396b28a9", "chunk": "diff --git a/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java b/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java\nindex f2888cdf64..991a083d22 100644\n--- a/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java\n+++ b/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java\n\n@@ -94,7 +94,7 @@ public class ImageMosaicSQLServerIndexOnlineTest extends OnlineTestCase {\n     /**\n      * Simple Class for better testing raster manager\n      *\n-     * @author Simone Giannecchini, GeoSolutions SAS\n+     * @author Marco Volpini, GeoSolutions SAS\n      */\n     private static class MyImageMosaicReader extends ImageMosaicReader {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyMTEzMw==", "url": "https://github.com/geotools/geotools/pull/2951#discussion_r435221133", "bodyText": "is it intentionally commented out?\nneeded for other type of testing?\nthe other tests have that line not commented.", "author": "dromagnoli", "createdAt": "2020-06-04T12:40:09Z", "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java", "diffHunk": "@@ -0,0 +1,682 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.awt.*;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.sql.*;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.commons.io.FileUtils;\n+import org.geotools.coverage.grid.GridEnvelope2D;\n+import org.geotools.coverage.grid.GridGeometry2D;\n+import org.geotools.coverage.grid.io.AbstractGridFormat;\n+import org.geotools.coverage.grid.io.DimensionDescriptor;\n+import org.geotools.coverage.util.FeatureUtilities;\n+import org.geotools.data.Query;\n+import org.geotools.filter.SortByImpl;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalogVisitor;\n+import org.geotools.geometry.GeneralEnvelope;\n+import org.geotools.test.OnlineTestCase;\n+import org.geotools.test.TestData;\n+import org.geotools.util.NumberRange;\n+import org.geotools.util.factory.Hints;\n+import org.geotools.util.logging.Logging;\n+import org.junit.Test;\n+import org.opengis.feature.simple.SimpleFeature;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.filter.sort.SortBy;\n+import org.opengis.filter.sort.SortOrder;\n+import org.opengis.parameter.GeneralParameterValue;\n+import org.opengis.parameter.ParameterValue;\n+\n+/** Testing using a SQLServer database for storing the index for the ImageMosaic */\n+public class ImageMosaicSQLServerIndexOnlineTest extends OnlineTestCase {\n+\n+    private static final Logger LOGGER =\n+            Logging.getLogger(ImageMosaicSQLServerIndexOnlineTest.class);\n+\n+    static final String metadataTable = \"GEOMETRY_METADATA\";\n+\n+    static final String tempFolderNoEpsg = \"rgbNoEpsg\";\n+\n+    static final String tempFolderName1 = \"waterTempPG\";\n+\n+    static final String tempFolderName2 = \"waterTempPG2\";\n+\n+    static final String tempFolderName3 = \"waterTempPG3\";\n+\n+    static final String tempFolderName4 = \"waterTempPGCD\";\n+\n+    static final String tempFolderNameWrap = \"waterTempPGWrap\";\n+\n+    static final String VERY_LONG_NAME_SQLSERVER =\n+            \"very_very_long_name_with_number_of_chars_greater_than_128_to_test_the_sqlserver_wrapper_even_if_has_some_more_characters_compared_with_oracle_and_postgres\";\n+\n+    private static final String CREATE_METADATA_TABLE_SQL =\n+            \"IF NOT EXISTS (select * from sysobjects where name= '\"\n+                    + metadataTable\n+                    + \"' and xtype='U') \"\n+                    + \"CREATE TABLE \"\n+                    + metadataTable\n+                    + \" (\"\n+                    + \"F_TABLE_SCHEMA VARCHAR(30) NOT NULL,\"\n+                    + \"F_TABLE_NAME VARCHAR(200) NOT NULL,\"\n+                    + \"F_GEOMETRY_COLUMN VARCHAR(30) NOT NULL,\"\n+                    + \"COORD_DIMENSION INTEGER,\"\n+                    + \"SRID INTEGER NOT NULL,\"\n+                    + \"TYPE VARCHAR(30) NOT NULL,\"\n+                    + \"UNIQUE(F_TABLE_SCHEMA, F_TABLE_NAME, F_GEOMETRY_COLUMN),\"\n+                    + \"CHECK(TYPE IN ('POINT','LINE', 'POLYGON', 'COLLECTION', 'MULTIPOINT', 'MULTILINE', 'MULTIPOLYGON', 'GEOMETRY') ))\";\n+\n+    /**\n+     * Simple Class for better testing raster manager\n+     *\n+     * @author Simone Giannecchini, GeoSolutions SAS\n+     */\n+    private static class MyImageMosaicReader extends ImageMosaicReader {\n+\n+        public MyImageMosaicReader(Object source) throws IOException {\n+            super(source);\n+        }\n+\n+        public MyImageMosaicReader(Object source, Hints uHints) throws IOException {\n+            super(source, uHints);\n+        }\n+    }\n+\n+    @Override\n+    protected Properties createExampleFixture() {\n+        // create sample properties file for sqlserver datastore\n+        final Properties props = new Properties();\n+        props.setProperty(\"SPI\", \"org.geotools.data.sqlserver.SQLServerDataStoreFactory\");\n+        props.setProperty(\"host\", \"localhost\");\n+        props.setProperty(\"port\", \"1433\");\n+        props.setProperty(\"user\", \"geoserver\");\n+        props.setProperty(\"passwd\", \"geoserver\");\n+        props.setProperty(\"database\", \"mock\");\n+        props.setProperty(\"schema\", \"dbo\");\n+        props.setProperty(\"Loose bbox\", \"true\");\n+        props.setProperty(\"Estimated extends\", \"false\");\n+        props.setProperty(\"validate connections\", \"true\");\n+        props.setProperty(\"Connection timeout\", \"10\");\n+        props.setProperty(\"preparedStatements\", \"false\");\n+        props.setProperty(\"Geometry metadata table\", \"GEOMETRY_METADATA\");\n+        return props;\n+    }\n+\n+    // create the geometry metadata table for SQLServer\n+    private void createMetadataTable() {\n+        String jdbcUrl =\n+                \"jdbc:sqlserver://localhost:\"\n+                        + fixture.getProperty(\"port\")\n+                        + \";databaseName=\"\n+                        + fixture.getProperty(\"database\");\n+        String username = fixture.getProperty(\"user\");\n+        String password = fixture.getProperty(\"passwd\");\n+\n+        Connection conn = null;\n+\n+        try {\n+\n+            conn = DriverManager.getConnection(jdbcUrl, username, password);\n+            Statement stmt = null;\n+            try {\n+                stmt = conn.createStatement();\n+\n+                stmt.executeUpdate(CREATE_METADATA_TABLE_SQL);\n+            } catch (SQLException e) {\n+                LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);\n+            } finally {\n+                if (stmt != null) stmt.close();\n+            }\n+        } catch (SQLException e) {\n+            LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);\n+        } finally {\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (Exception e) {\n+                LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);\n+            }\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.geotools.test.OnlineTestCase#getFixtureId()\n+     */\n+    @Override\n+    protected String getFixtureId() {\n+        return \"sqlserver_datastore\";\n+    }\n+\n+    private void setupDataStoreProperties(String folder) throws IOException, FileNotFoundException {\n+        // place datastore.properties file in the dir for the indexing\n+        try (FileWriter out =\n+                new FileWriter(\n+                        new File(TestData.file(this, \".\"), folder + \"/datastore.properties\"))) {\n+            final Set<Object> keyset = fixture.keySet();\n+            for (Object key : keyset) {\n+                final String key_ = (String) key;\n+                String value = fixture.getProperty(key_);\n+                if (key_.equalsIgnoreCase(\"database\")) {\n+                    value = \"mock\";\n+                }\n+\n+                out.write(key_.replace(\" \", \"\\\\ \") + \"=\" + value.replace(\" \", \"\\\\ \") + \"\\n\");\n+            }\n+            out.flush();\n+        }\n+    }\n+\n+    /** Complex test for SQLServer indexing on db. */\n+    @Test\n+    public void testSQLServerIndexing() throws Exception {\n+        ImageMosaicReader reader = null;\n+        try {\n+            createMetadataTable();\n+            // insertMetadataTable(tempFolderName1);\n+            final File workDir = new File(TestData.file(this, \".\"), tempFolderName1);\n+            assertTrue(workDir.mkdir());\n+            FileUtils.copyFile(\n+                    TestData.file(this, \"watertemp.zip\"), new File(workDir, \"watertemp.zip\"));\n+            TestData.unzipFile(this, tempFolderName1 + \"/watertemp.zip\");\n+            final URL timeElevURL = TestData.url(this, tempFolderName1);\n+\n+            setupDataStoreProperties(tempFolderName1);\n+\n+            // now start the test\n+            final AbstractGridFormat format = TestUtils.getFormat(timeElevURL);\n+            assertNotNull(format);\n+            reader = TestUtils.getReader(timeElevURL, format);\n+            assertNotNull(reader);\n+\n+            final String[] metadataNames = reader.getMetadataNames();\n+            assertNotNull(metadataNames);\n+            assertEquals(13, metadataNames.length);\n+\n+            assertEquals(\"true\", reader.getMetadataValue(\"HAS_TIME_DOMAIN\"));\n+            final String timeMetadata = reader.getMetadataValue(\"TIME_DOMAIN\");\n+            assertNotNull(timeMetadata);\n+            assertEquals(2, timeMetadata.split(\",\").length);\n+            assertEquals(\n+                    timeMetadata.split(\",\")[0], reader.getMetadataValue(\"TIME_DOMAIN_MINIMUM\"));\n+            assertEquals(\n+                    timeMetadata.split(\",\")[1], reader.getMetadataValue(\"TIME_DOMAIN_MAXIMUM\"));\n+\n+            assertEquals(\"true\", reader.getMetadataValue(\"HAS_ELEVATION_DOMAIN\"));\n+            final String elevationMetadata = reader.getMetadataValue(\"ELEVATION_DOMAIN\");\n+            assertNotNull(elevationMetadata);\n+            assertEquals(2, elevationMetadata.split(\",\").length);\n+            assertEquals(\n+                    Double.parseDouble(elevationMetadata.split(\",\")[0]),\n+                    Double.parseDouble(reader.getMetadataValue(\"ELEVATION_DOMAIN_MINIMUM\")),\n+                    1E-6);\n+            assertEquals(\n+                    Double.parseDouble(elevationMetadata.split(\",\")[1]),\n+                    Double.parseDouble(reader.getMetadataValue(\"ELEVATION_DOMAIN_MAXIMUM\")),\n+                    1E-6);\n+\n+            // limit yourself to reading just a bit of it\n+            final ParameterValue<GridGeometry2D> gg =\n+                    AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();\n+            final GeneralEnvelope envelope = reader.getOriginalEnvelope();\n+            final Dimension dim = new Dimension();\n+            dim.setSize(\n+                    reader.getOriginalGridRange().getSpan(0) / 2.0,\n+                    reader.getOriginalGridRange().getSpan(1) / 2.0);\n+            final Rectangle rasterArea = ((GridEnvelope2D) reader.getOriginalGridRange());\n+            rasterArea.setSize(dim);\n+            final GridEnvelope2D range = new GridEnvelope2D(rasterArea);\n+            gg.setValue(new GridGeometry2D(range, envelope));\n+\n+            // use imageio with defined tiles\n+            final ParameterValue<List> time = ImageMosaicFormat.TIME.createValue();\n+            final List<Date> timeValues = new ArrayList<Date>();\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.sss'Z'\");\n+            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT+0\"));\n+            Date date = sdf.parse(\"2008-10-31T00:00:00.000Z\");\n+            timeValues.add(date);\n+            time.setValue(timeValues);\n+\n+            final ParameterValue<double[]> bkg = ImageMosaicFormat.BACKGROUND_VALUES.createValue();\n+            bkg.setValue(new double[] {-9999.0});\n+\n+            final ParameterValue<Boolean> direct =\n+                    ImageMosaicFormat.USE_JAI_IMAGEREAD.createValue();\n+            direct.setValue(false);\n+\n+            final ParameterValue<List> elevation = ImageMosaicFormat.ELEVATION.createValue();\n+            elevation.setValue(Arrays.asList(100.0));\n+\n+            // Test the output coverage\n+            assertNotNull(\n+                    reader.read(new GeneralParameterValue[] {gg, time, bkg, elevation, direct}));\n+            TestUtils.checkCoverage(\n+                    reader,\n+                    new GeneralParameterValue[] {gg, time, bkg, elevation, direct},\n+                    \"Time-Elevation Test\");\n+\n+            // Test the output coverage\n+            reader = TestUtils.getReader(timeElevURL, format);\n+            elevation.setValue(Arrays.asList(NumberRange.create(0.0, 10.0)));\n+            TestUtils.checkCoverage(\n+                    reader,\n+                    new GeneralParameterValue[] {gg, time, bkg, elevation, direct},\n+                    \"Time-Elevation Test\");\n+        } finally {\n+            // dropTables(new String[] {tempFolderName1, \"GEOMETRY_METADATA\"});", "originalCommit": "868410745ff21f1c8bd5231368b2c1f0420b55f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1OTAwNA==", "url": "https://github.com/geotools/geotools/pull/2951#discussion_r435359004", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-06-04T15:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyMTEzMw=="}], "type": "inlineReview", "revised_code": {"commit": "30f4eb0d759f8260f00bdfc7632ddb5e396b28a9", "chunk": "diff --git a/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java b/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java\nindex f2888cdf64..991a083d22 100644\n--- a/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java\n+++ b/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicSQLServerIndexOnlineTest.java\n\n@@ -94,7 +94,7 @@ public class ImageMosaicSQLServerIndexOnlineTest extends OnlineTestCase {\n     /**\n      * Simple Class for better testing raster manager\n      *\n-     * @author Simone Giannecchini, GeoSolutions SAS\n+     * @author Marco Volpini, GeoSolutions SAS\n      */\n     private static class MyImageMosaicReader extends ImageMosaicReader {\n \n"}}, {"oid": "30f4eb0d759f8260f00bdfc7632ddb5e396b28a9", "url": "https://github.com/geotools/geotools/commit/30f4eb0d759f8260f00bdfc7632ddb5e396b28a9", "message": "reviewer's feedback applied", "committedDate": "2020-06-04T14:22:28Z", "type": "forcePushed"}, {"oid": "fd94bbb0c40794de0355f7092984adb6b3847732", "url": "https://github.com/geotools/geotools/commit/fd94bbb0c40794de0355f7092984adb6b3847732", "message": "reviewer's feedback applied", "committedDate": "2020-06-04T15:39:36Z", "type": "commit"}, {"oid": "fd94bbb0c40794de0355f7092984adb6b3847732", "url": "https://github.com/geotools/geotools/commit/fd94bbb0c40794de0355f7092984adb6b3847732", "message": "reviewer's feedback applied", "committedDate": "2020-06-04T15:39:36Z", "type": "forcePushed"}, {"oid": "2a0f79bc7752405b6dfe5fd0ee3e484174a68be6", "url": "https://github.com/geotools/geotools/commit/2a0f79bc7752405b6dfe5fd0ee3e484174a68be6", "message": "reviewer's feedback #2", "committedDate": "2020-06-04T16:30:26Z", "type": "commit"}, {"oid": "2a0f79bc7752405b6dfe5fd0ee3e484174a68be6", "url": "https://github.com/geotools/geotools/commit/2a0f79bc7752405b6dfe5fd0ee3e484174a68be6", "message": "reviewer's feedback #2", "committedDate": "2020-06-04T16:30:26Z", "type": "forcePushed"}]}