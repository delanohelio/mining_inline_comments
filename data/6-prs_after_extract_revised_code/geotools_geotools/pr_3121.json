{"pr_number": 3121, "pr_title": "[GEOT-6270] SimplifyingFilterVisitor does not account for null values", "pr_createdAt": "2020-08-26T14:32:35Z", "pr_url": "https://github.com/geotools/geotools/pull/3121", "timeline": [{"oid": "8cd319764678d122b5f0c5d47843633848ea39e3", "url": "https://github.com/geotools/geotools/commit/8cd319764678d122b5f0c5d47843633848ea39e3", "message": "[GEOT-6270] SimplifyingFilterVisitor does not account for null values\nwhen simplifying negations", "committedDate": "2020-08-26T14:52:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIyMzQ2MQ==", "url": "https://github.com/geotools/geotools/pull/3121#discussion_r478223461", "bodyText": "If the featureType field has been set, check if the property is nullable before adding this extra. Add a test accordingly.", "author": "aaime", "createdAt": "2020-08-27T07:47:31Z", "path": "modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java", "diffHunk": "@@ -418,7 +421,8 @@ public Object visit(Not filter, Object extraData) {\n                 PropertyIsBetween pb = (PropertyIsBetween) simplified;\n                 Filter lt = ff.less(pb.getExpression(), pb.getLowerBoundary());\n                 Filter gt = ff.greater(pb.getExpression(), pb.getUpperBoundary());\n-                return ff.or(lt, gt);\n+                Filter nullFilter = ff.isNull(pb.getExpression());", "originalCommit": "8cd319764678d122b5f0c5d47843633848ea39e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4MzcyOQ==", "url": "https://github.com/geotools/geotools/pull/3121#discussion_r478483729", "bodyText": "I have just made related changes and added the test as well.", "author": "huseyin-bozkurt", "createdAt": "2020-08-27T14:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIyMzQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6748175f6303bbf61188032f4863164b779b4d6", "chunk": "diff --git a/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java b/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java\nindex 9d18876e1d..034d5edc79 100644\n--- a/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java\n+++ b/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java\n\n@@ -421,8 +423,13 @@ public class SimplifyingFilterVisitor extends DuplicatingFilterVisitor {\n                 PropertyIsBetween pb = (PropertyIsBetween) simplified;\n                 Filter lt = ff.less(pb.getExpression(), pb.getLowerBoundary());\n                 Filter gt = ff.greater(pb.getExpression(), pb.getUpperBoundary());\n-                Filter nullFilter = ff.isNull(pb.getExpression());\n-                return ff.or(Stream.of(lt,gt,nullFilter).collect(Collectors.toList()));\n+                PropertyName pn = (PropertyName) pb.getExpression();\n+                String pName = pn.getPropertyName();\n+                Filter nullFilter = null;\n+                if(isNillable(pName)) {\n+                \tnullFilter = ff.isNull(pb.getExpression());\n+                }\n+                return ff.or(Stream.of(lt,gt,nullFilter).filter(Objects::nonNull).collect(Collectors.toList()));\n             } else if (simplified instanceof PropertyIsEqualTo) {\n                 PropertyIsEqualTo pe = (PropertyIsEqualTo) simplified;\n                 return ff.notEqual(pe.getExpression1(), pe.getExpression2(), pe.isMatchingCase());\n"}}, {"oid": "c6748175f6303bbf61188032f4863164b779b4d6", "url": "https://github.com/geotools/geotools/commit/c6748175f6303bbf61188032f4863164b779b4d6", "message": "[GEOT-6270] SimplifyingFilterVisitor does not account for null values\nwhen simplifying negations", "committedDate": "2020-08-27T14:36:36Z", "type": "forcePushed"}, {"oid": "ac12cf826cb35162a054d2629dba165cb1ae7cbd", "url": "https://github.com/geotools/geotools/commit/ac12cf826cb35162a054d2629dba165cb1ae7cbd", "message": "[GEOT-6270] SimplifyingFilterVisitor does not account for null values\nwhen simplifying negations", "committedDate": "2020-08-27T14:40:39Z", "type": "commit"}, {"oid": "ac12cf826cb35162a054d2629dba165cb1ae7cbd", "url": "https://github.com/geotools/geotools/commit/ac12cf826cb35162a054d2629dba165cb1ae7cbd", "message": "[GEOT-6270] SimplifyingFilterVisitor does not account for null values\nwhen simplifying negations", "committedDate": "2020-08-27T14:40:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMDc0NA==", "url": "https://github.com/geotools/geotools/pull/3121#discussion_r479810744", "bodyText": "If I'm not mistaken the propose of the expression Stream.of(lt,gt,nullFilter).filter(Objects::nonNull).collect(Collectors.toList())  is to get rid of nullFilter if it's NULL, I think it would be more efficient and (arguably) clear to do something like this instead:\nif (isNillable(pName)) {\n    // the property may have a NULL value, we need to vouch for it\n    nullFilter = ff.isNull(pb.getExpression());\n    return ff.or(lt, gt, nullFilter);\n}\n// the property value cannot be null\nreturn ff.or(lt, gt);", "author": "nmco", "createdAt": "2020-08-30T20:12:09Z", "path": "modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java", "diffHunk": "@@ -418,7 +423,13 @@ public Object visit(Not filter, Object extraData) {\n                 PropertyIsBetween pb = (PropertyIsBetween) simplified;\n                 Filter lt = ff.less(pb.getExpression(), pb.getLowerBoundary());\n                 Filter gt = ff.greater(pb.getExpression(), pb.getUpperBoundary());\n-                return ff.or(lt, gt);\n+                PropertyName pn = (PropertyName) pb.getExpression();\n+                String pName = pn.getPropertyName();\n+                Filter nullFilter = null;\n+                if(isNillable(pName)) {\n+                \tnullFilter = ff.isNull(pb.getExpression());\n+                }\n+                return ff.or(Stream.of(lt,gt,nullFilter).filter(Objects::nonNull).collect(Collectors.toList()));", "originalCommit": "ac12cf826cb35162a054d2629dba165cb1ae7cbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzg2NA==", "url": "https://github.com/geotools/geotools/pull/3121#discussion_r479813864", "bodyText": "Yes @nmco , you are right. The aim is to get rid of nullFilter if it's NULL but not possible to use ff.or(lt, gt, nullFilter); because it accepts 2 parameters or an ArrayList (for more than 2 filters).\nInstead of defining a new arraylist for non-null case, i would like to handle it in just one line.", "author": "huseyin-bozkurt", "createdAt": "2020-08-30T20:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMDc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3NTEwNA==", "url": "https://github.com/geotools/geotools/pull/3121#discussion_r479975104", "bodyText": "You're correct, my mistake. In that case I would suggest to separate the concerns; first you build the list of filters then you build the filter. Something like this:\nList<Filter> orFilters = new ArrayList<>();\norFilters.add(lt);\norFilters.add(gt);\nif (isNillable(pName)) {\n    // the property may have a NULL value, we need to vouch for it\n    orFilters.add(pb.getExpression());\n}\nreturn ff.or(orFilters);", "author": "nmco", "createdAt": "2020-08-31T08:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMDc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwODIyNw==", "url": "https://github.com/geotools/geotools/pull/3121#discussion_r480108227", "bodyText": "Dear @nmco, I updated the file according to your suggestion.", "author": "huseyin-bozkurt", "createdAt": "2020-08-31T12:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMDc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "97c4dba4c96e2612f9c85c99a6d94f8f209a7873", "chunk": "diff --git a/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java b/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java\nindex 392c336c33..66c7cb821b 100644\n--- a/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java\n+++ b/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java\n\n@@ -426,10 +425,13 @@ public class SimplifyingFilterVisitor extends DuplicatingFilterVisitor {\n                 PropertyName pn = (PropertyName) pb.getExpression();\n                 String pName = pn.getPropertyName();\n                 Filter nullFilter = null;\n-                if(isNillable(pName)) {\n-                \tnullFilter = ff.isNull(pb.getExpression());\n+                if (isNillable(pName)) {\n+                    nullFilter = ff.isNull(pb.getExpression());\n                 }\n-                return ff.or(Stream.of(lt,gt,nullFilter).filter(Objects::nonNull).collect(Collectors.toList()));\n+                return ff.or(\n+                        Stream.of(lt, gt, nullFilter)\n+                                .filter(Objects::nonNull)\n+                                .collect(Collectors.toList()));\n             } else if (simplified instanceof PropertyIsEqualTo) {\n                 PropertyIsEqualTo pe = (PropertyIsEqualTo) simplified;\n                 return ff.notEqual(pe.getExpression1(), pe.getExpression2(), pe.isMatchingCase());\n"}}, {"oid": "97c4dba4c96e2612f9c85c99a6d94f8f209a7873", "url": "https://github.com/geotools/geotools/commit/97c4dba4c96e2612f9c85c99a6d94f8f209a7873", "message": "[GEOT-6270] SimplifyingFilterVisitor does not account for null values\nwhen simplifying negations.", "committedDate": "2020-08-30T20:36:22Z", "type": "commit"}, {"oid": "bc02a4d5cc1f89a140facd2ce674a1363b0759a1", "url": "https://github.com/geotools/geotools/commit/bc02a4d5cc1f89a140facd2ce674a1363b0759a1", "message": "[GEOT-6270] SimplifyingFilterVisitor does not account for null values\nwhen simplifying negations.", "committedDate": "2020-08-31T12:48:38Z", "type": "commit"}]}