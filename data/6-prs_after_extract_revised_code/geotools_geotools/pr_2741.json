{"pr_number": 2741, "pr_title": "[GEOT-6487] CSVDatastore ignores the projection of output geometry", "pr_createdAt": "2020-01-12T20:30:11Z", "pr_url": "https://github.com/geotools/geotools/pull/2741", "timeline": [{"oid": "928f8506fe1803c8af2d8d17b843ef5129b1984f", "url": "https://github.com/geotools/geotools/commit/928f8506fe1803c8af2d8d17b843ef5129b1984f", "message": "read and write .prj files", "committedDate": "2020-01-12T20:07:31Z", "type": "commit"}, {"oid": "d836aa535af07ac7780e468b8df8e40bcaa0d972", "url": "https://github.com/geotools/geotools/commit/d836aa535af07ac7780e468b8df8e40bcaa0d972", "message": "read and write .prj files", "committedDate": "2020-01-12T20:22:20Z", "type": "commit"}, {"oid": "e0609c5e6b52b20e26f48e2897d3977e65ac370f", "url": "https://github.com/geotools/geotools/commit/e0609c5e6b52b20e26f48e2897d3977e65ac370f", "message": "read and write .prj files", "committedDate": "2020-01-12T20:22:20Z", "type": "commit"}, {"oid": "ac76183724eb10d21cab4604347f56d013ad9ee5", "url": "https://github.com/geotools/geotools/commit/ac76183724eb10d21cab4604347f56d013ad9ee5", "message": "rebase", "committedDate": "2020-01-12T20:29:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYxOTYwOQ==", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r365619609", "bodyText": "Is this just left over from the old tutorial code? Just want to make sure we aren't breaking a docs reference.", "author": "bradh", "createdAt": "2020-01-12T23:22:23Z", "path": "modules/plugin/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java", "diffHunk": "@@ -45,11 +45,12 @@ public CSVFeatureSource(ContentEntry entry, Query query) {\n         super(entry, query);\n     }\n \n+    @Override\n     public CSVDataStore getDataStore() {\n         return (CSVDataStore) super.getDataStore();\n     }\n \n-    // docs start getBoundsInternal", "originalCommit": "ac76183724eb10d21cab4604347f56d013ad9ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAwOTcyNw==", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r371009727", "bodyText": "The docs code is now completely broken out and I think I've finally found all of these.", "author": "ianturton", "createdAt": "2020-01-26T15:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYxOTYwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxMjE4MA==", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r365712180", "bodyText": "Suggestion, check that the contents can be read and have the expected value. Maybe by just round tripping, that, is, read back the file with a new store instance and checking that the CRS associated to the feature type is the expected one.", "author": "aaime", "createdAt": "2020-01-13T09:44:27Z", "path": "modules/plugin/csv/src/test/java/org/geotools/data/csv/TestCRSHandling.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.geotools.data.csv;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.data.DataStore;\n+import org.geotools.data.DataStoreFinder;\n+import org.geotools.data.simple.SimpleFeatureSource;\n+import org.geotools.data.simple.SimpleFeatureStore;\n+import org.geotools.referencing.CRS;\n+import org.geotools.test.TestData;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengis.referencing.FactoryException;\n+import org.opengis.referencing.NoSuchAuthorityCodeException;\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\n+\n+public class TestCRSHandling {\n+\n+    private static File tmp;\n+    private static File statesfile;\n+    private static DataStore stateStore;\n+\n+    /**\n+     * Check that CRS are handled correctly\n+     *\n+     * @throws Exception\n+     */\n+    @Before\n+    public void setUp() throws Exception {}\n+\n+    @BeforeClass\n+    public static void createTemporaryLocations() throws IOException {\n+        tmp = File.createTempFile(\"example\", \"\");\n+        boolean exists = tmp.exists();\n+        if (exists) {\n+            tmp.delete();\n+        }\n+        boolean created = tmp.mkdirs();\n+        if (!created) {\n+            System.exit(1);\n+        }\n+        statesfile = new File(tmp, \"locations.csv\");\n+\n+        URL resource = TestData.getResource(CSVWriteTest.class, \"locations.csv\");\n+        Files.copy(resource.openStream(), statesfile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, statesfile.toString());\n+        stateStore = DataStoreFinder.getDataStore(params);\n+    }\n+\n+    @Test\n+    public void testPrjFileRead()\n+            throws FileNotFoundException, IOException, NoSuchAuthorityCodeException,\n+                    FactoryException {\n+        File f = TestData.file(this, \"coastal2.csv\");\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, f.toString());\n+        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.WKT_STRATEGY);\n+        params.put(CSVDataStoreFactory.WKTP.key, \"WKT\");\n+\n+        DataStore store = DataStoreFinder.getDataStore(params);\n+        String name = store.getTypeNames()[0];\n+        CoordinateReferenceSystem crs =\n+                store.getFeatureSource(name).getSchema().getCoordinateReferenceSystem();\n+        CoordinateReferenceSystem expected = CRS.decode(\"EPSG:27700\");\n+        assertEquals(\n+                expected.getIdentifiers().iterator().next().getCode(),\n+                crs.getIdentifiers().iterator().next().getCode());\n+    }\n+\n+    @Test\n+    public void testWritePrj() throws IOException {\n+        File f = new File(tmp, \"testcrs.csv\");\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(CSVDataStoreFactory.FILE_PARAM.key, f.toString());\n+        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.WKT_STRATEGY);\n+        params.put(CSVDataStoreFactory.WKTP.key, \"WKT\");\n+        params.put(CSVDataStoreFactory.WRITEPRJ.key, \"true\");\n+        DataStore store = DataStoreFinder.getDataStore(params);\n+        store.createSchema(stateStore.getSchema(stateStore.getTypeNames()[0]));\n+        SimpleFeatureSource source = store.getFeatureSource(store.getTypeNames()[0]);\n+        if (!(source instanceof SimpleFeatureStore)) {\n+            fail(\"can't create output file\");\n+        }\n+        SimpleFeatureStore outstore = (SimpleFeatureStore) source;\n+        outstore.addFeatures(\n+                stateStore.getFeatureSource(stateStore.getTypeNames()[0]).getFeatures());\n+        store.dispose();\n+        String prjName = FilenameUtils.getBaseName(f.getName()) + \".prj\";\n+        File prj = new File(f.getParent(), prjName);\n+        assertTrue(prj.exists());", "originalCommit": "ac76183724eb10d21cab4604347f56d013ad9ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMjk0Mg==", "url": "https://github.com/geotools/geotools/pull/2741#discussion_r371012942", "bodyText": "Just as well I checked - it was wrong :-(", "author": "ianturton", "createdAt": "2020-01-26T16:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxMjE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "74f912f0d613c25583e183679863880f458b504d", "chunk": "diff --git a/modules/plugin/csv/src/test/java/org/geotools/data/csv/TestCRSHandling.java b/modules/plugin/csv/src/test/java/org/geotools/data/csv/CRSHandlingTest.java\nsimilarity index 65%\nrename from modules/plugin/csv/src/test/java/org/geotools/data/csv/TestCRSHandling.java\nrename to modules/plugin/csv/src/test/java/org/geotools/data/csv/CRSHandlingTest.java\nindex a10e2807ad..5e4665bc68 100644\n--- a/modules/plugin/csv/src/test/java/org/geotools/data/csv/TestCRSHandling.java\n+++ b/modules/plugin/csv/src/test/java/org/geotools/data/csv/CRSHandlingTest.java\n\n@@ -4,8 +4,10 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileNotFoundException;\n+import java.io.FileReader;\n import java.io.IOException;\n import java.net.URL;\n import java.nio.file.Files;\n"}}, {"oid": "74f912f0d613c25583e183679863880f458b504d", "url": "https://github.com/geotools/geotools/commit/74f912f0d613c25583e183679863880f458b504d", "message": "finished up CRS fix", "committedDate": "2020-01-26T16:39:25Z", "type": "commit"}]}