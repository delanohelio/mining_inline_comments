{"pr_number": 3219, "pr_title": "[GEOT-6740] Shapefile reader fails on lines and polygons having Z and no optional M", "pr_createdAt": "2020-11-17T11:14:21Z", "pr_url": "https://github.com/geotools/geotools/pull/3219", "timeline": [{"oid": "5d1fc19a7ebd9cc31af3f2a1095d1329a4ea11cf", "url": "https://github.com/geotools/geotools/commit/5d1fc19a7ebd9cc31af3f2a1095d1329a4ea11cf", "message": "[GEOT-6740] Shapefile reader fails on lines and polygons having Z and no optional M", "committedDate": "2020-11-17T11:52:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUzODY3Mg==", "url": "https://github.com/geotools/geotools/pull/3219#discussion_r528538672", "bodyText": "Where are the tests on zlines now? If new files are needed, it seems to mean the older files had a different structure (or are the source file broken?).\nIsn't it better to keep tests for the old files and add tests for the new ones?\nChecking with ogrinfo, it's happy to open it and recognizes it as a LINESTRING Z, as it does with the new file. If they have a different structure, both should be tested.\nLooking at the sources Shapelib per se assumes that M is there if the type has the Z:\nhttps://github.com/OSGeo/shapelib/blob/master/shpopen.c#L1218\nHowever the reading code is ready not to find the array of M, and will skip them in that case.\nThe OGR wrapper around that code tries to determine if the M is there by reading the first geometry, see here:\nhttps://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrsf_frmts/shape/ogrshapelayer.cpp#L194", "author": "aaime", "createdAt": "2020-11-23T08:38:42Z", "path": "modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/shp/ZMHandlersTest.java", "diffHunk": "@@ -155,15 +155,15 @@ public void testReadMLine() throws ShapefileException, IOException {\n \n     @Test\n     public void testReadZLine() throws ShapefileException, IOException {\n-        URL url = TestData.url(ShapefileDataStore.class, \"mzvalues/zlines.shp\");\n+        URL url = TestData.url(ShapefileDataStore.class, \"mzvalues/linez.shp\");", "originalCommit": "5d1fc19a7ebd9cc31af3f2a1095d1329a4ea11cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3NzY0Mw==", "url": "https://github.com/geotools/geotools/pull/3219#discussion_r529177643", "bodyText": "I think it needed to be the last shape in the file being read to trigger the exception (which is the difference between overrunning the buffer vs just reading random data from the next shape in the file). The existing tests were reading the Z-shapes without M-values and passing because they only ever read the first shape. @taba90 changed the file to only contain a single shape, which would then trigger the exception. (For GEOT-6683 I took a slightly different approach and used the existing file, and added a new test that read all the shapes in the file)", "author": "tlbeale", "createdAt": "2020-11-24T03:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUzODY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cc8a417850101ebc26e0ac04c3832bff280243e0", "chunk": "diff --git a/modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/shp/ZMHandlersTest.java b/modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/shp/ZMHandlersTest.java\nindex 95e3e6602c..f443fc8a0a 100644\n--- a/modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/shp/ZMHandlersTest.java\n+++ b/modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/shp/ZMHandlersTest.java\n\n@@ -154,7 +156,7 @@ public class ZMHandlersTest {\n     }\n \n     @Test\n-    public void testReadZLine() throws ShapefileException, IOException {\n+    public void testReadZLineWithOptionalM() throws ShapefileException, IOException {\n         URL url = TestData.url(ShapefileDataStore.class, \"mzvalues/linez.shp\");\n         ShapefileDataStore store = new ShapefileDataStore(url);\n         SimpleFeature feature = DataUtilities.first(store.getFeatureSource().getFeatures());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1Njc4OQ==", "url": "https://github.com/geotools/geotools/pull/3219#discussion_r528556789", "bodyText": "Points and multipoints have not been covered by the changes, looking at their code, is seems they would be affected by the same issue. Or not?", "author": "aaime", "createdAt": "2020-11-23T09:13:01Z", "path": "modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/shp/MultiLineHandler.java", "diffHunk": "@@ -221,10 +221,13 @@ public Object read(ByteBuffer buffer, ShapeType type, boolean flatGeometry) {\n                 }\n             }\n         }\n-        if ((shapeType == ShapeType.ARCZ || shapeType == ShapeType.ARCM) && !flatGeometry) {\n+        if ((doubleBuffer.hasRemaining() && (shapeType == ShapeType.ARCZ)", "originalCommit": "5d1fc19a7ebd9cc31af3f2a1095d1329a4ea11cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NzYzMg==", "url": "https://github.com/geotools/geotools/pull/3219#discussion_r529167632", "bodyText": "Multipoints also have the same problem. Points have already been fixed up in master by GEOT-6729 (commit 821d9ad)", "author": "tlbeale", "createdAt": "2020-11-24T02:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1Njc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc8a417850101ebc26e0ac04c3832bff280243e0", "chunk": "diff --git a/modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/shp/MultiLineHandler.java b/modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/shp/MultiLineHandler.java\nindex 5ada745c02..5806362215 100644\n--- a/modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/shp/MultiLineHandler.java\n+++ b/modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/shp/MultiLineHandler.java\n\n@@ -221,9 +221,8 @@ public class MultiLineHandler implements ShapeHandler {\n                 }\n             }\n         }\n-        if ((doubleBuffer.hasRemaining() && (shapeType == ShapeType.ARCZ)\n-                        || shapeType == ShapeType.ARCM)\n-                && !flatGeometry) {\n+        boolean isArcZWithM = doubleBuffer.hasRemaining() && shapeType == ShapeType.ARCZ;\n+        if ((isArcZWithM || shapeType == ShapeType.ARCM) && !flatGeometry) {\n             // M min, max\n             // buffer.position(buffer.position() + 2 * 8);\n             ((Buffer) doubleBuffer).position(doubleBuffer.position() + 2);\n"}}, {"oid": "cc8a417850101ebc26e0ac04c3832bff280243e0", "url": "https://github.com/geotools/geotools/commit/cc8a417850101ebc26e0ac04c3832bff280243e0", "message": "[GEOT-6740] Shapefile reader fails on lines and polygons having Z and no optional M", "committedDate": "2020-11-24T09:13:04Z", "type": "commit"}, {"oid": "6b69b6d9e497a4c550ab96d87e1a255a390eb2cd", "url": "https://github.com/geotools/geotools/commit/6b69b6d9e497a4c550ab96d87e1a255a390eb2cd", "message": "ZMHandlersTest: read all features for all M/Z file variants", "committedDate": "2020-11-24T09:31:02Z", "type": "commit"}, {"oid": "6b69b6d9e497a4c550ab96d87e1a255a390eb2cd", "url": "https://github.com/geotools/geotools/commit/6b69b6d9e497a4c550ab96d87e1a255a390eb2cd", "message": "ZMHandlersTest: read all features for all M/Z file variants", "committedDate": "2020-11-24T09:31:02Z", "type": "forcePushed"}]}