{"pr_number": 7564, "pr_title": "Fix builders ABI backward compatibility broken in v1.33.0", "pr_createdAt": "2020-10-28T21:08:11Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7564", "timeline": [{"oid": "972ea1d41fe1fee622cd92931166c62dbc33ce4f", "url": "https://github.com/grpc/grpc-java/commit/972ea1d41fe1fee622cd92931166c62dbc33ce4f", "message": "fix channel builders ABI backward compatibility broken in v1.33.0", "committedDate": "2020-10-28T21:04:37Z", "type": "commit"}, {"oid": "be7a6281c898fad1917bd5932ae9d6bebf13cbec", "url": "https://github.com/grpc/grpc-java/commit/be7a6281c898fad1917bd5932ae9d6bebf13cbec", "message": "fix server builders ABI backward compatibility broken in v1.33.0", "committedDate": "2020-10-28T22:03:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxOTg0MQ==", "url": "https://github.com/grpc/grpc-java/pull/7564#discussion_r513819841", "bodyText": "This would need to re-define the methods of ForwardingServerBuilder. At that point extending ForwardingServerBuilder provides nothing. It is good to change ForwardingServerBuilder to <T extends ServerBuilder>, though. Although I also wonder if we should remove the class from v1.33.x since it is now unused. (We can just make it package-private to reduce code churn.)", "author": "ejona86", "createdAt": "2020-10-28T23:24:36Z", "path": "core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+import io.grpc.ForwardingServerBuilder;\n+import io.grpc.ServerBuilder;\n+\n+/**\n+ * Temporary shim for {@link io.grpc.ForwardingServerBuilder} to fix ABI backward compatibility.\n+ *\n+ * @param <T> The concrete type of this builder.\n+ * @see <a href=\"https://github.com/grpc/grpc-java/issues/7211\">grpc/grpc-java#7211</a>\n+ */\n+public abstract class AbstractServerImplBuilder", "originalCommit": "be7a6281c898fad1917bd5932ae9d6bebf13cbec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MDU5Ng==", "url": "https://github.com/grpc/grpc-java/pull/7564#discussion_r513850596", "bodyText": "Right, that's where I had doubts. On another hand, one could interpret the spec that it's sufficient for the class to be simply  present in the hierarchy. I was about to give updated AbstractManagedChannelImplBuilder a shot, I already have a setup with the issue reproduced. Will try AbstractServerImplBuilder too.", "author": "sergiitk", "createdAt": "2020-10-29T01:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxOTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkwMjE2NA==", "url": "https://github.com/grpc/grpc-java/pull/7564#discussion_r513902164", "bodyText": "OK, after digging with javap, I understand the order of things with generics now. You're right. I'd have to redefine all methods in AbstractManagedChannelImplBuilder, otherwise they are generated with ServerBuilder return type. Which is a supertype for AbstractManagedChannelImplBuilder, so no match.", "author": "sergiitk", "createdAt": "2020-10-29T02:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxOTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkxNjE3MQ==", "url": "https://github.com/grpc/grpc-java/pull/7564#discussion_r513916171", "bodyText": "Good news is the fix for AbstractManagedChannelImplBuilder works well.\nA client created with gRPC v1.32.2 is compatible with gRPC jars created from this branch. I confirmed the client is compatible with methods that got moved from abstract to fwd  in v1.32.2, then brought back in this PR.  And, just in case, I confirmed that methods that were pushed down from abstract to netty, work too.\n\u276f java -cp \"./abi-1.32.2.jar:./deps-1.32.2/*\" org.example.AbiClient\nManagedChannelOrphanWrapper{delegate=ManagedChannelImpl{logId=1, target=localhost:100}}\n\n\u276f java -cp \"./abi-1.32.2.jar:./deps-1.33.0/*\" org.example.AbiClient\nException in thread \"main\" java.lang.NoSuchMethodError: \n  io.grpc.netty.NettyChannelBuilder.maxRetryAttempts(I)Lio/grpc/internal/AbstractManagedChannelImplBuilder;\n\tat org.example.AbiClient.<init>(AbiClient.java:14)\n\tat org.example.AbiClient.main(AbiClient.java:22)\n\n\u276f java -cp \"./abi-1.32.2.jar:./deps-1.34-be7a6281c/*\" org.example.AbiClient\nManagedChannelOrphanWrapper{delegate=ManagedChannelImpl{logId=1, target=localhost:100}}\n\nsrc:\npackage org.example;\n\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.netty.NettyChannelBuilder;\n\npublic class AbiClient {\n  private final NettyChannelBuilder ncb;\n\n  public AbiClient() {\n    ncb = NettyChannelBuilder\n        .forTarget(\"localhost:100\")\n        .maxInboundMetadataSize(100)    // own\n        .maxRetryAttempts(100);         // Moved from abstract to fwd in v1.33.0\n  }\n\n  public NettyChannelBuilder getBuilder() {\n    return ncb;\n  }\n\n  public static void main(String[] args) {\n    AbiClient me = new AbiClient();\n    ManagedChannel c = me.getBuilder().build();\n    System.out.println(c);\n  }\n}", "author": "sergiitk", "createdAt": "2020-10-29T03:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxOTg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7eac3b0f9437ac5894bbcc1b134d05fd87b84b68", "chunk": "diff --git a/core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java b/core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java\nindex 5c05caca3..715161c06 100644\n--- a/core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java\n+++ b/core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java\n\n@@ -16,21 +16,167 @@\n \n package io.grpc.internal;\n \n-import io.grpc.ForwardingServerBuilder;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.BinaryLog;\n+import io.grpc.BindableService;\n+import io.grpc.CompressorRegistry;\n+import io.grpc.DecompressorRegistry;\n+import io.grpc.HandlerRegistry;\n+import io.grpc.Server;\n import io.grpc.ServerBuilder;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.ServerStreamTracer;\n+import io.grpc.ServerTransportFilter;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n \n /**\n- * Temporary shim for {@link io.grpc.ForwardingServerBuilder} to fix ABI backward compatibility.\n+ * A {@link ServerBuilder} that delegates all its builder method to another builder by default.\n  *\n+ * <p>Temporarily duplicates io.grpc.ForwardingServerBuilder (temporarily package-private)\n+ * to fix ABI backward compatibility.\n+\n  * @param <T> The concrete type of this builder.\n  * @see <a href=\"https://github.com/grpc/grpc-java/issues/7211\">grpc/grpc-java#7211</a>\n  */\n public abstract class AbstractServerImplBuilder\n-    <T extends AbstractServerImplBuilder<T>> extends ForwardingServerBuilder<T> {\n+    <T extends AbstractServerImplBuilder<T>> extends ServerBuilder<T> {\n+\n+  /** The default constructor. */\n+  protected AbstractServerImplBuilder() {}\n+\n   /**\n    * This method serves to force sub classes to \"hide\" this static factory.\n    */\n   public static ServerBuilder<?> forPort(int port) {\n     throw new UnsupportedOperationException(\"Subclass failed to hide static factory\");\n   }\n+\n+  /**\n+   * Returns the delegated {@code ServerBuilder}.\n+   */\n+  protected abstract ServerBuilder<?> delegate();\n+\n+  @Override\n+  public T directExecutor() {\n+    delegate().directExecutor();\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T executor(@Nullable Executor executor) {\n+    delegate().executor(executor);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T addService(ServerServiceDefinition service) {\n+    delegate().addService(service);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T addService(BindableService bindableService) {\n+    delegate().addService(bindableService);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T intercept(ServerInterceptor interceptor) {\n+    delegate().intercept(interceptor);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T addTransportFilter(ServerTransportFilter filter) {\n+    delegate().addTransportFilter(filter);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T addStreamTracerFactory(ServerStreamTracer.Factory factory) {\n+    delegate().addStreamTracerFactory(factory);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T fallbackHandlerRegistry(@Nullable HandlerRegistry fallbackRegistry) {\n+    delegate().fallbackHandlerRegistry(fallbackRegistry);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T useTransportSecurity(File certChain, File privateKey) {\n+    delegate().useTransportSecurity(certChain, privateKey);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T useTransportSecurity(InputStream certChain, InputStream privateKey) {\n+    delegate().useTransportSecurity(certChain, privateKey);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T decompressorRegistry(@Nullable DecompressorRegistry registry) {\n+    delegate().decompressorRegistry(registry);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T compressorRegistry(@Nullable CompressorRegistry registry) {\n+    delegate().compressorRegistry(registry);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T handshakeTimeout(long timeout, TimeUnit unit) {\n+    delegate().handshakeTimeout(timeout, unit);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T maxInboundMessageSize(int bytes) {\n+    delegate().maxInboundMessageSize(bytes);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T maxInboundMetadataSize(int bytes) {\n+    delegate().maxInboundMetadataSize(bytes);\n+    return thisT();\n+  }\n+\n+  @Override\n+  public T setBinaryLog(BinaryLog binaryLog) {\n+    delegate().setBinaryLog(binaryLog);\n+    return thisT();\n+  }\n+\n+  /**\n+   * Returns the {@link Server} built by the delegate by default. Overriding method can return\n+   * different value.\n+   */\n+  @Override\n+  public Server build() {\n+    return delegate().build();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this).add(\"delegate\", delegate()).toString();\n+  }\n+\n+  /**\n+   * Returns the correctly typed version of the builder.\n+   */\n+  protected final T thisT() {\n+    @SuppressWarnings(\"unchecked\")\n+    T thisT = (T) this;\n+    return thisT;\n+  }\n }\n"}}, {"oid": "7eac3b0f9437ac5894bbcc1b134d05fd87b84b68", "url": "https://github.com/grpc/grpc-java/commit/7eac3b0f9437ac5894bbcc1b134d05fd87b84b68", "message": "AbstractServerImplBuilder duplicates ForwardingServerBuilder", "committedDate": "2020-10-29T15:35:44Z", "type": "commit"}]}