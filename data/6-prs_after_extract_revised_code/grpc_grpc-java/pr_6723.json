{"pr_number": 6723, "pr_title": "core, grpclb: change policy selection strategy for Grpclb policy (take two: move logic of querying SRV into Grpclb's own resolver)", "pr_createdAt": "2020-02-19T00:34:29Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6723", "timeline": [{"oid": "71621231b9ff7054fc945d7c961847de0c5c9b65", "url": "https://github.com/grpc/grpc-java/commit/71621231b9ff7054fc945d7c961847de0c5c9b65", "message": "Refactor DnsNameResolver to separate logics of resolving host address, service config, balancer addresses. Subclass is able to override the resolve logic.", "committedDate": "2020-02-18T20:11:45Z", "type": "commit"}, {"oid": "75a4ce1a61b59abea2e4c713b2452afb857b3f08", "url": "https://github.com/grpc/grpc-java/commit/75a4ce1a61b59abea2e4c713b2452afb857b3f08", "message": "Eliminate BaseDnsNameResolverProvider, Grpclb's name resolver provider will provide GrpclbNameResolver directly. This also eliminate the enableSrv flag.", "committedDate": "2020-02-19T00:19:38Z", "type": "commit"}, {"oid": "b935f463d1bf4d14cf00487d140c1feb2098c478", "url": "https://github.com/grpc/grpc-java/commit/b935f463d1bf4d14cf00487d140c1feb2098c478", "message": "Delete test for verifying grpclb balancer addresses in dns name resolver test.", "committedDate": "2020-02-19T00:21:30Z", "type": "commit"}, {"oid": "49f72401e044f5a8d276f8cba1695f437291781d", "url": "https://github.com/grpc/grpc-java/commit/49f72401e044f5a8d276f8cba1695f437291781d", "message": "Eliminate ATTR_LB_ADDRS in GrpcAttributes.", "committedDate": "2020-02-19T00:35:22Z", "type": "commit"}, {"oid": "49f72401e044f5a8d276f8cba1695f437291781d", "url": "https://github.com/grpc/grpc-java/commit/49f72401e044f5a8d276f8cba1695f437291781d", "message": "Eliminate ATTR_LB_ADDRS in GrpcAttributes.", "committedDate": "2020-02-19T00:35:22Z", "type": "forcePushed"}, {"oid": "a28394f794b5133569ea03108ef322f293352bea", "url": "https://github.com/grpc/grpc-java/commit/a28394f794b5133569ea03108ef322f293352bea", "message": "Add tests for SecretGrpclbNameResolverProvider.", "committedDate": "2020-02-19T00:54:05Z", "type": "commit"}, {"oid": "446f3d2feb91579117887f14ce1853ec07422dbb", "url": "https://github.com/grpc/grpc-java/commit/446f3d2feb91579117887f14ce1853ec07422dbb", "message": "Add test for GrpclbNameResolver", "committedDate": "2020-02-20T02:08:20Z", "type": "commit"}, {"oid": "d3c6ba13849bf22c9507ebbed26b5635089ee027", "url": "https://github.com/grpc/grpc-java/commit/d3c6ba13849bf22c9507ebbed26b5635089ee027", "message": "Modify DnsNameResolver's tests for its behavior changes.", "committedDate": "2020-02-20T02:09:16Z", "type": "commit"}, {"oid": "d3c6ba13849bf22c9507ebbed26b5635089ee027", "url": "https://github.com/grpc/grpc-java/commit/d3c6ba13849bf22c9507ebbed26b5635089ee027", "message": "Modify DnsNameResolver's tests for its behavior changes.", "committedDate": "2020-02-20T02:09:16Z", "type": "forcePushed"}, {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364", "url": "https://github.com/grpc/grpc-java/commit/afa1e7dc1c50027e84e3dcab73ff2382e6784364", "message": "Add VisibleForTesting annotations.", "committedDate": "2020-02-21T01:53:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMjA3NQ==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r384732075", "bodyText": "I'm not wild about how coupled the GrpclbNameResolver is to DnsNameResolver. It looks quite brittle. This method seems to be the biggest issue.\nWe may want to discuss in person, but it seems we could try to do a delegation strategy or have the caller of this method notify the listener. Both of those seem to allow a super.doResolve() approach to let the base class do its work (instead of copying it here and treating the base class as a utility class). As it stands, it would be more straight-forward to have a shared utility class instead of extending.", "author": "ejona86", "createdAt": "2020-02-26T20:00:03Z", "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbNameResolver.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.grpclb;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+import io.grpc.Attributes;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.NameResolver;\n+import io.grpc.Status;\n+import io.grpc.internal.DnsNameResolver;\n+import io.grpc.internal.SharedResourceHolder.Resource;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A DNS-based {@link NameResolver} with gRPC LB specific add-ons for resolving balancer\n+ * addresses via service records.\n+ *\n+ * @see SecretGrpclbNameResolverProvider\n+ */\n+final class GrpclbNameResolver extends DnsNameResolver {\n+\n+  private static final Logger logger = Logger.getLogger(GrpclbNameResolver.class.getName());\n+\n+  // From https://github.com/grpc/proposal/blob/master/A5-grpclb-in-dns.md\n+  private static final String GRPCLB_NAME_PREFIX = \"_grpclb._tcp.\";\n+\n+  GrpclbNameResolver(\n+      @Nullable String nsAuthority,\n+      String name,\n+      Args args,\n+      Resource<Executor> executorResource,\n+      Stopwatch stopwatch,\n+      boolean isAndroid) {\n+    super(nsAuthority, name, args, executorResource, stopwatch, isAndroid);\n+  }\n+\n+  @Override\n+  protected boolean doResolve(Listener2 listener) {", "originalCommit": "afa1e7dc1c50027e84e3dcab73ff2382e6784364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODEwOQ==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r385468109", "bodyText": "Reworked this method extension. Introduced an struct for grouping components of resolution result, caller of this method will populate items out and invoke the callback.", "author": "voidzcy", "createdAt": "2020-02-28T01:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMjA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "22d9bd5b8e84fa6c90bca56d5295578fb29d1168", "chunk": "diff --git a/grpclb/src/main/java/io/grpc/grpclb/GrpclbNameResolver.java b/grpclb/src/main/java/io/grpc/grpclb/GrpclbNameResolver.java\nindex 76a25639c..40956ec54 100644\n--- a/grpclb/src/main/java/io/grpc/grpclb/GrpclbNameResolver.java\n+++ b/grpclb/src/main/java/io/grpc/grpclb/GrpclbNameResolver.java\n\n@@ -21,7 +21,6 @@ import com.google.common.base.Stopwatch;\n import io.grpc.Attributes;\n import io.grpc.EquivalentAddressGroup;\n import io.grpc.NameResolver;\n-import io.grpc.Status;\n import io.grpc.internal.DnsNameResolver;\n import io.grpc.internal.SharedResourceHolder.Resource;\n import java.net.InetAddress;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NTMwMA==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r383545300", "bodyText": "in theory, this should be \"grpclb\" or something not \"dns\"? (not asking to change, but i feel like i have to say this)", "author": "creamsoup", "createdAt": "2020-02-24T22:11:37Z", "path": "grpclb/src/main/java/io/grpc/grpclb/SecretGrpclbNameResolverProvider.java", "diffHunk": "@@ -32,24 +38,46 @@\n  *   yet))</li>\n  *   <li>{@code \"dns:///foo.googleapis.com\"} (without port)</li>\n  * </ul>\n- *\n- * <p>Note: the main difference between {@code io.grpc.DnsNameResolver} is service record is enabled\n- * by default.\n  */\n // Make it package-private so that it cannot be directly referenced by users.  Java service loader\n // requires the provider to be public, but we can hide it under a package-private class.\n final class SecretGrpclbNameResolverProvider {\n \n   private SecretGrpclbNameResolverProvider() {}\n \n-  public static final class Provider extends BaseDnsNameResolverProvider {\n+  public static final class Provider extends NameResolverProvider {\n+\n+    private static final String SCHEME = \"dns\";", "originalCommit": "afa1e7dc1c50027e84e3dcab73ff2382e6784364", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NTgzNQ==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r383545835", "bodyText": "2020", "author": "creamsoup", "createdAt": "2020-02-24T22:12:55Z", "path": "grpclb/src/test/java/io/grpc/grpclb/GrpclbNameResolverTest.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright 2015 The gRPC Authors", "originalCommit": "afa1e7dc1c50027e84e3dcab73ff2382e6784364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzIxNQ==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r385467215", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-02-28T01:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NTgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4b79152dc1213451db9d8ec2bd67756b596f0692", "chunk": "diff --git a/grpclb/src/test/java/io/grpc/grpclb/GrpclbNameResolverTest.java b/grpclb/src/test/java/io/grpc/grpclb/GrpclbNameResolverTest.java\nindex 317e7e28e..bf44a81a8 100644\n--- a/grpclb/src/test/java/io/grpc/grpclb/GrpclbNameResolverTest.java\n+++ b/grpclb/src/test/java/io/grpc/grpclb/GrpclbNameResolverTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2015 The gRPC Authors\n+ * Copyright 2020 The gRPC Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MjkwOA==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r383562908", "bodyText": "can you flatten this ifs?", "author": "creamsoup", "createdAt": "2020-02-24T22:53:31Z", "path": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "diffHunk": "@@ -650,20 +619,22 @@ void setResourceResolver(ResourceResolver resourceResolver) {\n   /**\n    * {@link ResourceResolver} is a Dns ResourceRecord resolver.\n    */\n-  interface ResourceResolver {\n+  @VisibleForTesting\n+  public interface ResourceResolver {\n     List<String> resolveTxt(String host) throws Exception;\n \n-    List<EquivalentAddressGroup> resolveSrv(\n-        AddressResolver addressResolver, String host) throws Exception;\n+    List<SrvRecord> resolveSrv(String host) throws Exception;\n   }\n \n   @Nullable\n-  private ResourceResolver getResourceResolver() {\n-    ResourceResolver rr;\n-    if ((rr = resourceResolver.get()) == null) {\n-      if (resourceResolverFactory != null) {\n-        assert resourceResolverFactory.unavailabilityCause() == null;\n-        rr = resourceResolverFactory.newResourceResolver();\n+  protected ResourceResolver getResourceResolver() {\n+    ResourceResolver rr = null;\n+    if (shouldUseJndi(enableJndi, enableJndiLocalhost, host)) {", "originalCommit": "afa1e7dc1c50027e84e3dcab73ff2382e6784364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzIzNg==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r385467236", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-02-28T01:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MjkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8a981eae9ed3fd6af96f5941192df68ec61b0bbc", "chunk": "diff --git a/core/src/main/java/io/grpc/internal/DnsNameResolver.java b/core/src/main/java/io/grpc/internal/DnsNameResolver.java\nindex 072ea340c..7241b31e7 100644\n--- a/core/src/main/java/io/grpc/internal/DnsNameResolver.java\n+++ b/core/src/main/java/io/grpc/internal/DnsNameResolver.java\n\n@@ -628,13 +645,14 @@ public class DnsNameResolver extends NameResolver {\n \n   @Nullable\n   protected ResourceResolver getResourceResolver() {\n-    ResourceResolver rr = null;\n-    if (shouldUseJndi(enableJndi, enableJndiLocalhost, host)) {\n-      if ((rr = resourceResolver.get()) == null) {\n-        if (resourceResolverFactory != null) {\n-          assert resourceResolverFactory.unavailabilityCause() == null;\n-          rr = resourceResolverFactory.newResourceResolver();\n-        }\n+    if (!shouldUseJndi(enableJndi, enableJndiLocalhost, host)) {\n+      return null;\n+    }\n+    ResourceResolver rr;\n+    if ((rr = resourceResolver.get()) == null) {\n+      if (resourceResolverFactory != null) {\n+        assert resourceResolverFactory.unavailabilityCause() == null;\n+        rr = resourceResolverFactory.newResourceResolver();\n       }\n     }\n     return rr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTk3MQ==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r384719971", "bodyText": "fake class should be simpler.", "author": "creamsoup", "createdAt": "2020-02-26T19:39:29Z", "path": "core/src/test/java/io/grpc/internal/DnsNameResolverTest.java", "diffHunk": "@@ -593,123 +567,155 @@ public void resolve_balancerAddrsAsAttributes() throws Exception {\n         (InetSocketAddress) Iterables.getOnlyElement(\n             Iterables.getOnlyElement(result.getAddresses()).getAddresses());\n     assertThat(resolvedBackendAddr.getAddress()).isEqualTo(backendAddr);\n-    assertThat(result.getAttributes().get(GrpcAttributes.ATTR_LB_ADDRS))\n-        .containsExactly(balancerAddr);\n+    verify(mockAddressResolver).resolveAddress(name);\n+    assertThat(result.getAttributes()).isEqualTo(Attributes.EMPTY);\n+    assertThat(result.getServiceConfig()).isNull();\n   }\n \n   @Test\n-  public void resolveAll_nullResourceResolver() throws Exception {\n-    final String hostname = \"addr.fake\";\n-    final Inet4Address backendAddr = InetAddresses.fromInteger(0x7f000001);\n-\n-    AddressResolver mockResolver = mock(AddressResolver.class);\n-    when(mockResolver.resolveAddress(anyString()))\n-        .thenReturn(Collections.<InetAddress>singletonList(backendAddr));\n-    ResourceResolver resourceResolver = null;\n-    boolean resovleSrv = true;\n-    boolean resolveTxt = true;\n+  public void resolve_nullResourceResolver_addressFailure() throws Exception {\n+    DnsNameResolver.enableTxt = true;\n+    AddressResolver mockAddressResolver = mock(AddressResolver.class);\n+    when(mockAddressResolver.resolveAddress(anyString()))\n+        .thenThrow(new IOException(\"no addr\"));\n+    String name = \"foo.googleapis.com\";\n \n-    ResolutionResults res = DnsNameResolver.resolveAll(\n-        mockResolver, resourceResolver, resovleSrv, resolveTxt, hostname);\n-    assertThat(res.addresses).containsExactly(backendAddr);\n-    assertThat(res.balancerAddresses).isEmpty();\n-    assertThat(res.txtRecords).isEmpty();\n-    verify(mockResolver).resolveAddress(hostname);\n+    DnsNameResolver resolver = newResolver(name, 81);\n+    resolver.setAddressResolver(mockAddressResolver);\n+    resolver.setResourceResolver(null);\n+    resolver.start(mockListener);\n+    assertEquals(1, fakeExecutor.runDueTasks());\n+    verify(mockListener).onError(errorCaptor.capture());\n+    Status errorStatus = errorCaptor.getValue();\n+    assertThat(errorStatus.getCode()).isEqualTo(Code.UNAVAILABLE);\n+    assertThat(errorStatus.getCause()).hasMessageThat().contains(\"no addr\");\n   }\n \n   @Test\n-  public void resolveAll_nullResourceResolver_addressFailure() throws Exception {\n-    final String hostname = \"addr.fake\";\n-\n-    AddressResolver mockResolver = mock(AddressResolver.class);\n-    when(mockResolver.resolveAddress(anyString()))\n-        .thenThrow(new IOException(\"no addr\"));\n-    ResourceResolver resourceResolver = null;\n-    boolean resovleSrv = true;\n-    boolean resolveTxt = true;\n+  public void resolve_presentResourceResolver() throws Exception {\n+    DnsNameResolver.enableTxt = true;\n+    InetAddress backendAddr = InetAddresses.fromInteger(0x7f000001);\n+    AddressResolver mockAddressResolver = mock(AddressResolver.class);\n+    when(mockAddressResolver.resolveAddress(anyString()))\n+        .thenReturn(Collections.singletonList(backendAddr));\n+    ResourceResolver mockResourceResolver = mock(ResourceResolver.class);\n+    when(mockResourceResolver.resolveTxt(anyString()))\n+        .thenReturn(\n+            Collections.singletonList(\n+                \"grpc_config=[{\\\"clientLanguage\\\": [\\\"java\\\"], \\\"serviceConfig\\\": {}}]\"));\n+    ServiceConfigParser serviceConfigParser = mock(ServiceConfigParser.class);\n+    when(serviceConfigParser.parseServiceConfig(ArgumentMatchers.<String, Object>anyMap()))", "originalCommit": "afa1e7dc1c50027e84e3dcab73ff2382e6784364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzI4Ng==", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r385467286", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-02-28T01:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "740282a5b34846452b8b410ba90b76b7a637eb20", "chunk": "diff --git a/core/src/test/java/io/grpc/internal/DnsNameResolverTest.java b/core/src/test/java/io/grpc/internal/DnsNameResolverTest.java\nindex 88e2918eb..09d1df692 100644\n--- a/core/src/test/java/io/grpc/internal/DnsNameResolverTest.java\n+++ b/core/src/test/java/io/grpc/internal/DnsNameResolverTest.java\n\n@@ -603,15 +600,12 @@ public class DnsNameResolverTest {\n         .thenReturn(\n             Collections.singletonList(\n                 \"grpc_config=[{\\\"clientLanguage\\\": [\\\"java\\\"], \\\"serviceConfig\\\": {}}]\"));\n-    ServiceConfigParser serviceConfigParser = mock(ServiceConfigParser.class);\n-    when(serviceConfigParser.parseServiceConfig(ArgumentMatchers.<String, Object>anyMap()))\n-        .thenAnswer(new Answer<ConfigOrError>() {\n-          @Override\n-          public ConfigOrError answer(InvocationOnMock invocation) {\n-            Object[] args = invocation.getArguments();\n-            return ConfigOrError.fromConfig(args[0]);\n-          }\n-        });\n+    ServiceConfigParser serviceConfigParser = new ServiceConfigParser() {\n+      @Override\n+      public ConfigOrError parseServiceConfig(Map<String, ?> rawServiceConfig) {\n+        return ConfigOrError.fromConfig(rawServiceConfig);\n+      }\n+    };\n     NameResolver.Args args =\n         NameResolver.Args.newBuilder()\n             .setDefaultPort(DEFAULT_PORT)\n"}}, {"oid": "22d9bd5b8e84fa6c90bca56d5295578fb29d1168", "url": "https://github.com/grpc/grpc-java/commit/22d9bd5b8e84fa6c90bca56d5295578fb29d1168", "message": "Refactor doResolve method to avoid repeating address resolution and service config resolution in child class.", "committedDate": "2020-02-28T01:28:09Z", "type": "commit"}, {"oid": "4b79152dc1213451db9d8ec2bd67756b596f0692", "url": "https://github.com/grpc/grpc-java/commit/4b79152dc1213451db9d8ec2bd67756b596f0692", "message": "Fix year in preface.", "committedDate": "2020-02-28T01:28:59Z", "type": "commit"}, {"oid": "8a981eae9ed3fd6af96f5941192df68ec61b0bbc", "url": "https://github.com/grpc/grpc-java/commit/8a981eae9ed3fd6af96f5941192df68ec61b0bbc", "message": "Avoid introducing if nesting.", "committedDate": "2020-02-28T01:39:44Z", "type": "commit"}, {"oid": "740282a5b34846452b8b410ba90b76b7a637eb20", "url": "https://github.com/grpc/grpc-java/commit/740282a5b34846452b8b410ba90b76b7a637eb20", "message": "Simplify fake service config parser.", "committedDate": "2020-02-28T01:40:15Z", "type": "commit"}, {"oid": "a5f869fa469a962678da09227d5c4591ed3a5d6d", "url": "https://github.com/grpc/grpc-java/commit/a5f869fa469a962678da09227d5c4591ed3a5d6d", "message": "Merge branch 'master' of github.com:grpc/grpc-java into dev/separate_query_srv_logic_into_grpclb", "committedDate": "2020-03-02T08:27:40Z", "type": "commit"}]}