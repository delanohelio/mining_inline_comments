{"pr_number": 7588, "pr_title": "xds: implement a global map for holding circuit breaker request counters", "pr_createdAt": "2020-11-03T21:32:03Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7588", "timeline": [{"oid": "d3a457685c48743f28dac83fd94d26f7dca0f083", "url": "https://github.com/grpc/grpc-java/commit/d3a457685c48743f28dac83fd94d26f7dca0f083", "message": "Introduce an interface for providing per-clusuter request counters.", "committedDate": "2020-11-03T21:29:47Z", "type": "commit"}, {"oid": "bd222c5178795cb58ece29ecfbd7d9361e34bd14", "url": "https://github.com/grpc/grpc-java/commit/bd222c5178795cb58ece29ecfbd7d9361e34bd14", "message": "Implement a global map for holding atomic counters used for aggregating per-cluster requests.", "committedDate": "2020-11-04T22:24:22Z", "type": "commit"}, {"oid": "bd222c5178795cb58ece29ecfbd7d9361e34bd14", "url": "https://github.com/grpc/grpc-java/commit/bd222c5178795cb58ece29ecfbd7d9361e34bd14", "message": "Implement a global map for holding atomic counters used for aggregating per-cluster requests.", "committedDate": "2020-11-04T22:24:22Z", "type": "forcePushed"}, {"oid": "4d62f7324779f15b7119c2ca7e12a35d714c4e0f", "url": "https://github.com/grpc/grpc-java/commit/4d62f7324779f15b7119c2ca7e12a35d714c4e0f", "message": "Put supress warning close to usage.", "committedDate": "2020-11-09T20:10:15Z", "type": "commit"}, {"oid": "4bf5aa1b8be3a1242f1fd600461c27eb49630c4c", "url": "https://github.com/grpc/grpc-java/commit/4bf5aa1b8be3a1242f1fd600461c27eb49630c4c", "message": "Removed unused import.", "committedDate": "2020-11-09T20:44:41Z", "type": "commit"}, {"oid": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e", "url": "https://github.com/grpc/grpc-java/commit/db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e", "message": "Fix typo.", "committedDate": "2020-11-11T23:27:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg==", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523187812", "bodyText": "What about avoiding assignment inside if-condition?\nAtomicLong counter = null;\nif (ref != null) {\n  counter = ref.get();\n}\nif (counter == null) {\n  counter = new AtomicLong();\n  ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n  clusterCounters.put(edsServiceName, ref);\n}", "author": "dapengzhang0", "createdAt": "2020-11-13T19:50:23Z", "path": "xds/src/main/java/io/grpc/xds/SharedCallCounterMap.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EdsLoadBalancer2.CallCounterProvider;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * The global map for holding circuit breaker atomic counters.\n+ */\n+@ThreadSafe\n+final class SharedCallCounterMap implements CallCounterProvider {\n+\n+  private final ReferenceQueue<AtomicLong> refQueue = new ReferenceQueue<>();\n+  private final Map<String, Map<String, CounterReference>> counters;\n+\n+  private SharedCallCounterMap() {\n+    this(new HashMap<String, Map<String, CounterReference>>());\n+  }\n+\n+  @VisibleForTesting\n+  SharedCallCounterMap(Map<String, Map<String, CounterReference>> counters) {\n+    this.counters = checkNotNull(counters, \"counters\");\n+  }\n+\n+  static SharedCallCounterMap getInstance() {\n+    return SharedCallCounterMapHolder.instance;\n+  }\n+\n+  @Override\n+  public synchronized AtomicLong getOrCreate(String cluster, @Nullable String edsServiceName) {\n+    Map<String, CounterReference> clusterCounters = counters.get(cluster);\n+    if (clusterCounters == null) {\n+      clusterCounters = new HashMap<>();\n+      counters.put(cluster, clusterCounters);\n+    }\n+    CounterReference ref = clusterCounters.get(edsServiceName);\n+    AtomicLong counter;\n+    if (ref == null || (counter = ref.get()) == null) {\n+      counter = new AtomicLong();\n+      ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n+      clusterCounters.put(edsServiceName, ref);\n+    }", "originalCommit": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MDYyMg==", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523190622", "bodyText": "Why choose something that is more verbose? \ud83d\ude04", "author": "voidzcy", "createdAt": "2020-11-13T19:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NDIyNA==", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523264224", "bodyText": "Because assignment inside if-condition is less readable.", "author": "dapengzhang0", "createdAt": "2020-11-13T22:22:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MDYyMQ==", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523270621", "bodyText": "Well, that should not be considered as a readability issue, that's what the language feature is, just like all the one liners in Python.", "author": "voidzcy", "createdAt": "2020-11-13T22:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg=="}], "type": "inlineReview", "revised_code": null}]}