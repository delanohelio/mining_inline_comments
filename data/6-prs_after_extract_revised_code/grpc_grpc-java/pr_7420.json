{"pr_number": 7420, "pr_title": "xds: throw XdsInitializationException when reading bootstrap file encounters error", "pr_createdAt": "2020-09-12T01:46:50Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7420", "timeline": [{"oid": "f2ba00255018ceef2868cf118ba986dd36f57a28", "url": "https://github.com/grpc/grpc-java/commit/f2ba00255018ceef2868cf118ba986dd36f57a28", "message": "Introduce XdsInitializationException.", "committedDate": "2020-09-12T01:45:36Z", "type": "commit"}, {"oid": "85bf2514547a1ac4fd7ae17f3cd1e2cb28d3bb77", "url": "https://github.com/grpc/grpc-java/commit/85bf2514547a1ac4fd7ae17f3cd1e2cb28d3bb77", "message": "Migrate to throw XdsInitializationException when reading bootstrap file fails.", "committedDate": "2020-09-12T01:46:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1MjM5OA==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487352398", "bodyText": "Btw, this API usage looks bad...  @sanjaypujare", "author": "voidzcy", "createdAt": "2020-09-12T01:49:09Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ClientSslContextProviderFactory.java", "diffHunk": "@@ -74,8 +74,8 @@ public SslContextProvider create(UpstreamTlsContext upstreamTlsContext) {\n             upstreamTlsContext,\n             bootstrapper.readBootstrap().getNode().toEnvoyProtoNode(),\n             bootstrapper.readBootstrap().getCertProviders());", "originalCommit": "85bf2514547a1ac4fd7ae17f3cd1e2cb28d3bb77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2Mzc3OQ==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487563779", "bodyText": "Agreed. I will fix that (after this PR is in) to remove redundant calls to readBootstrap(). What do you think of the idea to cache BootstrapInfo in the Bootstrapper instance and not re-read if the cached value is present?", "author": "sanjaypujare", "createdAt": "2020-09-13T18:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1MjM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NjAwMA==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487586000", "bodyText": "No, that's problematic. Remember we initially implemented this with global caching of BootstrapInfo, but then realized that each channel should read the bootstrap file once as each channel creates its own XdsClient. This is also how other languages implement it. In the future (e.g., sharing XdsClient), we don't know yet.", "author": "voidzcy", "createdAt": "2020-09-13T22:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1MjM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NjU3Ng==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487586576", "bodyText": "There is a single bootstrap file for the whole application and all instances of the XdsClient (whether used on the channel side or the server side) should see the same content AFAIK. Why do you want each channel to re-read the bootstrap file unless you want to support the use-case of the bootstrap file getting updated during the lifetime of the application - which I think we don't want to support.", "author": "sanjaypujare", "createdAt": "2020-09-13T22:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1MjM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4OTI1Ng==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487589256", "bodyText": "unless you want to support the use-case of the bootstrap file getting updated during the lifetime of the application\n\nYes, I remember this was the reason that we changed the initial version of implementation (with caching) to current one. But any way, the it should not affect how callers use this API as this is an implementation choice. That's why I am saying repeatedly calling readBoostrap is a bad practice instead of it's wrong.", "author": "voidzcy", "createdAt": "2020-09-13T23:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1MjM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU5MTQ5MA==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487591490", "bodyText": "Yes, sounds good.", "author": "sanjaypujare", "createdAt": "2020-09-13T23:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1MjM5OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTUxOQ==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487565519", "bodyText": "Currently this is being used only for bootstrap errors. Unless you anticipate using this exception in \"XdsClient initialization\" cases how about calling this BootstrapException or BootstrapLoadException?", "author": "sanjaypujare", "createdAt": "2020-09-13T19:07:41Z", "path": "xds/src/main/java/io/grpc/xds/XdsInitializationException.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+/**\n+ * Throws when fail to bootstrap or initialize the XdsClient.", "originalCommit": "85bf2514547a1ac4fd7ae17f3cd1e2cb28d3bb77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NTQ5Mg==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487585492", "bodyText": "Yes, it's also gonna be used by consumers of BootstrapInfo. For example, when you try to create the xDS channel with BootstrapInfo that contains a list of xDS server URIs and channel creds options, if none of the channel creds is supported, such an exception will be thrown.", "author": "voidzcy", "createdAt": "2020-09-13T22:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NjEzOQ==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487586139", "bodyText": "SG", "author": "sanjaypujare", "createdAt": "2020-09-13T22:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTUxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NzY1NA==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487567654", "bodyText": "You are not catching ClassCastException here e.g. when JsonParser.parse returns something other than a Map say when the input is [3, 4, 5]. Why not wrap that also in XdsInitializationException?", "author": "sanjaypujare", "createdAt": "2020-09-13T19:28:59Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -74,42 +79,47 @@ public static Bootstrapper getInstance() {\n   /**\n    * Returns configurations from bootstrap.\n    */\n-  public abstract BootstrapInfo readBootstrap() throws IOException;\n+  public abstract BootstrapInfo readBootstrap() throws XdsInitializationException;\n \n   /** Parses a raw string into {@link BootstrapInfo}. */\n   @VisibleForTesting\n-  @SuppressWarnings(\"deprecation\")\n-  public static BootstrapInfo parseConfig(String rawData) throws IOException {\n+  @SuppressWarnings(\"unchecked\")\n+  public static BootstrapInfo parseConfig(String rawData) throws XdsInitializationException {\n     XdsLogger logger = XdsLogger.withPrefix(LOG_PREFIX);\n     logger.log(XdsLogLevel.INFO, \"Reading bootstrap information\");\n-    @SuppressWarnings(\"unchecked\")\n-    Map<String, ?> rawBootstrap = (Map<String, ?>) JsonParser.parse(rawData);\n+    Map<String, ?> rawBootstrap;\n+    try {\n+      rawBootstrap = (Map<String, ?>) JsonParser.parse(rawData);\n+    } catch (IOException e) {", "originalCommit": "85bf2514547a1ac4fd7ae17f3cd1e2cb28d3bb77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NzEwMw==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487587103", "bodyText": "That's wrong. The API caller is not expected to catch unchecked exceptions thrown by the API implementation. That breaks the purpose of abstraction. If the API implementation expects its callers to do something for the exception it throws, it should throw a checked exception. Otherwise, the burden should not be delegated to the API caller (aka, API caller is not expected to look into the API implementation).", "author": "voidzcy", "createdAt": "2020-09-13T22:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU5MjQxNg==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487592416", "bodyText": "I am just looking at the value to the end-user and not the API abstraction or checked vs unchecked exceptions because not having the correct top level JSON structure is still an XdsInitializationException just like all other JSON parsing errors. It is possible to do something like:\nObject obj = JsonParser.parse(rawData);\nif (!(obj instanceof Map)) {\n   throw new XdsInitializationException(...);\n}\nMap<String, ?> rawBootstrap = (Map<String, ?>) obj;", "author": "sanjaypujare", "createdAt": "2020-09-13T23:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMzA0Mw==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487603043", "bodyText": "not having the correct top level JSON structure is still an XdsInitializationException\n\nIt's a bad practice to wrap runtime (unchecked) exceptions, they should be propagated straight to the program surface. The library's top-level API consumer has the error handler to do this properly. For example, NameResolver#Listener2.onError() is the place to gracefully propagate exceptions as error status to the channel, which eventually present to the application. So we have\n\n  \n    \n      grpc-java/xds/src/main/java/io/grpc/xds/XdsNameResolver.java\n    \n    \n        Lines 119 to 122\n      in\n      af6fbf6\n    \n    \n    \n    \n\n        \n          \n           } catch (Exception e) { \n        \n\n        \n          \n             listener.onError( \n        \n\n        \n          \n                 Status.UNAVAILABLE.withDescription(\"Failed to load xDS bootstrap\").withCause(e)); \n        \n\n        \n          \n             return; \n        \n    \n  \n\n\nInstead of wrapping in each implementation layers, runtime exceptions should be directly forward from where it happens to where it is accepted. Again, this is because the API implementation does not expect its caller to catch it and do something, but gRPC as a library is propagating exceptions nicely to consuming applications.", "author": "voidzcy", "createdAt": "2020-09-14T01:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NzY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "5eb22cb30614ffd60372963387e9c0457ccd2d63", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/Bootstrapper.java b/xds/src/main/java/io/grpc/xds/Bootstrapper.java\nindex 287439c9f..19856b88a 100644\n--- a/xds/src/main/java/io/grpc/xds/Bootstrapper.java\n+++ b/xds/src/main/java/io/grpc/xds/Bootstrapper.java\n\n@@ -106,7 +106,7 @@ public abstract class Bootstrapper {\n       String serverUri = JsonUtil.getString(serverConfig, \"server_uri\");\n       if (serverUri == null) {\n         throw new XdsInitializationException(\n-            \"Invalid bootstrap: 'xds_servers' contains unknown server.\");\n+            \"Invalid bootstrap: missing 'xds_servers'\");\n       }\n       logger.log(XdsLogLevel.INFO, \"xDS server URI: {0}\", serverUri);\n       List<ChannelCreds> channelCredsOptions = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2Nzg3OQ==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487567879", "bodyText": "Unknown server? Saying \"missing server_uri\" seems more accurate.", "author": "sanjaypujare", "createdAt": "2020-09-13T19:30:52Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -74,42 +79,47 @@ public static Bootstrapper getInstance() {\n   /**\n    * Returns configurations from bootstrap.\n    */\n-  public abstract BootstrapInfo readBootstrap() throws IOException;\n+  public abstract BootstrapInfo readBootstrap() throws XdsInitializationException;\n \n   /** Parses a raw string into {@link BootstrapInfo}. */\n   @VisibleForTesting\n-  @SuppressWarnings(\"deprecation\")\n-  public static BootstrapInfo parseConfig(String rawData) throws IOException {\n+  @SuppressWarnings(\"unchecked\")\n+  public static BootstrapInfo parseConfig(String rawData) throws XdsInitializationException {\n     XdsLogger logger = XdsLogger.withPrefix(LOG_PREFIX);\n     logger.log(XdsLogLevel.INFO, \"Reading bootstrap information\");\n-    @SuppressWarnings(\"unchecked\")\n-    Map<String, ?> rawBootstrap = (Map<String, ?>) JsonParser.parse(rawData);\n+    Map<String, ?> rawBootstrap;\n+    try {\n+      rawBootstrap = (Map<String, ?>) JsonParser.parse(rawData);\n+    } catch (IOException e) {\n+      throw new XdsInitializationException(\"Failed to parse JSON\", e);\n+    }\n     logger.log(XdsLogLevel.DEBUG, \"Bootstrap configuration:\\n{0}\", rawBootstrap);\n \n     List<ServerInfo> servers = new ArrayList<>();\n     List<?> rawServerConfigs = JsonUtil.getList(rawBootstrap, \"xds_servers\");\n     if (rawServerConfigs == null) {\n-      throw new IOException(\"Invalid bootstrap: 'xds_servers' does not exist.\");\n+      throw new XdsInitializationException(\"Invalid bootstrap: 'xds_servers' does not exist.\");\n     }\n     logger.log(XdsLogLevel.INFO, \"Configured with {0} xDS servers\", rawServerConfigs.size());\n     List<Map<String, ?>> serverConfigList = JsonUtil.checkObjectList(rawServerConfigs);\n     for (Map<String, ?> serverConfig : serverConfigList) {\n       String serverUri = JsonUtil.getString(serverConfig, \"server_uri\");\n       if (serverUri == null) {\n-        throw new IOException(\"Invalid bootstrap: 'xds_servers' contains unknown server.\");\n+        throw new XdsInitializationException(\n+            \"Invalid bootstrap: 'xds_servers' contains unknown server.\");", "originalCommit": "85bf2514547a1ac4fd7ae17f3cd1e2cb28d3bb77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4ODgxNA==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487588814", "bodyText": "Sure. Fixed.", "author": "voidzcy", "createdAt": "2020-09-13T23:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2Nzg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5eb22cb30614ffd60372963387e9c0457ccd2d63", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/Bootstrapper.java b/xds/src/main/java/io/grpc/xds/Bootstrapper.java\nindex 287439c9f..19856b88a 100644\n--- a/xds/src/main/java/io/grpc/xds/Bootstrapper.java\n+++ b/xds/src/main/java/io/grpc/xds/Bootstrapper.java\n\n@@ -106,7 +106,7 @@ public abstract class Bootstrapper {\n       String serverUri = JsonUtil.getString(serverConfig, \"server_uri\");\n       if (serverUri == null) {\n         throw new XdsInitializationException(\n-            \"Invalid bootstrap: 'xds_servers' contains unknown server.\");\n+            \"Invalid bootstrap: missing 'xds_servers'\");\n       }\n       logger.log(XdsLogLevel.INFO, \"xDS server URI: {0}\", serverUri);\n       List<ChannelCreds> channelCredsOptions = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2ODQ1OQ==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487568459", "bodyText": "A general comment for parseConfig: wouldn't it be better to do strictly parsing and schema checks here and do any semantic checks later either as a separate step or where the BootstrapInfo field is consumed? This applies to checks for missing server_uri (this is a gray area I admit), channel creds type etc. That will be cleaner.", "author": "sanjaypujare", "createdAt": "2020-09-13T19:36:06Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -74,42 +79,47 @@ public static Bootstrapper getInstance() {\n   /**\n    * Returns configurations from bootstrap.\n    */\n-  public abstract BootstrapInfo readBootstrap() throws IOException;\n+  public abstract BootstrapInfo readBootstrap() throws XdsInitializationException;\n \n   /** Parses a raw string into {@link BootstrapInfo}. */\n   @VisibleForTesting\n-  @SuppressWarnings(\"deprecation\")\n-  public static BootstrapInfo parseConfig(String rawData) throws IOException {\n+  @SuppressWarnings(\"unchecked\")\n+  public static BootstrapInfo parseConfig(String rawData) throws XdsInitializationException {", "originalCommit": "85bf2514547a1ac4fd7ae17f3cd1e2cb28d3bb77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4ODMyMw==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487588323", "bodyText": "It is doing checks in this way, the parser does not look at what channel creds types are provided, it's just parsing them to Strings and let BootstrapInfo consumers handle if anything they are looking for is missing. Empty server_uri is an ambiguous one, as from the parser's point of view, you could say if server_uri is an empty JSON it would fail to create the BootstrapInfo object (the object does not make sense to exist) or you could say just give BootstrapInfo consumers an empty list and let them handle it. Both are acceptable to me, but it would be good to do this consistently for both server_uri and channel_creds unless there is a special requirement.", "author": "voidzcy", "createdAt": "2020-09-13T23:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2ODQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5eb22cb30614ffd60372963387e9c0457ccd2d63", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/Bootstrapper.java b/xds/src/main/java/io/grpc/xds/Bootstrapper.java\nindex 287439c9f..19856b88a 100644\n--- a/xds/src/main/java/io/grpc/xds/Bootstrapper.java\n+++ b/xds/src/main/java/io/grpc/xds/Bootstrapper.java\n\n@@ -106,7 +106,7 @@ public abstract class Bootstrapper {\n       String serverUri = JsonUtil.getString(serverConfig, \"server_uri\");\n       if (serverUri == null) {\n         throw new XdsInitializationException(\n-            \"Invalid bootstrap: 'xds_servers' contains unknown server.\");\n+            \"Invalid bootstrap: missing 'xds_servers'\");\n       }\n       logger.log(XdsLogLevel.INFO, \"xDS server URI: {0}\", serverUri);\n       List<ChannelCreds> channelCredsOptions = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2OTI5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7420#discussion_r487569295", "bodyText": "As mentioned elsewhere, is it possible to cache BootstrapInfo value so this method doesn't reread the file every single time? Or are there use-cases to support this flow?", "author": "sanjaypujare", "createdAt": "2020-09-13T19:43:58Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -53,17 +53,22 @@\n \n   private static final Bootstrapper DEFAULT_INSTANCE = new Bootstrapper() {\n     @Override\n-    public BootstrapInfo readBootstrap() throws IOException {\n+    public BootstrapInfo readBootstrap() throws XdsInitializationException {", "originalCommit": "85bf2514547a1ac4fd7ae17f3cd1e2cb28d3bb77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5eb22cb30614ffd60372963387e9c0457ccd2d63", "url": "https://github.com/grpc/grpc-java/commit/5eb22cb30614ffd60372963387e9c0457ccd2d63", "message": "Improve error message.", "committedDate": "2020-09-13T23:05:21Z", "type": "commit"}, {"oid": "1fb005e94e66d6aac8fc3f0affa0d114c7fb3aef", "url": "https://github.com/grpc/grpc-java/commit/1fb005e94e66d6aac8fc3f0affa0d114c7fb3aef", "message": "Revert change for catching all exceptions in resolver.start", "committedDate": "2020-09-14T00:42:06Z", "type": "commit"}]}