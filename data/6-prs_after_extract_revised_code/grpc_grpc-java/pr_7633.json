{"pr_number": 7633, "pr_title": "api: Expose ForwardingServerBuilder for XdsServerBuilder", "pr_createdAt": "2020-11-18T00:35:40Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7633", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzMTgzMA==", "url": "https://github.com/grpc/grpc-java/pull/7633#discussion_r525631830", "bodyText": "s/all its builder method/all its builder methods/", "author": "sanjaypujare", "createdAt": "2020-11-18T01:17:46Z", "path": "xds/src/main/java/io/grpc/xds/ForwardingServerBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import com.google.common.base.MoreObjects;\n+import io.grpc.BinaryLog;\n+import io.grpc.BindableService;\n+import io.grpc.CompressorRegistry;\n+import io.grpc.DecompressorRegistry;\n+import io.grpc.HandlerRegistry;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.ServerStreamTracer;\n+import io.grpc.ServerTransportFilter;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A {@link ServerBuilder} that delegates all its builder method to another builder by default.", "originalCommit": "442f0c9f85bc91b5749759598c54e0bc63fb3be3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ee1b17b15742c5821ae40e48673b6f572b2a651", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/ForwardingServerBuilder.java b/xds/src/main/java/io/grpc/xds/ForwardingServerBuilder.java\ndeleted file mode 100644\nindex a1d8cbafb..000000000\n--- a/xds/src/main/java/io/grpc/xds/ForwardingServerBuilder.java\n+++ /dev/null\n\n@@ -1,177 +0,0 @@\n-/*\n- * Copyright 2020 The gRPC Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.grpc.xds;\n-\n-import com.google.common.base.MoreObjects;\n-import io.grpc.BinaryLog;\n-import io.grpc.BindableService;\n-import io.grpc.CompressorRegistry;\n-import io.grpc.DecompressorRegistry;\n-import io.grpc.HandlerRegistry;\n-import io.grpc.Server;\n-import io.grpc.ServerBuilder;\n-import io.grpc.ServerInterceptor;\n-import io.grpc.ServerServiceDefinition;\n-import io.grpc.ServerStreamTracer;\n-import io.grpc.ServerTransportFilter;\n-import java.io.File;\n-import java.io.InputStream;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.TimeUnit;\n-import javax.annotation.Nullable;\n-\n-/**\n- * A {@link ServerBuilder} that delegates all its builder method to another builder by default.\n- *\n- * @param <T> The type of the subclass extending this abstract class.\n- */\n-abstract class ForwardingServerBuilder<T extends ServerBuilder<T>> extends ServerBuilder<T> {\n-\n-  /** The default constructor. */\n-  protected ForwardingServerBuilder() {}\n-\n-  /**\n-   * This method serves to force sub classes to \"hide\" this static factory.\n-   */\n-  public static ServerBuilder<?> forPort(int port) {\n-    throw new UnsupportedOperationException(\"Subclass failed to hide static factory\");\n-  }\n-\n-  /**\n-   * Returns the delegated {@code ServerBuilder}.\n-   */\n-  protected abstract ServerBuilder<?> delegate();\n-\n-  @Override\n-  public T directExecutor() {\n-    delegate().directExecutor();\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T executor(@Nullable Executor executor) {\n-    delegate().executor(executor);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T addService(ServerServiceDefinition service) {\n-    delegate().addService(service);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T addService(BindableService bindableService) {\n-    delegate().addService(bindableService);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T intercept(ServerInterceptor interceptor) {\n-    delegate().intercept(interceptor);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T addTransportFilter(ServerTransportFilter filter) {\n-    delegate().addTransportFilter(filter);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T addStreamTracerFactory(ServerStreamTracer.Factory factory) {\n-    delegate().addStreamTracerFactory(factory);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T fallbackHandlerRegistry(@Nullable HandlerRegistry fallbackRegistry) {\n-    delegate().fallbackHandlerRegistry(fallbackRegistry);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T useTransportSecurity(File certChain, File privateKey) {\n-    delegate().useTransportSecurity(certChain, privateKey);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T useTransportSecurity(InputStream certChain, InputStream privateKey) {\n-    delegate().useTransportSecurity(certChain, privateKey);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T decompressorRegistry(@Nullable DecompressorRegistry registry) {\n-    delegate().decompressorRegistry(registry);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T compressorRegistry(@Nullable CompressorRegistry registry) {\n-    delegate().compressorRegistry(registry);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T handshakeTimeout(long timeout, TimeUnit unit) {\n-    delegate().handshakeTimeout(timeout, unit);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T maxInboundMessageSize(int bytes) {\n-    delegate().maxInboundMessageSize(bytes);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T maxInboundMetadataSize(int bytes) {\n-    delegate().maxInboundMetadataSize(bytes);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T setBinaryLog(BinaryLog binaryLog) {\n-    delegate().setBinaryLog(binaryLog);\n-    return thisT();\n-  }\n-\n-  /**\n-   * Returns the {@link Server} built by the delegate by default. Overriding method can return\n-   * different value.\n-   */\n-  @Override\n-  public Server build() {\n-    return delegate().build();\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return MoreObjects.toStringHelper(this).add(\"delegate\", delegate()).toString();\n-  }\n-\n-  /**\n-   * Returns the correctly typed version of the builder.\n-   */\n-  protected final T thisT() {\n-    @SuppressWarnings(\"unchecked\")\n-    T thisT = (T) this;\n-    return thisT;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzODgzMQ==", "url": "https://github.com/grpc/grpc-java/pull/7633#discussion_r525638831", "bodyText": "The XdsServerBuilder subclass will only define this as VisibleForTesting to be used by test code. Actual user code is supposed to call forPort(int,ServerCredentials) . However the subclass cannot reduce the visibility from public to package-private. Not that we can do anything in this PR about it...", "author": "sanjaypujare", "createdAt": "2020-11-18T01:39:16Z", "path": "xds/src/main/java/io/grpc/xds/ForwardingServerBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import com.google.common.base.MoreObjects;\n+import io.grpc.BinaryLog;\n+import io.grpc.BindableService;\n+import io.grpc.CompressorRegistry;\n+import io.grpc.DecompressorRegistry;\n+import io.grpc.HandlerRegistry;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.ServerStreamTracer;\n+import io.grpc.ServerTransportFilter;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A {@link ServerBuilder} that delegates all its builder method to another builder by default.\n+ *\n+ * @param <T> The type of the subclass extending this abstract class.\n+ */\n+abstract class ForwardingServerBuilder<T extends ServerBuilder<T>> extends ServerBuilder<T> {\n+\n+  /** The default constructor. */\n+  protected ForwardingServerBuilder() {}\n+\n+  /**\n+   * This method serves to force sub classes to \"hide\" this static factory.\n+   */\n+  public static ServerBuilder<?> forPort(int port) {", "originalCommit": "442f0c9f85bc91b5749759598c54e0bc63fb3be3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ee1b17b15742c5821ae40e48673b6f572b2a651", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/ForwardingServerBuilder.java b/xds/src/main/java/io/grpc/xds/ForwardingServerBuilder.java\ndeleted file mode 100644\nindex a1d8cbafb..000000000\n--- a/xds/src/main/java/io/grpc/xds/ForwardingServerBuilder.java\n+++ /dev/null\n\n@@ -1,177 +0,0 @@\n-/*\n- * Copyright 2020 The gRPC Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.grpc.xds;\n-\n-import com.google.common.base.MoreObjects;\n-import io.grpc.BinaryLog;\n-import io.grpc.BindableService;\n-import io.grpc.CompressorRegistry;\n-import io.grpc.DecompressorRegistry;\n-import io.grpc.HandlerRegistry;\n-import io.grpc.Server;\n-import io.grpc.ServerBuilder;\n-import io.grpc.ServerInterceptor;\n-import io.grpc.ServerServiceDefinition;\n-import io.grpc.ServerStreamTracer;\n-import io.grpc.ServerTransportFilter;\n-import java.io.File;\n-import java.io.InputStream;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.TimeUnit;\n-import javax.annotation.Nullable;\n-\n-/**\n- * A {@link ServerBuilder} that delegates all its builder method to another builder by default.\n- *\n- * @param <T> The type of the subclass extending this abstract class.\n- */\n-abstract class ForwardingServerBuilder<T extends ServerBuilder<T>> extends ServerBuilder<T> {\n-\n-  /** The default constructor. */\n-  protected ForwardingServerBuilder() {}\n-\n-  /**\n-   * This method serves to force sub classes to \"hide\" this static factory.\n-   */\n-  public static ServerBuilder<?> forPort(int port) {\n-    throw new UnsupportedOperationException(\"Subclass failed to hide static factory\");\n-  }\n-\n-  /**\n-   * Returns the delegated {@code ServerBuilder}.\n-   */\n-  protected abstract ServerBuilder<?> delegate();\n-\n-  @Override\n-  public T directExecutor() {\n-    delegate().directExecutor();\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T executor(@Nullable Executor executor) {\n-    delegate().executor(executor);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T addService(ServerServiceDefinition service) {\n-    delegate().addService(service);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T addService(BindableService bindableService) {\n-    delegate().addService(bindableService);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T intercept(ServerInterceptor interceptor) {\n-    delegate().intercept(interceptor);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T addTransportFilter(ServerTransportFilter filter) {\n-    delegate().addTransportFilter(filter);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T addStreamTracerFactory(ServerStreamTracer.Factory factory) {\n-    delegate().addStreamTracerFactory(factory);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T fallbackHandlerRegistry(@Nullable HandlerRegistry fallbackRegistry) {\n-    delegate().fallbackHandlerRegistry(fallbackRegistry);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T useTransportSecurity(File certChain, File privateKey) {\n-    delegate().useTransportSecurity(certChain, privateKey);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T useTransportSecurity(InputStream certChain, InputStream privateKey) {\n-    delegate().useTransportSecurity(certChain, privateKey);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T decompressorRegistry(@Nullable DecompressorRegistry registry) {\n-    delegate().decompressorRegistry(registry);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T compressorRegistry(@Nullable CompressorRegistry registry) {\n-    delegate().compressorRegistry(registry);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T handshakeTimeout(long timeout, TimeUnit unit) {\n-    delegate().handshakeTimeout(timeout, unit);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T maxInboundMessageSize(int bytes) {\n-    delegate().maxInboundMessageSize(bytes);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T maxInboundMetadataSize(int bytes) {\n-    delegate().maxInboundMetadataSize(bytes);\n-    return thisT();\n-  }\n-\n-  @Override\n-  public T setBinaryLog(BinaryLog binaryLog) {\n-    delegate().setBinaryLog(binaryLog);\n-    return thisT();\n-  }\n-\n-  /**\n-   * Returns the {@link Server} built by the delegate by default. Overriding method can return\n-   * different value.\n-   */\n-  @Override\n-  public Server build() {\n-    return delegate().build();\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return MoreObjects.toStringHelper(this).add(\"delegate\", delegate()).toString();\n-  }\n-\n-  /**\n-   * Returns the correctly typed version of the builder.\n-   */\n-  protected final T thisT() {\n-    @SuppressWarnings(\"unchecked\")\n-    T thisT = (T) this;\n-    return thisT;\n-  }\n-}\n"}}, {"oid": "3ee1b17b15742c5821ae40e48673b6f572b2a651", "url": "https://github.com/grpc/grpc-java/commit/3ee1b17b15742c5821ae40e48673b6f572b2a651", "message": "api: Expose ForwardingServerBuilder for XdsServerBuilder\n\nThis reduces ABI issues caused by returning the more precise\nXdsServerBuilder in the API. See\nhttps://github.com/grpc/grpc-java/issues/7552.", "committedDate": "2020-11-18T18:43:01Z", "type": "commit"}, {"oid": "3ee1b17b15742c5821ae40e48673b6f572b2a651", "url": "https://github.com/grpc/grpc-java/commit/3ee1b17b15742c5821ae40e48673b6f572b2a651", "message": "api: Expose ForwardingServerBuilder for XdsServerBuilder\n\nThis reduces ABI issues caused by returning the more precise\nXdsServerBuilder in the API. See\nhttps://github.com/grpc/grpc-java/issues/7552.", "committedDate": "2020-11-18T18:43:01Z", "type": "forcePushed"}]}