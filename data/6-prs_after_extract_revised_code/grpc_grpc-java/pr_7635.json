{"pr_number": 7635, "pr_title": "Added documentation for onClose hanging problem", "pr_createdAt": "2020-11-18T01:51:03Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7635", "timeline": [{"oid": "3cefb0f206fc51b77b0c50e8cb9d3ea4d8bdef33", "url": "https://github.com/grpc/grpc-java/commit/3cefb0f206fc51b77b0c50e8cb9d3ea4d8bdef33", "message": "Added documentation for onClose hanging problem", "committedDate": "2020-11-18T01:21:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NjUxMA==", "url": "https://github.com/grpc/grpc-java/pull/7635#discussion_r526366510", "bodyText": "I think this needs to be in ForwardingClientCall or friend. This is not part of ClientCall itself.", "author": "ejona86", "createdAt": "2020-11-18T19:35:03Z", "path": "api/src/main/java/io/grpc/ClientCall.java", "diffHunk": "@@ -141,6 +141,11 @@ public void onMessage(T message) {}\n      * An additional block of trailer metadata may be received at the end of the call from the\n      * server. An empty {@link Metadata} object is passed if no trailers are received.\n      *\n+     * <p>If uncaught exception is thrown in `onClose`, gRPC will fail to notify the application", "originalCommit": "3cefb0f206fc51b77b0c50e8cb9d3ea4d8bdef33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQzMTk5NA==", "url": "https://github.com/grpc/grpc-java/pull/7635#discussion_r526431994", "bodyText": "Sorry, I just realized this is duplicated work as #6107. It seems that merge request is block  for a long time, is there any plan to move forward with this? Do you want me to take #6107 over?", "author": "wanyingd1996", "createdAt": "2020-11-18T21:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NjUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQzNjYwNg==", "url": "https://github.com/grpc/grpc-java/pull/7635#discussion_r526436606", "bodyText": "Ah, yes, that is similar. @dapengzhang0, what do you think?", "author": "ejona86", "createdAt": "2020-11-18T21:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NjUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1ODIzMA==", "url": "https://github.com/grpc/grpc-java/pull/7635#discussion_r526458230", "bodyText": "I don't mind if @wanyingd1996 takes  #6107 over. Actually I forgot about that PR.", "author": "dapengzhang0", "createdAt": "2020-11-18T22:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NjUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwOTA1OA==", "url": "https://github.com/grpc/grpc-java/pull/7635#discussion_r526509058", "bodyText": "I think the text I suggested in dapengzhang0's PR is still appropriate. When talking just about interceptors (as was the case with language like \"gRPC will fail to notify the application\"), then this isn't the correct spot for it.", "author": "ejona86", "createdAt": "2020-11-19T00:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NjUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4196aabc3dafb3b3b2965a7ef1b7b792d7fb2bb8", "chunk": "diff --git a/api/src/main/java/io/grpc/ClientCall.java b/api/src/main/java/io/grpc/ClientCall.java\nindex e3ebab831..162a24728 100644\n--- a/api/src/main/java/io/grpc/ClientCall.java\n+++ b/api/src/main/java/io/grpc/ClientCall.java\n\n@@ -141,10 +141,9 @@ public abstract class ClientCall<ReqT, RespT> {\n      * An additional block of trailer metadata may be received at the end of the call from the\n      * server. An empty {@link Metadata} object is passed if no trailers are received.\n      *\n-     * <p>If uncaught exception is thrown in `onClose`, gRPC will fail to notify the application\n-     * that RPC is closed. This will cause hanging problem on the client side, and the problem is\n-     * unresolvable due to the nature of gRPC. Do not call any method that could potentially throw\n-     * in `onClose`.\n+     * <p>This method should not throw. If this method throws, there is no way to be notified of the \n+     * exception. Implementations should therefore be careful of exceptions which can accidentally leak \n+     * resources.\n      *\n      * @param status the result of the remote call.\n      * @param trailers metadata provided at call completion.\n"}}, {"oid": "4196aabc3dafb3b3b2965a7ef1b7b792d7fb2bb8", "url": "https://github.com/grpc/grpc-java/commit/4196aabc3dafb3b3b2965a7ef1b7b792d7fb2bb8", "message": "Update documentation for ClientCall.Listener", "committedDate": "2020-11-19T01:06:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4NzE4Mg==", "url": "https://github.com/grpc/grpc-java/pull/7635#discussion_r527087182", "bodyText": "The CI is failing because both of these lines exceed 100 columns. Please rewrap these lines.", "author": "ejona86", "createdAt": "2020-11-19T17:57:11Z", "path": "api/src/main/java/io/grpc/ClientCall.java", "diffHunk": "@@ -141,6 +141,10 @@ public void onMessage(T message) {}\n      * An additional block of trailer metadata may be received at the end of the call from the\n      * server. An empty {@link Metadata} object is passed if no trailers are received.\n      *\n+     * <p>This method should not throw. If this method throws, there is no way to be notified of the ", "originalCommit": "4196aabc3dafb3b3b2965a7ef1b7b792d7fb2bb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85c5693d34f43c9e46c4b0bb6195228b317d8050", "chunk": "diff --git a/api/src/main/java/io/grpc/ClientCall.java b/api/src/main/java/io/grpc/ClientCall.java\nindex 162a24728..b572f1ee5 100644\n--- a/api/src/main/java/io/grpc/ClientCall.java\n+++ b/api/src/main/java/io/grpc/ClientCall.java\n\n@@ -141,9 +141,9 @@ public abstract class ClientCall<ReqT, RespT> {\n      * An additional block of trailer metadata may be received at the end of the call from the\n      * server. An empty {@link Metadata} object is passed if no trailers are received.\n      *\n-     * <p>This method should not throw. If this method throws, there is no way to be notified of the \n-     * exception. Implementations should therefore be careful of exceptions which can accidentally leak \n-     * resources.\n+     * <p>This method should not throw. If this method throws, there is no way to be notified of the\n+     * exception. Implementations should therefore be careful of exceptions which can accidentally \n+     * leak resources.\n      *\n      * @param status the result of the remote call.\n      * @param trailers metadata provided at call completion.\n"}}, {"oid": "85c5693d34f43c9e46c4b0bb6195228b317d8050", "url": "https://github.com/grpc/grpc-java/commit/85c5693d34f43c9e46c4b0bb6195228b317d8050", "message": "fixed lines exceed 100 columns", "committedDate": "2020-11-19T18:22:24Z", "type": "commit"}]}