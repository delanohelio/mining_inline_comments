{"pr_number": 7686, "pr_title": "alts: Limit number of concurrent handshakes to 32", "pr_createdAt": "2020-12-02T01:32:29Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7686", "timeline": [{"oid": "c5ef27bc58aacc6d3dbebd709bac89f48794126b", "url": "https://github.com/grpc/grpc-java/commit/c5ef27bc58aacc6d3dbebd709bac89f48794126b", "message": "alts: Limit number of concurrent handshakes to 32", "committedDate": "2020-12-02T01:30:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NDM1MA==", "url": "https://github.com/grpc/grpc-java/pull/7686#discussion_r534344350", "bodyText": "Just curious, why we want to flush here?", "author": "jiangtaoli2016", "createdAt": "2020-12-02T17:20:50Z", "path": "alts/src/main/java/io/grpc/alts/internal/TsiHandshakeHandler.java", "diffHunk": "@@ -137,13 +146,37 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t\n   }\n \n   @Override\n-  public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+  public void userEventTriggered(final ChannelHandlerContext ctx, Object evt) throws Exception {\n     if (evt instanceof ProtocolNegotiationEvent) {\n       checkState(pne == null, \"negotiation already started\");\n       pne = (ProtocolNegotiationEvent) evt;\n       InternalProtocolNegotiators.negotiationLogger(ctx)\n           .log(ChannelLogLevel.INFO, \"TsiHandshake started\");\n-      sendHandshake(ctx);\n+      ChannelFuture acquire = semaphore.acquire(ctx);\n+      if (acquire.isSuccess()) {\n+        semaphoreAcquired = true;\n+        sendHandshake(ctx);\n+      } else {\n+        acquire.addListener(new ChannelFutureListener() {\n+          @Override public void operationComplete(ChannelFuture future) {\n+            if (!future.isSuccess()) {\n+              ctx.fireExceptionCaught(future.cause());\n+              return;\n+            }\n+            if (ctx.isRemoved()) {\n+              semaphore.release();\n+              return;\n+            }\n+            semaphoreAcquired = true;\n+            try {\n+              sendHandshake(ctx);\n+            } catch (Exception ex) {\n+              ctx.fireExceptionCaught(ex);\n+            }\n+            ctx.flush();", "originalCommit": "c5ef27bc58aacc6d3dbebd709bac89f48794126b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NzMwOQ==", "url": "https://github.com/grpc/grpc-java/pull/7686#discussion_r534347309", "bodyText": "Without the flush no data would be sent. Probably ever. Normally the flush is handled at a higher level: RPC senders will do the flush themselves, and we do a flush after each batch of reads (in case the reads triggered writes). Since the event triggering this code is not on the normal read and write paths, there wouldn't be a flush naturally occurring.", "author": "ejona86", "createdAt": "2020-12-02T17:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NDM1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ1NjE0MQ==", "url": "https://github.com/grpc/grpc-java/pull/7686#discussion_r535456141", "bodyText": "Drive by comment: I'd suggest removing the \"b/****\" in the comment. :)", "author": "matthewstevenson88", "createdAt": "2020-12-03T17:56:35Z", "path": "alts/src/main/java/io/grpc/alts/internal/TsiHandshakeHandler.java", "diffHunk": "@@ -78,12 +82,17 @@ public abstract SecurityDetails validatePeerObject(Object peerObject)\n   }\n \n   private static final int HANDSHAKE_FRAME_SIZE = 1024;\n+  // Avoid performing too many handshakes in parallel, as it may cause queuing in the handshake\n+  // server and cause unbounded blocking on the event loop (b/168808426). This is a workaround until", "originalCommit": "c5ef27bc58aacc6d3dbebd709bac89f48794126b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MTQ3Nw==", "url": "https://github.com/grpc/grpc-java/pull/7686#discussion_r535471477", "bodyText": "Bug numbers and CL numbers are considered safe in OSS. We don't tend to use them because they aren't helpful to other readers, though. Since this is temporary until async TSI in Q1ish and the bug details are quite involved, it seemed fair.", "author": "ejona86", "createdAt": "2020-12-03T18:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ1NjE0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3ODY0MQ==", "url": "https://github.com/grpc/grpc-java/pull/7686#discussion_r535478641", "bodyText": "Question, which of the following can be assumed if tsiHandshakeHandler.userEventTriggered() is called multiple times?\n\nThe argument ChannelHandlerContext ctx can be different instances.\nThe argument evt of ProtocolNegotiationEvent type can be different instances for a fixed ctx argument.", "author": "dapengzhang0", "createdAt": "2020-12-03T18:26:14Z", "path": "alts/src/main/java/io/grpc/alts/internal/TsiHandshakeHandler.java", "diffHunk": "@@ -137,13 +146,37 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t\n   }\n \n   @Override\n-  public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+  public void userEventTriggered(final ChannelHandlerContext ctx, Object evt) throws Exception {", "originalCommit": "c5ef27bc58aacc6d3dbebd709bac89f48794126b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5MzgyMA==", "url": "https://github.com/grpc/grpc-java/pull/7686#discussion_r535493820", "bodyText": "The ctx argument should be the same every time. If not, it is generally a bug, since this is not a @ChannelHandler.Sharable handler.\nThere should only ever be one ProtocolNegotiationEvent for this handler instance, which provides this negotiator the results of the previous negotiator. If it happens more than once, then it would be a bug elsewhere.", "author": "ejona86", "createdAt": "2020-12-03T18:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3ODY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzNTQ1NA==", "url": "https://github.com/grpc/grpc-java/pull/7686#discussion_r535535454", "bodyText": "Yeah, that was my understanding.", "author": "dapengzhang0", "createdAt": "2020-12-03T19:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3ODY0MQ=="}], "type": "inlineReview", "revised_code": null}]}