{"pr_number": 7696, "pr_title": "xds: support getting logical DNS and aggregate cluster configurations from CDS responses", "pr_createdAt": "2020-12-05T02:49:26Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7696", "timeline": [{"oid": "137fe65c9439a3589527c2e3e1b56cbdda443feb", "url": "https://github.com/grpc/grpc-java/commit/137fe65c9439a3589527c2e3e1b56cbdda443feb", "message": "Refactor CdsUpdate definition to support logical DNS and aggregate clusters.", "committedDate": "2020-12-05T02:30:26Z", "type": "commit"}, {"oid": "2bb72bb17cefbfda4cb20ed7e7d6f63f190fc199", "url": "https://github.com/grpc/grpc-java/commit/2bb72bb17cefbfda4cb20ed7e7d6f63f190fc199", "message": "Support parsing CDS responses with logical DNS and aggregate cluster tyes.", "committedDate": "2020-12-05T02:32:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MzE1Ng==", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r537363156", "bodyText": "TODO in a separate PR: I may want to clean up other resource update data structures as well, they are too verbose to use.", "author": "voidzcy", "createdAt": "2020-12-07T09:42:32Z", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -193,93 +193,19 @@ public boolean equals(Object o) {\n   }\n \n   static final class CdsUpdate implements ResourceUpdate {", "originalCommit": "31810dbf542306d1b0e73fe37234653eadb179b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "af9acaab18a2638b8dad55253298c82aa550cdfc", "url": "https://github.com/grpc/grpc-java/commit/af9acaab18a2638b8dad55253298c82aa550cdfc", "message": "Fix CDS LB policy to use the new CDS update data structure.", "committedDate": "2020-12-07T20:51:57Z", "type": "commit"}, {"oid": "af9acaab18a2638b8dad55253298c82aa550cdfc", "url": "https://github.com/grpc/grpc-java/commit/af9acaab18a2638b8dad55253298c82aa550cdfc", "message": "Fix CDS LB policy to use the new CDS update data structure.", "committedDate": "2020-12-07T20:51:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjkzMw==", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r537826933", "bodyText": "Name too verbose, causing line-to-long issue.", "author": "voidzcy", "createdAt": "2020-12-07T20:56:53Z", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -193,36 +194,37 @@ private CdsLbState() {\n     }\n \n     @Override\n-    public void onChanged(final CdsUpdate newUpdate) {", "originalCommit": "af9acaab18a2638b8dad55253298c82aa550cdfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\nindex 815c0b0d9..21d95097a 100644\n--- a/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\n\n@@ -221,13 +152,11 @@ final class CdsLoadBalancer extends LoadBalancer {\n                   /* edsServiceName = */ clusterConfig.edsServiceName,\n                   /* lrsServerName = */ clusterConfig.lrsServerName,\n                   /* maxConcurrentRequests = */ clusterConfig.maxConcurrentRequests,\n+                  /* tlsContext = */ clusterConfig.upstreamTlsContext,\n                   new PolicySelection(localityPickingPolicyProvider, null /* by EDS policy */),\n                   new PolicySelection(endpointPickingPolicyProvider, null));\n-          if (isXdsSecurityEnabled()) {\n-            updateSslContextProviderSupplier(clusterConfig.upstreamTlsContext);\n-          }\n           if (edsBalancer == null) {\n-            edsBalancer = lbRegistry.getProvider(EDS_POLICY_NAME).newLoadBalancer(lbHelper);\n+            edsBalancer = lbRegistry.getProvider(EDS_POLICY_NAME).newLoadBalancer(helper);\n           }\n           edsBalancer.handleResolvedAddresses(\n               resolvedAddresses.toBuilder().setLoadBalancingPolicyConfig(edsConfig).build());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNzQzMA==", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r537827430", "bodyText": "Log too verbose.", "author": "voidzcy", "createdAt": "2020-12-07T20:57:39Z", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -193,36 +194,37 @@ private CdsLbState() {\n     }\n \n     @Override\n-    public void onChanged(final CdsUpdate newUpdate) {\n+    public void onChanged(final CdsUpdate update) {\n       syncContext.execute(new Runnable() {\n         @Override\n         public void run() {\n           if (shutdown) {\n             return;\n           }\n-          if (logger.isLoggable(XdsLogLevel.INFO)) {\n-            logger.log(XdsLogLevel.INFO, \"Received cluster update from xDS client {0}: \"", "originalCommit": "af9acaab18a2638b8dad55253298c82aa550cdfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\nindex 815c0b0d9..21d95097a 100644\n--- a/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\n\n@@ -221,13 +152,11 @@ final class CdsLoadBalancer extends LoadBalancer {\n                   /* edsServiceName = */ clusterConfig.edsServiceName,\n                   /* lrsServerName = */ clusterConfig.lrsServerName,\n                   /* maxConcurrentRequests = */ clusterConfig.maxConcurrentRequests,\n+                  /* tlsContext = */ clusterConfig.upstreamTlsContext,\n                   new PolicySelection(localityPickingPolicyProvider, null /* by EDS policy */),\n                   new PolicySelection(endpointPickingPolicyProvider, null));\n-          if (isXdsSecurityEnabled()) {\n-            updateSslContextProviderSupplier(clusterConfig.upstreamTlsContext);\n-          }\n           if (edsBalancer == null) {\n-            edsBalancer = lbRegistry.getProvider(EDS_POLICY_NAME).newLoadBalancer(lbHelper);\n+            edsBalancer = lbRegistry.getProvider(EDS_POLICY_NAME).newLoadBalancer(helper);\n           }\n           edsBalancer.handleResolvedAddresses(\n               resolvedAddresses.toBuilder().setLoadBalancingPolicyConfig(edsConfig).build());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODE2MQ==", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r537828161", "bodyText": "This check is useless, \"round_robin\" is hard coded for CdsUpdate.", "author": "voidzcy", "createdAt": "2020-12-07T20:58:56Z", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -193,36 +194,37 @@ private CdsLbState() {\n     }\n \n     @Override\n-    public void onChanged(final CdsUpdate newUpdate) {\n+    public void onChanged(final CdsUpdate update) {\n       syncContext.execute(new Runnable() {\n         @Override\n         public void run() {\n           if (shutdown) {\n             return;\n           }\n-          if (logger.isLoggable(XdsLogLevel.INFO)) {\n-            logger.log(XdsLogLevel.INFO, \"Received cluster update from xDS client {0}: \"\n-                    + \"cluster_name={1}, eds_service_name={2}, lb_policy={3}, report_load={4}\",\n-                xdsClient, newUpdate.getClusterName(), newUpdate.getEdsServiceName(),\n-                newUpdate.getLbPolicy(), newUpdate.getLrsServerName() != null);\n+          // TODO(chengyuanzhang): implementations for logical DNS and aggregate clusters.\n+          if (update.clusterType != ClusterType.EDS) {\n+            logger.log(XdsLogLevel.WARNING, \"Unsupported cluster type: {0}\", update.clusterType);\n+            return;\n           }\n-          // FIXME(chengyuanzhang): handle error correctly to avoid being unnecessarily fragile.\n-          checkArgument(newUpdate.getLbPolicy().equals(\"round_robin\"),", "originalCommit": "af9acaab18a2638b8dad55253298c82aa550cdfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\nindex 815c0b0d9..21d95097a 100644\n--- a/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java\n\n@@ -221,13 +152,11 @@ final class CdsLoadBalancer extends LoadBalancer {\n                   /* edsServiceName = */ clusterConfig.edsServiceName,\n                   /* lrsServerName = */ clusterConfig.lrsServerName,\n                   /* maxConcurrentRequests = */ clusterConfig.maxConcurrentRequests,\n+                  /* tlsContext = */ clusterConfig.upstreamTlsContext,\n                   new PolicySelection(localityPickingPolicyProvider, null /* by EDS policy */),\n                   new PolicySelection(endpointPickingPolicyProvider, null));\n-          if (isXdsSecurityEnabled()) {\n-            updateSslContextProviderSupplier(clusterConfig.upstreamTlsContext);\n-          }\n           if (edsBalancer == null) {\n-            edsBalancer = lbRegistry.getProvider(EDS_POLICY_NAME).newLoadBalancer(lbHelper);\n+            edsBalancer = lbRegistry.getProvider(EDS_POLICY_NAME).newLoadBalancer(helper);\n           }\n           edsBalancer.handleResolvedAddresses(\n               resolvedAddresses.toBuilder().setLoadBalancingPolicyConfig(edsConfig).build());\n"}}, {"oid": "14b34b78301e91ac308eb11facfcb280a490a812", "url": "https://github.com/grpc/grpc-java/commit/14b34b78301e91ac308eb11facfcb280a490a812", "message": "Do not print UpstreamTlsContext.", "committedDate": "2020-12-12T00:32:57Z", "type": "commit"}, {"oid": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6", "url": "https://github.com/grpc/grpc-java/commit/b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6", "message": "Merge branch 'master' of github.com:grpc/grpc-java into impl/cds_update_with_cluster_type", "committedDate": "2020-12-15T09:32:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwNzI2Mw==", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r549807263", "bodyText": ".cluster. or .clusters.?", "author": "dapengzhang0", "createdAt": "2020-12-29T18:37:01Z", "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "diffHunk": "@@ -70,6 +74,8 @@\n   // Longest time to wait, since the subscription to some resource, for concluding its absence.\n   @VisibleForTesting\n   static final int INITIAL_RESOURCE_FETCH_TIMEOUT_SEC = 15;\n+  @VisibleForTesting\n+  static final String AGGREGATE_CLUSTER_TYPE_NAME = \"envoy.cluster.aggregate\";", "originalCommit": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MDc4Mw==", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r549840783", "bodyText": "Oops, that's an amazing catch. Thanks \ud83d\ude04", "author": "voidzcy", "createdAt": "2020-12-29T20:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwNzI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3889e089874e39349e8ae3a7f5b77e7c2c64d709", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/ClientXdsClient.java b/xds/src/main/java/io/grpc/xds/ClientXdsClient.java\nindex 6425276ed..691bf8d64 100644\n--- a/xds/src/main/java/io/grpc/xds/ClientXdsClient.java\n+++ b/xds/src/main/java/io/grpc/xds/ClientXdsClient.java\n\n@@ -75,7 +76,7 @@ final class ClientXdsClient extends AbstractXdsClient {\n   @VisibleForTesting\n   static final int INITIAL_RESOURCE_FETCH_TIMEOUT_SEC = 15;\n   @VisibleForTesting\n-  static final String AGGREGATE_CLUSTER_TYPE_NAME = \"envoy.cluster.aggregate\";\n+  static final String AGGREGATE_CLUSTER_TYPE_NAME = \"envoy.clusters.aggregate\";\n   private static final String TYPE_URL_HTTP_CONNECTION_MANAGER_V2 =\n       \"type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2\"\n           + \".HttpConnectionManager\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwOTM5OA==", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r549809398", "bodyText": "Why not check if(update==null) {return;} here?", "author": "dapengzhang0", "createdAt": "2020-12-29T18:44:43Z", "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "diffHunk": "@@ -280,88 +290,42 @@ protected void handleCdsResponse(String versionInfo, List<Any> resources, String\n     }\n     getLogger().log(XdsLogLevel.INFO, \"Received CDS response for resources: {0}\", clusterNames);\n \n-    String errorMessage = null;\n-    // Cluster information update for requested clusters received in this CDS response.\n     Map<String, CdsUpdate> cdsUpdates = new HashMap<>();\n-    // CDS responses represents the state of the world, EDS services not referenced by\n-    // Clusters are those no longer exist.\n-    Set<String> edsServices = new HashSet<>();\n+    // CDS responses represents the state of the world, EDS resources not referenced in CDS\n+    // resources should be deleted.\n+    Set<String> edsResources = new HashSet<>();  // retained EDS resources\n     for (Cluster cluster : clusters) {\n       String clusterName = cluster.getName();\n-      // Skip information for clusters not requested.\n       // Management server is required to always send newly requested resources, even if they\n       // may have been sent previously (proactively). Thus, client does not need to cache\n       // unrequested resources.\n       if (!cdsResourceSubscribers.containsKey(clusterName)) {\n         continue;\n       }\n-      CdsUpdate.Builder updateBuilder = CdsUpdate.newBuilder();\n-      updateBuilder.setClusterName(clusterName);\n-      // The type field must be set to EDS.\n-      if (!cluster.getType().equals(DiscoveryType.EDS)) {\n-        errorMessage = \"Cluster \" + clusterName + \" : only EDS discovery type is supported \"\n-            + \"in gRPC.\";\n-        break;\n-      }\n-      // In the eds_cluster_config field, the eds_config field must be set to indicate to\n-      // use EDS (must be set to use ADS).\n-      EdsClusterConfig edsClusterConfig = cluster.getEdsClusterConfig();\n-      if (!edsClusterConfig.getEdsConfig().hasAds()) {\n-        errorMessage = \"Cluster \" + clusterName + \" : field eds_cluster_config must be set to \"\n-            + \"indicate to use EDS over ADS.\";\n-        break;\n-      }\n-      // If the service_name field is set, that value will be used for the EDS request.\n-      if (!edsClusterConfig.getServiceName().isEmpty()) {\n-        updateBuilder.setEdsServiceName(edsClusterConfig.getServiceName());\n-        edsServices.add(edsClusterConfig.getServiceName());\n-      } else {\n-        edsServices.add(clusterName);\n-      }\n       // The lb_policy field must be set to ROUND_ROBIN.\n       if (!cluster.getLbPolicy().equals(LbPolicy.ROUND_ROBIN)) {\n-        errorMessage = \"Cluster \" + clusterName + \" : only round robin load balancing policy is \"\n-            + \"supported in gRPC.\";\n-        break;\n+        nackResponse(ResourceType.CDS, nonce,\n+            \"Cluster \" + clusterName + \": unsupported Lb policy: \" + cluster.getLbPolicy());\n+        return;\n       }\n-      updateBuilder.setLbPolicy(\"round_robin\");\n-      // If the lrs_server field is set, it must have its self field set, in which case the\n-      // client should use LRS for load reporting. Otherwise (the lrs_server field is not set),\n-      // LRS load reporting will be disabled.\n-      if (cluster.hasLrsServer()) {\n-        if (!cluster.getLrsServer().hasSelf()) {\n-          errorMessage = \"Cluster \" + clusterName + \" : only support enabling LRS for the same \"\n-              + \"management server.\";\n+      String lbPolicy = \"round_robin\";\n+      CdsUpdate update = null;\n+      switch (cluster.getClusterDiscoveryTypeCase()) {\n+        case TYPE:\n+          update = parseNonAggregateCluster(cluster, nonce, lbPolicy, edsResources);", "originalCommit": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNzAzMg==", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r549817032", "bodyText": "Oh, it's not big difference call it right after switch. I had misimpression that the check looked a lot after here in the unified diff view.", "author": "dapengzhang0", "createdAt": "2020-12-29T19:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwOTM5OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "95db4ec59e914a3b5bf29f02950979405c0e0504", "url": "https://github.com/grpc/grpc-java/commit/95db4ec59e914a3b5bf29f02950979405c0e0504", "message": "Merge branch 'master' of github.com:grpc/grpc-java into impl/cds_update_with_cluster_type", "committedDate": "2020-12-29T20:41:39Z", "type": "commit"}, {"oid": "3889e089874e39349e8ae3a7f5b77e7c2c64d709", "url": "https://github.com/grpc/grpc-java/commit/3889e089874e39349e8ae3a7f5b77e7c2c64d709", "message": "Fix aggregate cluster type name.", "committedDate": "2020-12-29T20:42:08Z", "type": "commit"}, {"oid": "5bccf637c575407d348861c1f0b9c9060937ac01", "url": "https://github.com/grpc/grpc-java/commit/5bccf637c575407d348861c1f0b9c9060937ac01", "message": "Improve cosmetical naming issue.", "committedDate": "2020-12-30T20:37:57Z", "type": "commit"}]}