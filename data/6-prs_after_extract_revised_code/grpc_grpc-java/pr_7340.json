{"pr_number": 7340, "pr_title": "xds: refactor LoadReportClient for supporting LRS v3", "pr_createdAt": "2020-08-19T19:16:44Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7340", "timeline": [{"oid": "9d6d1d427d4c39d0b0a54dc7c8ccd95ad44be696", "url": "https://github.com/grpc/grpc-java/commit/9d6d1d427d4c39d0b0a54dc7c8ccd95ad44be696", "message": "xds: refactor LoadReportClient for supporting LRS v3", "committedDate": "2020-08-19T19:18:39Z", "type": "commit"}, {"oid": "9d6d1d427d4c39d0b0a54dc7c8ccd95ad44be696", "url": "https://github.com/grpc/grpc-java/commit/9d6d1d427d4c39d0b0a54dc7c8ccd95ad44be696", "message": "xds: refactor LoadReportClient for supporting LRS v3", "committedDate": "2020-08-19T19:18:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTU3OQ==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473279579", "bodyText": "Oops, forgot to change this last time. Thanks.\nnit: It is better to just take in a Stopwatch.", "author": "voidzcy", "createdAt": "2020-08-19T19:49:53Z", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -77,29 +74,27 @@\n   LoadReportClient(\n       String targetName,\n       LoadStatsManager loadStatsManager,\n-      ManagedChannel channel,\n+      XdsChannel xdsChannel,\n       Node node,\n       SynchronizationContext syncContext,\n       ScheduledExecutorService scheduledExecutorService,\n       BackoffPolicy.Provider backoffPolicyProvider,\n       Supplier<Stopwatch> stopwatchSupplier) {\n     this.loadStatsManager = checkNotNull(loadStatsManager, \"loadStatsManager\");\n-    this.channel = checkNotNull(channel, \"channel\");\n+    this.xdsChannel = checkNotNull(xdsChannel, \"xdsChannel\");\n     this.syncContext = checkNotNull(syncContext, \"syncContext\");\n     this.timerService = checkNotNull(scheduledExecutorService, \"timeService\");\n     this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n-    this.stopwatchSupplier = checkNotNull(stopwatchSupplier, \"stopwatchSupplier\");\n+    checkNotNull(stopwatchSupplier, \"stopwatchSupplier\");", "originalCommit": "9d6d1d427d4c39d0b0a54dc7c8ccd95ad44be696", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwMDgzNQ==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473300835", "bodyText": "Why is it better to just take in a Stopwatch?", "author": "dapengzhang0", "createdAt": "2020-08-19T20:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTU3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MjMyNg==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473282326", "bodyText": "Looks this block of code doesn't need to be moved to here.", "author": "voidzcy", "createdAt": "2020-08-19T19:54:58Z", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -163,50 +158,43 @@ public void run() {\n \n   private void startLrsRpc() {\n     checkState(lrsStream == null, \"previous lbStream has not been cleared yet\");\n-    LoadReportingServiceGrpc.LoadReportingServiceStub stub\n-        = LoadReportingServiceGrpc.newStub(channel);\n-    lrsStream = new LrsStream(stub, stopwatchSupplier.get());\n+    // TODO(zdapeng): implement LrsStreamV3 and instantiate lrsStream based on value of\n+    //  xdsChannel.useProtocolV3\n+    lrsStream = new LrsStreamV2();\n     retryStopwatch.reset().start();\n     lrsStream.start();\n   }\n \n-  private class LrsStream implements StreamObserver<LoadStatsResponse> {\n-\n-    final LoadReportingServiceGrpc.LoadReportingServiceStub stub;\n-    StreamObserver<LoadStatsRequest> lrsRequestWriter;\n+  private abstract class LrsStream {\n     boolean initialResponseReceived;\n     boolean closed;\n     long loadReportIntervalNano = -1;\n     boolean reportAllClusters;\n     List<String> clusterNames;  // clusters to report loads for, if not report all.\n     ScheduledHandle loadReportTimer;\n \n-    LrsStream(LoadReportingServiceGrpc.LoadReportingServiceStub stub, Stopwatch stopwatch) {\n-      this.stub = checkNotNull(stub, \"stub\");\n-    }\n+    abstract void start();\n \n-    void start() {\n-      lrsRequestWriter = stub.withWaitForReady().streamLoadStats(this);\n-      LoadStatsRequest initRequest =\n-          LoadStatsRequest.newBuilder()\n-              .setNode(node)\n-              .build();\n-      lrsRequestWriter.onNext(initRequest);\n-      logger.log(XdsLogLevel.DEBUG, \"Initial LRS request sent:\\n{0}\", initRequest);\n-    }\n+    abstract void sendLoadStatsRequest(LoadStatsRequestData request);\n \n-    @Override\n-    public void onNext(final LoadStatsResponse response) {\n+    abstract void sendError(Exception error);\n+\n+    final void onLoadStatsResponse(final LoadStatsResponseData response) {\n       syncContext.execute(new Runnable() {\n         @Override\n         public void run() {\n+          if (!initialResponseReceived) {", "originalCommit": "9d6d1d427d4c39d0b0a54dc7c8ccd95ad44be696", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5NjQ2NA==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473296464", "bodyText": "Moved here to log the actual proto message received, otherwise it will log LoadStatsResponseData.", "author": "dapengzhang0", "createdAt": "2020-08-19T20:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MjMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5ODc5MQ==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473298791", "bodyText": "Wait, wrong way. Here is the LoadStatsResponseData.", "author": "voidzcy", "createdAt": "2020-08-19T20:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MjMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwMzEyMA==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473303120", "bodyText": "Oops, I moved to the wrong place.", "author": "dapengzhang0", "createdAt": "2020-08-19T20:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MjMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNjMwMA==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473306300", "bodyText": "Fixed.", "author": "dapengzhang0", "createdAt": "2020-08-19T20:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MjMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "83e3d1598441b6ae53b1564155ba2734e90224f5", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadReportClient.java b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\nindex d62822cec..3553aba8a 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n\n@@ -183,12 +183,6 @@ final class LoadReportClient {\n       syncContext.execute(new Runnable() {\n         @Override\n         public void run() {\n-          if (!initialResponseReceived) {\n-            logger.log(XdsLogLevel.DEBUG, \"Received LRS initial response:\\n{0}\", response);\n-            initialResponseReceived = true;\n-          } else {\n-            logger.log(XdsLogLevel.DEBUG, \"Received LRS response:\\n{0}\", response);\n-          }\n           handleResponse(response);\n         }\n       });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDEwMQ==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473284101", "bodyText": "You can just have this class implements StreamObserver<io.envoyproxy.envoy.service.load_stats.v2.LoadStatsResponse>", "author": "voidzcy", "createdAt": "2020-08-19T19:58:26Z", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -340,4 +313,106 @@ private void cleanUp() {\n       }\n     }\n   }\n+\n+  private final class LrsStreamV2 extends LrsStream {", "originalCommit": "9d6d1d427d4c39d0b0a54dc7c8ccd95ad44be696", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83e3d1598441b6ae53b1564155ba2734e90224f5", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadReportClient.java b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\nindex d62822cec..3553aba8a 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n\n@@ -325,6 +323,7 @@ final class LoadReportClient {\n             @Override\n             public void onNext(\n                 io.envoyproxy.envoy.service.load_stats.v2.LoadStatsResponse response) {\n+              logger.log(XdsLogLevel.DEBUG, \"Received LRS response:\\n{0}\", response);\n               onLoadStatsResponse(LoadStatsResponseData.fromEnvoyProtoV2(response));\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDgxNg==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473284816", "bodyText": "You can just have this class LrsStreamV2 implement StreamObserver<io.envoyproxy.envoy.service.load_stats.v2.LoadStatsResponse>. (Same thing for XdsClientImpl last time, but I forgot to point it out).", "author": "voidzcy", "createdAt": "2020-08-19T19:59:46Z", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -340,4 +313,106 @@ private void cleanUp() {\n       }\n     }\n   }\n+\n+  private final class LrsStreamV2 extends LrsStream {\n+    StreamObserver<io.envoyproxy.envoy.service.load_stats.v2.LoadStatsRequest> lrsRequestWriterV2;\n+\n+    @Override\n+    void start() {\n+      StreamObserver<io.envoyproxy.envoy.service.load_stats.v2.LoadStatsResponse>", "originalCommit": "9d6d1d427d4c39d0b0a54dc7c8ccd95ad44be696", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5ODAxNg==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473298016", "bodyText": "I created #7341 to do that for XdsClientImpl.", "author": "voidzcy", "createdAt": "2020-08-19T20:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwMDA4Mg==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473300082", "bodyText": "I was following favor composition over inheritance. Even before the refactoring LrsStream is not used as a StreamObserver by the outer class.", "author": "dapengzhang0", "createdAt": "2020-08-19T20:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMDA2Nw==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473310067", "bodyText": "The disadvantages of inheritance usually only come with class extension but not for implementing an interface, as an interface is only a contract. It's pure, it doesn't imply any class states. This implementation is much cleaner without any other consequence, GrpcLbState contains has a similar implementation and it looks great.\nNow that we are doing a refactoring here, it's better to make improvement as we can see as well.", "author": "voidzcy", "createdAt": "2020-08-19T20:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNTM4Nw==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473315387", "bodyText": "It's not necessary to make LrsStream a StreamObserver. The outer class does not use it as StreamObserver. LrsStream is already a large class. It's better to have a StreamObserver object/field that is only responsible to do StreamObserver's job.", "author": "dapengzhang0", "createdAt": "2020-08-19T20:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMyMjEyMg==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473322122", "bodyText": "The outer class does not use it as StreamObserver. LrsStream is already a large class.\n\nThis argument is not solid enough not to do so. My opinion is that, if we could easily make things flat, don't make them nested. Unnecessary nesting is a bad style IMO. Also, you are able to avoid things like LrsStreamV2.this.onError(t). \ud83d\ude04", "author": "voidzcy", "createdAt": "2020-08-19T21:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1NTk1MQ==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473355951", "bodyText": "I don't think making things in different hierarchies flat is always a good style. LsrStream has a stub inside it and it is a StreamObserver in the mean time, the hierarchy is completely twisted. The response observer is a small object used locally in only one place, nesting it (as a local variable at where is it used) is better than flatting it out in a big class.\nLrsStreamV2.this.onError(t) is just because the method name is onError().", "author": "dapengzhang0", "createdAt": "2020-08-19T21:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0MzY4NA==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473443684", "bodyText": "Alright, I am not gonna block you on this. Anyway, my opinion is having LrsStream implement StreamObserver is\n\nsimpler\nyou won't need LrsStreamV2.this.onError(t) but it just be onError(), although you would need to change the method name (btw the name onError() on the abstract class is lazy and bad =p).", "author": "voidzcy", "createdAt": "2020-08-19T23:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "83e3d1598441b6ae53b1564155ba2734e90224f5", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadReportClient.java b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\nindex d62822cec..3553aba8a 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n\n@@ -325,6 +323,7 @@ final class LoadReportClient {\n             @Override\n             public void onNext(\n                 io.envoyproxy.envoy.service.load_stats.v2.LoadStatsResponse response) {\n+              logger.log(XdsLogLevel.DEBUG, \"Received LRS response:\\n{0}\", response);\n               onLoadStatsResponse(LoadStatsResponseData.fromEnvoyProtoV2(response));\n             }\n \n"}}, {"oid": "83e3d1598441b6ae53b1564155ba2734e90224f5", "url": "https://github.com/grpc/grpc-java/commit/83e3d1598441b6ae53b1564155ba2734e90224f5", "message": "fix logging proto", "committedDate": "2020-08-19T20:40:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMDgwOA==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473310808", "bodyText": "Why not put the other one together?", "author": "voidzcy", "createdAt": "2020-08-19T20:50:56Z", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -245,6 +239,10 @@ private void handleResponse(LoadStatsResponseData response) {\n       if (closed) {\n         return;\n       }\n+      if (!initialResponseReceived) {\n+        logger.log(XdsLogLevel.DEBUG, \"Initial LRS response received\");\n+        initialResponseReceived = true;\n+      }", "originalCommit": "83e3d1598441b6ae53b1564155ba2734e90224f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjc2NQ==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473316765", "bodyText": "I don't understand your question. The other one is moved to log the actual proto message.", "author": "dapengzhang0", "createdAt": "2020-08-19T21:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMDgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0MTMyMA==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473441320", "bodyText": "I mean why not just move the whole\nif (!initialResponseReceived) {\n     logger.log(XdsLogLevel.DEBUG, \"Received LRS initial response:\\n{0}\", response);\n     initialResponseReceived = true;\n} else {\n     logger.log(XdsLogLevel.DEBUG, \"Received LRS response:\\n{0}\", response);\n}\n\nto where the proto is received instead of splitting them to two places.", "author": "voidzcy", "createdAt": "2020-08-19T23:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMDgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NTMzOQ==", "url": "https://github.com/grpc/grpc-java/pull/7340#discussion_r473475339", "bodyText": "Ah, checking initialResponseReceived can only be in syncContext.", "author": "dapengzhang0", "createdAt": "2020-08-20T00:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMDgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "ad3c67bac63a598910267c80cb9f41c0ede48a79", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadReportClient.java b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\nindex 3553aba8a..d5126c689 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n\n@@ -235,27 +252,6 @@ final class LoadReportClient {\n       }\n     }\n \n-    private void handleResponse(LoadStatsResponseData response) {\n-      if (closed) {\n-        return;\n-      }\n-      if (!initialResponseReceived) {\n-        logger.log(XdsLogLevel.DEBUG, \"Initial LRS response received\");\n-        initialResponseReceived = true;\n-      }\n-      reportAllClusters = response.getSendAllClusters();\n-      if (reportAllClusters) {\n-        logger.log(XdsLogLevel.INFO, \"Report loads for all clusters\");\n-      } else {\n-        logger.log(XdsLogLevel.INFO, \"Report loads for clusters: \", response.getClustersList());\n-        clusterNames = response.getClustersList();\n-      }\n-      long interval = response.getLoadReportingIntervalNanos();\n-      logger.log(XdsLogLevel.INFO, \"Update load reporting interval to {0} ns\", interval);\n-      loadReportIntervalNano = interval;\n-      scheduleNextLoadReport();\n-    }\n-\n     private void handleStreamClosed(Status status) {\n       checkArgument(!status.isOk(), \"unexpected OK status\");\n       if (closed) {\n"}}, {"oid": "df267d4a31ae2e77e1ab4f6d7a4c609aa84f36ac", "url": "https://github.com/grpc/grpc-java/commit/df267d4a31ae2e77e1ab4f6d7a4c609aa84f36ac", "message": "rename onError() and onComplete()", "committedDate": "2020-08-20T00:40:07Z", "type": "commit"}, {"oid": "ad3c67bac63a598910267c80cb9f41c0ede48a79", "url": "https://github.com/grpc/grpc-java/commit/ad3c67bac63a598910267c80cb9f41c0ede48a79", "message": "inline handleResponse", "committedDate": "2020-08-20T00:45:51Z", "type": "commit"}]}