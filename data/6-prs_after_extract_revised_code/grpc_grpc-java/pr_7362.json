{"pr_number": 7362, "pr_title": "core: fix pending call not drained when shutdown", "pr_createdAt": "2020-08-26T05:47:43Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7362", "timeline": [{"oid": "a538a4fdcc0cc44b92e85fdac7e7312e547f73fd", "url": "https://github.com/grpc/grpc-java/commit/a538a4fdcc0cc44b92e85fdac7e7312e547f73fd", "message": "core: fix pending call not drained when shutdown without resolution", "committedDate": "2020-08-26T17:43:27Z", "type": "commit"}, {"oid": "a538a4fdcc0cc44b92e85fdac7e7312e547f73fd", "url": "https://github.com/grpc/grpc-java/commit/a538a4fdcc0cc44b92e85fdac7e7312e547f73fd", "message": "core: fix pending call not drained when shutdown without resolution", "committedDate": "2020-08-26T17:43:27Z", "type": "forcePushed"}, {"oid": "ca7125ed3da21820ac9abbbf21c3c95aa6e15a0d", "url": "https://github.com/grpc/grpc-java/commit/ca7125ed3da21820ac9abbbf21c3c95aa6e15a0d", "message": "improve tests", "committedDate": "2020-08-26T17:51:38Z", "type": "commit"}, {"oid": "5f3750ecaf2294b6d12e3ec29ef7aa1a28c09523", "url": "https://github.com/grpc/grpc-java/commit/5f3750ecaf2294b6d12e3ec29ef7aa1a28c09523", "message": "drain pendingCalls at channel.shutdown()", "committedDate": "2020-08-26T18:52:23Z", "type": "commit"}, {"oid": "5f3750ecaf2294b6d12e3ec29ef7aa1a28c09523", "url": "https://github.com/grpc/grpc-java/commit/5f3750ecaf2294b6d12e3ec29ef7aa1a28c09523", "message": "drain pendingCalls at channel.shutdown()", "committedDate": "2020-08-26T18:52:23Z", "type": "forcePushed"}, {"oid": "6dbb93d08ca70d2807397de5a17d3a1dd7ce5039", "url": "https://github.com/grpc/grpc-java/commit/6dbb93d08ca70d2807397de5a17d3a1dd7ce5039", "message": "pendingCalls prevent uncommittedRetriableStreams.onShutdown()", "committedDate": "2020-08-27T04:12:29Z", "type": "forcePushed"}, {"oid": "30ef1f13fbe191c2ce99339dddea91e5c5eb2807", "url": "https://github.com/grpc/grpc-java/commit/30ef1f13fbe191c2ce99339dddea91e5c5eb2807", "message": "pendingCalls prevent uncommittedRetriableStreams.onShutdown()", "committedDate": "2020-08-27T04:18:11Z", "type": "commit"}, {"oid": "30ef1f13fbe191c2ce99339dddea91e5c5eb2807", "url": "https://github.com/grpc/grpc-java/commit/30ef1f13fbe191c2ce99339dddea91e5c5eb2807", "message": "pendingCalls prevent uncommittedRetriableStreams.onShutdown()", "committedDate": "2020-08-27T04:18:11Z", "type": "forcePushed"}, {"oid": "135f4e477eb1d53fcc975c75b64d8b96075b752e", "url": "https://github.com/grpc/grpc-java/commit/135f4e477eb1d53fcc975c75b64d8b96075b752e", "message": "move shutdown() & shutdownNow() to RealChannel", "committedDate": "2020-09-08T21:57:08Z", "type": "commit"}, {"oid": "879dd06285349cc121e16a426401b3c7931b25a6", "url": "https://github.com/grpc/grpc-java/commit/879dd06285349cc121e16a426401b3c7931b25a6", "message": "simplify PendingCallRemoval", "committedDate": "2020-09-08T21:59:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5ODM0Ng==", "url": "https://github.com/grpc/grpc-java/pull/7362#discussion_r485698346", "bodyText": "No, this should remain here. And I think the shutdown.compareAndSet() should likely stay here as well. I don't want the RealChannel to manage the wider ManagedChannel API.\nI'd much rather RealChannel make one-two calls to shutdown instead of taking control over it itself, since there's lots of existing uses. Even if we have to assume that shutdown.compareAndSet is the first thing done in the shutdown process.", "author": "ejona86", "createdAt": "2020-09-09T15:21:57Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -770,25 +770,8 @@ InternalConfigSelector getConfigSelector() {\n   @Override\n   public ManagedChannelImpl shutdown() {\n     channelLogger.log(ChannelLogLevel.DEBUG, \"shutdown() called\");\n-    if (!shutdown.compareAndSet(false, true)) {\n-      return this;\n-    }\n+    realChannel.shutdown();\n \n-    // Put gotoState(SHUTDOWN) as early into the syncContext's queue as possible.", "originalCommit": "879dd06285349cc121e16a426401b3c7931b25a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDM0OQ==", "url": "https://github.com/grpc/grpc-java/pull/7362#discussion_r485810349", "bodyText": "Done.", "author": "dapengzhang0", "createdAt": "2020-09-09T17:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5ODM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "87569cf855992a5df9328fe565fd1b01c42b4cdc", "chunk": "diff --git a/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\nindex 0cd7a7f59..e8bd4eb4e 100644\n--- a/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\n+++ b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\n\n@@ -770,6 +770,20 @@ final class ManagedChannelImpl extends ManagedChannel implements\n   @Override\n   public ManagedChannelImpl shutdown() {\n     channelLogger.log(ChannelLogLevel.DEBUG, \"shutdown() called\");\n+    if (!shutdown.compareAndSet(false, true)) {\n+      return this;\n+    }\n+    // Put gotoState(SHUTDOWN) as early into the syncContext's queue as possible.\n+    // delayedTransport.shutdown() may also add some tasks into the queue. But some things inside\n+    // delayedTransport.shutdown() like setting delayedTransport.shutdown = true are not run in\n+    // the syncContext's queue and should not be blocked, so we do not drain() immediately here.\n+    syncContext.executeLater(new Runnable() {\n+      @Override\n+      public void run() {\n+        channelLogger.log(ChannelLogLevel.INFO, \"Entering SHUTDOWN state\");\n+        channelStateManager.gotoState(SHUTDOWN);\n+      }\n+    });\n     realChannel.shutdown();\n \n     final class CancelIdleTimer implements Runnable {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODMzMw==", "url": "https://github.com/grpc/grpc-java/pull/7362#discussion_r485738333", "bodyText": "Why have this block of code? Won't the Shutdown Runnable do the same thing? Ditto for shutdownNow.", "author": "ejona86", "createdAt": "2020-09-09T16:13:48Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -955,6 +940,80 @@ public void run() {\n       return pendingCall;\n     }\n \n+    // Must run in SynchronizationContext.\n+    private void drainPendingCalls() {\n+      if (pendingCalls == null) {\n+        return;\n+      }\n+      for (RealChannel.PendingCall<?, ?> pendingCall : pendingCalls) {\n+        pendingCall.reprocess();\n+      }\n+    }\n+\n+    void shutdown() {\n+      if (!shutdown.compareAndSet(false, true)) {\n+        return;\n+      }\n+      // Put gotoState(SHUTDOWN) as early into the syncContext's queue as possible.\n+      // delayedTransport.shutdown() may also add some tasks into the queue. But some things inside\n+      // delayedTransport.shutdown() like setting delayedTransport.shutdown = true are not run in\n+      // the syncContext's queue and should not be blocked, so we do not drain() immediately here.\n+      syncContext.executeLater(new Runnable() {\n+        @Override\n+        public void run() {\n+          channelLogger.log(ChannelLogLevel.INFO, \"Entering SHUTDOWN state\");\n+          channelStateManager.gotoState(SHUTDOWN);\n+        }\n+      });\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR && pendingCalls == null) {", "originalCommit": "879dd06285349cc121e16a426401b3c7931b25a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MzI4MA==", "url": "https://github.com/grpc/grpc-java/pull/7362#discussion_r485763280", "bodyText": "This is to keep the fast path as https://github.com/grpc/grpc-java/blob/v1.32.0/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java#L791\nI don't mind if delete the fast path. Could there be any impact?", "author": "dapengzhang0", "createdAt": "2020-09-09T16:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4NDk5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7362#discussion_r485784995", "bodyText": "I don't understand. Why do we need a fast path? Why do you think the old path was a \"fast path\"? Won't the \"slow\" path be virtually the same speed, although it could be delayed a bit in time.", "author": "ejona86", "createdAt": "2020-09-09T17:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDI1NQ==", "url": "https://github.com/grpc/grpc-java/pull/7362#discussion_r485810255", "bodyText": "The only difference between \"fast path\" and  \"slow path\" is the former may eagerly set delayedTransport.shutdown = true. I think it's pretty safe to remove the fast path.\nRemoved.", "author": "dapengzhang0", "createdAt": "2020-09-09T17:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "fcd556c0cef3bd10d7fcc601fc1996907e6e8370", "chunk": "diff --git a/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\nindex 0cd7a7f59..11f84b0e8 100644\n--- a/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\n+++ b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\n\n@@ -1000,13 +1000,12 @@ final class ManagedChannelImpl extends ManagedChannel implements\n           if (configSelector.get() == INITIAL_PENDING_SELECTOR) {\n             configSelector.set(null);\n           }\n-          if (pendingCalls == null) {\n-            uncommittedRetriableStreamsRegistry.onShutdownNow(SHUTDOWN_NOW_STATUS);\n-          } else {\n+          if (pendingCalls != null) {\n             for (RealChannel.PendingCall<?, ?> pendingCall : pendingCalls) {\n               pendingCall.cancel(\"Channel is forcefully shutdown\", null);\n             }\n           }\n+          uncommittedRetriableStreamsRegistry.onShutdownNow(SHUTDOWN_NOW_STATUS);\n           maybeShutdownNowSubchannels();\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0MzQ0OQ==", "url": "https://github.com/grpc/grpc-java/pull/7362#discussion_r485743449", "bodyText": "Why isn't this called unconditionally?", "author": "ejona86", "createdAt": "2020-09-09T16:19:34Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -955,6 +940,80 @@ public void run() {\n       return pendingCall;\n     }\n \n+    // Must run in SynchronizationContext.\n+    private void drainPendingCalls() {\n+      if (pendingCalls == null) {\n+        return;\n+      }\n+      for (RealChannel.PendingCall<?, ?> pendingCall : pendingCalls) {\n+        pendingCall.reprocess();\n+      }\n+    }\n+\n+    void shutdown() {\n+      if (!shutdown.compareAndSet(false, true)) {\n+        return;\n+      }\n+      // Put gotoState(SHUTDOWN) as early into the syncContext's queue as possible.\n+      // delayedTransport.shutdown() may also add some tasks into the queue. But some things inside\n+      // delayedTransport.shutdown() like setting delayedTransport.shutdown = true are not run in\n+      // the syncContext's queue and should not be blocked, so we do not drain() immediately here.\n+      syncContext.executeLater(new Runnable() {\n+        @Override\n+        public void run() {\n+          channelLogger.log(ChannelLogLevel.INFO, \"Entering SHUTDOWN state\");\n+          channelStateManager.gotoState(SHUTDOWN);\n+        }\n+      });\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR && pendingCalls == null) {\n+        uncommittedRetriableStreamsRegistry.onShutdown(SHUTDOWN_STATUS);\n+        syncContext.drain();\n+        return;\n+      }\n+\n+      final class Shutdown implements Runnable {\n+        @Override\n+        public void run() {\n+          if (pendingCalls == null) {\n+            if (configSelector.get() == INITIAL_PENDING_SELECTOR) {\n+              configSelector.set(null);\n+            }\n+            uncommittedRetriableStreamsRegistry.onShutdown(SHUTDOWN_STATUS);\n+          }\n+        }\n+      }\n+\n+      syncContext.execute(new Shutdown());\n+    }\n+\n+    void shutdownNow() {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR && pendingCalls == null) {\n+        uncommittedRetriableStreamsRegistry.onShutdownNow(SHUTDOWN_NOW_STATUS);\n+      }\n+      final class ShutdownNow implements Runnable {\n+        @Override\n+        public void run() {\n+          if (shutdownNowed) {\n+            return;\n+          }\n+          shutdownNowed = true;\n+          if (configSelector.get() == INITIAL_PENDING_SELECTOR) {\n+            configSelector.set(null);\n+          }\n+          if (pendingCalls == null) {\n+            uncommittedRetriableStreamsRegistry.onShutdownNow(SHUTDOWN_NOW_STATUS);", "originalCommit": "879dd06285349cc121e16a426401b3c7931b25a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2NTg2NQ==", "url": "https://github.com/grpc/grpc-java/pull/7362#discussion_r485765865", "bodyText": "Oh, I was planning to do it unconditionally in simplify PendingCallRemoval but forgot.", "author": "dapengzhang0", "createdAt": "2020-09-09T16:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0MzQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fcd556c0cef3bd10d7fcc601fc1996907e6e8370", "chunk": "diff --git a/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\nindex 0cd7a7f59..11f84b0e8 100644\n--- a/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\n+++ b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\n\n@@ -1000,13 +1000,12 @@ final class ManagedChannelImpl extends ManagedChannel implements\n           if (configSelector.get() == INITIAL_PENDING_SELECTOR) {\n             configSelector.set(null);\n           }\n-          if (pendingCalls == null) {\n-            uncommittedRetriableStreamsRegistry.onShutdownNow(SHUTDOWN_NOW_STATUS);\n-          } else {\n+          if (pendingCalls != null) {\n             for (RealChannel.PendingCall<?, ?> pendingCall : pendingCalls) {\n               pendingCall.cancel(\"Channel is forcefully shutdown\", null);\n             }\n           }\n+          uncommittedRetriableStreamsRegistry.onShutdownNow(SHUTDOWN_NOW_STATUS);\n           maybeShutdownNowSubchannels();\n         }\n       }\n"}}, {"oid": "fcd556c0cef3bd10d7fcc601fc1996907e6e8370", "url": "https://github.com/grpc/grpc-java/commit/fcd556c0cef3bd10d7fcc601fc1996907e6e8370", "message": "unconditionally uncommittedRetriableStreamsRegistry.onShutdownNow()", "committedDate": "2020-09-09T16:51:47Z", "type": "commit"}, {"oid": "87569cf855992a5df9328fe565fd1b01c42b4cdc", "url": "https://github.com/grpc/grpc-java/commit/87569cf855992a5df9328fe565fd1b01c42b4cdc", "message": "move shutdown.compareAndSet() to outer class shutdown()", "committedDate": "2020-09-09T16:57:30Z", "type": "commit"}, {"oid": "2b76180d3c02d22ff41b92d44fc01a6ac9ff5ce2", "url": "https://github.com/grpc/grpc-java/commit/2b76180d3c02d22ff41b92d44fc01a6ac9ff5ce2", "message": "remove fast path", "committedDate": "2020-09-09T17:54:22Z", "type": "commit"}, {"oid": "8d34cb2548a341f72c9a86b9850442cd0df7017c", "url": "https://github.com/grpc/grpc-java/commit/8d34cb2548a341f72c9a86b9850442cd0df7017c", "message": "reformat", "committedDate": "2020-09-09T18:00:41Z", "type": "commit"}, {"oid": "b36f8403a4ebd1477bab7502b2b48f8d8a729d9e", "url": "https://github.com/grpc/grpc-java/commit/b36f8403a4ebd1477bab7502b2b48f8d8a729d9e", "message": "reformat 2", "committedDate": "2020-09-09T18:03:37Z", "type": "commit"}]}