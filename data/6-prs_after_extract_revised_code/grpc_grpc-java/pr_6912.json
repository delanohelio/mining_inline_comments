{"pr_number": 6912, "pr_title": "okhttp: use new APIs for configuring TLS whenever possible (Android Q+)", "pr_createdAt": "2020-04-08T18:59:55Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6912", "timeline": [{"oid": "f035d6e2b7c1277166b35d0548112856f2cbcb5f", "url": "https://github.com/grpc/grpc-java/commit/f035d6e2b7c1277166b35d0548112856f2cbcb5f", "message": "Use new APIs for configuring TLS whenever possible.", "committedDate": "2020-04-08T19:00:26Z", "type": "forcePushed"}, {"oid": "aa9b7ec958932d38b003a498d7b662cf91af84af", "url": "https://github.com/grpc/grpc-java/commit/aa9b7ec958932d38b003a498d7b662cf91af84af", "message": "Use new APIs for configuring TLS whenever possible.", "committedDate": "2020-04-08T19:01:11Z", "type": "commit"}, {"oid": "aa9b7ec958932d38b003a498d7b662cf91af84af", "url": "https://github.com/grpc/grpc-java/commit/aa9b7ec958932d38b003a498d7b662cf91af84af", "message": "Use new APIs for configuring TLS whenever possible.", "committedDate": "2020-04-08T19:01:11Z", "type": "forcePushed"}, {"oid": "0e6e2d0f0ddccdcc888c491d6a0ec77cd5bbf090", "url": "https://github.com/grpc/grpc-java/commit/0e6e2d0f0ddccdcc888c491d6a0ec77cd5bbf090", "message": "Ignore checkstyle warning for empty catch block", "committedDate": "2020-04-08T20:16:14Z", "type": "commit"}, {"oid": "0e6e2d0f0ddccdcc888c491d6a0ec77cd5bbf090", "url": "https://github.com/grpc/grpc-java/commit/0e6e2d0f0ddccdcc888c491d6a0ec77cd5bbf090", "message": "Ignore checkstyle warning for empty catch block", "committedDate": "2020-04-08T20:16:14Z", "type": "forcePushed"}, {"oid": "8e0e641b2c9275f182b8f4a7bc937c9e2792a7ac", "url": "https://github.com/grpc/grpc-java/commit/8e0e641b2c9275f182b8f4a7bc937c9e2792a7ac", "message": "Add test for verifying invoking getApplicationProtocol() for android 10.0+", "committedDate": "2020-04-08T21:30:14Z", "type": "commit"}, {"oid": "741247b10efbdf829f9074ac2b118a5e58d63178", "url": "https://github.com/grpc/grpc-java/commit/741247b10efbdf829f9074ac2b118a5e58d63178", "message": "Fix a wrong reflection call.", "committedDate": "2020-04-09T00:32:17Z", "type": "commit"}, {"oid": "612225ab8897ccf69a30fab91e3967a690d84fd0", "url": "https://github.com/grpc/grpc-java/commit/612225ab8897ccf69a30fab91e3967a690d84fd0", "message": "Add comment for explanation.", "committedDate": "2020-04-09T00:52:18Z", "type": "commit"}, {"oid": "b29cf268e5d6bf176c9295f844559074a23b813d", "url": "https://github.com/grpc/grpc-java/commit/b29cf268e5d6bf176c9295f844559074a23b813d", "message": "Fix checking wrong protocol type.", "committedDate": "2020-04-13T23:01:57Z", "type": "commit"}, {"oid": "284c51e93db6bac47009a9b597d9ed5b0ffca1f7", "url": "https://github.com/grpc/grpc-java/commit/284c51e93db6bac47009a9b597d9ed5b0ffca1f7", "message": "Should still calls old version (reflective) methods in case of Conscrypt is bundled with apps.", "committedDate": "2020-04-14T17:13:54Z", "type": "commit"}, {"oid": "745d447c98dc579e60c37ff1172d3c10105cd0a9", "url": "https://github.com/grpc/grpc-java/commit/745d447c98dc579e60c37ff1172d3c10105cd0a9", "message": "Remove unused method.", "committedDate": "2020-04-14T17:54:37Z", "type": "commit"}, {"oid": "197c32571424d63e7bca080da1f17f348bbb58fe", "url": "https://github.com/grpc/grpc-java/commit/197c32571424d63e7bca080da1f17f348bbb58fe", "message": "Should still call the old version when using platform socket while setApplicationProtocols is not available.", "committedDate": "2020-04-14T18:13:22Z", "type": "commit"}, {"oid": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1", "url": "https://github.com/grpc/grpc-java/commit/ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1", "message": "Clean up unused import", "committedDate": "2020-04-14T18:55:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5OTU3Ng==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408399576", "bodyText": "final? Ditto below. (Yes, that is more annoying for the static constructor, but we should probably do it anyway.)", "author": "ejona86", "createdAt": "2020-04-14T20:00:34Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -132,6 +136,29 @@ public String getSelectedProtocol(SSLSocket socket) {\n     // setNpnProtocol(byte[])\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n+    // setApplicationProtocols(String[])\n+    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =\n+        new OptionalMethod<>(null, \"setApplicationProtocols\", String[].class);\n+    // getApplicationProtocol()\n+    private static final OptionalMethod<SSLSocket> GET_APPLICATION_PROTOCOL =\n+        new OptionalMethod<>(String.class, \"getApplicationProtocol\");\n+    // Non-null on Android 10.0+.\n+    // SSLSockets.isSupportedSocket(SSLSocket)\n+    private static Method sslSocketsIsSupportedSocket;", "originalCommit": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MTIyNg==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409071226", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-04-15T19:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5OTU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cf373b592a5b825cc691a498a456820f0e59c114", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex a596ecd62..c3f9fb4d3 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -136,28 +137,38 @@ class OkHttpProtocolNegotiator {\n     // setNpnProtocol(byte[])\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n-    // setApplicationProtocols(String[])\n+\n+    // Available on Android 10.0+.\n+    // SSLParameters#setApplicationProtocols(String[])\n     private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =\n         new OptionalMethod<>(null, \"setApplicationProtocols\", String[].class);\n-    // getApplicationProtocol()\n+    // SSLParameters#getApplicationProtocols()\n+    private static final OptionalMethod<SSLParameters> GET_APPLICATION_PROTOCOLS =\n+        new OptionalMethod<>(String[].class, \"getApplicationProtocols\");\n+    // SSLSocket#getApplicationProtocol()\n     private static final OptionalMethod<SSLSocket> GET_APPLICATION_PROTOCOL =\n         new OptionalMethod<>(String.class, \"getApplicationProtocol\");\n+\n     // Non-null on Android 10.0+.\n-    // SSLSockets.isSupportedSocket(SSLSocket)\n-    private static Method sslSocketsIsSupportedSocket;\n-    // SSLSockets.setUseSessionTickets(SSLSocket, boolean)\n-    private static Method sslSocketsSetUseSessionTickets;\n+    // SSLSockets#isSupportedSocket(SSLSocket)\n+    private static final Method sslSocketsIsSupportedSocket;\n+    // SSLSockets#setUseSessionTickets(SSLSocket, boolean)\n+    private static final Method sslSocketsSetUseSessionTickets;\n \n     static {\n       // Attempt to find Android 10.0+ APIs.\n+      Method sslSocketsIsSupportedSocketMethod = null;\n+      Method sslSocketsSetUseSessionTicketsMethod = null;\n       try {\n         Class<?> sslSockets = Class.forName(\"android.net.ssl.SSLSockets\");\n-        sslSocketsIsSupportedSocket = sslSockets.getMethod(\"isSupportedSocket\", SSLSocket.class);\n-        sslSocketsSetUseSessionTickets =\n+        sslSocketsIsSupportedSocketMethod = sslSockets.getMethod(\"isSupportedSocket\", SSLSocket.class);\n+        sslSocketsSetUseSessionTicketsMethod =\n             sslSockets.getMethod(\"setUseSessionTickets\", SSLSocket.class, boolean.class);\n       } catch (ClassNotFoundException ignored) {\n       } catch (NoSuchMethodException ignored) {\n       }\n+      sslSocketsIsSupportedSocket = sslSocketsIsSupportedSocketMethod;\n+      sslSocketsSetUseSessionTickets = sslSocketsSetUseSessionTicketsMethod;\n     }\n \n     AndroidNegotiator(Platform platform) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMzczMA==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408403730", "bodyText": "It is strange that the code invokes SET_APPLICATION_PROTOCOLS and then checks to see if it is supported. Is this because we don't know which API will work?\nI see you said:\n\nWe need to use these new APIs whenever possible while still calls old versions whenever it does not break things.\n\nBut it didn't say why.", "author": "ejona86", "createdAt": "2020-04-14T20:08:11Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -152,31 +179,61 @@ public String negotiate(SSLSocket sslSocket, String hostname, List<Protocol> pro\n     /**\n      * Override {@link Platform}'s configureTlsExtensions for Android older than 5.0, since OkHttp\n      * (2.3+) only support such function for Android 5.0+.\n+     *\n+     * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n+     * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n+     * features. We attempt to use the public API where possible, but also still call the\n+     * hidden versions to continue to support old versions of Conscrypt that might be bundled with\n+     * apps or third-party TLS providers that might have taken advantage of being able to\n+     * duck-type their way into compatibility.\n      */\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n       // Enable SNI and session tickets.\n       if (hostname != null) {\n-        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+        try {\n+          if (sslSocketsIsSupportedSocket != null\n+              && (boolean) sslSocketsIsSupportedSocket.invoke(null, sslSocket)) {\n+            sslSocketsSetUseSessionTickets.invoke(null, sslSocket, true);\n+          } else {\n+            SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+          }\n+        } catch (IllegalAccessException ignored) {\n+        } catch (InvocationTargetException ignored) {\n+        }\n         SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n       }\n \n-      Object[] parameters = {Platform.concatLengthPrefixed(protocols)};\n-      if (platform.getTlsExtensionType() == TlsExtensionType.ALPN_AND_NPN) {\n-        SET_ALPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);\n-      }\n-\n-      if (platform.getTlsExtensionType() != TlsExtensionType.NONE) {\n-        SET_NPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);\n-      } else {\n-        throw new RuntimeException(\"We can not do TLS handshake on this Android version, please\"\n-            + \" install the Google Play Services Dynamic Security Provider to use TLS\");\n+      // Enable ALPN and NPN if necessary.\n+      SSLParameters sslParams = sslSocket.getSSLParameters();\n+      SET_APPLICATION_PROTOCOLS\n+          .invokeOptionalWithoutCheckedException(sslParams, (Object) protocolIds(protocols));\n+      sslSocket.setSSLParameters(sslParams);\n+      if (!isPlatformSocket(sslSocket) || !SET_APPLICATION_PROTOCOLS.isSupported(sslParams)) {", "originalCommit": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2NzIzNg==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408467236", "bodyText": "The logic of calling which API is subtle here (even myself need to think for a couple of seconds why it branches in this way).\nThe bottomline is, we must not invoke SET_ALPN_PROTOCOLS/SET_NPN_PROTOCOLS when it is Android R and it is using Android's Conscrypt (i.e., com.android.org.conscrypt). Otherwise, it breaks in internal version of Android R.\nOther than that, we do both. This preserves compatibility for the most extent while avoid the disallowed invocation in Android R's Conscrypt.\n!isPlatformSocket(sslSocket) checks if it uses Android OS Conscrypt and !SET_APPLICATION_PROTOCOLS.isSupported(sslParams) checks if it is in Android Q+. Avoid calling SET_ALPN_PROTOCOLS/SET_NPN_PROTOCOLS when both conditions are met. Otherwise, it is ok to do it.", "author": "voidzcy", "createdAt": "2020-04-14T22:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMzczMA=="}], "type": "inlineReview", "revised_code": {"commit": "cf373b592a5b825cc691a498a456820f0e59c114", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex a596ecd62..c3f9fb4d3 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -182,10 +193,8 @@ class OkHttpProtocolNegotiator {\n      *\n      * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n      * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n-     * features. We attempt to use the public API where possible, but also still call the\n-     * hidden versions to continue to support old versions of Conscrypt that might be bundled with\n-     * apps or third-party TLS providers that might have taken advantage of being able to\n-     * duck-type their way into compatibility.\n+     * features. We attempt to use the public API where possible while falling back to use the\n+     * old reflective API.\n      */\n     @Override\n     protected void configureTlsExtensions(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzY2Mw==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408413663", "bodyText": "I'm concerned about the isPlatformSocket() check. That seems brittle, especially since getting this wrong will spew ugly errors. If anything, it seems we should check for the gmscore version and apply special behavior in only that case.\nIn general, we want to use the new API, and only the new API, everywhere it is possible. We want the old API to naturally pass out of existence and know we aren't calling it at all on newer code.", "author": "ejona86", "createdAt": "2020-04-14T20:26:14Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -152,31 +179,61 @@ public String negotiate(SSLSocket sslSocket, String hostname, List<Protocol> pro\n     /**\n      * Override {@link Platform}'s configureTlsExtensions for Android older than 5.0, since OkHttp\n      * (2.3+) only support such function for Android 5.0+.\n+     *\n+     * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n+     * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n+     * features. We attempt to use the public API where possible, but also still call the\n+     * hidden versions to continue to support old versions of Conscrypt that might be bundled with\n+     * apps or third-party TLS providers that might have taken advantage of being able to\n+     * duck-type their way into compatibility.\n      */\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n       // Enable SNI and session tickets.\n       if (hostname != null) {\n-        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+        try {\n+          if (sslSocketsIsSupportedSocket != null\n+              && (boolean) sslSocketsIsSupportedSocket.invoke(null, sslSocket)) {\n+            sslSocketsSetUseSessionTickets.invoke(null, sslSocket, true);\n+          } else {\n+            SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+          }\n+        } catch (IllegalAccessException ignored) {\n+        } catch (InvocationTargetException ignored) {\n+        }\n         SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n       }\n \n-      Object[] parameters = {Platform.concatLengthPrefixed(protocols)};\n-      if (platform.getTlsExtensionType() == TlsExtensionType.ALPN_AND_NPN) {\n-        SET_ALPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);\n-      }\n-\n-      if (platform.getTlsExtensionType() != TlsExtensionType.NONE) {\n-        SET_NPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);\n-      } else {\n-        throw new RuntimeException(\"We can not do TLS handshake on this Android version, please\"\n-            + \" install the Google Play Services Dynamic Security Provider to use TLS\");\n+      // Enable ALPN and NPN if necessary.\n+      SSLParameters sslParams = sslSocket.getSSLParameters();\n+      SET_APPLICATION_PROTOCOLS\n+          .invokeOptionalWithoutCheckedException(sslParams, (Object) protocolIds(protocols));\n+      sslSocket.setSSLParameters(sslParams);\n+      if (!isPlatformSocket(sslSocket) || !SET_APPLICATION_PROTOCOLS.isSupported(sslParams)) {", "originalCommit": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MjQ5Ng==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408472496", "bodyText": "we want to use the new API, and only the new API, everywhere it is possible.\n\nThat was my first thought as well. It was something like\nif (SET_APPLICATION_PROTOCOLS.isSupported(sslParams)) {\n  // invoke SET_APPLICATION_PROTOCOLS on sslParams and sslSocket.setSSLParameters(sslParams)\n} else {\n  // invoke SET_ALPN_PROTOCOLS/SET_NPN_PROTOCOLS\n}\n\nHowever, when using bundled Conscrypt (i.e., org.conscrypt) on Android Q+, this doesn't work. We would still need to invoke SET_ALPN_PROTOCOLS/SET_NPN_PROTOCOLS.", "author": "voidzcy", "createdAt": "2020-04-14T22:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cf373b592a5b825cc691a498a456820f0e59c114", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex a596ecd62..c3f9fb4d3 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -182,10 +193,8 @@ class OkHttpProtocolNegotiator {\n      *\n      * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n      * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n-     * features. We attempt to use the public API where possible, but also still call the\n-     * hidden versions to continue to support old versions of Conscrypt that might be bundled with\n-     * apps or third-party TLS providers that might have taken advantage of being able to\n-     * duck-type their way into compatibility.\n+     * features. We attempt to use the public API where possible while falling back to use the\n+     * old reflective API.\n      */\n     @Override\n     protected void configureTlsExtensions(\n"}}, {"oid": "cf373b592a5b825cc691a498a456820f0e59c114", "url": "https://github.com/grpc/grpc-java/commit/cf373b592a5b825cc691a498a456820f0e59c114", "message": "Use public API whenever possible, only use old reflective API when public ones are not available.", "committedDate": "2020-04-15T03:43:12Z", "type": "commit"}, {"oid": "46db1659e542b403e587a6c637f1771b76e71e30", "url": "https://github.com/grpc/grpc-java/commit/46db1659e542b403e587a6c637f1771b76e71e30", "message": "Use new API for setting SNI whenever possible.", "committedDate": "2020-04-15T07:48:05Z", "type": "commit"}, {"oid": "8e4e3a2afce9375dcdcf5e44c7ddf5d5773c9b2f", "url": "https://github.com/grpc/grpc-java/commit/8e4e3a2afce9375dcdcf5e44c7ddf5d5773c9b2f", "message": "Better exception propagations.", "committedDate": "2020-04-15T08:12:13Z", "type": "commit"}, {"oid": "678bbc76f50ce26f54df0198e190657dbd3fd558", "url": "https://github.com/grpc/grpc-java/commit/678bbc76f50ce26f54df0198e190657dbd3fd558", "message": "Format", "committedDate": "2020-04-15T08:32:17Z", "type": "commit"}, {"oid": "66f0b8eb48767b427565d3a04335a7aed2cc4c0e", "url": "https://github.com/grpc/grpc-java/commit/66f0b8eb48767b427565d3a04335a7aed2cc4c0e", "message": "Eliminate ignored exception.", "committedDate": "2020-04-15T08:38:10Z", "type": "commit"}, {"oid": "1fb9b20721251c732c5a6e1cad2a1648eb390e13", "url": "https://github.com/grpc/grpc-java/commit/1fb9b20721251c732c5a6e1cad2a1648eb390e13", "message": "Format", "committedDate": "2020-04-15T08:38:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjIwMQ==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408962201", "bodyText": "Since none of these are javadoc, I'd expect it to use the . instead of #", "author": "ejona86", "createdAt": "2020-04-15T16:09:19Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -133,6 +140,59 @@ public String getSelectedProtocol(SSLSocket socket) {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n+    // Available on Android 10.0+.\n+    // SSLParameters#setApplicationProtocols(String[])", "originalCommit": "1fb9b20721251c732c5a6e1cad2a1648eb390e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MTQ5Ng==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409071496", "bodyText": "Updated.", "author": "voidzcy", "createdAt": "2020-04-15T19:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1eca84aa912b15bff27c96f9f86b7da4035b634f", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex 96ad0e902..c9b480f9c 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -140,56 +140,68 @@ class OkHttpProtocolNegotiator {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n-    // Available on Android 10.0+.\n-    // SSLParameters#setApplicationProtocols(String[])\n-    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =\n-        new OptionalMethod<>(null, \"setApplicationProtocols\", String[].class);\n-    // SSLParameters#getApplicationProtocols()\n-    private static final OptionalMethod<SSLParameters> GET_APPLICATION_PROTOCOLS =\n-        new OptionalMethod<>(String[].class, \"getApplicationProtocols\");\n-    // SSLSocket#getApplicationProtocol()\n-    private static final OptionalMethod<SSLSocket> GET_APPLICATION_PROTOCOL =\n-        new OptionalMethod<>(String.class, \"getApplicationProtocol\");\n-\n-    // Available on Android 7.0+.\n-    // SSLParameters#setServerNames(List<SNIServerName>)\n-    private static final OptionalMethod<SSLParameters> SET_SERVER_NAMES =\n-        new OptionalMethod<>(null, \"setServerNames\", List.class);\n-\n     // Non-null on Android 10.0+.\n-    // SSLSockets#isSupportedSocket(SSLSocket)\n+    // SSLSockets.isSupportedSocket(SSLSocket)\n     private static final Method SSL_SOCKETS_IS_SUPPORTED_SOCKET;\n-    // SSLSockets#setUseSessionTickets(SSLSocket, boolean)\n+    // SSLSockets.setUseSessionTickets(SSLSocket, boolean)\n     private static final Method SSL_SOCKETS_SET_USE_SESSION_TICKET;\n+    // SSLParameters.setApplicationProtocols(String[])\n+    private static final Method SET_APPLICATION_PROTOCOLS;\n+    // SSLParameters.getApplicationProtocols()\n+    private static final Method GET_APPLICATION_PROTOCOLS;\n+    // SSLSocket.getApplicationProtocol()\n+    private static final Method GET_APPLICATION_PROTOCOL;\n \n     // Non-null on Android 7.0+.\n+    // SSLParameters.setServerNames(List<SNIServerName>)\n+    private static final Method SET_SERVER_NAMES;\n     // SNIHostName(String)\n     private static final Constructor<?> SNI_HOST_NAME;\n \n     static {\n       // Attempt to find Android 10.0+ APIs.\n+      Method setApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolMethod = null;\n       Method sslSocketsIsSupportedSocketMethod = null;\n       Method sslSocketsSetUseSessionTicketsMethod = null;\n       try {\n+        Class<?> sslParameters = Class.forName(\"javax.net.ssl.SSLParameters\");\n+        setApplicationProtocolsMethod =\n+            sslParameters.getMethod(\"setApplicationProtocols\", String[].class);\n+        getApplicationProtocolsMethod = sslParameters.getMethod(\"getApplicationProtocols\");\n+        getApplicationProtocolMethod =\n+            Class.forName(\"javax.net.ssl.SSLSocket\").getMethod(\"getApplicationProtocol\");\n         Class<?> sslSockets = Class.forName(\"android.net.ssl.SSLSockets\");\n         sslSocketsIsSupportedSocketMethod =\n             sslSockets.getMethod(\"isSupportedSocket\", SSLSocket.class);\n         sslSocketsSetUseSessionTicketsMethod =\n             sslSockets.getMethod(\"setUseSessionTickets\", SSLSocket.class, boolean.class);\n-      } catch (Throwable e) {\n-        logger.log(Level.FINER, \"SSLSockets#setUseSessionTicktes API not found\");\n+      } catch (ClassNotFoundException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 10.0+ APIs\", e);\n+      } catch (NoSuchMethodException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 10.0+ APIs\", e);\n       }\n+      SET_APPLICATION_PROTOCOLS = setApplicationProtocolsMethod;\n+      GET_APPLICATION_PROTOCOLS = getApplicationProtocolsMethod;\n+      GET_APPLICATION_PROTOCOL = getApplicationProtocolMethod;\n       SSL_SOCKETS_IS_SUPPORTED_SOCKET = sslSocketsIsSupportedSocketMethod;\n       SSL_SOCKETS_SET_USE_SESSION_TICKET = sslSocketsSetUseSessionTicketsMethod;\n \n       // Attempt to find Android 7.0+ APIs.\n+      Method setServerNamesMethod = null;\n       Constructor<?> sniHostNameConstructor = null;\n       try {\n+        setServerNamesMethod =\n+            Class.forName(\"javax.net.ssl.SSLParameters\").getMethod(\"setServerNames\", List.class);\n         sniHostNameConstructor =\n             Class.forName(\"javax.net.ssl.SNIHostName\").getConstructor(String.class);\n-      } catch (Throwable e) {\n-        logger.log(Level.FINER, \"SNIHostName API not found\");\n+      } catch (ClassNotFoundException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 7.0+ APIs\", e);\n+      } catch (NoSuchMethodException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 7.0+ APIs\", e);\n       }\n+      SET_SERVER_NAMES = setServerNamesMethod;\n       SNI_HOST_NAME = sniHostNameConstructor;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MzA3Mg==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408963072", "bodyText": "Is there a need to catch Throwable instead of Exception? I'd honestly feel best catching just the reflection exceptions.", "author": "ejona86", "createdAt": "2020-04-15T16:10:36Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -133,6 +140,59 @@ public String getSelectedProtocol(SSLSocket socket) {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n+    // Available on Android 10.0+.\n+    // SSLParameters#setApplicationProtocols(String[])\n+    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =\n+        new OptionalMethod<>(null, \"setApplicationProtocols\", String[].class);\n+    // SSLParameters#getApplicationProtocols()\n+    private static final OptionalMethod<SSLParameters> GET_APPLICATION_PROTOCOLS =\n+        new OptionalMethod<>(String[].class, \"getApplicationProtocols\");\n+    // SSLSocket#getApplicationProtocol()\n+    private static final OptionalMethod<SSLSocket> GET_APPLICATION_PROTOCOL =\n+        new OptionalMethod<>(String.class, \"getApplicationProtocol\");\n+\n+    // Available on Android 7.0+.\n+    // SSLParameters#setServerNames(List<SNIServerName>)\n+    private static final OptionalMethod<SSLParameters> SET_SERVER_NAMES =\n+        new OptionalMethod<>(null, \"setServerNames\", List.class);\n+\n+    // Non-null on Android 10.0+.\n+    // SSLSockets#isSupportedSocket(SSLSocket)\n+    private static final Method SSL_SOCKETS_IS_SUPPORTED_SOCKET;\n+    // SSLSockets#setUseSessionTickets(SSLSocket, boolean)\n+    private static final Method SSL_SOCKETS_SET_USE_SESSION_TICKET;\n+\n+    // Non-null on Android 7.0+.\n+    // SNIHostName(String)\n+    private static final Constructor<?> SNI_HOST_NAME;\n+\n+    static {\n+      // Attempt to find Android 10.0+ APIs.\n+      Method sslSocketsIsSupportedSocketMethod = null;\n+      Method sslSocketsSetUseSessionTicketsMethod = null;\n+      try {\n+        Class<?> sslSockets = Class.forName(\"android.net.ssl.SSLSockets\");\n+        sslSocketsIsSupportedSocketMethod =\n+            sslSockets.getMethod(\"isSupportedSocket\", SSLSocket.class);\n+        sslSocketsSetUseSessionTicketsMethod =\n+            sslSockets.getMethod(\"setUseSessionTickets\", SSLSocket.class, boolean.class);\n+      } catch (Throwable e) {", "originalCommit": "1fb9b20721251c732c5a6e1cad2a1648eb390e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MTY2Ng==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409071666", "bodyText": "Fixed.", "author": "voidzcy", "createdAt": "2020-04-15T19:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MzA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1eca84aa912b15bff27c96f9f86b7da4035b634f", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex 96ad0e902..c9b480f9c 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -140,56 +140,68 @@ class OkHttpProtocolNegotiator {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n-    // Available on Android 10.0+.\n-    // SSLParameters#setApplicationProtocols(String[])\n-    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =\n-        new OptionalMethod<>(null, \"setApplicationProtocols\", String[].class);\n-    // SSLParameters#getApplicationProtocols()\n-    private static final OptionalMethod<SSLParameters> GET_APPLICATION_PROTOCOLS =\n-        new OptionalMethod<>(String[].class, \"getApplicationProtocols\");\n-    // SSLSocket#getApplicationProtocol()\n-    private static final OptionalMethod<SSLSocket> GET_APPLICATION_PROTOCOL =\n-        new OptionalMethod<>(String.class, \"getApplicationProtocol\");\n-\n-    // Available on Android 7.0+.\n-    // SSLParameters#setServerNames(List<SNIServerName>)\n-    private static final OptionalMethod<SSLParameters> SET_SERVER_NAMES =\n-        new OptionalMethod<>(null, \"setServerNames\", List.class);\n-\n     // Non-null on Android 10.0+.\n-    // SSLSockets#isSupportedSocket(SSLSocket)\n+    // SSLSockets.isSupportedSocket(SSLSocket)\n     private static final Method SSL_SOCKETS_IS_SUPPORTED_SOCKET;\n-    // SSLSockets#setUseSessionTickets(SSLSocket, boolean)\n+    // SSLSockets.setUseSessionTickets(SSLSocket, boolean)\n     private static final Method SSL_SOCKETS_SET_USE_SESSION_TICKET;\n+    // SSLParameters.setApplicationProtocols(String[])\n+    private static final Method SET_APPLICATION_PROTOCOLS;\n+    // SSLParameters.getApplicationProtocols()\n+    private static final Method GET_APPLICATION_PROTOCOLS;\n+    // SSLSocket.getApplicationProtocol()\n+    private static final Method GET_APPLICATION_PROTOCOL;\n \n     // Non-null on Android 7.0+.\n+    // SSLParameters.setServerNames(List<SNIServerName>)\n+    private static final Method SET_SERVER_NAMES;\n     // SNIHostName(String)\n     private static final Constructor<?> SNI_HOST_NAME;\n \n     static {\n       // Attempt to find Android 10.0+ APIs.\n+      Method setApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolMethod = null;\n       Method sslSocketsIsSupportedSocketMethod = null;\n       Method sslSocketsSetUseSessionTicketsMethod = null;\n       try {\n+        Class<?> sslParameters = Class.forName(\"javax.net.ssl.SSLParameters\");\n+        setApplicationProtocolsMethod =\n+            sslParameters.getMethod(\"setApplicationProtocols\", String[].class);\n+        getApplicationProtocolsMethod = sslParameters.getMethod(\"getApplicationProtocols\");\n+        getApplicationProtocolMethod =\n+            Class.forName(\"javax.net.ssl.SSLSocket\").getMethod(\"getApplicationProtocol\");\n         Class<?> sslSockets = Class.forName(\"android.net.ssl.SSLSockets\");\n         sslSocketsIsSupportedSocketMethod =\n             sslSockets.getMethod(\"isSupportedSocket\", SSLSocket.class);\n         sslSocketsSetUseSessionTicketsMethod =\n             sslSockets.getMethod(\"setUseSessionTickets\", SSLSocket.class, boolean.class);\n-      } catch (Throwable e) {\n-        logger.log(Level.FINER, \"SSLSockets#setUseSessionTicktes API not found\");\n+      } catch (ClassNotFoundException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 10.0+ APIs\", e);\n+      } catch (NoSuchMethodException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 10.0+ APIs\", e);\n       }\n+      SET_APPLICATION_PROTOCOLS = setApplicationProtocolsMethod;\n+      GET_APPLICATION_PROTOCOLS = getApplicationProtocolsMethod;\n+      GET_APPLICATION_PROTOCOL = getApplicationProtocolMethod;\n       SSL_SOCKETS_IS_SUPPORTED_SOCKET = sslSocketsIsSupportedSocketMethod;\n       SSL_SOCKETS_SET_USE_SESSION_TICKET = sslSocketsSetUseSessionTicketsMethod;\n \n       // Attempt to find Android 7.0+ APIs.\n+      Method setServerNamesMethod = null;\n       Constructor<?> sniHostNameConstructor = null;\n       try {\n+        setServerNamesMethod =\n+            Class.forName(\"javax.net.ssl.SSLParameters\").getMethod(\"setServerNames\", List.class);\n         sniHostNameConstructor =\n             Class.forName(\"javax.net.ssl.SNIHostName\").getConstructor(String.class);\n-      } catch (Throwable e) {\n-        logger.log(Level.FINER, \"SNIHostName API not found\");\n+      } catch (ClassNotFoundException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 7.0+ APIs\", e);\n+      } catch (NoSuchMethodException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 7.0+ APIs\", e);\n       }\n+      SET_SERVER_NAMES = setServerNamesMethod;\n       SNI_HOST_NAME = sniHostNameConstructor;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NjYwMA==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408966600", "bodyText": "It'd be better to use the normal reflection Method here. These OptionalMethods were for the duck-typing and do reflection every call. It'd be much better to only do the reflection once.\nAlthough we may also want to defer that reflection until first use...", "author": "ejona86", "createdAt": "2020-04-15T16:15:46Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -133,6 +140,59 @@ public String getSelectedProtocol(SSLSocket socket) {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n+    // Available on Android 10.0+.\n+    // SSLParameters#setApplicationProtocols(String[])\n+    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =", "originalCommit": "1fb9b20721251c732c5a6e1cad2a1648eb390e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzODYyNg==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409038626", "bodyText": "As discussed separately, since this is in the negotiator which is loaded late it is actually okay to avoid deferring until first use. I keep thinking we are in Platform which is loaded during Channel creation.", "author": "ejona86", "createdAt": "2020-04-15T18:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NjYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NjY4MA==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409086680", "bodyText": "Changed to use normal Method, as those are public APIs.  One downside is we are no longer able to have unit tests that verifies the invocation.", "author": "voidzcy", "createdAt": "2020-04-15T19:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NjYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "1eca84aa912b15bff27c96f9f86b7da4035b634f", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex 96ad0e902..c9b480f9c 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -140,56 +140,68 @@ class OkHttpProtocolNegotiator {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n-    // Available on Android 10.0+.\n-    // SSLParameters#setApplicationProtocols(String[])\n-    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =\n-        new OptionalMethod<>(null, \"setApplicationProtocols\", String[].class);\n-    // SSLParameters#getApplicationProtocols()\n-    private static final OptionalMethod<SSLParameters> GET_APPLICATION_PROTOCOLS =\n-        new OptionalMethod<>(String[].class, \"getApplicationProtocols\");\n-    // SSLSocket#getApplicationProtocol()\n-    private static final OptionalMethod<SSLSocket> GET_APPLICATION_PROTOCOL =\n-        new OptionalMethod<>(String.class, \"getApplicationProtocol\");\n-\n-    // Available on Android 7.0+.\n-    // SSLParameters#setServerNames(List<SNIServerName>)\n-    private static final OptionalMethod<SSLParameters> SET_SERVER_NAMES =\n-        new OptionalMethod<>(null, \"setServerNames\", List.class);\n-\n     // Non-null on Android 10.0+.\n-    // SSLSockets#isSupportedSocket(SSLSocket)\n+    // SSLSockets.isSupportedSocket(SSLSocket)\n     private static final Method SSL_SOCKETS_IS_SUPPORTED_SOCKET;\n-    // SSLSockets#setUseSessionTickets(SSLSocket, boolean)\n+    // SSLSockets.setUseSessionTickets(SSLSocket, boolean)\n     private static final Method SSL_SOCKETS_SET_USE_SESSION_TICKET;\n+    // SSLParameters.setApplicationProtocols(String[])\n+    private static final Method SET_APPLICATION_PROTOCOLS;\n+    // SSLParameters.getApplicationProtocols()\n+    private static final Method GET_APPLICATION_PROTOCOLS;\n+    // SSLSocket.getApplicationProtocol()\n+    private static final Method GET_APPLICATION_PROTOCOL;\n \n     // Non-null on Android 7.0+.\n+    // SSLParameters.setServerNames(List<SNIServerName>)\n+    private static final Method SET_SERVER_NAMES;\n     // SNIHostName(String)\n     private static final Constructor<?> SNI_HOST_NAME;\n \n     static {\n       // Attempt to find Android 10.0+ APIs.\n+      Method setApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolMethod = null;\n       Method sslSocketsIsSupportedSocketMethod = null;\n       Method sslSocketsSetUseSessionTicketsMethod = null;\n       try {\n+        Class<?> sslParameters = Class.forName(\"javax.net.ssl.SSLParameters\");\n+        setApplicationProtocolsMethod =\n+            sslParameters.getMethod(\"setApplicationProtocols\", String[].class);\n+        getApplicationProtocolsMethod = sslParameters.getMethod(\"getApplicationProtocols\");\n+        getApplicationProtocolMethod =\n+            Class.forName(\"javax.net.ssl.SSLSocket\").getMethod(\"getApplicationProtocol\");\n         Class<?> sslSockets = Class.forName(\"android.net.ssl.SSLSockets\");\n         sslSocketsIsSupportedSocketMethod =\n             sslSockets.getMethod(\"isSupportedSocket\", SSLSocket.class);\n         sslSocketsSetUseSessionTicketsMethod =\n             sslSockets.getMethod(\"setUseSessionTickets\", SSLSocket.class, boolean.class);\n-      } catch (Throwable e) {\n-        logger.log(Level.FINER, \"SSLSockets#setUseSessionTicktes API not found\");\n+      } catch (ClassNotFoundException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 10.0+ APIs\", e);\n+      } catch (NoSuchMethodException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 10.0+ APIs\", e);\n       }\n+      SET_APPLICATION_PROTOCOLS = setApplicationProtocolsMethod;\n+      GET_APPLICATION_PROTOCOLS = getApplicationProtocolsMethod;\n+      GET_APPLICATION_PROTOCOL = getApplicationProtocolMethod;\n       SSL_SOCKETS_IS_SUPPORTED_SOCKET = sslSocketsIsSupportedSocketMethod;\n       SSL_SOCKETS_SET_USE_SESSION_TICKET = sslSocketsSetUseSessionTicketsMethod;\n \n       // Attempt to find Android 7.0+ APIs.\n+      Method setServerNamesMethod = null;\n       Constructor<?> sniHostNameConstructor = null;\n       try {\n+        setServerNamesMethod =\n+            Class.forName(\"javax.net.ssl.SSLParameters\").getMethod(\"setServerNames\", List.class);\n         sniHostNameConstructor =\n             Class.forName(\"javax.net.ssl.SNIHostName\").getConstructor(String.class);\n-      } catch (Throwable e) {\n-        logger.log(Level.FINER, \"SNIHostName API not found\");\n+      } catch (ClassNotFoundException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 7.0+ APIs\", e);\n+      } catch (NoSuchMethodException e) {\n+        logger.log(Level.FINER, \"Failed to find Android 7.0+ APIs\", e);\n       }\n+      SET_SERVER_NAMES = setServerNamesMethod;\n       SNI_HOST_NAME = sniHostNameConstructor;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDAxMQ==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408970011", "bodyText": "As written, this is not working around Conscrypt. This is checking whether the API is supported in a Conscrypt-compatible way. For this to be a workaround we would need to do the does-GET_APPLICATION_PROTOCOL-throw check before this, or we would need to say \"we aren't checking getApplicationProtocol as a Conscrypt workaround\".", "author": "ejona86", "createdAt": "2020-04-15T16:21:08Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -152,21 +212,68 @@ public String negotiate(SSLSocket sslSocket, String hostname, List<Protocol> pro\n     /**\n      * Override {@link Platform}'s configureTlsExtensions for Android older than 5.0, since OkHttp\n      * (2.3+) only support such function for Android 5.0+.\n+     *\n+     * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n+     * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n+     * features. We attempt to use the public API where possible. Otherwise, fall back to use the\n+     * old reflective API.\n      */\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n+      SSLParameters sslParams = sslSocket.getSSLParameters();\n       // Enable SNI and session tickets.\n       if (hostname != null) {\n-        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n-        SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n+        try {\n+          if (SSL_SOCKETS_IS_SUPPORTED_SOCKET != null\n+              && (boolean) SSL_SOCKETS_IS_SUPPORTED_SOCKET.invoke(null, sslSocket)) {\n+            SSL_SOCKETS_SET_USE_SESSION_TICKET.invoke(null, sslSocket, true);\n+          } else {\n+            SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+          }\n+        } catch (IllegalAccessException e) {\n+          throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+          throw new RuntimeException(e);\n+        }\n+\n+        try {\n+          if (SNI_HOST_NAME != null) {\n+            SET_SERVER_NAMES\n+                .invokeOptionalWithoutCheckedException(\n+                    sslParams,\n+                    Collections.singletonList(SNI_HOST_NAME.newInstance(hostname)));\n+          } else {\n+            SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n+          }\n+        } catch (IllegalAccessException e) {\n+          throw new RuntimeException(e);\n+        } catch (InstantiationException e) {\n+          throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+          throw new RuntimeException(e);\n+        }\n+      }\n+\n+      // Enable ALPN and NPN if necessary.\n+      String[] protocolNames = protocolIds(protocols);\n+      SET_APPLICATION_PROTOCOLS\n+          .invokeOptionalWithoutCheckedException(sslParams, (Object) protocolIds(protocols));\n+      sslSocket.setSSLParameters(sslParams);\n+      // Check protocol configuration through SSLParameters succeeds. If not, fall back to\n+      // configure with the old reflective method.\n+      // Workaround for Conscrypt issue: https://github.com/google/conscrypt/issues/832", "originalCommit": "1fb9b20721251c732c5a6e1cad2a1648eb390e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxNDcwMg==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409014702", "bodyText": "I guess you are really referring to SSLParameters#getApplicationProtocols() instead of SSLSocket#getApplicationProtocol() here. The former never throw (we aren't doing the latter during configuration). The getApplicationProtocols() check really is to see if protocols configured on SSLParameters are propagated to SSLSocket, which is only because Conscrypt on Android does this incorrectly. Normally we wouldn't need to do this. Isn't this a workaround?\nI agree now it looks more like checking whether the API is supported in a Conscrypt-compatible way due to using duck-type method calls. After changing to normal Method and only do this when APIs are available, it would be clearer.", "author": "voidzcy", "createdAt": "2020-04-15T17:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDAxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4ODE3OQ==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409088179", "bodyText": "I was referring to SSLSocket.getApplicationProtocol().\nAn API was added in Java 9 and Android API 27 to configure ALPN. But that API is implemented by multiple implementations. So we can't assume that if the API is there that it works. I was suggesting to use SSLSocket.getApplicationProtocol() before any negotiation has occurred to see if ALPN is supported in this fashion. If the method throws UnsupportedOperationException then the implementation does not support that API and we should try other APIs. That is the way we decided to handle it in Netty.", "author": "ejona86", "createdAt": "2020-04-15T19:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDAxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5OTc5OA==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409099798", "bodyText": "I see. That was what we used to find the Conscrypt bug. Due to that bug, even the invocation of SSLSocket.getApplicationProtocol() before any negotiation has occurred does not throw UnsupportedOperationException, ALPN is still not configured correctly. Here, we are working around that bug. Consequently, this check also helps us verifying the SSLSocket is configured with ALPN, isn't it? So do we still need the does-GET_APPLICATION_PROTOCOL-throw check?", "author": "voidzcy", "createdAt": "2020-04-15T20:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1eca84aa912b15bff27c96f9f86b7da4035b634f", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex 96ad0e902..c9b480f9c 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -221,53 +233,44 @@ class OkHttpProtocolNegotiator {\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n-      SSLParameters sslParams = sslSocket.getSSLParameters();\n-      // Enable SNI and session tickets.\n-      if (hostname != null) {\n-        try {\n+      try {\n+        SSLParameters sslParams = sslSocket.getSSLParameters();\n+        // Enable SNI and session tickets.\n+        if (hostname != null) {\n           if (SSL_SOCKETS_IS_SUPPORTED_SOCKET != null\n               && (boolean) SSL_SOCKETS_IS_SUPPORTED_SOCKET.invoke(null, sslSocket)) {\n             SSL_SOCKETS_SET_USE_SESSION_TICKET.invoke(null, sslSocket, true);\n           } else {\n             SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n           }\n-        } catch (IllegalAccessException e) {\n-          throw new RuntimeException(e);\n-        } catch (InvocationTargetException e) {\n-          throw new RuntimeException(e);\n-        }\n-\n-        try {\n-          if (SNI_HOST_NAME != null) {\n+          if (SET_SERVER_NAMES != null && SNI_HOST_NAME != null) {\n             SET_SERVER_NAMES\n-                .invokeOptionalWithoutCheckedException(\n-                    sslParams,\n-                    Collections.singletonList(SNI_HOST_NAME.newInstance(hostname)));\n+                .invoke(sslParams, Collections.singletonList(SNI_HOST_NAME.newInstance(hostname)));\n           } else {\n             SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n           }\n-        } catch (IllegalAccessException e) {\n-          throw new RuntimeException(e);\n-        } catch (InstantiationException e) {\n-          throw new RuntimeException(e);\n-        } catch (InvocationTargetException e) {\n-          throw new RuntimeException(e);\n         }\n-      }\n-\n-      // Enable ALPN and NPN if necessary.\n-      String[] protocolNames = protocolIds(protocols);\n-      SET_APPLICATION_PROTOCOLS\n-          .invokeOptionalWithoutCheckedException(sslParams, (Object) protocolIds(protocols));\n-      sslSocket.setSSLParameters(sslParams);\n-      // Check protocol configuration through SSLParameters succeeds. If not, fall back to\n-      // configure with the old reflective method.\n-      // Workaround for Conscrypt issue: https://github.com/google/conscrypt/issues/832\n-      String[] configuredProtocols =\n-          (String[]) GET_APPLICATION_PROTOCOLS\n-              .invokeOptionalWithoutCheckedException(sslSocket.getSSLParameters());\n-      if (Arrays.equals(protocolNames, configuredProtocols)) {\n-        return;\n+        String[] protocolNames = protocolIds(protocols);\n+        if (SET_APPLICATION_PROTOCOLS != null) {\n+          SET_APPLICATION_PROTOCOLS.invoke(sslParams, (Object) protocolNames);\n+        }\n+        sslSocket.setSSLParameters(sslParams);\n+        // Check application protocols are configured correctly. If not, configure again with\n+        // old methods.\n+        // Workaround for Conscrypt bug: https://github.com/google/conscrypt/issues/832\n+        if (GET_APPLICATION_PROTOCOLS != null) {\n+          String[] configuredProtocols =\n+              (String[]) GET_APPLICATION_PROTOCOLS.invoke(sslSocket.getSSLParameters());\n+          if (Arrays.equals(protocolNames, configuredProtocols)) {\n+            return;\n+          }\n+        }\n+      } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+      } catch (InvocationTargetException e) {\n+        throw new RuntimeException(e);\n+      } catch (InstantiationException e) {\n+        throw new RuntimeException(e);\n       }\n \n       Object[] parameters = {Platform.concatLengthPrefixed(protocols)};\n"}}, {"oid": "1eca84aa912b15bff27c96f9f86b7da4035b634f", "url": "https://github.com/grpc/grpc-java/commit/1eca84aa912b15bff27c96f9f86b7da4035b634f", "message": "Use normal Method for using public APIs.", "committedDate": "2020-04-15T19:08:05Z", "type": "commit"}, {"oid": "7d69401bdbf766d08787b60c1446bb1d47c78d85", "url": "https://github.com/grpc/grpc-java/commit/7d69401bdbf766d08787b60c1446bb1d47c78d85", "message": "Revert unit test for verifying invocation of getApplicationProtocols(). It cannot be verified now as we are using reflections loaded statically.", "committedDate": "2020-04-15T19:33:05Z", "type": "commit"}, {"oid": "be1867ee8ba8f9dfa0bb640963e3c3ee8b312029", "url": "https://github.com/grpc/grpc-java/commit/be1867ee8ba8f9dfa0bb640963e3c3ee8b312029", "message": "Check if SSLSocket.getApplicationProtocol() is supported to determine if setApplicationProtocols() can be used.", "committedDate": "2020-04-16T00:54:46Z", "type": "commit"}, {"oid": "a5b71243933d1de7d537256a5162b9eca038d044", "url": "https://github.com/grpc/grpc-java/commit/a5b71243933d1de7d537256a5162b9eca038d044", "message": "Fix exception catching for UnsupportedOperationException.", "committedDate": "2020-04-16T01:02:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjgzOQ==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409092839", "bodyText": "SSLParameters.class\nDitto for SSLSocket, and the second SSLParameters below.", "author": "ejona86", "createdAt": "2020-04-15T19:48:16Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -133,6 +140,71 @@ public String getSelectedProtocol(SSLSocket socket) {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n+    // Non-null on Android 10.0+.\n+    // SSLSockets.isSupportedSocket(SSLSocket)\n+    private static final Method SSL_SOCKETS_IS_SUPPORTED_SOCKET;\n+    // SSLSockets.setUseSessionTickets(SSLSocket, boolean)\n+    private static final Method SSL_SOCKETS_SET_USE_SESSION_TICKET;\n+    // SSLParameters.setApplicationProtocols(String[])\n+    private static final Method SET_APPLICATION_PROTOCOLS;\n+    // SSLParameters.getApplicationProtocols()\n+    private static final Method GET_APPLICATION_PROTOCOLS;\n+    // SSLSocket.getApplicationProtocol()\n+    private static final Method GET_APPLICATION_PROTOCOL;\n+\n+    // Non-null on Android 7.0+.\n+    // SSLParameters.setServerNames(List<SNIServerName>)\n+    private static final Method SET_SERVER_NAMES;\n+    // SNIHostName(String)\n+    private static final Constructor<?> SNI_HOST_NAME;\n+\n+    static {\n+      // Attempt to find Android 10.0+ APIs.\n+      Method setApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolMethod = null;\n+      Method sslSocketsIsSupportedSocketMethod = null;\n+      Method sslSocketsSetUseSessionTicketsMethod = null;\n+      try {\n+        Class<?> sslParameters = Class.forName(\"javax.net.ssl.SSLParameters\");", "originalCommit": "7d69401bdbf766d08787b60c1446bb1d47c78d85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1NDExMg==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409854112", "bodyText": "Fixed, thanks for catching it.", "author": "voidzcy", "createdAt": "2020-04-16T21:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "03e81aeb8ea702ce9f34494d62fe99d6a4e794c1", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex c9b480f9c..35b2f389a 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -166,12 +166,11 @@ class OkHttpProtocolNegotiator {\n       Method sslSocketsIsSupportedSocketMethod = null;\n       Method sslSocketsSetUseSessionTicketsMethod = null;\n       try {\n-        Class<?> sslParameters = Class.forName(\"javax.net.ssl.SSLParameters\");\n+        Class<?> sslParameters = SSLParameters.class;\n         setApplicationProtocolsMethod =\n             sslParameters.getMethod(\"setApplicationProtocols\", String[].class);\n         getApplicationProtocolsMethod = sslParameters.getMethod(\"getApplicationProtocols\");\n-        getApplicationProtocolMethod =\n-            Class.forName(\"javax.net.ssl.SSLSocket\").getMethod(\"getApplicationProtocol\");\n+        getApplicationProtocolMethod = SSLSocket.class.getMethod(\"getApplicationProtocol\");\n         Class<?> sslSockets = Class.forName(\"android.net.ssl.SSLSockets\");\n         sslSocketsIsSupportedSocketMethod =\n             sslSockets.getMethod(\"isSupportedSocket\", SSLSocket.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzMDkyMg==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409830922", "bodyText": "Using the exception to skip the next line, but not expecting an exception on the line after that is subtle. Go ahead and add a comment? (The error message does help, but an extra comment is probably still worthwhile)", "author": "ejona86", "createdAt": "2020-04-16T20:32:42Z", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -152,21 +224,71 @@ public String negotiate(SSLSocket sslSocket, String hostname, List<Protocol> pro\n     /**\n      * Override {@link Platform}'s configureTlsExtensions for Android older than 5.0, since OkHttp\n      * (2.3+) only support such function for Android 5.0+.\n+     *\n+     * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n+     * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n+     * features. We attempt to use the public API where possible. Otherwise, fall back to use the\n+     * old reflective API.\n      */\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n-      // Enable SNI and session tickets.\n-      if (hostname != null) {\n-        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n-        SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n+      String[] protocolNames = protocolIds(protocols);\n+      SSLParameters sslParams = sslSocket.getSSLParameters();\n+      try {\n+        // Enable SNI and session tickets.\n+        if (hostname != null) {\n+          if (SSL_SOCKETS_IS_SUPPORTED_SOCKET != null\n+              && (boolean) SSL_SOCKETS_IS_SUPPORTED_SOCKET.invoke(null, sslSocket)) {\n+            SSL_SOCKETS_SET_USE_SESSION_TICKET.invoke(null, sslSocket, true);\n+          } else {\n+            SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+          }\n+          if (SET_SERVER_NAMES != null && SNI_HOST_NAME != null) {\n+            SET_SERVER_NAMES\n+                .invoke(sslParams, Collections.singletonList(SNI_HOST_NAME.newInstance(hostname)));\n+          } else {\n+            SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n+          }\n+        }\n+        boolean alpnEnabled = false;\n+        if (GET_APPLICATION_PROTOCOL != null) {\n+          try {\n+            GET_APPLICATION_PROTOCOL.invoke(sslSocket);", "originalCommit": "a5b71243933d1de7d537256a5162b9eca038d044", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1NDI3NA==", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409854274", "bodyText": "Added comment.", "author": "voidzcy", "createdAt": "2020-04-16T21:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzMDkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "cc435c07f7310032c327c77ffbb75a868d8430d9", "chunk": "diff --git a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\nindex c6fab4f64..2f1154d0b 100644\n--- a/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n+++ b/okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java\n\n@@ -254,6 +252,10 @@ class OkHttpProtocolNegotiator {\n         boolean alpnEnabled = false;\n         if (GET_APPLICATION_PROTOCOL != null) {\n           try {\n+            // If calling SSLSocket.getApplicationProtocol() throws UnsupportedOperationException\n+            // exception, the underlying provider does not implement operations for enabling\n+            // ALPN in the fashion of SSLParameters.setApplicationProtocols(). Fall back to\n+            // use old hidden methods.\n             GET_APPLICATION_PROTOCOL.invoke(sslSocket);\n             SET_APPLICATION_PROTOCOLS.invoke(sslParams, (Object) protocolNames);\n             alpnEnabled = true;\n"}}, {"oid": "03e81aeb8ea702ce9f34494d62fe99d6a4e794c1", "url": "https://github.com/grpc/grpc-java/commit/03e81aeb8ea702ce9f34494d62fe99d6a4e794c1", "message": "No need to load classes, they are already publicly available.", "committedDate": "2020-04-16T21:02:28Z", "type": "commit"}, {"oid": "cc435c07f7310032c327c77ffbb75a868d8430d9", "url": "https://github.com/grpc/grpc-java/commit/cc435c07f7310032c327c77ffbb75a868d8430d9", "message": "Add comment for checking if underlying provider supports enabling ALPN via setApplicationProtocols().", "committedDate": "2020-04-16T21:15:53Z", "type": "commit"}, {"oid": "54eff3616a9d3c2a7dad089580094f3530b3e7a4", "url": "https://github.com/grpc/grpc-java/commit/54eff3616a9d3c2a7dad089580094f3530b3e7a4", "message": "Reword comment.", "committedDate": "2020-04-16T21:19:34Z", "type": "commit"}]}