{"pr_number": 7500, "pr_title": "xds: create singleton XdsClient object (promote ClientXdsClient)", "pr_createdAt": "2020-10-09T09:40:57Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7500", "timeline": [{"oid": "74e7fdbdbcfb25aeba447651d5218be23c99689a", "url": "https://github.com/grpc/grpc-java/commit/74e7fdbdbcfb25aeba447651d5218be23c99689a", "message": "Default implementation of XdsClient.shutdown()", "committedDate": "2020-10-09T09:37:52Z", "type": "commit"}, {"oid": "5ce223f017ab025bf4ea9593705686ede4d0f54b", "url": "https://github.com/grpc/grpc-java/commit/5ce223f017ab025bf4ea9593705686ede4d0f54b", "message": "Add a new XdsClientPoolFactory interface that takes responsibility for reading bootstrap file and create the xDS channel.", "committedDate": "2020-10-09T09:38:54Z", "type": "commit"}, {"oid": "2576c60ed8182c295aa4e23697de2714af349078", "url": "https://github.com/grpc/grpc-java/commit/2576c60ed8182c295aa4e23697de2714af349078", "message": "Implement an XdsClient factory that creates singleton XdsClient object pool and XdsClient.", "committedDate": "2020-10-09T09:41:32Z", "type": "commit"}, {"oid": "2576c60ed8182c295aa4e23697de2714af349078", "url": "https://github.com/grpc/grpc-java/commit/2576c60ed8182c295aa4e23697de2714af349078", "message": "Implement an XdsClient factory that creates singleton XdsClient object pool and XdsClient.", "committedDate": "2020-10-09T09:41:32Z", "type": "forcePushed"}, {"oid": "a5a24af76f95652d6c5876f33145975fc5afc7a3", "url": "https://github.com/grpc/grpc-java/commit/a5a24af76f95652d6c5876f33145975fc5afc7a3", "message": "Merge branch 'master' of github.com:grpc/grpc-java into impl/singleton_xds_client_object", "committedDate": "2020-10-23T18:03:24Z", "type": "commit"}, {"oid": "5a91dffe6b3eef324c785a823f697b3bd2d38da1", "url": "https://github.com/grpc/grpc-java/commit/5a91dffe6b3eef324c785a823f697b3bd2d38da1", "message": "Migrate XdsNameResolver to use SharedXdsClientPoolProvider that creates singleton XdsClientPool/XdsClient.", "committedDate": "2020-10-23T18:31:07Z", "type": "commit"}, {"oid": "2305124d159ae67c82468242cc0694a899cf781b", "url": "https://github.com/grpc/grpc-java/commit/2305124d159ae67c82468242cc0694a899cf781b", "message": "Delete old XdsClinet ObjectPool implementation.", "committedDate": "2020-10-23T19:05:39Z", "type": "commit"}, {"oid": "7f37bc193d2f564af0168aa4bae804c75de71e01", "url": "https://github.com/grpc/grpc-java/commit/7f37bc193d2f564af0168aa4bae804c75de71e01", "message": "Merge branch 'master' of github.com:grpc/grpc-java into impl/singleton_xds_client_object", "committedDate": "2020-10-23T20:42:17Z", "type": "commit"}, {"oid": "998d69b3ae284850cf0804cab4bfa177bc279740", "url": "https://github.com/grpc/grpc-java/commit/998d69b3ae284850cf0804cab4bfa177bc279740", "message": "Promote ClientXdsClient.", "committedDate": "2020-10-23T21:15:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0NTIxMg==", "url": "https://github.com/grpc/grpc-java/pull/7500#discussion_r512145212", "bodyText": "This kind of test runs non-deterministically, not fix for unit tests. I don't think we have to cover concurrency in unit tests.", "author": "dapengzhang0", "createdAt": "2020-10-26T17:33:48Z", "path": "xds/src/test/java/io/grpc/xds/SharedXdsClientPoolProviderTest.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.xds.Bootstrapper.BootstrapInfo;\n+import io.grpc.xds.Bootstrapper.ChannelCreds;\n+import io.grpc.xds.Bootstrapper.ServerInfo;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.SharedXdsClientPoolProvider.RefCountedXdsClientObjectPool;\n+import io.grpc.xds.SharedXdsClientPoolProvider.RefCountedXdsClientObjectPool.XdsClientFactory;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import java.util.Collections;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentMatchers;\n+\n+/** Tests for {@link SharedXdsClientPoolProvider}. */\n+@RunWith(JUnit4.class)\n+public class SharedXdsClientPoolProviderTest {\n+\n+  private final XdsChannel channel = new XdsChannel(mock(ManagedChannel.class), false);\n+  private final Node node = Node.newBuilder().setId(\"SharedXdsClientPoolProviderTest\").build();\n+  private final AtomicReference<XdsClient> xdsClientRef = new AtomicReference<>();\n+  private final XdsClientFactory factory = new XdsClientFactory() {\n+    @Override\n+    XdsClient newXdsClient(XdsChannel channel, Node node, ScheduledExecutorService timeService) {\n+      XdsClient xdsClient = mock(XdsClient.class);\n+      xdsClientRef.set(xdsClient);\n+      return xdsClient;\n+    }\n+  };\n+\n+  @Test\n+  public void getXdsClientPool_sharedInstance() throws XdsInitializationException {\n+    ServerInfo server =\n+        new ServerInfo(\"trafficdirector.googleapis.com\",\n+            Collections.singletonList(new ChannelCreds(\"insecure\", null)),\n+            Collections.<String>emptyList());\n+    BootstrapInfo bootstrapInfo = new BootstrapInfo(Collections.singletonList(server), node, null);\n+    Bootstrapper bootstrapper = mock(Bootstrapper.class);\n+    when(bootstrapper.readBootstrap()).thenReturn(bootstrapInfo);\n+    XdsChannelFactory channelFactory = mock(XdsChannelFactory.class);\n+    when(channelFactory.createChannel(ArgumentMatchers.<ServerInfo>anyList())).thenReturn(channel);\n+\n+    SharedXdsClientPoolProvider provider =\n+        new SharedXdsClientPoolProvider(bootstrapper, channelFactory);\n+\n+    ObjectPool<XdsClient> xdsClientPool = provider.getXdsClientPool();\n+    verify(bootstrapper).readBootstrap();\n+    verify(channelFactory).createChannel(Collections.singletonList(server));\n+    assertThat(provider.getXdsClientPool()).isSameInstanceAs(xdsClientPool);\n+    verifyNoMoreInteractions(bootstrapper, channelFactory);\n+  }\n+\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  @Test\n+  public void getXdsClientPool_concurrent()\n+      throws InterruptedException, XdsInitializationException {\n+    int numThreads = 3;\n+    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n+    BootstrapInfo bootstrapInfo = new BootstrapInfo(\n+        Collections.singletonList(\n+            new ServerInfo(\"trafficdirector.googleapis.com\",\n+                Collections.singletonList(new ChannelCreds(\"insecure\", null)),\n+                Collections.<String>emptyList())),\n+        node, null);\n+    Bootstrapper bootstrapper = mock(Bootstrapper.class);\n+    when(bootstrapper.readBootstrap()).thenReturn(bootstrapInfo);\n+    XdsChannelFactory channelFactory = mock(XdsChannelFactory.class);\n+    when(channelFactory.createChannel(ArgumentMatchers.<ServerInfo>anyList())).thenReturn(channel);\n+\n+    final SharedXdsClientPoolProvider provider =\n+        new SharedXdsClientPoolProvider(bootstrapper, channelFactory);\n+\n+    final ObjectPool<XdsClient>[] xdsClientPools = new ObjectPool[numThreads];\n+    final CountDownLatch latch = new CountDownLatch(numThreads);\n+    class GetXdsClientPool implements Runnable {\n+      private final int index;\n+\n+      private GetXdsClientPool(int index) {\n+        this.index = index;\n+      }\n+\n+      @Override\n+      public void run() {\n+        try {\n+          xdsClientPools[index] = provider.getXdsClientPool();\n+        } catch (XdsInitializationException e) {\n+          throw new RuntimeException(e);\n+        }\n+        latch.countDown();\n+      }\n+    }\n+\n+    for (int i = 0; i < numThreads; i++) {\n+      executor.execute(new GetXdsClientPool(i));\n+    }\n+    latch.await(1L, TimeUnit.SECONDS);\n+    assertThat(xdsClientPools[0]).isNotNull();\n+    for (int i = 1; i < numThreads; i++) {\n+      assertThat(xdsClientPools[i]).isSameInstanceAs(xdsClientPools[0]);\n+    }\n+    verify(bootstrapper).readBootstrap();\n+    verify(channelFactory).createChannel(ArgumentMatchers.<ServerInfo>anyList());\n+    executor.shutdown();\n+  }\n+\n+  @Test\n+  public void refCountedXdsClientObjectPool_delayedCreation() {\n+    RefCountedXdsClientObjectPool xdsClientPool =\n+        new RefCountedXdsClientObjectPool(channel, node, factory);\n+    assertThat(xdsClientRef.get()).isNull();\n+    xdsClientPool.getObject();\n+    assertThat(xdsClientRef.get()).isNotNull();\n+  }\n+\n+  @Test\n+  public void refCountedXdsClientObjectPool_refCounted() {\n+    RefCountedXdsClientObjectPool xdsClientPool =\n+        new RefCountedXdsClientObjectPool(channel, node, factory);\n+\n+    // getObject once\n+    XdsClient xdsClient = xdsClientPool.getObject();\n+    assertThat(xdsClient).isNotNull();\n+    // getObject twice\n+    assertThat(xdsClientPool.getObject()).isSameInstanceAs(xdsClient);\n+    // returnObject once\n+    assertThat(xdsClientPool.returnObject(xdsClient)).isNull();\n+    verify(xdsClient, never()).shutdown();\n+    // returnObject twice\n+    assertThat(xdsClientPool.returnObject(xdsClient)).isNull();\n+    verify(xdsClient).shutdown();\n+  }\n+\n+  @Test\n+  public void refCountedXdsClientObjectPool_getObjectCreatesNewInstanceIfAlreadyShutdown() {\n+    RefCountedXdsClientObjectPool xdsClientPool =\n+        new RefCountedXdsClientObjectPool(channel, node, factory);\n+    XdsClient xdsClient1 = xdsClientPool.getObject();\n+    verify(xdsClient1, never()).shutdown();\n+    assertThat(xdsClientPool.returnObject(xdsClient1)).isNull();\n+    verify(xdsClient1).shutdown();\n+\n+    XdsClient xdsClient2 = xdsClientPool.getObject();\n+    assertThat(xdsClient2).isNotSameInstanceAs(xdsClient1);\n+  }\n+\n+  @Test\n+  public void refCountedXdsClientObjectPool_concurrentGet() throws InterruptedException {\n+    int numThreads = 3;\n+    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n+    final RefCountedXdsClientObjectPool xdsClientPool =\n+        new RefCountedXdsClientObjectPool(channel, node, factory);\n+    final XdsClient[] xdsClients = new XdsClient[numThreads];\n+    final CountDownLatch latch = new CountDownLatch(numThreads);\n+    class GetXdsClient implements Runnable {\n+      private final int index;\n+\n+      private GetXdsClient(int index) {\n+        this.index = index;\n+      }\n+\n+      @Override\n+      public void run() {\n+        xdsClients[index] = xdsClientPool.getObject();\n+        latch.countDown();\n+      }\n+    }\n+\n+    for (int i = 0; i < numThreads; i++) {\n+      executor.execute(new GetXdsClient(i));\n+    }\n+    latch.await(1L, TimeUnit.SECONDS);\n+    assertThat(xdsClientRef.get()).isNotNull();\n+    for (int i = 0; i < numThreads; i++) {\n+      assertThat(xdsClients[i]).isSameInstanceAs(xdsClientRef.get());\n+    }\n+    executor.shutdown();\n+  }\n+\n+  @Test\n+  public void refCountedXdsClientObjectPool_concurrentReturn() throws InterruptedException {", "originalCommit": "998d69b3ae284850cf0804cab4bfa177bc279740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0NzcyNQ==", "url": "https://github.com/grpc/grpc-java/pull/7500#discussion_r512147725", "bodyText": "Why is it not deterministic?", "author": "voidzcy", "createdAt": "2020-10-26T17:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0NTIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTY5MQ==", "url": "https://github.com/grpc/grpc-java/pull/7500#discussion_r512155691", "bodyText": "The thread pool execute multiple tasks concurrently, the execution order of concurrent runnable instructions is not deterministic.", "author": "dapengzhang0", "createdAt": "2020-10-26T17:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0NTIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1ODcwOA==", "url": "https://github.com/grpc/grpc-java/pull/7500#discussion_r512158708", "bodyText": "The thread pool execute multiple tasks concurrently, the execution order of concurrent runnable instructions is not deterministic.\n\nThat's indeed the purpose of testing it. It should still work correctly. Without concurrency, the unit tests will be trivial.", "author": "voidzcy", "createdAt": "2020-10-26T17:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0NTIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2ODYzOA==", "url": "https://github.com/grpc/grpc-java/pull/7500#discussion_r512168638", "bodyText": "That's why it's not necessary to test concurrency in unit tests. It won't deterministically catch a bug.", "author": "dapengzhang0", "createdAt": "2020-10-26T18:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0NTIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5MjQwMQ==", "url": "https://github.com/grpc/grpc-java/pull/7500#discussion_r513692401", "bodyText": "Alright, deleted those concurrency tests.", "author": "voidzcy", "createdAt": "2020-10-28T19:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0NTIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "0bfe9bf0d626246d84f53a3bbb3fcdbe39c54412", "chunk": "diff --git a/xds/src/test/java/io/grpc/xds/SharedXdsClientPoolProviderTest.java b/xds/src/test/java/io/grpc/xds/SharedXdsClientPoolProviderTest.java\nindex ef740df26..39a3a5b21 100644\n--- a/xds/src/test/java/io/grpc/xds/SharedXdsClientPoolProviderTest.java\n+++ b/xds/src/test/java/io/grpc/xds/SharedXdsClientPoolProviderTest.java\n\n@@ -34,11 +34,7 @@ import io.grpc.xds.SharedXdsClientPoolProvider.RefCountedXdsClientObjectPool;\n import io.grpc.xds.SharedXdsClientPoolProvider.RefCountedXdsClientObjectPool.XdsClientFactory;\n import io.grpc.xds.XdsClient.XdsChannel;\n import java.util.Collections;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"oid": "0bfe9bf0d626246d84f53a3bbb3fcdbe39c54412", "url": "https://github.com/grpc/grpc-java/commit/0bfe9bf0d626246d84f53a3bbb3fcdbe39c54412", "message": "Delete concurrency tests.", "committedDate": "2020-10-28T19:02:05Z", "type": "commit"}]}