{"pr_number": 7309, "pr_title": "xds: add CertProviderSslContextProvider support", "pr_createdAt": "2020-08-10T20:48:28Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7309", "timeline": [{"oid": "731f8fe3c369601c86389a4bbd64c5d0641bde1b", "url": "https://github.com/grpc/grpc-java/commit/731f8fe3c369601c86389a4bbd64c5d0641bde1b", "message": "xds: add CertProviderSslContextProvider support", "committedDate": "2020-08-10T20:44:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTE4MA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r468719180", "bodyText": "Are these two cases exclusive?", "author": "dapengzhang0", "createdAt": "2020-08-11T16:43:24Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.internal.sds.trust.SdsTrustManagerFactory;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Map;\n+\n+/** A client SslContext provider using CertificateProviderInstance to fetch secrets. */\n+final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {\n+\n+  private CertProviderClientSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CommonTlsContext.CertificateProviderInstance certInstance,\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      UpstreamTlsContext upstreamTlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(\n+        node,\n+        certProviders,\n+        certInstance,\n+        rootCertInstance,\n+        staticCertValidationContext,\n+        upstreamTlsContext,\n+        certificateProviderStore);\n+  }\n+\n+  @Override\n+  public SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContextdationContext)\n+      throws CertStoreException {\n+    SslContextBuilder sslContextBuilder =\n+        GrpcSslContexts.forClient()\n+            .trustManager(\n+                new SdsTrustManagerFactory(\n+                    savedTrustedRoots.toArray(new X509Certificate[0]),\n+                    certificateValidationContextdationContext));\n+    if (isMtls()) {\n+      sslContextBuilder.keyManager(savedKey, savedCertChain);\n+    }\n+    return sslContextBuilder;\n+  }\n+\n+  /** Creates CertProviderClientSslContextProvider. */\n+  static final class Factory {\n+    private static final Factory DEFAULT_INSTANCE =\n+        new Factory(CertificateProviderStore.getInstance());\n+    private final CertificateProviderStore certificateProviderStore;\n+\n+    Factory(CertificateProviderStore certificateProviderStore) {\n+      this.certificateProviderStore = certificateProviderStore;\n+    }\n+\n+    static Factory getInstance() {\n+      return DEFAULT_INSTANCE;\n+    }\n+\n+    CertProviderClientSslContextProvider getProvider(\n+        UpstreamTlsContext upstreamTlsContext,\n+        Node node,\n+        Map<String, CertificateProviderInfo> certProviders) {\n+      checkNotNull(upstreamTlsContext, \"upstreamTlsContext\");\n+      CommonTlsContext commonTlsContext = upstreamTlsContext.getCommonTlsContext();\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance = null;\n+      CertificateValidationContext staticCertValidationContext = null;\n+      if (commonTlsContext.hasCombinedValidationContext()) {\n+        CombinedCertificateValidationContext combinedValidationContext =\n+            commonTlsContext.getCombinedValidationContext();\n+        if (combinedValidationContext.hasValidationContextCertificateProviderInstance()) {\n+          rootCertInstance =\n+              combinedValidationContext.getValidationContextCertificateProviderInstance();\n+        }\n+        if (combinedValidationContext.hasDefaultValidationContext()) {\n+          staticCertValidationContext = combinedValidationContext.getDefaultValidationContext();\n+        }\n+      } else if (commonTlsContext.hasValidationContextCertificateProviderInstance()) {\n+        rootCertInstance = commonTlsContext.getValidationContextCertificateProviderInstance();\n+      } else if (commonTlsContext.hasValidationContext()) {\n+        staticCertValidationContext = commonTlsContext.getValidationContext();\n+      }", "originalCommit": "731f8fe3c369601c86389a4bbd64c5d0641bde1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczODU4MA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r468738580", "bodyText": "Yes, this is part of oneof as mentioned here", "author": "sanjaypujare", "createdAt": "2020-08-11T17:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "17c55a8881bc4a8359340b6cff8e7244a61858d6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\nindex 0069e88bd..ba34ee11b 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\n\n@@ -18,6 +18,7 @@ package io.grpc.xds.internal.certprovider;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.envoyproxy.envoy.config.core.v3.Node;\n import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczODI0Mg==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r468738242", "bodyText": "You can define an abstract getLogger()  in SslContextProvider, then you will not be using different loggers for different methods.", "author": "dapengzhang0", "createdAt": "2020-08-11T17:15:07Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());", "originalCommit": "731f8fe3c369601c86389a4bbd64c5d0641bde1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMjQ0OQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r469402449", "bodyText": "I understand the suggestion but is that pattern being used elsewhere in grpc/xds? With the current pattern any method will always use the logger of the class where the method is defined instead of the logger of the deepest subclass. Since the fully qualified method name in the log output is always that of the method's own class wouldn't it be useful to also have the logger of that class?", "author": "sanjaypujare", "createdAt": "2020-08-12T16:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczODI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwNDk0Ng==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r469404946", "bodyText": "Good point. Also the current pattern in this PR is the same as what is being used elsewhere.", "author": "dapengzhang0", "createdAt": "2020-08-12T16:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczODI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "75c96d313c11f02691649777fff830f8d2e0d79b", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\nindex 22f1f3468..193b1aeda 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n\n@@ -30,7 +30,6 @@ import java.security.cert.CertStoreException;\n import java.security.cert.CertificateException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0ODAzNg==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r468748036", "bodyText": "Seems callback always comes with an executor. Is it possible to add getExecutor() method to Callback instead of defining CallbackPair?", "author": "dapengzhang0", "createdAt": "2020-08-11T17:31:44Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n+\n+  protected final List<CallbackPair> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;\n+      makePendingCallbacks(sslContextCopy);\n+    } catch (CertificateException | IOException | CertStoreException e) {\n+      logger.log(Level.SEVERE, \"exception in updateSslContext\", e);\n+    }\n+  }\n+\n+  protected final void callPerformCallback(\n+      Callback callback, Executor executor, final SslContext sslContextCopy) {\n+    performCallback(\n+        new SslContextGetter() {\n+          @Override\n+          public SslContext get() {\n+            return sslContextCopy;\n+          }\n+        },\n+        callback,\n+        executor);\n+  }\n+\n+  @Override\n+  public final void addCallback(Callback callback, Executor executor) {\n+    checkNotNull(callback, \"callback\");\n+    checkNotNull(executor, \"executor\");\n+    // if there is a computed sslContext just send it\n+    SslContext sslContextCopy = sslContext;\n+    if (sslContextCopy != null) {\n+      callPerformCallback(callback, executor, sslContextCopy);\n+    } else {\n+      synchronized (pendingCallbacks) {\n+        pendingCallbacks.add(new CallbackPair(callback, executor));\n+      }\n+    }\n+  }\n+\n+  protected final void makePendingCallbacks(SslContext sslContextCopy) {\n+    synchronized (pendingCallbacks) {\n+      for (CallbackPair pair : pendingCallbacks) {\n+        callPerformCallback(pair.callback, pair.executor, sslContextCopy);\n+      }\n+      pendingCallbacks.clear();\n+    }\n+  }\n+\n+  /** Propagates error to all the callback receivers. */\n+  public final void onError(Status error) {\n+    synchronized (pendingCallbacks) {\n+      for (CallbackPair callbackPair : pendingCallbacks) {\n+        callbackPair.callback.onException(error.asException());\n+      }\n+      pendingCallbacks.clear();\n+    }\n+  }\n+\n+  protected static final class CallbackPair {\n+    private final Callback callback;", "originalCommit": "731f8fe3c369601c86389a4bbd64c5d0641bde1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5NTAzMw==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r469395033", "bodyText": "yes, good idea. Done", "author": "sanjaypujare", "createdAt": "2020-08-12T16:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0ODAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "75c96d313c11f02691649777fff830f8d2e0d79b", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\nindex 22f1f3468..193b1aeda 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n\n@@ -30,7 +30,6 @@ import java.security.cert.CertStoreException;\n import java.security.cert.CertificateException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n"}}, {"oid": "75c96d313c11f02691649777fff830f8d2e0d79b", "url": "https://github.com/grpc/grpc-java/commit/75c96d313c11f02691649777fff830f8d2e0d79b", "message": "address review comment1", "committedDate": "2020-08-12T16:39:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5NjA4NA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470496084", "bodyText": "nit: @VisibleForTesting.", "author": "voidzcy", "createdAt": "2020-08-14T08:49:31Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.internal.sds.trust.SdsTrustManagerFactory;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Map;\n+\n+/** A client SslContext provider using CertificateProviderInstance to fetch secrets. */\n+final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {\n+\n+  private CertProviderClientSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CommonTlsContext.CertificateProviderInstance certInstance,\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      UpstreamTlsContext upstreamTlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(\n+        node,\n+        certProviders,\n+        certInstance,\n+        rootCertInstance,\n+        staticCertValidationContext,\n+        upstreamTlsContext,\n+        certificateProviderStore);\n+  }\n+\n+  @Override\n+  public SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContextdationContext)\n+      throws CertStoreException {\n+    SslContextBuilder sslContextBuilder =\n+        GrpcSslContexts.forClient()\n+            .trustManager(\n+                new SdsTrustManagerFactory(\n+                    savedTrustedRoots.toArray(new X509Certificate[0]),\n+                    certificateValidationContextdationContext));\n+    if (isMtls()) {\n+      sslContextBuilder.keyManager(savedKey, savedCertChain);\n+    }\n+    return sslContextBuilder;\n+  }\n+\n+  /** Creates CertProviderClientSslContextProvider. */\n+  static final class Factory {\n+    private static final Factory DEFAULT_INSTANCE =\n+        new Factory(CertificateProviderStore.getInstance());\n+    private final CertificateProviderStore certificateProviderStore;\n+\n+    Factory(CertificateProviderStore certificateProviderStore) {", "originalCommit": "75c96d313c11f02691649777fff830f8d2e0d79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc3NjU3NA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470776574", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-08-14T18:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5NjA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "17c55a8881bc4a8359340b6cff8e7244a61858d6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\nindex 0069e88bd..ba34ee11b 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\n\n@@ -18,6 +18,7 @@ package io.grpc.xds.internal.certprovider;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.envoyproxy.envoy.config.core.v3.Node;\n import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470511495", "bodyText": "Why invoking callback here requires the lock while it doesn't in addCallback?", "author": "voidzcy", "createdAt": "2020-08-14T09:20:29Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;\n+      makePendingCallbacks(sslContextCopy);\n+    } catch (CertificateException | IOException | CertStoreException e) {\n+      logger.log(Level.SEVERE, \"exception in updateSslContext\", e);\n+    }\n+  }\n+\n+  protected final void callPerformCallback(\n+          Callback callback, final SslContext sslContextCopy) {\n+    performCallback(\n+        new SslContextGetter() {\n+          @Override\n+          public SslContext get() {\n+            return sslContextCopy;\n+          }\n+        },\n+        callback\n+    );\n+  }\n+\n+  @Override\n+  public final void addCallback(Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    // if there is a computed sslContext just send it\n+    SslContext sslContextCopy = sslContext;\n+    if (sslContextCopy != null) {\n+      callPerformCallback(callback, sslContextCopy);\n+    } else {\n+      synchronized (pendingCallbacks) {\n+        pendingCallbacks.add(callback);\n+      }\n+    }\n+  }\n+\n+  protected final void makePendingCallbacks(SslContext sslContextCopy) {\n+    synchronized (pendingCallbacks) {\n+      for (Callback callback : pendingCallbacks) {\n+        callPerformCallback(callback, sslContextCopy);", "originalCommit": "75c96d313c11f02691649777fff830f8d2e0d79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5NzkyMg==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470697922", "bodyText": "addCallback has on line 110:\n      synchronized (pendingCallbacks) {\n        pendingCallbacks.add(callback);\n      }\n\nThe if clause on line 107 does not require the lock", "author": "sanjaypujare", "createdAt": "2020-08-14T15:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0OTk1NQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470749955", "bodyText": "The if clause on line 107 does not require the lock\n\nThat is what I am concerning. You are holding the lock to perform the callback here. But in addCallback it does not. This means at least one case is wrong. If invoking the callback requires synchronization (that's very suspicious), the one in addCallback also needs to do so. If the callback does not need synchronization, a concurrent list here is sufficient.", "author": "voidzcy", "createdAt": "2020-08-14T17:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1NDkzMA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470754930", "bodyText": "@voidzcy the lock is for the pendingCallbacks list only and not for the actual callback. When addCallback is called and there is an sslContext available then callback is called with that sslContext (as sslContextCopy). Otherwise addCallback and makePendingCallbacks have to synchronize on pendingCallbacks", "author": "sanjaypujare", "createdAt": "2020-08-14T17:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MDAwNw==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470760007", "bodyText": "Then you don't need to hold the lock while invoking the callback, just make pendingCallbacks a concurrent list.", "author": "voidzcy", "createdAt": "2020-08-14T17:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwNTA2OA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470805068", "bodyText": "That's a good point but I don't know if it's worth making the change/improvement. The list is unlikely to be longer than 1 or 2 elements (after the callbacks it is cleared) and the callbacks are into our own code (never user provided callbacks). Also by \"concurrent list\" did you mean CopyOnWriteArrayList?", "author": "sanjaypujare", "createdAt": "2020-08-14T18:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxNDE0Mw==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470814143", "bodyText": "I was just being abstract of saying \"concurrent list\". But, realistically CopyOnWriteArrayList is an overkill. I suspect ArrayBlockingQueue would be enough.", "author": "voidzcy", "createdAt": "2020-08-14T19:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyMDk0Mg==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470820942", "bodyText": "I addressed this comment by making a copy of the list for invoking the callback so there is no lock held when the callbacks are made. Using ArrayBlockingQueue wouldn't work here BTW.", "author": "sanjaypujare", "createdAt": "2020-08-14T19:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjA4MA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470916080", "bodyText": "Why a blocking queue does not work? I don't see any get/insert-to-middle operations needed.", "author": "voidzcy", "createdAt": "2020-08-15T00:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyMTUxMg==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470921512", "bodyText": "The pendingCallbacks is only needed to hold the \"pending callbacks\" until an sslContext is built and appropriate locks should be in place to ensure there is no race between checking/updating of pendingCallbacks and sslContext (like the latest fix made).\nI don't see the need for either blocking or queue aspect of the blocking queue.", "author": "sanjaypujare", "createdAt": "2020-08-15T01:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNTkzOQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470925939", "bodyText": "I mean using a blocking data structure is way better than your current approach (aka, acquire the lock, make a copy, etc). It's more efficient and elegant in terms of code maintainability.", "author": "voidzcy", "createdAt": "2020-08-15T02:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "17c55a8881bc4a8359340b6cff8e7244a61858d6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\nindex 193b1aeda..aa2dd3a3a 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n\n@@ -30,15 +30,11 @@ import java.security.cert.CertStoreException;\n import java.security.cert.CertificateException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n import javax.annotation.Nullable;\n \n /** Base class for dynamic {@link SslContextProvider}s. */\n public abstract class DynamicSslContextProvider extends SslContextProvider {\n \n-  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n-\n   protected final List<Callback> pendingCallbacks = new ArrayList<>();\n   @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n   @Nullable protected SslContext sslContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMzg5Ng==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470513896", "bodyText": "The exception handling doesn't seem to be right, exceptions just go into a black hole.", "author": "voidzcy", "createdAt": "2020-08-14T09:25:24Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;\n+      makePendingCallbacks(sslContextCopy);\n+    } catch (CertificateException | IOException | CertStoreException e) {\n+      logger.log(Level.SEVERE, \"exception in updateSslContext\", e);", "originalCommit": "75c96d313c11f02691649777fff830f8d2e0d79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc3NjcwOA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470776708", "bodyText": "good catch. Fixed.", "author": "sanjaypujare", "createdAt": "2020-08-14T18:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMzg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "17c55a8881bc4a8359340b6cff8e7244a61858d6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\nindex 193b1aeda..aa2dd3a3a 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n\n@@ -30,15 +30,11 @@ import java.security.cert.CertStoreException;\n import java.security.cert.CertificateException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n import javax.annotation.Nullable;\n \n /** Base class for dynamic {@link SslContextProvider}s. */\n public abstract class DynamicSslContextProvider extends SslContextProvider {\n \n-  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n-\n   protected final List<Callback> pendingCallbacks = new ArrayList<>();\n   @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n   @Nullable protected SslContext sslContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxNzk3NA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470517974", "bodyText": "Throwing such an exception here seem to be too late, and it's somewhat misleading. Callers of updateCertificate() and updateTrustedRoots() will never be the cause of this class being in invalid state. Instead, you should perform the check in the constructor.", "author": "voidzcy", "createdAt": "2020-08-14T09:33:23Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderSslContextProvider.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.grpc.xds.internal.sds.DynamicSslContextProvider;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/** Base class for {@link CertProviderClientSslContextProvider}. */\n+abstract class CertProviderSslContextProvider extends DynamicSslContextProvider implements\n+    CertificateProvider.Watcher {\n+\n+  @Nullable private final CertificateProviderStore.Handle certHandle;\n+  @Nullable private final CertificateProviderStore.Handle rootCertHandle;\n+  @Nullable private final CertificateProviderInstance certInstance;\n+  @Nullable private final CertificateProviderInstance rootCertInstance;\n+  @Nullable protected PrivateKey savedKey;\n+  @Nullable protected List<X509Certificate> savedCertChain;\n+  @Nullable protected List<X509Certificate> savedTrustedRoots;\n+\n+  protected CertProviderSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CertificateProviderInstance certInstance,\n+      CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      BaseTlsContext tlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(tlsContext, staticCertValidationContext);\n+    this.certInstance = certInstance;\n+    this.rootCertInstance = rootCertInstance;\n+    String certInstanceName = null;\n+    if (certInstance != null && certInstance.isInitialized()) {\n+      certInstanceName = certInstance.getInstanceName();\n+      CertificateProviderInfo certProviderInstanceConfig =\n+          getCertProviderConfig(certProviders, certInstanceName);\n+      certHandle =\n+          certificateProviderStore.createOrGetProvider(\n+              certInstance.getCertificateName(),\n+              certProviderInstanceConfig.getPluginName(),\n+              certProviderInstanceConfig.getConfig(),\n+              this,\n+              true);\n+    } else {\n+      certHandle = null;\n+    }\n+    if (rootCertInstance != null\n+        && rootCertInstance.isInitialized()\n+        && !rootCertInstance.getInstanceName().equals(certInstanceName)) {\n+      CertificateProviderInfo certProviderInstanceConfig =\n+          getCertProviderConfig(certProviders, rootCertInstance.getInstanceName());\n+      rootCertHandle =\n+          certificateProviderStore.createOrGetProvider(\n+              rootCertInstance.getCertificateName(),\n+              certProviderInstanceConfig.getPluginName(),\n+              certProviderInstanceConfig.getConfig(),\n+              this,\n+              true);\n+    } else {\n+      rootCertHandle = null;\n+    }\n+  }\n+\n+  private CertificateProviderInfo getCertProviderConfig(\n+      Map<String, CertificateProviderInfo> certProviders, String pluginInstanceName) {\n+    return certProviders.get(pluginInstanceName);\n+  }\n+\n+  @Override\n+  public final void updateCertificate(PrivateKey key, List<X509Certificate> certChain) {\n+    savedKey = key;\n+    savedCertChain = certChain;\n+    updateSslContextWhenReady();\n+  }\n+\n+  @Override\n+  public final void updateTrustedRoots(List<X509Certificate> trustedRoots) {\n+    savedTrustedRoots = trustedRoots;\n+    updateSslContextWhenReady();\n+  }\n+\n+  private void updateSslContextWhenReady() {\n+    if (isMtls()) {\n+      if (savedKey != null && savedTrustedRoots != null) {\n+        updateSslContext();\n+        clearKeysAndCerts();\n+      }\n+    } else if (isClientSideTls()) {\n+      if (savedTrustedRoots != null) {\n+        updateSslContext();\n+        clearKeysAndCerts();\n+      }\n+    } else if (isServerSideTls()) {\n+      if (savedKey != null) {\n+        updateSslContext();\n+        clearKeysAndCerts();\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Config is neither mTLS nor TLS!\");", "originalCommit": "75c96d313c11f02691649777fff830f8d2e0d79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc4OTc5MA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470789790", "bodyText": "good point. fixed", "author": "sanjaypujare", "createdAt": "2020-08-14T18:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxNzk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "eb84bcd0a54ec3530cd601c801b17ebcc525b693", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderSslContextProvider.java\nindex db249b63a..5f03e3bec 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderSslContextProvider.java\n\n@@ -117,8 +117,6 @@ abstract class CertProviderSslContextProvider extends DynamicSslContextProvider\n         updateSslContext();\n         clearKeysAndCerts();\n       }\n-    } else {\n-      throw new IllegalStateException(\"Config is neither mTLS nor TLS!\");\n     }\n   }\n \n"}}, {"oid": "17c55a8881bc4a8359340b6cff8e7244a61858d6", "url": "https://github.com/grpc/grpc-java/commit/17c55a8881bc4a8359340b6cff8e7244a61858d6", "message": "address review comment: make sure exception is propagated to the watchers", "committedDate": "2020-08-14T18:05:29Z", "type": "commit"}, {"oid": "eb84bcd0a54ec3530cd601c801b17ebcc525b693", "url": "https://github.com/grpc/grpc-java/commit/eb84bcd0a54ec3530cd601c801b17ebcc525b693", "message": "address review comment: move checks to constructor from update* methods", "committedDate": "2020-08-14T18:24:38Z", "type": "commit"}, {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f", "url": "https://github.com/grpc/grpc-java/commit/2cf81bc5072fde5062d1738c2a2f336f602b389f", "message": "address review comment: make copy of the list to avoid making callbacks during a lock", "committedDate": "2020-08-14T19:12:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDkzNg==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470890936", "bodyText": "Can savedKey be null? I think it's not required for client ssl context builder. Just not sure if it's true for MTLS.", "author": "dapengzhang0", "createdAt": "2020-08-14T22:29:26Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.internal.sds.trust.SdsTrustManagerFactory;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Map;\n+\n+/** A client SslContext provider using CertificateProviderInstance to fetch secrets. */\n+final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {\n+\n+  private CertProviderClientSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CommonTlsContext.CertificateProviderInstance certInstance,\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      UpstreamTlsContext upstreamTlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(\n+        node,\n+        certProviders,\n+        certInstance,\n+        checkNotNull(rootCertInstance, \"Client SSL requires rootCertInstance\"),\n+        staticCertValidationContext,\n+        upstreamTlsContext,\n+        certificateProviderStore);\n+  }\n+\n+  @Override\n+  public SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContextdationContext)\n+      throws CertStoreException {\n+    SslContextBuilder sslContextBuilder =\n+        GrpcSslContexts.forClient()\n+            .trustManager(\n+                new SdsTrustManagerFactory(\n+                    savedTrustedRoots.toArray(new X509Certificate[0]),\n+                    certificateValidationContextdationContext));\n+    if (isMtls()) {\n+      sslContextBuilder.keyManager(savedKey, savedCertChain);", "originalCommit": "2cf81bc5072fde5062d1738c2a2f336f602b389f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNjEwMA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470906100", "bodyText": "It can be proved that savedKey can't be null at this point:\n\nCertProviderSslContextProvider.updateSslContextWhenReady is where it all starts. And in case of isMtls() and savedKey != null it calls\nDynamicSslContextProvider.updateSslContext which calls CertProviderClientSslContextProvider.getSslContextBuilder  - this code.\n\nIn case this SslContextProvider is set up for mTLS (as dictated by xDS) then the SslContextBuilder is supplied with savedKey when available.", "author": "sanjaypujare", "createdAt": "2020-08-14T23:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDgxNA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470914814", "bodyText": "So this method is only called by DynamicSslContextProvider.updateSslContext not at will (which should be mention in javadoc), so the signature here should be protected rather than public.", "author": "dapengzhang0", "createdAt": "2020-08-15T00:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNTUwMQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470915501", "bodyText": "Correct. In DynamicSslContextProvider it is defined as\n protected abstract SslContextBuilder getSslContextBuilder\n\nBut over here the visibility was increased to public (by mistake). I'll fix that.", "author": "sanjaypujare", "createdAt": "2020-08-15T00:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNTk4Mw==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470915983", "bodyText": "Changed to protected final like all the other subclasses.", "author": "sanjaypujare", "createdAt": "2020-08-15T00:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "19465bfa3c2ff27208dc6c78c2d6ecef361231b4", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\nindex 66ae469d0..562f27431 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\n\n@@ -54,7 +54,7 @@ final class CertProviderClientSslContextProvider extends CertProviderSslContextP\n   }\n \n   @Override\n-  public SslContextBuilder getSslContextBuilder(\n+  protected final SslContextBuilder getSslContextBuilder(\n           CertificateValidationContext certificateValidationContextdationContext)\n       throws CertStoreException {\n     SslContextBuilder sslContextBuilder =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MzUxOQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470893519", "bodyText": "savedKey and savedCertChain are very likely null all the time, because even they are set by updateCertificate(),  updateCertificate() may  immediately and automatically trigger clearKeysAndCerts().", "author": "dapengzhang0", "createdAt": "2020-08-14T22:39:43Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.internal.sds.trust.SdsTrustManagerFactory;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Map;\n+\n+/** A client SslContext provider using CertificateProviderInstance to fetch secrets. */\n+final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {\n+\n+  private CertProviderClientSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CommonTlsContext.CertificateProviderInstance certInstance,\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      UpstreamTlsContext upstreamTlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(\n+        node,\n+        certProviders,\n+        certInstance,\n+        checkNotNull(rootCertInstance, \"Client SSL requires rootCertInstance\"),\n+        staticCertValidationContext,\n+        upstreamTlsContext,\n+        certificateProviderStore);\n+  }\n+\n+  @Override\n+  public SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContextdationContext)\n+      throws CertStoreException {\n+    SslContextBuilder sslContextBuilder =\n+        GrpcSslContexts.forClient()\n+            .trustManager(\n+                new SdsTrustManagerFactory(\n+                    savedTrustedRoots.toArray(new X509Certificate[0]),\n+                    certificateValidationContextdationContext));\n+    if (isMtls()) {\n+      sslContextBuilder.keyManager(savedKey, savedCertChain);", "originalCommit": "2cf81bc5072fde5062d1738c2a2f336f602b389f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwOTc0MA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470909740", "bodyText": "Note that the saved* values are used to generate the sslContext and after that all the saved* fields are set to null. So you are right most of the time the saved* values are null but sslContext will be non-null (if it has been generated once) which is what is needed by all the consumers of this class.\nThe reason for setting the saved* values to null is because of the separate calls updateCertificate and updateTrustedRoots from the CertificateProvider. I can build an SslContext for a given state (mTLS, clientTls or serverTls) only when all the values are in. Without assuming any order for updateCertificate and updateTrustedRoots calls the best (and only?) way to do this is to check for the required saved* values to be non-null and setting them to null (after building the sslContext) for the next cycle of updateCertificate and updateTrustedRoots.", "author": "sanjaypujare", "createdAt": "2020-08-14T23:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MzUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "19465bfa3c2ff27208dc6c78c2d6ecef361231b4", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\nindex 66ae469d0..562f27431 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java\n\n@@ -54,7 +54,7 @@ final class CertProviderClientSslContextProvider extends CertProviderSslContextP\n   }\n \n   @Override\n-  public SslContextBuilder getSslContextBuilder(\n+  protected final SslContextBuilder getSslContextBuilder(\n           CertificateValidationContext certificateValidationContextdationContext)\n       throws CertStoreException {\n     SslContextBuilder sslContextBuilder =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzQ5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470897495", "bodyText": "How is sslContext synchronized between updateSslContext () and addCallback()? Are updateSslContext () and addCallback() run in the same thread or they are executed sequentially?", "author": "dapengzhang0", "createdAt": "2020-08-14T22:57:41Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;", "originalCommit": "2cf81bc5072fde5062d1738c2a2f336f602b389f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMjYwOA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470912608", "bodyText": "No, they don't have to be sequential or from the same thread. I guess I could have used AtomicReference because all I need is atomic accesses to sslContext but instead I used sslContextCopy (local copy) in both updateSslContext () and addCallback() like this:\n    SslContext sslContextCopy = sslContext;\n   ... use sslContextCopy from here...\n\nbecause reference assignments are atomic.", "author": "sanjaypujare", "createdAt": "2020-08-15T00:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjI5Nw==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470916297", "bodyText": "There could still be data race:\n(1) addCallback() checks sslContext, and it's null.\n(2) then updateSslContext () set sslContext and drains penddingCallbacks\n(3) then addCallback() adds a callback to penddingCallbacks and it's never performed.", "author": "dapengzhang0", "createdAt": "2020-08-15T00:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxODM5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470918395", "bodyText": "Hmmm. Good catch. Basically the updates (and checks) to sslContext and pendingCallbacks should be combined as one atomic operation. I'll use pendingCallbacks as the lock. e.g. in addCallback:\nsynchronized (pendingCallbacks) {\n    if (sslContext != null) {\n      callPerformCallback(callback, executor, sslContext);\n    } else {\n      pendingCallbacks.add(new CallbackPair(callback, executor));\n    }\n}\n\nSimilarly in updateSslContext", "author": "sanjaypujare", "createdAt": "2020-08-15T01:03:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "89145068c4076679907640f8dcd72460650a1f5d", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\nindex 0310a3ff1..56762b8b9 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n\n@@ -55,7 +55,7 @@ public abstract class DynamicSslContextProvider extends SslContextProvider {\n \n   /** Gets a server or client side SslContextBuilder. */\n   protected abstract SslContextBuilder getSslContextBuilder(\n-          CertificateValidationContext certificateValidationContext)\n+      CertificateValidationContext certificateValidationContext)\n       throws CertificateException, IOException, CertStoreException;\n \n   // this gets called only when requested secrets are ready...\n"}}, {"oid": "19465bfa3c2ff27208dc6c78c2d6ecef361231b4", "url": "https://github.com/grpc/grpc-java/commit/19465bfa3c2ff27208dc6c78c2d6ecef361231b4", "message": "address review comment: make method protected final", "committedDate": "2020-08-15T00:41:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNTUzOQ==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470915539", "bodyText": "nit: s/localexecutor/localExecutor/g", "author": "voidzcy", "createdAt": "2020-08-15T00:38:32Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java", "diffHunk": "@@ -100,14 +106,14 @@ public UpstreamTlsContext getUpstreamTlsContext() {\n    * Registers a callback on the given executor. The callback will run when SslContext becomes\n    * available or immediately if the result is already available.\n    */\n-  public abstract void addCallback(Callback callback, Executor executor);\n+  public abstract void addCallback(Callback callback);\n \n-  final void performCallback(\n-      final SslContextGetter sslContextGetter, final Callback callback, Executor executor) {\n+  protected final void performCallback(\n+          final SslContextGetter sslContextGetter, final Callback callback) {\n     checkNotNull(sslContextGetter, \"sslContextGetter\");\n     checkNotNull(callback, \"callback\");\n-    checkNotNull(executor, \"executor\");\n-    executor.execute(\n+    Executor localexecutor = callback.executor;", "originalCommit": "2cf81bc5072fde5062d1738c2a2f336f602b389f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjY1Mg==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470916652", "bodyText": "good catch, removed the var altogether", "author": "sanjaypujare", "createdAt": "2020-08-15T00:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNTUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "150efb5b58c4483654a6d33a81cbb7f0b59c1544", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java\nindex 1708b6f4a..08e93d3a4 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java\n\n@@ -112,8 +112,7 @@ public abstract class SslContextProvider implements Closeable {\n           final SslContextGetter sslContextGetter, final Callback callback) {\n     checkNotNull(sslContextGetter, \"sslContextGetter\");\n     checkNotNull(callback, \"callback\");\n-    Executor localexecutor = callback.executor;\n-    localexecutor.execute(\n+    callback.executor.execute(\n         new Runnable() {\n           @Override\n           public void run() {\n"}}, {"oid": "150efb5b58c4483654a6d33a81cbb7f0b59c1544", "url": "https://github.com/grpc/grpc-java/commit/150efb5b58c4483654a6d33a81cbb7f0b59c1544", "message": "address review comment: remove unnecessary local var", "committedDate": "2020-08-15T00:47:05Z", "type": "commit"}, {"oid": "89145068c4076679907640f8dcd72460650a1f5d", "url": "https://github.com/grpc/grpc-java/commit/89145068c4076679907640f8dcd72460650a1f5d", "message": "address review comment: fix race condition by using a proper lock", "committedDate": "2020-08-15T01:26:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyMjMwMg==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470922302", "bodyText": "This method still needs synchronized (pendingCallbacks) because onError() is calling it, and need be synchronized with addCallback().", "author": "dapengzhang0", "createdAt": "2020-08-15T01:39:03Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+      CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      List<Callback> pendingCallbacksCopy = null;\n+      SslContext sslContextCopy = null;\n+      synchronized (pendingCallbacks) {\n+        sslContext = sslContextBuilder.build();\n+        sslContextCopy = sslContext;\n+        pendingCallbacksCopy = clonePendingCallbacksAndClear();\n+      }\n+      makePendingCallbacks(sslContextCopy, pendingCallbacksCopy);\n+    } catch (Exception e) {\n+      onError(Status.fromThrowable(e));\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  protected final void callPerformCallback(\n+          Callback callback, final SslContext sslContextCopy) {\n+    performCallback(\n+        new SslContextGetter() {\n+          @Override\n+          public SslContext get() {\n+            return sslContextCopy;\n+          }\n+        },\n+        callback\n+    );\n+  }\n+\n+  @Override\n+  public final void addCallback(Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    // if there is a computed sslContext just send it\n+    SslContext sslContextCopy = null;\n+    synchronized (pendingCallbacks) {\n+      if (sslContext != null) {\n+        sslContextCopy = sslContext;\n+      } else {\n+        pendingCallbacks.add(callback);\n+      }\n+    }\n+    if (sslContextCopy != null) {\n+      callPerformCallback(callback, sslContextCopy);\n+    }\n+  }\n+\n+  private final void makePendingCallbacks(\n+      SslContext sslContextCopy, List<Callback> pendingCallbacksCopy) {\n+    for (Callback callback : pendingCallbacksCopy) {\n+      callPerformCallback(callback, sslContextCopy);\n+    }\n+  }\n+\n+  /** Propagates error to all the callback receivers. */\n+  public final void onError(Status error) {\n+    for (Callback callback : clonePendingCallbacksAndClear()) {\n+      callback.onException(error.asException());\n+    }\n+  }\n+\n+  private List<Callback> clonePendingCallbacksAndClear() {\n+    List<Callback> copy = ImmutableList.copyOf(pendingCallbacks);", "originalCommit": "89145068c4076679907640f8dcd72460650a1f5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxODAwNA==", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r471218004", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-08-17T03:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyMjMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "73edb794137b038b68b5a13aaed5a4cb0251e9f8", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\nindex 56762b8b9..7f40b822f 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java\n\n@@ -134,8 +134,10 @@ public abstract class DynamicSslContextProvider extends SslContextProvider {\n   }\n \n   private List<Callback> clonePendingCallbacksAndClear() {\n-    List<Callback> copy = ImmutableList.copyOf(pendingCallbacks);\n-    pendingCallbacks.clear();\n-    return copy;\n+    synchronized (pendingCallbacks) {\n+      List<Callback> copy = ImmutableList.copyOf(pendingCallbacks);\n+      pendingCallbacks.clear();\n+      return copy;\n+    }\n   }\n }\n"}}, {"oid": "73edb794137b038b68b5a13aaed5a4cb0251e9f8", "url": "https://github.com/grpc/grpc-java/commit/73edb794137b038b68b5a13aaed5a4cb0251e9f8", "message": "address review comment: synchronize on pendingCallbacks", "committedDate": "2020-08-17T03:49:04Z", "type": "commit"}]}