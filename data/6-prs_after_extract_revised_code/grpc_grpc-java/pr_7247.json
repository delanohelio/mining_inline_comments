{"pr_number": 7247, "pr_title": "xds: first part of MeshCaCertificateProvider", "pr_createdAt": "2020-07-24T02:32:28Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7247", "timeline": [{"oid": "d3bd6e36332278d2253f701c6981da619cb4a9f5", "url": "https://github.com/grpc/grpc-java/commit/d3bd6e36332278d2253f701c6981da619cb4a9f5", "message": "xds: first part of MeshCaCertificateProvider", "committedDate": "2020-07-24T02:25:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxNzA1Ng==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461717056", "bodyText": "MeshCaChannelFactory to be more specific?", "author": "dapengzhang0", "createdAt": "2020-07-28T16:33:27Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for the Google Mesh CA. */\n+final class MeshCaCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(MeshCaCertificateProvider.class.getName());\n+\n+  protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n+      String meshCaUrl, String zone, long validitySeconds,\n+      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n+      int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n+    super(watcher, notifyCertUpdates);\n+  }\n+\n+  @Override\n+  public void start() {\n+    // TODO implement\n+  }\n+\n+  @Override\n+  public void close() {\n+    // TODO implement\n+  }\n+\n+  /** Factory for creating channels to MeshCA sever. */\n+  abstract static class ChannelFactory {", "originalCommit": "d3bd6e36332278d2253f701c6981da619cb4a9f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzOTY0MQ==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461839641", "bodyText": "This is scoped inside MeshCaCertificateProvider so MeshCaCertificateProvider.ChannelFactory should be sufficient - I thought. But I understand where you are coming from. I might rename it as per your suggestion", "author": "sanjaypujare", "createdAt": "2020-07-28T19:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxNzA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bf9e4483f528417eab7f4fc7a585c2c4198af837", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\nindex 3f0c50127..a4d22faa6 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\n\n@@ -32,7 +32,7 @@ final class MeshCaCertificateProvider extends CertificateProvider {\n \n   protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n       String meshCaUrl, String zone, long validitySeconds,\n-      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      int keySize, String alg, String signatureAlg, MeshCaChannelFactory meshCaChannelFactory,\n       BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n       int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n     super(watcher, notifyCertUpdates);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxOTQyMQ==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461719421", "bodyText": "This channel just use the default credential?", "author": "dapengzhang0", "createdAt": "2020-07-28T16:37:21Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for the Google Mesh CA. */\n+final class MeshCaCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(MeshCaCertificateProvider.class.getName());\n+\n+  protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n+      String meshCaUrl, String zone, long validitySeconds,\n+      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n+      int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n+    super(watcher, notifyCertUpdates);\n+  }\n+\n+  @Override\n+  public void start() {\n+    // TODO implement\n+  }\n+\n+  @Override\n+  public void close() {\n+    // TODO implement\n+  }\n+\n+  /** Factory for creating channels to MeshCA sever. */\n+  abstract static class ChannelFactory {\n+\n+    private static final ChannelFactory DEFAULT_INSTANCE =\n+        new ChannelFactory() {\n+\n+          /** Creates a channel to the URL in the given list. */\n+          @Override\n+          ManagedChannel createChannel(String serverUri) {\n+            checkArgument(serverUri != null && !serverUri.isEmpty(), \"serverUri is null/empty!\");\n+            logger.log(Level.INFO, \"Creating channel to {0}\", serverUri);\n+\n+            ManagedChannelBuilder<?> channelBuilder = ManagedChannelBuilder.forTarget(serverUri);", "originalCommit": "d3bd6e36332278d2253f701c6981da619cb4a9f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg0MTU5MA==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461841590", "bodyText": "Yes, the default creds works - TLS connection to the public URL with a CA-signed cert. But for call creds I am going to add the code to use the STS creds in the next PR.", "author": "sanjaypujare", "createdAt": "2020-07-28T20:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxOTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "bf9e4483f528417eab7f4fc7a585c2c4198af837", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\nindex 3f0c50127..a4d22faa6 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\n\n@@ -32,7 +32,7 @@ final class MeshCaCertificateProvider extends CertificateProvider {\n \n   protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n       String meshCaUrl, String zone, long validitySeconds,\n-      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      int keySize, String alg, String signatureAlg, MeshCaChannelFactory meshCaChannelFactory,\n       BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n       int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n     super(watcher, notifyCertUpdates);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyMjI2Mw==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461722263", "bodyText": "There are too many arguments, so what about using Builder instead of Factory?", "author": "dapengzhang0", "createdAt": "2020-07-28T16:42:04Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for the Google Mesh CA. */\n+final class MeshCaCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(MeshCaCertificateProvider.class.getName());\n+\n+  protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n+      String meshCaUrl, String zone, long validitySeconds,\n+      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n+      int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n+    super(watcher, notifyCertUpdates);\n+  }\n+\n+  @Override\n+  public void start() {\n+    // TODO implement\n+  }\n+\n+  @Override\n+  public void close() {\n+    // TODO implement\n+  }\n+\n+  /** Factory for creating channels to MeshCA sever. */\n+  abstract static class ChannelFactory {\n+\n+    private static final ChannelFactory DEFAULT_INSTANCE =\n+        new ChannelFactory() {\n+\n+          /** Creates a channel to the URL in the given list. */\n+          @Override\n+          ManagedChannel createChannel(String serverUri) {\n+            checkArgument(serverUri != null && !serverUri.isEmpty(), \"serverUri is null/empty!\");\n+            logger.log(Level.INFO, \"Creating channel to {0}\", serverUri);\n+\n+            ManagedChannelBuilder<?> channelBuilder = ManagedChannelBuilder.forTarget(serverUri);\n+            return channelBuilder.keepAliveTime(1, TimeUnit.MINUTES).build();\n+          }\n+        };\n+\n+    static ChannelFactory getInstance() {\n+      return DEFAULT_INSTANCE;\n+    }\n+\n+    /**\n+     * Creates a channel to the server.\n+     */\n+    abstract ManagedChannel createChannel(String serverUri);\n+  }\n+\n+  /** Factory for creating channels to MeshCA sever. */\n+  abstract static class Factory {\n+    private static final Factory DEFAULT_INSTANCE =\n+        new Factory() {\n+\n+          @Override\n+          MeshCaCertificateProvider create(", "originalCommit": "d3bd6e36332278d2253f701c6981da619cb4a9f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg0NDg3Mw==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461844873", "bodyText": "yes, I was thinking this might come up :-) So 2 things:\n\nthis is not exposed externally and is only (to be) consumed by MeshCaCertificateProviderProvider to create instances\nand of course the unit tests mock the Factory to be able to test the classes independently.\n\nA Builder can also be used with mocks but is more effort than is worth because of the 1st point above. WDYT?", "author": "sanjaypujare", "createdAt": "2020-07-28T20:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyMjI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bf9e4483f528417eab7f4fc7a585c2c4198af837", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\nindex 3f0c50127..a4d22faa6 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java\n\n@@ -32,7 +32,7 @@ final class MeshCaCertificateProvider extends CertificateProvider {\n \n   protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n       String meshCaUrl, String zone, long validitySeconds,\n-      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      int keySize, String alg, String signatureAlg, MeshCaChannelFactory meshCaChannelFactory,\n       BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n       int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n     super(watcher, notifyCertUpdates);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NTg3OA==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461765878", "bodyText": "private?", "author": "dapengzhang0", "createdAt": "2020-07-28T17:53:34Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.xds.internal.sts.StsCredentials;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Provider of {@link CertificateProvider}s. Implemented by the implementer of the plugin. We may\n+ * move this out of the internal package and make this an official API in the future.\n+ */\n+final class MeshCaCertificateProviderProvider implements CertificateProviderProvider {\n+\n+  private static final Logger logger = Logger\n+      .getLogger(MeshCaCertificateProviderProvider.class.getName());\n+\n+  private static final String MESHCA_URL_KEY = \"meshCaUrl\";\n+  private static final String RPC_TIMEOUT_SECONDS_KEY = \"rpcTimeoutSeconds\";\n+  private static final String GKECLUSTER_URL_KEY = \"gkeClusterUrl\";\n+  private static final String CERT_VALIDITY_SECONDS_KEY = \"certValiditySeconds\";\n+  private static final String RENEWAL_GRACE_PERIOD_SECONDS_KEY = \"renewalGracePeriodSeconds\";\n+  private static final String KEY_ALGO_KEY = \"keyAlgo\";  // aka keyType\n+  private static final String KEY_SIZE_KEY = \"keySize\";\n+  private static final String SIGNATURE_ALGO_KEY = \"signatureAlgo\";\n+  private static final String MAX_RETRY_ATTEMPTS_KEY = \"maxRetryAttempts\";\n+  private static final String STS_URL_KEY = \"stsUrl\";\n+  private static final String GKE_SA_JWT_LOCATION_KEY = \"gkeSaJwtLocation\";\n+\n+  static final String MESHCA_URL_DEFAULT = \"meshca.googleapis.com\";\n+  static final long RPC_TIMEOUT_SECONDS_DEFAULT = 5L;\n+  static final long CERT_VALIDITY_SECONDS_DEFAULT = 9L * 3600L; // 9 hours\n+  static final long RENEWAL_GRACE_PERIOD_SECONDS_DEFAULT = 1L * 3600L; // 1 hour\n+  static final String KEY_ALGO_DEFAULT = \"RSA\";  // aka keyType\n+  static final int KEY_SIZE_DEFAULT = 2048;\n+  static final String SIGNATURE_ALGO_DEFAULT = \"SHA256withRSA\";\n+  static final int MAX_RETRY_ATTEMPTS_DEFAULT = 3;\n+  static final String STS_URL_DEFAULT = \"https://securetoken.googleapis.com/v1/identitybindingtoken\";\n+\n+  private static final Pattern CLUSTER_URL_PATTERN = Pattern\n+      .compile(\".*/projects/(.*)/locations/(.*)/clusters/.*\");\n+\n+  private static final String TRUST_DOMAIN_SUFFIX = \".svc.id.goog\";\n+  private static final String AUDIENCE_PREFIX = \"identitynamespace:\";\n+  static final String MESH_CA_NAME = \"meshCA\";\n+\n+  static {\n+    try {\n+      CertificateProviderRegistry.getInstance()\n+          .register(\n+              new MeshCaCertificateProviderProvider(\n+                  StsCredentials.Factory.getInstance(),\n+                  MeshCaCertificateProvider.ChannelFactory.getInstance(),\n+                  new ExponentialBackoffPolicy.Provider(),\n+                  MeshCaCertificateProvider.Factory.getInstance())\n+        );\n+    } catch (Throwable t) {\n+      logger.log(Level.SEVERE, \"Registering MeshCaCertificateProviderProvider\", t);\n+    }\n+  }\n+\n+  final StsCredentials.Factory stsCredentialsFactory;\n+  final MeshCaCertificateProvider.ChannelFactory channelFactory;\n+  final BackoffPolicy.Provider backoffPolicyProvider;\n+  final MeshCaCertificateProvider.Factory meshCaCertificateProviderFactory;\n+\n+  @VisibleForTesting\n+  MeshCaCertificateProviderProvider(StsCredentials.Factory stsCredentialsFactory,\n+      MeshCaCertificateProvider.ChannelFactory channelFactory,\n+      BackoffPolicy.Provider backoffPolicyProvider,\n+      MeshCaCertificateProvider.Factory meshCaCertificateProviderFactory) {\n+    this.stsCredentialsFactory = stsCredentialsFactory;\n+    this.channelFactory = channelFactory;\n+    this.backoffPolicyProvider = backoffPolicyProvider;\n+    this.meshCaCertificateProviderFactory = meshCaCertificateProviderFactory;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return MESH_CA_NAME;\n+  }\n+\n+  @Override\n+  public CertificateProvider createCertificateProvider(\n+      Object config, CertificateProvider.DistributorWatcher watcher, boolean notifyCertUpdates) {\n+\n+    Config configObj = validateAndTranslateConfig(config);\n+\n+    // Construct audience from project and gkeClusterUrl\n+    String audience =\n+        AUDIENCE_PREFIX + configObj.project + TRUST_DOMAIN_SUFFIX + \":\" + configObj.gkeClusterUrl;\n+    StsCredentials stsCredentials = stsCredentialsFactory\n+        .create(configObj.stsUrl, audience, configObj.gkeSaJwtLocation);\n+\n+    return meshCaCertificateProviderFactory.create(watcher, notifyCertUpdates, configObj.meshCaUrl,\n+        configObj.zone,\n+        configObj.certValiditySeconds, configObj.keySize, configObj.keyAlgo,\n+        configObj.signatureAlgo,\n+        channelFactory, backoffPolicyProvider,\n+        configObj.renewalGracePeriodSeconds, configObj.maxRetryAttempts, stsCredentials);\n+  }\n+\n+  static Config validateAndTranslateConfig(Object config) {", "originalCommit": "d3bd6e36332278d2253f701c6981da619cb4a9f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg0NTQ5MQ==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461845491", "bodyText": "good catch. done", "author": "sanjaypujare", "createdAt": "2020-07-28T20:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NTg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "bf9e4483f528417eab7f4fc7a585c2c4198af837", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java\nindex 9390010ef..5789ea2d3 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java\n\n@@ -74,7 +74,7 @@ final class MeshCaCertificateProviderProvider implements CertificateProviderProv\n           .register(\n               new MeshCaCertificateProviderProvider(\n                   StsCredentials.Factory.getInstance(),\n-                  MeshCaCertificateProvider.ChannelFactory.getInstance(),\n+                  MeshCaCertificateProvider.MeshCaChannelFactory.getInstance(),\n                   new ExponentialBackoffPolicy.Provider(),\n                   MeshCaCertificateProvider.Factory.getInstance())\n         );\n"}}, {"oid": "bf9e4483f528417eab7f4fc7a585c2c4198af837", "url": "https://github.com/grpc/grpc-java/commit/bf9e4483f528417eab7f4fc7a585c2c4198af837", "message": "address review comments", "committedDate": "2020-07-28T20:17:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyOTg5Mw==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r462029893", "bodyText": "What's the possible cause of throwable here?", "author": "dapengzhang0", "createdAt": "2020-07-29T04:24:46Z", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.xds.internal.sts.StsCredentials;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Provider of {@link CertificateProvider}s. Implemented by the implementer of the plugin. We may\n+ * move this out of the internal package and make this an official API in the future.\n+ */\n+final class MeshCaCertificateProviderProvider implements CertificateProviderProvider {\n+\n+  private static final Logger logger = Logger\n+      .getLogger(MeshCaCertificateProviderProvider.class.getName());\n+\n+  private static final String MESHCA_URL_KEY = \"meshCaUrl\";\n+  private static final String RPC_TIMEOUT_SECONDS_KEY = \"rpcTimeoutSeconds\";\n+  private static final String GKECLUSTER_URL_KEY = \"gkeClusterUrl\";\n+  private static final String CERT_VALIDITY_SECONDS_KEY = \"certValiditySeconds\";\n+  private static final String RENEWAL_GRACE_PERIOD_SECONDS_KEY = \"renewalGracePeriodSeconds\";\n+  private static final String KEY_ALGO_KEY = \"keyAlgo\";  // aka keyType\n+  private static final String KEY_SIZE_KEY = \"keySize\";\n+  private static final String SIGNATURE_ALGO_KEY = \"signatureAlgo\";\n+  private static final String MAX_RETRY_ATTEMPTS_KEY = \"maxRetryAttempts\";\n+  private static final String STS_URL_KEY = \"stsUrl\";\n+  private static final String GKE_SA_JWT_LOCATION_KEY = \"gkeSaJwtLocation\";\n+\n+  static final String MESHCA_URL_DEFAULT = \"meshca.googleapis.com\";\n+  static final long RPC_TIMEOUT_SECONDS_DEFAULT = 5L;\n+  static final long CERT_VALIDITY_SECONDS_DEFAULT = 9L * 3600L; // 9 hours\n+  static final long RENEWAL_GRACE_PERIOD_SECONDS_DEFAULT = 1L * 3600L; // 1 hour\n+  static final String KEY_ALGO_DEFAULT = \"RSA\";  // aka keyType\n+  static final int KEY_SIZE_DEFAULT = 2048;\n+  static final String SIGNATURE_ALGO_DEFAULT = \"SHA256withRSA\";\n+  static final int MAX_RETRY_ATTEMPTS_DEFAULT = 3;\n+  static final String STS_URL_DEFAULT = \"https://securetoken.googleapis.com/v1/identitybindingtoken\";\n+\n+  private static final Pattern CLUSTER_URL_PATTERN = Pattern\n+      .compile(\".*/projects/(.*)/locations/(.*)/clusters/.*\");\n+\n+  private static final String TRUST_DOMAIN_SUFFIX = \".svc.id.goog\";\n+  private static final String AUDIENCE_PREFIX = \"identitynamespace:\";\n+  static final String MESH_CA_NAME = \"meshCA\";\n+\n+  static {\n+    try {\n+      CertificateProviderRegistry.getInstance()\n+          .register(\n+              new MeshCaCertificateProviderProvider(\n+                  StsCredentials.Factory.getInstance(),\n+                  MeshCaCertificateProvider.MeshCaChannelFactory.getInstance(),\n+                  new ExponentialBackoffPolicy.Provider(),\n+                  MeshCaCertificateProvider.Factory.getInstance())\n+        );\n+    } catch (Throwable t) {", "originalCommit": "bf9e4483f528417eab7f4fc7a585c2c4198af837", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1NDE3Mg==", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r462054172", "bodyText": "Good point. Also catching and not re-throwing was bad too. Removed the catch clause.", "author": "sanjaypujare", "createdAt": "2020-07-29T05:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyOTg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e1d76a8cc01899e7332ad6c6c5b11f7a209c8b15", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java\nindex 5789ea2d3..a9c1b01ba 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java\n\n@@ -25,8 +25,6 @@ import io.grpc.internal.BackoffPolicy;\n import io.grpc.internal.ExponentialBackoffPolicy;\n import io.grpc.xds.internal.sts.StsCredentials;\n import java.util.Map;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n"}}, {"oid": "e1d76a8cc01899e7332ad6c6c5b11f7a209c8b15", "url": "https://github.com/grpc/grpc-java/commit/e1d76a8cc01899e7332ad6c6c5b11f7a209c8b15", "message": "address review comments-2", "committedDate": "2020-07-29T05:50:55Z", "type": "commit"}]}