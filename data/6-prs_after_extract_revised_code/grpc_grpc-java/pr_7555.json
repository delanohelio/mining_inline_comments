{"pr_number": 7555, "pr_title": "xds: make stats objects thread-safe", "pr_createdAt": "2020-10-27T00:03:51Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7555", "timeline": [{"oid": "fc1b263930ae8302a3957d6b4dcf07745536819f", "url": "https://github.com/grpc/grpc-java/commit/fc1b263930ae8302a3957d6b4dcf07745536819f", "message": "Document thread safety of ClientLoadCounter properly.", "committedDate": "2020-10-26T23:58:31Z", "type": "commit"}, {"oid": "841d0c7a0ae7ce0cf028137d69793e40184f5cf0", "url": "https://github.com/grpc/grpc-java/commit/841d0c7a0ae7ce0cf028137d69793e40184f5cf0", "message": "LoadStatsStore instance should be thead-safe as it is used for global clusters.", "committedDate": "2020-10-27T00:07:05Z", "type": "commit"}, {"oid": "841d0c7a0ae7ce0cf028137d69793e40184f5cf0", "url": "https://github.com/grpc/grpc-java/commit/841d0c7a0ae7ce0cf028137d69793e40184f5cf0", "message": "LoadStatsStore instance should be thead-safe as it is used for global clusters.", "committedDate": "2020-10-27T00:07:05Z", "type": "forcePushed"}, {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4", "url": "https://github.com/grpc/grpc-java/commit/563a26a541c98010a1ec536a483c24ffdc0111a4", "message": "Fix modifying map in the loop issue.", "committedDate": "2020-10-27T09:16:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzNTYxMA==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512935610", "bodyText": "What about declare it as a synchronized method instead of requiring serializing externally?", "author": "dapengzhang0", "createdAt": "2020-10-27T18:32:59Z", "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "diffHunk": "@@ -83,6 +83,8 @@ void recordMetric(String name, double value) {\n   /**\n    * Generates a snapshot for load stats recorded in this counter for the interval between calls\n    * of this method.\n+   *\n+   * <p>Calls to this method must be serialized externally.", "originalCommit": "563a26a541c98010a1ec536a483c24ffdc0111a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4ODU0NQ==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512988545", "bodyText": "Hmm... We can, but it doesn't need to.", "author": "voidzcy", "createdAt": "2020-10-27T19:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzNTYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NDc5OQ==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r513084799", "bodyText": "Okay, this is on the control path. So it doesn't matter much to use synchronized. I've made the ClientLoadCounter class completely thread-safe.", "author": "voidzcy", "createdAt": "2020-10-27T23:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzNTYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "997fc180834a6bfc6693d0f11716f7a09853d132", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/ClientLoadCounter.java b/xds/src/main/java/io/grpc/xds/ClientLoadCounter.java\nindex d539a35d3..1139b6022 100644\n--- a/xds/src/main/java/io/grpc/xds/ClientLoadCounter.java\n+++ b/xds/src/main/java/io/grpc/xds/ClientLoadCounter.java\n\n@@ -83,10 +81,8 @@ final class ClientLoadCounter {\n   /**\n    * Generates a snapshot for load stats recorded in this counter for the interval between calls\n    * of this method.\n-   *\n-   * <p>Calls to this method must be serialized externally.\n    */\n-  ClientLoadSnapshot snapshot() {\n+  synchronized ClientLoadSnapshot snapshot() {\n     Map<String, MetricValue> aggregatedValues = new HashMap<>();\n     for (MetricRecorder recorder : metricRecorders) {\n       Map<String, MetricValue> map = recorder.takeAll();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512939859", "bodyText": "Why remove this? Seems not correct. It needs be thread-safe.", "author": "dapengzhang0", "createdAt": "2020-10-27T18:40:16Z", "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -119,43 +119,41 @@ void removeLoadStats(String cluster, @Nullable String clusterService) {\n     return res;\n   }\n \n+  // Introduced for testing.\n   @VisibleForTesting\n   interface LoadStatsStoreFactory {\n     LoadStatsStore newLoadStatsStore(String cluster, String clusterService);\n   }\n \n   /**\n-   * Interface for client side load stats store. An {@code LoadStatsStore} maintains load stats per\n-   * cluster:cluster_service exposed by traffic director from a gRPC client's perspective,\n-   * including dropped calls. Load stats for endpoints are aggregated in locality granularity\n-   * while the numbers of dropped calls are aggregated in cluster:cluster_service granularity.\n+   * Interface for client side load stats store. A {@link LoadStatsStore} instance holds the load\n+   * stats for a cluster from an gRPC client's perspective by maintaining a set of locality\n+   * counters for each locality it is tracking loads for.\n    */\n   interface LoadStatsStore {\n \n     /**\n      * Generates a report based on recorded load stats (including RPC counts, backend metrics and\n      * dropped calls) for the interval since the previous call of this method.\n      */\n-    // TODO(chengyuanzhang): do not use proto type directly.\n     ClusterStats generateLoadReport();\n \n     /**\n-     * Track load stats for endpoints in the provided locality. Only load stats for endpoints\n-     * in tracked localities will be included in generated load reports.\n+     * Adds tracking for load stats sent to the given {@code locality}. Returns the counter\n+     * object responsible for tracking the client load stats to the given {@code locality}.\n+     * Only load stats for tracked localities will be included in generated load reports.\n      */\n     ClientLoadCounter addLocality(Locality locality);\n \n     /**\n-     * Drop tracking load stats for endpoints in the provided locality. Load stats for endpoints\n-     * in removed localities will no longer be included in future generated load reports after\n+     * Drops tracking for load stats sent to the given {@code locality}. Load stats for removed\n+     * localities will no longer be included in future generated load reports after\n      * their currently recording stats have been fully reported.\n      */\n     void removeLocality(Locality locality);\n \n     /**\n      * Records a drop decision.\n-     *\n-     * <p>This method is thread-safe.", "originalCommit": "563a26a541c98010a1ec536a483c24ffdc0111a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Mzg5Ng==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512953896", "bodyText": "It is thread-safe. But just remove the document there (not document on the interface).", "author": "voidzcy", "createdAt": "2020-10-27T19:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk3MTE0Mw==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512971143", "bodyText": "As usage of it relies on this contract, it should be documented on the interface.", "author": "dapengzhang0", "createdAt": "2020-10-27T19:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4MTczMg==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512981732", "bodyText": "I think it's better to document on LoadStatsStoreImpl, the interface itself does not have any thread safety implications. Just like Map vs ConcurrentMap.", "author": "voidzcy", "createdAt": "2020-10-27T19:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NTQ5Ng==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r513075496", "bodyText": "It depends on how you use it. In a class, usage like Map m = new ConcurrentMap(), then you can use m and rely on the thread safety documented in  ConcurrentMap. But if in a class like Map m = someAbstractOject.getAbstractMap(), then you can not use m assuming it has thread-safety.\nIn EdsLoadBalancer2, loadStatsStore is declared as interface type. loadStatsStore = xdsClient.addClientStats(cluster, edsServiceName) is also giving an interface type.  But loadStatsStore.recordDroppedRequest() is called assuming thread-safety.", "author": "dapengzhang0", "createdAt": "2020-10-27T22:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NDI2Mw==", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r513084263", "bodyText": "Alright, put back some comment on the thread-safety guaranteed for implementations.\nAnyway, the operation itself doesn't need to have thread-safety implications. Just like Map as an example, put/get operations does not have thread-safety implications, it is the API consumer's responsible to use it correctly.   The API consumer can use put or get without external synchronization in multi-thread context if it is given that the concrete implementation is actually a ConcurrentMap.", "author": "voidzcy", "createdAt": "2020-10-27T23:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e9a2ae9dc9face7333a8676094077b88ef772cf", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadStatsManager.java b/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\nindex 1fade9bbb..0bf26af07 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\n\n@@ -154,6 +154,8 @@ final class LoadStatsManager {\n \n     /**\n      * Records a drop decision.\n+     *\n+     * <p>This method must be thread-safe.\n      */\n     void recordDroppedRequest(String category);\n   }\n"}}, {"oid": "1e9a2ae9dc9face7333a8676094077b88ef772cf", "url": "https://github.com/grpc/grpc-java/commit/1e9a2ae9dc9face7333a8676094077b88ef772cf", "message": "Update doc to specify thread-safety.", "committedDate": "2020-10-27T22:46:33Z", "type": "commit"}, {"oid": "997fc180834a6bfc6693d0f11716f7a09853d132", "url": "https://github.com/grpc/grpc-java/commit/997fc180834a6bfc6693d0f11716f7a09853d132", "message": "Make ClientLoadCounter completely thread-safe and improve its annotations for thread-safety.", "committedDate": "2020-10-27T22:51:30Z", "type": "commit"}]}