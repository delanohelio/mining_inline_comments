{"pr_number": 7580, "pr_title": "api: Clarify expectations regarding ServerCall#close", "pr_createdAt": "2020-10-30T14:36:07Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7580", "timeline": [{"oid": "d086fd58edf36669d0226a1b6b9a5cf2901b782c", "url": "https://github.com/grpc/grpc-java/commit/d086fd58edf36669d0226a1b6b9a5cf2901b782c", "message": "api: Clarify behavior of ServerCall#close regarding client cancellations\n\nFixes #7571", "committedDate": "2020-10-30T14:34:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1NTY3NA==", "url": "https://github.com/grpc/grpc-java/pull/7580#discussion_r515355674", "bodyText": "I'd much rather not call out ForwardingServerCalls. And saying something like \"this method won't be called\" isn't right either as it is up to the application whether it is called or not.\nI think we should have some text to emphasize that the close call is not the point where the RPC is complete. Instead, that is onComplete/onCancel. We can probably add that to the paragraph above. We can also say that close is not necessary to be called if the RPC is cancelled as the call is already dead.", "author": "ejona86", "createdAt": "2020-10-30T20:18:51Z", "path": "api/src/main/java/io/grpc/ServerCall.java", "diffHunk": "@@ -163,6 +163,11 @@ public boolean isReady() {\n    * <p>Since {@link Metadata} is not thread-safe, the caller must not access (read or write) {@code\n    * trailers} after this point.\n    *\n+   * <p>Implementation note regarding ForwardingServerCalls: This method is called after the", "originalCommit": "d086fd58edf36669d0226a1b6b9a5cf2901b782c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a880da68a5260d8528ede69c63e345f64e16100e", "chunk": "diff --git a/api/src/main/java/io/grpc/ServerCall.java b/api/src/main/java/io/grpc/ServerCall.java\nindex fbc0a0fa5..34f2f511f 100644\n--- a/api/src/main/java/io/grpc/ServerCall.java\n+++ b/api/src/main/java/io/grpc/ServerCall.java\n\n@@ -163,10 +163,11 @@ public abstract class ServerCall<ReqT, RespT> {\n    * <p>Since {@link Metadata} is not thread-safe, the caller must not access (read or write) {@code\n    * trailers} after this point.\n    *\n-   * <p>Implementation note regarding ForwardingServerCalls: This method is called after the\n-   * server completed the processing of the request, but before the response status is sent to the\n-   * client, so the client is still able to cancel the request. This method won't be called for\n-   * client side cancellations or errors.\n+   * <p>Implementation note: This method is called after the server completed the processing of the\n+   * request (service implementation), but before the response status is sent to the client, so the\n+   * client is still able to cancel the request or a network error might cause it to fail.\n+   * If you wish to know when the call is actually completed/closed, you have to use\n+   * {@link Listener#onComplete} or {@link Listener#onCancel} instead.\n    *\n    * @throws IllegalStateException if call is already {@code close}d\n    */\n"}}, {"oid": "a880da68a5260d8528ede69c63e345f64e16100e", "url": "https://github.com/grpc/grpc-java/commit/a880da68a5260d8528ede69c63e345f64e16100e", "message": "Fix javadocs", "committedDate": "2020-10-30T21:00:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MjEzOA==", "url": "https://github.com/grpc/grpc-java/pull/7580#discussion_r515392138", "bodyText": "I like that, but I'd really hope to avoid \"implementation note.\" This is more how the API is designed versus how things just so happen to be implemented.\n\nThis method implies the caller completed processing the RPC, but it does not imply the RPC is complete. The call implementation will need additional time to complete the RPC and during this time the client is still able to cancel the request or a network error might cause the RPC to fail. If you wish to know...\n\nIt could maybe use some more wordsmithing, but is that better?\nDid you want to include anything along the lines of \"this method is not necessary when Listener.onCancel() is called?\"", "author": "ejona86", "createdAt": "2020-10-30T21:32:08Z", "path": "api/src/main/java/io/grpc/ServerCall.java", "diffHunk": "@@ -163,6 +163,12 @@ public boolean isReady() {\n    * <p>Since {@link Metadata} is not thread-safe, the caller must not access (read or write) {@code\n    * trailers} after this point.\n    *\n+   * <p>Implementation note: This method is called after the server completed the processing of the\n+   * request (service implementation), but before the response status is sent to the client, so the", "originalCommit": "a880da68a5260d8528ede69c63e345f64e16100e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a4e857a18ffd42ed0ddc48546a5f8a08770820ea", "chunk": "diff --git a/api/src/main/java/io/grpc/ServerCall.java b/api/src/main/java/io/grpc/ServerCall.java\nindex 34f2f511f..d391cb5c7 100644\n--- a/api/src/main/java/io/grpc/ServerCall.java\n+++ b/api/src/main/java/io/grpc/ServerCall.java\n\n@@ -163,11 +163,12 @@ public abstract class ServerCall<ReqT, RespT> {\n    * <p>Since {@link Metadata} is not thread-safe, the caller must not access (read or write) {@code\n    * trailers} after this point.\n    *\n-   * <p>Implementation note: This method is called after the server completed the processing of the\n-   * request (service implementation), but before the response status is sent to the client, so the\n-   * client is still able to cancel the request or a network error might cause it to fail.\n-   * If you wish to know when the call is actually completed/closed, you have to use\n-   * {@link Listener#onComplete} or {@link Listener#onCancel} instead.\n+   * <p>This method implies the caller completed processing the RPC, but it does not imply the RPC\n+   * is complete. The call implementation will need additional time to complete the RPC and during\n+   * this time the client is still able to cancel the request or a network error might cause the\n+   * RPC to fail. If you wish to know when the call is actually completed/closed, you have to use\n+   * {@link Listener#onComplete} or {@link Listener#onCancel} instead. This method is not\n+   * necessarily invoked when Listener.onCancel() is called.\n    *\n    * @throws IllegalStateException if call is already {@code close}d\n    */\n"}}, {"oid": "a4e857a18ffd42ed0ddc48546a5f8a08770820ea", "url": "https://github.com/grpc/grpc-java/commit/a4e857a18ffd42ed0ddc48546a5f8a08770820ea", "message": "Use @ejona86's suggested wording", "committedDate": "2020-11-01T17:12:12Z", "type": "commit"}]}