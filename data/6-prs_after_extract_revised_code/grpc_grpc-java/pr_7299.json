{"pr_number": 7299, "pr_title": "xds: manage load stats for all clusters in XdsClient", "pr_createdAt": "2020-08-07T05:01:13Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7299", "timeline": [{"oid": "d2df5c1f4356de00e988db79353e74eba5b0a2f7", "url": "https://github.com/grpc/grpc-java/commit/d2df5c1f4356de00e988db79353e74eba5b0a2f7", "message": "Introduce LoadStatsManager for managing stats for all clusters.", "committedDate": "2020-08-07T04:54:20Z", "type": "commit"}, {"oid": "92f53bc4da500884c227137fbc3e63052486b02c", "url": "https://github.com/grpc/grpc-java/commit/92f53bc4da500884c227137fbc3e63052486b02c", "message": "Use LoadStatsManager as the source of getting stats for load reporting.", "committedDate": "2020-08-07T04:56:51Z", "type": "commit"}, {"oid": "1e1b00b9ca432915fadb25509d8463889d8e2d50", "url": "https://github.com/grpc/grpc-java/commit/1e1b00b9ca432915fadb25509d8463889d8e2d50", "message": "Change the XdsClient API for initiating load reporting.", "committedDate": "2020-08-07T04:58:07Z", "type": "commit"}, {"oid": "e2955ea500fab4a380089dcb20366702cd4b62ea", "url": "https://github.com/grpc/grpc-java/commit/e2955ea500fab4a380089dcb20366702cd4b62ea", "message": "Clean up", "committedDate": "2020-08-07T04:58:38Z", "type": "commit"}, {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "url": "https://github.com/grpc/grpc-java/commit/26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "message": "Delete blank line.", "committedDate": "2020-08-07T05:01:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3Mjc1OA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467272758", "bodyText": "I am removing the integration of orca utilities. They are not used, and even the new design architecture does not consider using it. They are effectively dead code. There is not reason to keep them there. They only make the implementation hard to read and test.", "author": "voidzcy", "createdAt": "2020-08-07T21:17:42Z", "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -108,46 +103,24 @@ abstract LocalityStore newLocalityStore(\n     private final Helper helper;\n     private final LoadBalancerProvider loadBalancerProvider;\n     private final ThreadSafeRandom random;\n-    private final LoadStatsStore loadStatsStore;\n-    private final OrcaPerRequestUtil orcaPerRequestUtil;", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58cb691ea5d3fb029d62826d02bdf997cafccda9", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LocalityStore.java b/xds/src/main/java/io/grpc/xds/LocalityStore.java\nindex 68293166a..2295ef91f 100644\n--- a/xds/src/main/java/io/grpc/xds/LocalityStore.java\n+++ b/xds/src/main/java/io/grpc/xds/LocalityStore.java\n\n@@ -103,24 +109,46 @@ interface LocalityStore {\n     private final Helper helper;\n     private final LoadBalancerProvider loadBalancerProvider;\n     private final ThreadSafeRandom random;\n+    private final LoadStatsStore loadStatsStore;\n+    private final OrcaPerRequestUtil orcaPerRequestUtil;\n+    private final OrcaOobUtil orcaOobUtil;\n     private final PriorityManager priorityManager = new PriorityManager();\n     private final Map<Locality, LocalityLbInfo> localityMap = new HashMap<>();\n     private List<DropOverload> dropOverloads = ImmutableList.of();\n-    @Nullable\n-    private LoadStatsStore loadStatsStore;\n+    private long metricsReportIntervalNano = -1;\n \n-    LocalityStoreImpl(InternalLogId logId, Helper helper, LoadBalancerRegistry lbRegistry) {\n-      this(logId, helper, lbRegistry, ThreadSafeRandom.ThreadSafeRandomImpl.instance);\n+    LocalityStoreImpl(\n+        InternalLogId logId,\n+        Helper helper,\n+        LoadBalancerRegistry lbRegistry,\n+        LoadStatsStore loadStatsStore) {\n+      this(\n+          logId,\n+          helper,\n+          lbRegistry,\n+          ThreadSafeRandom.ThreadSafeRandomImpl.instance,\n+          loadStatsStore,\n+          OrcaPerRequestUtil.getInstance(),\n+          OrcaOobUtil.getInstance());\n     }\n \n     @VisibleForTesting\n-    LocalityStoreImpl(InternalLogId logId, Helper helper, LoadBalancerRegistry lbRegistry,\n-        ThreadSafeRandom random) {\n+    LocalityStoreImpl(\n+        InternalLogId logId,\n+        Helper helper,\n+        LoadBalancerRegistry lbRegistry,\n+        ThreadSafeRandom random,\n+        LoadStatsStore loadStatsStore,\n+        OrcaPerRequestUtil orcaPerRequestUtil,\n+        OrcaOobUtil orcaOobUtil) {\n       this.helper = checkNotNull(helper, \"helper\");\n       loadBalancerProvider = checkNotNull(\n           lbRegistry.getProvider(ROUND_ROBIN),\n           \"Unable to find '%s' LoadBalancer\", ROUND_ROBIN);\n       this.random = checkNotNull(random, \"random\");\n+      this.loadStatsStore = checkNotNull(loadStatsStore, \"loadStatsStore\");\n+      this.orcaPerRequestUtil = checkNotNull(orcaPerRequestUtil, \"orcaPerRequestUtil\");\n+      this.orcaOobUtil = checkNotNull(orcaOobUtil, \"orcaOobUtil\");\n       logger = XdsLogger.withLogId(checkNotNull(logId, \"logId\"));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzkwOA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467273908", "bodyText": "Inevitably to add this API. The original thought when first implementing LocalityStore class, it will always have a LoadStatsStore associated with it (same lifecycle). As I mentioned in the PR description, we should not record loads if load reporting is not enabled, so we should allow a LocalityStore to have no LoadStatsStore. And conceptually, we should allow load reporting to be toggled on/off in the lifetime of a LocalityStore.", "author": "voidzcy", "createdAt": "2020-08-07T21:21:08Z", "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -73,7 +70,7 @@\n \n   void updateDropPercentage(List<DropOverload> dropOverloads);\n \n-  void updateOobMetricsReportInterval(long reportIntervalNano);\n+  void setLoadStatsStore(@Nullable LoadStatsStore loadStatsStore);", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODc1OA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338758", "bodyText": "Obsolete.", "author": "voidzcy", "createdAt": "2020-08-08T00:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "58cb691ea5d3fb029d62826d02bdf997cafccda9", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LocalityStore.java b/xds/src/main/java/io/grpc/xds/LocalityStore.java\nindex 68293166a..2295ef91f 100644\n--- a/xds/src/main/java/io/grpc/xds/LocalityStore.java\n+++ b/xds/src/main/java/io/grpc/xds/LocalityStore.java\n\n@@ -70,7 +74,7 @@ interface LocalityStore {\n \n   void updateDropPercentage(List<DropOverload> dropOverloads);\n \n-  void setLoadStatsStore(@Nullable LoadStatsStore loadStatsStore);\n+  void updateOobMetricsReportInterval(long reportIntervalNano);\n \n   @VisibleForTesting\n   abstract class LocalityStoreFactory {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NDc2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467274766", "bodyText": "Borrowed the idea from Envoy's implementation: https://github.com/envoyproxy/envoy/blob/50ef0945fa2c5da4bff7627c3abf41fdd3b7cffd/source/common/upstream/load_stats_reporter.cc#L17", "author": "voidzcy", "createdAt": "2020-08-07T21:22:43Z", "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Manages all stats for client side load.\n+ */\n+final class LoadStatsManager {", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "210a80335a87b8f307c016ab36ef92a913ab36a5", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadStatsManager.java b/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\nindex 90387a7f7..05674a07e 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\n\n@@ -16,6 +16,7 @@\n \n package io.grpc.xds;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.base.Preconditions.checkState;\n \n import com.google.common.annotations.VisibleForTesting;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NzEyNw==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467277127", "bodyText": "Eliminated this wrapper. Move the interval recording into each LoadStatsStore's implementation. Since each LoadStatsStore represents a \"living report\", when taking a snapshot for the report, we could \"stamp an interval\" for the report. Since the report is queried every time for sending an LRS request, it totally makes sense to have the report already stamped with the interval.", "author": "voidzcy", "createdAt": "2020-08-07T21:25:55Z", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -386,27 +337,6 @@ private void cleanUp() {\n     }\n   }\n \n-  private final class LoadStatsEntity {", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84232bdc494383cc5c922cc05228ecb48c6838b9", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadReportClient.java b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\nindex 0454d0deb..2e03ba286 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadReportClient.java\n\n@@ -336,21 +332,4 @@ final class LoadReportClient {\n       }\n     }\n   }\n-\n-  /**\n-   * Callbacks for passing information received from client load reporting responses to xDS load\n-   * balancer, such as the load reporting interval requested by the traffic director.\n-   *\n-   * <p>Implementations are not required to be thread-safe as callbacks will be invoked in xDS load\n-   * balancer's {@link io.grpc.SynchronizationContext}.\n-   */\n-  interface LoadReportCallback {\n-\n-    /**\n-     * The load reporting interval has been received.\n-     *\n-     * @param reportIntervalNano load reporting interval requested by remote traffic director.\n-     */\n-    void onReportResponse(long reportIntervalNano);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MDg2MA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467280860", "bodyText": "This was potentially a problem. The lifecycle of a ChildHelper is different from the LoadStatsStore that used to record loads for the cluster that this locality belongs to. A ChildHelper's lifecycle is same as the presence of the corresponding locality. However, a LoadStatsStore's lifecycle is for the time since load reporting was last enabled. They are completely disjoint, so a ChildHelper should always pick up the freshest LoadStatsStore to record load.", "author": "voidzcy", "createdAt": "2020-08-07T21:30:44Z", "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -363,59 +336,33 @@ boolean isDeactivated() {\n       }\n \n       class ChildHelper extends ForwardingLoadBalancerHelper {\n-\n-        private final OrcaReportingHelperWrapper orcaReportingHelperWrapper;\n         private SubchannelPicker currentChildPicker = XdsSubchannelPickers.BUFFER_PICKER;\n         private ConnectivityState currentChildState = CONNECTING;\n \n-        ChildHelper() {\n-          final ClientLoadCounter counter = loadStatsStore.getLocalityCounter(locality);", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODg0NQ==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338845", "bodyText": "Obsolete.", "author": "voidzcy", "createdAt": "2020-08-08T00:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MDg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "58cb691ea5d3fb029d62826d02bdf997cafccda9", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LocalityStore.java b/xds/src/main/java/io/grpc/xds/LocalityStore.java\nindex 68293166a..2295ef91f 100644\n--- a/xds/src/main/java/io/grpc/xds/LocalityStore.java\n+++ b/xds/src/main/java/io/grpc/xds/LocalityStore.java\n\n@@ -336,33 +364,59 @@ interface LocalityStore {\n       }\n \n       class ChildHelper extends ForwardingLoadBalancerHelper {\n+\n+        private final OrcaReportingHelperWrapper orcaReportingHelperWrapper;\n         private SubchannelPicker currentChildPicker = XdsSubchannelPickers.BUFFER_PICKER;\n         private ConnectivityState currentChildState = CONNECTING;\n \n-        @Override\n-        protected Helper delegate() {\n-          return helper;\n-        }\n+        ChildHelper() {\n+          final ClientLoadCounter counter = loadStatsStore.getLocalityCounter(locality);\n+          Helper delegate = new ForwardingLoadBalancerHelper() {\n+            @Override\n+            protected Helper delegate() {\n+              return helper;\n+            }\n \n-        @Override\n-        public void updateBalancingState(ConnectivityState newState, SubchannelPicker newPicker) {\n-          logger.log(\n-              XdsLogLevel.INFO,\n-              \"Update load balancing state for locality {0} to {1}\", locality, newState);\n-          currentChildState = newState;\n-          if (loadStatsStore != null) {\n-            ClientLoadCounter counter = loadStatsStore.getLocalityCounter(locality);\n-            currentChildPicker = new LoadRecordingSubchannelPicker(counter, newPicker);\n-          } else {\n-            currentChildPicker = newPicker;\n+            @Override\n+            public void updateBalancingState(\n+                ConnectivityState newState, SubchannelPicker newPicker) {\n+              logger.log(\n+                  XdsLogLevel.INFO,\n+                  \"Update load balancing state for locality {0} to {1}\", locality, newState);\n+              currentChildState = newState;\n+              currentChildPicker =\n+                  new LoadRecordingSubchannelPicker(\n+                      counter,\n+                      new MetricsObservingSubchannelPicker(new MetricsRecordingListener(counter),\n+                          newPicker, orcaPerRequestUtil));\n+\n+              priorityManager.updatePriorityState(priorityManager.getPriority(locality));\n+            }\n+\n+            @Override\n+            public String getAuthority() {\n+              //FIXME: This should be a new proposed field of Locality, locality_name\n+              return locality.getSubZone();\n+            }\n+          };\n+\n+          orcaReportingHelperWrapper =\n+              orcaOobUtil.newOrcaReportingHelperWrapper(\n+                  delegate, new MetricsRecordingListener(counter));\n+          if (metricsReportIntervalNano > 0) {\n+            updateMetricsReportInterval(metricsReportIntervalNano);\n           }\n-          priorityManager.updatePriorityState(priorityManager.getPriority(locality));\n+        }\n+\n+        void updateMetricsReportInterval(long intervalNanos) {\n+          orcaReportingHelperWrapper\n+              .setReportingConfig(OrcaReportingConfig.newBuilder()\n+                  .setReportInterval(intervalNanos, TimeUnit.NANOSECONDS).build());\n         }\n \n         @Override\n-        public String getAuthority() {\n-          //FIXME: This should be a new proposed field of Locality, locality_name\n-          return locality.getSubZone();\n+        protected Helper delegate() {\n+          return orcaReportingHelperWrapper.asHelper();\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTE4Mw==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467185183", "bodyText": "Can it be localityStore.stopLoadReprot()?", "author": "dapengzhang0", "createdAt": "2020-08-07T17:51:15Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -283,7 +282,7 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n                 clusterName,\n                 clusterServiceName);\n             xdsClient.cancelClientStatsReport(clusterName, clusterServiceName);\n-            isReportingLoad = false;\n+            localityStore.setLoadStatsStore(null);", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODY4OA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338688", "bodyText": "Obsolete.", "author": "voidzcy", "createdAt": "2020-08-08T00:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "30d8c1775ba7d2c05af293108294ccb9780aca9c", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\nindex 412e9d971..fd6307755 100644\n--- a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n\n@@ -281,8 +282,7 @@ final class EdsLoadBalancer extends LoadBalancer {\n                 \"Stop reporting loads for cluster: {0}, cluster_service: {1}\",\n                 clusterName,\n                 clusterServiceName);\n-            xdsClient.cancelClientStatsReport(clusterName, clusterServiceName);\n-            localityStore.setLoadStatsStore(null);\n+            xdsClient.cancelClientStatsReport();\n           }\n         }\n         // TODO(zddapeng): In handleResolvedAddresses() handle child policy change if any.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTQ4Ng==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467185486", "bodyText": "Can it be localityStore.startLoadReport(loadStatsStore);", "author": "dapengzhang0", "createdAt": "2020-08-07T17:51:57Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -272,8 +270,9 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n                 \"Start reporting loads for cluster: {0}, cluster_service: {1}\",\n                 clusterName,\n                 clusterServiceName);\n-            xdsClient.reportClientStats(clusterName, clusterServiceName, loadStatsStore);\n-            isReportingLoad = true;\n+            LoadStatsStore loadStatsStore =\n+                xdsClient.reportClientStats(clusterName, clusterServiceName);\n+            localityStore.setLoadStatsStore(loadStatsStore);", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODcwNQ==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338705", "bodyText": "Obsolete.", "author": "voidzcy", "createdAt": "2020-08-08T00:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "30d8c1775ba7d2c05af293108294ccb9780aca9c", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\nindex 412e9d971..fd6307755 100644\n--- a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n\n@@ -270,9 +273,7 @@ final class EdsLoadBalancer extends LoadBalancer {\n                 \"Start reporting loads for cluster: {0}, cluster_service: {1}\",\n                 clusterName,\n                 clusterServiceName);\n-            LoadStatsStore loadStatsStore =\n-                xdsClient.reportClientStats(clusterName, clusterServiceName);\n-            localityStore.setLoadStatsStore(loadStatsStore);\n+            xdsClient.reportClientStats();\n           }\n         } else {\n           if (isReportingLoad) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTY4OQ==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467189689", "bodyText": "Probably you can do this inside of localityStore.reset() (at the end of it), then you don't need awkwardly do extra operation on localityStore after localityStore.reset() is called.", "author": "dapengzhang0", "createdAt": "2020-08-07T18:00:29Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -303,16 +302,17 @@ public boolean canHandleEmptyAddressListFromNameResolution() {\n \n       @Override\n       public void shutdown() {\n+        localityStore.reset();\n         if (isReportingLoad) {\n           logger.log(\n               XdsLogLevel.INFO,\n               \"Stop reporting loads for cluster: {0}, cluster_service: {1}\",\n               clusterName,\n               clusterServiceName);\n           xdsClient.cancelClientStatsReport(clusterName, clusterServiceName);\n+          localityStore.setLoadStatsStore(null);", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODcyMQ==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338721", "bodyText": "Obsolete.", "author": "voidzcy", "createdAt": "2020-08-08T00:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "30d8c1775ba7d2c05af293108294ccb9780aca9c", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\nindex 412e9d971..fd6307755 100644\n--- a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n\n@@ -309,10 +309,10 @@ final class EdsLoadBalancer extends LoadBalancer {\n               \"Stop reporting loads for cluster: {0}, cluster_service: {1}\",\n               clusterName,\n               clusterServiceName);\n-          xdsClient.cancelClientStatsReport(clusterName, clusterServiceName);\n-          localityStore.setLoadStatsStore(null);\n+          xdsClient.cancelClientStatsReport();\n           isReportingLoad = false;\n         }\n+        xdsClient.removeClientStats(clusterName, clusterServiceName);\n         xdsClient.cancelEndpointDataWatch(resourceName, endpointWatcher);\n         logger.log(\n             XdsLogLevel.INFO,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMTU5Nw==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467231597", "bodyText": "Once set, should you add all existing localities to the loadStatsStore?", "author": "dapengzhang0", "createdAt": "2020-08-07T19:33:05Z", "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -224,6 +196,11 @@ public void updateDropPercentage(List<DropOverload> dropOverloads) {\n       this.dropOverloads = checkNotNull(dropOverloads, \"dropOverloads\");\n     }\n \n+    @Override\n+    public void setLoadStatsStore(@Nullable LoadStatsStore loadStatsStore) {\n+      this.loadStatsStore = loadStatsStore;", "originalCommit": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNjI5NA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467336294", "bodyText": "Ahh... Yeah, that's a problem. Updated the change.\nBack to the problem: it is extremely complicated (realistically almost impossible) to cleanly handle load reporting for not losing a single load. The problem itself is illy-defined, it's never clear for how to deal with in-flight requests in the transition of toggling load reporting on/off.\nTo make it easier:  recording is always enabled, every single load will be recorded, even if load reporting is not enabled (as what we are used to do). Regarding the memory usage for recorded loads going unbounded will be a separate problem to consider (it's not easy for consequences of toggling load recording on/off).\nNow the XdsClient is having two sets of APIs, one for load recording and one for load reporting:\nLoadStatsStore addClientStats(String clusterName, @Nullable String clusterServiceName);\nvoid removeClientStats(String clusterName, @Nullable String clusterServiceName)\n\nis for creating the stats object used to record load. Put such an API on XdsClient instead of each EDS policy creating the stats object on its own aligns with the xDS LB policy refactoring design and make it work with our current routing hierarchy.\nvoid reportClientStats();\nvoid cancelClientStatsReport();\n\nis for toggling load reporting on/off by LB policies. Yes, it. doesn't need any argument as you remember the loads for clusters being reported is driven by LRS responses and tracked stats: LRS server tells you which clusters to report loads for, LRS client looks up the currently tracked stats to find data for those clusters. Since stats data is tracked by LoadStatsManager now, the LRS client simply queries the LoadStatsManager to get stats.", "author": "voidzcy", "createdAt": "2020-08-08T00:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMTU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "58cb691ea5d3fb029d62826d02bdf997cafccda9", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LocalityStore.java b/xds/src/main/java/io/grpc/xds/LocalityStore.java\nindex 68293166a..2295ef91f 100644\n--- a/xds/src/main/java/io/grpc/xds/LocalityStore.java\n+++ b/xds/src/main/java/io/grpc/xds/LocalityStore.java\n\n@@ -196,11 +225,6 @@ interface LocalityStore {\n       this.dropOverloads = checkNotNull(dropOverloads, \"dropOverloads\");\n     }\n \n-    @Override\n-    public void setLoadStatsStore(@Nullable LoadStatsStore loadStatsStore) {\n-      this.loadStatsStore = loadStatsStore;\n-    }\n-\n     private void deactivate(final Locality locality) {\n       if (!localityMap.containsKey(locality) || localityMap.get(locality).isDeactivated()) {\n         return;\n"}}, {"oid": "887e00c15d8322c2318a673fb149b77c67a29c1c", "url": "https://github.com/grpc/grpc-java/commit/887e00c15d8322c2318a673fb149b77c67a29c1c", "message": "Modify the XdsClient load reporting/recording APIs to separate load recording and reporting flow.", "committedDate": "2020-08-08T00:05:37Z", "type": "commit"}, {"oid": "58cb691ea5d3fb029d62826d02bdf997cafccda9", "url": "https://github.com/grpc/grpc-java/commit/58cb691ea5d3fb029d62826d02bdf997cafccda9", "message": "Revert LocalityStore changes.", "committedDate": "2020-08-08T00:06:25Z", "type": "commit"}, {"oid": "84232bdc494383cc5c922cc05228ecb48c6838b9", "url": "https://github.com/grpc/grpc-java/commit/84232bdc494383cc5c922cc05228ecb48c6838b9", "message": "Elimite the unused LoadReportCallback.", "committedDate": "2020-08-08T00:07:28Z", "type": "commit"}, {"oid": "210a80335a87b8f307c016ab36ef92a913ab36a5", "url": "https://github.com/grpc/grpc-java/commit/210a80335a87b8f307c016ab36ef92a913ab36a5", "message": "style issue", "committedDate": "2020-08-08T00:07:52Z", "type": "commit"}, {"oid": "754b69f33976c6a1a32a0db386fb0f0da8bcd450", "url": "https://github.com/grpc/grpc-java/commit/754b69f33976c6a1a32a0db386fb0f0da8bcd450", "message": "Delete a poorly written test.", "committedDate": "2020-08-08T00:08:42Z", "type": "commit"}, {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c", "url": "https://github.com/grpc/grpc-java/commit/30d8c1775ba7d2c05af293108294ccb9780aca9c", "message": "Use new XdsClient load reporting/recording APIs for managing per cluster:eds_service loads", "committedDate": "2020-08-08T00:09:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA3OTA2Nw==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468079067", "bodyText": "revert the new line", "author": "dapengzhang0", "createdAt": "2020-08-10T17:55:55Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -236,6 +236,7 @@ public int hashCode() {\n     /**\n      * Load-balances endpoints for a given cluster.\n      */\n+", "originalCommit": "30d8c1775ba7d2c05af293108294ccb9780aca9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEyMDczMw==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468120733", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-08-10T19:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA3OTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4d9d25eb51083a8bff8d05498b88d2e7de7a0de6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\nindex fd6307755..66addc8b6 100644\n--- a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n\n@@ -236,7 +236,6 @@ final class EdsLoadBalancer extends LoadBalancer {\n     /**\n      * Load-balances endpoints for a given cluster.\n      */\n-\n     final class ClusterEndpointsBalancer extends LoadBalancer {\n       // Name of the resource to be used for querying endpoint information.\n       final String resourceName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjI5Ng==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468106296", "bodyText": "Where is isReportingLoad set true? I know is hard to test load report in EdsLoadBalancer because EdsLoadBalancerTest uses a real XdsClientImpl with fake channel.", "author": "dapengzhang0", "createdAt": "2020-08-10T18:46:11Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -303,16 +302,17 @@ public boolean canHandleEmptyAddressListFromNameResolution() {\n \n       @Override\n       public void shutdown() {\n+        localityStore.reset();\n         if (isReportingLoad) {", "originalCommit": "30d8c1775ba7d2c05af293108294ccb9780aca9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEyMDY3Nw==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468120677", "bodyText": "Oops, forgot to put that back. Basically, nothing has changed in terms of the control flow. Only added XdsClient APIs for creating stats objects.", "author": "voidzcy", "createdAt": "2020-08-10T19:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4d9d25eb51083a8bff8d05498b88d2e7de7a0de6", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\nindex fd6307755..66addc8b6 100644\n--- a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n\n@@ -302,7 +303,6 @@ final class EdsLoadBalancer extends LoadBalancer {\n \n       @Override\n       public void shutdown() {\n-        localityStore.reset();\n         if (isReportingLoad) {\n           logger.log(\n               XdsLogLevel.INFO,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzc2Mg==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468107762", "bodyText": "Add log?", "author": "dapengzhang0", "createdAt": "2020-08-10T18:49:11Z", "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Manages all stats for client side load.\n+ */\n+final class LoadStatsManager {\n+  private final LoadStatsStoreFactory loadStatsStoreFactory;\n+  private final Map<String, Map<String, RefCounted>> loadStatsStores = new HashMap<>();\n+\n+  LoadStatsManager() {\n+    this(LoadStatsStoreImpl.getDefaultFactory());\n+  }\n+\n+  @VisibleForTesting\n+  LoadStatsManager(LoadStatsStoreFactory factory) {\n+    this.loadStatsStoreFactory = factory;\n+  }\n+\n+  /**\n+   * Adds and retrieves the stats object for tracking loads for the given cluster:cluster_service.\n+   * The returned {@link LoadStatsStore} is reference-counted, caller should use\n+   * {@link #removeLoadStats} to release the reference when it is no longer used.\n+   */\n+  LoadStatsStore addLoadStats(String cluster, @Nullable String clusterService) {\n+    if (!loadStatsStores.containsKey(cluster)) {\n+      loadStatsStores.put(cluster, new HashMap<String, RefCounted>());\n+    }\n+    Map<String, RefCounted> clusterLoadStatsStores = loadStatsStores.get(cluster);\n+    if (!clusterLoadStatsStores.containsKey(clusterService)) {", "originalCommit": "30d8c1775ba7d2c05af293108294ccb9780aca9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMDY3Mg==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468130672", "bodyText": "I don't think it is necessary. Stats objects are always created, and it always succeeds to create. In terms of functionality, there is no difference between creating an stats object by the LB policy or by the XdsClient.", "author": "voidzcy", "createdAt": "2020-08-10T19:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNDU0NA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468134544", "bodyText": "Not necessary for creating/removing stats object. But you have removed some logs, are they supposed to be moved somewhere else?", "author": "dapengzhang0", "createdAt": "2020-08-10T19:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDYxMA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468164610", "bodyText": "I deleted logs for \"Start/Stop load reporting for cluster: ..., cluster_service: ...\" in EDS policy. They are misleading and look awkward:\n\nThere is a single load reporting client for all clusters, it is either turned on or off, not for a specific cluster/cluster_service.\nLoad reporting is completely driven by the management server: which clusters to report load for are determined by the management server, not the gRPC client.\n\nEach EDS policy's log for receiving it LB config includes the information for if this policy enables load reporting. The global load reporting is enabled as long as there is at least one EDS policy enabling it.\nInstead, I put logs in XdsClient to indicate when the global load reporting is turned on or off.", "author": "voidzcy", "createdAt": "2020-08-10T20:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d35e66e12919a94251f7a6cc0918e8962d6029a1", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadStatsManager.java b/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\nindex 05674a07e..70ea52a23 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadStatsManager.java\n\n@@ -167,15 +167,15 @@ final class LoadStatsManager {\n     ClusterStats generateLoadReport();\n \n     /**\n-     * Starts tracking load stats for endpoints in the provided locality. Only load stats for\n-     * endpoints in added localities will be recorded and included in generated load reports.\n+     * Track load stats for endpoints in the provided locality. Only load stats for endpoints\n+     * in tracked localities will be included in generated load reports.\n      */\n     void addLocality(Locality locality);\n \n     /**\n-     * Stops tracking load stats for endpoints in the provided locality. Load stats for endpoints\n+     * Drop tracking load stats for endpoints in the provided locality. Load stats for endpoints\n      * in removed localities will no longer be included in future generated load reports after\n-     * their recorded and ongoing loads have been reported.\n+     * their currently recording stats have been fully reported.\n      */\n     void removeLocality(Locality locality);\n \n"}}, {"oid": "4d9d25eb51083a8bff8d05498b88d2e7de7a0de6", "url": "https://github.com/grpc/grpc-java/commit/4d9d25eb51083a8bff8d05498b88d2e7de7a0de6", "message": "Fixed missing toggling isReportingLoad.", "committedDate": "2020-08-10T19:16:33Z", "type": "commit"}, {"oid": "4d9d25eb51083a8bff8d05498b88d2e7de7a0de6", "url": "https://github.com/grpc/grpc-java/commit/4d9d25eb51083a8bff8d05498b88d2e7de7a0de6", "message": "Fixed missing toggling isReportingLoad.", "committedDate": "2020-08-10T19:16:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMjY0NA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468132644", "bodyText": "Just for reverting back to the original implementation. Please see changes from all commits.", "author": "voidzcy", "createdAt": "2020-08-10T19:29:15Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -312,6 +312,7 @@ public void shutdown() {\n           xdsClient.cancelClientStatsReport();\n           isReportingLoad = false;\n         }\n+        localityStore.reset();", "originalCommit": "4d9d25eb51083a8bff8d05498b88d2e7de7a0de6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b035d3e46d343ff88a24f7a03f7374e6eaff1ac3", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\nindex 66addc8b6..b009ea7d5 100644\n--- a/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n+++ b/xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java\n\n@@ -304,11 +294,6 @@ final class EdsLoadBalancer extends LoadBalancer {\n       @Override\n       public void shutdown() {\n         if (isReportingLoad) {\n-          logger.log(\n-              XdsLogLevel.INFO,\n-              \"Stop reporting loads for cluster: {0}, cluster_service: {1}\",\n-              clusterName,\n-              clusterServiceName);\n           xdsClient.cancelClientStatsReport();\n           isReportingLoad = false;\n         }\n"}}, {"oid": "b035d3e46d343ff88a24f7a03f7374e6eaff1ac3", "url": "https://github.com/grpc/grpc-java/commit/b035d3e46d343ff88a24f7a03f7374e6eaff1ac3", "message": "Clean up logs for controling load reporting.", "committedDate": "2020-08-10T20:20:53Z", "type": "commit"}, {"oid": "bd48b69c675dad43896fcab6b9714009dbe94514", "url": "https://github.com/grpc/grpc-java/commit/bd48b69c675dad43896fcab6b9714009dbe94514", "message": "Add a reference counting wrapper for objects.", "committedDate": "2020-08-11T04:48:15Z", "type": "commit"}, {"oid": "84e6579217486006030ac13b6b010047d802096b", "url": "https://github.com/grpc/grpc-java/commit/84e6579217486006030ac13b6b010047d802096b", "message": "Eliminate counter's internal reference tracking, use external reference counting.", "committedDate": "2020-08-11T04:49:07Z", "type": "commit"}, {"oid": "d35e66e12919a94251f7a6cc0918e8962d6029a1", "url": "https://github.com/grpc/grpc-java/commit/d35e66e12919a94251f7a6cc0918e8962d6029a1", "message": "Reference count the localities added for load recording.", "committedDate": "2020-08-11T04:49:47Z", "type": "commit"}, {"oid": "801b23d9db2060fce4c5a5d76bfddab16104aaa0", "url": "https://github.com/grpc/grpc-java/commit/801b23d9db2060fce4c5a5d76bfddab16104aaa0", "message": "Use the shared class for reference count wrapper.", "committedDate": "2020-08-11T05:04:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMTQwNA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468331404", "bodyText": "As a reminder, active is true if this counter is currently in-use by some LB policy to track loads sent to a specific locality.\nWe do not mark internally if a counter is still in use by some LB policy, instead ref-count the usage of this counter externally by wrapping a counter with ReferenceCounted.", "author": "voidzcy", "createdAt": "2020-08-11T05:17:00Z", "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "diffHunk": "@@ -54,27 +54,10 @@\n   private final AtomicLong callsIssued = new AtomicLong();\n   private final MetricRecorder[] metricRecorders = new MetricRecorder[THREAD_BALANCING_FACTOR];\n \n-  // True if this counter continues to record stats after next snapshot. Otherwise, it will be\n-  // discarded.\n-  private boolean active;", "originalCommit": "801b23d9db2060fce4c5a5d76bfddab16104aaa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMTU5NA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468331594", "bodyText": "Replaced by individual setters as the way of testing has changed.", "author": "voidzcy", "createdAt": "2020-08-11T05:17:49Z", "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "diffHunk": "@@ -54,27 +54,10 @@\n   private final AtomicLong callsIssued = new AtomicLong();\n   private final MetricRecorder[] metricRecorders = new MetricRecorder[THREAD_BALANCING_FACTOR];\n \n-  // True if this counter continues to record stats after next snapshot. Otherwise, it will be\n-  // discarded.\n-  private boolean active;\n-\n   ClientLoadCounter() {\n     for (int i = 0; i < THREAD_BALANCING_FACTOR; i++) {\n       metricRecorders[i] = new MetricRecorder();\n     }\n-    active = true;\n-  }\n-\n-  /**\n-   * Must only be used for testing.\n-   */\n-  @VisibleForTesting\n-  ClientLoadCounter(long callsSucceeded, long callsInProgress, long callsFailed, long callsIssued) {", "originalCommit": "801b23d9db2060fce4c5a5d76bfddab16104aaa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMzEzNg==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468333136", "bodyText": "As the specification of this class says, this wrapper class does not own the object, the real owner of the object takes the responsibility for throwing away the object when the reference count reaches 0. So access to the object should still be allowed even if the reference count reaches 0. This is useful for load counters: we need reference count to know when to evict them from the stats object (aka, ref count = 0), but we still want counters with ref count = 0 to stay there until its remaining values are read off.", "author": "voidzcy", "createdAt": "2020-08-11T05:23:35Z", "path": "xds/src/main/java/io/grpc/xds/ReferenceCounted.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+/**\n+ * A reference count wrapper for objects. This class does not take the ownership for the object,\n+ * but only provides usage counting. The real owner of the wrapped object is responsible for\n+ * managing the lifecycle of the object.\n+ *\n+ * <p>Intended for a container class to keep track of lifecycle for elements it contains. This\n+ * wrapper itself should never be returned to the consumers of the elements to avoid reference\n+ * counts being leaked.\n+ */\n+final class ReferenceCounted<T> {\n+  private final T instance;\n+  private int refs;\n+\n+  private ReferenceCounted(T instance) {\n+    this.instance = instance;\n+  }\n+\n+  static <T> ReferenceCounted<T> wrap(T instance) {\n+    checkNotNull(instance, \"instance\");\n+    return new ReferenceCounted<>(instance);\n+  }\n+\n+  void retain() {\n+    refs++;\n+  }\n+\n+  void release() {\n+    checkState(refs > 0, \"reference reached 0\");\n+    refs--;\n+  }\n+\n+  int getReferenceCount() {\n+    return refs;\n+  }\n+\n+  T get() {\n+    return instance;", "originalCommit": "801b23d9db2060fce4c5a5d76bfddab16104aaa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwODY3NA==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468708674", "bodyText": "Why changed this?", "author": "dapengzhang0", "createdAt": "2020-08-11T16:26:46Z", "path": "xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java", "diffHunk": "@@ -125,27 +122,25 @@ public ClusterStats generateLoadReport() {\n \n   @Override\n   public void addLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter == null || !counter.isActive(),\n-        \"An active counter for locality %s already exists\", locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n     if (counter == null) {\n-      localityLoadCounters.put(locality, new ClientLoadCounter());\n-    } else {\n-      counter.setActive(true);\n+      counter = ReferenceCounted.wrap(new ClientLoadCounter());\n+      localityLoadCounters.put(locality, counter);\n     }\n+    counter.retain();\n   }\n \n   @Override\n   public void removeLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter != null && counter.isActive(),\n-        \"No active counter for locality %s exists\", locality);\n-    counter.setActive(false);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n+    counter.release();\n   }\n \n+  @Nullable\n   @Override\n   public ClientLoadCounter getLocalityCounter(final Locality locality) {\n-    return localityLoadCounters.get(locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n+    return counter == null || counter.getReferenceCount() == 0 ? null : counter.get();", "originalCommit": "d35e66e12919a94251f7a6cc0918e8962d6029a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjAxMg==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468722012", "bodyText": "Following the same specification of the API as before, if the locality is is not under track, return null. We don't want to break in the middle as that makes this API fragile.", "author": "voidzcy", "createdAt": "2020-08-11T16:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwODY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6b4199d7b4a021309341adcf7a6b05065d336b6c", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java b/xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java\nindex 8d419d4bf..6a8b54472 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java\n\n@@ -121,13 +121,14 @@ final class LoadStatsStoreImpl implements LoadStatsStore {\n   }\n \n   @Override\n-  public void addLocality(final Locality locality) {\n+  public ClientLoadCounter addLocality(final Locality locality) {\n     ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n     if (counter == null) {\n       counter = ReferenceCounted.wrap(new ClientLoadCounter());\n       localityLoadCounters.put(locality, counter);\n     }\n     counter.retain();\n+    return counter.get();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDY5Mg==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468714692", "bodyText": "What about ClientLoadCounter addLocality(Locality locality)\nand remove ClientLoadCounter getLocalityCounter(Locality locality) ?", "author": "dapengzhang0", "createdAt": "2020-08-11T16:36:02Z", "path": "xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java", "diffHunk": "@@ -105,32 +114,33 @@ public ClusterStats generateLoadReport() {\n           .setDroppedCount(drops));\n     }\n     statsBuilder.setTotalDroppedRequests(totalDrops);\n+    statsBuilder.setLoadReportInterval(\n+        Durations.fromNanos(stopwatch.elapsed(TimeUnit.NANOSECONDS)));\n+    stopwatch.reset().start();\n     return statsBuilder.build();\n   }\n \n   @Override\n   public void addLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter == null || !counter.isActive(),\n-        \"An active counter for locality %s already exists\", locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);", "originalCommit": "801b23d9db2060fce4c5a5d76bfddab16104aaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczNDY1MQ==", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468734651", "bodyText": "Yeah, that may make it better. Done.", "author": "voidzcy", "createdAt": "2020-08-11T17:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6b4199d7b4a021309341adcf7a6b05065d336b6c", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java b/xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java\nindex 8d419d4bf..6a8b54472 100644\n--- a/xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java\n+++ b/xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java\n\n@@ -121,13 +121,14 @@ final class LoadStatsStoreImpl implements LoadStatsStore {\n   }\n \n   @Override\n-  public void addLocality(final Locality locality) {\n+  public ClientLoadCounter addLocality(final Locality locality) {\n     ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n     if (counter == null) {\n       counter = ReferenceCounted.wrap(new ClientLoadCounter());\n       localityLoadCounters.put(locality, counter);\n     }\n     counter.retain();\n+    return counter.get();\n   }\n \n   @Override\n"}}, {"oid": "6b4199d7b4a021309341adcf7a6b05065d336b6c", "url": "https://github.com/grpc/grpc-java/commit/6b4199d7b4a021309341adcf7a6b05065d336b6c", "message": "Combine add and get load counter method for LoadStatsStore.", "committedDate": "2020-08-11T17:08:28Z", "type": "commit"}]}