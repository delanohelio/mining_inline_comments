{"pr_number": 7071, "pr_title": "stub: Have disableAutoRequest() on server-side", "pr_createdAt": "2020-05-27T23:08:53Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7071", "timeline": [{"oid": "56ef0de41288b9b6926746063d3485c6532eb867", "url": "https://github.com/grpc/grpc-java/commit/56ef0de41288b9b6926746063d3485c6532eb867", "message": "stub: Have disableAutoRequest() on server-side\n\nThis splits server-side flow control from client-side, but tailors the API for\neach case. Client-side continues having disableAutoRequestWithInitial(). While\nclient-side could have disableAutoRequest(), it seems like it will only rarely\nbe used and disableAutoRequestWithInitial(0) isn't that bad. So we leave it off\nfor now; we can always add it in the future.", "committedDate": "2020-05-27T23:05:03Z", "type": "commit"}, {"oid": "fe48b56960f0f52d38e782ffd0666e8527121612", "url": "https://github.com/grpc/grpc-java/commit/fe48b56960f0f52d38e782ffd0666e8527121612", "message": "Fix example", "committedDate": "2020-05-28T13:35:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDE4NA==", "url": "https://github.com/grpc/grpc-java/pull/7071#discussion_r431994184", "bodyText": "If you disable auto request before setting the onReadyHandler, then you don't need the explicit first request (next line). I mean, why you move the disable auto request to after setting onReadHandler?", "author": "voidzcy", "createdAt": "2020-05-28T17:11:19Z", "path": "examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java", "diffHunk": "@@ -69,6 +66,11 @@ public void run() {\n         }\n         final OnReadyHandler onReadyHandler = new OnReadyHandler();\n         serverCallStreamObserver.setOnReadyHandler(onReadyHandler);\n+        // Set up manual flow control for the request stream. It feels backwards to configure the request\n+        // stream's flow control using the response stream's observer, but this is the way it is.\n+        serverCallStreamObserver.disableAutoRequest();", "originalCommit": "fe48b56960f0f52d38e782ffd0666e8527121612", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMzI1OA==", "url": "https://github.com/grpc/grpc-java/pull/7071#discussion_r432013258", "bodyText": "Update: take my previous words back. The order of disabling auto request and setting onReadyHandler doesn't matter, they both happen before server starts processing messages. But I am still a bit confused why we need to manually request the first message? How the onReadyHandler invocation would be missed?", "author": "voidzcy", "createdAt": "2020-05-28T17:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyMzkyNw==", "url": "https://github.com/grpc/grpc-java/pull/7071#discussion_r432123927", "bodyText": "The previous release of this code (in v1.29) had an (implicit) request(1) for the first message. When it was converted to disableAutoRequestWithInitial() the behavior was changed; to match the old behavior it should have used disableAutoRequestWithInitial(1) but it did disableAutoRequestWithInitial(0) instead. This was done due to a misunderstanding of the previous behavior.\nIf the RPC is already ready at this point, will onReady be called? The API isn't required to. The API says it is called when transitioning from false to true; so you technically have to have seen isReady() == false before onReady() is guaranteed.\nThat said, I do know this code currently works without the initial request(), because onReady is called unnecessarily. But I don't want to encourage depending on that behavior.", "author": "ejona86", "createdAt": "2020-05-28T21:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MTE1Nw==", "url": "https://github.com/grpc/grpc-java/pull/7071#discussion_r432671157", "bodyText": "Oh, I'm wrong. The previous implementation didn't do request(1) with manual flow control.", "author": "ejona86", "createdAt": "2020-05-29T18:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "7c724934508bbdeb0cb6b22da619e09f10885547", "chunk": "diff --git a/examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java b/examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java\nindex f99b1d9ad..de8142596 100644\n--- a/examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java\n+++ b/examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java\n\n@@ -66,11 +69,6 @@ public class ManualFlowControlServer {\n         }\n         final OnReadyHandler onReadyHandler = new OnReadyHandler();\n         serverCallStreamObserver.setOnReadyHandler(onReadyHandler);\n-        // Set up manual flow control for the request stream. It feels backwards to configure the request\n-        // stream's flow control using the response stream's observer, but this is the way it is.\n-        serverCallStreamObserver.disableAutoRequest();\n-        // Trigger request(1) for initial message, if ready\n-        onReadyHandler.run();\n \n         // Give gRPC a StreamObserver that can observe and process incoming requests.\n         return new StreamObserver<HelloRequest>() {\n"}}, {"oid": "7c724934508bbdeb0cb6b22da619e09f10885547", "url": "https://github.com/grpc/grpc-java/commit/7c724934508bbdeb0cb6b22da619e09f10885547", "message": "Fix mistake thinking previous API did request(1)", "committedDate": "2020-05-29T18:43:18Z", "type": "commit"}]}