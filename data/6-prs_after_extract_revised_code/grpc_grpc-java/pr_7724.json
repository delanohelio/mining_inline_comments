{"pr_number": 7724, "pr_title": "Add exporting SSL/TLS master key log feature", "pr_createdAt": "2020-12-12T09:38:49Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7724", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMzM3Ng==", "url": "https://github.com/grpc/grpc-java/pull/7724#discussion_r542603376", "bodyText": "These resets don't do anything, as the test is over. Remove them?", "author": "ejona86", "createdAt": "2020-12-14T18:18:30Z", "path": "netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java", "diffHunk": "@@ -179,6 +195,10 @@ public void tearDown() {\n       chan.close();\n     }\n     group.shutdownGracefully();\n+\n+    Mockito.reset(mockLogger4KeyLog);", "originalCommit": "e4bf807750284aa297a8d3aaa568184c1b1418f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "chunk": "diff --git a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\nindex c62a3610c..0ff1f8fc4 100644\n--- a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n+++ b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n\n@@ -195,10 +182,6 @@ public class ProtocolNegotiatorsTest {\n       chan.close();\n     }\n     group.shutdownGracefully();\n-\n-    Mockito.reset(mockLogger4KeyLog);\n-    Mockito.reset(mockLogger4Others);\n-    InternalLoggerFactory.setDefaultFactory(oldLoggerFactory);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMzk2OA==", "url": "https://github.com/grpc/grpc-java/pull/7724#discussion_r542603968", "bodyText": "This should be part of the one test that actually uses it.", "author": "ejona86", "createdAt": "2020-12-14T18:19:16Z", "path": "netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java", "diffHunk": "@@ -168,6 +179,11 @@ public void setUp() throws Exception {\n         .ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE).build();\n     engine = SSLContext.getDefault().createSSLEngine();\n     engine.setUseClientMode(true);\n+\n+    oldLoggerFactory = InternalLoggerFactory.getDefaultFactory();\n+    mockLogger4KeyLog = mock(InternalLogger.class);\n+    mockLogger4Others = mock(InternalLogger.class);\n+    InternalLoggerFactory.setDefaultFactory(new FakeLoggerFactory());", "originalCommit": "e4bf807750284aa297a8d3aaa568184c1b1418f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "chunk": "diff --git a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\nindex c62a3610c..0ff1f8fc4 100644\n--- a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n+++ b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n\n@@ -179,11 +171,6 @@ public class ProtocolNegotiatorsTest {\n         .ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE).build();\n     engine = SSLContext.getDefault().createSSLEngine();\n     engine.setUseClientMode(true);\n-\n-    oldLoggerFactory = InternalLoggerFactory.getDefaultFactory();\n-    mockLogger4KeyLog = mock(InternalLogger.class);\n-    mockLogger4Others = mock(InternalLogger.class);\n-    InternalLoggerFactory.setDefaultFactory(new FakeLoggerFactory());\n   }\n \n   @After\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNTkyNQ==", "url": "https://github.com/grpc/grpc-java/pull/7724#discussion_r542605925", "bodyText": "Merge this mock initialization with the declaration on lines 170-171.", "author": "ejona86", "createdAt": "2020-12-14T18:21:03Z", "path": "netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java", "diffHunk": "@@ -168,6 +179,11 @@ public void setUp() throws Exception {\n         .ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE).build();\n     engine = SSLContext.getDefault().createSSLEngine();\n     engine.setUseClientMode(true);\n+\n+    oldLoggerFactory = InternalLoggerFactory.getDefaultFactory();\n+    mockLogger4KeyLog = mock(InternalLogger.class);", "originalCommit": "e4bf807750284aa297a8d3aaa568184c1b1418f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "chunk": "diff --git a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\nindex c62a3610c..0ff1f8fc4 100644\n--- a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n+++ b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n\n@@ -179,11 +171,6 @@ public class ProtocolNegotiatorsTest {\n         .ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE).build();\n     engine = SSLContext.getDefault().createSSLEngine();\n     engine.setUseClientMode(true);\n-\n-    oldLoggerFactory = InternalLoggerFactory.getDefaultFactory();\n-    mockLogger4KeyLog = mock(InternalLogger.class);\n-    mockLogger4Others = mock(InternalLogger.class);\n-    InternalLoggerFactory.setDefaultFactory(new FakeLoggerFactory());\n   }\n \n   @After\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNzk3Nw==", "url": "https://github.com/grpc/grpc-java/pull/7724#discussion_r542607977", "bodyText": "any(String.class). Ditto elsewhere.", "author": "ejona86", "createdAt": "2020-12-14T18:22:54Z", "path": "netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java", "diffHunk": "@@ -1190,4 +1210,81 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n       ctx.pipeline().fireUserEventTriggered(ProtocolNegotiationEvent.DEFAULT);\n     }\n   }\n+\n+  @Test\n+  public void clientTlsHandler_serverTlsHandler_sslMasterKeyLog() throws Exception {\n+    // The master key log feature should be disabled\n+    // when the \"io.netty.ssl.masterKeyHandler\" property is missing.\n+    System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n+    clientTlsHandler_firesNegotiation();\n+    verify(mockLogger4KeyLog, never()).warn(argThat(new ArgumentMatcher<String>() {\n+      @Override\n+      public boolean matches(String arg) {\n+        return arg.contains(\" Master-Key:\");\n+      }\n+    }), argThat(new ArgumentMatcher<String>() {", "originalCommit": "e4bf807750284aa297a8d3aaa568184c1b1418f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "chunk": "diff --git a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\nindex c62a3610c..0ff1f8fc4 100644\n--- a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n+++ b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n\n@@ -1213,78 +1196,50 @@ public class ProtocolNegotiatorsTest {\n \n   @Test\n   public void clientTlsHandler_serverTlsHandler_sslMasterKeyLog() throws Exception {\n-    // The master key log feature should be disabled\n-    // when the \"io.netty.ssl.masterKeyHandler\" property is missing.\n-    System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n-    clientTlsHandler_firesNegotiation();\n-    verify(mockLogger4KeyLog, never()).warn(argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return arg.contains(\" Master-Key:\");\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n+    final List<LogRecord> logs = new ArrayList<>();\n+    Handler handler = new Handler() {\n+      @Override public void publish(LogRecord record) {\n+        logs.add(record);\n       }\n-    }));\n \n-    // The master key log feature should be disabled\n-    // when the value of \"io.netty.ssl.masterKeyHandler\" property is not \"true\".\n-    System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"false\");\n-    clientTlsHandler_firesNegotiation();\n-    verify(mockLogger4KeyLog, never()).warn(argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return arg.contains(\" Master-Key:\");\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }));\n-\n-    // The master key log feature should be enabled\n-    // when the value of \"io.netty.ssl.masterKeyHandler\" property is \"true\".\n-    System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"true\");\n-    clientTlsHandler_firesNegotiation();\n-    // writing key twice because both client and server will enable key log feature\n-    verify(mockLogger4KeyLog, times(2)).warn(argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        // writing key in one line each time, like:\n-        // \"RSA Session-ID:9da5b... Master-Key:5d74b...\\n\"\n-        return arg.contains(\" Master-Key:\");\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }));\n-    System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n-  }\n+      @Override public void flush() {}\n \n-  private class FakeLoggerFactory extends InternalLoggerFactory {\n-    @Override\n-    protected InternalLogger newInstance(String name) {\n-      return name.equals(\"io.netty.wireshark\") ? mockLogger4KeyLog : mockLogger4Others;\n+      @Override public void close() {}\n+    };\n+\n+    Logger logger = Logger.getLogger(\"io.netty.wireshark\");\n+    logger.addHandler(handler);\n+\n+    String oldPropValue = System.getProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n+    try {\n+      // The master key log feature should be disabled\n+      // when the \"io.netty.ssl.masterKeyHandler\" property is missing.\n+      System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n+      clientTlsHandler_firesNegotiation();\n+      assertThat(logs).isEmpty();\n+\n+      // The master key log feature should be disabled\n+      // when the value of \"io.netty.ssl.masterKeyHandler\" property is not \"true\".\n+      System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"false\");\n+      clientTlsHandler_firesNegotiation();\n+      assertThat(logs).isEmpty();\n+\n+      // The master key log feature should be enabled\n+      // when the value of \"io.netty.ssl.masterKeyHandler\" property is \"true\".\n+      System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"true\");\n+      clientTlsHandler_firesNegotiation();\n+\n+      // writing key twice because both client and server will enable key log feature\n+      assertThat(logs.size()).isEqualTo(2);\n+      assertThat(logs.get(0).getMessage()).containsMatch(\"^RSA Session-ID:.+ Master-Key:\");\n+      assertThat(logs.get(1).getMessage()).containsMatch(\"^RSA Session-ID:.+ Master-Key:\");\n+    } finally {\n+      logger.removeHandler(handler);\n+      if (oldPropValue != null) {\n+        System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, oldPropValue);\n+      } else {\n+        System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n+      }\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwODc4MA==", "url": "https://github.com/grpc/grpc-java/pull/7724#discussion_r542608780", "bodyText": "ArgumentMatchers.contains(\" Master-Key:\"). Ditto elsewhere.", "author": "ejona86", "createdAt": "2020-12-14T18:23:39Z", "path": "netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java", "diffHunk": "@@ -1190,4 +1210,81 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n       ctx.pipeline().fireUserEventTriggered(ProtocolNegotiationEvent.DEFAULT);\n     }\n   }\n+\n+  @Test\n+  public void clientTlsHandler_serverTlsHandler_sslMasterKeyLog() throws Exception {\n+    // The master key log feature should be disabled\n+    // when the \"io.netty.ssl.masterKeyHandler\" property is missing.\n+    System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n+    clientTlsHandler_firesNegotiation();\n+    verify(mockLogger4KeyLog, never()).warn(argThat(new ArgumentMatcher<String>() {", "originalCommit": "e4bf807750284aa297a8d3aaa568184c1b1418f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "chunk": "diff --git a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\nindex c62a3610c..0ff1f8fc4 100644\n--- a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n+++ b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n\n@@ -1213,78 +1196,50 @@ public class ProtocolNegotiatorsTest {\n \n   @Test\n   public void clientTlsHandler_serverTlsHandler_sslMasterKeyLog() throws Exception {\n-    // The master key log feature should be disabled\n-    // when the \"io.netty.ssl.masterKeyHandler\" property is missing.\n-    System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n-    clientTlsHandler_firesNegotiation();\n-    verify(mockLogger4KeyLog, never()).warn(argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return arg.contains(\" Master-Key:\");\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n+    final List<LogRecord> logs = new ArrayList<>();\n+    Handler handler = new Handler() {\n+      @Override public void publish(LogRecord record) {\n+        logs.add(record);\n       }\n-    }));\n \n-    // The master key log feature should be disabled\n-    // when the value of \"io.netty.ssl.masterKeyHandler\" property is not \"true\".\n-    System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"false\");\n-    clientTlsHandler_firesNegotiation();\n-    verify(mockLogger4KeyLog, never()).warn(argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return arg.contains(\" Master-Key:\");\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }));\n-\n-    // The master key log feature should be enabled\n-    // when the value of \"io.netty.ssl.masterKeyHandler\" property is \"true\".\n-    System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"true\");\n-    clientTlsHandler_firesNegotiation();\n-    // writing key twice because both client and server will enable key log feature\n-    verify(mockLogger4KeyLog, times(2)).warn(argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        // writing key in one line each time, like:\n-        // \"RSA Session-ID:9da5b... Master-Key:5d74b...\\n\"\n-        return arg.contains(\" Master-Key:\");\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }), argThat(new ArgumentMatcher<String>() {\n-      @Override\n-      public boolean matches(String arg) {\n-        return true;\n-      }\n-    }));\n-    System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n-  }\n+      @Override public void flush() {}\n \n-  private class FakeLoggerFactory extends InternalLoggerFactory {\n-    @Override\n-    protected InternalLogger newInstance(String name) {\n-      return name.equals(\"io.netty.wireshark\") ? mockLogger4KeyLog : mockLogger4Others;\n+      @Override public void close() {}\n+    };\n+\n+    Logger logger = Logger.getLogger(\"io.netty.wireshark\");\n+    logger.addHandler(handler);\n+\n+    String oldPropValue = System.getProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n+    try {\n+      // The master key log feature should be disabled\n+      // when the \"io.netty.ssl.masterKeyHandler\" property is missing.\n+      System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n+      clientTlsHandler_firesNegotiation();\n+      assertThat(logs).isEmpty();\n+\n+      // The master key log feature should be disabled\n+      // when the value of \"io.netty.ssl.masterKeyHandler\" property is not \"true\".\n+      System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"false\");\n+      clientTlsHandler_firesNegotiation();\n+      assertThat(logs).isEmpty();\n+\n+      // The master key log feature should be enabled\n+      // when the value of \"io.netty.ssl.masterKeyHandler\" property is \"true\".\n+      System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"true\");\n+      clientTlsHandler_firesNegotiation();\n+\n+      // writing key twice because both client and server will enable key log feature\n+      assertThat(logs.size()).isEqualTo(2);\n+      assertThat(logs.get(0).getMessage()).containsMatch(\"^RSA Session-ID:.+ Master-Key:\");\n+      assertThat(logs.get(1).getMessage()).containsMatch(\"^RSA Session-ID:.+ Master-Key:\");\n+    } finally {\n+      logger.removeHandler(handler);\n+      if (oldPropValue != null) {\n+        System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, oldPropValue);\n+      } else {\n+        System.clearProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY);\n+      }\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5OTk4Nw==", "url": "https://github.com/grpc/grpc-java/pull/7724#discussion_r542699987", "bodyText": "Instead of returning this mockLogger4Others, how about the factory delegate to oldLoggerFactory?\nHonestly, even for mockLogger4KeyLog it'd probably be better to use AdditionalAnswers.delegatesTo() and delegate to a real instance. That gets you the recording capability of the mock while not needing to define Answers. Right now if the code under test did things like calling isWarnEnabled() it would be returned false and so may not log at all. That would fail one of the tests, but it is still good to back mocks with real objects for anything other than Listeners.", "author": "ejona86", "createdAt": "2020-12-14T19:44:45Z", "path": "netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java", "diffHunk": "@@ -160,6 +167,10 @@ public static void loadCerts() throws Exception {\n   private SSLEngine engine;\n   private ChannelHandlerContext channelHandlerCtx;\n \n+  private InternalLogger mockLogger4KeyLog;\n+  private InternalLogger mockLogger4Others;", "originalCommit": "e4bf807750284aa297a8d3aaa568184c1b1418f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "chunk": "diff --git a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\nindex c62a3610c..0ff1f8fc4 100644\n--- a/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n+++ b/netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java\n\n@@ -167,10 +163,6 @@ public class ProtocolNegotiatorsTest {\n   private SSLEngine engine;\n   private ChannelHandlerContext channelHandlerCtx;\n \n-  private InternalLogger mockLogger4KeyLog;\n-  private InternalLogger mockLogger4Others;\n-  private InternalLoggerFactory oldLoggerFactory;\n-\n   @Before\n   public void setUp() throws Exception {\n     File serverCert = TestUtils.loadCert(\"server1.pem\");\n"}}, {"oid": "6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "url": "https://github.com/grpc/grpc-java/commit/6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "message": "Add exporting SSL/TLS master key log feature\n\nEnable this feature by setting the system property\n   -Dio.netty.ssl.masterKeyHandler=true\nor\n   System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"true\");\nThe keys will be written to the log named \"io.netty.wireshark\" in\nthe warnning level. To export the keys to a file, you can configure\nlog factory like: (with log4j.xml for example)\n<appender name=\"key-file\" class=\"org.apache.log4j.RollingFileAppender\">\n\t<param name=\"file\" value=\"d:/keyfile.txt\"/>\n\t<layout class=\"org.apache.log4j.PatternLayout\">\n\t\t<param name=\"ConversionPattern\" value=\"%m%n\"/>\n\t</layout>\n</appender>\n<category name=\"io.netty.wireshark\">\n\t<priority value=\"DEBUG\" />\n\t<appender-ref ref=\"key-file\" />\n</category>\n\nWireshark can analyze the messages gRPC over TLS with this\nkey log file.\n\nclose #7199", "committedDate": "2020-12-15T11:28:41Z", "type": "commit"}, {"oid": "6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "url": "https://github.com/grpc/grpc-java/commit/6fd225cd3aa9035a865a9d46ddd1056bb600d7d0", "message": "Add exporting SSL/TLS master key log feature\n\nEnable this feature by setting the system property\n   -Dio.netty.ssl.masterKeyHandler=true\nor\n   System.setProperty(SslMasterKeyHandler.SYSTEM_PROP_KEY, \"true\");\nThe keys will be written to the log named \"io.netty.wireshark\" in\nthe warnning level. To export the keys to a file, you can configure\nlog factory like: (with log4j.xml for example)\n<appender name=\"key-file\" class=\"org.apache.log4j.RollingFileAppender\">\n\t<param name=\"file\" value=\"d:/keyfile.txt\"/>\n\t<layout class=\"org.apache.log4j.PatternLayout\">\n\t\t<param name=\"ConversionPattern\" value=\"%m%n\"/>\n\t</layout>\n</appender>\n<category name=\"io.netty.wireshark\">\n\t<priority value=\"DEBUG\" />\n\t<appender-ref ref=\"key-file\" />\n</category>\n\nWireshark can analyze the messages gRPC over TLS with this\nkey log file.\n\nclose #7199", "committedDate": "2020-12-15T11:28:41Z", "type": "forcePushed"}]}