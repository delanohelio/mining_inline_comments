{"pr_number": 7137, "pr_title": "xds: use fallback PN if you get exception while retrieving SslContextProvider", "pr_createdAt": "2020-06-18T01:05:31Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7137", "timeline": [{"oid": "03db058d4f1e72e298d83648685e0b813c071df2", "url": "https://github.com/grpc/grpc-java/commit/03db058d4f1e72e298d83648685e0b813c071df2", "message": "xds: use fallback PN if you get exception while retrieving SslContextProvider", "committedDate": "2020-06-18T01:02:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTI4OQ==", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r441935289", "bodyText": "does this need to run in an executor? it seems like it should be fine without it.", "author": "creamsoup", "createdAt": "2020-06-18T02:37:29Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -338,29 +344,49 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n       checkNotNull(grpcHandler, \"grpcHandler\");\n       this.grpcHandler = grpcHandler;\n       this.downstreamTlsContext = downstreamTlsContext;\n+      this.fallbackProtocolNegotiator = fallbackProtocolNegotiator;\n     }\n \n     @Override\n     protected void handlerAdded0(final ChannelHandlerContext ctx) {\n       final BufferReadsHandler bufferReads = new BufferReadsHandler();\n       ctx.pipeline().addBefore(ctx.name(), null, bufferReads);\n \n-      final SslContextProvider sslContextProvider =\n-              TlsContextManagerImpl.getInstance()\n-                      .findOrCreateServerSslContextProvider(downstreamTlsContext);\n-\n+      SslContextProvider sslContextProviderTemp = null;\n+      try {\n+        sslContextProviderTemp =\n+            TlsContextManagerImpl.getInstance()\n+                .findOrCreateServerSslContextProvider(downstreamTlsContext);\n+      } catch (Exception e) {\n+        if (fallbackProtocolNegotiator == null) {\n+          ctx.fireExceptionCaught(new CertStoreException(\"No certificate source found!\", e));\n+          return;\n+        }\n+        logger.log(Level.INFO, \"Using fallback for {0}\", ctx.channel().localAddress());\n+        // Delegate rest of handshake to fallback handler\n+        ctx.executor()", "originalCommit": "03db058d4f1e72e298d83648685e0b813c071df2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODIxOA==", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r441988218", "bodyText": "I had tried without the executor and I got the following exception. Probably because this was called inside handlerAdded0.\nio.netty.channel.ChannelPipelineException: io.grpc.xds.internal.sds.SdsProtocolNegotiators$ServerSdsHandler.handlerAdded() has thrown an exception; removed.\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:624)\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:572)\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:509)\n\tat io.grpc.xds.internal.sds.SdsProtocolNegotiators$HandlerPickerHandler.userEventTriggered(SdsProtocolNegotiators.java:308)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeUserEventTriggered(AbstractChannelHandlerContext.java:346)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeUserEventTriggered(AbstractChannelHandlerContext.java:332)\n...\nCaused by: java.lang.IllegalStateException: previous protocol negotiation event hasn't triggered\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:511)\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.fireProtocolNegotiationEvent(ProtocolNegotiators.java:765)\n\tat io.grpc.xds.internal.sds.SdsProtocolNegotiators$ServerSdsHandler.replaceHandler(SdsProtocolNegotiators.java:405)\n\tat io.grpc.xds.internal.sds.SdsProtocolNegotiators$ServerSdsHandler.handlerAdded0(SdsProtocolNegotiators.java:372)\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.handlerAdded(ProtocolNegotiators.java:726)\n\t... 36 more", "author": "sanjaypujare", "createdAt": "2020-06-18T06:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NDU2MA==", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r442344560", "bodyText": "the problem here is you suppose to fire ProtocolNegotiationEvent when you received it from previous handler (unless it is the very first one). handlerAdded shouldn't just fire the PNE.", "author": "creamsoup", "createdAt": "2020-06-18T16:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2NTg2NA==", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r442365864", "bodyText": "Okay, fixed: by just calling replace to replace the current handler", "author": "sanjaypujare", "createdAt": "2020-06-18T16:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb4f4a12d7a617154c01465a147a288db1ab2b84", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java b/xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java\nindex a6d6cdcde..837ad2ab5 100644\n--- a/xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java\n+++ b/xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java\n\n@@ -364,15 +364,8 @@ public final class SdsProtocolNegotiators {\n         }\n         logger.log(Level.INFO, \"Using fallback for {0}\", ctx.channel().localAddress());\n         // Delegate rest of handshake to fallback handler\n-        ctx.executor()\n-            .execute(\n-                new Runnable() {\n-                  @Override\n-                  public void run() {\n-                    replaceHandler(\n-                        fallbackProtocolNegotiator.newHandler(grpcHandler), ctx, bufferReads);\n-                  }\n-                });\n+        ctx.pipeline().replace(this, null, fallbackProtocolNegotiator.newHandler(grpcHandler));\n+        ctx.pipeline().remove(bufferReads);\n         return;\n       }\n       final SslContextProvider sslContextProvider = sslContextProviderTemp;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTcwNA==", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r441935704", "bodyText": "indentations are off in this test.", "author": "creamsoup", "createdAt": "2020-06-18T02:38:57Z", "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -89,6 +89,18 @@ public void plaintextClientServer() throws IOException, URISyntaxException {\n     assertThat(unaryRpc(\"buddy\", blockingStub)).isEqualTo(\"Hello buddy\");\n   }\n \n+  @Test\n+  public void plaintextClientServer_withDefaultTlsContext() throws IOException, URISyntaxException {\n+    DownstreamTlsContext defaultTlsContext =\n+            EnvoyServerProtoData.DownstreamTlsContext.fromEnvoyProtoDownstreamTlsContext(", "originalCommit": "03db058d4f1e72e298d83648685e0b813c071df2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTI5OQ==", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r441989299", "bodyText": "fixed", "author": "sanjaypujare", "createdAt": "2020-06-18T06:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8b79cea9bf336289c0d670dcc498ab5713205e6a", "chunk": "diff --git a/xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java b/xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java\nindex cb8408da8..0d58a38a7 100644\n--- a/xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java\n+++ b/xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java\n\n@@ -92,8 +92,8 @@ public class XdsSdsClientServerTest {\n   @Test\n   public void plaintextClientServer_withDefaultTlsContext() throws IOException, URISyntaxException {\n     DownstreamTlsContext defaultTlsContext =\n-            EnvoyServerProtoData.DownstreamTlsContext.fromEnvoyProtoDownstreamTlsContext(\n-                    io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.getDefaultInstance());\n+        EnvoyServerProtoData.DownstreamTlsContext.fromEnvoyProtoDownstreamTlsContext(\n+            io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.getDefaultInstance());\n     buildServerWithTlsContext(/* downstreamTlsContext= */ defaultTlsContext);\n \n     SimpleServiceGrpc.SimpleServiceBlockingStub blockingStub =\n"}}, {"oid": "8b79cea9bf336289c0d670dcc498ab5713205e6a", "url": "https://github.com/grpc/grpc-java/commit/8b79cea9bf336289c0d670dcc498ab5713205e6a", "message": "fix indentation", "committedDate": "2020-06-18T06:10:39Z", "type": "commit"}, {"oid": "eb4f4a12d7a617154c01465a147a288db1ab2b84", "url": "https://github.com/grpc/grpc-java/commit/eb4f4a12d7a617154c01465a147a288db1ab2b84", "message": "address comments: PNE not needed and we can just call replace", "committedDate": "2020-06-18T16:47:21Z", "type": "commit"}]}