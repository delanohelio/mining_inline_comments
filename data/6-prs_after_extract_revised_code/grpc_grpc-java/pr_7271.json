{"pr_number": 7271, "pr_title": "xds: Add server features support to Bootstrapper", "pr_createdAt": "2020-07-30T21:32:57Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7271", "timeline": [{"oid": "0b1b9d9d45dc25bc2d991deeee2a94077c1c5c40", "url": "https://github.com/grpc/grpc-java/commit/0b1b9d9d45dc25bc2d991deeee2a94077c1c5c40", "message": "xds: Add server features support to Bootstrapper", "committedDate": "2020-07-30T21:30:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5OTg4MQ==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463299881", "bodyText": "It doesn't make sense to put such an API here. This makes a factory class stateful.\nMaybe it is time to eliminate XdsChannelFactory, instead we do need something like Helper.createResolvingOobChannel(), but accessible inside NameResolver.\nLast time when I was doing some local e2e test for traffic splitting and routing, the gRPC channel is using plaintext, but the xDS channel is fixed to use TLS (if not google_default) instead of falling back to use the same configuration as its parent channel. This is broken for Java. It is not bitting us because we are always using TLS if not google_default in production.\nWe should support such a feature correctly. Basically, the creation of xDS channel will be done outside XdsClientImpl. For EDS only's code path, we are roughly able to do it with Helper.createResolvingOobChannel(), so not a problem for migrating.\nFor now, I think a better way is to change the createChannel API for XdsChannelFactory. You could define a simple class that contains a Channel and server features.", "author": "voidzcy", "createdAt": "2020-07-30T22:10:53Z", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -643,5 +650,14 @@ static XdsChannelFactory getInstance() {\n      * Creates a channel to one of the provided management servers.\n      */\n     abstract ManagedChannel createChannel(List<ServerInfo> servers);\n+\n+    /**\n+     * Gets features of the server that the channel is created for. Value is only available\n+     * after {@link #createChannel} is called.\n+     */\n+    @Nullable\n+    List<?> getSelectedServerFeatures() {", "originalCommit": "0b1b9d9d45dc25bc2d991deeee2a94077c1c5c40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwMzYxNQ==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463303615", "bodyText": "The problem is coming from the factory or whatever structure being used for XdsClientIml consumes a list of server_urls. When you create the channel from it, you must know the index of the server_url that is selected, so that you can know the corresponding server feature. If it's only a single server_url, there is no problem at all.", "author": "dapengzhang0", "createdAt": "2020-07-30T22:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5OTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwODU5Mg==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463308592", "bodyText": "A workaround is we pass just one ServerInfo instead of List<ServerInfo> to XdsClientImpl as well as XdsChannelFactory. Because we are actually not supporting multiple management server yet, and the current XdsChannelFactory has a hack to pick the hard coded first ServerInfo in the list.", "author": "dapengzhang0", "createdAt": "2020-07-30T22:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5OTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMTg5MQ==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463311891", "bodyText": "This is what I mean:\nclass XdsChannel {\n  ManagedChannel channel;\n  boolean useProtocolV3;  // or something similar if you have a better idea\n}\n\nXdsChannel createChannel(List<ServerInfo> servers) {\n  ...\n}\n\nThe output of creating channel contains the server feature.", "author": "voidzcy", "createdAt": "2020-07-30T22:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5OTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNDg5Mg==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463314892", "bodyText": "I also thought about that, which introduces yet another class and I had thought you wouldn't like it. I'm totally okay with it.", "author": "dapengzhang0", "createdAt": "2020-07-30T22:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5OTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNjIyNQ==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463316225", "bodyText": ":( Why would you think introducing a new class is bad? \ud83d\ude22  This looks fairly natural with channel and protocol feature encapsulated together.", "author": "voidzcy", "createdAt": "2020-07-30T22:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5OTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyMjA1OQ==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463322059", "bodyText": "Done.", "author": "dapengzhang0", "createdAt": "2020-07-30T23:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5OTg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fe503de1f4ff643f50f0e9c10a40d47cb90d48fb", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/XdsClient.java b/xds/src/main/java/io/grpc/xds/XdsClient.java\nindex 19a42a1ce..77f859d05 100644\n--- a/xds/src/main/java/io/grpc/xds/XdsClient.java\n+++ b/xds/src/main/java/io/grpc/xds/XdsClient.java\n\n@@ -649,15 +645,26 @@ abstract class XdsClient {\n     /**\n      * Creates a channel to one of the provided management servers.\n      */\n-    abstract ManagedChannel createChannel(List<ServerInfo> servers);\n+    abstract XdsChannel createChannel(List<ServerInfo> servers);\n \n-    /**\n-     * Gets features of the server that the channel is created for. Value is only available\n-     * after {@link #createChannel} is called.\n-     */\n-    @Nullable\n-    List<?> getSelectedServerFeatures() {\n-      return null;\n+  }\n+\n+  static final class XdsChannel {\n+    private final ManagedChannel managedChannel;\n+    private final ServerInfo serverInfo;\n+\n+    @VisibleForTesting\n+    XdsChannel(ManagedChannel managedChannel, ServerInfo serverInfo) {\n+      this.managedChannel = managedChannel;\n+      this.serverInfo = serverInfo;\n+    }\n+\n+    ManagedChannel getManagedChannel() {\n+      return managedChannel;\n+    }\n+\n+    ServerInfo getServerInfo() {\n+      return serverInfo;\n     }\n   }\n }\n"}}, {"oid": "fe503de1f4ff643f50f0e9c10a40d47cb90d48fb", "url": "https://github.com/grpc/grpc-java/commit/fe503de1f4ff643f50f0e9c10a40d47cb90d48fb", "message": "refactor XdsChannelFactor return type", "committedDate": "2020-07-30T23:04:28Z", "type": "commit"}, {"oid": "cef59413fa954e7bf1abfea030abbb04014f8548", "url": "https://github.com/grpc/grpc-java/commit/cef59413fa954e7bf1abfea030abbb04014f8548", "message": "expose only proto from ServerInfo", "committedDate": "2020-07-30T23:15:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTU5Mg==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463325592", "bodyText": "Given that the format of server_features is undefined. Maybe it's better to just parse it to a String list.\nThe parser should not try to interpret what is being parsed. It's just a list of string. \"xds_v3\" should be defined in the consumer class, which is XdsChannelFactory (e.g., String PROTOCOL_VERSION = \"xds_v3). The channel factory looks up the parsed server features and check if the expected protocol version setting is there.", "author": "voidzcy", "createdAt": "2020-07-30T23:27:24Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -111,7 +112,11 @@ static BootstrapInfo parseConfig(String rawData) throws IOException {\n           channelCredsOptions.add(creds);\n         }\n       }\n-      servers.add(new ServerInfo(serverUri, channelCredsOptions));\n+      List<?> serverFeatures = JsonUtil.getList(serverConfig, \"server_features\");\n+      if (serverFeatures != null && serverFeatures.contains(XDS_V3_SERVER_FEATURE)) {", "originalCommit": "cef59413fa954e7bf1abfea030abbb04014f8548", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTk2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463325966", "bodyText": "The log here should just print out what is parsed literally.", "author": "voidzcy", "createdAt": "2020-07-30T23:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyODg2OA==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463328868", "bodyText": "Given that the format of server_features is undefined. Maybe it's better to just parse it to a String list.\n\nWhat do you mean actually? The following?\nList<String> serverFeatures = JsonUtil.getListOfStrings(serverConfig, \"server_features\");\nOr just pick all string type items in the list?", "author": "dapengzhang0", "createdAt": "2020-07-30T23:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMDk3Mg==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463330972", "bodyText": "Yeah, just use JsonUtil.getListOfStrings.", "author": "voidzcy", "createdAt": "2020-07-30T23:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNDQzNA==", "url": "https://github.com/grpc/grpc-java/pull/7271#discussion_r463334434", "bodyText": "Done.", "author": "dapengzhang0", "createdAt": "2020-07-30T23:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTU5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c700e81d911a594f19493d2bf81f5090faec0df2", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/Bootstrapper.java b/xds/src/main/java/io/grpc/xds/Bootstrapper.java\nindex ba83af7c2..6fa3c4e57 100644\n--- a/xds/src/main/java/io/grpc/xds/Bootstrapper.java\n+++ b/xds/src/main/java/io/grpc/xds/Bootstrapper.java\n\n@@ -112,9 +111,9 @@ public abstract class Bootstrapper {\n           channelCredsOptions.add(creds);\n         }\n       }\n-      List<?> serverFeatures = JsonUtil.getList(serverConfig, \"server_features\");\n-      if (serverFeatures != null && serverFeatures.contains(XDS_V3_SERVER_FEATURE)) {\n-        logger.log(XdsLogLevel.INFO, \"Server feature: {0}\", XDS_V3_SERVER_FEATURE);\n+      List<String> serverFeatures = JsonUtil.getListOfStrings(serverConfig, \"server_features\");\n+      if (serverFeatures != null) {\n+        logger.log(XdsLogLevel.INFO, \"Server features: {0}\", serverFeatures);\n       }\n       servers.add(new ServerInfo(serverUri, channelCredsOptions, serverFeatures));\n     }\n"}}, {"oid": "d8a8d70bb5f8789257b42ee222328e0b63d14331", "url": "https://github.com/grpc/grpc-java/commit/d8a8d70bb5f8789257b42ee222328e0b63d14331", "message": "read env", "committedDate": "2020-07-30T23:33:01Z", "type": "commit"}, {"oid": "c700e81d911a594f19493d2bf81f5090faec0df2", "url": "https://github.com/grpc/grpc-java/commit/c700e81d911a594f19493d2bf81f5090faec0df2", "message": "return list of String for server_features", "committedDate": "2020-07-30T23:56:54Z", "type": "commit"}, {"oid": "f4de628f586b96a6316acfc05e67bd5d8a6d6033", "url": "https://github.com/grpc/grpc-java/commit/f4de628f586b96a6316acfc05e67bd5d8a6d6033", "message": "parse boolean", "committedDate": "2020-07-31T00:01:32Z", "type": "commit"}, {"oid": "f4de628f586b96a6316acfc05e67bd5d8a6d6033", "url": "https://github.com/grpc/grpc-java/commit/f4de628f586b96a6316acfc05e67bd5d8a6d6033", "message": "parse boolean", "committedDate": "2020-07-31T00:01:32Z", "type": "forcePushed"}, {"oid": "f592405b8cc44378238f5ef064943a7197c54d51", "url": "https://github.com/grpc/grpc-java/commit/f592405b8cc44378238f5ef064943a7197c54d51", "message": "format", "committedDate": "2020-07-31T00:08:08Z", "type": "commit"}, {"oid": "f592405b8cc44378238f5ef064943a7197c54d51", "url": "https://github.com/grpc/grpc-java/commit/f592405b8cc44378238f5ef064943a7197c54d51", "message": "format", "committedDate": "2020-07-31T00:08:08Z", "type": "forcePushed"}]}