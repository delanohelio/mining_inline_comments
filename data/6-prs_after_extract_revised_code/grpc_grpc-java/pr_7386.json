{"pr_number": 7386, "pr_title": "Server builders extend public API", "pr_createdAt": "2020-08-31T23:27:42Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7386", "timeline": [{"oid": "2e1be5e0c8ffd62717c018067e809a084c847339", "url": "https://github.com/grpc/grpc-java/commit/2e1be5e0c8ffd62717c018067e809a084c847339", "message": "Fix merge", "committedDate": "2020-09-02T18:41:33Z", "type": "forcePushed"}, {"oid": "7ed49e817ca7f3a30ed49652f56b7f819b710e6b", "url": "https://github.com/grpc/grpc-java/commit/7ed49e817ca7f3a30ed49652f56b7f819b710e6b", "message": "Fix merges", "committedDate": "2020-09-02T19:34:56Z", "type": "forcePushed"}, {"oid": "c76b2bcfd99500d6fd561092fe4b70638d4a448e", "url": "https://github.com/grpc/grpc-java/commit/c76b2bcfd99500d6fd561092fe4b70638d4a448e", "message": "api, core: create ForwardingServerBuilder and ServerImplBuilder", "committedDate": "2020-09-02T20:19:49Z", "type": "forcePushed"}, {"oid": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2", "url": "https://github.com/grpc/grpc-java/commit/c3793c0e460b6cf7e3db4e95a984d56eb95f09b2", "message": "okhttp, testing: remove server builder accessor hacks", "committedDate": "2020-09-02T21:48:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAzMTM3Nw==", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483031377", "bodyText": "Remove unnecessary final. Ditto below.", "author": "ejona86", "createdAt": "2020-09-03T14:40:38Z", "path": "okhttp/src/test/java/io/grpc/okhttp/OkHttpTransportTest.java", "diffHunk": "@@ -53,23 +53,21 @@ public void releaseClientFactory() {\n   @Override\n   protected List<? extends InternalServer> newServer(\n       List<ServerStreamTracer.Factory> streamTracerFactories) {\n-    return AccessProtectedHack.serverBuilderBuildTransportServer(\n-        NettyServerBuilder\n-            .forPort(0)\n-            .flowControlWindow(AbstractTransportTest.TEST_FLOW_CONTROL_WINDOW),\n-        streamTracerFactories,\n-        fakeClockTransportTracer);\n+    final NettyServerBuilder builder = NettyServerBuilder", "originalCommit": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "236611e6156667775fdcda09273adb93f9b4925e", "chunk": "diff --git a/okhttp/src/test/java/io/grpc/okhttp/OkHttpTransportTest.java b/okhttp/src/test/java/io/grpc/okhttp/OkHttpTransportTest.java\nindex 7f33fa310..1f812fe06 100644\n--- a/okhttp/src/test/java/io/grpc/okhttp/OkHttpTransportTest.java\n+++ b/okhttp/src/test/java/io/grpc/okhttp/OkHttpTransportTest.java\n\n@@ -53,7 +53,7 @@ public class OkHttpTransportTest extends AbstractTransportTest {\n   @Override\n   protected List<? extends InternalServer> newServer(\n       List<ServerStreamTracer.Factory> streamTracerFactories) {\n-    final NettyServerBuilder builder = NettyServerBuilder\n+    NettyServerBuilder builder = NettyServerBuilder\n         .forPort(0)\n         .flowControlWindow(AbstractTransportTest.TEST_FLOW_CONTROL_WINDOW);\n     InternalNettyServerBuilder.setTransportTracerFactory(builder, fakeClockTransportTracer);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0ODgxOA==", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483048818", "bodyText": "Seems this was previously tangentally linked to metricsExpected(). Could we default to returning the value of metricsExpected()? I think very few tests would have the values be different, maybe only InProcessTest?", "author": "ejona86", "createdAt": "2020-09-03T15:04:01Z", "path": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java", "diffHunk": "@@ -373,6 +357,20 @@ protected final ClientInterceptor createCensusStatsClientInterceptor() {\n                 true, true, true, false /* real-time metrics */);\n   }\n \n+  protected final ServerStreamTracer.Factory createCustomCensusTracerFactory() {\n+    return InternalCensusStatsAccessor.getServerStreamTracerFactory(\n+        tagger, tagContextBinarySerializer, serverStatsRecorder,\n+        GrpcUtil.STOPWATCH_SUPPLIER,\n+        true, true, true, false /* real-time metrics */);\n+  }\n+\n+  /**\n+   * Return {@code true} when custom census module used.\n+   */\n+  protected boolean customCensusModulePresent() {\n+    return false;", "originalCommit": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "236611e6156667775fdcda09273adb93f9b4925e", "chunk": "diff --git a/interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java b/interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java\nindex 060629b52..7b8f8d51e 100644\n--- a/interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java\n+++ b/interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java\n\n@@ -365,10 +365,10 @@ public abstract class AbstractInteropTest {\n   }\n \n   /**\n-   * Return {@code true} when custom census module used.\n+   * Override this when census module presence is different from {@link #metricsExpected()}\n    */\n   protected boolean customCensusModulePresent() {\n-    return false;\n+    return metricsExpected();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MDQ1OQ==", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483080459", "bodyText": "If customCensusModulePresent() was not necessarily (because the default matches the stats boolean), then it would seem appropriate to remove this class and inline the calls to setStatsEnabled and addStreamTracerFactory; that's similar to what is being done on client-side.\nEven right now it's not clear this class is adding enough value for the complexity. Especially for the okhttp test extending it; it would be much better to duplicate to avoid the problem of needing to extend two classes and just to reduce surprise.", "author": "ejona86", "createdAt": "2020-09-03T15:48:31Z", "path": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractNettyInteropTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.testing.integration;\n+\n+import io.grpc.netty.InternalNettyServerBuilder;\n+import io.grpc.netty.NettyServerBuilder;\n+\n+public abstract class AbstractNettyInteropTest extends AbstractInteropTest {", "originalCommit": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MjI4NA==", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483182284", "bodyText": "Great idea.", "author": "sergiitk", "createdAt": "2020-09-03T18:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MDQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "236611e6156667775fdcda09273adb93f9b4925e", "chunk": "diff --git a/interop-testing/src/main/java/io/grpc/testing/integration/AbstractNettyInteropTest.java b/interop-testing/src/main/java/io/grpc/testing/integration/AbstractNettyInteropTest.java\ndeleted file mode 100644\nindex c8b176a0c..000000000\n--- a/interop-testing/src/main/java/io/grpc/testing/integration/AbstractNettyInteropTest.java\n+++ /dev/null\n\n@@ -1,33 +0,0 @@\n-/*\n- * Copyright 2020 The gRPC Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.grpc.testing.integration;\n-\n-import io.grpc.netty.InternalNettyServerBuilder;\n-import io.grpc.netty.NettyServerBuilder;\n-\n-public abstract class AbstractNettyInteropTest extends AbstractInteropTest {\n-  protected NettyServerBuilder withCustomCensusModule(NettyServerBuilder builder) {\n-    InternalNettyServerBuilder.setStatsEnabled(builder, false);\n-    builder.addStreamTracerFactory(createCustomCensusTracerFactory());\n-    return builder;\n-  }\n-\n-  @Override\n-  protected boolean customCensusModulePresent() {\n-    return true;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MTU1NQ==", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483081555", "bodyText": "This sort of method seems volatile and each time it changes it would change indentation for those builder methods. Let's just define a local variable for the builder and call withCustomCensusModule() on a separate line.", "author": "ejona86", "createdAt": "2020-09-03T15:50:09Z", "path": "interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java", "diffHunk": "@@ -33,19 +33,20 @@\n  * Run transport tests over the Netty in-process channel.\n  */\n @RunWith(JUnit4.class)\n-public class Http2NettyLocalChannelTest extends AbstractInteropTest {\n+public class Http2NettyLocalChannelTest extends AbstractNettyInteropTest {\n \n   private DefaultEventLoopGroup eventLoopGroup = new DefaultEventLoopGroup();\n \n   @Override\n-  protected AbstractServerImplBuilder<?> getServerBuilder() {\n-    return NettyServerBuilder\n-        .forAddress(new LocalAddress(\"in-process-1\"))\n-        .flowControlWindow(AbstractInteropTest.TEST_FLOW_CONTROL_WINDOW)\n-        .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE)\n-        .channelType(LocalServerChannel.class)\n-        .workerEventLoopGroup(eventLoopGroup)\n-        .bossEventLoopGroup(eventLoopGroup);\n+  protected ServerBuilder<?> getServerBuilder() {\n+    return withCustomCensusModule(", "originalCommit": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "236611e6156667775fdcda09273adb93f9b4925e", "chunk": "diff --git a/interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java b/interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java\nindex 2bbdcecab..778e8bdf9 100644\n--- a/interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java\n+++ b/interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java\n\n@@ -33,20 +34,22 @@ import org.junit.runners.JUnit4;\n  * Run transport tests over the Netty in-process channel.\n  */\n @RunWith(JUnit4.class)\n-public class Http2NettyLocalChannelTest extends AbstractNettyInteropTest {\n+public class Http2NettyLocalChannelTest extends AbstractInteropTest {\n \n   private DefaultEventLoopGroup eventLoopGroup = new DefaultEventLoopGroup();\n \n   @Override\n   protected ServerBuilder<?> getServerBuilder() {\n-    return withCustomCensusModule(\n-        NettyServerBuilder\n-            .forAddress(new LocalAddress(\"in-process-1\"))\n-            .flowControlWindow(AbstractInteropTest.TEST_FLOW_CONTROL_WINDOW)\n-            .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE)\n-            .channelType(LocalServerChannel.class)\n-            .workerEventLoopGroup(eventLoopGroup)\n-            .bossEventLoopGroup(eventLoopGroup));\n+    NettyServerBuilder builder = NettyServerBuilder\n+        .forAddress(new LocalAddress(\"in-process-1\"))\n+        .flowControlWindow(AbstractInteropTest.TEST_FLOW_CONTROL_WINDOW)\n+        .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE)\n+        .channelType(LocalServerChannel.class)\n+        .workerEventLoopGroup(eventLoopGroup)\n+        .bossEventLoopGroup(eventLoopGroup);\n+    // Disable the default census stats tracer, use testing tracer instead.\n+    InternalNettyServerBuilder.setStatsEnabled(builder, false);\n+    return builder.addStreamTracerFactory(createCustomCensusTracerFactory());\n   }\n \n   @Override\n"}}, {"oid": "236611e6156667775fdcda09273adb93f9b4925e", "url": "https://github.com/grpc/grpc-java/commit/236611e6156667775fdcda09273adb93f9b4925e", "message": "address feedback wrt itrop tests. will be fixed up", "committedDate": "2020-09-03T19:09:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5ODAzNA==", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483198034", "bodyText": "Restore original indentation.", "author": "ejona86", "createdAt": "2020-09-03T19:11:19Z", "path": "interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java", "diffHunk": "@@ -83,21 +84,24 @@ public static void registerCompressors() {\n   }\n \n   @Override\n-  protected AbstractServerImplBuilder<?> getServerBuilder() {\n-    return NettyServerBuilder.forPort(0)\n+  protected ServerBuilder<?> getServerBuilder() {\n+    NettyServerBuilder builder = NettyServerBuilder.forPort(0)\n         .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE)\n         .compressorRegistry(compressors)\n         .decompressorRegistry(decompressors)\n         .intercept(new ServerInterceptor() {\n-            @Override\n-            public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,\n-                Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n-              Listener<ReqT> listener = next.startCall(call, headers);\n-              // TODO(carl-mastrangelo): check that encoding was set.\n-              call.setMessageCompression(true);\n-              return listener;\n-            }\n-          });\n+          @Override\n+          public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,", "originalCommit": "236611e6156667775fdcda09273adb93f9b4925e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fc27df5152006b213b21978c1efac203b361dc7", "chunk": "diff --git a/interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java b/interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java\nindex 2cdaa9c6a..8d184dd44 100644\n--- a/interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java\n+++ b/interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java\n\n@@ -90,15 +90,15 @@ public class TransportCompressionTest extends AbstractInteropTest {\n         .compressorRegistry(compressors)\n         .decompressorRegistry(decompressors)\n         .intercept(new ServerInterceptor() {\n-          @Override\n-          public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,\n-              Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n-            Listener<ReqT> listener = next.startCall(call, headers);\n-            // TODO(carl-mastrangelo): check that encoding was set.\n-            call.setMessageCompression(true);\n-            return listener;\n-          }\n-        });\n+            @Override\n+            public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,\n+                Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n+              Listener<ReqT> listener = next.startCall(call, headers);\n+              // TODO(carl-mastrangelo): check that encoding was set.\n+              call.setMessageCompression(true);\n+              return listener;\n+            }\n+          });\n     // Disable the default census stats tracer, use testing tracer instead.\n     InternalNettyServerBuilder.setStatsEnabled(builder, false);\n     return builder.addStreamTracerFactory(createCustomCensusTracerFactory());\n"}}, {"oid": "1fc27df5152006b213b21978c1efac203b361dc7", "url": "https://github.com/grpc/grpc-java/commit/1fc27df5152006b213b21978c1efac203b361dc7", "message": "address feedback wrt itrop tests. will be fixed up", "committedDate": "2020-09-03T19:11:32Z", "type": "forcePushed"}, {"oid": "85158c71bd0fe9f42ce925b33d727d49660e48c0", "url": "https://github.com/grpc/grpc-java/commit/85158c71bd0fe9f42ce925b33d727d49660e48c0", "message": "address feedback wrt itrop tests. will be fixed up", "committedDate": "2020-09-03T19:14:16Z", "type": "forcePushed"}, {"oid": "45702dbf8f1e344044ac9e93d052286269ebb376", "url": "https://github.com/grpc/grpc-java/commit/45702dbf8f1e344044ac9e93d052286269ebb376", "message": "address feedback wrt itrop tests. will be fixed up", "committedDate": "2020-09-03T19:15:39Z", "type": "forcePushed"}, {"oid": "de83f81f3e388e9ad64d0e87ff3d7e5d708b6b56", "url": "https://github.com/grpc/grpc-java/commit/de83f81f3e388e9ad64d0e87ff3d7e5d708b6b56", "message": "api, core: create ForwardingServerBuilder and ServerImplBuilder", "committedDate": "2020-09-03T19:28:01Z", "type": "commit"}, {"oid": "90b6306f008c40e5e3a1740afa9f013d8238b83a", "url": "https://github.com/grpc/grpc-java/commit/90b6306f008c40e5e3a1740afa9f013d8238b83a", "message": "okhttp, testing: remove server builder accessor hacks", "committedDate": "2020-09-03T19:28:07Z", "type": "forcePushed"}, {"oid": "ca5f3a0f9000ba80e97c03b3d27ab1b27f744e4f", "url": "https://github.com/grpc/grpc-java/commit/ca5f3a0f9000ba80e97c03b3d27ab1b27f744e4f", "message": "core, netty: server builders extend a public API class", "committedDate": "2020-09-03T19:39:10Z", "type": "commit"}, {"oid": "1e2c4604a5d4cc70f2bf29d4cec56a5db37a28d8", "url": "https://github.com/grpc/grpc-java/commit/1e2c4604a5d4cc70f2bf29d4cec56a5db37a28d8", "message": "okhttp, testing: remove server builder accessor hacks", "committedDate": "2020-09-03T19:39:15Z", "type": "commit"}, {"oid": "1e2c4604a5d4cc70f2bf29d4cec56a5db37a28d8", "url": "https://github.com/grpc/grpc-java/commit/1e2c4604a5d4cc70f2bf29d4cec56a5db37a28d8", "message": "okhttp, testing: remove server builder accessor hacks", "committedDate": "2020-09-03T19:39:15Z", "type": "forcePushed"}]}