{"pr_number": 7422, "pr_title": "Add support for IBMJSSE2 into grpc-java", "pr_createdAt": "2020-09-14T16:05:52Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7422", "timeline": [{"oid": "44ef7bb1bdd11aca4a0323ecaf55bc9226d872d7", "url": "https://github.com/grpc/grpc-java/commit/44ef7bb1bdd11aca4a0323ecaf55bc9226d872d7", "message": "Update GrpcSslContexts.java\n\nAdd support for IBMJSSE2", "committedDate": "2020-09-13T01:24:24Z", "type": "commit"}, {"oid": "80c1bef2045e221cd038900664017dadc4944fe0", "url": "https://github.com/grpc/grpc-java/commit/80c1bef2045e221cd038900664017dadc4944fe0", "message": "Add files via upload\n\nCompiled on MacBook", "committedDate": "2020-09-13T03:00:43Z", "type": "commit"}, {"oid": "e9f5bc5ca63564a08f20444d6666ddb0ad2c08c1", "url": "https://github.com/grpc/grpc-java/commit/e9f5bc5ca63564a08f20444d6666ddb0ad2c08c1", "message": "Delete grpc-netty-shaded-1.33.0-SNAPSHOT.jar", "committedDate": "2020-09-13T03:22:02Z", "type": "commit"}, {"oid": "d47497bb30f2294d4471ee7eeba998fe290686ae", "url": "https://github.com/grpc/grpc-java/commit/d47497bb30f2294d4471ee7eeba998fe290686ae", "message": "Update GrpcSslContexts.java", "committedDate": "2020-09-13T03:46:22Z", "type": "commit"}, {"oid": "9a7eca432cedc214d4e855ff439c3ec6e031478e", "url": "https://github.com/grpc/grpc-java/commit/9a7eca432cedc214d4e855ff439c3ec6e031478e", "message": "Update GrpcSslContexts.java", "committedDate": "2020-09-13T03:47:58Z", "type": "commit"}, {"oid": "143ccbdf1043d843d67fcfffcc2f4a86c22ae6ad", "url": "https://github.com/grpc/grpc-java/commit/143ccbdf1043d843d67fcfffcc2f4a86c22ae6ad", "message": "Prebuilt jar for IBMJSEE testing", "committedDate": "2020-09-13T04:05:01Z", "type": "commit"}, {"oid": "10b908975e37da636516c1ee07a7dcc27025dc8a", "url": "https://github.com/grpc/grpc-java/commit/10b908975e37da636516c1ee07a7dcc27025dc8a", "message": "Delete grpc-netty-shaded-1.33.0-SNAPSHOT.jar", "committedDate": "2020-09-14T15:58:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MzM1MA==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r488063350", "bodyText": "I don't think the IBM provider supports Jetty ALPN/NPN, so this should be its own separate condition checking for isJava9AlpnAvailable. Ditto for findJdkProvider", "author": "ejona86", "createdAt": "2020-09-14T16:25:06Z", "path": "netty/src/main/java/io/grpc/netty/GrpcSslContexts.java", "diffHunk": "@@ -186,7 +187,8 @@ public static SslContextBuilder configure(SslContextBuilder builder, SslProvider\n   @CanIgnoreReturnValue\n   public static SslContextBuilder configure(SslContextBuilder builder, Provider jdkProvider) {\n     ApplicationProtocolConfig apc;\n-    if (SUN_PROVIDER_NAME.equals(jdkProvider.getName())) {\n+    if (SUN_PROVIDER_NAME.equals(jdkProvider.getName())\n+        || IBM_PROVIDER_NAME.equals(jdkProvider.getName())) {", "originalCommit": "10b908975e37da636516c1ee07a7dcc27025dc8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExOTc3MQ==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r488119771", "bodyText": "It is true JETTY ALPN doesn't work on IBM JDK, and does nothing either on Sun JDK if recent version is being used.\nie Jetty ALPN is only needed for older releases of Java8 which don't contain ALPN.\nThe IBM JRE has supported ALPN natively since 8.05.15 (build date 20180305).\nSince IBM JRE 8.06.11 (June 2020) their ALPN implementation was changed to be the standard back-ported ALPN implementation as OpenJDK9.\nThis is the same release as I have\njava version \"1.8.0_251\"\nJava(TM) SE Runtime Environment (build 8.0.6.11 - pmz6480sr6fp11-20200602_01(SR6 FP11))\nIBM J9 VM (build 2.9, JRE 1.8.0 z/OS s390x-64-Bit Compressed References 20200601_448156 (JIT enabled, AOT enabled)\nOpenJ9   - 6c940fd\nOMR      - 91c4c01\nIBM      - 19f2e5e)\n\nNow, what I had eagerly been waiiting for, was GRPC to be rebuilt with the version of Netty, that actually supported the ALPN implementation in the newer Java8 JDKs . This build dependency is mentioned in your 'current issues list'\nLast week grpc-netty was actually upgraded to such a version.\nI made the change mentioned in my pull request, and now everything works for me.\nI did have to use this parm, else get TLSv1 errors \"-Dcom.ibm.jsse2.overrideDefaultTLS=true\"\nOn non-IBM JRE,  this define with be different, and may not be needed\n11:42:23.798 [main] INFO  com.equifax.usis.acro.Main - Running TestPubSub.java...                                                                               \n11:42:25.985 [main] INFO  com.equifax.usis.acro.PubSub - Submitted request#1 for Async PubSub, Returning to caller                                              \n11:42:25.987 [main] INFO  com.equifax.usis.acro.PubSub - Completed 0/1 Publish requests                                                                         \n11:42:25.987 [main] INFO  com.equifax.usis.acro.PubSub - Waiting 3 seconds for outstanding PubSub replies to arrive                                             \n11:42:26.209 [grpc-default-executor-0] WARN  i.g.n.shaded.io.netty.util.NetUtil - Failed to find the loopback interface                                         \n11:42:26.213 [grpc-default-executor-0] WARN  i.g.n.s.i.n.u.i.MacAddressUtil - Failed to find a usable hardware address from the network interfaces; using random\n bytes: 99:ed:5c:8e:f7:a1:b3:29                                                                                                                                 \n11:42:28.987 [main] INFO  com.equifax.usis.acro.PubSub - Number of Pubsub Publish replies outstanding = 0                                                        \n11:42:28.987 [main] INFO  com.equifax.usis.acro.PubSub - Completed 1/1 Publish requests                                                                         \n11:42:28.988 [main] INFO  com.equifax.usis.acro.PubSub - Requesting Shutdown...                                                                                 \n11:42:29.057 [main] INFO  com.equifax.usis.acro.PubSub - Shutdown complete - Returning to caller                                                                \n11:42:29.058 [main] INFO  com.equifax.usis.acro.Main - Exiting TestPubSub.java... \n\nI do not know if \"TLSv1\" is actually being explicitly requested in the code somewhere, but either way, that parm transforms all TSLv1 requests into the newest supported TLS version (TLSv1.2 in my case)\nSo all that is needed now is my code to be merged, so we can obtain an official release.\nAs mentioned above,  I had initial failure due to TLSv1 being blocked on your system, which I found in the debug trace.\nIn the same captured trace I see that  IBMSSE2 is definitely being used:\nSSLContextImpl:  Using X509TrustManager com.ibm.jsse2.aD\nJsseJCE:  Using SecureRandom SHA2DRBG from provider IBMJCE version 1.8\ntrigger seeding of SecureRandom\ndone seeding SecureRandom\n11:17:49.899 [main] INFO  com.equifax.usis.acro.PubSub - Submitted request#1 for Async PubSub, Returning to caller\n11:17:49.900 [main] INFO  com.equifax.usis.acro.PubSub - Completed 0/1 Publish requests\n11:17:49.900 [main] INFO  com.equifax.usis.acro.PubSub - Waiting 3 seconds for outstanding PubSub replies to arrive\n11:17:50.060 [grpc-default-executor-0] WARN  i.g.n.shaded.io.netty.util.NetUtil - Failed to find the loopback interface\n11:17:50.140 [grpc-default-executor-0] WARN  i.g.n.s.i.n.u.i.MacAddressUtil - Failed to find a usable hardware address from the network interfaces; using random bytes: 7b:8f:0e:74:63:a6:1a:5a\nUsing SSLEngineImpl.\n%% Initialized:  [Session-5, SSL_NULL_WITH_NULL_NULL]\nJsseJCE:  Using KeyGenerator IbmTlsExtendedMasterSecret from provider TBD via init \nIBMJSSE2 value of useExtendedMasterSecret true\nIBMJSSE2 will allow RFC 5746 renegotiation per com.ibm.jsse2.renegotiate set to none or default\nIBMJSSE2 will not require renegotiation indicator during initial handshake per com.ibm.jsse2.renegotiation.indicator set to OPTIONAL or default taken\nIBMJSSE2 will not perform identity checking against the peer cert check during renegotiation per com.ibm.jsse2.renegotiation.peer.cert.check set to OFF or default\nIBMJSSE2 will allow client initiated renegotiation per jdk.tls.rejectClientInitiatedRenegotiation set to FALSE or default\nIBMJSSE2 will not allow unsafe server certificate change during renegotiation per jdk.tls.allowUnsafeServerCertChange set to FALSE or default\n\nIs initial handshake: true\nIgnoring unsupported cipher suite: SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 for TLSv1\nIgnoring unsupported cipher suite: SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384 for TLSv1\nIgnoring unsupported cipher suite: SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 for TLSv1\nIgnoring unsupported cipher suite: SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256 for TLSv1\nNo available cipher suite for TLSv1\ngrpc-nio-worker-ELG-1-3, fatal error: 40: Couldn't kickstart handshaking\njavax.net.ssl.SSLHandshakeException: No appropriate protocol, may be no appropriate cipher suite specified or protocols are deactivated\n%% Invalidated:  [Session-5, SSL_NULL_WITH_NULL_NULL]", "author": "kiwi1969", "createdAt": "2020-09-14T17:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5MTE5MA==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r488191190", "bodyText": "This needs to be split out into its own condition. At the very least having it together is misleading.\nIn the future gRPC should check whether the specific provider supports Java 9 ALPN instead of just assuming \"if the API is there, it must work.\" That would reorganize the code and we don't want to check for Jetty NPN/ALPN for the IBMJSSE2 provider. So having it be clear now is important to make sure we understand what is supported when.\ngRPC requires HTTP/2 which requires TLSv1.2+. It looks like we're achieving that today by specifying ciphers that are only supported with TLSv1.2+. It looks like we could maybe specify sslContextBuilder.protocols(\"TLSv1.2\") within GrpcSslContexts. We'd need to determine whether we should pass TLSv1.3 as well. Alternatively, it may be better to just say \"TLS\", but it appears that wouldn't work in Java 7.", "author": "ejona86", "createdAt": "2020-09-14T20:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0OTQxNA==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r488949414", "bodyText": "OK, updated it.\nNote we are currently checking for Java ALPN availability via JettyUtil API call.\nIt will return false and then trigger  \"No ALPN provider\" error, if not available.\nFor the the sslContextBuilder, won't this work?  sslContextBuilder.protocols(\"TLSv1.2\",\"TLSv1.3\")\nI think you would have to add the new TLSv1.3 ciphers to the cipher list also with TLSv1.3 ones first\nIf the negotiation works right, the 1st matching cipher should be picked up.", "author": "kiwi1969", "createdAt": "2020-09-15T20:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MzgzNw==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r488983837", "bodyText": "For the the sslContextBuilder, won't this work? sslContextBuilder.protocols(\"TLSv1.2\",\"TLSv1.3\")\n\nYes, I expect something like that would. Although I'm not actually 100% certain things work properly with TLSv1.3, especially failures for client certificates. TLSv1.3 ciphers are already in our list. If we start explicitly stating TLSv1.3, it seems we should at least test it.\nI'd also need to dig a bit into Netty to see what the list of protocols means; it's unclear to me how that gets translated to the Java security APIs.", "author": "ejona86", "createdAt": "2020-09-15T21:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MzM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "dc4b9054291991acc060e1799e3f315321aefc9b", "chunk": "diff --git a/netty/src/main/java/io/grpc/netty/GrpcSslContexts.java b/netty/src/main/java/io/grpc/netty/GrpcSslContexts.java\nindex 3a33aff3f..38baa81f7 100644\n--- a/netty/src/main/java/io/grpc/netty/GrpcSslContexts.java\n+++ b/netty/src/main/java/io/grpc/netty/GrpcSslContexts.java\n\n@@ -187,8 +187,7 @@ public class GrpcSslContexts {\n   @CanIgnoreReturnValue\n   public static SslContextBuilder configure(SslContextBuilder builder, Provider jdkProvider) {\n     ApplicationProtocolConfig apc;\n-    if (SUN_PROVIDER_NAME.equals(jdkProvider.getName())\n-        || IBM_PROVIDER_NAME.equals(jdkProvider.getName())) {\n+    if (SUN_PROVIDER_NAME.equals(jdkProvider.getName())) {\n       // Jetty ALPN/NPN only supports one of NPN or ALPN\n       if (JettyTlsUtil.isJettyAlpnConfigured()) {\n         apc = ALPN;\n"}}, {"oid": "dc4b9054291991acc060e1799e3f315321aefc9b", "url": "https://github.com/grpc/grpc-java/commit/dc4b9054291991acc060e1799e3f315321aefc9b", "message": "Update GrpcSslContexts.java\n\nIBMJSSE2 enhancement", "committedDate": "2020-09-15T20:03:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyOTQ1NA==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r489029454", "bodyText": "Because of the insertion of this else clause, the behavior is now different when using IBM JRE and both Conscrypt and IBMJSSE2 are present. It will now pick IBMJSSE2 over Conscrypt. If we want to keep the old behavior the else clause will need to be the last one.", "author": "sanjaypujare", "createdAt": "2020-09-15T22:27:28Z", "path": "netty/src/main/java/io/grpc/netty/GrpcSslContexts.java", "diffHunk": "@@ -243,6 +251,10 @@ private static Provider findJdkProvider() {\n             || JettyTlsUtil.isJava9AlpnAvailable()) {\n           return provider;\n         }\n+      } else if (IBM_PROVIDER_NAME.equals(provider.getName())) {", "originalCommit": "dc4b9054291991acc060e1799e3f315321aefc9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0OTM0MA==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r489049340", "bodyText": "Security.getProviders() returns them in preference order. This if/else just checks whether the current provider of the loop is understood to support ALPN. The order of the if/elses doesn't matter, because a provider will only match one of the conditions.", "author": "ejona86", "createdAt": "2020-09-15T22:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyOTQ1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0Nzg2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r489047866", "bodyText": "Similar to my other comment. Because of where this else clause is placed the exception thrown will be different when the jdkProvider is IBMJSSE2 and Java9Alpn is unavailable. Most probably it's not a big deal but I thought it's worth pointing out.", "author": "sanjaypujare", "createdAt": "2020-09-15T22:51:42Z", "path": "netty/src/main/java/io/grpc/netty/GrpcSslContexts.java", "diffHunk": "@@ -196,7 +197,14 @@ public static SslContextBuilder configure(SslContextBuilder builder, Provider jd\n         apc = ALPN;\n       } else {\n         throw new IllegalArgumentException(\n-            SUN_PROVIDER_NAME + \" selected, but Java 9+ and Jetty NPN/ALPN unavailable\");\n+            jdkProvider.getName() + \" selected, but Java 9+ and Jetty NPN/ALPN unavailable\");\n+      }\n+    } else if (IBM_PROVIDER_NAME.equals(jdkProvider.getName())) {\n+      if (JettyTlsUtil.isJava9AlpnAvailable()) {\n+        apc = ALPN;\n+      } else {\n+        throw new IllegalArgumentException(", "originalCommit": "dc4b9054291991acc060e1799e3f315321aefc9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA1MjMxOA==", "url": "https://github.com/grpc/grpc-java/pull/7422#discussion_r489052318", "bodyText": "It should be different, as Jetty ALPN is not supported with IBMJSSE2.", "author": "ejona86", "createdAt": "2020-09-15T22:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0Nzg2Ng=="}], "type": "inlineReview", "revised_code": null}]}