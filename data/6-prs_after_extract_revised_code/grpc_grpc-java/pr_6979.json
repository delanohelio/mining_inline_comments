{"pr_number": 6979, "pr_title": "netty: allow to use bandwidth delay product", "pr_createdAt": "2020-04-24T21:54:47Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6979", "timeline": [{"oid": "da9a8289322199b65c89020a50b5e8a66a452221", "url": "https://github.com/grpc/grpc-java/commit/da9a8289322199b65c89020a50b5e8a66a452221", "message": "netty: send WINDOW_UPDATE before BDP ping", "committedDate": "2020-04-24T18:10:47Z", "type": "commit"}, {"oid": "fdc6f2e7b7052fcfbebeabaa313e205a2ceb527b", "url": "https://github.com/grpc/grpc-java/commit/fdc6f2e7b7052fcfbebeabaa313e205a2ceb527b", "message": "netty: bdp accessor allows to clear handlers", "committedDate": "2020-04-24T18:24:26Z", "type": "commit"}, {"oid": "758fa2942dc8c978b1a423e35fcea6aacb9c9551", "url": "https://github.com/grpc/grpc-java/commit/758fa2942dc8c978b1a423e35fcea6aacb9c9551", "message": "fix tests and logic", "committedDate": "2020-04-24T21:56:33Z", "type": "commit"}, {"oid": "46df843e51c5bae922563e01b5e0fe6f21531af5", "url": "https://github.com/grpc/grpc-java/commit/46df843e51c5bae922563e01b5e0fe6f21531af5", "message": "disable NettyFlowControlTest#verySmallWindowMakesProgress", "committedDate": "2020-04-27T22:29:48Z", "type": "commit"}, {"oid": "fd831081e7cca87299558a5374b9e2add4c3c003", "url": "https://github.com/grpc/grpc-java/commit/fd831081e7cca87299558a5374b9e2add4c3c003", "message": "netty: Netty{Client,Server}Handler use ListeningEncoder to keep track of ping for bdp", "committedDate": "2020-04-27T22:34:42Z", "type": "commit"}, {"oid": "52010010d13642787f40207872058de4d0d88fa0", "url": "https://github.com/grpc/grpc-java/commit/52010010d13642787f40207872058de4d0d88fa0", "message": "remove invalid comment", "committedDate": "2020-04-27T22:36:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxODM1Mg==", "url": "https://github.com/grpc/grpc-java/pull/6979#discussion_r416218352", "bodyText": "Why was this removed?", "author": "ejona86", "createdAt": "2020-04-27T23:29:29Z", "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "diffHunk": "@@ -178,10 +179,6 @@ public NettyChannelBuilder channelType(Class<? extends Channel> channelType) {\n    *\n    * <p>It's an optional parameter. If the user has not provided an Channel type or ChannelFactory\n    * when the channel is built, the builder will use the default one which is static.\n-   *\n-   * <p>You must also provide corresponding {@link #eventLoopGroup(EventLoopGroup)}. For example,", "originalCommit": "52010010d13642787f40207872058de4d0d88fa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "048f4eac5d37ee84f89c87a831688bae487803e4", "chunk": "diff --git a/netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java b/netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java\nindex fb1ef9fe3..31c5d6422 100644\n--- a/netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java\n+++ b/netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java\n\n@@ -179,6 +179,10 @@ public final class NettyChannelBuilder\n    *\n    * <p>It's an optional parameter. If the user has not provided an Channel type or ChannelFactory\n    * when the channel is built, the builder will use the default one which is static.\n+   *\n+   * <p>You must also provide corresponding {@link #eventLoopGroup(EventLoopGroup)}. For example,\n+   * {@link NioSocketChannel} based {@link ChannelFactory} must use {@link\n+   * io.netty.channel.nio.NioEventLoopGroup}, otherwise your application won't start.\n    */\n   public NettyChannelBuilder channelFactory(ChannelFactory<? extends Channel> channelFactory) {\n     this.channelFactory = checkNotNull(channelFactory, \"channelFactory\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxODc2Mw==", "url": "https://github.com/grpc/grpc-java/pull/6979#discussion_r416218763", "bodyText": "Looks like this comma should be a period or semicolon.", "author": "ejona86", "createdAt": "2020-04-27T23:30:30Z", "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "diffHunk": "@@ -247,12 +244,26 @@ public NettyChannelBuilder sslContext(SslContext sslContext) {\n   }\n \n   /**\n-   * Sets the flow control window in bytes. If not called, the default value\n-   * is {@link #DEFAULT_FLOW_CONTROL_WINDOW}).\n+   * Sets the initial flow control window in bytes. Setting initial flow control window enables auto\n+   * flow control tuning using bandwidth-delay product algorithm. To disable auto flow control\n+   * tuning, use {@link #flowControlWindow(int)}.\n+   */\n+  public NettyChannelBuilder initialFlowControlWindow(int initialFlowControlWindow) {\n+    checkArgument(initialFlowControlWindow > 0, \"initialFlowControlWindow must be positive\");\n+    this.flowControlWindow = initialFlowControlWindow;\n+    this.autoFlowControl = true;\n+    return this;\n+  }\n+\n+  /**\n+   * Sets the flow control window in bytes. Setting flowControlWindow disables auto flow control\n+   * tuning, use {@link #initialFlowControlWindow(int)} to enable auto flow control tuning. If not", "originalCommit": "52010010d13642787f40207872058de4d0d88fa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "048f4eac5d37ee84f89c87a831688bae487803e4", "chunk": "diff --git a/netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java b/netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java\nindex fb1ef9fe3..31c5d6422 100644\n--- a/netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java\n+++ b/netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java\n\n@@ -257,7 +261,7 @@ public final class NettyChannelBuilder\n \n   /**\n    * Sets the flow control window in bytes. Setting flowControlWindow disables auto flow control\n-   * tuning, use {@link #initialFlowControlWindow(int)} to enable auto flow control tuning. If not\n+   * tuning; use {@link #initialFlowControlWindow(int)} to enable auto flow control tuning. If not\n    * called, the default value is {@link #DEFAULT_FLOW_CONTROL_WINDOW}).\n    */\n   public NettyChannelBuilder flowControlWindow(int flowControlWindow) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyMDUxOQ==", "url": "https://github.com/grpc/grpc-java/pull/6979#discussion_r416220519", "bodyText": "I'm fiercely annoyed by the storage of these handlers and the dance to clean them up. (Not your code, their existence.)\nWhat do you think about having NettyFlowControlTest create a custom ProtocolNegotiator that grabs the GrpcHttp2ConnectionHandler and we pass that to getLatestWindow() (so we would cast to AbstractNettyHandler in this class)?\n(I'm also fine at that point trashing this class and just having InternalHandlerSettings)", "author": "ejona86", "createdAt": "2020-04-27T23:34:47Z", "path": "netty/src/main/java/io/grpc/netty/NettyHandlerSettings.java", "diffHunk": "@@ -64,9 +57,23 @@ public static synchronized int getLatestServerWindow() {\n     return getLatestWindow(serverHandler);\n   }\n \n+  private static synchronized void clearHandlers() {\n+    clientHandler = null;\n+    serverHandler = null;\n+  }\n+\n   private static synchronized int getLatestWindow(AbstractNettyHandler handler) {\n     Preconditions.checkNotNull(handler);\n     return handler.decoder().flowController()\n         .initialWindowSize(handler.connection().connectionStream());\n   }\n+\n+  static ChannelFutureListener cleanUpTask() {", "originalCommit": "52010010d13642787f40207872058de4d0d88fa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1NzUxMQ==", "url": "https://github.com/grpc/grpc-java/pull/6979#discussion_r416257511", "bodyText": "done. using ProtocolNegotiator made the conversion very easy.", "author": "creamsoup", "createdAt": "2020-04-28T01:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyMDUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a73585c39ab7da11e571bc6aec233bd7535667f7", "chunk": "diff --git a/netty/src/main/java/io/grpc/netty/NettyHandlerSettings.java b/netty/src/main/java/io/grpc/netty/NettyHandlerSettings.java\ndeleted file mode 100644\nindex 0c5d2a834..000000000\n--- a/netty/src/main/java/io/grpc/netty/NettyHandlerSettings.java\n+++ /dev/null\n\n@@ -1,79 +0,0 @@\n-/*\n- * Copyright 2016 The gRPC Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.grpc.netty;\n-\n-import com.google.common.base.Preconditions;\n-import io.netty.channel.ChannelFuture;\n-import io.netty.channel.ChannelFutureListener;\n-import javax.annotation.Nullable;\n-\n-/**\n- * Allows autoFlowControl to be turned on and off from interop testing and flow control windows to\n- * be accessed.\n- */\n-final class NettyHandlerSettings {\n-\n-  // These will be the most recently created handlers created using NettyClientTransport and\n-  // NettyServerTransport\n-  @Nullable\n-  private static AbstractNettyHandler clientHandler;\n-  @Nullable\n-  private static AbstractNettyHandler serverHandler;\n-\n-  static void setAutoWindow(AbstractNettyHandler handler) {\n-    if (!handler.isAutoTuneFlowControlOn()) {\n-      return;\n-    }\n-    synchronized (NettyHandlerSettings.class) {\n-      if (handler instanceof NettyClientHandler) {\n-        clientHandler = handler;\n-      } else if (handler instanceof NettyServerHandler) {\n-        serverHandler = handler;\n-      } else {\n-        throw new RuntimeException(\"Expecting NettyClientHandler or NettyServerHandler\");\n-      }\n-    }\n-  }\n-\n-  public static synchronized int getLatestClientWindow() {\n-    return getLatestWindow(clientHandler);\n-  }\n-\n-  public static synchronized int getLatestServerWindow() {\n-    return getLatestWindow(serverHandler);\n-  }\n-\n-  private static synchronized void clearHandlers() {\n-    clientHandler = null;\n-    serverHandler = null;\n-  }\n-\n-  private static synchronized int getLatestWindow(AbstractNettyHandler handler) {\n-    Preconditions.checkNotNull(handler);\n-    return handler.decoder().flowController()\n-        .initialWindowSize(handler.connection().connectionStream());\n-  }\n-\n-  static ChannelFutureListener cleanUpTask() {\n-    return new ChannelFutureListener() {\n-      @Override\n-      public void operationComplete(ChannelFuture future) throws Exception {\n-        NettyHandlerSettings.clearHandlers();\n-      }\n-    };\n-  }\n-}\n"}}, {"oid": "048f4eac5d37ee84f89c87a831688bae487803e4", "url": "https://github.com/grpc/grpc-java/commit/048f4eac5d37ee84f89c87a831688bae487803e4", "message": "fix javadoc, restore accidently removed paragraph in javadoc", "committedDate": "2020-04-28T00:38:14Z", "type": "commit"}, {"oid": "a73585c39ab7da11e571bc6aec233bd7535667f7", "url": "https://github.com/grpc/grpc-java/commit/a73585c39ab7da11e571bc6aec233bd7535667f7", "message": "retire {Internal,Netty}HandlerSettings", "committedDate": "2020-04-28T01:22:49Z", "type": "commit"}, {"oid": "bce0e9db5d5d3710f1940c2f5ebdec1815e12bf8", "url": "https://github.com/grpc/grpc-java/commit/bce0e9db5d5d3710f1940c2f5ebdec1815e12bf8", "message": "remove unused method", "committedDate": "2020-04-28T01:56:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NzU4Mg==", "url": "https://github.com/grpc/grpc-java/pull/6979#discussion_r418757582", "bodyText": "s/;;/;/", "author": "ejona86", "createdAt": "2020-05-01T22:05:03Z", "path": "interop-testing/src/test/java/io/grpc/testing/integration/NettyFlowControlTest.java", "diffHunk": "@@ -224,9 +241,40 @@ public long getElapsedTime() {\n       return endRequestNanos - startRequestNanos;\n     }\n \n-    public int waitFor() throws InterruptedException {\n-      latch.await(5, TimeUnit.SECONDS);\n+    public int waitFor(long duration, TimeUnit unit) throws InterruptedException {\n+      latch.await(duration, unit);\n       return lastWindow;\n     }\n   }\n+\n+  private static class CapturingProtocolNegotiationFactory implements ProtocolNegotiatorFactory {\n+\n+    AtomicReference<GrpcHttp2ConnectionHandler> grpcHandlerRef = new AtomicReference<>();\n+\n+    @Override\n+    public ProtocolNegotiator buildProtocolNegotiator() {\n+      return new CapturingProtocolNegotiator();\n+    }\n+\n+    private class CapturingProtocolNegotiator implements ProtocolNegotiator {\n+\n+      final ProtocolNegotiator delegate = InternalProtocolNegotiators.plaintext();\n+\n+      @Override\n+      public AsciiString scheme() {\n+        return delegate.scheme();\n+      }\n+\n+      @Override\n+      public ChannelHandler newHandler(GrpcHttp2ConnectionHandler grpcHandler) {\n+        CapturingProtocolNegotiationFactory.this.grpcHandlerRef.set(grpcHandler);\n+        return delegate.newHandler(grpcHandler);\n+      }\n+\n+      @Override\n+      public void close() {\n+        delegate.close();;", "originalCommit": "a73585c39ab7da11e571bc6aec233bd7535667f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1OTgyNw==", "url": "https://github.com/grpc/grpc-java/pull/6979#discussion_r418759827", "bodyText": "oops =p", "author": "creamsoup", "createdAt": "2020-05-01T22:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NzU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7ab9d9de2f381e439cb07afc0e2e5c75f4f576a7", "chunk": "diff --git a/interop-testing/src/test/java/io/grpc/testing/integration/NettyFlowControlTest.java b/interop-testing/src/test/java/io/grpc/testing/integration/NettyFlowControlTest.java\nindex c8296e0bb..4d7c8bdbc 100644\n--- a/interop-testing/src/test/java/io/grpc/testing/integration/NettyFlowControlTest.java\n+++ b/interop-testing/src/test/java/io/grpc/testing/integration/NettyFlowControlTest.java\n\n@@ -273,7 +273,7 @@ public class NettyFlowControlTest {\n \n       @Override\n       public void close() {\n-        delegate.close();;\n+        delegate.close();\n       }\n     }\n   }\n"}}, {"oid": "7ab9d9de2f381e439cb07afc0e2e5c75f4f576a7", "url": "https://github.com/grpc/grpc-java/commit/7ab9d9de2f381e439cb07afc0e2e5c75f4f576a7", "message": "remove extra semicolon", "committedDate": "2020-05-01T22:13:36Z", "type": "commit"}]}