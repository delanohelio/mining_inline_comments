{"pr_number": 7374, "pr_title": "core: refactor handle config update with ConfigSelector", "pr_createdAt": "2020-08-28T00:06:26Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7374", "timeline": [{"oid": "869a0030297912700627591561dd55e29fad5167", "url": "https://github.com/grpc/grpc-java/commit/869a0030297912700627591561dd55e29fad5167", "message": "core: refactor handle config update with ConfigSelector", "committedDate": "2020-08-28T00:08:46Z", "type": "forcePushed"}, {"oid": "87f9b58b70b5ba84c700bf1bc3790a188ae82945", "url": "https://github.com/grpc/grpc-java/commit/87f9b58b70b5ba84c700bf1bc3790a188ae82945", "message": "core: refactor handle config update with ConfigSelector", "committedDate": "2020-08-28T00:21:57Z", "type": "commit"}, {"oid": "87f9b58b70b5ba84c700bf1bc3790a188ae82945", "url": "https://github.com/grpc/grpc-java/commit/87f9b58b70b5ba84c700bf1bc3790a188ae82945", "message": "core: refactor handle config update with ConfigSelector", "committedDate": "2020-08-28T00:21:57Z", "type": "forcePushed"}, {"oid": "99fd45e328682097c83fd6d7037474fdc407d97c", "url": "https://github.com/grpc/grpc-java/commit/99fd45e328682097c83fd6d7037474fdc407d97c", "message": "test configSelector for ClientCallImpl", "committedDate": "2020-09-03T23:45:38Z", "type": "commit"}, {"oid": "e51d709413955fafd0cf91a41494b6691a0b1631", "url": "https://github.com/grpc/grpc-java/commit/e51d709413955fafd0cf91a41494b6691a0b1631", "message": "ManagedChannelServiceConfigTest", "committedDate": "2020-09-03T23:45:38Z", "type": "commit"}, {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80", "url": "https://github.com/grpc/grpc-java/commit/608e2301aba5e49fd9adafc55621bd9e5ce14c80", "message": "test method config propagated to new call", "committedDate": "2020-09-03T23:45:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1MDQ4Mg==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485750482", "bodyText": "As discussed previously, let's keep this interface the same and pass the MethodInfo via CallOptions. (It is fine to continue using the separate keys like RETRY_POLICY_KEY for this PR, but long-term we'll swap to a single call option.)", "author": "ejona86", "createdAt": "2020-09-09T16:27:32Z", "path": "core/src/main/java/io/grpc/internal/ClientCallImpl.java", "diffHunk": "@@ -154,7 +160,8 @@ ClientStream newStream(\n         MethodDescriptor<?, ?> method,\n         CallOptions callOptions,\n         Metadata headers,\n-        Context context);\n+        Context context,\n+        @Nullable MethodInfo methodInfo);", "originalCommit": "608e2301aba5e49fd9adafc55621bd9e5ce14c80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDMyMQ==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485844321", "bodyText": "Done.", "author": "dapengzhang0", "createdAt": "2020-09-09T18:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1MDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4628d10a8ffc35c005afc899d094ff6613ec3893", "chunk": "diff --git a/core/src/main/java/io/grpc/internal/ClientCallImpl.java b/core/src/main/java/io/grpc/internal/ClientCallImpl.java\nindex 2d9e91281..5e15921e9 100644\n--- a/core/src/main/java/io/grpc/internal/ClientCallImpl.java\n+++ b/core/src/main/java/io/grpc/internal/ClientCallImpl.java\n\n@@ -160,8 +160,7 @@ final class ClientCallImpl<ReqT, RespT> extends ClientCall<ReqT, RespT> {\n         MethodDescriptor<?, ?> method,\n         CallOptions callOptions,\n         Metadata headers,\n-        Context context,\n-        @Nullable MethodInfo methodInfo);\n+        Context context);\n   }\n \n   ClientCallImpl<ReqT, RespT> setFullStreamDecompression(boolean fullStreamDecompression) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485761513", "bodyText": "Why not use this? Was this from an earlier revision and wasn't updated?", "author": "ejona86", "createdAt": "2020-09-09T16:40:15Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java", "diffHunk": "@@ -162,28 +164,37 @@ static ManagedChannelServiceConfig fromServiceConfig(\n             healthCheckingConfig);\n   }\n \n-  /**\n-   * Returns the per-service configuration for the channel.\n-   */\n-  Map<String, MethodInfo> getServiceMap() {\n-    return serviceMap;\n-  }\n-\n   @Nullable\n   Map<String, ?> getHealthCheckingConfig() {\n     return healthCheckingConfig;\n   }\n \n   /**\n-   * Returns the per-method configuration for the channel.\n+   * Used as a fallback per-RPC config supplier when the attributes value of {@link\n+   * InternalConfigSelector#KEY} is not available.\n    */\n-  Map<String, MethodInfo> getServiceMethodMap() {\n-    return serviceMethodMap;\n-  }\n-\n   @Nullable\n-  MethodInfo getDefaultMethodConfig() {\n-    return defaultMethodConfig;\n+  InternalConfigSelector getDefaultConfigSelector() {\n+    if (serviceMap.isEmpty() && serviceMethodMap.isEmpty() && defaultMethodConfig == null) {\n+      return null;\n+    }\n+    return new InternalConfigSelector() {\n+      @Override\n+      public Result selectConfig(PickSubchannelArgs args) {\n+        MethodInfo methodInfo = getMethodConfig(args.getMethodDescriptor());\n+        return Result.newBuilder()\n+            .setConfig(\n+                new ManagedChannelServiceConfig(", "originalCommit": "608e2301aba5e49fd9adafc55621bd9e5ce14c80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTc2NQ==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485819765", "bodyText": "The new instance strips off all configs (e.g. lb config) other than method configs from this. The design seems to say the Result.config is per RPC config.", "author": "dapengzhang0", "createdAt": "2020-09-09T18:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxOTQzMA==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486419430", "bodyText": "It seems to say, \"this is necessary.\" If we want to say, \"only the per-RPC config will be used\" then we can use a comment to do that.\nI'm really not wild with calling getMethodConfig() here. We should just return this and have this be a trivial implementation.", "author": "ejona86", "createdAt": "2020-09-10T15:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3NDQyNw==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486474427", "bodyText": "Now I put entire service config in setConfig(). Now that the config selector contains all the information of the ManagedConfigServiceConfig, I rename ManagedConfigServiceConfig.getDefaultConfigSelector() as ManagedConfigServiceConfig.asConfigSelector().", "author": "dapengzhang0", "createdAt": "2020-09-10T16:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODkxMQ==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486478911", "bodyText": "You removed the \"return null when a config selector is unnecessary\" optimization. That means now configSelector.set(null) is only used for shutdown when there are no calls and error cases. That's asking for bugs. Restore the return-null optimization or prevent the config selector from ever being null.", "author": "ejona86", "createdAt": "2020-09-10T16:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwMjA0MQ==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486502041", "bodyText": "Good point. Didn't think about it. Restored return-null optimization.", "author": "dapengzhang0", "createdAt": "2020-09-10T17:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "7f2d239d7fb5674de643df372ffcbe7e1a6296b8", "chunk": "diff --git a/core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java b/core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java\nindex 3ca967640..1a5fd62b9 100644\n--- a/core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java\n+++ b/core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java\n\n@@ -173,24 +174,12 @@ final class ManagedChannelServiceConfig {\n    * Used as a fallback per-RPC config supplier when the attributes value of {@link\n    * InternalConfigSelector#KEY} is not available.\n    */\n-  @Nullable\n-  InternalConfigSelector getDefaultConfigSelector() {\n-    if (serviceMap.isEmpty() && serviceMethodMap.isEmpty() && defaultMethodConfig == null) {\n-      return null;\n-    }\n+  InternalConfigSelector asConfigSelector() {\n     return new InternalConfigSelector() {\n       @Override\n       public Result selectConfig(PickSubchannelArgs args) {\n-        MethodInfo methodInfo = getMethodConfig(args.getMethodDescriptor());\n         return Result.newBuilder()\n-            .setConfig(\n-                new ManagedChannelServiceConfig(\n-                    methodInfo,\n-                    Collections.<String, MethodInfo>emptyMap(),\n-                    Collections.<String, MethodInfo>emptyMap(),\n-                    null,\n-                    null,\n-                    null))\n+            .setConfig(ManagedChannelServiceConfig.this)\n             .setCallOptions(args.getCallOptions())\n             .build();\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTAyNA==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485769024", "bodyText": "I'm not wild about this channel logging, as it seems like spam and is unlikely to help notice a bug. But we can leave it for now and remove it if it becomes a problem.", "author": "ejona86", "createdAt": "2020-09-09T16:49:29Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1535,16 +1524,26 @@ public void run() {\n                   ChannelLogLevel.INFO,\n                   \"Config selector from name resolver discarded by channel settings\");\n             }\n-            configSelector.set(null);\n+            configSelector.set(effectiveServiceConfig.getDefaultConfigSelector());\n           } else {\n             // Try to use config if returned from name resolver\n             // Otherwise, try to use the default config if available\n             if (validServiceConfig != null) {\n               effectiveServiceConfig = validServiceConfig;\n-              configSelector.set(resolvedConfigSelector);\n+              if (resolvedConfigSelector != null) {\n+                configSelector.set(resolvedConfigSelector);\n+                if (effectiveServiceConfig.getDefaultConfigSelector() != null) {\n+                  channelLogger.log(\n+                      ChannelLogLevel.INFO,\n+                      \"Method configs in service config will be discarded due to presence of\"", "originalCommit": "608e2301aba5e49fd9adafc55621bd9e5ce14c80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3NjE0Mg==", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486476142", "bodyText": "With the new implementation, the converted config selector will never be null. Removed this block.", "author": "dapengzhang0", "createdAt": "2020-09-10T16:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "385ccf6e1dbef7b833c1b25e2d16cf4f1933881c", "chunk": "diff --git a/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\nindex ac8420f83..5a6769f3d 100644\n--- a/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\n+++ b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java\n\n@@ -1534,7 +1534,7 @@ final class ManagedChannelImpl extends ManagedChannel implements\n                 configSelector.set(resolvedConfigSelector);\n                 if (effectiveServiceConfig.getDefaultConfigSelector() != null) {\n                   channelLogger.log(\n-                      ChannelLogLevel.INFO,\n+                      ChannelLogLevel.DEBUG,\n                       \"Method configs in service config will be discarded due to presence of\"\n                           + \"config-selector\");\n                 }\n"}}, {"oid": "385ccf6e1dbef7b833c1b25e2d16cf4f1933881c", "url": "https://github.com/grpc/grpc-java/commit/385ccf6e1dbef7b833c1b25e2d16cf4f1933881c", "message": "change ChannelLogLevel.INFO to DEBUG", "committedDate": "2020-09-09T18:36:48Z", "type": "commit"}, {"oid": "4628d10a8ffc35c005afc899d094ff6613ec3893", "url": "https://github.com/grpc/grpc-java/commit/4628d10a8ffc35c005afc899d094ff6613ec3893", "message": "propagate MethodInfo via CallOptions", "committedDate": "2020-09-09T18:58:26Z", "type": "commit"}, {"oid": "9cf90ae53bd7d7e6c8e04500606837464d840409", "url": "https://github.com/grpc/grpc-java/commit/9cf90ae53bd7d7e6c8e04500606837464d840409", "message": "Merge branch 'master' of https://github.com/grpc/grpc-java into update-config", "committedDate": "2020-09-10T01:13:07Z", "type": "commit"}, {"oid": "7f2d239d7fb5674de643df372ffcbe7e1a6296b8", "url": "https://github.com/grpc/grpc-java/commit/7f2d239d7fb5674de643df372ffcbe7e1a6296b8", "message": "Set Result.config to the entire service config", "committedDate": "2020-09-10T16:21:55Z", "type": "commit"}, {"oid": "f43733ca6373bc8e9df1062da3c4e79088d02fd5", "url": "https://github.com/grpc/grpc-java/commit/f43733ca6373bc8e9df1062da3c4e79088d02fd5", "message": "Revert \"Set Result.config to the entire service config\"\n\nThis reverts commit 7f2d239d7fb5674de643df372ffcbe7e1a6296b8.", "committedDate": "2020-09-10T17:00:11Z", "type": "commit"}, {"oid": "e56e773242c393adb16752c697cbbfc41f6e387c", "url": "https://github.com/grpc/grpc-java/commit/e56e773242c393adb16752c697cbbfc41f6e387c", "message": "Set Result.config to the entire service config bug keep optimization for null config selector", "committedDate": "2020-09-10T17:07:52Z", "type": "commit"}]}