{"pr_number": 7266, "pr_title": "xds: refactor AdsStream to envoy-proto-and-version-agnostic AbstractAdsStream", "pr_createdAt": "2020-07-29T23:48:30Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7266", "timeline": [{"oid": "13c0f70516b86943739d24db2ad313782dc66784", "url": "https://github.com/grpc/grpc-java/commit/13c0f70516b86943739d24db2ad313782dc66784", "message": "xds: refactor AdsStream to envoy proto agnostic AbstractAdsStream", "committedDate": "2020-07-29T23:46:51Z", "type": "commit"}, {"oid": "afd0689f31dc492d1eefbd7b7b8444a8c5c43552", "url": "https://github.com/grpc/grpc-java/commit/afd0689f31dc492d1eefbd7b7b8444a8c5c43552", "message": "suppress unused warning", "committedDate": "2020-07-30T00:05:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzOTI2MA==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r462839260", "bodyText": "Wrong log. The actual one should have already been logged. Same for the v3 class.", "author": "voidzcy", "createdAt": "2020-07-30T08:35:02Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1444,126 +1639,263 @@ private void cleanUp() {\n      * requested resource name (except for LDS as we always request for the singleton Listener)\n      * as we need it to find resources in responses.\n      */\n-    private void sendXdsRequest(String typeUrl, Collection<String> resourceNames) {\n-      checkState(requestWriter != null, \"ADS stream has not been started\");\n-      String version = \"\";\n-      String nonce = \"\";\n-      if (typeUrl.equals(ADS_TYPE_URL_LDS_V2)) {\n-        version = ldsVersion;\n-        nonce = ldsRespNonce;\n-        logger.log(XdsLogLevel.INFO, \"Sending LDS request for resources: {0}\", resourceNames);\n-      } else if (typeUrl.equals(ADS_TYPE_URL_RDS_V2)) {\n-        checkArgument(resourceNames.size() == 1,\n-            \"RDS request requesting for more than one resource\");\n-        version = rdsVersion;\n-        nonce = rdsRespNonce;\n-        rdsResourceName = resourceNames.iterator().next();\n-        logger.log(XdsLogLevel.INFO, \"Sending RDS request for resources: {0}\", resourceNames);\n-      } else if (typeUrl.equals(ADS_TYPE_URL_CDS_V2)) {\n-        version = cdsVersion;\n-        nonce = cdsRespNonce;\n-        logger.log(XdsLogLevel.INFO, \"Sending CDS request for resources: {0}\", resourceNames);\n-      } else if (typeUrl.equals(ADS_TYPE_URL_EDS_V2)) {\n-        version = edsVersion;\n-        nonce = edsRespNonce;\n-        logger.log(XdsLogLevel.INFO, \"Sending EDS request for resources: {0}\", resourceNames);\n-      }\n-      DiscoveryRequest request =\n-          DiscoveryRequest\n+    private void sendXdsRequest(ResourceType resourceType, Collection<String> resourceNames) {\n+      String version;\n+      String nonce;\n+      switch (resourceType) {\n+        case LDS:\n+          version = ldsVersion;\n+          nonce = ldsRespNonce;\n+          logger.log(XdsLogLevel.INFO, \"Sending LDS request for resources: {0}\", resourceNames);\n+          break;\n+        case RDS:\n+          checkArgument(\n+              resourceNames.size() == 1, \"RDS request requesting for more than one resource\");\n+          version = rdsVersion;\n+          nonce = rdsRespNonce;\n+          rdsResourceName = resourceNames.iterator().next();\n+          logger.log(XdsLogLevel.INFO, \"Sending RDS request for resources: {0}\", resourceNames);\n+          break;\n+        case CDS:\n+          version = cdsVersion;\n+          nonce = cdsRespNonce;\n+          logger.log(XdsLogLevel.INFO, \"Sending CDS request for resources: {0}\", resourceNames);\n+          break;\n+        case EDS:\n+          version = edsVersion;\n+          nonce = edsRespNonce;\n+          logger.log(XdsLogLevel.INFO, \"Sending EDS request for resources: {0}\", resourceNames);\n+          break;\n+        case UNKNOWN:\n+        default:\n+          throw new AssertionError(\"Unknown or missing case in enum switch: \" + resourceType);\n+      }\n+      DiscoveryRequestData request =\n+          DiscoveryRequestData\n               .newBuilder()\n               .setVersionInfo(version)\n-              .setNode(node.toEnvoyProtoNodeV2())\n+              .setNode(node)\n               .addAllResourceNames(resourceNames)\n-              .setTypeUrl(typeUrl)\n+              .setTypeUrl(resourceType)\n               .setResponseNonce(nonce)\n               .build();\n-      requestWriter.onNext(request);\n-      logger.log(XdsLogLevel.DEBUG, \"Sent DiscoveryRequest\\n{0}\", request);\n+      sendDiscoveryRequest(request);\n     }\n \n     /**\n      * Sends a DiscoveryRequest with the given information as an ACK. Updates the latest accepted\n      * version for the corresponding resource type.\n      */\n-    private void sendAckRequest(String typeUrl, Collection<String> resourceNames,\n+    private void sendAckRequest(ResourceType resourceType, Collection<String> resourceNames,\n         String versionInfo) {\n-      checkState(requestWriter != null, \"ADS stream has not been started\");\n-      String nonce = \"\";\n-      if (typeUrl.equals(ADS_TYPE_URL_LDS_V2)) {\n-        ldsVersion = versionInfo;\n-        nonce = ldsRespNonce;\n-      } else if (typeUrl.equals(ADS_TYPE_URL_RDS_V2)) {\n-        rdsVersion = versionInfo;\n-        nonce = rdsRespNonce;\n-      } else if (typeUrl.equals(ADS_TYPE_URL_CDS_V2)) {\n-        cdsVersion = versionInfo;\n-        nonce = cdsRespNonce;\n-      } else if (typeUrl.equals(ADS_TYPE_URL_EDS_V2)) {\n-        edsVersion = versionInfo;\n-        nonce = edsRespNonce;\n-      }\n-      DiscoveryRequest request =\n-          DiscoveryRequest\n+      String nonce;\n+      switch (resourceType) {\n+        case LDS:\n+          ldsVersion = versionInfo;\n+          nonce = ldsRespNonce;\n+          break;\n+        case RDS:\n+          rdsVersion = versionInfo;\n+          nonce = rdsRespNonce;\n+          break;\n+        case CDS:\n+          cdsVersion = versionInfo;\n+          nonce = cdsRespNonce;\n+          break;\n+        case EDS:\n+          edsVersion = versionInfo;\n+          nonce = edsRespNonce;\n+          break;\n+        case UNKNOWN:\n+        default:\n+          throw new AssertionError(\"Unknown or missing case in enum switch: \" + resourceType);\n+      }\n+      DiscoveryRequestData request =\n+          DiscoveryRequestData\n               .newBuilder()\n               .setVersionInfo(versionInfo)\n-              .setNode(node.toEnvoyProtoNodeV2())\n+              .setNode(node)\n               .addAllResourceNames(resourceNames)\n-              .setTypeUrl(typeUrl)\n+              .setTypeUrl(resourceType)\n               .setResponseNonce(nonce)\n               .build();\n-      requestWriter.onNext(request);\n-      logger.log(XdsLogLevel.DEBUG, \"Sent ACK request\\n{0}\", request);\n+      sendDiscoveryRequest(request);\n     }\n \n     /**\n      * Sends a DiscoveryRequest with the given information as an NACK. NACK takes the previous\n      * accepted version.\n      */\n-    private void sendNackRequest(String typeUrl, Collection<String> resourceNames,\n+    private void sendNackRequest(ResourceType resourceType, Collection<String> resourceNames,\n         String rejectVersion, String message) {\n-      checkState(requestWriter != null, \"ADS stream has not been started\");\n-      String versionInfo = \"\";\n-      String nonce = \"\";\n-      if (typeUrl.equals(ADS_TYPE_URL_LDS_V2)) {\n-        versionInfo = ldsVersion;\n-        nonce = ldsRespNonce;\n-        logger.log(\n-            XdsLogLevel.WARNING,\n-            \"Rejecting LDS update, version: {0}, reason: {1}\", rejectVersion, message);\n-      } else if (typeUrl.equals(ADS_TYPE_URL_RDS_V2)) {\n-        versionInfo = rdsVersion;\n-        nonce = rdsRespNonce;\n-        logger.log(\n-            XdsLogLevel.WARNING,\n-            \"Rejecting RDS update, version: {0}, reason: {1}\", rejectVersion, message);\n-      } else if (typeUrl.equals(ADS_TYPE_URL_CDS_V2)) {\n-        versionInfo = cdsVersion;\n-        nonce = cdsRespNonce;\n-        logger.log(\n-            XdsLogLevel.WARNING,\n-            \"Rejecting CDS update, version: {0}, reason: {1}\", rejectVersion, message);\n-      } else if (typeUrl.equals(ADS_TYPE_URL_EDS_V2)) {\n-        versionInfo = edsVersion;\n-        nonce = edsRespNonce;\n-        logger.log(\n-            XdsLogLevel.WARNING,\n-            \"Rejecting EDS update, version: {0}, reason: {1}\", rejectVersion, message);\n+      String versionInfo;\n+      String nonce;\n+      switch (resourceType) {\n+        case LDS:\n+          versionInfo = ldsVersion;\n+          nonce = ldsRespNonce;\n+          logger.log(\n+              XdsLogLevel.WARNING,\n+              \"Rejecting LDS update, version: {0}, reason: {1}\",\n+              rejectVersion,\n+              message);\n+          break;\n+        case RDS:\n+          versionInfo = rdsVersion;\n+          nonce = rdsRespNonce;\n+          logger.log(\n+              XdsLogLevel.WARNING,\n+              \"Rejecting RDS update, version: {0}, reason: {1}\",\n+              rejectVersion,\n+              message);\n+          break;\n+        case CDS:\n+          versionInfo = cdsVersion;\n+          nonce = cdsRespNonce;\n+          logger.log(\n+              XdsLogLevel.WARNING,\n+              \"Rejecting CDS update, version: {0}, reason: {1}\",\n+              rejectVersion,\n+              message);\n+          break;\n+        case EDS:\n+          versionInfo = edsVersion;\n+          nonce = edsRespNonce;\n+          logger.log(\n+              XdsLogLevel.WARNING,\n+              \"Rejecting EDS update, version: {0}, reason: {1}\",\n+              rejectVersion,\n+              message);\n+          break;\n+        case UNKNOWN:\n+        default:\n+          throw new AssertionError(\"Unknown or missing case in enum switch: \" + resourceType);\n       }\n-      DiscoveryRequest request =\n-          DiscoveryRequest\n+      DiscoveryRequestData request =\n+          DiscoveryRequestData\n               .newBuilder()\n               .setVersionInfo(versionInfo)\n-              .setNode(node.toEnvoyProtoNodeV2())\n+              .setNode(node)\n               .addAllResourceNames(resourceNames)\n-              .setTypeUrl(typeUrl)\n+              .setTypeUrl(resourceType)\n               .setResponseNonce(nonce)\n               .setErrorDetail(\n                   com.google.rpc.Status.newBuilder()\n                       .setCode(Code.INVALID_ARGUMENT_VALUE)\n-                      .setMessage(message))\n+                      .setMessage(message)\n+                      .build())\n               .build();\n-      requestWriter.onNext(request);\n-      logger.log(XdsLogLevel.DEBUG, \"Sent NACK request\\n{0}\", request);\n+      sendDiscoveryRequest(request);\n+    }\n+  }\n+\n+  private final class AdsStreamV2 extends AbstractAdsStream {\n+    private final io.envoyproxy.envoy.service.discovery.v2.AggregatedDiscoveryServiceGrpc\n+        .AggregatedDiscoveryServiceStub stubV2;\n+    private StreamObserver<io.envoyproxy.envoy.api.v2.DiscoveryRequest> requestWriterV2;\n+\n+    AdsStreamV2(io.envoyproxy.envoy.service.discovery.v2.AggregatedDiscoveryServiceGrpc\n+        .AggregatedDiscoveryServiceStub stubV2) {\n+      this.stubV2 = checkNotNull(stubV2, \"stubV2\");\n+    }\n+\n+    @Override\n+    void start() {\n+      StreamObserver<io.envoyproxy.envoy.api.v2.DiscoveryResponse> responseReaderV2 =\n+          new StreamObserver<io.envoyproxy.envoy.api.v2.DiscoveryResponse>() {\n+            @Override\n+            public void onNext(io.envoyproxy.envoy.api.v2.DiscoveryResponse response) {\n+              DiscoveryResponseData responseData =\n+                  DiscoveryResponseData.fromEnvoyProtoV2(response);\n+              if (logger.isLoggable(XdsLogLevel.DEBUG)) {\n+                logger.log(\n+                    XdsLogLevel.DEBUG,\n+                    \"Received {0} response:\\n{1}\",\n+                    responseData.getResourceType(),\n+                    respPrinter.print(response));\n+              }\n+              onDiscoveryResponse(responseData);\n+            }\n+\n+            @Override\n+            public void onError(Throwable t) {\n+              AdsStreamV2.this.onError(t);\n+            }\n+\n+            @Override\n+            public void onCompleted() {\n+              AdsStreamV2.this.onCompleted();\n+            }\n+          };\n+      requestWriterV2 = stubV2.withWaitForReady().streamAggregatedResources(responseReaderV2);\n+    }\n+\n+    @Override\n+    void sendDiscoveryRequest(DiscoveryRequestData request) {\n+      checkState(requestWriterV2 != null, \"ADS stream has not been started\");\n+      io.envoyproxy.envoy.api.v2.DiscoveryRequest requestProto =\n+          request.toEnvoyProtoV2();\n+      requestWriterV2.onNext(requestProto);\n+      logger.log(XdsLogLevel.DEBUG, \"Sent ACK request\\n{0}\", requestProto);", "originalCommit": "afd0689f31dc492d1eefbd7b7b8444a8c5c43552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0NDY5MA==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463144690", "bodyText": "Good catch. Hmm.. it's quite annoying for the logging. We need log the versioned proto message actually being sent out, so we are not able to log it inside send{Xds,Ack,Nack}Request(DiscoveryRequestData).", "author": "dapengzhang0", "createdAt": "2020-07-30T17:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzOTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1MzY5OA==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463153698", "bodyText": "I mean you can just log in the method sendXdsRequest/sendAckRequest/sendNackRequest after the line of calling sendDiscoveryRequest.", "author": "voidzcy", "createdAt": "2020-07-30T17:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzOTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2ODYwNg==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463168606", "bodyText": "just log in the method sendXdsRequest/sendAckRequest/sendNackRequest after the line of calling sendDiscoveryRequest.\n\nHere we want to log the actual proto message sent out. Inside send{Xds,Ack,Nack}Request(DiscoveryRequestData), you can only log DiscoveryRequestData.toString() (which is not necessary, because most of the data was already logged in sendXdsRequest \"Sending XXX request for resources: {0}\"), unless sendDiscoveryRequest returns the proto message.", "author": "dapengzhang0", "createdAt": "2020-07-30T17:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzOTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3MzUzOA==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463173538", "bodyText": "You can have one log message in sendAckRequest/sendNackRequest indicating if the request is ACK or NACK. Then another log message just with the proto without description in sendDiscoveryRequest. Do not add the AckType enum, it complicates things for little gain.", "author": "voidzcy", "createdAt": "2020-07-30T17:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzOTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4ODY2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463188666", "bodyText": "Done.", "author": "dapengzhang0", "createdAt": "2020-07-30T18:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzOTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjU5MA==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463192590", "bodyText": "Can you preserve the messages:\n\"Sending ACK/NACK\"\nproto\n\nMost people are eyeballing for \"ACK\" or \"NACK\" keywords.", "author": "voidzcy", "createdAt": "2020-07-30T18:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzOTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NTAxMg==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463195012", "bodyText": "Sounds good. Done.", "author": "dapengzhang0", "createdAt": "2020-07-30T18:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzOTI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "12eb1358a47c8166ab9113064cef931b2f717ec3", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/XdsClientImpl.java b/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\nindex 5e3f7ed9f..2900916c0 100644\n--- a/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\n+++ b/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\n\n@@ -1718,6 +1735,7 @@ final class XdsClientImpl extends XdsClient {\n               .addAllResourceNames(resourceNames)\n               .setTypeUrl(resourceType)\n               .setResponseNonce(nonce)\n+              .asAck()\n               .build();\n       sendDiscoveryRequest(request);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0Mjk1Mw==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r462842953", "bodyText": "nit: Builder may not be necessary given the usage is private. But up to you.", "author": "voidzcy", "createdAt": "2020-07-30T08:41:26Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1279,10 +1268,210 @@ public void run() {\n     }\n   }\n \n-  private final class AdsStream implements StreamObserver<DiscoveryResponse> {\n-    private final AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceStub stub;\n+  private enum ResourceType {\n+    UNKNOWN, LDS, RDS, CDS, EDS;\n+\n+    String typeUrl() {\n+      switch (this) {\n+        case LDS:\n+          return ADS_TYPE_URL_LDS;\n+        case RDS:\n+          return ADS_TYPE_URL_RDS;\n+        case CDS:\n+          return ADS_TYPE_URL_CDS;\n+        case EDS:\n+          return ADS_TYPE_URL_EDS;\n+        case UNKNOWN:\n+        default:\n+          throw new AssertionError(\"Unknown or missing case in enum switch: \" + this);\n+      }\n+    }\n+\n+    String typeUrlV2() {\n+      switch (this) {\n+        case LDS:\n+          return ADS_TYPE_URL_LDS_V2;\n+        case RDS:\n+          return ADS_TYPE_URL_RDS_V2;\n+        case CDS:\n+          return ADS_TYPE_URL_CDS_V2;\n+        case EDS:\n+          return ADS_TYPE_URL_EDS_V2;\n+        case UNKNOWN:\n+        default:\n+          throw new AssertionError(\"Unknown or missing case in enum switch: \" + this);\n+      }\n+    }\n+\n+    static ResourceType fromTypeUrl(String typeUrl) {\n+      switch (typeUrl) {\n+        case ADS_TYPE_URL_LDS:\n+          // fall trough\n+        case ADS_TYPE_URL_LDS_V2:\n+          return LDS;\n+        case ADS_TYPE_URL_RDS:\n+          // fall through\n+        case ADS_TYPE_URL_RDS_V2:\n+          return RDS;\n+        case ADS_TYPE_URL_CDS:\n+          // fall through\n+        case ADS_TYPE_URL_CDS_V2:\n+          return CDS;\n+        case ADS_TYPE_URL_EDS:\n+          // fall through\n+        case ADS_TYPE_URL_EDS_V2:\n+          return EDS;\n+        default:\n+          return UNKNOWN;\n+      }\n+    }\n+  }\n \n-    private StreamObserver<DiscoveryRequest> requestWriter;\n+  private static final class DiscoveryRequestData {\n+    private final ResourceType resourceType;\n+    private final List<String> resourceNames;\n+    private final String versionInfo;\n+    private final String responseNonce;\n+    private final Node node;\n+    @Nullable\n+    private final com.google.rpc.Status errorDetail;\n+\n+    private DiscoveryRequestData(\n+        ResourceType resourceType, List<String> resourceNames, String versionInfo,\n+        String responseNonce, Node node, @Nullable com.google.rpc.Status errorDetail) {\n+      this.resourceType = resourceType;\n+      this.resourceNames = resourceNames;\n+      this.versionInfo = versionInfo;\n+      this.responseNonce = responseNonce;\n+      this.node = node;\n+      this.errorDetail = errorDetail;\n+    }\n+\n+    DiscoveryRequest toEnvoyProto() {\n+      DiscoveryRequest.Builder builder =\n+          DiscoveryRequest.newBuilder()\n+              .setVersionInfo(versionInfo)\n+              .setNode(node.toEnvoyProtoNode())\n+              .addAllResourceNames(resourceNames)\n+              .setTypeUrl(resourceType.typeUrl())\n+              .setResponseNonce(responseNonce);\n+      if (errorDetail != null) {\n+        builder.setErrorDetail(errorDetail);\n+      }\n+      return builder.build();\n+    }\n+\n+    io.envoyproxy.envoy.api.v2.DiscoveryRequest toEnvoyProtoV2() {\n+      io.envoyproxy.envoy.api.v2.DiscoveryRequest.Builder builder =\n+          io.envoyproxy.envoy.api.v2.DiscoveryRequest.newBuilder()\n+              .setVersionInfo(versionInfo)\n+              .setNode(node.toEnvoyProtoNodeV2())\n+              .addAllResourceNames(resourceNames)\n+              .setTypeUrl(resourceType.typeUrlV2())\n+              .setResponseNonce(responseNonce);\n+      if (errorDetail != null) {\n+        builder.setErrorDetail(errorDetail);\n+      }\n+      return builder.build();\n+    }\n+\n+    static Builder newBuilder() {", "originalCommit": "afd0689f31dc492d1eefbd7b7b8444a8c5c43552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzkxNg==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463193916", "bodyText": "Done.", "author": "dapengzhang0", "createdAt": "2020-07-30T18:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0Mjk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "12eb1358a47c8166ab9113064cef931b2f717ec3", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/XdsClientImpl.java b/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\nindex 5e3f7ed9f..2900916c0 100644\n--- a/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\n+++ b/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\n\n@@ -1335,16 +1335,19 @@ final class XdsClientImpl extends XdsClient {\n     private final Node node;\n     @Nullable\n     private final com.google.rpc.Status errorDetail;\n+    private final AckType ackType;\n \n     private DiscoveryRequestData(\n         ResourceType resourceType, List<String> resourceNames, String versionInfo,\n-        String responseNonce, Node node, @Nullable com.google.rpc.Status errorDetail) {\n+        String responseNonce, Node node, @Nullable com.google.rpc.Status errorDetail,\n+        AckType ackType) {\n       this.resourceType = resourceType;\n       this.resourceNames = resourceNames;\n       this.versionInfo = versionInfo;\n       this.responseNonce = responseNonce;\n       this.node = node;\n       this.errorDetail = errorDetail;\n+      this.ackType = ackType;\n     }\n \n     DiscoveryRequest toEnvoyProto() {\n"}}, {"oid": "12eb1358a47c8166ab9113064cef931b2f717ec3", "url": "https://github.com/grpc/grpc-java/commit/12eb1358a47c8166ab9113064cef931b2f717ec3", "message": "fix logging", "committedDate": "2020-07-30T17:01:08Z", "type": "commit"}, {"oid": "9e5f1f5a529efedec800010f61137f8b8fd38aa4", "url": "https://github.com/grpc/grpc-java/commit/9e5f1f5a529efedec800010f61137f8b8fd38aa4", "message": "Revert \"fix logging\"\n\nThis reverts commit 12eb1358a47c8166ab9113064cef931b2f717ec3.", "committedDate": "2020-07-30T18:16:36Z", "type": "commit"}, {"oid": "6d25d99ade5fab7659b3c81b598c0d23ea308082", "url": "https://github.com/grpc/grpc-java/commit/6d25d99ade5fab7659b3c81b598c0d23ea308082", "message": "log message just with the proto without description in sendDiscoveryRequest", "committedDate": "2020-07-30T18:23:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4OTc0NA==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463189744", "bodyText": "Ah, I mean the whole Builder with setters are not necessary, can just use the constructor.", "author": "voidzcy", "createdAt": "2020-07-30T18:27:02Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1387,8 +1387,6 @@ static Builder newBuilder() {\n       private Node node;\n       private com.google.rpc.Status errorDetail;\n \n-      private Builder() {}", "originalCommit": "6d25d99ade5fab7659b3c81b598c0d23ea308082", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzE2Mg==", "url": "https://github.com/grpc/grpc-java/pull/7266#discussion_r463193162", "bodyText": "I understand. Will do the removal in upcoming commit.", "author": "dapengzhang0", "createdAt": "2020-07-30T18:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4OTc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "6c25d111fec5051454bdd8c3a504c860346bcf60", "chunk": "diff --git a/xds/src/main/java/io/grpc/xds/XdsClientImpl.java b/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\nindex 348d1a738..54d874044 100644\n--- a/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\n+++ b/xds/src/main/java/io/grpc/xds/XdsClientImpl.java\n\n@@ -1374,54 +1374,6 @@ final class XdsClientImpl extends XdsClient {\n       }\n       return builder.build();\n     }\n-\n-    static Builder newBuilder() {\n-      return new Builder();\n-    }\n-\n-    static final class Builder {\n-      private ResourceType resourceType;\n-      private List<String> resourceNames = new ArrayList<>();\n-      private String versionInfo;\n-      private String responseNonce;\n-      private Node node;\n-      private com.google.rpc.Status errorDetail;\n-\n-      Builder setTypeUrl(ResourceType resourceType) {\n-        this.resourceType = checkNotNull(resourceType, \"resourceType\");\n-        return this;\n-      }\n-\n-      Builder addAllResourceNames(Collection<String> resourceNames) {\n-        this.resourceNames.addAll(checkNotNull(resourceNames, \"resourceNames\"));\n-        return this;\n-      }\n-\n-      Builder setVersionInfo(String versionInfo) {\n-        this.versionInfo = checkNotNull(versionInfo, \"versionInfo\");\n-        return this;\n-      }\n-\n-      Builder setResponseNonce(String responseNonce) {\n-        this.responseNonce = checkNotNull(responseNonce, \"responseNonce\");\n-        return this;\n-      }\n-\n-      Builder setNode(Node node) {\n-        this.node = checkNotNull(node, \"node\");\n-        return this;\n-      }\n-\n-      Builder setErrorDetail(com.google.rpc.Status errorDetail) {\n-        this.errorDetail = checkNotNull(errorDetail, \"errorDetail\");\n-        return this;\n-      }\n-\n-      DiscoveryRequestData build() {\n-        return new DiscoveryRequestData(\n-            resourceType, resourceNames, versionInfo, responseNonce, node, errorDetail);\n-      }\n-    }\n   }\n \n   private static final class DiscoveryResponseData {\n"}}, {"oid": "6c25d111fec5051454bdd8c3a504c860346bcf60", "url": "https://github.com/grpc/grpc-java/commit/6c25d111fec5051454bdd8c3a504c860346bcf60", "message": "remove DiscoveryRequestData.Builder", "committedDate": "2020-07-30T18:34:22Z", "type": "commit"}, {"oid": "c9779ffaf3ba9dfcc4e50b7ad324c01e5f279d1b", "url": "https://github.com/grpc/grpc-java/commit/c9779ffaf3ba9dfcc4e50b7ad324c01e5f279d1b", "message": "log ACK/NACK explicitly", "committedDate": "2020-07-30T18:36:35Z", "type": "commit"}]}