{"pr_number": 649, "pr_title": "[KOGITO-2854] drools-core unfork", "pr_createdAt": "2020-07-24T09:26:16Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/649", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MTEzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459951138", "bodyText": "Back to the Future", "author": "danielezonca", "createdAt": "2020-07-24T09:36:31Z", "path": "api/kogito-timer/src/main/java/org/kie/kogito/timer/TimerInstance.java", "diffHunk": "@@ -1,11 +1,11 @@\n /*\n- * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb6239a4162e698b36357daa92fde4a02ffbc5dc", "chunk": "diff --git a/api/kogito-timer/src/main/java/org/kie/kogito/timer/TimerInstance.java b/api/kogito-timer/src/main/java/org/kie/kogito/timer/TimerInstance.java\nindex 898436ac76..ece3421183 100644\n--- a/api/kogito-timer/src/main/java/org/kie/kogito/timer/TimerInstance.java\n+++ b/api/kogito-timer/src/main/java/org/kie/kogito/timer/TimerInstance.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2005 JBoss Inc\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MTkyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459951928", "bodyText": "Side note: this change makes kie-internal and kogito-internal diverge", "author": "danielezonca", "createdAt": "2020-07-24T09:38:19Z", "path": "api/kogito-internal/src/main/java/org/kie/internal/logger/KnowledgeRuntimeLoggerFactory.java", "diffHunk": "@@ -97,10 +97,10 @@ private static synchronized KieLoggers getKnowledgeRuntimeLoggerProvider() {\n     @SuppressWarnings(\"unchecked\")\n     private static void loadProvider() {\n         try {\n-            Class<KieLoggers> cls = (Class<KieLoggers>) Class.forName( \"org.drools.core.audit.KnowledgeRuntimeLoggerProviderImpl\" );\n+            Class<KieLoggers> cls = (Class<KieLoggers>) Class.forName( \"org.drools.core.audit.KogitoKnowledgeRuntimeLoggerProviderImpl\" );\n             setKnowledgeRuntimeLoggerProvider( cls.newInstance() );\n         } catch ( Exception e ) {\n-            throw new RuntimeException( \"Provider org.drools.core.audit.KnowledgeRuntimeLoggerProviderImpl could not be set.\",\n+            throw new RuntimeException( \"Provider org.drools.core.audit.KogitoKnowledgeRuntimeLoggerProviderImpl could not be set.\",", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/api/kogito-internal/src/main/java/org/kie/internal/logger/KnowledgeRuntimeLoggerFactory.java b/api/kogito-internal/src/main/java/org/kie/internal/logger/KnowledgeRuntimeLoggerFactory.java\nindex 9f699333b2..4847e1aadd 100755\n--- a/api/kogito-internal/src/main/java/org/kie/internal/logger/KnowledgeRuntimeLoggerFactory.java\n+++ b/api/kogito-internal/src/main/java/org/kie/internal/logger/KnowledgeRuntimeLoggerFactory.java\n\n@@ -97,10 +97,10 @@ public class KnowledgeRuntimeLoggerFactory {\n     @SuppressWarnings(\"unchecked\")\n     private static void loadProvider() {\n         try {\n-            Class<KieLoggers> cls = (Class<KieLoggers>) Class.forName( \"org.drools.core.audit.KogitoKnowledgeRuntimeLoggerProviderImpl\" );\n+            Class<KieLoggers> cls = (Class<KieLoggers>) Class.forName( \"org.drools.core.audit.KnowledgeRuntimeLoggerProviderImpl\" );\n             setKnowledgeRuntimeLoggerProvider( cls.newInstance() );\n         } catch ( Exception e ) {\n-            throw new RuntimeException( \"Provider org.drools.core.audit.KogitoKnowledgeRuntimeLoggerProviderImpl could not be set.\",\n+            throw new RuntimeException( \"Provider org.drools.core.audit.KnowledgeRuntimeLoggerProviderImpl could not be set.\",\n                                                        e );\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3NjYyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459976629", "bodyText": "This SerializationHelper class is now the only remained class in drools-compiler/test. I think it should be removed or if it is imported in another module as test dependency it should be moved somewhere else.\nWdyt?", "author": "danielezonca", "createdAt": "2020-07-24T10:36:02Z", "path": "drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java", "diffHunk": "@@ -43,36 +44,36 @@\n     public static <T> T serializeObject(final T obj,\n                                         final ClassLoader classLoader) throws IOException,\n             ClassNotFoundException {\n-        return (T) DroolsStreamUtils.streamIn(DroolsStreamUtils.streamOut(obj), classLoader);\n+        return (T) DroolsStreamUtils.streamIn( DroolsStreamUtils.streamOut(obj), classLoader);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final boolean dispose) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final boolean dispose) throws Exception {\n         return getSerialisedStatefulKnowledgeSession(ksession,\n                                                      dispose,\n                                                      true);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final boolean dispose,\n-                                                                                 final boolean testRoundTrip) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final boolean dispose,\n+                                                                                  final boolean testRoundTrip) throws Exception {\n         return getSerialisedStatefulKnowledgeSession(ksession, ksession.getKieBase(), dispose);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final KieBase kbase,\n-                                                                                 final boolean dispose) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final KieBase kbase,\n+                                                                                  final boolean dispose) throws Exception {\n         return getSerialisedStatefulKnowledgeSessionWithMessage(ksession, kbase, dispose).getSession();\n     }\n \n-    public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage(final KieSession ksession,\n-                                                                                 final KieBase kbase,\n-                                                                                 final boolean dispose) throws Exception {\n-        final ProtobufMarshaller marshaller = (ProtobufMarshaller) MarshallerFactory.newMarshaller(kbase,\n-                                                                                                   (ObjectMarshallingStrategy[]) ksession.getEnvironment().get(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES));\n+    public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage( final KieSession ksession,\n+                                                                                      final KieBase kbase,\n+                                                                                      final boolean dispose) throws Exception {\n+        ObjectMarshallingStrategy[] strategies = ( ObjectMarshallingStrategy[]) ksession.getEnvironment().get( EnvironmentName.OBJECT_MARSHALLING_STRATEGIES);", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0Nzc3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460747778", "bodyText": "This is currently used only in jbpm tests. I'll move it there.", "author": "mariofusco", "createdAt": "2020-07-27T09:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3NjYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java b/drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java\nindex a88ce90843..9381af6b00 100644\n--- a/drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java\n+++ b/drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java\n\n@@ -69,8 +68,8 @@ public class SerializationHelper {\n     public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage( final KieSession ksession,\n                                                                                       final KieBase kbase,\n                                                                                       final boolean dispose) throws Exception {\n-        ObjectMarshallingStrategy[] strategies = ( ObjectMarshallingStrategy[]) ksession.getEnvironment().get( EnvironmentName.OBJECT_MARSHALLING_STRATEGIES);\n-        final ProtobufMarshaller marshaller = new KogitoProtobufMarshaller(kbase, new MarshallingConfigurationImpl( strategies, true, true ));\n+        final ProtobufMarshaller marshaller = ( ProtobufMarshaller ) MarshallerFactory.newMarshaller(kbase,\n+                                                                                                   ( ObjectMarshallingStrategy[]) ksession.getEnvironment().get( EnvironmentName.OBJECT_MARSHALLING_STRATEGIES));\n         final long time = ksession.getSessionClock().getCurrentTime();\n         // make sure globas are in the environment of the session\n         ksession.getEnvironment().set( EnvironmentName.GLOBALS, ksession.getGlobals());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODk2MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459978960", "bodyText": "We are in 2020 :)", "author": "danielezonca", "createdAt": "2020-07-24T10:42:07Z", "path": "drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2005 JBoss Inc", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODk5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460748990", "bodyText": "I'll check and fix all headers.", "author": "mariofusco", "createdAt": "2020-07-27T09:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java b/drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java\nindex 972e4763a8..264c30828e 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2005 JBoss Inc\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTMwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981302", "bodyText": "Can you please clarify? This class seems not Kogito specific so don't we have it already in drools-core?\nIf we can use kie7 version we can probably remove also KogitoWorkingMemoryLogger, KogitoWorkingMemoryInMemoryLogger and KogitoWorkingMemoryFileLogger", "author": "danielezonca", "createdAt": "2020-07-24T10:48:02Z", "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowLogEvent.java", "diffHunk": "@@ -16,16 +16,17 @@\n \n package org.drools.core.audit.event;\n \n+import org.kie.api.runtime.process.ProcessInstance;\n+\n /**\n- * An event filter that can be used to filter log events.\n+ * A ruleflow event logged by the WorkingMemoryLogger.\n+ * It is a snapshot of the event as it was thrown by the working memory.\n+ * It contains the process name and id.\n  */\n-public interface ILogEventFilter {\n-\n-    /**\n-     * Returns whether the given event should be filtered from the event log or not.\n-     * @param event The log event\n-     * @return Whether the event should be filtered from the event log or not.\n-     */\n-    boolean acceptEvent(LogEvent event);\n+public class KogitoRuleFlowLogEvent extends RuleFlowLogEvent {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTY1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460761656", "bodyText": "There's a subtle problem here. Without this class that is explicitly calling processInstance.getProcessId() the same call will be made by the Drools class which will fail with a\njava.lang.NoSuchMethodError: org.kie.api.runtime.process.ProcessInstance.getId()J\nbecause the kogito implementation of that method returns a String but drools expects a long.", "author": "mariofusco", "createdAt": "2020-07-27T09:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowLogEvent.java b/drools/drools-core/src/main/java/org/drools/core/audit/event/ILogEventFilter.java\nold mode 100644\nnew mode 100755\nsimilarity index 56%\nrename from drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowLogEvent.java\nrename to drools/drools-core/src/main/java/org/drools/core/audit/event/ILogEventFilter.java\nindex 185ca0b11c..a063d651fd\n--- a/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowLogEvent.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/audit/event/ILogEventFilter.java\n\n@@ -16,17 +16,16 @@\n \n package org.drools.core.audit.event;\n \n-import org.kie.api.runtime.process.ProcessInstance;\n-\n /**\n- * A ruleflow event logged by the WorkingMemoryLogger.\n- * It is a snapshot of the event as it was thrown by the working memory.\n- * It contains the process name and id.\n+ * An event filter that can be used to filter log events.\n  */\n-public class KogitoRuleFlowLogEvent extends RuleFlowLogEvent {\n+public interface ILogEventFilter {\n+\n+    /**\n+     * Returns whether the given event should be filtered from the event log or not.\n+     * @param event The log event\n+     * @return Whether the event should be filtered from the event log or not.\n+     */\n+    boolean acceptEvent(LogEvent event);\n \n-    public KogitoRuleFlowLogEvent( final int type,\n-                                   ProcessInstance processInstance) {\n-        super(type, processInstance.getProcessId(), processInstance.getProcessName(), processInstance.getId());\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQwMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981400", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-24T10:48:17Z", "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.audit.event;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoRuleFlowNodeLogEvent extends RuleFlowNodeLogEvent {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTc4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460761783", "bodyText": "Same as above", "author": "mariofusco", "createdAt": "2020-07-27T09:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java b/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java\nindex 7113e99682..f4659ff592 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQ3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981479", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-24T10:48:31Z", "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.audit.event;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoRuleFlowVariableLogEvent extends RuleFlowVariableLogEvent {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTgzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460761832", "bodyText": "Same as above", "author": "mariofusco", "createdAt": "2020-07-27T09:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java b/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java\nindex b302b3acc0..70db95d566 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MzEyNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459983124", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-07-24T10:52:53Z", "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.drools.core.common;", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java b/drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java\nindex d1406933e3..29b148f51c 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java\n\n@@ -1,3 +1,18 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.drools.core.common;\n \n import org.drools.core.impl.InternalKnowledgeBase;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4Mzg0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459983843", "bodyText": "2020", "author": "danielezonca", "createdAt": "2020-07-24T10:54:50Z", "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java b/drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java\nindex a223f1faca..f0a55d69ff 100755\n--- a/drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDIxMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459984212", "bodyText": "Are they needed? RuleFlowGroup should not be used in Kogito so I do not expect a Kogito specific interface for that", "author": "danielezonca", "createdAt": "2020-07-24T10:55:46Z", "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.common;\n+\n+public interface KogitoInternalAgenda\n+    extends\n+    InternalAgenda {\n+\n+    boolean isRuleActiveInRuleFlowGroup(String ruleflowGroupName, String ruleName, String processInstanceId);\n+\n+    /**\n+     * Activates the <code>RuleFlowGroup</code> with the given name.\n+     * All activations in the given <code>RuleFlowGroup</code> are added to the agenda.\n+     * As long as the <code>RuleFlowGroup</code> remains active,\n+     * its activations are automatically added to the agenda.\n+     * The given processInstanceId and nodeInstanceId define the process context\n+     * in which this <code>RuleFlowGroup</code> is used.\n+     */\n+    void activateRuleFlowGroup(String name, String processInstanceId, String nodeInstanceId);\n+\n+    /**\n+     * Returns true if there is at least one activation of the given rule name\n+     * in the given ruleflow group name\n+     */\n+    boolean isRuleInstanceAgendaItem(String ruleflowGroupName,\n+                                     String ruleName,\n+                                     String processInstanceId);", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2NTQ4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460765486", "bodyText": "It is true that Kogito doesn't use RFG, but there are many tests in jbpm (inherited form v7) that still do and I wanted to keep everything working as before even though I agree that this could be no longer necessary.", "author": "mariofusco", "createdAt": "2020-07-27T09:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java b/drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java\nindex a223f1faca..f0a55d69ff 100755\n--- a/drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDgxNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459984816", "bodyText": "If we update the date, I think it is better to use 2020 :)", "author": "danielezonca", "createdAt": "2020-07-24T10:57:13Z", "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessEventSupport.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessEventSupport.java b/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessEventSupport.java\nindex 9d829419f2..2719cb5c25 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessEventSupport.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessEventSupport.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTIyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985228", "bodyText": "Do we really need to create this copy with just a different name?", "author": "danielezonca", "createdAt": "2020-07-24T10:58:19Z", "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeLeftEventImpl.java", "diffHunk": "@@ -20,13 +20,13 @@\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class ProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {\n+public class KogitoProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2NzU0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460767541", "bodyText": "See #649 (comment) If I don't do this the invocation of nodeInstance.getId() in the toString method of this event will cause a NoSuchMethodError.", "author": "mariofusco", "createdAt": "2020-07-27T09:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeLeftEventImpl.java b/drools/drools-core/src/main/java/org/drools/core/event/ProcessNodeLeftEventImpl.java\nold mode 100644\nnew mode 100755\nsimilarity index 87%\nrename from drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeLeftEventImpl.java\nrename to drools/drools-core/src/main/java/org/drools/core/event/ProcessNodeLeftEventImpl.java\nindex f97756a08f..d21c1fd5c6\n--- a/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeLeftEventImpl.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/event/ProcessNodeLeftEventImpl.java\n\n@@ -20,13 +20,13 @@ import org.kie.api.event.process.ProcessNodeLeftEvent;\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class KogitoProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {\n+public class ProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {\n \n     private static final long serialVersionUID = 510l;\n-\n+    \n     private NodeInstance nodeInstance;\n \n-    public KogitoProcessNodeLeftEventImpl( final NodeInstance nodeInstance, KieRuntime kruntime ) {\n+    public ProcessNodeLeftEventImpl(final NodeInstance nodeInstance, KieRuntime kruntime ) {\n         super( nodeInstance.getProcessInstance(), kruntime );\n         this.nodeInstance = nodeInstance;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTM3Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985372", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-24T10:58:45Z", "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeTriggeredEventImpl.java", "diffHunk": "@@ -20,13 +20,13 @@\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class ProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {\n+public class KogitoProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2NzY2Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460767663", "bodyText": "Same as above", "author": "mariofusco", "createdAt": "2020-07-27T09:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeTriggeredEventImpl.java b/drools/drools-core/src/main/java/org/drools/core/event/ProcessNodeTriggeredEventImpl.java\nold mode 100644\nnew mode 100755\nsimilarity index 86%\nrename from drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeTriggeredEventImpl.java\nrename to drools/drools-core/src/main/java/org/drools/core/event/ProcessNodeTriggeredEventImpl.java\nindex e624a42833..5cb3dd2ab3\n--- a/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeTriggeredEventImpl.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/event/ProcessNodeTriggeredEventImpl.java\n\n@@ -20,13 +20,13 @@ import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class KogitoProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {\n+public class ProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {\n \n     private static final long serialVersionUID = 510l;\n-\n+    \n     private NodeInstance nodeInstance;\n \n-    public KogitoProcessNodeTriggeredEventImpl( final NodeInstance nodeInstance, KieRuntime kruntime ) {\n+    public ProcessNodeTriggeredEventImpl(final NodeInstance nodeInstance, KieRuntime kruntime ) {\n         super( nodeInstance.getProcessInstance(), kruntime );\n         this.nodeInstance = nodeInstance;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTQ1NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985455", "bodyText": "Can you please extend ProcessVariableChangedEventImpl to add getNodeInstance method?", "author": "danielezonca", "createdAt": "2020-07-24T10:58:58Z", "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessVariableChangedEventImpl.java", "diffHunk": "@@ -24,21 +24,21 @@\n import org.kie.api.runtime.process.NodeInstance;\n import org.kie.api.runtime.process.ProcessInstance;\n \n-public class ProcessVariableChangedEventImpl extends ProcessEvent implements ProcessVariableChangedEvent {\n+public class KogitoProcessVariableChangedEventImpl  extends ProcessEvent implements ProcessVariableChangedEvent {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessVariableChangedEventImpl.java b/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessVariableChangedEventImpl.java\nindex f04d136ba0..d88e7700ab 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessVariableChangedEventImpl.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessVariableChangedEventImpl.java\n\n@@ -16,7 +15,6 @@\n \n package org.drools.core.event;\n \n-import java.util.Collections;\n import java.util.List;\n \n import org.kie.api.event.process.ProcessVariableChangedEvent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjE5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986190", "bodyText": "Do we need this rename? As far as I can see the only difference is an unused String dataType parameter to unmarshal method", "author": "danielezonca", "createdAt": "2020-07-24T11:00:33Z", "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoSerializablePlaceholderResolverStrategy.java", "diffHunk": "@@ -25,18 +25,16 @@\n import org.kie.api.marshalling.ObjectMarshallingStrategy;\n import org.kie.api.marshalling.ObjectMarshallingStrategyAcceptor;\n \n-public class SerializablePlaceholderResolverStrategy\n-    implements\n-    ObjectMarshallingStrategy {\n+public class KogitoSerializablePlaceholderResolverStrategy implements ObjectMarshallingStrategy {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MDAxMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460780010", "bodyText": "The interface ObjectMarshallingStrategy in public API is indeed changed with that new dataType argument in the unmarshal method. The new implementation is necessary to implement this change which is used in a few tests like ProtoStreamObjectMarshallingStrategyTest", "author": "mariofusco", "createdAt": "2020-07-27T09:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoSerializablePlaceholderResolverStrategy.java b/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/SerializablePlaceholderResolverStrategy.java\nold mode 100644\nnew mode 100755\nsimilarity index 85%\nrename from drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoSerializablePlaceholderResolverStrategy.java\nrename to drools/drools-core/src/main/java/org/drools/core/marshalling/impl/SerializablePlaceholderResolverStrategy.java\nindex 57e1b8b529..c65f45e9ec\n--- a/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoSerializablePlaceholderResolverStrategy.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/SerializablePlaceholderResolverStrategy.java\n\n@@ -25,16 +25,18 @@ import java.util.List;\n import org.kie.api.marshalling.ObjectMarshallingStrategy;\n import org.kie.api.marshalling.ObjectMarshallingStrategyAcceptor;\n \n-public class KogitoSerializablePlaceholderResolverStrategy implements ObjectMarshallingStrategy {\n+public class SerializablePlaceholderResolverStrategy\n+    implements\n+    ObjectMarshallingStrategy {\n \n     private int index;\n-\n+    \n     private ObjectMarshallingStrategyAcceptor acceptor;\n-\n-    public KogitoSerializablePlaceholderResolverStrategy( ObjectMarshallingStrategyAcceptor acceptor) {\n+    \n+    public SerializablePlaceholderResolverStrategy(ObjectMarshallingStrategyAcceptor acceptor) {\n         this.acceptor = acceptor;\n     }\n-\n+    \n     public int getIndex() {\n         return this.index;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjQ4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986489", "bodyText": "I have the impression this is just a rename so we should be able to revert the change and delete this file ( to keep original drools-core version)", "author": "danielezonca", "createdAt": "2020-07-24T11:01:23Z", "path": "drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java", "diffHunk": "@@ -28,7 +28,7 @@ public static Environment newEnvironment() {\n             Environment env = new EnvironmentImpl();\n             env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, \n                     new ObjectMarshallingStrategy [] {\n-                        new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)\n+                        new KogitoSerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MDE0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460780144", "bodyText": "See above", "author": "mariofusco", "createdAt": "2020-07-27T09:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java b/drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java\nold mode 100644\nnew mode 100755\nindex bed63cd81a..e908d0e415\n--- a/drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java\n\n@@ -28,7 +28,7 @@ public class EnvironmentFactory {\n             Environment env = new EnvironmentImpl();\n             env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, \n                     new ObjectMarshallingStrategy [] {\n-                        new KogitoSerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)\n+                        new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)\n                     });\n         return env;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjU3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986571", "bodyText": "2020", "author": "danielezonca", "createdAt": "2020-07-24T11:01:37Z", "path": "drools/drools-core/src/main/java/org/drools/core/impl/KogitoStatefulKnowledgeSessionImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/impl/KogitoStatefulKnowledgeSessionImpl.java b/drools/drools-core/src/main/java/org/drools/core/impl/KogitoStatefulKnowledgeSessionImpl.java\nindex 0bb0def2b3..4d91ed7f20 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/impl/KogitoStatefulKnowledgeSessionImpl.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/impl/KogitoStatefulKnowledgeSessionImpl.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4Njc4MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986780", "bodyText": "2020", "author": "danielezonca", "createdAt": "2020-07-24T11:02:05Z", "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoComponentFactoryFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoComponentFactoryFactory.java b/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoComponentFactoryFactory.java\nindex 719a10fc2d..44530ef854 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoComponentFactoryFactory.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoComponentFactoryFactory.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzIwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987209", "bodyText": "2020", "author": "danielezonca", "createdAt": "2020-07-24T11:03:15Z", "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoInternalFactHandle.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoInternalFactHandle.java b/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoInternalFactHandle.java\nindex da50df1a14..059309afb7 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoInternalFactHandle.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoInternalFactHandle.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzI5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987295", "bodyText": "2020", "author": "danielezonca", "createdAt": "2020-07-24T11:03:28Z", "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoFactHandleFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoFactHandleFactory.java b/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoFactHandleFactory.java\nindex 9984bb6c81..8a0d3cff47 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoFactHandleFactory.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoFactHandleFactory.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzkwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987908", "bodyText": "2020", "author": "danielezonca", "createdAt": "2020-07-24T11:05:00Z", "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoDefaultFactHandle.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoDefaultFactHandle.java b/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoDefaultFactHandle.java\nindex 8a3863d295..af3956c23b 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoDefaultFactHandle.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoDefaultFactHandle.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODY4MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459988680", "bodyText": "I have the impression KogitoSerializablePlaceholderResolverStrategy is just a rename and if we revert that, we should be able to remove this file too", "author": "danielezonca", "createdAt": "2020-07-24T11:07:02Z", "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.marshalling.impl;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.definition.process.Process;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.marshalling.ObjectMarshallingStrategyStore;\n+import org.kie.api.runtime.Environment;\n+\n+public class KogitoMarshallerReaderContext extends MarshallerReaderContext  {\n+\n+    public Map<String, Process> processes = new HashMap<>();\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         Environment env) throws IOException {\n+        this( stream,\n+              kBase,\n+              sinks,\n+              resolverStrategyFactory,\n+              timerReaders,\n+              true,\n+              true,\n+              env );\n+    }\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         Map<String, Process> processes,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         Environment env) throws IOException {\n+        this( stream,\n+              null,\n+              sinks,\n+              resolverStrategyFactory,\n+              timerReaders,\n+              true,\n+              true,\n+              env );\n+        this.processes = processes;\n+    }\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         boolean marshalProcessInstances,\n+                                         boolean marshalWorkItems,\n+                                         Environment env) throws IOException {\n+        super(stream, kBase, sinks, resolverStrategyFactory, timerReaders,\n+                marshalProcessInstances, marshalWorkItems, env);\n+\n+        if (this.kBase != null) {\n+            this.kBase.getProcesses().forEach( p -> this.processes.put(p.getId(), p));\n+        }\n+    }\n+\n+    @Override\n+    protected ObjectMarshallingStrategy[] getMarshallingStrategy() {\n+        return new ObjectMarshallingStrategy[]{new KogitoSerializablePlaceholderResolverStrategy( ClassObjectMarshallingStrategyAcceptor.DEFAULT  )};", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MjA1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460782051", "bodyText": "As explained above this is necessary to implement the unmarshal method with the addition dataType argument.", "author": "mariofusco", "createdAt": "2020-07-27T10:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java b/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java\nindex 1e9c7a72f0..cf4f33e30d 100755\n--- a/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODgwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459988809", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-24T11:07:21Z", "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerWriteContext.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.marshalling.impl;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Map;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.common.InternalWorkingMemory;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.marshalling.ObjectMarshallingStrategyStore;\n+import org.kie.api.runtime.Environment;\n+\n+/**\n+ * Extension to default <code>MarshallerWriteContext</code> that allows to pass additional\n+ * information to marshaller strategies, such as process instance id, task it, state\n+ */\n+public class KogitoMarshallerWriteContext extends MarshallerWriteContext {\n+\n+    public KogitoMarshallerWriteContext( OutputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         InternalWorkingMemory wm,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Environment env) throws IOException {\n+        super(stream, kBase, wm, sinks, resolverStrategyFactory, env);\n+    }\n+\n+    public KogitoMarshallerWriteContext(OutputStream stream,\n+                                  InternalKnowledgeBase kBase,\n+                                  InternalWorkingMemory wm,\n+                                  Map<Integer, BaseNode> sinks,\n+                                  ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                  boolean marshalProcessInstances,\n+                                  boolean marshalWorkItems,\n+                                  Environment env) throws IOException {\n+        super(stream, kBase, wm, sinks, resolverStrategyFactory, marshalProcessInstances, marshalWorkItems, env);\n+    }\n+\n+    @Override\n+    protected ObjectMarshallingStrategy[] getMarshallingStrategy() {\n+        return new ObjectMarshallingStrategy[]{new KogitoSerializablePlaceholderResolverStrategy( ClassObjectMarshallingStrategyAcceptor.DEFAULT  )};", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerWriteContext.java b/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerWriteContext.java\nindex 0a71c90421..e516214eee 100755\n--- a/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerWriteContext.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerWriteContext.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4OTU5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459989590", "bodyText": "Let's update to 2020 directly :)", "author": "danielezonca", "createdAt": "2020-07-24T11:09:30Z", "path": "drools/drools-core/src/main/java/org/drools/core/ruleunit/InternalStoreCallback.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 JBoss Inc\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/ruleunit/InternalStoreCallback.java b/drools/drools-core/src/main/java/org/drools/core/ruleunit/InternalStoreCallback.java\nindex 80f5868d09..764fe02538 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/ruleunit/InternalStoreCallback.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/ruleunit/InternalStoreCallback.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4OTgwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459989801", "bodyText": "Back to the future", "author": "danielezonca", "createdAt": "2020-07-24T11:09:59Z", "path": "drools/drools-core/src/main/java/org/drools/core/time/KogitoTimerServiceFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/time/KogitoTimerServiceFactory.java b/drools/drools-core/src/main/java/org/drools/core/time/KogitoTimerServiceFactory.java\nindex 0d28f3e2cf..ee238b1742 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/time/KogitoTimerServiceFactory.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/time/KogitoTimerServiceFactory.java\n\n@@ -1,9 +1,8 @@\n /*\n- * Copyright 2005 JBoss Inc\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDgzMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459990830", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-07-24T11:12:41Z", "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.drools.core.util;", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java b/drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java\ndeleted file mode 100644\nindex bc29430331..0000000000\n--- a/drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java\n+++ /dev/null\n\n@@ -1,16 +0,0 @@\n-package org.drools.core.util;\n-\n-public class KogitoStringUtils {\n-\n-    public static String capitalize(String string) {\n-        if (string == null) {\n-            return null;\n-        }\n-\n-        if (string.length() == 1) {\n-            return string.toUpperCase();\n-        }\n-\n-        return Character.toString(string.charAt(0)).toUpperCase() + string.substring(1);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTk0OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459991948", "bodyText": "We can probably move this method to StringUtils class and remove this one. Btw that class already contains ucFirst method that is equivalment except for null check", "author": "danielezonca", "createdAt": "2020-07-24T11:15:40Z", "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.drools.core.util;\n+\n+public class KogitoStringUtils {\n+\n+    public static String capitalize(String string) {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4Njg5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460786893", "bodyText": "I removed this class and replaced all usages of ts capitalize method with ucFirst one.", "author": "mariofusco", "createdAt": "2020-07-27T10:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java b/drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java\ndeleted file mode 100644\nindex bc29430331..0000000000\n--- a/drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java\n+++ /dev/null\n\n@@ -1,16 +0,0 @@\n-package org.drools.core.util;\n-\n-public class KogitoStringUtils {\n-\n-    public static String capitalize(String string) {\n-        if (string == null) {\n-            return null;\n-        }\n-\n-        if (string.length() == 1) {\n-            return string.toUpperCase();\n-        }\n-\n-        return Character.toString(string.charAt(0)).toUpperCase() + string.substring(1);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzEwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993106", "bodyText": "This is a new class specific for Kogito so we should be able to update the signature to KogitoInternalFactHandle and avoid an internal cast.\nWdyt?", "author": "danielezonca", "createdAt": "2020-07-24T11:18:29Z", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java", "diffHunk": "@@ -72,6 +73,6 @@ public void delete(DataHandle dh, RuleImpl rule, TerminalNode terminalNode, Fact\n \n     public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n         (( WorkingMemoryEntryPoint ) entryPoint).delete( fh, rule, terminalNode, fhState );\n-        handles.remove( fh.getDataHandle() );\n+        handles.remove( (( KogitoInternalFactHandle ) fh).getDataHandle() );", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzQ5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460807492", "bodyText": "Done.", "author": "mariofusco", "createdAt": "2020-07-27T10:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java\nindex 3d2ee6e69f..279d8de044 100644\n--- a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java\n+++ b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java\n\n@@ -68,11 +68,11 @@ public class EntryPointDataProcessor implements DataProcessor {\n     }\n \n     public void delete(DataHandle dh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        delete( handles.get(dh), rule, terminalNode, fhState );\n+        delete( (KogitoInternalFactHandle) handles.get(dh), rule, terminalNode, fhState );\n     }\n \n-    public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n+    public void delete(KogitoInternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n         (( WorkingMemoryEntryPoint ) entryPoint).delete( fh, rule, terminalNode, fhState );\n-        handles.remove( (( KogitoInternalFactHandle ) fh).getDataHandle() );\n+        handles.remove( fh.getDataHandle() );\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzM2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993361", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-24T11:19:09Z", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -92,14 +93,14 @@ public void subscribe(DataProcessor processor) {\n \n     @Override\n     public void update(InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach(s -> s.update(dh, obj, mask, modifiedClass, activation));\n         subscribers.forEach(s -> s.update(dh, (T) obj));\n     }\n \n     @Override\n     public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         if (dh != this.handle) {\n             throw new IllegalArgumentException(\"The given handle is not contained in this DataStore\");\n         }", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzUyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460807529", "bodyText": "Done.", "author": "mariofusco", "createdAt": "2020-07-27T10:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\nindex 77ea180767..29741ee390 100644\n--- a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\n+++ b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\n\n@@ -92,14 +91,14 @@ public class FieldDataStore<T> implements SingletonStore<T>,\n     }\n \n     @Override\n-    public void update(InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n+    public void update(KogitoInternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n         DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach(s -> s.update(dh, obj, mask, modifiedClass, activation));\n         subscribers.forEach(s -> s.update(dh, (T) obj));\n     }\n \n     @Override\n-    public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n+    public void delete(KogitoInternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n         DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         if (dh != this.handle) {\n             throw new IllegalArgumentException(\"The given handle is not contained in this DataStore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzQ2Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993463", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-24T11:19:25Z", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java", "diffHunk": "@@ -78,14 +79,14 @@ public void subscribe(DataProcessor processor) {\n \n     @Override\n     public void update( InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach( s -> s.update( dh, obj, mask, modifiedClass, activation ) );\n         subscribers.forEach( s -> s.update(dh, (T) obj) );\n     }\n \n     @Override\n     public void delete( InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzU2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460807564", "bodyText": "Done.", "author": "mariofusco", "createdAt": "2020-07-27T10:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java\nindex 7eefea212c..496338bcf3 100644\n--- a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java\n+++ b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java\n\n@@ -78,14 +77,14 @@ public class ListDataStore<T> implements DataStore<T>,\n     }\n \n     @Override\n-    public void update( InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n+    public void update( KogitoInternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n         DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach( s -> s.update( dh, obj, mask, modifiedClass, activation ) );\n         subscribers.forEach( s -> s.update(dh, (T) obj) );\n     }\n \n     @Override\n-    public void delete( InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n+    public void delete( KogitoInternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n         DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach( s -> s.delete( dh, rule, terminalNode, fhState ) );\n         subscribers.forEach( s -> s.delete(dh) );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzYyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993623", "bodyText": "Back to the future", "author": "danielezonca", "createdAt": "2020-07-24T11:19:50Z", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java b/drools/drools-core/src/test/java/org/drools/core/util/asm/MethodCompareB.java\nold mode 100644\nnew mode 100755\nsimilarity index 61%\nrename from drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java\nrename to drools/drools-core/src/test/java/org/drools/core/util/asm/MethodCompareB.java\nindex 04b329f139..dfb6d4d0fb\n--- a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java\n+++ b/drools/drools-core/src/test/java/org/drools/core/util/asm/MethodCompareB.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 JBoss Inc\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NDAxNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459994014", "bodyText": "To be removed? We already have org.drools.core.util.KogitoStringUtils", "author": "danielezonca", "createdAt": "2020-07-24T11:20:52Z", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java", "diffHunk": "@@ -14,17 +14,20 @@\n  * limitations under the License.\n  */\n \n-package org.drools.core.util.asm;\n+package org.kie.kogito.rules.units;\n \n-public class MethodCompareB {\n+public class StringUtils {", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java b/drools/drools-core/src/test/java/org/drools/core/util/asm/MethodCompareB.java\nold mode 100644\nnew mode 100755\nsimilarity index 61%\nrename from drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java\nrename to drools/drools-core/src/test/java/org/drools/core/util/asm/MethodCompareB.java\nindex 04b329f139..dfb6d4d0fb\n--- a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java\n+++ b/drools/drools-core/src/test/java/org/drools/core/util/asm/MethodCompareB.java\n\n@@ -14,20 +14,17 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.rules.units;\n+package org.drools.core.util.asm;\n \n-public class StringUtils {\n+public class MethodCompareB {\n \n-    public static String capitalize(String string) {\n-        if (string == null) {\n-            return null;\n-        }\n+    public boolean evaluate(final String foox) {\n+        if ( foox == null || foox.startsWith( \"42\" ) ) {\n \n-        if (string.length() == 1) {\n-            return string.toUpperCase();\n+            return true;\n+        } else {\n+            return false;\n         }\n-\n-        return Character.toString(string.charAt(0)).toUpperCase() + string.substring(1);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NzYzNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459997635", "bodyText": "Have we changed the interface? If these methods are not supposed to be used but just to comply the interface why don't raise an UnsupportedOperationException?", "author": "danielezonca", "createdAt": "2020-07-24T11:30:09Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java", "diffHunk": "@@ -293,17 +294,26 @@ public void writeWorkItem(MarshallerWriteContext context, org.drools.core.proces\n     }\n \n     @Override\n-    public org.drools.core.process.instance.WorkItem readWorkItem(MarshallerReaderContext context) {\n+    public KogitoWorkItem readWorkItem( MarshallerReaderContext context) {\n         try {\n             ExtensionRegistry registry = PersisterHelper.buildRegistry(context, null);\n             Header _header = PersisterHelper.readFromStreamWithHeaderPreloaded(context, registry);\n             JBPMMessages.WorkItem _workItem = JBPMMessages.WorkItem.parseFrom(_header.getPayload(), registry);\n-            return (org.drools.core.process.instance.WorkItem) readWorkItem(context, _workItem, persistWorkItemVars);\n+            return ( KogitoWorkItem ) readWorkItem(context, _workItem, persistWorkItemVars);\n         } catch (IOException e) {\n             throw new IllegalArgumentException( \"IOException while fetching work item instance : \" + e.getMessage(), e );\n         } catch (ClassNotFoundException e) {\n             throw new IllegalArgumentException( \"ClassNotFoundException while fetching work item instance : \" + e.getMessage(), e );\n         }\n     }\n \n+    @Override\n+    public void writeProcessTimers(MarshallerWriteContext context) throws IOException {\n+\n+    }\n+\n+    @Override\n+    public void readProcessTimers(MarshallerReaderContext context) throws IOException, ClassNotFoundException {\n+\n+    }", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MTQ1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460791454", "bodyText": "These methods shouldn't do anything (and actually not even exists) in Kogito. The problem is that they have to stay there to make the compiler happy and they cannot throw an Exception because they are still called by drools code (even when running in kogito) but are not supposed to do anything.", "author": "mariofusco", "createdAt": "2020-07-27T10:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NzYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java\nindex 49b5a265dc..87ef5d6af1 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java\n\n@@ -294,12 +293,12 @@ public class ProtobufProcessMarshaller\n     }\n \n     @Override\n-    public KogitoWorkItem readWorkItem( MarshallerReaderContext context) {\n+    public org.drools.core.process.instance.WorkItem readWorkItem(MarshallerReaderContext context) {\n         try {\n             ExtensionRegistry registry = PersisterHelper.buildRegistry(context, null);\n             Header _header = PersisterHelper.readFromStreamWithHeaderPreloaded(context, registry);\n             JBPMMessages.WorkItem _workItem = JBPMMessages.WorkItem.parseFrom(_header.getPayload(), registry);\n-            return ( KogitoWorkItem ) readWorkItem(context, _workItem, persistWorkItemVars);\n+            return (org.drools.core.process.instance.WorkItem) readWorkItem(context, _workItem, persistWorkItemVars);\n         } catch (IOException e) {\n             throw new IllegalArgumentException( \"IOException while fetching work item instance : \" + e.getMessage(), e );\n         } catch (ClassNotFoundException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODI0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459998243", "bodyText": "Do we have a ticket to track these TODOs?", "author": "danielezonca", "createdAt": "2020-07-24T11:31:38Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java", "diffHunk": "@@ -218,14 +215,50 @@ public void registerWorkItemHandler(String workItemName, WorkItemHandler handler\n         this.workItemHandlers.put(workItemName, handler);\n     }\n \n+    @Override\n+    public void internalExecuteWorkItem( WorkItem workItem ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalExecuteWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public void internalAddWorkItem( WorkItem workItem ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAddWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public void internalAbortWorkItem( long id ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAbortWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public Set<WorkItem> getWorkItems() {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItems -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public WorkItem getWorkItem( long id ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItem -> TODO\" );\n+\n+    }", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MjI4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460792287", "bodyText": "They are not actual TODOs, it's only that my IDE generate methods to be implemented in that way. I removed the message inside the Exception.", "author": "mariofusco", "createdAt": "2020-07-27T10:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java\nindex f05fac8d78..e44c551449 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java\n\n@@ -217,32 +217,28 @@ public class LightWorkItemManager implements KogitoWorkItemManager {\n \n     @Override\n     public void internalExecuteWorkItem( WorkItem workItem ) {\n-        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalExecuteWorkItem -> TODO\" );\n+        throw new UnsupportedOperationException();\n \n     }\n \n     @Override\n     public void internalAddWorkItem( WorkItem workItem ) {\n-        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAddWorkItem -> TODO\" );\n-\n+        throw new UnsupportedOperationException();\n     }\n \n     @Override\n     public void internalAbortWorkItem( long id ) {\n-        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAbortWorkItem -> TODO\" );\n-\n+        throw new UnsupportedOperationException();\n     }\n \n     @Override\n     public Set<WorkItem> getWorkItems() {\n-        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItems -> TODO\" );\n-\n+        throw new UnsupportedOperationException();\n     }\n \n     @Override\n     public WorkItem getWorkItem( long id ) {\n-        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItem -> TODO\" );\n-\n+        throw new UnsupportedOperationException();\n     }\n \n     public void clear() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODcyNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459998724", "bodyText": "Is it possible to change the signature to use KogitoWorkingMemory?", "author": "danielezonca", "createdAt": "2020-07-24T11:32:54Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java", "diffHunk": "@@ -116,7 +117,7 @@ public SignalProcessInstanceAction(MarshallerReaderContext context) throws IOExc\n \t\t}\n \t\t\n \t\tpublic void execute(InternalWorkingMemory workingMemory) {\n-\t\t\tProcessInstance processInstance = workingMemory.getProcessInstance(processInstanceId);\n+\t\t\tProcessInstance processInstance = ((KogitoWorkingMemory)workingMemory).getProcessInstance(processInstanceId);", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NDk1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460794950", "bodyText": "Unfortunately no, it has to implement the PropagationEntry interface.", "author": "mariofusco", "createdAt": "2020-07-27T10:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java\nindex b663c068ad..e0374ee61a 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java\n\n@@ -117,7 +116,7 @@ public class DefaultSignalManager implements SignalManager {\n \t\t}\n \t\t\n \t\tpublic void execute(InternalWorkingMemory workingMemory) {\n-\t\t\tProcessInstance processInstance = ((KogitoWorkingMemory)workingMemory).getProcessInstance(processInstanceId);\n+\t\t\tProcessInstance processInstance = workingMemory.getProcessInstance(processInstanceId);\n \t\t\tif (processInstance != null) {\n \t\t\t\tprocessInstance.signalEvent(type, event);\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5OTA4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459999084", "bodyText": "Legacy code? Is RuleFlowGroup working in Kogito?", "author": "danielezonca", "createdAt": "2020-07-24T11:33:42Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/RuleConstraintEvaluator.java", "diffHunk": "@@ -103,7 +104,7 @@ public boolean evaluate(NodeInstance instance,\n         \t((Node) instance.getNode()).getUniqueId() + \"-\" + \n         \t((Node) connection.getTo()).getUniqueId() + \"-\" + connection.getToType();\n \n-        return agenda.isRuleActiveInRuleFlowGroup( \"DROOLS_SYSTEM\", rule, processInstance.getId() );\n+        return ((KogitoInternalAgenda)agenda).isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, processInstance.getId() );", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/RuleConstraintEvaluator.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/RuleConstraintEvaluator.java\nindex ae57ed48ca..f902435264 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/RuleConstraintEvaluator.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/RuleConstraintEvaluator.java\n\n@@ -104,7 +103,7 @@ public class RuleConstraintEvaluator implements Constraint,\n         \t((Node) instance.getNode()).getUniqueId() + \"-\" + \n         \t((Node) connection.getTo()).getUniqueId() + \"-\" + connection.getToType();\n \n-        return ((KogitoInternalAgenda)agenda).isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, processInstance.getId() );\n+        return agenda.isRuleActiveInRuleFlowGroup( \"DROOLS_SYSTEM\", rule, processInstance.getId() );\n     }\n \n \tpublic Object getMetaData(String name) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMzQ1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460003452", "bodyText": "These methods should be probably removed in Kogito because related to AgendaGroup/RuleFlowGroup", "author": "danielezonca", "createdAt": "2020-07-24T11:45:02Z", "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.drools.core.common;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoDefaultAgenda extends DefaultAgenda implements KogitoInternalAgenda {\n+\n+    public KogitoDefaultAgenda(InternalKnowledgeBase kBase) {\n+        super(kBase);\n+    }\n+\n+    public KogitoDefaultAgenda(InternalKnowledgeBase kBase, boolean initMain) {\n+        super(kBase, initMain);\n+    }\n+\n+    @Override\n+    public boolean isRuleActiveInRuleFlowGroup(String ruleflowGroupName, String ruleName, String processInstanceId) {\n+        return isRuleInstanceAgendaItem(ruleflowGroupName, ruleName, processInstanceId);\n+    }\n+\n+    @Override\n+    public void activateRuleFlowGroup(String name, String processInstanceId, String nodeInstanceId) {\n+        InternalRuleFlowGroup ruleFlowGroup = (InternalRuleFlowGroup) getRuleFlowGroup( name );\n+        activateRuleFlowGroup( ruleFlowGroup, processInstanceId, nodeInstanceId );\n+    }\n+\n+    @Override\n+    public boolean isRuleInstanceAgendaItem(String ruleflowGroupName, String ruleName, String processInstanceId) {\n+        return isRuleInstanceAgendaItem(ruleflowGroupName, ruleName, (Object) processInstanceId);\n+    }", "originalCommit": "e671d3df60a8d88720f8662e204d660f6467d03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MzA3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460793076", "bodyText": "Agreed, as mentioned before I'm just keeping them for backward compatibility reasons and to run legacy tests.", "author": "mariofusco", "createdAt": "2020-07-27T10:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMzQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java b/drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java\nindex d1406933e3..29b148f51c 100644\n--- a/drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java\n\n@@ -1,3 +1,18 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.drools.core.common;\n \n import org.drools.core.impl.InternalKnowledgeBase;\n"}}, {"oid": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/193f3995460b8dc0caf1e5b57f0212337e11c0f7", "message": "wip", "committedDate": "2020-07-27T11:44:29Z", "type": "forcePushed"}, {"oid": "cb6239a4162e698b36357daa92fde4a02ffbc5dc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb6239a4162e698b36357daa92fde4a02ffbc5dc", "message": "wip", "committedDate": "2020-07-31T16:02:22Z", "type": "forcePushed"}, {"oid": "7e40ff20ed0f2e2ec0bcb41a584a805244e717b2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7e40ff20ed0f2e2ec0bcb41a584a805244e717b2", "message": "wip", "committedDate": "2020-08-04T14:04:56Z", "type": "forcePushed"}, {"oid": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "message": "compiler unfork", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "38f8f7713d79965f2b0675c7e5c84718efd69868", "url": "https://github.com/kiegroup/kogito-runtimes/commit/38f8f7713d79965f2b0675c7e5c84718efd69868", "message": "core unfork", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "d7c41e1916c46dba8df01c1a8f4cee37843aa7e3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d7c41e1916c46dba8df01c1a8f4cee37843aa7e3", "message": "kogito fact handle factory", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "0e8fa11f60c19a47c07a5d3a5be1c351a776364f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0e8fa11f60c19a47c07a5d3a5be1c351a776364f", "message": "use drools timers", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "36eae1c54c64bbbd9188488d0717b70f302b7688", "url": "https://github.com/kiegroup/kogito-runtimes/commit/36eae1c54c64bbbd9188488d0717b70f302b7688", "message": "rebase master", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "080ae96b99004ca911c24f40788b2743ec956e01", "url": "https://github.com/kiegroup/kogito-runtimes/commit/080ae96b99004ca911c24f40788b2743ec956e01", "message": "Exclude kie-api", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "adecaf2045018c6d63f90c6f653da3d9be046f30", "url": "https://github.com/kiegroup/kogito-runtimes/commit/adecaf2045018c6d63f90c6f653da3d9be046f30", "message": "Add jbpm forked file to Kogito's Drools", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "605d30142e0e8e937569ccaf5064e04c6e5f11ef", "url": "https://github.com/kiegroup/kogito-runtimes/commit/605d30142e0e8e937569ccaf5064e04c6e5f11ef", "message": "4 errors to go\n\nonly processInstance to string missing", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "3a558d5ed0f5939ecc28f7004e85996b9ea6d13e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3a558d5ed0f5939ecc28f7004e85996b9ea6d13e", "message": "Two errors to go", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "848f837fb2b733c298aa2578fa95912cf9635e1f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/848f837fb2b733c298aa2578fa95912cf9635e1f", "message": "Subclass StatefulKnowledgeSession", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "0125532a0de8eabf85b61c8753251994b32e4080", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0125532a0de8eabf85b61c8753251994b32e4080", "message": "Implement getProcessInstance with long and unsupported in DummyWorkingMemory.java", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "1d8c25358e0bc27454b9f31b06f90e49c3d8ce10", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1d8c25358e0bc27454b9f31b06f90e49c3d8ce10", "message": "Correct factory for StatefulSession", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "89c162e38d03374687428428326cc29eae1d58c0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/89c162e38d03374687428428326cc29eae1d58c0", "message": "KogitoStringUtils", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "3588a1d70da52c121ebdb00574a6d1562c296eae", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3588a1d70da52c121ebdb00574a6d1562c296eae", "message": "fix all compilation problems", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "54975741a2bbb1f5a24836484741310a557d535b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/54975741a2bbb1f5a24836484741310a557d535b", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "c62ffaffb46cf8d03a8cbd784eef6eb225852c9e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c62ffaffb46cf8d03a8cbd784eef6eb225852c9e", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "b3124032fb2a204210d343405c3ed071b966e3d6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b3124032fb2a204210d343405c3ed071b966e3d6", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "6ce05e0227f97012af19156cb880e34d368adbfe", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6ce05e0227f97012af19156cb880e34d368adbfe", "message": "wi\u00e8", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "b8097dea6c7ffb27847efba018e515fd64c109aa", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b8097dea6c7ffb27847efba018e515fd64c109aa", "message": "Support KogitoDefaultAgenda", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "822a35ca901abb9918ed7db6eb2b551f74c7a8f1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/822a35ca901abb9918ed7db6eb2b551f74c7a8f1", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "bf75bcfa735da305541082574d17c605e992599a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bf75bcfa735da305541082574d17c605e992599a", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "b6d4d97e5c73647a059c10cec59a8fb19d41508a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b6d4d97e5c73647a059c10cec59a8fb19d41508a", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "7c1daa5f6d33b18a2c8e6682448f389d457e67ec", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7c1daa5f6d33b18a2c8e6682448f389d457e67ec", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "65b1d9eefa9f8fa1108769204dc1bf24c74bf882", "url": "https://github.com/kiegroup/kogito-runtimes/commit/65b1d9eefa9f8fa1108769204dc1bf24c74bf882", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "2e0a196265298d0c2ac5aa750d8c9df7adfca7fc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2e0a196265298d0c2ac5aa750d8c9df7adfca7fc", "message": "Use Kogito's KieModuleModelImpl and Marshaller", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "188d49ba55976dfe5239f278614d7f43b8d6ad93", "url": "https://github.com/kiegroup/kogito-runtimes/commit/188d49ba55976dfe5239f278614d7f43b8d6ad93", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "c317c9d4e8c37e3006a578c704c160a13e27bd93", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c317c9d4e8c37e3006a578c704c160a13e27bd93", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "ea0d43ce580c4116f74a4229d9aaac0861ed6af0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ea0d43ce580c4116f74a4229d9aaac0861ed6af0", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "9d25d49313116c5d2b3809bbf26cbb23e104f494", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9d25d49313116c5d2b3809bbf26cbb23e104f494", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "04994eeab4d8572333d1e6e512f650199e7e46f3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/04994eeab4d8572333d1e6e512f650199e7e46f3", "message": "Revert to correct package for KogitoJunitActivator.java", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "c2c61c68f88b5c2487b2d33680955e84b1fec5b1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c2c61c68f88b5c2487b2d33680955e84b1fec5b1", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "c81cbfb50109495adaa4aed1178a653239b67f8f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c81cbfb50109495adaa4aed1178a653239b67f8f", "message": "use KogitoKnowledgeBuilderFactoryServiceImpl that doesn't have Jaxb", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "c1b5280ce5edc1c37f1e3c084369dd359faf4767", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c1b5280ce5edc1c37f1e3c084369dd359faf4767", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "30bee7e473287e41fdcf95f88a78d583108d4912", "url": "https://github.com/kiegroup/kogito-runtimes/commit/30bee7e473287e41fdcf95f88a78d583108d4912", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "3ac68fb45225b5258161df1f8663cc52319eefd0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3ac68fb45225b5258161df1f8663cc52319eefd0", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "e14c0afdb29a6536601e8ed90a94ef6270489ccb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e14c0afdb29a6536601e8ed90a94ef6270489ccb", "message": "wip", "committedDate": "2020-08-04T15:32:54Z", "type": "commit"}, {"oid": "2fbe84a2c3d0b920e06ab903ea5c77c72d12bae1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2fbe84a2c3d0b920e06ab903ea5c77c72d12bae1", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "a4b5c80960fa2d5548d6b01114203ba844c6b85e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a4b5c80960fa2d5548d6b01114203ba844c6b85e", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "2ed07f07d6e01c42e7f850869d4b38d667c6a1b3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2ed07f07d6e01c42e7f850869d4b38d667c6a1b3", "message": "unfork drools-core-reflective", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "09ddc72bb3e1595cd15c299292dd15f2cf94bafb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/09ddc72bb3e1595cd15c299292dd15f2cf94bafb", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "8bc71fa5f4a1b90428630246d7ab28249d99b065", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8bc71fa5f4a1b90428630246d7ab28249d99b065", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "4f6ecdca594d33502650006a6a6c7f200e8551a5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4f6ecdca594d33502650006a6a6c7f200e8551a5", "message": "fix pom", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "245c35876b6a6d588274d12e474f05e7118758dd", "url": "https://github.com/kiegroup/kogito-runtimes/commit/245c35876b6a6d588274d12e474f05e7118758dd", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "43f9bacaf6de1bb0be0b0e573dc9ddc5781eab7e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/43f9bacaf6de1bb0be0b0e573dc9ddc5781eab7e", "message": "remove KogitoStringUtils", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "c41ceabfe2a657d5b8c2134db5b68f8a2630df25", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c41ceabfe2a657d5b8c2134db5b68f8a2630df25", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "0684c9a2a17dbad2577fc63bba5b749945c06322", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0684c9a2a17dbad2577fc63bba5b749945c06322", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "793c6b0718dac85d17f23fc931e949f898325462", "url": "https://github.com/kiegroup/kogito-runtimes/commit/793c6b0718dac85d17f23fc931e949f898325462", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "bc504911a80b315572103c93fb7abfd380223cd6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bc504911a80b315572103c93fb7abfd380223cd6", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "b32fa590f3f5c6c1b583f7ae9863d18fa36fe8c3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b32fa590f3f5c6c1b583f7ae9863d18fa36fe8c3", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "032fd4aa4714e99b41364087bc72d7c231f35e1b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/032fd4aa4714e99b41364087bc72d7c231f35e1b", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "046e3badad669ef4a5278d5f4252ad35eb10c945", "url": "https://github.com/kiegroup/kogito-runtimes/commit/046e3badad669ef4a5278d5f4252ad35eb10c945", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "commit"}, {"oid": "046e3badad669ef4a5278d5f4252ad35eb10c945", "url": "https://github.com/kiegroup/kogito-runtimes/commit/046e3badad669ef4a5278d5f4252ad35eb10c945", "message": "wip", "committedDate": "2020-08-04T15:32:55Z", "type": "forcePushed"}]}