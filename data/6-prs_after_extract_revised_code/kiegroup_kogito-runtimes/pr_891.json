{"pr_number": 891, "pr_title": "[KOGITO-3700] [KOGITO-3699] Migration to Spring Web API", "pr_createdAt": "2020-11-13T11:46:09Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/891", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MzIxOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r524283218", "bodyText": "why this modification is needed, resulting in a non-encoded String? (was: %20 proposed:  )", "author": "tarilabs", "createdAt": "2020-11-16T13:54:17Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "diffHunk": "@@ -79,16 +84,18 @@ public DecisionRestResourceGenerator(DMNModel model, String appCanonicalName) {\n         this.packageName = CodegenStringUtil.escapeIdentifier(model.getNamespace());\n         this.decisionId = model.getDefinitions().getId();\n         this.decisionName = CodegenStringUtil.escapeIdentifier(model.getName());\n-        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \"%20\");\n+        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \" \");", "originalCommit": "df99ce3b0b705a2399a4fab19b4fb1188892dfea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NDMyMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r525174322", "bodyText": "@tarilabs I didn't spend to much time, but the issue after migrating to spring web apis, the tests were returning 404, I don't know if spring already applies the encoding to the string on the path...", "author": "tiagodolphine", "createdAt": "2020-11-17T13:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MzIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMDU1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r525230552", "bodyText": "understood, but can you file a JIRA for this issue, please?\nIt seems a difference between JAX-RS and <whatever SB uses>", "author": "tarilabs", "createdAt": "2020-11-17T15:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MzIxOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4Mzc1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r524283754", "bodyText": "what would be the valorization for \"whole-model\", please?", "author": "tarilabs", "createdAt": "2020-11-16T13:55:05Z", "path": "kogito-codegen/src/main/resources/class-templates/DecisionRestResourceTemplate.java", "diffHunk": "@@ -25,6 +25,7 @@\n     private org.jboss.resteasy.spi.HttpResponse httpResponse;\n \n     @POST\n+    @Path(\"/$dmnMethodUrl$\")", "originalCommit": "df99ce3b0b705a2399a4fab19b4fb1188892dfea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4MDQ1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r525180453", "bodyText": "I added the path annotation in the template and handled it to be replaced by proper values into the DecisionRestResourceGenerator, https://github.com/tiagodolphine/kogito-runtimes/blob/93bfcb24f99b85a6080efbea3300b476cf32d936/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java before the annotation was being inserted programmatically and hard-coded with @Path but this changes in case we use Spring API (https://github.com/tiagodolphine/kogito-runtimes/blob/0ae1643808a1fd7175606cd8b8f26a3bc043f1f6/kogito-codegen/src/main/resources/class-templates/spring/SpringDecisionRestResourceTemplate.java#L37), so what I did is basically to replace the value on the path annotation to the same values that were added programmatically before... In the end, the generated code for the class should be the same.", "author": "tiagodolphine", "createdAt": "2020-11-17T14:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4Mzc1NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5e4aa33486613b2053d2205761563394907605ad", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5e4aa33486613b2053d2205761563394907605ad", "message": "fix PMMLRestResourceGeneratorTest", "committedDate": "2020-11-16T17:36:29Z", "type": "forcePushed"}, {"oid": "368b27877f51d0bf2e50831524d7e19067171aa1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/368b27877f51d0bf2e50831524d7e19067171aa1", "message": "trying to fix broken test on CI", "committedDate": "2020-11-18T18:35:50Z", "type": "forcePushed"}, {"oid": "2bd92e97b90d7a34de13b1a87bcad8a5d7b5f6bb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2bd92e97b90d7a34de13b1a87bcad8a5d7b5f6bb", "message": "migrate rules endpoints to use spring apis", "committedDate": "2020-11-26T14:05:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4MDUxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r531780517", "bodyText": "Thanks! \u2764\ufe0f", "author": "ricardozanini", "createdAt": "2020-11-27T20:39:14Z", "path": "kogito-codegen/src/main/resources/class-templates/events/SpringTopicsInformationResourceTemplate.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.kie.kogito.app;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.kogito.event.Topic;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.http.ResponseEntity;\n+\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+@RestController\n+@RequestMapping(\"/messaging/topics\")\n+public class TopicsInformationResource {", "originalCommit": "a93c61ed9104ac16a7e8a56106a6680a60f89d57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMzA0MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r532933040", "bodyText": "Unused", "author": "danielezonca", "createdAt": "2020-11-30T22:03:41Z", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/OASTest.java", "diffHunk": "@@ -27,16 +27,15 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.springframework.beans.factory.annotation.Value;", "originalCommit": "a93c61ed9104ac16a7e8a56106a6680a60f89d57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81e01a972a9fb6e1eec9870b390a036f9806c0be", "chunk": "diff --git a/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/OASTest.java b/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/OASTest.java\nindex 9515495a40..ec98fa2ef5 100644\n--- a/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/OASTest.java\n+++ b/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/OASTest.java\n\n@@ -16,26 +16,15 @@\n \n package org.kie.kogito.integrationtests.springboot;\n \n-import java.time.Duration;\n-import java.time.LocalDate;\n-import java.time.LocalDateTime;\n-import java.time.LocalTime;\n-import java.time.Period;\n-\n-import io.restassured.http.ContentType;\n import io.restassured.RestAssured;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n import static io.restassured.RestAssured.given;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-\n import static org.hamcrest.Matchers.aMapWithSize;\n import static org.hamcrest.Matchers.greaterThan;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzODM1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r532938356", "bodyText": "Unused?", "author": "danielezonca", "createdAt": "2020-11-30T22:14:37Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "diffHunk": "@@ -44,10 +44,13 @@\n import com.github.javaparser.ast.type.Type;\n import org.drools.compiler.compiler.DroolsError;\n import org.drools.modelcompiler.builder.QueryModel;\n+import org.kie.api.definition.rule.Query;", "originalCommit": "a93c61ed9104ac16a7e8a56106a6680a60f89d57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81e01a972a9fb6e1eec9870b390a036f9806c0be", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java\nindex f1209f6b11..9824c2f855 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java\n\n@@ -44,7 +44,6 @@ import com.github.javaparser.ast.stmt.TryStmt;\n import com.github.javaparser.ast.type.Type;\n import org.drools.compiler.compiler.DroolsError;\n import org.drools.modelcompiler.builder.QueryModel;\n-import org.kie.api.definition.rule.Query;\n import org.kie.internal.ruleunit.RuleUnitDescription;\n import org.kie.kogito.codegen.AddonsConfig;\n import org.kie.kogito.codegen.BodyDeclarationComparator;\n"}}, {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be", "url": "https://github.com/kiegroup/kogito-runtimes/commit/81e01a972a9fb6e1eec9870b390a036f9806c0be", "message": "Update and Activate Spring MVC templates for Processes\n\nUpdate and Activate Spring MVC templates for Processes\n\nskiping topics endpoint generation from spring\n\nDMN spring web migration\n\nDMN spring web migration\n\nadd comment to fix IncrementalRuleCodegen\n\nadding pmml spring templates for endpoints\n\nadding profile and feature toggle for spring web apis\n\ninserting feature toggle for spring apis\n\nmoving feature toggle to kogito internal\n\nfix broken tests\n\nRemoving feature toggle for spring api\n\nexplainability-addon to use spring web api\n\nfix PMMLRestResourceGeneratorTest\n\nKOGITO-3750 Management AddOn SpringBoot migration\n\nAdding topic information endpoints for springboot\n\nKOGITO-3750 Management AddOn SpringBoot test fixes\n\nKOGITO-3750 Use empty list for group membership to replicate same behaviour as Quarkus\n\nAdding topic information endpoints for springboot\n\nCloudEventsResourceGenerator fix\n\nfix CloudEventsResourceGenerator\n\nremoving unused profile from the spring boot integration tests\n\nfix tests with persistence enabled\n\nfix broken infinispan test\n\ntrying to fix broken test on CI\n\ntrying to fix broken test on CI\n\nupdate TopicInformationResourceTest for springboot\n\nKOGITO-3752 Add Rules REST Templated endpoint for Spring MVC support\n\nmigrate rules endpoints to use spring apis\n\nFix SpringDecisionRestResourceTemplate to insert response headers properly\n\nremoving unsued imports", "committedDate": "2020-12-02T19:50:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MDg1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535370856", "bodyText": "I think we should leave the checkError() call here to notify about possible issues with start of the task.", "author": "MarianMacik", "createdAt": "2020-12-03T16:09:58Z", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -36,45 +36,49 @@\n                             .filter(wi -> wi.getName().equals(\"$taskName$\"))\n                             .findFirst();\n                         if (task.isPresent()) {\n-                            UriComponents uriComponents = uriComponentsBuilder.path(\"/{taskId}\").buildAndExpand(task.get().getId());\n+                            UriComponents uriComponents =\n+                                    uriComponentsBuilder.path(\"/$name$/{id}/$taskName$/{taskId}\")\n+                                            .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.checkError().variables().toOutput());\n+                                    .body(pi.variables().toOutput());", "originalCommit": "81e01a972a9fb6e1eec9870b390a036f9806c0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MDI3NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535580274", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-12-03T20:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MDg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0274b44e42a9e85155fe7a2daaeb2559e61238ac", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java b/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\nindex 2f70db4073..ce3a5609ff 100644\n--- a/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\n\n@@ -41,7 +41,7 @@ public class $Type$Resource {\n                                             .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.variables().toOutput());\n+                                    .body(pi.checkError().variables().toOutput());\n                         }\n                         return new ResponseEntity<$Type$Output>(HttpStatus.NOT_FOUND);\n                     })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTEyNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535371124", "bodyText": "Same here, checkError() is missing.", "author": "MarianMacik", "createdAt": "2020-12-03T16:10:16Z", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -36,45 +36,49 @@\n                             .filter(wi -> wi.getName().equals(\"$taskName$\"))\n                             .findFirst();\n                         if (task.isPresent()) {\n-                            UriComponents uriComponents = uriComponentsBuilder.path(\"/{taskId}\").buildAndExpand(task.get().getId());\n+                            UriComponents uriComponents =\n+                                    uriComponentsBuilder.path(\"/$name$/{id}/$taskName$/{taskId}\")\n+                                            .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.checkError().variables().toOutput());\n+                                    .body(pi.variables().toOutput());\n                         }\n                         return new ResponseEntity<$Type$Output>(HttpStatus.NOT_FOUND);\n                     })\n                     .orElseGet(() -> ResponseEntity.notFound().build()));\n     }\n \n     @PostMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE,\n-                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+            consumes = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<$Type$Output> completeTask(@PathVariable(\"id\") final String id,\n-                                     @PathVariable(\"workItemId\") final String workItemId,\n-                                     @RequestParam(value = \"phase\", defaultValue = \"complete\") final String phase,\n-                                     @RequestParam(value = \"user\", required = false) final String user,\n-                                     @RequestParam(value = \"group\", required = false) final List<String> groups,\n-                                     @RequestBody final $TaskOutput$ model) {\n+                                                     @PathVariable(\"workItemId\") final String workItemId,\n+                                                     @RequestParam(value = \"phase\", required = false, defaultValue =\n+                                                             \"complete\") final String phase,\n+                                                     @RequestParam(value = \"user\", required = false) final String user,\n+                                                     @RequestParam(value = \"group\", required = false, defaultValue = \"\") final List<String> groups,\n+                                                     @RequestBody(required = false) final $TaskOutput$ model) {\n         return UnitOfWorkExecutor\n-            .executeInUnitOfWork(\n-                application.unitOfWorkManager(),\n-                () -> process\n-                    .instances()\n-                    .findById(id)\n-                    .map(pi -> {\n-                        pi\n-                            .transitionWorkItem(\n-                                workItemId,\n-                                HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                        ResponseEntity.ok(pi.checkError().variables().toOutput());\n-                    })\n-                    .orElseGet(() -> ResponseEntity.notFound().build()));\n+                .executeInUnitOfWork(\n+                        application.unitOfWorkManager(),\n+                        () -> process\n+                                .instances()\n+                                .findById(id)\n+                                .map(pi -> {\n+                                    pi\n+                                            .transitionWorkItem(\n+                                                    workItemId,\n+                                                    HumanTaskTransition.withModel(phase, model, Policies.of(user,\n+                                                                                                            groups)));\n+                                    return ResponseEntity.ok(pi.variables().toOutput());", "originalCommit": "81e01a972a9fb6e1eec9870b390a036f9806c0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MDE5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535580197", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-12-03T20:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "0274b44e42a9e85155fe7a2daaeb2559e61238ac", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java b/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\nindex 2f70db4073..ce3a5609ff 100644\n--- a/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\n\n@@ -41,7 +41,7 @@ public class $Type$Resource {\n                                             .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.variables().toOutput());\n+                                    .body(pi.checkError().variables().toOutput());\n                         }\n                         return new ResponseEntity<$Type$Output>(HttpStatus.NOT_FOUND);\n                     })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTQ3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535371476", "bodyText": "Same here.", "author": "MarianMacik", "createdAt": "2020-12-03T16:10:42Z", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -105,23 +109,24 @@\n \n     @DeleteMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<$Type$Output> abortTask(@PathVariable(\"id\") final String id,\n-                                  @PathVariable(\"workItemId\") final String workItemId,\n-                                  @RequestParam(value = \"phase\", defaultValue = \"abort\") final String phase,\n-                                  @RequestParam(value = \"user\", required = false) final String user,\n-                                  @RequestParam(value = \"group\", required = false) final List<String> groups) {\n+                                                  @PathVariable(\"workItemId\") final String workItemId,\n+                                                  @RequestParam(value = \"phase\", required = false, defaultValue =\n+                                                          \"abort\") final String phase,\n+                                                  @RequestParam(value = \"user\", required = false) final String user,\n+                                                  @RequestParam(value = \"group\", required = false, defaultValue = \"\") final List<String> groups) {\n         return UnitOfWorkExecutor\n-            .executeInUnitOfWork(\n-                application.unitOfWorkManager(),\n-                () -> process\n-                    .instances()\n-                    .findById(id)\n-                    .map(pi -> {\n-                        pi\n-                            .transitionWorkItem(\n-                                workItemId,\n-                                HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                        return ResponseEntity.ok(pi.checkError().variables().toOutput());\n-                    })\n-                    .orElseGet(() -> ResponseEntity.notFound().build()));\n+                .executeInUnitOfWork(\n+                        application.unitOfWorkManager(),\n+                        () -> process\n+                                .instances()\n+                                .findById(id)\n+                                .map(pi -> {\n+                                    pi\n+                                            .transitionWorkItem(\n+                                                    workItemId,\n+                                                    HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n+                                    return ResponseEntity.ok(pi.variables().toOutput());", "originalCommit": "81e01a972a9fb6e1eec9870b390a036f9806c0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MDA3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535580073", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-12-03T20:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0274b44e42a9e85155fe7a2daaeb2559e61238ac", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java b/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\nindex 2f70db4073..ce3a5609ff 100644\n--- a/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java\n\n@@ -125,7 +125,7 @@ public class $Type$Resource {\n                                             .transitionWorkItem(\n                                                     workItemId,\n                                                     HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                                    return ResponseEntity.ok(pi.variables().toOutput());\n+                                    return ResponseEntity.ok(pi.checkError().variables().toOutput());\n                                 })\n                                 .orElseGet(() -> ResponseEntity.notFound().build()));\n     }\n"}}, {"oid": "0274b44e42a9e85155fe7a2daaeb2559e61238ac", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0274b44e42a9e85155fe7a2daaeb2559e61238ac", "message": "Update and Activate Spring MVC templates for Processes\n\nUpdate and Activate Spring MVC templates for Processes\n\nskiping topics endpoint generation from spring\n\nDMN spring web migration\n\nDMN spring web migration\n\nadd comment to fix IncrementalRuleCodegen\n\nadding pmml spring templates for endpoints\n\nadding profile and feature toggle for spring web apis\n\ninserting feature toggle for spring apis\n\nmoving feature toggle to kogito internal\n\nfix broken tests\n\nRemoving feature toggle for spring api\n\nexplainability-addon to use spring web api\n\nfix PMMLRestResourceGeneratorTest\n\nKOGITO-3750 Management AddOn SpringBoot migration\n\nAdding topic information endpoints for springboot\n\nKOGITO-3750 Management AddOn SpringBoot test fixes\n\nKOGITO-3750 Use empty list for group membership to replicate same behaviour as Quarkus\n\nAdding topic information endpoints for springboot\n\nCloudEventsResourceGenerator fix\n\nfix CloudEventsResourceGenerator\n\nremoving unused profile from the spring boot integration tests\n\nfix tests with persistence enabled\n\nfix broken infinispan test\n\ntrying to fix broken test on CI\n\ntrying to fix broken test on CI\n\nupdate TopicInformationResourceTest for springboot\n\nKOGITO-3752 Add Rules REST Templated endpoint for Spring MVC support\n\nmigrate rules endpoints to use spring apis\n\nFix SpringDecisionRestResourceTemplate to insert response headers properly\n\nremoving unsued imports\n\napply checkError on SpringRestResourceUserTaskTemplate", "committedDate": "2020-12-03T20:35:08Z", "type": "commit"}, {"oid": "0274b44e42a9e85155fe7a2daaeb2559e61238ac", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0274b44e42a9e85155fe7a2daaeb2559e61238ac", "message": "Update and Activate Spring MVC templates for Processes\n\nUpdate and Activate Spring MVC templates for Processes\n\nskiping topics endpoint generation from spring\n\nDMN spring web migration\n\nDMN spring web migration\n\nadd comment to fix IncrementalRuleCodegen\n\nadding pmml spring templates for endpoints\n\nadding profile and feature toggle for spring web apis\n\ninserting feature toggle for spring apis\n\nmoving feature toggle to kogito internal\n\nfix broken tests\n\nRemoving feature toggle for spring api\n\nexplainability-addon to use spring web api\n\nfix PMMLRestResourceGeneratorTest\n\nKOGITO-3750 Management AddOn SpringBoot migration\n\nAdding topic information endpoints for springboot\n\nKOGITO-3750 Management AddOn SpringBoot test fixes\n\nKOGITO-3750 Use empty list for group membership to replicate same behaviour as Quarkus\n\nAdding topic information endpoints for springboot\n\nCloudEventsResourceGenerator fix\n\nfix CloudEventsResourceGenerator\n\nremoving unused profile from the spring boot integration tests\n\nfix tests with persistence enabled\n\nfix broken infinispan test\n\ntrying to fix broken test on CI\n\ntrying to fix broken test on CI\n\nupdate TopicInformationResourceTest for springboot\n\nKOGITO-3752 Add Rules REST Templated endpoint for Spring MVC support\n\nmigrate rules endpoints to use spring apis\n\nFix SpringDecisionRestResourceTemplate to insert response headers properly\n\nremoving unsued imports\n\napply checkError on SpringRestResourceUserTaskTemplate", "committedDate": "2020-12-03T20:35:08Z", "type": "forcePushed"}]}