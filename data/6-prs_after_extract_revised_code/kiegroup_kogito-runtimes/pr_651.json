{"pr_number": 651, "pr_title": "KOGITO-2741 Enrich TraceEvent with data types information", "pr_createdAt": "2020-07-24T13:29:27Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/651", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMDY0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r460120644", "bodyText": "Can you please create a ticket to review this code (it should be nice to use only interfaces)?", "author": "danielezonca", "createdAt": "2020-07-24T15:20:20Z", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java", "diffHunk": "@@ -313,51 +327,64 @@ private static long computeDurationMillis(EvaluateEvent beginEvent, EvaluateEven\n         return Math.round((endEvent.getNanoTime() - beginEvent.getNanoTime()) / 1000000.0);\n     }\n \n-    private static TraceInputValue traceInputFrom(InputDataNode node, Map<String, Object> context) {\n-        JsonNode value = Optional.ofNullable(context.get(node.getName()))\n-                .<JsonNode>map(Json.MAPPER::valueToTree)\n-                .orElse(null);\n+    private static TraceInputValue traceInputFrom(String name, Object value) {\n+        return new TraceInputValue(null, name, EventUtils.typedVariableFrom(value), Collections.emptyList());\n+    }\n \n+    private static TraceInputValue traceInputFrom(InputDataNode node, Object value) {\n         return new TraceInputValue(\n                 node.getId(),\n                 node.getName(),\n-                EventUtils.traceTypeFrom(node.getType()),\n-                value,\n-                Collections.emptyList()\n-        );\n-    }\n-\n-    private static TraceInputValue traceInputFrom(Map.Entry<String, Object> contextEntry) {\n-        return new TraceInputValue(\n-                null,\n-                contextEntry.getKey(),\n-                null,\n-                Json.MAPPER.valueToTree(contextEntry.getValue()),\n+                EventUtils.typedVariableFrom(node.getType(), value),\n                 Collections.emptyList()\n         );\n     }\n \n-    private static TraceOutputValue traceOutputFrom(EvaluateDecisionResult decisionResult, DMNModel model) {\n-        TraceType type = Optional.ofNullable(model)\n+    private static TraceOutputValue traceOutputFrom(EvaluateDecisionResult decisionResult, DMNModel model, Map<String, Object> context) {\n+        DMNType type = Optional.ofNullable(model)\n                 .map(m -> m.getDecisionById(decisionResult.getDecisionId()))\n                 .map(DecisionNode::getResultType)\n-                .map(EventUtils::traceTypeFrom)\n                 .orElse(null);\n \n-        JsonNode value = Optional.ofNullable(decisionResult.getResult())\n-                .<JsonNode>map(Json.MAPPER::valueToTree)\n-                .orElse(null);\n+        // cast to DMNBaseNode here is required to have access to getDependencies method\n+        Map<String, DMNType> decisionInputTypes = Optional.ofNullable(model)\n+                .map(m -> m.getDecisionById(decisionResult.getDecisionId()))\n+                .filter(DMNBaseNode.class::isInstance)", "originalCommit": "ebfe07d563c618fd51c59d992d9440cb35937174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0MDk3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r460140975", "bodyText": "Ticket created (link)", "author": "kostola", "createdAt": "2020-07-24T15:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMDY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "chunk": "diff --git a/addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java b/addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java\nindex 14307ae366..873097f6dc 100644\n--- a/addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java\n+++ b/addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java\n\n@@ -385,7 +401,4 @@ public class DefaultAggregator implements Aggregator {\n         return null;\n     }\n \n-    private static String urlEncode(String input) {\n-        return URLEncoder.encode(input, StandardCharsets.UTF_8);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMDk4MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r460120980", "bodyText": "Can you please split this code in multiple methods to improve readability?", "author": "danielezonca", "createdAt": "2020-07-24T15:20:51Z", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java", "diffHunk": "@@ -138,10 +141,24 @@ private static URI buildSource(EvaluateEvent event) {\n     }\n \n     private static List<TraceInputValue> buildTraceInputValues(DMNModel model, EvaluateEvent firstEvent) {\n-        if (model == null) {\n-            return firstEvent.getContext().entrySet().stream()\n-                    .map(DefaultAggregator::traceInputFrom)\n-                    .collect(Collectors.toList());\n+        Map<String, InputDataNode> inputNodesMap = inputDataNodesFromFirstEvent(model, firstEvent).stream()\n+                .collect(Collectors.toMap(DMNNode::getName, Function.identity()));\n+\n+        return Stream.concat(\n+                firstEvent.getContext().entrySet().stream()\n+                        .map(entry -> inputNodesMap.containsKey(entry.getKey())\n+                                ? traceInputFrom(inputNodesMap.get(entry.getKey()), entry.getValue())\n+                                : traceInputFrom(entry.getKey(), entry.getValue())\n+                        ),\n+                inputNodesMap.entrySet().stream()\n+                        .filter(entry -> !firstEvent.getContext().containsKey(entry.getKey()))\n+                        .map(entry -> traceInputFrom(entry.getValue(), null))", "originalCommit": "ebfe07d563c618fd51c59d992d9440cb35937174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTYwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r460149609", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-24T16:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMDk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1259105c0f1fbad21b60b6c91eea32d8903e2df3", "chunk": "diff --git a/addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java b/addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java\nindex 14307ae366..f1ef716baa 100644\n--- a/addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java\n+++ b/addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java\n\n@@ -131,13 +131,13 @@ public class DefaultAggregator implements Aggregator {\n         // complete event\n         TraceEvent event = new TraceEvent(header, inputs, outputs, executionStepsPair.getLeft());\n \n-        return CloudEventUtils.build(executionId, buildSource(firstEvent), event);\n+        return CloudEventUtils.build(executionId, buildSource(firstEvent), event, TraceEvent.class);\n     }\n \n     private static URI buildSource(EvaluateEvent event) {\n         return event.getType() == BEFORE_EVALUATE_DECISION_SERVICE || event.getType() == AFTER_EVALUATE_DECISION_SERVICE\n-               ? URI.create(String.format(\"%s/%s\", urlEncode(event.getModelName()), urlEncode(event.getNodeName())))\n-               : URI.create(urlEncode(event.getModelName()));\n+                ? URI.create(String.format(\"%s/%s\", urlEncode(event.getModelName()), urlEncode(event.getNodeName())))\n+                : URI.create(urlEncode(event.getModelName()));\n     }\n \n     private static List<TraceInputValue> buildTraceInputValues(DMNModel model, EvaluateEvent firstEvent) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNjI2OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r460826269", "bodyText": "@JsonIgnoreProperties(ignoreUnknown = true) ?", "author": "r00ta", "createdAt": "2020-07-27T11:32:09Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/TypedVariable.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+@JsonTypeInfo(\n+        use = JsonTypeInfo.Id.NAME,\n+        include = JsonTypeInfo.As.EXISTING_PROPERTY,\n+        defaultImpl = TypedVariable.Kind.class,\n+        property = \"kind\",\n+        visible = true\n+)\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(value = UnitVariable.class, name = \"UNIT\"),\n+        @JsonSubTypes.Type(value = CollectionVariable.class, name = \"COLLECTION\"),\n+        @JsonSubTypes.Type(value = StructureVariable.class, name = \"STRUCTURE\")\n+})\n+public abstract class TypedVariable {", "originalCommit": "667498eac6eedf203e4af33496d32649cdc9900b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MzQ5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r471493495", "bodyText": "Done on all subclasses", "author": "kostola", "createdAt": "2020-08-17T13:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNjI2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MDg0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461550849", "bodyText": "I think this is somehow redundant, since this will create something like\n{\n      \"id\": \"_1929CBD5-40E0-442D-B909-49CEDE0101DC\",\n      \"name\": \"Violation\",\n      \"value\": {\n        \"value\": {     <-------- another nesting that is not really informative\n          \"Type\": {\n            \"baseType\": \"string\",\n            \"value\": \"speed\",\n            \"kind\": \"UNIT\",\n            \"type\": \"Type\"\n          },\n          \"Speed Limit\": {\n            \"value\": 100,\n            \"kind\": \"UNIT\",\n            \"type\": \"number\"\n          },\n          \"Actual Speed\": {\n            \"value\": 105,\n            \"kind\": \"UNIT\",\n            \"type\": \"number\"\n          }\n        },\n        \"kind\": \"STRUCTURE\",\n        \"type\": \"tViolation\"\n      }\n    },\n\nwdyt?", "author": "r00ta", "createdAt": "2020-07-28T12:45:54Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Map;\n+\n+public class StructureVariable extends TypedVariable {\n+\n+    private Map<String, TypedVariable> value;", "originalCommit": "667498eac6eedf203e4af33496d32649cdc9900b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NjU0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r471486549", "bodyText": "This is actually needed: it reflects the API defined in the PoC, which is one of the goals of this task.\nEdit: I didn't realize this is the TraceEvent. Anyway this is needed to create a recursive structure, so that any element can be parsed without the need of information about its parent. Also the example you posted contains a TraceInputValue that contains its TypedValue, so it's not fully pertinent in this case.", "author": "kostola", "createdAt": "2020-08-17T13:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MDg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "chunk": "diff --git a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java\nindex 047f3a4cf7..84a93fcafc 100644\n--- a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java\n+++ b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java\n\n@@ -18,8 +18,13 @@ package org.kie.kogito.tracing.decision.event.variable;\n \n import java.util.Map;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class StructureVariable extends TypedVariable {\n \n+    @JsonProperty(\"value\")\n     private Map<String, TypedVariable> value;\n \n     private StructureVariable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MzQ3MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461553470", "bodyText": "another nesting that is not really needed?", "author": "r00ta", "createdAt": "2020-07-28T12:50:04Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Collection;\n+\n+public class CollectionVariable extends TypedVariable {\n+\n+    private Collection<TypedVariable> value;", "originalCommit": "667498eac6eedf203e4af33496d32649cdc9900b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4Njg2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r471486861", "bodyText": "Same as here", "author": "kostola", "createdAt": "2020-08-17T13:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MzQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "chunk": "diff --git a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\nindex c55ff4874f..018f281b97 100644\n--- a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\n+++ b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\n\n@@ -18,8 +18,13 @@ package org.kie.kogito.tracing.decision.event.variable;\n \n import java.util.Collection;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class CollectionVariable extends TypedVariable {\n \n+    @JsonProperty(\"value\")\n     private Collection<TypedVariable> value;\n \n     private CollectionVariable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MzgzNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461553837", "bodyText": "use @JsonIgnoreProperties, otherwise the deserialization is broken if new unknown fields are added", "author": "r00ta", "createdAt": "2020-07-28T12:50:41Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Collection;\n+\n+public class CollectionVariable extends TypedVariable {", "originalCommit": "667498eac6eedf203e4af33496d32649cdc9900b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5Mzg4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r471493881", "bodyText": "Done", "author": "kostola", "createdAt": "2020-08-17T13:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MzgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "chunk": "diff --git a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\nindex c55ff4874f..018f281b97 100644\n--- a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\n+++ b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\n\n@@ -18,8 +18,13 @@ package org.kie.kogito.tracing.decision.event.variable;\n \n import java.util.Collection;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class CollectionVariable extends TypedVariable {\n \n+    @JsonProperty(\"value\")\n     private Collection<TypedVariable> value;\n \n     private CollectionVariable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NDQwMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461554400", "bodyText": "use @JsonIgnoreProperties, otherwise the deserialization is broken if new unknown fields are added", "author": "r00ta", "createdAt": "2020-07-28T12:51:38Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Map;\n+\n+public class StructureVariable extends TypedVariable {", "originalCommit": "667498eac6eedf203e4af33496d32649cdc9900b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MzU3NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r471493574", "bodyText": "Done", "author": "kostola", "createdAt": "2020-08-17T13:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NDQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "chunk": "diff --git a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java\nindex 047f3a4cf7..84a93fcafc 100644\n--- a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java\n+++ b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java\n\n@@ -18,8 +18,13 @@ package org.kie.kogito.tracing.decision.event.variable;\n \n import java.util.Map;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class StructureVariable extends TypedVariable {\n \n+    @JsonProperty(\"value\")\n     private Map<String, TypedVariable> value;\n \n     private StructureVariable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NDU5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461554593", "bodyText": "use @JsonIgnoreProperties, otherwise the deserialization is broken if new unknown fields are added", "author": "r00ta", "createdAt": "2020-07-28T12:51:57Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n+\n+public class UnitVariable extends TypedVariable {", "originalCommit": "667498eac6eedf203e4af33496d32649cdc9900b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDA3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r471494071", "bodyText": "Done", "author": "kostola", "createdAt": "2020-08-17T13:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NDU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "chunk": "diff --git a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java\nindex 0a658c73d7..72829114d8 100644\n--- a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java\n+++ b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java\n\n@@ -16,16 +16,21 @@\n \n package org.kie.kogito.tracing.decision.event.variable;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.JsonNode;\n \n import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n \n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class UnitVariable extends TypedVariable {\n \n+    @JsonProperty(\"baseType\")\n     @JsonInclude(NON_NULL)\n     private String baseType;\n \n+    @JsonProperty(\"value\")\n     private JsonNode value;\n \n     private UnitVariable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NzQwMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461557403", "bodyText": "I know it's more verbose, but could you use JsonProperty? My personal opinion is that this jackson feature is quite dangerous, since somebody might change the name of the variable and change directly the contract of the event. If we annotate the fields, it's clear that this class is going to be serialized/deserialized and it helps also in the understanding of the code imo.", "author": "r00ta", "createdAt": "2020-07-28T12:56:32Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n+\n+public class UnitVariable extends TypedVariable {\n+\n+    @JsonInclude(NON_NULL)\n+    private String baseType;\n+\n+    private JsonNode value;", "originalCommit": "667498eac6eedf203e4af33496d32649cdc9900b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDE1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r471494156", "bodyText": "Done", "author": "kostola", "createdAt": "2020-08-17T13:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NzQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "chunk": "diff --git a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java\nindex 0a658c73d7..72829114d8 100644\n--- a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java\n+++ b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java\n\n@@ -16,16 +16,21 @@\n \n package org.kie.kogito.tracing.decision.event.variable;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.JsonNode;\n \n import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n \n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class UnitVariable extends TypedVariable {\n \n+    @JsonProperty(\"baseType\")\n     @JsonInclude(NON_NULL)\n     private String baseType;\n \n+    @JsonProperty(\"value\")\n     private JsonNode value;\n \n     private UnitVariable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU2NDI4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461564284", "bodyText": "Could you add a complex test that is using collections and more complex scenarios like collections of structures?", "author": "r00ta", "createdAt": "2020-07-28T13:07:23Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Collection;\n+\n+public class CollectionVariable extends TypedVariable {", "originalCommit": "667498eac6eedf203e4af33496d32649cdc9900b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NzA5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r473167097", "bodyText": "I created a dedicated task for this.", "author": "kostola", "createdAt": "2020-08-19T16:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU2NDI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "chunk": "diff --git a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\nindex c55ff4874f..018f281b97 100644\n--- a/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\n+++ b/addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java\n\n@@ -18,8 +18,13 @@ package org.kie.kogito.tracing.decision.event.variable;\n \n import java.util.Collection;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class CollectionVariable extends TypedVariable {\n \n+    @JsonProperty(\"value\")\n     private Collection<TypedVariable> value;\n \n     private CollectionVariable() {\n"}}, {"oid": "1259105c0f1fbad21b60b6c91eea32d8903e2df3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1259105c0f1fbad21b60b6c91eea32d8903e2df3", "message": "[KOGITO-2741] Increase readability of DefaultAggregator", "committedDate": "2020-08-11T08:07:38Z", "type": "forcePushed"}, {"oid": "22b406fb48c0a65bf8e179e7679ee08a9a777cf3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/22b406fb48c0a65bf8e179e7679ee08a9a777cf3", "message": "[KOGITO-2741] Increase readability of DefaultAggregator", "committedDate": "2020-08-13T14:43:48Z", "type": "forcePushed"}, {"oid": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "message": "[KOGITO-2741] Use Java 8 syntax in tracing decision addon", "committedDate": "2020-08-18T08:36:18Z", "type": "forcePushed"}, {"oid": "1036041681881cd9b154f2aeb8b4a7b2536fc551", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1036041681881cd9b154f2aeb8b4a7b2536fc551", "message": "[KOGITO-2741] Export serviceUrl", "committedDate": "2020-08-18T13:27:56Z", "type": "forcePushed"}, {"oid": "c4df6a9e8acd807c89f6312f6ed684c2a3f68c3c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c4df6a9e8acd807c89f6312f6ed684c2a3f68c3c", "message": "[KOGITO-2741] Export serviceUrl", "committedDate": "2020-08-18T13:54:59Z", "type": "forcePushed"}, {"oid": "b59d529c1c14bdcf153d6ae277b6afff1cdb74a1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b59d529c1c14bdcf153d6ae277b6afff1cdb74a1", "message": "[KOGITO-2741] Add TypedVariable to TraceEvent", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "d5e1530504ace3c38a1233191b184740ab43a15c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d5e1530504ace3c38a1233191b184740ab43a15c", "message": "[KOGITO-2741] TraceOutputValue inputs field is now a Map", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "70a9c451ec56b7f7e5c90ad1ea66eb77121d7dbf", "url": "https://github.com/kiegroup/kogito-runtimes/commit/70a9c451ec56b7f7e5c90ad1ea66eb77121d7dbf", "message": "[KOGITO-2741] Fix CollectionVariable value", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "1c25cd7d3971422ff9db3a811095c493cba3fe6c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1c25cd7d3971422ff9db3a811095c493cba3fe6c", "message": "[KOGITO-2741] Increase readability of DefaultAggregator", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "c95463c759f710780a76638b297d3322d4e0d4de", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c95463c759f710780a76638b297d3322d4e0d4de", "message": "[KOGITO-2741] Add jackson annotations to tracing-decision-api variable classes", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "ecdea58f2355ca8635af005661756b24d1809a99", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ecdea58f2355ca8635af005661756b24d1809a99", "message": "[KOGITO-2741] Use Java 8 syntax in tracing decision addon", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "7c105ad2020f82d176469f3ea980536e74b62939", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7c105ad2020f82d176469f3ea980536e74b62939", "message": "[KOGITO-2741] Export serviceUrl", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "cc019f2439bca452e6e18c4d785ee0ccc4766227", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cc019f2439bca452e6e18c4d785ee0ccc4766227", "message": "[KOGITO-2741] Include serviceUrl in CloudEvent source", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "242a3e9d11897986f829ea245c4c7e1e910c6ab8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/242a3e9d11897986f829ea245c4c7e1e910c6ab8", "message": "[KOGITO-2741] Quarkus tracing decision addon: fix QuarkusExplainableResourceIT", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "3cc15a9948089b5186a500388a2a8b72a23a32d8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3cc15a9948089b5186a500388a2a8b72a23a32d8", "message": "[KOGITO-2741] Fix CdiConfigBeanTemplate in kogito-codegen", "committedDate": "2020-08-19T10:22:15Z", "type": "commit"}, {"oid": "3cc15a9948089b5186a500388a2a8b72a23a32d8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3cc15a9948089b5186a500388a2a8b72a23a32d8", "message": "[KOGITO-2741] Fix CdiConfigBeanTemplate in kogito-codegen", "committedDate": "2020-08-19T10:22:15Z", "type": "forcePushed"}]}