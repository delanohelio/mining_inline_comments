{"pr_number": 585, "pr_title": "KOGITO-2546  Refactor process/rules/decision-specific config out of ApplicationConfig", "pr_createdAt": "2020-06-25T10:49:09Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/585", "timeline": [{"oid": "9049ea2d030b04480c4a27eee5fc292ec87732cb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9049ea2d030b04480c4a27eee5fc292ec87732cb", "message": "fix templates", "committedDate": "2020-06-30T08:31:21Z", "type": "forcePushed"}, {"oid": "6f3cb5b2f0475c3cd99ac57d16da12f11279963e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6f3cb5b2f0475c3cd99ac57d16da12f11279963e", "message": "fix templates", "committedDate": "2020-06-30T08:33:09Z", "type": "forcePushed"}, {"oid": "0f692eb182d210ffd20d276ff541b272f636bd81", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0f692eb182d210ffd20d276ff541b272f636bd81", "message": "fix templates/init", "committedDate": "2020-06-30T11:42:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MTA2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r448171061", "bodyText": "Missing abstract keyword. Btw why is it abstract?", "author": "danielezonca", "createdAt": "2020-07-01T07:31:16Z", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/config/AbstractDecisionConfig.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.kie.kogito.dmn.config;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.kie.kogito.decision.DecisionEventListenerConfig;\n+\n+public class AbstractDecisionConfig implements org.kie.kogito.decision.DecisionConfig {", "originalCommit": "7e94f6389644f9f7cdc7334fff3d50cb0aa76146", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NTg5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452255895", "bodyText": "good question. It's more of an implementation detail than something I'd like people to instantiate explicitly, that's why it's not necessary for it to be a \"concrete\" class.", "author": "evacchi", "createdAt": "2020-07-09T14:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MTA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "chunk": "diff --git a/drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/config/AbstractDecisionConfig.java b/drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/config/AbstractDecisionConfig.java\ndeleted file mode 100644\nindex 0c29ad3809..0000000000\n--- a/drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/config/AbstractDecisionConfig.java\n+++ /dev/null\n\n@@ -1,41 +0,0 @@\n-package org.kie.kogito.dmn.config;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.kie.kogito.decision.DecisionEventListenerConfig;\n-\n-public class AbstractDecisionConfig implements org.kie.kogito.decision.DecisionConfig {\n-\n-    private final DecisionEventListenerConfig decisionEventListener;\n-\n-    protected AbstractDecisionConfig(\n-            Iterable<org.kie.kogito.decision.DecisionEventListenerConfig> decisionEventListenerConfigs,\n-            Iterable<org.kie.dmn.api.core.event.DMNRuntimeEventListener> dmnRuntimeEventListeners) {\n-        this.decisionEventListener = extractDecisionEventListenerConfig(decisionEventListenerConfigs, dmnRuntimeEventListeners);\n-    }\n-\n-    @Override\n-    public DecisionEventListenerConfig decisionEventListeners() {\n-        return decisionEventListener;\n-    }\n-\n-    private org.kie.kogito.decision.DecisionEventListenerConfig extractDecisionEventListenerConfig(\n-            Iterable<org.kie.kogito.decision.DecisionEventListenerConfig> decisionEventListenerConfigs,\n-            Iterable<org.kie.dmn.api.core.event.DMNRuntimeEventListener> dmnRuntimeEventListeners) {\n-        return this.mergeDecisionEventListenerConfig(java.util.stream.StreamSupport.stream(decisionEventListenerConfigs.spliterator(), false).collect(java.util.stream.Collectors.toList()), java.util.stream.StreamSupport.stream(dmnRuntimeEventListeners.spliterator(), false).collect(java.util.stream.Collectors.toList()));\n-    }\n-\n-    private org.kie.kogito.decision.DecisionEventListenerConfig mergeDecisionEventListenerConfig(\n-            java.util.Collection<org.kie.kogito.decision.DecisionEventListenerConfig> decisionEventListenerConfigs,\n-            java.util.Collection<org.kie.dmn.api.core.event.DMNRuntimeEventListener> dmnRuntimeEventListeners) {\n-        return new org.kie.kogito.dmn.config.CachedDecisionEventListenerConfig(merge(decisionEventListenerConfigs, org.kie.kogito.decision.DecisionEventListenerConfig::listeners, dmnRuntimeEventListeners));\n-    }\n-\n-    private static <C, L> List<L> merge(Collection<C> configs, Function<C, Collection<L>> configToListeners, Collection<L> listeners) {\n-        return Stream.concat(configs.stream().flatMap(c -> configToListeners.apply(c).stream()), listeners.stream()).collect(Collectors.toList());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2ODQzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r449768432", "bodyText": "What about make it protected? I don't think we want to expose this constructor with the templates.", "author": "danielezonca", "createdAt": "2020-07-04T12:16:48Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/AbstractConfigGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Optional;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.SpringDependencyInjectionAnnotator;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public abstract class AbstractConfigGenerator {\n+\n+    private final String packageName;\n+    private final String sourceFilePath;\n+\n+    private final String resourceCdi;\n+    private final String resourceSpring;\n+\n+    private DependencyInjectionAnnotator annotator;\n+\n+    public AbstractConfigGenerator(String packageName, String targetTypeName, String resourceCdi, String resourceSpring) {", "originalCommit": "5ddb49ae0fc327b3f344dbf60be5529454a21029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NTAxMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452255012", "bodyText": "it won't be exposed unless it's overridden by the subclass AFAIK. Anyway sure it can be protected..", "author": "evacchi", "createdAt": "2020-07-09T14:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2ODQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/AbstractConfigGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/AbstractConfigGenerator.java\ndeleted file mode 100644\nindex 0feb00964e..0000000000\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/AbstractConfigGenerator.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.codegen;\n-\n-import java.util.Optional;\n-\n-import com.github.javaparser.ast.CompilationUnit;\n-import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;\n-import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n-import org.kie.kogito.codegen.di.SpringDependencyInjectionAnnotator;\n-\n-import static com.github.javaparser.StaticJavaParser.parse;\n-\n-public abstract class AbstractConfigGenerator {\n-\n-    private final String packageName;\n-    private final String sourceFilePath;\n-\n-    private final String resourceCdi;\n-    private final String resourceSpring;\n-\n-    private DependencyInjectionAnnotator annotator;\n-\n-    public AbstractConfigGenerator(String packageName, String targetTypeName, String resourceCdi, String resourceSpring) {\n-        this.packageName = packageName;\n-        String targetCanonicalName = this.packageName + \".\" + targetTypeName;\n-        this.sourceFilePath = targetCanonicalName.replace('.', '/') + \".java\";\n-        this.resourceCdi = resourceCdi;\n-        this.resourceSpring = resourceSpring;\n-    }\n-\n-    public String generatedFilePath() {\n-        return sourceFilePath;\n-    }\n-\n-    public final AbstractConfigGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n-        this.annotator = annotator;\n-        return this;\n-    }\n-\n-    public Optional<CompilationUnit> compilationUnit() {\n-        if (annotator == null) {\n-            return Optional.empty();\n-        }\n-\n-        String resource;\n-        if (annotator instanceof CDIDependencyInjectionAnnotator) {\n-            resource = resourceCdi;\n-        } else if (annotator instanceof SpringDependencyInjectionAnnotator) {\n-            resource = resourceSpring;\n-        } else {\n-            throw new IllegalArgumentException(\"Unknown annotator \" + annotator);\n-        }\n-\n-        CompilationUnit compilationUnit =\n-                parse(this.getClass().getResourceAsStream(resource))\n-                        .setPackageDeclaration(packageName);\n-\n-        return Optional.of(compilationUnit);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1OTgzNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452259836", "bodyText": "@evacchi\nHi. I write this comment here but it is valid for the other templates implementing a statically-defined interface.\nThose templates implement the interface (that it is statically written in java). So everything needed to generate this code is already known/retrievable from the interface itself. What happen with all those templates is that every time a new model has been added, those templates must be manually modified with copy-and-paste code -that is basically error-prone and time consuming IMO.\nI think that everything that is \"mechanically\" derived from java code should be automatically generated - leaving hard-coded template only for complex cases that are not easily created out from existing sources", "author": "gitgabrio", "createdAt": "2020-07-09T14:28:48Z", "path": "kogito-codegen/src/main/resources/class-templates/config/SpringApplicationConfigTemplate.java", "diffHunk": "@@ -0,0 +1,65 @@\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.core.config.StaticRuleConfig;\n+import org.kie.kogito.dmn.config.StaticDecisionConfig;\n+import org.kie.kogito.process.impl.StaticProcessConfig;\n+\n+@org.springframework.stereotype.Component\n+public class ApplicationConfig implements org.kie.kogito.Config {", "originalCommit": "5ddb49ae0fc327b3f344dbf60be5529454a21029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MTczNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r454851737", "bodyText": "we clarified the overall strategy on a voice call :) for all the others:\n\nrefactor all common logic to an abstract class or a method library\nsimplify and strip down templates to a bare minimum necessary to enable (constructor) injection and delegate to the library methods/abstract classes\n\nthis should make repetitive code only a minor annoyance, while keeping the flow of the codegen procedures clearer to follow. While we both agree that mechanical derivation is the optimum, the idea is to find the sweet spot between full automation and simple readability.", "author": "evacchi", "createdAt": "2020-07-15T07:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1OTgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "48ef2b5d437f2cf8aeb36f4c46b6d241b34981f2", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/config/SpringApplicationConfigTemplate.java b/kogito-codegen/src/main/resources/class-templates/config/SpringApplicationConfigTemplate.java\nindex 9f29e82c16..21bc654a04 100644\n--- a/kogito-codegen/src/main/resources/class-templates/config/SpringApplicationConfigTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/config/SpringApplicationConfigTemplate.java\n\n@@ -10,29 +10,16 @@ import org.kie.kogito.dmn.config.StaticDecisionConfig;\n import org.kie.kogito.process.impl.StaticProcessConfig;\n \n @org.springframework.stereotype.Component\n-public class ApplicationConfig implements org.kie.kogito.Config {\n-\n-    protected org.kie.kogito.process.ProcessConfig processConfig;\n-    protected org.kie.kogito.rules.RuleConfig ruleConfig;\n-    protected org.kie.kogito.decision.DecisionConfig decisionConfig;\n-\n-    public ApplicationConfig(\n-            org.kie.kogito.process.ProcessConfig processConfig,\n-            org.kie.kogito.rules.RuleConfig ruleConfig,\n-            org.kie.kogito.decision.DecisionConfig decisionConfig) {\n-        this.processConfig = processConfig;\n-        this.ruleConfig = ruleConfig;\n-        this.decisionConfig = decisionConfig;\n-    }\n+public class ApplicationConfig extends org.kie.kogito.StaticConfig {\n \n     @org.springframework.beans.factory.annotation.Autowired\n     public ApplicationConfig(\n             List<org.kie.kogito.process.ProcessConfig> processConfig,\n             List<org.kie.kogito.rules.RuleConfig> ruleConfig,\n             List<org.kie.kogito.decision.DecisionConfig> decisionConfig) {\n-        this.processConfig = orDefault(processConfig, StaticProcessConfig::new);\n-        this.ruleConfig = orDefault(ruleConfig, StaticRuleConfig::new);\n-        this.decisionConfig = orDefault(decisionConfig, StaticDecisionConfig::new);\n+        super(orDefault(processConfig, StaticProcessConfig::new),\n+              orDefault(ruleConfig, StaticRuleConfig::new),\n+              orDefault(decisionConfig, StaticDecisionConfig::new));\n     }\n \n     private static <T> T orDefault(List<T> instances, Supplier<T> supplier) {\n"}}, {"oid": "48ef2b5d437f2cf8aeb36f4c46b6d241b34981f2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/48ef2b5d437f2cf8aeb36f4c46b6d241b34981f2", "message": "use StaticConfig as superclass in templates", "committedDate": "2020-07-09T15:58:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNTcwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452615702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-07-10T04:28:04Z", "path": "drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java b/drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java\ndeleted file mode 100644\nindex 26fa356242..0000000000\n--- a/drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.drools.core.config;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.kie.kogito.rules.RuleConfig;\n-import org.kie.kogito.rules.RuleEventListenerConfig;\n-\n-public abstract class AbstractRuleConfig implements RuleConfig {\n-\n-    private final RuleEventListenerConfig ruleEventListenerConfig;\n-\n-    public AbstractRuleConfig(RuleEventListenerConfig ruleEventListenerConfig) {\n-        this.ruleEventListenerConfig = ruleEventListenerConfig;\n-    }\n-\n-    public AbstractRuleConfig(\n-            Iterable<org.kie.kogito.rules.RuleEventListenerConfig> ruleEventListenerConfigs,\n-            Iterable<org.kie.api.event.rule.AgendaEventListener> agendaEventListeners,\n-            Iterable<org.kie.api.event.rule.RuleRuntimeEventListener> ruleRuntimeEventListeners) {\n-        this.ruleEventListenerConfig = extractRuleEventListenerConfig(ruleEventListenerConfigs, agendaEventListeners, ruleRuntimeEventListeners);\n-    }\n-\n-    @Override\n-    public RuleEventListenerConfig ruleEventListeners() {\n-        return ruleEventListenerConfig;\n-    }\n-\n-    private org.kie.kogito.rules.RuleEventListenerConfig extractRuleEventListenerConfig(\n-            Iterable<RuleEventListenerConfig> ruleEventListenerConfigs,\n-            Iterable<org.kie.api.event.rule.AgendaEventListener> agendaEventListeners,\n-            Iterable<org.kie.api.event.rule.RuleRuntimeEventListener> ruleRuntimeEventListeners) {\n-        return this.mergeRuleEventListenerConfig(java.util.stream.StreamSupport.stream(ruleEventListenerConfigs.spliterator(), false).collect(java.util.stream.Collectors.toList()), java.util.stream.StreamSupport.stream(agendaEventListeners.spliterator(), false).collect(java.util.stream.Collectors.toList()), java.util.stream.StreamSupport.stream(ruleRuntimeEventListeners.spliterator(), false).collect(java.util.stream.Collectors.toList()));\n-    }\n-\n-    private org.kie.kogito.rules.RuleEventListenerConfig mergeRuleEventListenerConfig(java.util.Collection<org.kie.kogito.rules.RuleEventListenerConfig> ruleEventListenerConfigs, java.util.Collection<org.kie.api.event.rule.AgendaEventListener> agendaEventListeners, java.util.Collection<org.kie.api.event.rule.RuleRuntimeEventListener> ruleRuntimeEventListeners) {\n-        return new org.drools.core.config.CachedRuleEventListenerConfig(merge(ruleEventListenerConfigs, org.kie.kogito.rules.RuleEventListenerConfig::agendaListeners, agendaEventListeners), merge(ruleEventListenerConfigs, org.kie.kogito.rules.RuleEventListenerConfig::ruleRuntimeListeners, ruleRuntimeEventListeners));\n-    }\n-\n-    private static <C, L> List<L> merge(Collection<C> configs, Function<C, Collection<L>> configToListeners, Collection<L> listeners) {\n-        return Stream.concat(configs.stream().flatMap(c -> configToListeners.apply(c).stream()), listeners.stream()).collect(Collectors.toList());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNTg3MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452615870", "bodyText": "just some general code format, to add imports and review the formmating", "author": "cristianonicolai", "createdAt": "2020-07-10T04:28:48Z", "path": "drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.config;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.kie.kogito.rules.RuleConfig;\n+import org.kie.kogito.rules.RuleEventListenerConfig;\n+\n+public abstract class AbstractRuleConfig implements RuleConfig {\n+\n+    private final RuleEventListenerConfig ruleEventListenerConfig;\n+\n+    public AbstractRuleConfig(RuleEventListenerConfig ruleEventListenerConfig) {\n+        this.ruleEventListenerConfig = ruleEventListenerConfig;\n+    }\n+\n+    public AbstractRuleConfig(\n+            Iterable<org.kie.kogito.rules.RuleEventListenerConfig> ruleEventListenerConfigs,", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java b/drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java\ndeleted file mode 100644\nindex 26fa356242..0000000000\n--- a/drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.drools.core.config;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.kie.kogito.rules.RuleConfig;\n-import org.kie.kogito.rules.RuleEventListenerConfig;\n-\n-public abstract class AbstractRuleConfig implements RuleConfig {\n-\n-    private final RuleEventListenerConfig ruleEventListenerConfig;\n-\n-    public AbstractRuleConfig(RuleEventListenerConfig ruleEventListenerConfig) {\n-        this.ruleEventListenerConfig = ruleEventListenerConfig;\n-    }\n-\n-    public AbstractRuleConfig(\n-            Iterable<org.kie.kogito.rules.RuleEventListenerConfig> ruleEventListenerConfigs,\n-            Iterable<org.kie.api.event.rule.AgendaEventListener> agendaEventListeners,\n-            Iterable<org.kie.api.event.rule.RuleRuntimeEventListener> ruleRuntimeEventListeners) {\n-        this.ruleEventListenerConfig = extractRuleEventListenerConfig(ruleEventListenerConfigs, agendaEventListeners, ruleRuntimeEventListeners);\n-    }\n-\n-    @Override\n-    public RuleEventListenerConfig ruleEventListeners() {\n-        return ruleEventListenerConfig;\n-    }\n-\n-    private org.kie.kogito.rules.RuleEventListenerConfig extractRuleEventListenerConfig(\n-            Iterable<RuleEventListenerConfig> ruleEventListenerConfigs,\n-            Iterable<org.kie.api.event.rule.AgendaEventListener> agendaEventListeners,\n-            Iterable<org.kie.api.event.rule.RuleRuntimeEventListener> ruleRuntimeEventListeners) {\n-        return this.mergeRuleEventListenerConfig(java.util.stream.StreamSupport.stream(ruleEventListenerConfigs.spliterator(), false).collect(java.util.stream.Collectors.toList()), java.util.stream.StreamSupport.stream(agendaEventListeners.spliterator(), false).collect(java.util.stream.Collectors.toList()), java.util.stream.StreamSupport.stream(ruleRuntimeEventListeners.spliterator(), false).collect(java.util.stream.Collectors.toList()));\n-    }\n-\n-    private org.kie.kogito.rules.RuleEventListenerConfig mergeRuleEventListenerConfig(java.util.Collection<org.kie.kogito.rules.RuleEventListenerConfig> ruleEventListenerConfigs, java.util.Collection<org.kie.api.event.rule.AgendaEventListener> agendaEventListeners, java.util.Collection<org.kie.api.event.rule.RuleRuntimeEventListener> ruleRuntimeEventListeners) {\n-        return new org.drools.core.config.CachedRuleEventListenerConfig(merge(ruleEventListenerConfigs, org.kie.kogito.rules.RuleEventListenerConfig::agendaListeners, agendaEventListeners), merge(ruleEventListenerConfigs, org.kie.kogito.rules.RuleEventListenerConfig::ruleRuntimeListeners, ruleRuntimeEventListeners));\n-    }\n-\n-    private static <C, L> List<L> merge(Collection<C> configs, Function<C, Collection<L>> configToListeners, Collection<L> listeners) {\n-        return Stream.concat(configs.stream().flatMap(c -> configToListeners.apply(c).stream()), listeners.stream()).collect(Collectors.toList());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNjAwNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452616004", "bodyText": "same for formatting.", "author": "cristianonicolai", "createdAt": "2020-07-10T04:29:27Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessConfig.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.kogito.jobs.JobsService;\n+import org.kie.kogito.process.ProcessConfig;\n+import org.kie.kogito.process.ProcessEventListenerConfig;\n+import org.kie.kogito.process.WorkItemHandlerConfig;\n+import org.kie.kogito.signal.SignalManagerHub;\n+import org.kie.kogito.uow.UnitOfWorkManager;\n+import org.kie.services.signal.DefaultSignalManagerHub;\n+\n+public abstract class AbstractProcessConfig implements ProcessConfig {\n+\n+    private final WorkItemHandlerConfig workItemHandlerConfig;\n+    private final SignalManagerHub signalManagerHub = new DefaultSignalManagerHub();\n+    private final ProcessEventListenerConfig processEventListenerConfig;\n+    private final UnitOfWorkManager unitOfWorkManager;\n+    private final JobsService jobsService;\n+\n+    protected AbstractProcessConfig(\n+            Iterable<org.kie.kogito.process.WorkItemHandlerConfig> workItemHandlerConfig,", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessConfig.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessConfig.java\ndeleted file mode 100644\nindex 6993ad12ca..0000000000\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessConfig.java\n+++ /dev/null\n\n@@ -1,110 +0,0 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.process.impl;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import java.util.stream.StreamSupport;\n-\n-import org.kie.api.event.process.ProcessEventListener;\n-import org.kie.kogito.jobs.JobsService;\n-import org.kie.kogito.process.ProcessConfig;\n-import org.kie.kogito.process.ProcessEventListenerConfig;\n-import org.kie.kogito.process.WorkItemHandlerConfig;\n-import org.kie.kogito.signal.SignalManagerHub;\n-import org.kie.kogito.uow.UnitOfWorkManager;\n-import org.kie.services.signal.DefaultSignalManagerHub;\n-\n-public abstract class AbstractProcessConfig implements ProcessConfig {\n-\n-    private final WorkItemHandlerConfig workItemHandlerConfig;\n-    private final SignalManagerHub signalManagerHub = new DefaultSignalManagerHub();\n-    private final ProcessEventListenerConfig processEventListenerConfig;\n-    private final UnitOfWorkManager unitOfWorkManager;\n-    private final JobsService jobsService;\n-\n-    protected AbstractProcessConfig(\n-            Iterable<org.kie.kogito.process.WorkItemHandlerConfig> workItemHandlerConfig,\n-            Iterable<org.kie.kogito.process.ProcessEventListenerConfig> processEventListenerConfigs,\n-            Iterable<org.kie.api.event.process.ProcessEventListener> processEventListeners,\n-            Iterable<org.kie.kogito.uow.UnitOfWorkManager> unitOfWorkManager,\n-            Iterable<org.kie.kogito.jobs.JobsService> jobsService,\n-            Iterable<org.kie.kogito.event.EventPublisher> eventPublishers) {\n-\n-        this.workItemHandlerConfig = orDefault(workItemHandlerConfig, org.kie.kogito.process.impl.DefaultWorkItemHandlerConfig::new);\n-        this.processEventListenerConfig = merge(processEventListenerConfigs, processEventListeners);\n-        this.unitOfWorkManager = orDefault(unitOfWorkManager,\n-                                           () -> new org.kie.kogito.services.uow.DefaultUnitOfWorkManager(\n-                                                   new org.kie.kogito.services.uow.CollectingUnitOfWorkFactory()));\n-        this.jobsService = orDefault(jobsService, () -> null);\n-\n-        eventPublishers.forEach(publisher -> unitOfWorkManager().eventManager().addPublisher(publisher));\n-    }\n-\n-    @Override\n-    public WorkItemHandlerConfig workItemHandlers() {\n-        return workItemHandlerConfig;\n-    }\n-\n-    @Override\n-    public ProcessEventListenerConfig processEventListeners() {\n-        return processEventListenerConfig;\n-    }\n-\n-    @Override\n-    public SignalManagerHub signalManagerHub() {\n-        return signalManagerHub;\n-    }\n-\n-    @Override\n-    public UnitOfWorkManager unitOfWorkManager() {\n-        return unitOfWorkManager;\n-    }\n-\n-    @Override\n-    public JobsService jobsService() {\n-        return jobsService;\n-    }\n-\n-    public org.kie.kogito.Addons addons() {\n-        return new org.kie.kogito.Addons(java.util.Arrays.asList());\n-    }\n-\n-    static <T> T orDefault(Iterable<T> instance, Supplier<? extends T> supplier) {\n-        Iterator<T> iterator = instance.iterator();\n-        if (iterator.hasNext()) {\n-            return iterator.next();\n-        } else {\n-            return supplier.get();\n-        }\n-    }\n-\n-    static org.kie.kogito.process.ProcessEventListenerConfig merge(\n-            Iterable<ProcessEventListenerConfig> processEventListenerConfigs,\n-            Iterable<ProcessEventListener> processEventListeners) {\n-        List<ProcessEventListenerConfig> l1 = StreamSupport.stream(processEventListenerConfigs.spliterator(), false).collect(Collectors.toList());\n-        List<ProcessEventListener> l2 = StreamSupport.stream(processEventListeners.spliterator(), false).collect(Collectors.toList());\n-\n-        Stream<ProcessEventListener> processEventListenerStream = l1.stream().flatMap(c -> c.listeners().stream());\n-        Stream<ProcessEventListener> eventListenerStream = l2.stream();\n-\n-        return new org.kie.kogito.process.impl.CachedProcessEventListenerConfig(\n-                Stream.concat(processEventListenerStream, eventListenerStream).collect(Collectors.toList()));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNjM5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452616390", "bodyText": "use this(new DefaultWorkItemHandlerConfig()... instead?", "author": "cristianonicolai", "createdAt": "2020-07-10T04:31:08Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/StaticProcessConfig.java", "diffHunk": "@@ -31,6 +33,14 @@\n     private final UnitOfWorkManager unitOfWorkManager;\n     private final JobsService jobsService;\n \n+    public StaticProcessConfig() {\n+        this.workItemHandlerConfig = new DefaultWorkItemHandlerConfig();", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64336a4764fdc7a663a92f4f38394a91b30ade91", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/StaticProcessConfig.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/StaticProcessConfig.java\nindex 7562663f50..dc9ae78660 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/StaticProcessConfig.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/StaticProcessConfig.java\n\n@@ -33,15 +33,11 @@ public class StaticProcessConfig implements ProcessConfig {\n     private final UnitOfWorkManager unitOfWorkManager;\n     private final JobsService jobsService;\n \n-    public StaticProcessConfig() {\n-        this.workItemHandlerConfig = new DefaultWorkItemHandlerConfig();\n-        this.unitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n-        this.processEventListenerConfig = new DefaultProcessEventListenerConfig();\n-        this.signalManager = new DefaultSignalManagerHub();\n-        this.jobsService = null;\n-    }\n-\n-    public StaticProcessConfig(WorkItemHandlerConfig workItemHandlerConfig, ProcessEventListenerConfig processEventListenerConfig, UnitOfWorkManager unitOfWorkManager, JobsService jobsService) {\n+    public StaticProcessConfig(\n+            WorkItemHandlerConfig workItemHandlerConfig,\n+            ProcessEventListenerConfig processEventListenerConfig,\n+            UnitOfWorkManager unitOfWorkManager,\n+            JobsService jobsService) {\n         this.unitOfWorkManager = unitOfWorkManager;\n         this.workItemHandlerConfig = workItemHandlerConfig;\n         this.processEventListenerConfig = processEventListenerConfig;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNjgyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452616828", "bodyText": "keep the imports?", "author": "cristianonicolai", "createdAt": "2020-07-10T04:33:27Z", "path": "kogito-codegen/src/main/resources/class-templates/config/ApplicationConfigTemplate.java", "diffHunk": "@@ -1,40 +1,33 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.function.Function;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import org.kie.kogito.decision.DecisionConfig;\n-import org.kie.kogito.process.ProcessConfig;\n-import org.kie.kogito.rules.RuleConfig;\n-\n+import org.drools.core.config.StaticRuleConfig;\n+import org.kie.kogito.dmn.config.StaticDecisionConfig;\n+import org.kie.kogito.process.impl.StaticProcessConfig;\n \n public class ApplicationConfig implements org.kie.kogito.Config {\n \n-    protected ProcessConfig processConfig;\n-    protected RuleConfig ruleConfig;\n-    protected DecisionConfig decisionConfig;\n+    private org.kie.kogito.process.ProcessConfig processConfig = new StaticProcessConfig();", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/config/ApplicationConfigTemplate.java b/kogito-codegen/src/main/resources/class-templates/config/ApplicationConfigTemplate.java\nindex dd431c9de4..65972b259d 100644\n--- a/kogito-codegen/src/main/resources/class-templates/config/ApplicationConfigTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/config/ApplicationConfigTemplate.java\n\n@@ -11,9 +11,43 @@ import org.kie.kogito.process.impl.StaticProcessConfig;\n \n public class ApplicationConfig implements org.kie.kogito.Config {\n \n-    private org.kie.kogito.process.ProcessConfig processConfig = new StaticProcessConfig();\n-    private org.kie.kogito.rules.RuleConfig ruleConfig = new StaticRuleConfig();\n-    private org.kie.kogito.decision.DecisionConfig decisionConfig = new StaticDecisionConfig();\n+    protected org.kie.kogito.process.ProcessConfig processConfig;\n+    protected org.kie.kogito.rules.RuleConfig ruleConfig;\n+    protected org.kie.kogito.decision.DecisionConfig decisionConfig;\n+\n+    public ApplicationConfig() {\n+        this(new StaticProcessConfig(),\n+             new StaticRuleConfig(),\n+             new StaticDecisionConfig());\n+    }\n+\n+    public ApplicationConfig(\n+            org.kie.kogito.process.ProcessConfig processConfig,\n+            org.kie.kogito.rules.RuleConfig ruleConfig,\n+            org.kie.kogito.decision.DecisionConfig decisionConfig) {\n+        this.processConfig = processConfig;\n+        this.ruleConfig = ruleConfig;\n+        this.decisionConfig = decisionConfig;\n+    }\n+\n+    @javax.inject.Inject\n+    public ApplicationConfig(\n+            javax.enterprise.inject.Instance<org.kie.kogito.process.ProcessConfig> processConfig,\n+            javax.enterprise.inject.Instance<org.kie.kogito.rules.RuleConfig> ruleConfig,\n+            javax.enterprise.inject.Instance<org.kie.kogito.decision.DecisionConfig> decisionConfig) {\n+        this(orDefault(processConfig, StaticProcessConfig::new),\n+             orDefault(ruleConfig, StaticRuleConfig::new),\n+             orDefault(decisionConfig, StaticDecisionConfig::new));\n+    }\n+\n+    private static <T> T orDefault(javax.enterprise.inject.Instance<T> instance, Supplier<T> supplier) {\n+        if (instance.isUnsatisfied()) {\n+            return supplier.get();\n+        } else {\n+            return instance.get();\n+        }\n+    }\n+\n \n     @Override\n     public org.kie.kogito.process.ProcessConfig process() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxOTQ0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452619443", "bodyText": "review imports and formatting", "author": "cristianonicolai", "createdAt": "2020-07-10T04:45:46Z", "path": "kogito-codegen/src/main/resources/class-templates/config/CdiDecisionConfigTemplate.java", "diffHunk": "@@ -0,0 +1,24 @@\n+import java.util.Collection;", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0NTYyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r454845627", "bodyText": "I have removed unqualified imports except for CDI/Spring + org.kie.kogito.process.ProcessConfig, etc because the generated code has the same unqualified name (ProcessConfig, etc) and it may clash", "author": "evacchi", "createdAt": "2020-07-15T07:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxOTQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/config/CdiDecisionConfigTemplate.java b/kogito-codegen/src/main/resources/class-templates/config/CdiDecisionConfigTemplate.java\ndeleted file mode 100644\nindex 1246c905cc..0000000000\n--- a/kogito-codegen/src/main/resources/class-templates/config/CdiDecisionConfigTemplate.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import javax.enterprise.inject.Instance;\n-\n-import org.kie.kogito.decision.DecisionEventListenerConfig;\n-import org.kie.kogito.dmn.config.AbstractDecisionConfig;\n-import org.kie.kogito.rules.RuleEventListenerConfig;\n-\n-@javax.inject.Singleton\n-class DecisionConfig extends AbstractDecisionConfig {\n-\n-    @javax.inject.Inject\n-    public DecisionConfig(\n-            Instance<org.kie.kogito.decision.DecisionEventListenerConfig> decisionEventListenerConfigs,\n-            Instance<org.kie.dmn.api.core.event.DMNRuntimeEventListener> dmnRuntimeEventListeners) {\n-        super(decisionEventListenerConfigs, dmnRuntimeEventListeners);\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMDc3Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452620772", "bodyText": "@evacchi isnt register a little more explicit about the intent here? like registering a listener?", "author": "cristianonicolai", "createdAt": "2020-07-10T04:51:46Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java", "diffHunk": "@@ -70,7 +70,7 @@ public void testBasicBusinessRuleTaskWithAgendaListener() throws Exception {\n         Application app = generateCode(Collections.singletonList(\"ruletask/BusinessRuleTask.bpmn2\"), Collections.singletonList(\"ruletask/BusinessRuleTask.drl\"));\n         assertThat(app).isNotNull();\n         final AtomicInteger counter = new AtomicInteger();\n-        ((DefaultRuleEventListenerConfig)app.config().rule().ruleEventListeners()).register(new DefaultAgendaEventListener() {", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4NjIxNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452686215", "bodyText": "it would but it's non-public and we're downcasting to the (possibly wrong) impl now. This alternative works in every situation (well, in this current impl) and it's ok for kogito-codegen test cases. In examples, even in tests, we should actually @annotate the event listener and let the runtime do the wiring, so this method won't be called at all.", "author": "evacchi", "createdAt": "2020-07-10T08:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMDc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "chunk": "diff --git a/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java b/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java\nindex a07a8107c1..461d9cccac 100644\n--- a/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java\n+++ b/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java\n\n@@ -66,8 +68,10 @@ public class BusinessRuleTaskTest extends AbstractCodegenTest {\n \n     @Test\n     public void testBasicBusinessRuleTaskWithAgendaListener() throws Exception {\n-\n-        Application app = generateCode(Collections.singletonList(\"ruletask/BusinessRuleTask.bpmn2\"), Collections.singletonList(\"ruletask/BusinessRuleTask.drl\"));\n+        Map<AbstractCodegenTest.TYPE, List<String>> resourcesTypeMap = new HashMap<>();\n+        resourcesTypeMap.put(TYPE.PROCESS, Collections.singletonList(\"ruletask/BusinessRuleTask.bpmn2\"));\n+        resourcesTypeMap.put(TYPE.RULES, Collections.singletonList(\"ruletask/BusinessRuleTask.drl\"));\n+        Application app = generateCode(resourcesTypeMap, false);\n         assertThat(app).isNotNull();\n         final AtomicInteger counter = new AtomicInteger();\n         app.config().rule().ruleEventListeners().agendaListeners().add(new DefaultAgendaEventListener() {\n"}}, {"oid": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "message": "KOGITO-2546 Refactor process-related config into generated ProcessConfig", "committedDate": "2020-07-15T07:09:47Z", "type": "commit"}, {"oid": "5bef6cd891e8a2417f18d96ee90170ba945d52b8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5bef6cd891e8a2417f18d96ee90170ba945d52b8", "message": "KOGITO-2546 Refactor process/rules/decision-specific config out of ApplicationConfig", "committedDate": "2020-07-15T07:11:23Z", "type": "commit"}, {"oid": "5bef6cd891e8a2417f18d96ee90170ba945d52b8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5bef6cd891e8a2417f18d96ee90170ba945d52b8", "message": "KOGITO-2546 Refactor process/rules/decision-specific config out of ApplicationConfig", "committedDate": "2020-07-15T07:11:23Z", "type": "forcePushed"}, {"oid": "64336a4764fdc7a663a92f4f38394a91b30ade91", "url": "https://github.com/kiegroup/kogito-runtimes/commit/64336a4764fdc7a663a92f4f38394a91b30ade91", "message": "formatting", "committedDate": "2020-07-15T07:27:26Z", "type": "commit"}]}