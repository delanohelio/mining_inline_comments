{"pr_number": 507, "pr_title": "[KOGITO-1968] Implement missing features for DynamicNodes", "pr_createdAt": "2020-05-14T15:31:02Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/507", "timeline": [{"oid": "bcc30be0532d76b2e03e615e4dcea4ed25756b3f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bcc30be0532d76b2e03e615e4dcea4ed25756b3f", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-14T15:37:32Z", "type": "forcePushed"}, {"oid": "60cb156ffa60ca812066d898e57609a628e073da", "url": "https://github.com/kiegroup/kogito-runtimes/commit/60cb156ffa60ca812066d898e57609a628e073da", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-18T07:10:13Z", "type": "forcePushed"}, {"oid": "562cfec1b565f075e3514620cf010e8bcb8dd92a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/562cfec1b565f075e3514620cf010e8bcb8dd92a", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-18T09:02:28Z", "type": "forcePushed"}, {"oid": "b0aa13d65186a71bb2cbff3457f9d522ec74a69b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b0aa13d65186a71bb2cbff3457f9d522ec74a69b", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-19T15:29:06Z", "type": "forcePushed"}, {"oid": "213d4f4af1daa69829e9fd95278a5307f76dd841", "url": "https://github.com/kiegroup/kogito-runtimes/commit/213d4f4af1daa69829e9fd95278a5307f76dd841", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-19T15:31:53Z", "type": "forcePushed"}, {"oid": "34a6de6467423279cf8144816642ccb7fceb26fb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/34a6de6467423279cf8144816642ccb7fceb26fb", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-19T15:34:43Z", "type": "forcePushed"}, {"oid": "7346de77f1678c8caba364570a59afacec28e492", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7346de77f1678c8caba364570a59afacec28e492", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-19T16:18:39Z", "type": "forcePushed"}, {"oid": "311b3f8292b0935f5d64b4a102040addd5c01a86", "url": "https://github.com/kiegroup/kogito-runtimes/commit/311b3f8292b0935f5d64b4a102040addd5c01a86", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-20T06:58:50Z", "type": "forcePushed"}, {"oid": "9a113bb1c7fa71c7a4c9ada1c9c5a018090a81b5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9a113bb1c7fa71c7a4c9ada1c9c5a018090a81b5", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-20T12:32:28Z", "type": "forcePushed"}, {"oid": "24a9af98cf054a2174bdedb66f4ddbc5e88e01f0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/24a9af98cf054a2174bdedb66f4ddbc5e88e01f0", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-22T14:26:57Z", "type": "forcePushed"}, {"oid": "aaa97faaadece5593af637ad4defc1385eb02708", "url": "https://github.com/kiegroup/kogito-runtimes/commit/aaa97faaadece5593af637ad4defc1385eb02708", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-25T17:16:49Z", "type": "forcePushed"}, {"oid": "511715d448c97a2b1fb987965f4521b1238d93cc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/511715d448c97a2b1fb987965f4521b1238d93cc", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-25T18:45:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1Nzk1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r430057950", "bodyText": "I'm wondering whether the .toString() it the best option to check, can't any attribute be checked instead?", "author": "tiagodolphine", "createdAt": "2020-05-25T19:44:59Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ActionNodeVisitor.java", "diffHunk": "@@ -48,22 +51,31 @@ public void visitNode(String factoryField, ActionNode node, BlockStmt body, Vari\n             body.addStatement(getFactoryMethod(getNodeId(node), METHOD_ACTION, lambda));\n         } else {\n             if (node.getAction().toString() == null || node.getAction().toString().trim().isEmpty()) {\n-                throw new IllegalStateException(\"Action node \" + node.getId() + \" name \" + node.getName() + \" has not action defined\");\n+                throw new IllegalStateException(\"Action node \" + node.getId() + \" name \" + node.getName() + \" has no action defined\");\n             }\n             BlockStmt actionBody = new BlockStmt();\n+            List<Variable> variables = variableScope.getVariables();\n+            variables.stream()\n+                    .filter(v -> isVarPresent(v, node.getAction()))\n+                    .map(ActionNodeVisitor::makeAssignment)\n+                    .forEach(actionBody::addStatement);\n+\n+            actionBody.addStatement(new NameExpr(node.getAction().toString()));\n+\n             LambdaExpr lambda = new LambdaExpr(\n                     new Parameter(new UnknownType(), KCONTEXT_VAR), // (kcontext) ->\n                     actionBody\n             );\n-\n-            for (Variable v : variableScope.getVariables()) {\n-                actionBody.addStatement(makeAssignment(v));\n-            }\n-            actionBody.addStatement(new NameExpr(node.getAction().toString()));\n-\n             body.addStatement(getFactoryMethod(getNodeId(node), METHOD_ACTION, lambda));\n         }\n         visitMetaData(node.getMetaData(), body, getNodeId(node));\n         body.addStatement(getDoneMethod(getNodeId(node)));\n     }\n+\n+    private boolean isVarPresent(Variable v, DroolsAction action) {\n+        if(action == null) {\n+            return false;\n+        }\n+        return action.toString().contains(v.getName());", "originalCommit": "511715d448c97a2b1fb987965f4521b1238d93cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NTk3NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r430675974", "bodyText": "As the droolsConsequenceAction is the only one implementing the toString I check the consequence instead.", "author": "ruromero", "createdAt": "2020-05-26T20:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1Nzk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ActionNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ActionNodeVisitor.java\nindex 6573973c1f..f546a04b60 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ActionNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ActionNodeVisitor.java\n\n@@ -50,17 +51,18 @@ public class ActionNodeVisitor extends AbstractNodeVisitor<ActionNode> {\n             LambdaExpr lambda = TriggerMetaData.buildLambdaExpr(node, metadata);\n             body.addStatement(getFactoryMethod(getNodeId(node), METHOD_ACTION, lambda));\n         } else {\n-            if (node.getAction().toString() == null || node.getAction().toString().trim().isEmpty()) {\n+            String consequence = getActionConsequence(node.getAction());\n+            if (consequence == null || consequence.trim().isEmpty()) {\n                 throw new IllegalStateException(\"Action node \" + node.getId() + \" name \" + node.getName() + \" has no action defined\");\n             }\n             BlockStmt actionBody = new BlockStmt();\n             List<Variable> variables = variableScope.getVariables();\n             variables.stream()\n-                    .filter(v -> isVarPresent(v, node.getAction()))\n+                    .filter(v -> consequence.contains(v.getName()))\n                     .map(ActionNodeVisitor::makeAssignment)\n                     .forEach(actionBody::addStatement);\n \n-            actionBody.addStatement(new NameExpr(node.getAction().toString()));\n+            actionBody.addStatement(new NameExpr(consequence));\n \n             LambdaExpr lambda = new LambdaExpr(\n                     new Parameter(new UnknownType(), KCONTEXT_VAR), // (kcontext) ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1OTk1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r430059956", "bodyText": "the getProcessInstance().getKnowledgeRuntime().getAgenda() != null condition is used in more places, it could be extracted to a method.", "author": "tiagodolphine", "createdAt": "2020-05-25T19:54:00Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/DynamicNodeInstance.java", "diffHunk": "@@ -63,43 +64,43 @@ public String getNodeName() {\n     @Override\n     public void internalTrigger(NodeInstance from, String type) {\n         triggerTime = new Date();\n-        triggerEvent(ExtendedNodeImpl.EVENT_NODE_ENTER);\n+        triggerEvent(EVENT_NODE_ENTER);\n \n     \t// if node instance was cancelled, abort\n \t\tif (getNodeInstanceContainer().getNodeInstance(getId()) == null) {\n \t\t\treturn;\n \t\t}\n-    \tInternalAgenda agenda =  (InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda();\n-    \tString ruleFlowGroup = getRuleFlowGroupName();\n-    \tif (ruleFlowGroup != null && !agenda.getRuleFlowGroup(ruleFlowGroup).isActive()) {\n-        \tagenda.getRuleFlowGroup(ruleFlowGroup).setAutoDeactivate(false);\n-        \tagenda.activateRuleFlowGroup(ruleFlowGroup, getProcessInstance().getId(), getUniqueId());\n-    \t}\n-//    \tif (getDynamicNode().isAutoComplete() && getNodeInstances(false).isEmpty()) {\n-//    \t\ttriggerCompleted(NodeImpl.CONNECTION_DEFAULT_TYPE);\n-//    \t}\n-\n-        \n-        String rule = \"RuleFlow-AdHocComplete-\" + getProcessInstance().getProcessId() + \"-\" + getDynamicNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-            .isRuleActiveInRuleFlowGroup(getRuleFlowGroupName(), rule, getProcessInstance().getId());\n+        boolean isActive = false;\n+        // KOGITO-2168 Conditions not supported\n+        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {", "originalCommit": "511715d448c97a2b1fb987965f4521b1238d93cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ2MjM3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r430462377", "bodyText": "Well, it is used 3 times and is something that will change or at least be revisited when supporting conditions. As discussed with @evacchi in the previous PR the agenda is something that should be dropped completely. So adding functions specific to the agenda is not worth it.", "author": "ruromero", "createdAt": "2020-05-26T14:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1OTk1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwODAxMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r430408013", "bodyText": "What about moving the StageBuilder from test to src and use here as well?", "author": "tiagodolphine", "createdAt": "2020-05-26T13:23:16Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -381,13 +387,33 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n     @Override\n     public Collection<Milestone> milestones() {\n         return getNodes(MilestoneNode.class)\n+                .map(MilestoneNode.class::cast)\n                 .map(n -> {\n                     String uid = (String) n.getMetaData().get(UNIQUE_ID);\n-                    return new Milestone(uid, n.getName(), getStatus(uid));\n+                    return new Milestone(uid, n.getName(), getStatus(uid), n.getConstraint());\n                 })\n                 .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Collection<Stage> stages() {\n+        return getNodes(DynamicNode.class)\n+                .map(DynamicNode.class::cast)\n+                .map(n -> {\n+                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n+                    return new Stage(uid, n.getName(), getStatus(uid), n.getActivationExpression(), n.getCompletionExpression(), n.isAutoComplete(), collectAdHocFragments(n));", "originalCommit": "511715d448c97a2b1fb987965f4521b1238d93cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1OTU1NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r430459555", "bodyText": "Yes, I'll do it", "author": "ruromero", "createdAt": "2020-05-26T14:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwODAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\nindex 246faeb1b1..f69b23db70 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n\n@@ -386,8 +389,7 @@ public abstract class AbstractProcessInstance<T extends Model> implements Proces\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(MilestoneNode.class)\n-                .map(MilestoneNode.class::cast)\n+        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n                 .map(n -> {\n                     String uid = (String) n.getMetaData().get(UNIQUE_ID);\n                     return new Milestone(uid, n.getName(), getStatus(uid), n.getConstraint());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NTc2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431175768", "bodyText": "@ruromero Im not sure whats the actual need for this change", "author": "cristianonicolai", "createdAt": "2020-05-27T14:28:10Z", "path": "drools/drools-core/src/main/java/org/drools/core/process/instance/impl/DefaultWorkItemManager.java", "diffHunk": "@@ -73,8 +76,7 @@ public void internalExecuteWorkItem(WorkItem workItem) {\n         WorkItemHandler handler = this.workItemHandlers.get(workItem.getName());\n         if (handler != null) {\n             handler.executeWorkItem(workItem, this);\n-        } else throw new WorkItemHandlerNotFoundException( \"Could not find work item handler for \" + workItem.getName(),", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0OTg5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431249898", "bodyText": "There's no need. It's just an improvement.", "author": "ruromero", "createdAt": "2020-05-27T15:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NTc2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3ODQwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431178407", "bodyText": "I think it actualy makes more sense to keep the Impl class as Serializable. not the interface.", "author": "cristianonicolai", "createdAt": "2020-05-27T14:30:21Z", "path": "drools/drools-core/src/main/java/org/drools/core/process/instance/impl/WorkItemImpl.java", "diffHunk": "@@ -26,15 +25,15 @@\n import org.kie.api.runtime.process.NodeInstance;\n import org.kie.api.runtime.process.ProcessInstance;\n \n-public class WorkItemImpl implements WorkItem, Serializable {\n+public class WorkItemImpl implements WorkItem {", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MDU0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431250542", "bodyText": "All WorkItem implementations must be Serializable so why not just moving it to the interface? Why do you think it makes more sense to have it in the Class?", "author": "ruromero", "createdAt": "2020-05-27T15:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3ODQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NzM1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431267358", "bodyText": "why does every work item must be serializable?", "author": "mswiderski", "createdAt": "2020-05-27T16:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3ODQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/drools/drools-core/src/main/java/org/drools/core/process/instance/impl/WorkItemImpl.java b/drools/drools-core/src/main/java/org/drools/core/process/instance/impl/WorkItemImpl.java\nindex fdda1c776e..cac37604c4 100755\n--- a/drools/drools-core/src/main/java/org/drools/core/process/instance/impl/WorkItemImpl.java\n+++ b/drools/drools-core/src/main/java/org/drools/core/process/instance/impl/WorkItemImpl.java\n\n@@ -25,7 +26,7 @@ import org.drools.core.process.instance.WorkItem;\n import org.kie.api.runtime.process.NodeInstance;\n import org.kie.api.runtime.process.ProcessInstance;\n \n-public class WorkItemImpl implements WorkItem {\n+public class WorkItemImpl implements WorkItem, Serializable {\n \n     private static final long serialVersionUID = 510l;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4MzU3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431183576", "bodyText": "Formatting is really strange is this class, if you can review that in the PR I think would be a nice improvement.", "author": "cristianonicolai", "createdAt": "2020-05-27T14:33:57Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java", "diffHunk": "@@ -20,13 +20,10 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.jbpm.process.core.datatype.impl.type.ObjectDataType;\n import org.jbpm.process.core.Context;\n import org.jbpm.process.core.context.AbstractContext;\n+import org.jbpm.process.core.datatype.impl.type.ObjectDataType;\n \n-/**\n- * \n- */\n public class VariableScope extends AbstractContext {", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MTk3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431251976", "bodyText": "Sure, I usually try to avoid too many formatting changes to reduce the \"noise\". I will re-format this file.", "author": "ruromero", "createdAt": "2020-05-27T15:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4MzU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5NzI4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431597284", "bodyText": "yeah, I agree to that, but it was little strange to review actually.", "author": "cristianonicolai", "createdAt": "2020-05-28T05:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4MzU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMjU2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r432302561", "bodyText": "done", "author": "ruromero", "createdAt": "2020-05-29T07:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4MzU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\nindex afb42206b5..47f0ce38c6 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\n\n@@ -22,60 +22,48 @@ import java.util.List;\n \n import org.jbpm.process.core.Context;\n import org.jbpm.process.core.context.AbstractContext;\n-import org.jbpm.process.core.datatype.impl.type.ObjectDataType;\n \n public class VariableScope extends AbstractContext {\n-\t\n-\tprivate static boolean variableStrictEnabled = Boolean.parseBoolean(System.getProperty(\"org.jbpm.variable.strict\", \"false\"));\n+\n+    private static boolean variableStrictEnabled = Boolean.parseBoolean(System.getProperty(\"org.jbpm.variable.strict\", \"false\"));\n \n     public static final String VARIABLE_SCOPE = \"VariableScope\";\n-    public static final String CASE_FILE_PREFIX = \"caseFile_\";\n \n-    \n     private static final long serialVersionUID = 510l;\n-    \n+\n     private List<Variable> variables;\n-    \n+\n     public VariableScope() {\n         this.variables = new ArrayList<>();\n     }\n-    \n+\n     public String getType() {\n         return VariableScope.VARIABLE_SCOPE;\n     }\n-    \n+\n     public List<Variable> getVariables() {\n         return this.variables;\n     }\n \n     public void setVariables(final List<Variable> variables) {\n-        if ( variables == null ) {\n-            throw new IllegalArgumentException( \"Variables is null\" );\n+        if (variables == null) {\n+            throw new IllegalArgumentException(\"Variables is null\");\n         }\n         this.variables = variables;\n     }\n \n     public String[] getVariableNames() {\n-        final String[] result = new String[this.variables.size()];\n-        for ( int i = 0; i < this.variables.size(); i++ ) {\n-            result[i] = this.variables.get(i).getName();\n-        }\n-        return result;\n+        return variables.stream()\n+                .map(Variable::getName)\n+                .toArray(String[]::new);\n     }\n \n     public Variable findVariable(String variableName) {\n-        for (Variable variable: getVariables()) {\n+        for (Variable variable : getVariables()) {\n             if (variable.getName().equals(variableName)) {\n                 return variable;\n             }\n         }\n-        if (variableName.startsWith(CASE_FILE_PREFIX) && variableName.contains(\".\")) {\n-            Variable caseVariable = new Variable();\n-            caseVariable.setName(CASE_FILE_PREFIX+variableName);\n-            caseVariable.setType(new ObjectDataType());\n-            return caseVariable;\n-        }\n-        \n         return null;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NzcyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431187723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String[] result = new String[this.variables.size()];\n          \n          \n            \n                    return variables.stream().map(v -> v.getName()).toArray(String[]::new);", "author": "cristianonicolai", "createdAt": "2020-05-27T14:37:46Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java", "diffHunk": "@@ -60,10 +57,8 @@ public void setVariables(final List<Variable> variables) {\n \n     public String[] getVariableNames() {\n         final String[] result = new String[this.variables.size()];", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\nindex afb42206b5..47f0ce38c6 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\n\n@@ -22,60 +22,48 @@ import java.util.List;\n \n import org.jbpm.process.core.Context;\n import org.jbpm.process.core.context.AbstractContext;\n-import org.jbpm.process.core.datatype.impl.type.ObjectDataType;\n \n public class VariableScope extends AbstractContext {\n-\t\n-\tprivate static boolean variableStrictEnabled = Boolean.parseBoolean(System.getProperty(\"org.jbpm.variable.strict\", \"false\"));\n+\n+    private static boolean variableStrictEnabled = Boolean.parseBoolean(System.getProperty(\"org.jbpm.variable.strict\", \"false\"));\n \n     public static final String VARIABLE_SCOPE = \"VariableScope\";\n-    public static final String CASE_FILE_PREFIX = \"caseFile_\";\n \n-    \n     private static final long serialVersionUID = 510l;\n-    \n+\n     private List<Variable> variables;\n-    \n+\n     public VariableScope() {\n         this.variables = new ArrayList<>();\n     }\n-    \n+\n     public String getType() {\n         return VariableScope.VARIABLE_SCOPE;\n     }\n-    \n+\n     public List<Variable> getVariables() {\n         return this.variables;\n     }\n \n     public void setVariables(final List<Variable> variables) {\n-        if ( variables == null ) {\n-            throw new IllegalArgumentException( \"Variables is null\" );\n+        if (variables == null) {\n+            throw new IllegalArgumentException(\"Variables is null\");\n         }\n         this.variables = variables;\n     }\n \n     public String[] getVariableNames() {\n-        final String[] result = new String[this.variables.size()];\n-        for ( int i = 0; i < this.variables.size(); i++ ) {\n-            result[i] = this.variables.get(i).getName();\n-        }\n-        return result;\n+        return variables.stream()\n+                .map(Variable::getName)\n+                .toArray(String[]::new);\n     }\n \n     public Variable findVariable(String variableName) {\n-        for (Variable variable: getVariables()) {\n+        for (Variable variable : getVariables()) {\n             if (variable.getName().equals(variableName)) {\n                 return variable;\n             }\n         }\n-        if (variableName.startsWith(CASE_FILE_PREFIX) && variableName.contains(\".\")) {\n-            Variable caseVariable = new Variable();\n-            caseVariable.setName(CASE_FILE_PREFIX+variableName);\n-            caseVariable.setType(new ObjectDataType());\n-            return caseVariable;\n-        }\n-        \n         return null;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODkyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431188921", "bodyText": "isnt the opposite logic? if does not contains a . ?", "author": "cristianonicolai", "createdAt": "2020-05-27T14:39:11Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java", "diffHunk": "@@ -74,7 +69,7 @@ public Variable findVariable(String variableName) {\n                 return variable;\n             }\n         }\n-        if (variableName.startsWith(CASE_FILE_PREFIX) && variableName.indexOf(\".\") == -1) {\n+        if (variableName.startsWith(CASE_FILE_PREFIX) && variableName.contains(\".\")) {", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2ODEwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431268105", "bodyText": "what is the reason to introduce case file prefix in Kogito?", "author": "mswiderski", "createdAt": "2020-05-27T16:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODkyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2ODkxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431268911", "bodyText": "Yes", "author": "ruromero", "createdAt": "2020-05-27T16:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODkyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMTMxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431411319", "bodyText": "what is the reason to introduce case file prefix in Kogito?\n\nThis is not new, it was already there. Maybe the question is should this be removed?", "author": "ruromero", "createdAt": "2020-05-27T20:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODkyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5ODAzNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431598036", "bodyText": "yeah case file prefix inst something that we would be using in Kogito", "author": "cristianonicolai", "createdAt": "2020-05-28T05:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODkyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNjQwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431616407", "bodyText": "Removing, then", "author": "ruromero", "createdAt": "2020-05-28T06:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\nindex afb42206b5..47f0ce38c6 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\n\n@@ -22,60 +22,48 @@ import java.util.List;\n \n import org.jbpm.process.core.Context;\n import org.jbpm.process.core.context.AbstractContext;\n-import org.jbpm.process.core.datatype.impl.type.ObjectDataType;\n \n public class VariableScope extends AbstractContext {\n-\t\n-\tprivate static boolean variableStrictEnabled = Boolean.parseBoolean(System.getProperty(\"org.jbpm.variable.strict\", \"false\"));\n+\n+    private static boolean variableStrictEnabled = Boolean.parseBoolean(System.getProperty(\"org.jbpm.variable.strict\", \"false\"));\n \n     public static final String VARIABLE_SCOPE = \"VariableScope\";\n-    public static final String CASE_FILE_PREFIX = \"caseFile_\";\n \n-    \n     private static final long serialVersionUID = 510l;\n-    \n+\n     private List<Variable> variables;\n-    \n+\n     public VariableScope() {\n         this.variables = new ArrayList<>();\n     }\n-    \n+\n     public String getType() {\n         return VariableScope.VARIABLE_SCOPE;\n     }\n-    \n+\n     public List<Variable> getVariables() {\n         return this.variables;\n     }\n \n     public void setVariables(final List<Variable> variables) {\n-        if ( variables == null ) {\n-            throw new IllegalArgumentException( \"Variables is null\" );\n+        if (variables == null) {\n+            throw new IllegalArgumentException(\"Variables is null\");\n         }\n         this.variables = variables;\n     }\n \n     public String[] getVariableNames() {\n-        final String[] result = new String[this.variables.size()];\n-        for ( int i = 0; i < this.variables.size(); i++ ) {\n-            result[i] = this.variables.get(i).getName();\n-        }\n-        return result;\n+        return variables.stream()\n+                .map(Variable::getName)\n+                .toArray(String[]::new);\n     }\n \n     public Variable findVariable(String variableName) {\n-        for (Variable variable: getVariables()) {\n+        for (Variable variable : getVariables()) {\n             if (variable.getName().equals(variableName)) {\n                 return variable;\n             }\n         }\n-        if (variableName.startsWith(CASE_FILE_PREFIX) && variableName.contains(\".\")) {\n-            Variable caseVariable = new Variable();\n-            caseVariable.setName(CASE_FILE_PREFIX+variableName);\n-            caseVariable.setType(new ObjectDataType());\n-            return caseVariable;\n-        }\n-        \n         return null;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4OTQ0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431189442", "bodyText": "again, not sure an interface is a right place for Serializable", "author": "cristianonicolai", "createdAt": "2020-05-27T14:39:52Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ContextInstance.java", "diffHunk": "@@ -16,21 +16,20 @@\n \n package org.jbpm.process.instance;\n \n+import java.io.Serializable;\n+\n import org.jbpm.process.core.Context;\n \n-/**\n- * \n- */\n-public interface ContextInstance {\n-    \n+public interface ContextInstance extends Serializable {", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a0eac9071565a443dd9fff0fe2c3ed1c5e3f46c", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ContextInstance.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ContextInstance.java\nindex 0860f9be88..4427ffab9b 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ContextInstance.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ContextInstance.java\n\n@@ -16,11 +16,9 @@\n \n package org.jbpm.process.instance;\n \n-import java.io.Serializable;\n-\n import org.jbpm.process.core.Context;\n \n-public interface ContextInstance extends Serializable {\n+public interface ContextInstance {\n \n     String getContextType();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MjQzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431192432", "bodyText": "any specific need to change these inner classes into static?", "author": "cristianonicolai", "createdAt": "2020-05-27T14:43:54Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java", "diffHunk": "@@ -253,7 +251,7 @@ public void retryWorkItem( String workItemID, Map<String, Object> params ) {\n         \n     }\n     \n-    private class TransitionToActive implements Transition<Void> {\n+    private static class TransitionToActive implements Transition<Void> {", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3Mzg1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431273858", "bodyText": "non-static nested classes keep the reference to the parent object which is not needed in this case", "author": "ruromero", "createdAt": "2020-05-27T16:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MjQzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxMjMwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431212307", "bodyText": "if you change the getNodes method to return a types version, then this map is unnecessay:\nprivate <T extends Node> Stream<T> getNodes(Class<T> nodeClass) {\n        if (!(legacyProcessInstance instanceof RuleFlowProcessInstance)) {\n            return Stream.empty();\n        }\n        RuleFlowProcessInstance processInstance = ((RuleFlowProcessInstance) legacyProcessInstance);\n        return Arrays.stream(processInstance.getNodeContainer().getNodes()).filter(nodeClass::isInstance).map(n -> (T)n);\n    }", "author": "cristianonicolai", "createdAt": "2020-05-27T15:04:13Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -381,13 +385,37 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n     @Override\n     public Collection<Milestone> milestones() {\n         return getNodes(MilestoneNode.class)\n+                .map(MilestoneNode.class::cast)", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMTcwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431611706", "bodyText": "nice suggestion", "author": "ruromero", "createdAt": "2020-05-28T06:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxMjMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMjE4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431702187", "bodyText": "Wouldn't it be enough to cast to WorkflowProcessInstance instead of RuleFlowProcessInstance?", "author": "mswiderski", "createdAt": "2020-05-28T09:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxMjMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMzIyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r432013223", "bodyText": "in fact, it could be NodeInstanceContainer", "author": "tiagodolphine", "createdAt": "2020-05-28T17:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxMjMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\nindex 51d092c810..f69b23db70 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n\n@@ -384,8 +389,7 @@ public abstract class AbstractProcessInstance<T extends Model> implements Proces\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(MilestoneNode.class)\n-                .map(MilestoneNode.class::cast)\n+        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n                 .map(n -> {\n                     String uid = (String) n.getMetaData().get(UNIQUE_ID);\n                     return new Milestone(uid, n.getName(), getStatus(uid), n.getConstraint());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNDA2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431214062", "bodyText": "how about adhoc nodes that are not inside of stages, should we also expose it here?", "author": "cristianonicolai", "createdAt": "2020-05-27T15:06:34Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -381,13 +385,37 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n     @Override\n     public Collection<Milestone> milestones() {\n         return getNodes(MilestoneNode.class)\n+                .map(MilestoneNode.class::cast)\n                 .map(n -> {\n                     String uid = (String) n.getMetaData().get(UNIQUE_ID);\n-                    return new Milestone(uid, n.getName(), getStatus(uid));\n+                    return new Milestone(uid, n.getName(), getStatus(uid), n.getConstraint());\n                 })\n                 .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Collection<Stage> stages() {\n+        return getNodes(DynamicNode.class)\n+                .map(DynamicNode.class::cast)\n+                .map(n -> {\n+                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n+                    Stage.Builder builder = new Stage.Builder(uid)\n+                            .withName(n.getName())\n+                            .withStatus(getStatus(uid))\n+                            .withActivationExpression(n.getActivationExpression())\n+                    .withCompletionExpression(n.getCompletionExpression()).withAutoComplete(n.isAutoComplete());\n+                    getAdHocNodes(n).forEach(builder::withFragment);\n+                    return builder.build();\n+                })\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Stream<Node> getAdHocNodes(DynamicNode node) {", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxNTAwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431815005", "bodyText": "Yes", "author": "ruromero", "createdAt": "2020-05-28T12:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNDA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\nindex 51d092c810..f69b23db70 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n\n@@ -384,8 +389,7 @@ public abstract class AbstractProcessInstance<T extends Model> implements Proces\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(MilestoneNode.class)\n-                .map(MilestoneNode.class::cast)\n+        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n                 .map(n -> {\n                     String uid = (String) n.getMetaData().get(UNIQUE_ID);\n                     return new Milestone(uid, n.getName(), getStatus(uid), n.getConstraint());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNDc0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431214746", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ProcessInstance<?> processInstance = p.createInstance(m);\n          \n          \n            \n                    ProcessInstance<?> processInstance = p.createInstance(p.createModel());", "author": "cristianonicolai", "createdAt": "2020-05-27T15:07:28Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jbpm.workflow.core.node.ActionNode;\n+import org.jbpm.workflow.core.node.HumanTaskNode;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.casemgmt.AdHocFragment;\n+import org.kie.kogito.process.casemgmt.Stage;\n+import org.kie.kogito.process.workitem.Policy;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.kie.kogito.process.casemgmt.ItemDescription.Status.AVAILABLE;\n+import static org.kie.kogito.process.casemgmt.ItemDescription.Status.COMPLETED;\n+import static org.kie.kogito.process.impl.ProcessTestUtils.assertState;\n+\n+class StageTest extends AbstractCodegenTest {\n+\n+    private Policy<?> securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"role\"));\n+\n+    @Test\n+    void testSimpleAdHoc() throws Exception {\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleAdHoc.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleAdHoc\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+\n+        ProcessInstance<?> processInstance = p.createInstance(m);", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java b/kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\nsimilarity index 57%\nrename from kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java\nrename to kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\nindex 22584a9210..cffefbf0ef 100644\n--- a/kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java\n+++ b/kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\n\n@@ -18,6 +18,7 @@ package org.kie.kogito.process.impl;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxODYyNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431218624", "bodyText": "can we avoid hard coding the node id, I guess that will need update as soon as the file is changed in the editor, it is probably not relevant for the test anyway.", "author": "cristianonicolai", "createdAt": "2020-05-27T15:12:47Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jbpm.workflow.core.node.ActionNode;\n+import org.jbpm.workflow.core.node.HumanTaskNode;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.casemgmt.AdHocFragment;\n+import org.kie.kogito.process.casemgmt.Stage;\n+import org.kie.kogito.process.workitem.Policy;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.kie.kogito.process.casemgmt.ItemDescription.Status.AVAILABLE;\n+import static org.kie.kogito.process.casemgmt.ItemDescription.Status.COMPLETED;\n+import static org.kie.kogito.process.impl.ProcessTestUtils.assertState;\n+\n+class StageTest extends AbstractCodegenTest {\n+\n+    private Policy<?> securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"role\"));\n+\n+    @Test\n+    void testSimpleAdHoc() throws Exception {\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleAdHoc.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleAdHoc\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        HumanTaskNode task = new HumanTaskNode();\n+        task.setName(\"Update driver name\");\n+        Stage expected = new Stage.Builder(\"_866F4F98-8810-42FE-8398-6E7E272523D9\")\n+                .withName(\"Sub-process\")\n+                .withStatus(AVAILABLE)\n+                .withAutoComplete(true)\n+                .withFragment(new HumanTaskNode(), \"Update driver name\")\n+                .build();\n+        Collection<Stage> stages = processInstance.stages();\n+        assertThat(stages.size()).isEqualTo(1);\n+        assertContainsStage(expected, stages);\n+\n+        processInstance.start();\n+        assertState(processInstance, ProcessInstance.STATE_ACTIVE);\n+        assertThat(processInstance.workItems().size()).isEqualTo(1);\n+        WorkItem workItem = processInstance.workItems(securityPolicy).get(0);\n+\n+        Map<String, Object> variables = new HashMap<>();\n+        variables.put(\"updatedName\", \"Paul\");\n+        processInstance.completeWorkItem(workItem.getId(), variables, securityPolicy);\n+\n+        assertThat(((Model) processInstance.variables()).toMap().get(\"driver\")).isEqualTo(\"Paul\");\n+        assertThat(processInstance.workItems().size()).isEqualTo(0);\n+        assertState(processInstance, ProcessInstance.STATE_COMPLETED);\n+        expected = new Stage.Builder(expected).withStatus(COMPLETED).build();\n+        assertContainsStage(expected, processInstance.stages());\n+    }\n+\n+    @Test\n+    void testMultipleAdHoc() throws Exception {\n+        Application app = generateCodeProcessesOnly(\"cases/MultipleAdHoc.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.MultipleAdHoc\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"caseFile_currentStage\", 0);\n+        m.fromMap(parameters);\n+\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+        Collection<Stage> stages = processInstance.stages();\n+        assertThat(stages.size()).isEqualTo(3);\n+        ActionNode task = new ActionNode();\n+        task.setName(\"Task1\");\n+        Collection<Stage> expected = buildExpectedMultipleAdHoc();\n+        expected.forEach(eStage -> assertContainsStage(eStage, processInstance.stages()));\n+        processInstance.start();\n+\n+        assertThat(((Model) processInstance.variables()).toMap().get(\"caseFile_currentStage\")).isEqualTo(3);\n+        assertThat(processInstance.workItems().size()).isEqualTo(0);\n+        assertState(processInstance, ProcessInstance.STATE_COMPLETED);\n+        expected = expected.stream().map(s -> new Stage.Builder(s).withStatus(COMPLETED).build()).collect(Collectors.toList());\n+        expected.forEach(eStage -> assertContainsStage(eStage, processInstance.stages()));\n+    }\n+\n+    private Collection<Stage> buildExpectedMultipleAdHoc() {\n+        Collection<Stage> expected = new ArrayList<>();\n+        expected.add(new Stage.Builder(\"_4A154E74-F085-4ECA-93F1-DE452E624FB1\").withName(\"Stage 1\").withStatus(AVAILABLE).withAutoComplete(true).withFragment(new ActionNode(), \"Task1\").build());", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMDc3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431410773", "bodyText": "I'll look into it. Makes sense", "author": "ruromero", "createdAt": "2020-05-27T20:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxODYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java b/kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\nsimilarity index 57%\nrename from kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java\nrename to kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\nindex 22584a9210..cffefbf0ef 100644\n--- a/kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java\n+++ b/kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\n\n@@ -18,6 +18,7 @@ package org.kie.kogito.process.impl;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIyMDE3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431220177", "bodyText": "based on what we discussed, shouldnt this handling of case file be avoided, so we can look into that shared scope approach?", "author": "cristianonicolai", "createdAt": "2020-05-27T15:14:42Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jbpm.workflow.core.node.ActionNode;\n+import org.jbpm.workflow.core.node.HumanTaskNode;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.casemgmt.AdHocFragment;\n+import org.kie.kogito.process.casemgmt.Stage;\n+import org.kie.kogito.process.workitem.Policy;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.kie.kogito.process.casemgmt.ItemDescription.Status.AVAILABLE;\n+import static org.kie.kogito.process.casemgmt.ItemDescription.Status.COMPLETED;\n+import static org.kie.kogito.process.impl.ProcessTestUtils.assertState;\n+\n+class StageTest extends AbstractCodegenTest {\n+\n+    private Policy<?> securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"role\"));\n+\n+    @Test\n+    void testSimpleAdHoc() throws Exception {\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleAdHoc.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleAdHoc\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        HumanTaskNode task = new HumanTaskNode();\n+        task.setName(\"Update driver name\");\n+        Stage expected = new Stage.Builder(\"_866F4F98-8810-42FE-8398-6E7E272523D9\")\n+                .withName(\"Sub-process\")\n+                .withStatus(AVAILABLE)\n+                .withAutoComplete(true)\n+                .withFragment(new HumanTaskNode(), \"Update driver name\")\n+                .build();\n+        Collection<Stage> stages = processInstance.stages();\n+        assertThat(stages.size()).isEqualTo(1);\n+        assertContainsStage(expected, stages);\n+\n+        processInstance.start();\n+        assertState(processInstance, ProcessInstance.STATE_ACTIVE);\n+        assertThat(processInstance.workItems().size()).isEqualTo(1);\n+        WorkItem workItem = processInstance.workItems(securityPolicy).get(0);\n+\n+        Map<String, Object> variables = new HashMap<>();\n+        variables.put(\"updatedName\", \"Paul\");\n+        processInstance.completeWorkItem(workItem.getId(), variables, securityPolicy);\n+\n+        assertThat(((Model) processInstance.variables()).toMap().get(\"driver\")).isEqualTo(\"Paul\");\n+        assertThat(processInstance.workItems().size()).isEqualTo(0);\n+        assertState(processInstance, ProcessInstance.STATE_COMPLETED);\n+        expected = new Stage.Builder(expected).withStatus(COMPLETED).build();\n+        assertContainsStage(expected, processInstance.stages());\n+    }\n+\n+    @Test\n+    void testMultipleAdHoc() throws Exception {\n+        Application app = generateCodeProcessesOnly(\"cases/MultipleAdHoc.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.MultipleAdHoc\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"caseFile_currentStage\", 0);\n+        m.fromMap(parameters);\n+\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+        Collection<Stage> stages = processInstance.stages();\n+        assertThat(stages.size()).isEqualTo(3);\n+        ActionNode task = new ActionNode();\n+        task.setName(\"Task1\");\n+        Collection<Stage> expected = buildExpectedMultipleAdHoc();\n+        expected.forEach(eStage -> assertContainsStage(eStage, processInstance.stages()));\n+        processInstance.start();\n+\n+        assertThat(((Model) processInstance.variables()).toMap().get(\"caseFile_currentStage\")).isEqualTo(3);\n+        assertThat(processInstance.workItems().size()).isEqualTo(0);\n+        assertState(processInstance, ProcessInstance.STATE_COMPLETED);\n+        expected = expected.stream().map(s -> new Stage.Builder(s).withStatus(COMPLETED).build()).collect(Collectors.toList());\n+        expected.forEach(eStage -> assertContainsStage(eStage, processInstance.stages()));\n+    }\n+\n+    private Collection<Stage> buildExpectedMultipleAdHoc() {\n+        Collection<Stage> expected = new ArrayList<>();\n+        expected.add(new Stage.Builder(\"_4A154E74-F085-4ECA-93F1-DE452E624FB1\").withName(\"Stage 1\").withStatus(AVAILABLE).withAutoComplete(true).withFragment(new ActionNode(), \"Task1\").build());\n+        expected.add(new Stage.Builder(\"_168F4098-8ACA-4E81-9F97-5EAAC0782574\").withName(\"Stage 2\").withStatus(AVAILABLE).withAutoComplete(true).withFragment(new ActionNode(), \"Task2\").build());\n+        expected.add(new Stage.Builder(\"_E2F977AC-205A-4314-A406-00CEA619CDF9\").withName(\"Stage 3\").withStatus(AVAILABLE).withAutoComplete(true).withFragment(new ActionNode(), \"Task3\").build());\n+        return expected;\n+    }\n+\n+    @Test\n+    void testCaseFile() throws Exception {", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzUwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r432377506", "bodyText": "I will remove it for now until we implement the shared variables", "author": "ruromero", "createdAt": "2020-05-29T09:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIyMDE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java b/kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\nsimilarity index 57%\nrename from kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java\nrename to kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\nindex 22584a9210..cffefbf0ef 100644\n--- a/kogito-codegen/src/test/java/org/kie/kogito/process/impl/StageTest.java\n+++ b/kogito-codegen/src/test/java/org/kie/kogito/process/impl/SubProcessTest.java\n\n@@ -18,6 +18,7 @@ package org.kie.kogito.process.impl;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MTY0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431271643", "bodyText": "wouldn't it make more sense to either\n\nuse new sub class for case related methods\nuse more process related names instead\n\nmixing these two concepts can become really confusing...", "author": "mswiderski", "createdAt": "2020-05-27T16:18:43Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -172,4 +173,10 @@\n      * @return All the process milestones with their current status\n      */\n     Collection<Milestone> milestones();\n+\n+    /**\n+     * Returns the process stages\n+     * @return All the process stages with their current status\n+     */\n+    Collection<Stage> stages();", "originalCommit": "7e6d6a7e6914f10b39cb04f07df2051633ef2126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMDQ0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431410444", "bodyText": "This is a behaviour that is already implicit in a process so sub-classing wouldn't make much sense to me. I am in favour of renaming stages for something else. Any suggestion?", "author": "ruromero", "createdAt": "2020-05-27T20:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMjg3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r431702877", "bodyText": "stage is actually a subprocess, why not having this as such? If needed you can narrow it down to only ad hoc subprocesses all all...", "author": "mswiderski", "createdAt": "2020-05-28T09:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MTY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "68b1e38913a46746e5f4240979e51aa202080a3c", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java b/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\nindex 87813694e6..c7ab7b705e 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\n\n@@ -170,13 +187,22 @@ public interface ProcessInstance<T> {\n \n     /**\n      * Returns the process milestones\n+     *\n      * @return All the process milestones with their current status\n      */\n     Collection<Milestone> milestones();\n \n     /**\n-     * Returns the process stages\n-     * @return All the process stages with their current status\n+     * Returns the AdHocSubProcesses in the proces\n+     *\n+     * @return All the process {@link SubProcess} with their current status\n+     */\n+    Collection<SubProcess> subProcesses();\n+\n+    /**\n+     * Returns the process adHocFragments\n+     *\n+     * @return All the {@link AdHocFragment} in the process\n      */\n-    Collection<Stage> stages();\n+    Collection<AdHocFragment> getAdHocFragments();\n }\n"}}, {"oid": "68b1e38913a46746e5f4240979e51aa202080a3c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/68b1e38913a46746e5f4240979e51aa202080a3c", "message": "[KOGITO-1968] Generalize to subProcesses\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-29T07:30:16Z", "type": "forcePushed"}, {"oid": "1a0eac9071565a443dd9fff0fe2c3ed1c5e3f46c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1a0eac9071565a443dd9fff0fe2c3ed1c5e3f46c", "message": "[KOGITO-1968] Generalize to subProcesses\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-29T09:37:01Z", "type": "forcePushed"}, {"oid": "aac316c38f44d3e003ed05ed1ef2d90bbab3dbd8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/aac316c38f44d3e003ed05ed1ef2d90bbab3dbd8", "message": "[KOGITO-1968] Generalize to subProcesses\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-29T09:55:23Z", "type": "forcePushed"}, {"oid": "599ed8478376f8b49d545708045bacbd4d6371d5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/599ed8478376f8b49d545708045bacbd4d6371d5", "message": "[KOGITO-1968] Generalize to subProcesses\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-29T10:46:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNTM2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r432425364", "bodyText": "Does it return only Adhoc subprocesses or any subprocesses?", "author": "tiagodolphine", "createdAt": "2020-05-29T11:35:03Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -169,7 +187,22 @@\n \n     /**\n      * Returns the process milestones\n+     *\n      * @return All the process milestones with their current status\n      */\n     Collection<Milestone> milestones();\n+\n+    /**\n+     * Returns the AdHocSubProcesses in the proces", "originalCommit": "599ed8478376f8b49d545708045bacbd4d6371d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0MTkwMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r432441903", "bodyText": "Refactoring leftover, thanks", "author": "ruromero", "createdAt": "2020-05-29T12:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNTM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "571d23b2d328e74df13514764fc852f10241b991", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java b/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\nindex c7ab7b705e..2ce90e56bb 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\n\n@@ -192,17 +191,10 @@ public interface ProcessInstance<T> {\n      */\n     Collection<Milestone> milestones();\n \n-    /**\n-     * Returns the AdHocSubProcesses in the proces\n-     *\n-     * @return All the process {@link SubProcess} with their current status\n-     */\n-    Collection<SubProcess> subProcesses();\n-\n     /**\n      * Returns the process adHocFragments\n      *\n      * @return All the {@link AdHocFragment} in the process\n      */\n-    Collection<AdHocFragment> getAdHocFragments();\n+    Collection<AdHocFragment> adHocFragments();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjkwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r432426906", "bodyText": "Should we name it Subprocess or AdhocSubprocess?", "author": "tiagodolphine", "createdAt": "2020-05-29T11:38:31Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/casemgmt/SubProcess.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.casemgmt;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+public class SubProcess extends ItemDescription {", "originalCommit": "599ed8478376f8b49d545708045bacbd4d6371d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0MjA0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r432442047", "bodyText": "AdHocSubProcesses are a specific type of SubProcesses", "author": "ruromero", "createdAt": "2020-05-29T12:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "571d23b2d328e74df13514764fc852f10241b991", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/process/casemgmt/SubProcess.java b/api/kogito-api/src/main/java/org/kie/kogito/process/casemgmt/SubProcess.java\ndeleted file mode 100644\nindex ef4ba8ce29..0000000000\n--- a/api/kogito-api/src/main/java/org/kie/kogito/process/casemgmt/SubProcess.java\n+++ /dev/null\n\n@@ -1,92 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.process.casemgmt;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-public class SubProcess extends ItemDescription {\n-\n-    private final Boolean autoComplete;\n-    private final Collection<AdHocFragment> adHocFragments;\n-\n-    SubProcess(String id, String name, Status status, Boolean autoComplete, Collection<AdHocFragment> adHocFragments) {\n-        super(id, name, status);\n-        this.autoComplete = autoComplete;\n-        this.adHocFragments = adHocFragments;\n-    }\n-\n-    public Boolean getAutoComplete() {\n-        return autoComplete;\n-    }\n-\n-    public Collection<AdHocFragment> getAdHocFragments() {\n-        return adHocFragments;\n-    }\n-\n-    public static class Builder {\n-        String id;\n-        String name;\n-        Status status;\n-        Boolean autoComplete;\n-        Collection<AdHocFragment> fragments;\n-\n-        public Builder(String id) {\n-            this.id = id;\n-        }\n-\n-        public Builder(SubProcess subProcess) {\n-            this.id = subProcess.getId();\n-            this.name = subProcess.getName();\n-            this.status = subProcess.getStatus();\n-            this.autoComplete = subProcess.getAutoComplete();\n-            this.fragments = subProcess.getAdHocFragments();\n-        }\n-\n-        public Builder withName(String name) {\n-            this.name = name;\n-            return this;\n-        }\n-\n-        public Builder withStatus(Status status) {\n-            this.status = status;\n-            return this;\n-        }\n-\n-        public Builder withAutoComplete(Boolean autoComplete) {\n-            this.autoComplete = autoComplete;\n-            return this;\n-        }\n-\n-        public Builder withFragment(AdHocFragment fragment) {\n-            if (this.fragments == null) {\n-                this.fragments = new ArrayList<>();\n-            }\n-            this.fragments.add(fragment);\n-            return this;\n-        }\n-\n-        public Builder withFragments(Collection<AdHocFragment> fragments) {\n-            this.fragments = fragments;\n-            return this;\n-        }\n-\n-        public SubProcess build() {\n-            return new SubProcess(id, name, status, autoComplete, fragments);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyODM1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r432428358", "bodyText": "why not just setting the system property on the tests?", "author": "tiagodolphine", "createdAt": "2020-05-29T11:42:03Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java", "diffHunk": "@@ -89,36 +72,36 @@ public Context resolveContext(Object param) {\n             return findVariable((String) param) == null ? null : this;\n         }\n         throw new IllegalArgumentException(\n-            \"VariableScopes can only resolve variable names: \" + param);\n+                \"VariableScopes can only resolve variable names: \" + param);\n+    }\n+\n+    public void validateVariable(String processName, String name, Object value) {\n+        if (!variableStrictEnabled) {\n+            return;\n+        }\n+        Variable var = findVariable(name);\n+        if (var == null) {\n+            throw new IllegalArgumentException(\"Variable '\" + name + \"' is not defined in process \" + processName);\n+        }\n+        if (var.getType() != null && value != null) {\n+            boolean isValidType = var.getType().verifyDataType(value);\n+            if (!isValidType) {\n+                throw new IllegalArgumentException(\"Variable '\" + name + \"' has incorrect data type expected:\"\n+                        + var.getType().getStringType() + \" actual:\" + value.getClass().getName());\n+            }\n+        }\n+    }\n+\n+    /*\n+     * mainly for test coverage to easily switch between settings\n+     */\n+    public static void setVariableStrictOption(boolean turnedOn) {", "originalCommit": "599ed8478376f8b49d545708045bacbd4d6371d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTYxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r433015619", "bodyText": "@ruromero why not simply use the system property instead?", "author": "cristianonicolai", "createdAt": "2020-06-01T02:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyODM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExOTQ4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r433119484", "bodyText": "just formatting old code, nevermind @ruromero", "author": "cristianonicolai", "createdAt": "2020-06-01T08:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyODM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NzI4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r433157288", "bodyText": "I couldn't just disappoint you but I didn't change everything or else tests would go crazy", "author": "ruromero", "createdAt": "2020-06-01T10:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyODM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "571d23b2d328e74df13514764fc852f10241b991", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\nindex 47f0ce38c6..154410bb03 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableScope.java\n\n@@ -99,6 +100,10 @@ public class VariableScope extends AbstractContext {\n         variableStrictEnabled = turnedOn;\n     }\n \n+    public static boolean isVariableStrictEnabled() {\n+        return variableStrictEnabled;\n+    }\n+\n     public boolean isReadOnly(String name) {\n         Variable v = findVariable(name);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNDk2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/507#discussion_r433014967", "bodyText": "I think to align with the other methods naming we would call this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Collection<AdHocFragment> getAdHocFragments();\n          \n          \n            \n                Collection<AdHocFragment> adHocFragments();", "author": "cristianonicolai", "createdAt": "2020-06-01T02:11:26Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -169,7 +187,22 @@\n \n     /**\n      * Returns the process milestones\n+     *\n      * @return All the process milestones with their current status\n      */\n     Collection<Milestone> milestones();\n+\n+    /**\n+     * Returns the SubProcesses in the process\n+     *\n+     * @return All the process {@link SubProcess} with their current status\n+     */\n+    Collection<SubProcess> subProcesses();\n+\n+    /**\n+     * Returns the process adHocFragments\n+     *\n+     * @return All the {@link AdHocFragment} in the process\n+     */\n+    Collection<AdHocFragment> getAdHocFragments();", "originalCommit": "2e4882e8a48e719e77fe67594df51b94a2cbef3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "571d23b2d328e74df13514764fc852f10241b991", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java b/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\nindex 69bd1afd1b..2ce90e56bb 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java\n\n@@ -192,17 +191,10 @@ public interface ProcessInstance<T> {\n      */\n     Collection<Milestone> milestones();\n \n-    /**\n-     * Returns the SubProcesses in the process\n-     *\n-     * @return All the process {@link SubProcess} with their current status\n-     */\n-    Collection<SubProcess> subProcesses();\n-\n     /**\n      * Returns the process adHocFragments\n      *\n      * @return All the {@link AdHocFragment} in the process\n      */\n-    Collection<AdHocFragment> getAdHocFragments();\n+    Collection<AdHocFragment> adHocFragments();\n }\n"}}, {"oid": "571d23b2d328e74df13514764fc852f10241b991", "url": "https://github.com/kiegroup/kogito-runtimes/commit/571d23b2d328e74df13514764fc852f10241b991", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-06-02T05:49:52Z", "type": "commit"}, {"oid": "571d23b2d328e74df13514764fc852f10241b991", "url": "https://github.com/kiegroup/kogito-runtimes/commit/571d23b2d328e74df13514764fc852f10241b991", "message": "[KOGITO-1968] Implement missing features for DynamicNodes\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-06-02T05:49:52Z", "type": "forcePushed"}]}