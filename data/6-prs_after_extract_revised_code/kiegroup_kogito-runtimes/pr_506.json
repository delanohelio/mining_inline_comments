{"pr_number": 506, "pr_title": "[KOGITO-1768] allow code scaffolding in kogito-maven-plugin", "pr_createdAt": "2020-05-14T08:08:12Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/506", "timeline": [{"oid": "d1e23266574047a4053c77a2350e73997f92abde", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d1e23266574047a4053c77a2350e73997f92abde", "message": "wip", "committedDate": "2020-05-14T08:04:18Z", "type": "commit"}, {"oid": "fd11e10f79f0947f4e2fc63f05d784c6db6a84c3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fd11e10f79f0947f4e2fc63f05d784c6db6a84c3", "message": "wip", "committedDate": "2020-05-14T08:04:18Z", "type": "commit"}, {"oid": "4c083dde75f47c9d1e34052a0c686d0a6181aa19", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4c083dde75f47c9d1e34052a0c686d0a6181aa19", "message": "wip", "committedDate": "2020-05-14T08:04:18Z", "type": "commit"}, {"oid": "61d37c4484f1b129159bdf8046f1a2e91a5139fb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/61d37c4484f1b129159bdf8046f1a2e91a5139fb", "message": "wip", "committedDate": "2020-05-14T08:04:18Z", "type": "commit"}, {"oid": "3fa4b2d28589cf277d397d4921e54e2b7f704abe", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3fa4b2d28589cf277d397d4921e54e2b7f704abe", "message": "[KOGITO-1768] allow code scaffolding in kogito-maven-plugin", "committedDate": "2020-05-14T08:05:15Z", "type": "commit"}, {"oid": "7686cd46cd5e47dd39b9907be4feae48466fe8d3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7686cd46cd5e47dd39b9907be4feae48466fe8d3", "message": "wip", "committedDate": "2020-05-14T08:05:15Z", "type": "commit"}, {"oid": "c59e332b85a7dfa731b8e03c75f32acecfe9299f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c59e332b85a7dfa731b8e03c75f32acecfe9299f", "message": "wip", "committedDate": "2020-05-14T08:05:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3ODQ4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#discussion_r425078488", "bodyText": "this is still using a \"naming convention,\" and I feel it's going to be quite fragile", "author": "evacchi", "createdAt": "2020-05-14T11:53:45Z", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -238,31 +233,46 @@ public void generateModel(ArchiveRootBuildItem root,\n \n     }\n \n-    private void writeResourceFiles(String projectPath, Collection<GeneratedFile> resourceFiles){\n-        resourceFiles.forEach(f -> {\n+    private void writeGeneratedFiles(Path projectPath, Collection<GeneratedFile> resourceFiles) {\n+        String restResourcePath = projectPath.resolve(generatedRestSourcesDir).toString();\n+        String resourcePath = projectPath.resolve(generatedResourcesDir).toString();\n+        String sourcePath = projectPath.resolve(generatedSourcesDir).toString();\n+\n+        for (GeneratedFile f : resourceFiles) {\n             try {\n-                writeGeneratedFile(f, projectPath);\n+                if (f.getType() == GeneratedFile.Type.RESOURCE) {\n+                    writeGeneratedFile(f, resourcePath);\n+                } else if (isCustomizable(f)) {\n+                    writeGeneratedFile(f, restResourcePath);\n+                } else {\n+                    writeGeneratedFile(f, sourcePath);\n+                }\n             } catch (IOException e) {\n-                logger.warn(String.format(\"Could not write resource file %s\", f.toString()), e);\n+                logger.warn(String.format(\"Could not write file '%s'\", f.toString()), e);\n             }\n-        });\n+        }\n     }\n \n+    private boolean isCustomizable(GeneratedFile f) {\n+        return f.relativePath().endsWith(\"Resource.java\")\n+                || (f.relativePath().contains(\"Query\") && f.relativePath().endsWith(\".java\"))\n+                || (f.relativePath().contains(\"DTO\") && f.relativePath().endsWith(\".java\"));\n+    }\n+", "originalCommit": "c59e332b85a7dfa731b8e03c75f32acecfe9299f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "159ba336ddc3058d3a314100e78e521ed9ccb5f1", "chunk": "diff --git a/kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java b/kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java\nindex be3ff18734..69f53f05be 100644\n--- a/kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java\n+++ b/kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java\n\n@@ -242,7 +242,7 @@ public class KogitoAssetsProcessor {\n             try {\n                 if (f.getType() == GeneratedFile.Type.RESOURCE) {\n                     writeGeneratedFile(f, resourcePath);\n-                } else if (isCustomizable(f)) {\n+                } else if (f.getType().isCustomizable()) {\n                     writeGeneratedFile(f, restResourcePath);\n                 } else {\n                     writeGeneratedFile(f, sourcePath);\n"}}, {"oid": "159ba336ddc3058d3a314100e78e521ed9ccb5f1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/159ba336ddc3058d3a314100e78e521ed9ccb5f1", "message": "wip", "committedDate": "2020-05-14T18:11:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMjAwNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#discussion_r426422004", "bodyText": "These checks are really error prone: it is enough to use one of these quarkus-spring artifacts to break it.\nI would suggest to find a better mechanism or at least looks for a more specific artifact. What about quarkus-core for Quarkus and spring-core?", "author": "danielezonca", "createdAt": "2020-05-18T07:33:10Z", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/AbstractKieMojo.java", "diffHunk": "@@ -45,36 +45,39 @@ protected void setSystemProperties(Map<String, String> properties) {\n     }\n \n     protected DependencyInjectionAnnotator discoverDependencyInjectionAnnotator(boolean dependencyInjection, MavenProject project) {\n-        if (!dependencyInjection) {\n-            return null;\n-        }\n-\n-        boolean hasSpring = project.getDependencies().stream().anyMatch(d -> d.getArtifactId().contains(\"spring\"));\n-        if (hasSpring) {\n-            return new SpringDependencyInjectionAnnotator();\n-        }\n+        if (dependencyInjection) {\n+            if ( hasSpring( project ) ) {\n+                return new SpringDependencyInjectionAnnotator();\n+            }\n \n-        boolean hasQuarkus = project.getDependencies().stream().anyMatch(d -> d.getArtifactId().contains(\"quarkus\"));\n-        if (hasQuarkus) {\n-            return new CDIDependencyInjectionAnnotator();\n+            if ( hasQuarkus( project ) ) {\n+                return new CDIDependencyInjectionAnnotator();\n+            }\n         }\n \n-        throw new IllegalStateException(\"Unable to find dependency injection annotator\");\n+        return null;\n     }\n \n     protected KogitoBuildContext discoverKogitoRuntimeContext(MavenProject project)  {\n-        boolean hasSpring = project.getDependencies().stream().anyMatch(d -> d.getArtifactId().contains(\"spring\"));\n-        if (hasSpring) {\n+        if ( hasSpring( project ) ) {\n             return new SpringBootKogitoBuildContext(fqcn -> hasClassOnClasspath(project, fqcn));\n         }\n \n-        boolean hasQuarkus = project.getDependencies().stream().anyMatch(d -> d.getArtifactId().contains(\"quarkus\"));\n-        if (hasQuarkus) {\n+        if ( hasQuarkus( project ) ) {\n             return new QuarkusKogitoBuildContext(fqcn -> hasClassOnClasspath(project, fqcn));\n         }\n-        throw new IllegalStateException(\"Unable to determine Kogito runtime.\");\n+\n+        return null;\n     }\n-    \n+\n+    private boolean hasQuarkus( MavenProject project ) {\n+        return project.getDependencies().stream().anyMatch( d -> d.getArtifactId().contains( \"quarkus\" ) );\n+    }\n+\n+    private boolean hasSpring( MavenProject project ) {\n+        return project.getDependencies().stream().anyMatch( d -> d.getArtifactId().contains( \"spring\" ) );\n+    }", "originalCommit": "159ba336ddc3058d3a314100e78e521ed9ccb5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzMzI4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#discussion_r426433281", "bodyText": "@danielezonca in general taking something that we discussed on Sunday afternoon and putting it in a github review on Monday morning is not fair imo :)\nJokes apart I agree on that and will review it.", "author": "mariofusco", "createdAt": "2020-05-18T07:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMjAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MDUzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#discussion_r426460538", "bodyText": "Actually I told you this same yesterday and now I just added a note to remember it, so I'm safe :P", "author": "danielezonca", "createdAt": "2020-05-18T08:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMjAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ1NDEwNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#discussion_r427454104", "bodyText": "@danielezonca the dependencies through which we are looking for are only the ones directly present in the pom, not the transitive ones. For this reason I'm afraid it is not safe to look for a specific quarkus or spring dependency, because it could be there only transitively and then we wouldn't find it. The only thing I've done is giving higher precedence to quarkus since, as we discussed, it would be much more common for a quarkus project to also have some spring dependencies that the opposite.", "author": "mariofusco", "createdAt": "2020-05-19T16:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMjAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNTQwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#discussion_r427815402", "bodyText": "let's create a JIRA for this. This PR is not doing much new in this regard, except refactoring some code.", "author": "evacchi", "createdAt": "2020-05-20T08:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMjAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "02a1ea26bf9e9f44411123cfbd516d061f36c483", "chunk": "diff --git a/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/AbstractKieMojo.java b/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/AbstractKieMojo.java\nindex 38c2f86fc4..ac043dade1 100644\n--- a/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/AbstractKieMojo.java\n+++ b/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/AbstractKieMojo.java\n\n@@ -46,27 +46,27 @@ public abstract class AbstractKieMojo extends AbstractMojo {\n \n     protected DependencyInjectionAnnotator discoverDependencyInjectionAnnotator(boolean dependencyInjection, MavenProject project) {\n         if (dependencyInjection) {\n-            if ( hasSpring( project ) ) {\n-                return new SpringDependencyInjectionAnnotator();\n-            }\n-\n             if ( hasQuarkus( project ) ) {\n                 return new CDIDependencyInjectionAnnotator();\n             }\n+\n+            if ( hasSpring( project ) ) {\n+                return new SpringDependencyInjectionAnnotator();\n+            }\n         }\n \n         return null;\n     }\n \n     protected KogitoBuildContext discoverKogitoRuntimeContext(MavenProject project)  {\n-        if ( hasSpring( project ) ) {\n-            return new SpringBootKogitoBuildContext(fqcn -> hasClassOnClasspath(project, fqcn));\n-        }\n-\n         if ( hasQuarkus( project ) ) {\n             return new QuarkusKogitoBuildContext(fqcn -> hasClassOnClasspath(project, fqcn));\n         }\n \n+        if ( hasSpring( project ) ) {\n+            return new SpringBootKogitoBuildContext(fqcn -> hasClassOnClasspath(project, fqcn));\n+        }\n+\n         return null;\n     }\n \n"}}, {"oid": "02a1ea26bf9e9f44411123cfbd516d061f36c483", "url": "https://github.com/kiegroup/kogito-runtimes/commit/02a1ea26bf9e9f44411123cfbd516d061f36c483", "message": "wip", "committedDate": "2020-05-19T16:14:47Z", "type": "commit"}, {"oid": "c7f33201d303fa3e1ab5a51f0eeb07ad25fa2147", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c7f33201d303fa3e1ab5a51f0eeb07ad25fa2147", "message": "wip", "committedDate": "2020-05-20T10:11:47Z", "type": "commit"}]}