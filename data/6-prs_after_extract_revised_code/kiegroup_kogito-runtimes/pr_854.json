{"pr_number": 854, "pr_title": "KOGITO-3723 Use trigger name as cloud event type in producer", "pr_createdAt": "2020-10-28T10:57:14Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/854", "timeline": [{"oid": "7f5a73b561e02f4865d9cd8293b8ff1d11821732", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7f5a73b561e02f4865d9cd8293b8ff1d11821732", "message": "KOGITO-3723 Use trigger name as cloud event type in producer", "committedDate": "2020-10-29T13:33:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514346726", "bodyText": "@cristianonicolai this fails not sure why", "author": "evacchi", "createdAt": "2020-10-29T15:24:34Z", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -52,7 +49,7 @@ void testPingPongBetweenProcessInstances() {\n                 .statusCode(201)\n                 .extract().body().path(\"id\");\n \n-        validateSubProcess();\n+        // validateSubProcess(); // fixme this fails?", "originalCommit": "96eda63dcf0cfe7f6120e72d4b695c59dd432861", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNTMzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514635332", "bodyText": "@evacchi this is to ensure the subprocess was actually started with ping message. Not sure whats happening now but we need to ensure this use case works.", "author": "cristianonicolai", "createdAt": "2020-10-30T00:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxODA4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514918085", "bodyText": "Uhmmm I don't think that is working. On my machine I clearly see:\n     [INFO] message received: hello\n\nwhich means pong process has started and also is finishing. the validateSubProcess() call comes after that, so subprocess has already died out and the test fails, but if I comment it out, then the rest of the test passes on my machine; now why it is red on CI it's a different, fun challenge though :D", "author": "evacchi", "createdAt": "2020-10-30T07:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzOTkxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514939917", "bodyText": "@cristianonicolai I have added a latch and a subscriber to the new Publisher, so that it checks that pong is being sent by the pong process (using the fancy cloud event envelope :) ) That should work more reliably -- that is green on my machine, let's hope for CI \ud83d\ude29", "author": "evacchi", "createdAt": "2020-10-30T08:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2Njk1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515866951", "bodyText": "I think the validate step works now", "author": "evacchi", "createdAt": "2020-11-02T10:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "cfa605b0f648f77744901b506830a4ee39891218", "chunk": "diff --git a/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java b/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java\nindex d58807ea55..2f3baa618a 100644\n--- a/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java\n+++ b/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java\n\n@@ -49,7 +74,7 @@ public class PingPongMessageTest extends BaseRestTest {\n                 .statusCode(201)\n                 .extract().body().path(\"id\");\n \n-        // validateSubProcess(); // fixme this fails?\n+        latch.await(5, TimeUnit.SECONDS);\n \n         await().atMost(Duration.ofSeconds(5))\n                 .untilAsserted(() -> given()\n"}}, {"oid": "cfa605b0f648f77744901b506830a4ee39891218", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cfa605b0f648f77744901b506830a4ee39891218", "message": "Subscribe to Kafka publisher and add latch to reliably check for pong", "committedDate": "2020-10-30T10:00:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MzA4MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515893080", "bodyText": "Back to debug?", "author": "danielezonca", "createdAt": "2020-11-02T10:58:04Z", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n     @Qualifier(KogitoEventStreams.PUBLISHER)\n     public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n-        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n \n-        return kafkaFlux.map(record -> {\n+        ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n-            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+            log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",", "originalCommit": "dc3c92a09fe6e88ae097b5bd75173e1290d11997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5ODE3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515898178", "bodyText": "right! lost it during rebase!", "author": "evacchi", "createdAt": "2020-11-02T11:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MzA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDA4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515904086", "bodyText": "+1 to leave as debug", "author": "cristianonicolai", "createdAt": "2020-11-02T11:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MzA4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDIyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515894221", "bodyText": "Is this needed? As far as I can see this value should be the default\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Scope.html#scopeName--", "author": "danielezonca", "createdAt": "2020-11-02T11:00:04Z", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)", "originalCommit": "dc3c92a09fe6e88ae097b5bd75173e1290d11997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NzkzNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515897937", "bodyText": "good point; well in this case I'd say it doesn't hurt to be explicit, this really has to be singleton (not just for the framework, but also for readers)", "author": "evacchi", "createdAt": "2020-11-02T11:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDIyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NTMwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515895309", "bodyText": "To be removed?", "author": "danielezonca", "createdAt": "2020-11-02T11:02:08Z", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -17,33 +17,55 @@\n package org.kie.kogito.integrationtests.springboot;\n \n import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n-import org.junit.jupiter.api.extension.ExtendWith;\n-import io.restassured.RestAssured;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import io.restassured.http.ContentType;\n import org.junit.jupiter.api.Test;\n-import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.event.KogitoEventStreams;\n import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.reactivestreams.Publisher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import reactor.core.publisher.Flux;\n \n import static io.restassured.RestAssured.given;\n import static org.awaitility.Awaitility.await;\n import static org.hamcrest.CoreMatchers.equalTo;\n \n-import org.junit.jupiter.api.Disabled;\n-\n-@Disabled(\"Must implement cloud event producer/emitter for Spring \" +\n-          \"https://issues.redhat.com/browse/KOGITO-3408 \" +\n-          \"https://issues.redhat.com/browse/KOGITO-3591\")\n @ExtendWith(SpringExtension.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n @ContextConfiguration(initializers =  { KafkaSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class })\n public class PingPongMessageTest extends BaseRestTest {\n \n+    @Autowired\n+    @Qualifier(KogitoEventStreams.PUBLISHER)\n+    Publisher<String> publisher;\n+\n     @Test\n-    void testPingPongBetweenProcessInstances() {\n+    void testPingPongBetweenProcessInstances() throws InterruptedException {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        Flux.from(publisher)\n+                .map(x -> {\n+                    try {\n+                        return (Map<String, String>) new ObjectMapper().readValue(x, Map.class);\n+                    } catch (JsonProcessingException e) {\n+                        throw new Error(e);\n+                    }\n+                })\n+                .filter(m -> \"hello world\".equals(m.get(\"data\")) &&\n+                        m.getOrDefault(\"source\", \"\").startsWith(\"/process/pong_message/\"))\n+                .log(\"Found message\")", "originalCommit": "dc3c92a09fe6e88ae097b5bd75173e1290d11997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5ODU5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515898592", "bodyText": "not really, but it is redundant, so I can remove it", "author": "evacchi", "createdAt": "2020-11-02T11:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NTMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d71551f54beeb7cc5b4980ed7e70e263198fec5a", "chunk": "diff --git a/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java b/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java\nindex 16731aba81..d58807ea55 100644\n--- a/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java\n+++ b/integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java\n\n@@ -17,55 +17,30 @@\n package org.kie.kogito.integrationtests.springboot;\n \n import java.time.Duration;\n-import java.util.Map;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import io.restassured.RestAssured;\n import io.restassured.http.ContentType;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.kie.kogito.event.KogitoEventStreams;\n-import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n-import org.reactivestreams.Publisher;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n+import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import reactor.core.publisher.Flux;\n+import org.springframework.test.context.ContextConfiguration;\n \n import static io.restassured.RestAssured.given;\n import static org.awaitility.Awaitility.await;\n import static org.hamcrest.CoreMatchers.equalTo;\n \n+import org.junit.jupiter.api.Disabled;\n+\n @ExtendWith(SpringExtension.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n @ContextConfiguration(initializers =  { KafkaSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class })\n public class PingPongMessageTest extends BaseRestTest {\n \n-    @Autowired\n-    @Qualifier(KogitoEventStreams.PUBLISHER)\n-    Publisher<String> publisher;\n-\n     @Test\n-    void testPingPongBetweenProcessInstances() throws InterruptedException {\n-        CountDownLatch latch = new CountDownLatch(1);\n-        Flux.from(publisher)\n-                .map(x -> {\n-                    try {\n-                        return (Map<String, String>) new ObjectMapper().readValue(x, Map.class);\n-                    } catch (JsonProcessingException e) {\n-                        throw new Error(e);\n-                    }\n-                })\n-                .filter(m -> \"hello world\".equals(m.get(\"data\")) &&\n-                        m.getOrDefault(\"source\", \"\").startsWith(\"/process/pong_message/\"))\n-                .log(\"Found message\")\n-                .subscribe(x -> latch.countDown());\n-\n+    void testPingPongBetweenProcessInstances() {\n         String pId = given().body(\"{ \\\"message\\\": \\\"hello\\\" }\")\n                 .contentType(ContentType.JSON)\n                 .when()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMTYyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515901621", "bodyText": "staring new process instance \ud83d\udc40", "author": "evacchi", "createdAt": "2020-11-02T11:13:39Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -75,7 +75,7 @@ public void consume(Application application, Process<M> process, String payload,\n                                     trigger);\n                     }\n                 } else {\n-                    logger.debug(\"Received message without reference id, staring new process instance with trigger '{}'\",\n+                    logger.debug(\"Received message without reference id, starting new process instance with trigger '{}'\",", "originalCommit": "778a45115e4167e8b50713424c952c4590e243c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d71551f54beeb7cc5b4980ed7e70e263198fec5a", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java\nindex 5aa3df754f..48a37bdb18 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java\n\n@@ -75,7 +75,7 @@ public class CloudEventConsumer<D, M extends Model, T extends AbstractProcessDat\n                                     trigger);\n                     }\n                 } else {\n-                    logger.debug(\"Received message without reference id, starting new process instance with trigger '{}'\",\n+                    logger.debug(\"Received message without reference id, staring new process instance with trigger '{}'\",\n                                  trigger);\n                     ProcessInstance<M> pi = process.createInstance(model);\n                     if (cloudEvent.getKogitoStartFromNode() != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515903633", "bodyText": "keep as debug?", "author": "cristianonicolai", "createdAt": "2020-11-02T11:17:41Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -61,7 +61,7 @@ public void consume(Application application, Process<M> process, String payload,\n             }\n             UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n                 if (cloudEvent.getKogitoReferenceId() != null) {\n-                    logger.debug(\"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                    logger.info(\"Received message with reference id '{}' going to use it to send signal '{}'\",", "originalCommit": "778a45115e4167e8b50713424c952c4590e243c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk3MTMxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515971319", "bodyText": "I put it back to info as suggested by @danielezonca (on master it's info) -- as you guys prefer", "author": "evacchi", "createdAt": "2020-11-02T13:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM1ODk1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r516358958", "bodyText": "@evacchi @danielezonca just thinking that logging every single message received might be quite verbose. thats why my preference to keep as debug.", "author": "cristianonicolai", "createdAt": "2020-11-03T00:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NjUwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r516476509", "bodyText": "restored debug", "author": "evacchi", "createdAt": "2020-11-03T07:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "d71551f54beeb7cc5b4980ed7e70e263198fec5a", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java\nindex 5aa3df754f..48a37bdb18 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java\n\n@@ -61,7 +61,7 @@ public class CloudEventConsumer<D, M extends Model, T extends AbstractProcessDat\n             }\n             UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n                 if (cloudEvent.getKogitoReferenceId() != null) {\n-                    logger.info(\"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                    logger.debug(\"Received message with reference id '{}' going to use it to send signal '{}'\",\n                                  cloudEvent.getKogitoReferenceId(),\n                                  trigger);\n                     Optional<ProcessInstance<M>> instance = process.instances().findById(cloudEvent.getKogitoReferenceId());\n"}}, {"oid": "d71551f54beeb7cc5b4980ed7e70e263198fec5a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d71551f54beeb7cc5b4980ed7e70e263198fec5a", "message": "KOGITO-3723 Use trigger name as cloud event type in producer", "committedDate": "2020-11-05T07:36:34Z", "type": "commit"}, {"oid": "08bf23992f47f86580874713dbea03688f103bea", "url": "https://github.com/kiegroup/kogito-runtimes/commit/08bf23992f47f86580874713dbea03688f103bea", "message": "misisng extra config files", "committedDate": "2020-11-05T07:37:41Z", "type": "commit"}, {"oid": "9056c89dafd2954b085eb73720775d8bd66198b0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9056c89dafd2954b085eb73720775d8bd66198b0", "message": "Subscribe to Kafka publisher and add latch to reliably check for pong", "committedDate": "2020-11-05T07:37:41Z", "type": "commit"}, {"oid": "510692645c8af9ccaa8aacfcd5e9d8c7b7beccf4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/510692645c8af9ccaa8aacfcd5e9d8c7b7beccf4", "message": "check latch at the end", "committedDate": "2020-11-05T07:37:41Z", "type": "commit"}, {"oid": "7d39846d71f6c6c2ae7295380a369975df2d24ef", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7d39846d71f6c6c2ae7295380a369975df2d24ef", "message": "readd validation", "committedDate": "2020-11-05T07:37:41Z", "type": "commit"}, {"oid": "c19f90258b979dd2afa54f6e1146440545a8b77c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c19f90258b979dd2afa54f6e1146440545a8b77c", "message": "debug-wip", "committedDate": "2020-11-05T07:37:41Z", "type": "commit"}, {"oid": "b32fc9735c91fa65a0582abc1e048dc9b00b838f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b32fc9735c91fa65a0582abc1e048dc9b00b838f", "message": "restore original test", "committedDate": "2020-11-05T07:37:41Z", "type": "commit"}, {"oid": "bc9707273be82a968a4f6ac34569fcf305893d2f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bc9707273be82a968a4f6ac34569fcf305893d2f", "message": "restore validation, topic names (quarkus too)", "committedDate": "2020-11-05T07:37:58Z", "type": "commit"}, {"oid": "4a0cf6358656277e6965d4f4e7fa0c98d4be45da", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4a0cf6358656277e6965d4f4e7fa0c98d4be45da", "message": "remove debug mode from invoker", "committedDate": "2020-11-05T07:38:01Z", "type": "commit"}, {"oid": "fa2eca356130c13a8843763e4cff5afc3e999faa", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fa2eca356130c13a8843763e4cff5afc3e999faa", "message": "include review suggestions", "committedDate": "2020-11-05T07:38:01Z", "type": "commit"}, {"oid": "02b8ace9d82c4624b1be4a4fab2bc523c367c553", "url": "https://github.com/kiegroup/kogito-runtimes/commit/02b8ace9d82c4624b1be4a4fab2bc523c367c553", "message": "restore debug log", "committedDate": "2020-11-05T07:38:01Z", "type": "commit"}, {"oid": "02b8ace9d82c4624b1be4a4fab2bc523c367c553", "url": "https://github.com/kiegroup/kogito-runtimes/commit/02b8ace9d82c4624b1be4a4fab2bc523c367c553", "message": "restore debug log", "committedDate": "2020-11-05T07:38:01Z", "type": "forcePushed"}]}