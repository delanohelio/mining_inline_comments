{"pr_number": 395, "pr_title": "KOGITO-1575 DMN assembler-free ikb-free DMNRuntime", "pr_createdAt": "2020-03-27T14:52:25Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/395", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk2NDYyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/395#discussion_r400964621", "bodyText": "A small side note: what about moving this call outside so that you don't have the same call in the following overload?", "author": "r00ta", "createdAt": "2020-03-31T14:36:05Z", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java", "diffHunk": "@@ -52,44 +51,41 @@ private DMNKogito() {\n         // intentionally private.\n     }\n \n-    public static DMNRuntime createGenericDMNRuntime(Reader... resources) {\n-        KnowledgeBaseImpl knowledgeBase = new KnowledgeBaseImpl(\"\", new RuleBaseConfiguration());\n-        Map<String, InternalKnowledgePackage> pkgs = knowledgeBase.getPackagesMap();\n-        DMNCompilerImpl compilerImpl = new DMNCompilerImpl();\n-        for (Reader dmnResource : resources) {\n-            try {\n-                DMNModel m = compilerImpl.compile(dmnResource);\n-                InternalKnowledgePackage pkg = pkgs.computeIfAbsent(m.getNamespace(), KnowledgePackageImpl::new);\n-                ResourceTypePackageRegistry rpkg = pkg.getResourceTypePackages();\n-                DMNPackageImpl dmnpkg = rpkg.computeIfAbsent(ResourceType.DMN, rtp -> new DMNPackageImpl(m.getNamespace()));\n-                dmnpkg.addModel(m.getName(), m);// TODO add profiles? and check dups over namespace/name\n-            } catch (Exception e) {\n-                LOG.error(\"Failed on DMN resource\", e);\n-            }\n-        }\n-        return new DMNRuntimeImpl(knowledgeBase);\n+    /**\n+     * Internal Utility class.<br/>\n+     * Use {@link Application#decisionModels()} of Kogito API to programmatically access DMN assets and evaluate DMN decisions.\n+     */\n+    public static DMNRuntime createGenericDMNRuntime(Reader... readers) {\n+        List<Resource> resources = Stream.of(readers).map(ReaderResource::new).collect(Collectors.toList());\n+        DMNRuntime dmnRuntime = DMNRuntimeBuilder.fromDefaults()\n+                                                 .setRootClassLoader(null)\n+                                                 .buildConfiguration()\n+                                                 .fromResources(resources)\n+                                                 .getOrElseThrow(e -> new RuntimeException(\"Error initalizing DMNRuntime\", e));", "originalCommit": "469fbb71a58ea9ff90a5de4962599944a546730e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4NjM0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/395#discussion_r400986341", "bodyText": "outdated. marking Resolved.", "author": "tarilabs", "createdAt": "2020-03-31T15:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk2NDYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8ea79faa403dc927b5063d4cde7e737ad2bba21", "chunk": "diff --git a/drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java b/drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java\nindex d70cd7c39e..790ee18607 100644\n--- a/drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java\n+++ b/drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java\n\n@@ -57,6 +57,11 @@ public class DMNKogito {\n      */\n     public static DMNRuntime createGenericDMNRuntime(Reader... readers) {\n         List<Resource> resources = Stream.of(readers).map(ReaderResource::new).collect(Collectors.toList());\n+        DMNRuntime dmnRuntime = fromResources(resources);\n+        return dmnRuntime;\n+    }\n+\n+    private static DMNRuntime fromResources(List<Resource> resources) {\n         DMNRuntime dmnRuntime = DMNRuntimeBuilder.fromDefaults()\n                                                  .setRootClassLoader(null)\n                                                  .buildConfiguration()\n"}}, {"oid": "d0e6d2a0a0cd93120622b4a777dc2ddcb4c8e959", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d0e6d2a0a0cd93120622b4a777dc2ddcb4c8e959", "message": "KOGITO-1575 DMN assembler-free ikb-free DMNRuntime", "committedDate": "2020-03-31T15:00:04Z", "type": "commit"}, {"oid": "bb30423861038aa09120f0897498fd13e8fa9fa0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bb30423861038aa09120f0897498fd13e8fa9fa0", "message": "reference tag release", "committedDate": "2020-03-31T15:00:04Z", "type": "commit"}, {"oid": "a8ea79faa403dc927b5063d4cde7e737ad2bba21", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a8ea79faa403dc927b5063d4cde7e737ad2bba21", "message": "refactored following code review feedback", "committedDate": "2020-03-31T15:00:05Z", "type": "commit"}, {"oid": "f775695e1a4971afaab6452777142b84ac6c0939", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f775695e1a4971afaab6452777142b84ac6c0939", "message": "cutting deprecated code", "committedDate": "2020-03-31T15:00:05Z", "type": "commit"}, {"oid": "f775695e1a4971afaab6452777142b84ac6c0939", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f775695e1a4971afaab6452777142b84ac6c0939", "message": "cutting deprecated code", "committedDate": "2020-03-31T15:00:05Z", "type": "forcePushed"}, {"oid": "4f44c38b038b51ee11b1c5967a613f443f966983", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4f44c38b038b51ee11b1c5967a613f443f966983", "message": "revert modificaitons to DMNKogitoTest", "committedDate": "2020-03-31T15:11:49Z", "type": "commit"}, {"oid": "5c4a6afbe4e1d692dab4d43edab9a3051248a157", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5c4a6afbe4e1d692dab4d43edab9a3051248a157", "message": "align test scenario", "committedDate": "2020-03-31T17:19:40Z", "type": "commit"}]}