{"pr_number": 930, "pr_title": "[KOGITO-3969] Reviewed ApplicationGenerator.logger usage + removed dead code", "pr_createdAt": "2020-12-10T10:32:38Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/930", "timeline": [{"oid": "6740231f65f5ffb8b81ab7d5ebbabef0e2111969", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6740231f65f5ffb8b81ab7d5ebbabef0e2111969", "message": "[KOGITO-3969] Reviewed ApplicationGenerator.logger usage + removed dead code", "committedDate": "2020-12-10T10:26:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1OTMxNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/930#discussion_r540059316", "bodyText": "I know that you did it to avoid repetition but I don't love that we are now logging within the constructor of this class, because now it will probably log stuff that we may not really care about (eg resources)\nOTOH: I never loved this logging; this stuff is dumped to disk sooner or later, so  it's much easier to read it from a file, rather than displayed on the console log.\nSo I am ok with the change, although it feels a bit strange (to me).", "author": "evacchi", "createdAt": "2020-12-10T10:37:18Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -234,6 +233,6 @@ private void addModels(final List<KiePMMLModel> kiepmmlModels, final PMMLResourc\n \n \n     private void storeFile(GeneratedFile.Type type, String path, String source) {\n-        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+        generatedFiles.add(new GeneratedFile(type, path, source));", "originalCommit": "6740231f65f5ffb8b81ab7d5ebbabef0e2111969", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2MzgxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/930#discussion_r540163817", "bodyText": "Yes I agree that it produce a lot of noise in the logs but my goal was to centralize it for now.\nI moved the logging to generate() method of ApplicationGenerator so that it is not a side effect inside GeneratedFile constructor and it will be easier to change in the future (i.e. dump to disk instead of log).\nWdyt?", "author": "danielezonca", "createdAt": "2020-12-10T13:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1OTMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NjYzOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/930#discussion_r540166639", "bodyText": "I like it much better now!", "author": "evacchi", "createdAt": "2020-12-10T13:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1OTMxNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "48e49362639bb7c3a1450dc58b73a4e9f3aa5d21", "url": "https://github.com/kiegroup/kogito-runtimes/commit/48e49362639bb7c3a1450dc58b73a4e9f3aa5d21", "message": "[KOGITO-3969] Move logging to ApplicationGenerator", "committedDate": "2020-12-10T13:19:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzOTA4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/930#discussion_r540839087", "bodyText": "could we put the logger as LOGGER ?", "author": "radtriste", "createdAt": "2020-12-11T10:16:44Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -41,7 +40,7 @@\n \n public class ApplicationGenerator {\n \n-    public static final Logger logger = LoggerFactory.getLogger(ApplicationGenerator.class);\n+    private static final Logger logger = LoggerFactory.getLogger(ApplicationGenerator.class);", "originalCommit": "48e49362639bb7c3a1450dc58b73a4e9f3aa5d21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d65fd9f9c9570e16d5a9a2a48bf4fec835988037", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java\nindex 8e9863b10a..693afed53a 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java\n\n@@ -40,7 +40,7 @@ import org.slf4j.LoggerFactory;\n \n public class ApplicationGenerator {\n \n-    private static final Logger logger = LoggerFactory.getLogger(ApplicationGenerator.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationGenerator.class);\n \n     public static final String DEFAULT_GROUP_ID = \"org.kie.kogito\";\n     public static final String DEFAULT_PACKAGE_NAME = \"org.kie.kogito.app\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzOTYwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/930#discussion_r540839602", "bodyText": "could we rename as LOGGER ?", "author": "radtriste", "createdAt": "2020-12-11T10:17:32Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -222,25 +220,25 @@ private void generateStronglyTypedInput(DMNModel model) {\n             DMNTypeSafeTypeGenerator generator = new DMNTypeSafeTypeGenerator(model, index, factory).withJacksonAnnotation();\n             boolean useMPAnnotations = isMPAnnotationsPresent();\n             if (useMPAnnotations) {\n-                logger.debug(\"useMPAnnotations\");\n+                LOG.debug(\"useMPAnnotations\");", "originalCommit": "48e49362639bb7c3a1450dc58b73a4e9f3aa5d21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d65fd9f9c9570e16d5a9a2a48bf4fec835988037", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\nindex cdb67dad9c..459f09cb83 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\n\n@@ -220,17 +219,17 @@ public class DecisionCodegen extends AbstractGenerator {\n             DMNTypeSafeTypeGenerator generator = new DMNTypeSafeTypeGenerator(model, index, factory).withJacksonAnnotation();\n             boolean useMPAnnotations = isMPAnnotationsPresent();\n             if (useMPAnnotations) {\n-                LOG.debug(\"useMPAnnotations\");\n+                LOGGER.debug(\"useMPAnnotations\");\n                 generator.withMPAnnotation();\n             } else {\n-                LOG.debug(\"NO useMPAnnotations\");\n+                LOGGER.debug(\"NO useMPAnnotations\");\n             }\n             boolean useIOSwaggerOASv3Annotations = isIOSwaggerOASv3AnnotationsPresent();\n             if (useIOSwaggerOASv3Annotations) {\n-                LOG.debug(\"useIOSwaggerOASv3Annotations\");\n+                LOGGER.debug(\"useIOSwaggerOASv3Annotations\");\n                 generator.withIOSwaggerOASv3();\n             } else {\n-                LOG.debug(\"NO useIOSwaggerOASv3Annotations\");\n+                LOGGER.debug(\"NO useIOSwaggerOASv3Annotations\");\n             }\n             Map<String, String> allTypesSourceCode = generator\n                     .processTypes()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzOTgzMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/930#discussion_r540839833", "bodyText": "LOGGER", "author": "radtriste", "createdAt": "2020-12-11T10:17:51Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/DeclaredTypeCodegen.java", "diffHunk": "@@ -46,12 +46,15 @@\n import org.kie.kogito.codegen.KogitoPackageSources;\n import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n import org.kie.kogito.codegen.rules.config.RuleConfigGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import static java.util.stream.Collectors.toList;\n-import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n \n public class DeclaredTypeCodegen extends AbstractGenerator {\n \n+    private static final Logger logger = LoggerFactory.getLogger(DeclaredTypeCodegen.class);", "originalCommit": "48e49362639bb7c3a1450dc58b73a4e9f3aa5d21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d65fd9f9c9570e16d5a9a2a48bf4fec835988037", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/DeclaredTypeCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/DeclaredTypeCodegen.java\nindex 47d3f5840a..7c328afe12 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/DeclaredTypeCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/DeclaredTypeCodegen.java\n\n@@ -53,7 +53,7 @@ import static java.util.stream.Collectors.toList;\n \n public class DeclaredTypeCodegen extends AbstractGenerator {\n \n-    private static final Logger logger = LoggerFactory.getLogger(DeclaredTypeCodegen.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DeclaredTypeCodegen.class);\n \n     public static DeclaredTypeCodegen ofPath(Path basePath) {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0MDA2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/930#discussion_r540840067", "bodyText": "LOGGER", "author": "radtriste", "createdAt": "2020-12-11T10:18:16Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -80,16 +80,18 @@\n import org.kie.kogito.rules.RuleUnitConfig;\n import org.kie.kogito.rules.units.AssignableChecker;\n import org.kie.kogito.rules.units.ReflectiveRuleUnitDescription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import static java.util.stream.Collectors.toList;\n \n import static com.github.javaparser.StaticJavaParser.parse;\n import static org.drools.compiler.kie.builder.impl.KieBuilderImpl.setDefaultsforEmptyKieModule;\n-import static org.kie.kogito.codegen.ApplicationGenerator.log;\n-import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n+    private static final Logger logger = LoggerFactory.getLogger(IncrementalRuleCodegen.class);", "originalCommit": "48e49362639bb7c3a1450dc58b73a4e9f3aa5d21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d65fd9f9c9570e16d5a9a2a48bf4fec835988037", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java\nindex 1271527ff1..ed4454ac43 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java\n\n@@ -90,7 +90,7 @@ import static org.drools.compiler.kie.builder.impl.KieBuilderImpl.setDefaultsfor\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n-    private static final Logger logger = LoggerFactory.getLogger(IncrementalRuleCodegen.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IncrementalRuleCodegen.class);\n \n     public static IncrementalRuleCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n         List<Resource> dmnResources = resources.stream()\n"}}, {"oid": "fefe1e88c6a56c46a2969fc70307a270bbd65b17", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fefe1e88c6a56c46a2969fc70307a270bbd65b17", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-3969", "committedDate": "2020-12-11T10:28:50Z", "type": "commit"}, {"oid": "d65fd9f9c9570e16d5a9a2a48bf4fec835988037", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d65fd9f9c9570e16d5a9a2a48bf4fec835988037", "message": "Renamed logger -> LOGGER", "committedDate": "2020-12-11T10:32:43Z", "type": "commit"}]}