{"pr_number": 587, "pr_title": "Kogito 2532 - monitoring addon support multiple dmn built in types", "pr_createdAt": "2020-06-25T14:32:29Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/587", "timeline": [{"oid": "aa52bf8ddaa642f08e59f28883663df00a3c9a42", "url": "https://github.com/kiegroup/kogito-runtimes/commit/aa52bf8ddaa642f08e59f28883663df00a3c9a42", "message": "add LocalDateTime handler, generate metrics for LocalDateTime, generate panels for date and time dmn type", "committedDate": "2020-06-25T14:29:05Z", "type": "commit"}, {"oid": "a559c63f4e591d11a5c7b4957ed1d34f28e20e93", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a559c63f4e591d11a5c7b4957ed1d34f28e20e93", "message": "add licence headers", "committedDate": "2020-06-25T14:30:04Z", "type": "commit"}, {"oid": "693966b80a00a841ed5ebc92e95feacb09a7145e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/693966b80a00a841ed5ebc92e95feacb09a7145e", "message": "add LocalDateTimeHandlerTest", "committedDate": "2020-06-25T15:00:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTcxNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r446029715", "bodyText": "What is the reason of this change? How this string is used?\nSide note, are you sure type cannot be null?", "author": "danielezonca", "createdAt": "2020-06-26T08:00:36Z", "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -95,10 +95,11 @@ public static String generateDomainSpecificDMNDashboard(String templatePath, Str\n                     jgrafana.addPanel(PanelType.GRAPH,\n                                       \"Decision \" + decision.getName(),\n                                       String.format(\"%s_dmn_result{endpoint = \\\"%s\\\", decision = \\\"%s\\\"}\",\n-                                                    type,\n+                                                    type.toString().replace(\" \", \"_\"),", "originalCommit": "693966b80a00a841ed5ebc92e95feacb09a7145e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjQxOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r446062418", "bodyText": "@danielezonca dmn type might contain spaces (for example the type \"time and date\"), and in the PrompQL query of grafana spaces are not allowed. So by default we have to replace the spaces with something else", "author": "r00ta", "createdAt": "2020-06-26T09:06:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzM1Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r446063357", "bodyText": "For your other question, the check on null is already done few lines above this one", "author": "r00ta", "createdAt": "2020-06-26T09:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTcxNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fadd41622f6d39a4308ee956f6d3b7df2b03da08", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fadd41622f6d39a4308ee956f6d3b7df2b03da08", "message": "add Duration type support, refactoring quantiles tests with abstract class, add tests", "committedDate": "2020-06-26T09:09:26Z", "type": "commit"}, {"oid": "a88509584c17494d2b87404807a0d3529b89943e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a88509584c17494d2b87404807a0d3529b89943e", "message": "add licence header", "committedDate": "2020-06-26T09:10:18Z", "type": "commit"}, {"oid": "398e29e17fc5c8e1cd24802806176770147b193c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/398e29e17fc5c8e1cd24802806176770147b193c", "message": "optimize imports and code, remove duplicated code with constants", "committedDate": "2020-06-26T09:15:23Z", "type": "commit"}, {"oid": "922254290705c15111eaf48ed593bd59e0019b3d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/922254290705c15111eaf48ed593bd59e0019b3d", "message": "add support for years and months duration + add tests", "committedDate": "2020-06-26T14:10:29Z", "type": "commit"}, {"oid": "087b45ac518ac520c0cbc15509117144901dde45", "url": "https://github.com/kiegroup/kogito-runtimes/commit/087b45ac518ac520c0cbc15509117144901dde45", "message": "add date and time handlers and tests", "committedDate": "2020-06-29T15:10:41Z", "type": "commit"}, {"oid": "6def3231b29a2dcd34a74643426c7d830c90ee06", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6def3231b29a2dcd34a74643426c7d830c90ee06", "message": "Refactoring type handling with abstract class", "committedDate": "2020-06-30T07:34:22Z", "type": "commit"}, {"oid": "da713f5ac3d51f3f06645141671f0228ceb3eef9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/da713f5ac3d51f3f06645141671f0228ceb3eef9", "message": "rename initializeDefaultSummary method", "committedDate": "2020-06-30T07:35:09Z", "type": "commit"}, {"oid": "e0a654ceeea128d84f5c69af6927d6a2b89d1122", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e0a654ceeea128d84f5c69af6927d6a2b89d1122", "message": "refactoring localTime and localDate grafana functions, add licence headers", "committedDate": "2020-06-30T08:17:25Z", "type": "commit"}, {"oid": "9d4ff2c1ff587c329632c3701483b69ce42bb875", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9d4ff2c1ff587c329632c3701483b69ce42bb875", "message": "fix tests", "committedDate": "2020-06-30T11:24:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDA3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447554079", "bodyText": "Please use lower letter at the beginning of the method.", "author": "jiripetrlik", "createdAt": "2020-06-30T09:43:33Z", "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.integration;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.LocalDateTimeHandler;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class LocalDateTimeHandlerTest extends AbstractQuantilesTest<LocalDateTimeHandler> {\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = new CollectorRegistry();\n+        handler = new LocalDateTimeHandler(\"hello\", registry);\n+    }\n+\n+    @AfterEach\n+    public void destroy() {\n+        registry.clear();\n+    }\n+\n+    @Test\n+    public void GivenLocalDateTimeMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {", "originalCommit": "e0a654ceeea128d84f5c69af6927d6a2b89d1122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NDI0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447694243", "bodyText": "Sorry, old C# habits die hard :) Renamed", "author": "r00ta", "createdAt": "2020-06-30T13:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2MjY0MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r448162640", "bodyText": ":-) Thank you!", "author": "jiripetrlik", "createdAt": "2020-07-01T07:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f34bda899d3e154dc3625d7650b99dd7a1bfbbc7", "chunk": "diff --git a/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java b/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java\nindex 179dc12315..95b21fefbf 100644\n--- a/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java\n+++ b/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java\n\n@@ -41,7 +41,7 @@ public class LocalDateTimeHandlerTest extends AbstractQuantilesTest<LocalDateTim\n     }\n \n     @Test\n-    public void GivenLocalDateTimeMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {\n+    public void givenLocalDateTimeMetricsWhenMetricsAreStoredThenTheQuantilesAreCorrect() {\n         // Arrange\n         LocalDateTime now = LocalDateTime.now();\n         Long expectedValue = now.toInstant(ZoneOffset.UTC).toEpochMilli();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDE2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447554161", "bodyText": "Please use lower letter at the beginning of the method.", "author": "jiripetrlik", "createdAt": "2020-06-30T09:43:41Z", "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalTimeHandlerTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.integration;\n+\n+import java.time.LocalTime;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.LocalTimeHandler;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class LocalTimeHandlerTest extends AbstractQuantilesTest<LocalTimeHandler> {\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = new CollectorRegistry();\n+        handler = new LocalTimeHandler(\"hello\", registry);\n+    }\n+\n+    @AfterEach\n+    public void destroy() {\n+        registry.clear();\n+    }\n+\n+    @Test\n+    public void GivenLocalTimeMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {", "originalCommit": "e0a654ceeea128d84f5c69af6927d6a2b89d1122", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f34bda899d3e154dc3625d7650b99dd7a1bfbbc7", "chunk": "diff --git a/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalTimeHandlerTest.java b/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalTimeHandlerTest.java\nindex c399f22b6b..d222ef994c 100644\n--- a/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalTimeHandlerTest.java\n+++ b/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalTimeHandlerTest.java\n\n@@ -40,7 +40,7 @@ public class LocalTimeHandlerTest extends AbstractQuantilesTest<LocalTimeHandler\n     }\n \n     @Test\n-    public void GivenLocalTimeMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {\n+    public void givenLocalTimeMetricsWhenMetricsAreStoredThenTheQuantilesAreCorrect() {\n         // Arrange\n         LocalTime now = LocalTime.now();\n         int expectedValue = now.toSecondOfDay();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDIzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447554232", "bodyText": "Please use lower letter at the beginning of the method.", "author": "jiripetrlik", "createdAt": "2020-06-30T09:43:48Z", "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/YearsAndMonthsDurationHandlerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.integration;\n+\n+import java.time.Period;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.YearsAndMonthsDurationHandler;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class YearsAndMonthsDurationHandlerTest extends AbstractQuantilesTest<YearsAndMonthsDurationHandler> {\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = new CollectorRegistry();\n+        handler = new YearsAndMonthsDurationHandler(\"hello\", registry);\n+    }\n+\n+    @AfterEach\n+    public void destroy() {\n+        registry.clear();\n+    }\n+\n+    @Test\n+    public void GivenYearsAndMonthsMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {", "originalCommit": "e0a654ceeea128d84f5c69af6927d6a2b89d1122", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f34bda899d3e154dc3625d7650b99dd7a1bfbbc7", "chunk": "diff --git a/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/YearsAndMonthsDurationHandlerTest.java b/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/YearsAndMonthsDurationHandlerTest.java\nindex e99b246585..fa9302caab 100644\n--- a/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/YearsAndMonthsDurationHandlerTest.java\n+++ b/addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/YearsAndMonthsDurationHandlerTest.java\n\n@@ -40,7 +40,7 @@ public class YearsAndMonthsDurationHandlerTest extends AbstractQuantilesTest<Yea\n     }\n \n     @Test\n-    public void GivenYearsAndMonthsMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {\n+    public void givenYearsAndMonthsMetricsWhenMetricsAreStoredThenTheQuantilesAreCorrect() {\n         // Arrange\n         Integer expectedValue = 12;\n         Period period = Period.ofMonths(expectedValue);\n"}}, {"oid": "f34bda899d3e154dc3625d7650b99dd7a1bfbbc7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f34bda899d3e154dc3625d7650b99dd7a1bfbbc7", "message": "rename test names", "committedDate": "2020-06-30T13:44:21Z", "type": "commit"}, {"oid": "b651a433ac2e0cf344de01b6cb8d7064acff3d4a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b651a433ac2e0cf344de01b6cb8d7064acff3d4a", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2532-support-multiple-dmn-built-in-types", "committedDate": "2020-06-30T15:39:35Z", "type": "commit"}, {"oid": "b7706eb4641fc88daf0535c216c91845567cfdff", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b7706eb4641fc88daf0535c216c91845567cfdff", "message": "fix grafana yaxes test", "committedDate": "2020-07-01T08:37:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NjExOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447986119", "bodyText": "What about use an interface instead with initializeDefaultSummary as default method?", "author": "danielezonca", "createdAt": "2020-06-30T21:20:39Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/dmnhandlers/TypeHandlerWithSummary.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.system.metrics.dmnhandlers;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Summary;\n+\n+public abstract class TypeHandlerWithSummary<T> implements TypeHandler<T> {", "originalCommit": "b651a433ac2e0cf344de01b6cb8d7064acff3d4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMTAzMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r448321031", "bodyText": "Agreed, I've refactored it with an interface", "author": "r00ta", "createdAt": "2020-07-01T12:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NjExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "06783628ee6b444be05e3e8b74081402401130a1", "chunk": "diff --git a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/dmnhandlers/TypeHandlerWithSummary.java b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/dmnhandlers/TypeHandlerWithSummary.java\nindex 03e89ed161..bb7fb96b8a 100644\n--- a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/dmnhandlers/TypeHandlerWithSummary.java\n+++ b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/dmnhandlers/TypeHandlerWithSummary.java\n\n@@ -18,8 +18,8 @@ package org.kie.kogito.monitoring.system.metrics.dmnhandlers;\n import io.prometheus.client.CollectorRegistry;\n import io.prometheus.client.Summary;\n \n-public abstract class TypeHandlerWithSummary<T> implements TypeHandler<T> {\n-    protected Summary initializeDefaultSummary(String dmnType, CollectorRegistry registry) {\n+public interface TypeHandlerWithSummary<T> extends TypeHandler<T> {\n+    default Summary initializeDefaultSummary(String dmnType, CollectorRegistry registry) {\n         Summary.Builder builder = Summary.build() // Calculate quantiles over a sliding window of time - default = 10 minutes\n                 .quantile(0.1, 0.01)   // Add 10th percentile with 1% tolerated error\n                 .quantile(0.25, 0.05)\n"}}, {"oid": "06783628ee6b444be05e3e8b74081402401130a1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/06783628ee6b444be05e3e8b74081402401130a1", "message": "make TypeHandlerWithSummary an interface", "committedDate": "2020-07-01T12:13:43Z", "type": "commit"}, {"oid": "ee09df2eb41d5eac8e40e52a78b3be3f5c8e0460", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ee09df2eb41d5eac8e40e52a78b3be3f5c8e0460", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2532-support-multiple-dmn-built-in-types", "committedDate": "2020-07-03T07:09:22Z", "type": "commit"}]}