{"pr_number": 294, "pr_title": "KOGITO-892: Create Singleton DataSource", "pr_createdAt": "2020-01-28T10:15:15Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/294", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0Nzc4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/294#discussion_r374747782", "bodyText": "Replace this Optional with a plain value plus an enum to track in which of the possible 3 states UNINITALIZED, EMPTY, PRESENT.", "author": "mariofusco", "createdAt": "2020-02-04T15:39:17Z", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.rules.units;\n+\n+import java.util.ArrayList;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.definitions.rule.impl.RuleImpl;\n+import org.drools.core.reteoo.TerminalNode;\n+import org.drools.core.ruleunit.InternalDataStore;\n+import org.drools.core.spi.Activation;\n+import org.drools.core.util.bitmask.BitMask;\n+import org.kie.api.runtime.rule.FactHandle;\n+import org.kie.kogito.rules.DataHandle;\n+import org.kie.kogito.rules.DataProcessor;\n+import org.kie.kogito.rules.SingletonDataStore;\n+import org.kie.kogito.rules.units.impl.DataHandleImpl;\n+\n+public class FieldDataStore<T> implements SingletonDataStore<T>, InternalDataStore<T> {\n+    private Optional<T> value = null;", "originalCommit": "e5e5111bfc2d733f5dc4fa00d193cb2c1854d675", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20d2e0b628f9767688148b8e31aa27a9e1350d77", "chunk": "diff --git a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\nindex d1ae600edd..ef0349189e 100644\n--- a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\n+++ b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\n\n@@ -16,52 +16,73 @@\n package org.kie.kogito.rules.units;\n \n import java.util.ArrayList;\n-import java.util.IdentityHashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n import org.drools.core.common.InternalFactHandle;\n import org.drools.core.definitions.rule.impl.RuleImpl;\n import org.drools.core.reteoo.TerminalNode;\n-import org.drools.core.ruleunit.InternalDataStore;\n+import org.drools.core.ruleunit.InternalStoreCallback;\n import org.drools.core.spi.Activation;\n import org.drools.core.util.bitmask.BitMask;\n import org.kie.api.runtime.rule.FactHandle;\n import org.kie.kogito.rules.DataHandle;\n import org.kie.kogito.rules.DataProcessor;\n-import org.kie.kogito.rules.SingletonDataStore;\n+import org.kie.kogito.rules.SingletonStore;\n import org.kie.kogito.rules.units.impl.DataHandleImpl;\n \n-public class FieldDataStore<T> implements SingletonDataStore<T>, InternalDataStore<T> {\n-    private Optional<T> value = null;\n-    private DataHandle handle = null;\n+public class FieldDataStore<T> implements SingletonStore<T>,\n+                                          InternalStoreCallback {\n+\n+    private enum State {\n+        UNDEFINED,\n+        EMPTY,\n+        PRESENT;\n+    }\n+\n+    private State state = State.UNDEFINED;\n+    private T value = null;\n+    private DataHandleImpl handle = null;\n \n     private final List<EntryPointDataProcessor> entryPointSubscribers = new ArrayList<>();\n     private final List<DataProcessor<T>> subscribers = new ArrayList<>();\n \n     public DataHandle set(T t) {\n-        value = Optional.of(t);\n-        handle = new DataHandleImpl( t );\n-        entryPointSubscribers.forEach(s -> internalInsert(handle, s));\n-        subscribers.forEach(s -> internalInsert(handle, s));\n+        value = t;\n+        if (state == State.UNDEFINED) {\n+            state = State.PRESENT;\n+            handle = new DataHandleImpl(t);\n+            entryPointSubscribers.forEach(s -> internalInsert(handle, s));\n+            subscribers.forEach(s -> internalInsert(handle, s));\n+        } else {\n+            if (t == null) {\n+                entryPointSubscribers.forEach(s -> s.delete(handle));\n+                subscribers.forEach(s -> s.delete(handle));\n+                state = State.EMPTY;\n+            } else {\n+                handle.setObject(t);\n+                update(handle, t);\n+                state = State.PRESENT;\n+            }\n+        }\n \n         return handle;\n     }\n \n-    @Override\n-    public void update(DataHandle handle, T object) {\n-        entryPointSubscribers.forEach( s -> s.update( handle, object ) );\n-        subscribers.forEach( s -> s.update( handle, object ) );\n+    private void update(DataHandle handle, T object) {\n+        entryPointSubscribers.forEach(s -> s.update(handle, object));\n+        subscribers.forEach(s -> s.update(handle, object));\n     }\n \n     @Override\n     public void clear() {\n         DataHandle dh = handle;\n-        entryPointSubscribers.forEach( s -> s.delete( dh ) );\n-        subscribers.forEach( s -> s.delete( dh ) );\n+        entryPointSubscribers.forEach(s -> s.delete(dh));\n+        subscribers.forEach(s -> s.delete(dh));\n         handle = null;\n-        value = value == null? null : Optional.empty();\n+        value = null;\n+        if (state != State.UNDEFINED) {\n+            state = State.EMPTY;\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0ODQ4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/294#discussion_r374748489", "bodyText": "Invoke insert only the first time and hold the handle. The subsequent times invoke update on that handle.", "author": "mariofusco", "createdAt": "2020-02-04T15:40:27Z", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.rules.units;\n+\n+import java.util.ArrayList;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.definitions.rule.impl.RuleImpl;\n+import org.drools.core.reteoo.TerminalNode;\n+import org.drools.core.ruleunit.InternalDataStore;\n+import org.drools.core.spi.Activation;\n+import org.drools.core.util.bitmask.BitMask;\n+import org.kie.api.runtime.rule.FactHandle;\n+import org.kie.kogito.rules.DataHandle;\n+import org.kie.kogito.rules.DataProcessor;\n+import org.kie.kogito.rules.SingletonDataStore;\n+import org.kie.kogito.rules.units.impl.DataHandleImpl;\n+\n+public class FieldDataStore<T> implements SingletonDataStore<T>, InternalDataStore<T> {\n+    private Optional<T> value = null;\n+    private DataHandle handle = null;\n+\n+    private final List<EntryPointDataProcessor> entryPointSubscribers = new ArrayList<>();\n+    private final List<DataProcessor<T>> subscribers = new ArrayList<>();\n+\n+    public DataHandle set(T t) {\n+        value = Optional.of(t);\n+        handle = new DataHandleImpl( t );\n+        entryPointSubscribers.forEach(s -> internalInsert(handle, s));", "originalCommit": "e5e5111bfc2d733f5dc4fa00d193cb2c1854d675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI4MDk4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/294#discussion_r375280986", "bodyText": "apparently DataHandle has no update() method \ud83e\udd14", "author": "evacchi", "createdAt": "2020-02-05T14:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0ODQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NTU2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/294#discussion_r376955562", "bodyText": "I have added a setObject to the DataHandle", "author": "evacchi", "createdAt": "2020-02-10T09:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0ODQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "20d2e0b628f9767688148b8e31aa27a9e1350d77", "chunk": "diff --git a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\nindex d1ae600edd..ef0349189e 100644\n--- a/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\n+++ b/drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java\n\n@@ -16,52 +16,73 @@\n package org.kie.kogito.rules.units;\n \n import java.util.ArrayList;\n-import java.util.IdentityHashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n import org.drools.core.common.InternalFactHandle;\n import org.drools.core.definitions.rule.impl.RuleImpl;\n import org.drools.core.reteoo.TerminalNode;\n-import org.drools.core.ruleunit.InternalDataStore;\n+import org.drools.core.ruleunit.InternalStoreCallback;\n import org.drools.core.spi.Activation;\n import org.drools.core.util.bitmask.BitMask;\n import org.kie.api.runtime.rule.FactHandle;\n import org.kie.kogito.rules.DataHandle;\n import org.kie.kogito.rules.DataProcessor;\n-import org.kie.kogito.rules.SingletonDataStore;\n+import org.kie.kogito.rules.SingletonStore;\n import org.kie.kogito.rules.units.impl.DataHandleImpl;\n \n-public class FieldDataStore<T> implements SingletonDataStore<T>, InternalDataStore<T> {\n-    private Optional<T> value = null;\n-    private DataHandle handle = null;\n+public class FieldDataStore<T> implements SingletonStore<T>,\n+                                          InternalStoreCallback {\n+\n+    private enum State {\n+        UNDEFINED,\n+        EMPTY,\n+        PRESENT;\n+    }\n+\n+    private State state = State.UNDEFINED;\n+    private T value = null;\n+    private DataHandleImpl handle = null;\n \n     private final List<EntryPointDataProcessor> entryPointSubscribers = new ArrayList<>();\n     private final List<DataProcessor<T>> subscribers = new ArrayList<>();\n \n     public DataHandle set(T t) {\n-        value = Optional.of(t);\n-        handle = new DataHandleImpl( t );\n-        entryPointSubscribers.forEach(s -> internalInsert(handle, s));\n-        subscribers.forEach(s -> internalInsert(handle, s));\n+        value = t;\n+        if (state == State.UNDEFINED) {\n+            state = State.PRESENT;\n+            handle = new DataHandleImpl(t);\n+            entryPointSubscribers.forEach(s -> internalInsert(handle, s));\n+            subscribers.forEach(s -> internalInsert(handle, s));\n+        } else {\n+            if (t == null) {\n+                entryPointSubscribers.forEach(s -> s.delete(handle));\n+                subscribers.forEach(s -> s.delete(handle));\n+                state = State.EMPTY;\n+            } else {\n+                handle.setObject(t);\n+                update(handle, t);\n+                state = State.PRESENT;\n+            }\n+        }\n \n         return handle;\n     }\n \n-    @Override\n-    public void update(DataHandle handle, T object) {\n-        entryPointSubscribers.forEach( s -> s.update( handle, object ) );\n-        subscribers.forEach( s -> s.update( handle, object ) );\n+    private void update(DataHandle handle, T object) {\n+        entryPointSubscribers.forEach(s -> s.update(handle, object));\n+        subscribers.forEach(s -> s.update(handle, object));\n     }\n \n     @Override\n     public void clear() {\n         DataHandle dh = handle;\n-        entryPointSubscribers.forEach( s -> s.delete( dh ) );\n-        subscribers.forEach( s -> s.delete( dh ) );\n+        entryPointSubscribers.forEach(s -> s.delete(dh));\n+        subscribers.forEach(s -> s.delete(dh));\n         handle = null;\n-        value = value == null? null : Optional.empty();\n+        value = null;\n+        if (state != State.UNDEFINED) {\n+            state = State.EMPTY;\n+        }\n     }\n \n     @Override\n"}}, {"oid": "20d2e0b628f9767688148b8e31aa27a9e1350d77", "url": "https://github.com/kiegroup/kogito-runtimes/commit/20d2e0b628f9767688148b8e31aa27a9e1350d77", "message": "KOGITO-892: Create Singleton DataSource\n\nwip\n\ntests are failing\n\nuse update when sett()ing multiple times\n\nadd drl test case, refactor\n\ncleanup, refactor", "committedDate": "2020-02-14T09:09:18Z", "type": "commit"}, {"oid": "b9a0cab49d23fc3bf3af0bbf523dd5cc62cca9e8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b9a0cab49d23fc3bf3af0bbf523dd5cc62cca9e8", "message": "fix api, add test case for update", "committedDate": "2020-02-14T10:12:47Z", "type": "commit"}, {"oid": "b9a0cab49d23fc3bf3af0bbf523dd5cc62cca9e8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b9a0cab49d23fc3bf3af0bbf523dd5cc62cca9e8", "message": "fix api, add test case for update", "committedDate": "2020-02-14T10:12:47Z", "type": "forcePushed"}, {"oid": "2b7c2ff36f522dc02d591a6b0aa1c900ed4ed7db", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2b7c2ff36f522dc02d591a6b0aa1c900ed4ed7db", "message": "fix test case", "committedDate": "2020-02-14T11:02:34Z", "type": "commit"}]}