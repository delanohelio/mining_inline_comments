{"pr_number": 737, "pr_title": "[KOGITO-3222] Implement jpmml/trustypmml co-existence", "pr_createdAt": "2020-09-01T13:18:15Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/737", "timeline": [{"oid": "32751ac95606c6ae61ba557dea697814622ff8af", "url": "https://github.com/kiegroup/kogito-runtimes/commit/32751ac95606c6ae61ba557dea697814622ff8af", "message": "[KOGITO-3222] Implement jpmml/trustypmml co-existence", "committedDate": "2020-09-01T13:07:55Z", "type": "commit"}, {"oid": "8a933086d771c88d46fa828aeb5ea1f3a84b1f08", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8a933086d771c88d46fa828aeb5ea1f3a84b1f08", "message": "[KOGITO-3222] Implement jpmml/trustypmml co-existence", "committedDate": "2020-09-01T15:19:59Z", "type": "commit"}, {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c4edb4708d1450d4203226f16bc1cbc19b338f24", "message": "[KOGITO-3222] Using Jandex to verify jpmml presence in quarkus. Completely disabling trusty-pmml if jpmml is present", "committedDate": "2020-09-02T07:09:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMzkyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482133921", "bodyText": "Can you please add a log message?", "author": "danielezonca", "createdAt": "2020-09-02T14:54:42Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,23 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "originalCommit": "c4edb4708d1450d4203226f16bc1cbc19b338f24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODA1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482688056", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-09-03T03:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMzkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "59089f36679eafc60349f8dd39d4acbabecf2cf4", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex a3b9b27b3d..f4e9f1b2e0 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -93,6 +93,7 @@ public class PredictionCodegen extends AbstractGenerator {\n     public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n                                                          Collection<CollectedResource> resources) {\n         if (isJPMMLAvailable) {\n+            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n             return ofPredictions(Collections.emptyList());\n         }\n         List<PMMLResource> dmnResources = resources.stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDA1NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482134055", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-09-02T14:54:51Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,23 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());\n+        }\n         List<PMMLResource> dmnResources = resources.stream()\n                 .filter(r -> r.resource().getResourceType() == ResourceType.PMML)\n-                .flatMap(r -> parsePredictions(r.basePath(), Collections.singletonList(r.resource())).stream())\n+                .flatMap(r -> parsePredictions(r.basePath(),\n+                                               Collections.singletonList(r.resource())).stream())\n                 .collect(toList());\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+    public static PredictionCodegen ofJar(boolean isJPMMLAvailable, Path... jarPaths) throws IOException {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "originalCommit": "c4edb4708d1450d4203226f16bc1cbc19b338f24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODA4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482688086", "bodyText": "@danielezonca\nSame as above", "author": "gitgabrio", "createdAt": "2020-09-03T03:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "59089f36679eafc60349f8dd39d4acbabecf2cf4", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex a3b9b27b3d..f4e9f1b2e0 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -93,6 +93,7 @@ public class PredictionCodegen extends AbstractGenerator {\n     public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n                                                          Collection<CollectedResource> resources) {\n         if (isJPMMLAvailable) {\n+            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n             return ofPredictions(Collections.emptyList());\n         }\n         List<PMMLResource> dmnResources = resources.stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDE5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482134193", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-09-02T14:54:59Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -119,7 +129,10 @@ public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n         return ofPredictions(pmmlResources);\n     }\n \n-    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n+    public static PredictionCodegen ofPath(boolean isJPMMLAvailable, Path... paths) throws IOException {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "originalCommit": "c4edb4708d1450d4203226f16bc1cbc19b338f24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODExOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482688118", "bodyText": "@danielezonca\nSame as above", "author": "gitgabrio", "createdAt": "2020-09-03T03:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "59089f36679eafc60349f8dd39d4acbabecf2cf4", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex a3b9b27b3d..f4e9f1b2e0 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -131,6 +133,7 @@ public class PredictionCodegen extends AbstractGenerator {\n \n     public static PredictionCodegen ofPath(boolean isJPMMLAvailable, Path... paths) throws IOException {\n         if (isJPMMLAvailable) {\n+            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n             return ofPredictions(Collections.emptyList());\n         }\n         List<PMMLResource> resources = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDMzMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482134330", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-09-02T14:55:09Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -133,7 +146,10 @@ public static PredictionCodegen ofPath(Path... paths) throws IOException {\n         return ofPredictions(resources);\n     }\n \n-    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n+    public static PredictionCodegen ofFiles(boolean isJPMMLAvailable, Path basePath, List<File> files) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "originalCommit": "c4edb4708d1450d4203226f16bc1cbc19b338f24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODEzNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482688134", "bodyText": "@danielezonca\nSame as above", "author": "gitgabrio", "createdAt": "2020-09-03T03:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDMzMA=="}], "type": "inlineReview", "revised_code": {"commit": "59089f36679eafc60349f8dd39d4acbabecf2cf4", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex a3b9b27b3d..f4e9f1b2e0 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -148,6 +151,7 @@ public class PredictionCodegen extends AbstractGenerator {\n \n     public static PredictionCodegen ofFiles(boolean isJPMMLAvailable, Path basePath, List<File> files) {\n         if (isJPMMLAvailable) {\n+            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n             return ofPredictions(Collections.emptyList());\n         }\n         return ofPredictions(parseFiles(basePath, files));\n"}}, {"oid": "59089f36679eafc60349f8dd39d4acbabecf2cf4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/59089f36679eafc60349f8dd39d4acbabecf2cf4", "message": "[KOGITO-3222] Logging usage of jpmml", "committedDate": "2020-09-03T03:52:21Z", "type": "commit"}, {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-3222", "committedDate": "2020-09-03T03:52:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTMwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484949301", "bodyText": "I would advise merging #741 before. Most of these factory methods have been deleted for good", "author": "evacchi", "createdAt": "2020-09-08T14:07:58Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,25 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n+            return ofPredictions(Collections.emptyList());\n+        }\n         List<PMMLResource> dmnResources = resources.stream()\n                 .filter(r -> r.resource().getResourceType() == ResourceType.PMML)\n-                .flatMap(r -> parsePredictions(r.basePath(), Collections.singletonList(r.resource())).stream())\n+                .flatMap(r -> parsePredictions(r.basePath(),\n+                                               Collections.singletonList(r.resource())).stream())\n                 .collect(toList());\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+    public static PredictionCodegen ofJar(boolean isJPMMLAvailable, Path... jarPaths) throws IOException {", "originalCommit": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NTg0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484985843", "bodyText": "@evacchi\n\ud83d\udc4d", "author": "gitgabrio", "createdAt": "2020-09-08T14:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "553dc45ecc01182b1939ad4491af55bdf944f859", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex f4e9f1b2e0..a9ab4ca880 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -104,67 +91,10 @@ public class PredictionCodegen extends AbstractGenerator {\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(boolean isJPMMLAvailable, Path... jarPaths) throws IOException {\n-        if (isJPMMLAvailable) {\n-            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n-            return ofPredictions(Collections.emptyList());\n-        }\n-        List<PMMLResource> pmmlResources = new ArrayList<>();\n-        for (Path jarPath : jarPaths) {\n-            List<Resource> resources = new ArrayList<>();\n-            try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n-                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n-                while (entries.hasMoreElements()) {\n-                    ZipEntry entry = entries.nextElement();\n-                    ResourceType resourceType = determineResourceType(entry.getName());\n-                    if (resourceType == ResourceType.PMML) {\n-                        InternalResource resource =\n-                                new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n-                        resource.setResourceType(resourceType);\n-                        resource.setSourcePath(entry.getName());\n-                        resources.add(resource);\n-                    }\n-                }\n-            }\n-            pmmlResources.addAll(parsePredictions(jarPath, resources));\n-        }\n-        return ofPredictions(pmmlResources);\n-    }\n-\n-    public static PredictionCodegen ofPath(boolean isJPMMLAvailable, Path... paths) throws IOException {\n-        if (isJPMMLAvailable) {\n-            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n-            return ofPredictions(Collections.emptyList());\n-        }\n-        List<PMMLResource> resources = new ArrayList<>();\n-        for (Path path : paths) {\n-            Path srcPath = Paths.get(path.toString());\n-            try (Stream<Path> filesStream = Files.walk(srcPath)) {\n-                List<File> files = filesStream.filter(p -> p.toString().endsWith(\".pmml\"))\n-                        .map(Path::toFile)\n-                        .collect(Collectors.toList());\n-                resources.addAll(parseFiles(srcPath, files));\n-            }\n-        }\n-        return ofPredictions(resources);\n-    }\n-\n-    public static PredictionCodegen ofFiles(boolean isJPMMLAvailable, Path basePath, List<File> files) {\n-        if (isJPMMLAvailable) {\n-            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n-            return ofPredictions(Collections.emptyList());\n-        }\n-        return ofPredictions(parseFiles(basePath, files));\n-    }\n-\n     private static PredictionCodegen ofPredictions(List<PMMLResource> resources) {\n         return new PredictionCodegen(resources);\n     }\n \n-    private static List<PMMLResource> parseFiles(Path path, List<File> files) {\n-        return parsePredictions(path, files.stream().map(FileSystemResource::new).collect(toList()));\n-    }\n-\n     private static List<PMMLResource> parsePredictions(Path path, List<Resource> resources) {\n         final InternalKnowledgeBase knowledgeBase = new KnowledgeBaseImpl(\"PMML\", null);\n         KnowledgeBuilderImpl kbuilderImpl = new KnowledgeBuilderImpl(knowledgeBase);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTk2OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484949969", "bodyText": "is the rest of this file just being reformatted or...?", "author": "evacchi", "createdAt": "2020-09-08T14:08:51Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -198,14 +217,15 @@ public PredictionContainerGenerator moduleGenerator() {\n         if (resources.isEmpty()) {\n             return Collections.emptyList();\n         }\n-        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n-                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>(KogitoPackageSources::dumpSources,", "originalCommit": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NDc2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484984761", "bodyText": "@evacchi\nYup", "author": "gitgabrio", "createdAt": "2020-09-08T14:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTk2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1MTE1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484951154", "bodyText": "all the remaining changes in this file are just whitespace changes right?", "author": "evacchi", "createdAt": "2020-09-08T14:10:30Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -198,14 +217,15 @@ public PredictionContainerGenerator moduleGenerator() {\n         if (resources.isEmpty()) {\n             return Collections.emptyList();\n         }\n-        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n-                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>(KogitoPackageSources::dumpSources,\n+                                                                                     new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false);\n         CompositeKnowledgeBuilder batch = modelBuilder.batch();\n         for (PMMLResource resource : resources) {\n             List<KiePMMLModel> kiepmmlModels = resource.getKiePmmlModels();\n             for (KiePMMLModel model : kiepmmlModels) {\n                 if (model.getName() == null || model.getName().isEmpty()) {\n-                    String errorMessage = String.format(\"Model name should not be empty inside %s\", resource.getModelPath());\n+                    String errorMessage = String.format(\"Model name should not be empty inside %s\",", "originalCommit": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NjgxNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484976814", "bodyText": "@evacchi\nYes", "author": "gitgabrio", "createdAt": "2020-09-08T14:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1MTE1NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "553dc45ecc01182b1939ad4491af55bdf944f859", "url": "https://github.com/kiegroup/kogito-runtimes/commit/553dc45ecc01182b1939ad4491af55bdf944f859", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-3222\n\n# Conflicts:\n#\tkogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n#\tkogito-codegen/src/test/java/org/kie/kogito/codegen/AbstractCodegenTest.java\n#\tkogito-codegen/src/test/java/org/kie/kogito/codegen/prediction/PredictionCodegenTest.java\n#\tkogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java\n#\tkogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "committedDate": "2020-09-09T09:01:26Z", "type": "commit"}, {"oid": "473a4fb1d5be8eff6b9d395790145ad4d2802a12", "url": "https://github.com/kiegroup/kogito-runtimes/commit/473a4fb1d5be8eff6b9d395790145ad4d2802a12", "message": "[KOGITO-3222] Merged with master. Removing snapshot dependency", "committedDate": "2020-09-09T09:50:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzAwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r485563001", "bodyText": "Why this new line?", "author": "jiripetrlik", "createdAt": "2020-09-09T12:14:03Z", "path": "drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PmmlPredictionModelTest.java", "diffHunk": "@@ -93,6 +94,7 @@ private static PMMLRuntime getPMMLRuntime() {\n             public PMML4Result evaluate(String s, PMMLContext pmmlContext) {\n                 return PMML_4_RESULT;\n             }\n+", "originalCommit": "473a4fb1d5be8eff6b9d395790145ad4d2802a12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NTk2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r485565964", "bodyText": "@jiripetrlik\nRemoved", "author": "gitgabrio", "createdAt": "2020-09-09T12:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a0f60ed4c5d803e03c315ef1a9d06b27427cc41", "chunk": "diff --git a/drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PmmlPredictionModelTest.java b/drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PmmlPredictionModelTest.java\nindex 67f7e065b6..6aed1dd675 100644\n--- a/drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PmmlPredictionModelTest.java\n+++ b/drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PmmlPredictionModelTest.java\n\n@@ -94,7 +94,6 @@ class PmmlPredictionModelTest {\n             public PMML4Result evaluate(String s, PMMLContext pmmlContext) {\n                 return PMML_4_RESULT;\n             }\n-\n         };\n     }\n \n"}}, {"oid": "9a0f60ed4c5d803e03c315ef1a9d06b27427cc41", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9a0f60ed4c5d803e03c315ef1a9d06b27427cc41", "message": "[KOGITO-3222] Removed empty line", "committedDate": "2020-09-09T12:18:43Z", "type": "commit"}]}