{"pr_number": 486, "pr_title": "KOGITO-2040, KOGITO-2041, KOGITO-2042, KOGITO-2043, KOGITO-2044", "pr_createdAt": "2020-04-29T16:19:39Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/486", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQzNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417707435", "bodyText": "can this be reduced a bit using a more functional style?", "author": "cristianonicolai", "createdAt": "2020-04-30T01:37:54Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2NzY5MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417767691", "bodyText": "suggestions welcome as I was not able to find better way for it....", "author": "mswiderski", "createdAt": "2020-04-30T05:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\nindex 878d97bd05..4f3cdf55b4 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n\n@@ -131,7 +130,7 @@ public class VertxJobsServiceTest {\n         Job job = new Job();\n         job.setId(\"123\");\n         job.setExpirationTime(ZonedDateTime.now());\n-        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n         when(asyncResult.succeeded()).thenReturn(true);\n         when(asyncResult.result()).thenReturn(response);\n         when(response.statusCode()).thenReturn(200);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQ2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417707462", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n          \n          \n            \n                    AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);", "author": "cristianonicolai", "createdAt": "2020-04-30T01:38:02Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDI5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780298", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-04-30T06:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\nindex 878d97bd05..4f3cdf55b4 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n\n@@ -131,7 +130,7 @@ public class VertxJobsServiceTest {\n         Job job = new Job();\n         job.setId(\"123\");\n         job.setExpirationTime(ZonedDateTime.now());\n-        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n         when(asyncResult.succeeded()).thenReturn(true);\n         when(asyncResult.result()).thenReturn(response);\n         when(response.statusCode()).thenReturn(200);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTc5Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417715796", "bodyText": "could be check is equals to job.getExpirationTime?", "author": "cristianonicolai", "createdAt": "2020-04-30T02:11:49Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDMzNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780334", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-04-30T06:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\nindex 878d97bd05..4f3cdf55b4 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n\n@@ -131,7 +130,7 @@ public class VertxJobsServiceTest {\n         Job job = new Job();\n         job.setId(\"123\");\n         job.setExpirationTime(ZonedDateTime.now());\n-        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n         when(asyncResult.succeeded()).thenReturn(true);\n         when(asyncResult.result()).thenReturn(response);\n         when(response.statusCode()).thenReturn(200);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTg5Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417715896", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n          \n          \n            \n                    AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);", "author": "cristianonicolai", "createdAt": "2020-04-30T02:12:19Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();\n+        verify(webClient).get(\"/jobs/123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDQyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780425", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-04-30T06:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyODYwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420828606", "bodyText": "Still present as it seems.", "author": "MarianMacik", "createdAt": "2020-05-06T14:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MjgxNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421262814", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-05-07T06:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\nindex 878d97bd05..4f3cdf55b4 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n\n@@ -131,7 +130,7 @@ public class VertxJobsServiceTest {\n         Job job = new Job();\n         job.setId(\"123\");\n         job.setExpirationTime(ZonedDateTime.now());\n-        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n         when(asyncResult.succeeded()).thenReturn(true);\n         when(asyncResult.result()).thenReturn(response);\n         when(response.statusCode()).thenReturn(200);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNjE0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417716143", "bodyText": "job variable not used I guess in this case", "author": "cristianonicolai", "createdAt": "2020-04-30T02:13:15Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();\n+        verify(webClient).get(\"/jobs/123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDM4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780382", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-04-30T06:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNjE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\nindex 878d97bd05..4f3cdf55b4 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n\n@@ -131,7 +130,7 @@ public class VertxJobsServiceTest {\n         Job job = new Job();\n         job.setId(\"123\");\n         job.setExpirationTime(ZonedDateTime.now());\n-        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n         when(asyncResult.succeeded()).thenReturn(true);\n         when(asyncResult.result()).thenReturn(response);\n         when(response.statusCode()).thenReturn(200);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNjM2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417716367", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Job foundJob = restTemplate.getForObject(getJobsServiceUri() + \"/{id}\", Job.class, id);\n          \n          \n            \n                        return restTemplate.getForObject(getJobsServiceUri() + \"/{id}\", Job.class, id).getExpirationTime();", "author": "cristianonicolai", "createdAt": "2020-04-30T02:14:06Z", "path": "addons/jobs/jobs-management-springboot-addon/src/main/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsService.java", "diffHunk": "@@ -100,8 +104,21 @@ public boolean cancelJob(String id) {\n             \n             return true;\n         } catch (RestClientException e) {\n-            LOGGER.debug(\"Exceltion thrown during canceling of job {}\", id, e);\n+            LOGGER.debug(\"Exception thrown during canceling of job {}\", id, e);\n             return false;\n         }\n     }\n+\n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        try {\n+            Job foundJob = restTemplate.getForObject(getJobsServiceUri() + \"/{id}\", Job.class, id);", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDQ4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780486", "bodyText": "refactored", "author": "mswiderski", "createdAt": "2020-04-30T06:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNjM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/addons/jobs/jobs-management-springboot-addon/src/main/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsService.java b/addons/jobs/jobs-management-springboot-addon/src/main/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsService.java\nindex cd0e19ca90..1391e140a9 100644\n--- a/addons/jobs/jobs-management-springboot-addon/src/main/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsService.java\n+++ b/addons/jobs/jobs-management-springboot-addon/src/main/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsService.java\n\n@@ -112,9 +112,7 @@ public class SpringRestJobsService extends RestJobsService {\n     @Override\n     public ZonedDateTime getScheduledTime(String id) {\n         try {\n-            Job foundJob = restTemplate.getForObject(getJobsServiceUri() + \"/{id}\", Job.class, id);\n-            \n-            return foundJob.getExpirationTime();\n+            return restTemplate.getForObject(getJobsServiceUri() + \"/{id}\", Job.class, id).getExpirationTime();\n         } catch (NotFound e) {\n             throw new JobNotFoundException(id);\n         } catch (RestClientException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzA4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417717087", "bodyText": "equals to job.getExpirationTime?", "author": "cristianonicolai", "createdAt": "2020-04-30T02:17:08Z", "path": "addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java", "diffHunk": "@@ -86,4 +90,28 @@ void testCancelJob() {\n         tested.cancelJob(\"123\");\n         verify(restTemplate).delete(tested.getJobsServiceUri() + \"/{id}\", \"123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime() {\n+        \n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        \n+        when(restTemplate.getForObject(any(), any(), anyString())).thenReturn(job);\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDUyMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780520", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-04-30T06:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java b/addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java\nindex c100423f23..6ee43bcb3e 100644\n--- a/addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java\n\n@@ -101,7 +101,7 @@ public class SpringRestJobsServiceTest {\n         when(restTemplate.getForObject(any(), any(), anyString())).thenReturn(job);\n         \n         ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n-        assertThat(scheduledTime).isNotNull();\n+        assertThat(scheduledTime).isEqualTo(job.getExpirationTime());\n         verify(restTemplate).getForObject(tested.getJobsServiceUri() + \"/{id}\", Job.class, \"123\");\n     }\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzE2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417717166", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThatThrownBy(() -> tested.getScheduledTime(\"123\"))\n          \n          \n            \n                    assertThatThrownBy(() -> tested.getScheduledTime(\"123\")).isInstanceOf(JobNotFoundException.class);", "author": "cristianonicolai", "createdAt": "2020-04-30T02:17:30Z", "path": "addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java", "diffHunk": "@@ -86,4 +90,28 @@ void testCancelJob() {\n         tested.cancelJob(\"123\");\n         verify(restTemplate).delete(tested.getJobsServiceUri() + \"/{id}\", \"123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime() {\n+        \n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        \n+        when(restTemplate.getForObject(any(), any(), anyString())).thenReturn(job);\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();\n+        verify(restTemplate).getForObject(tested.getJobsServiceUri() + \"/{id}\", Job.class, \"123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound() {\n+\n+        when(restTemplate.getForObject(any(), any(), anyString())).thenThrow(NotFound.class);\n+        \n+        assertThatThrownBy(() -> tested.getScheduledTime(\"123\"))", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDU4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780581", "bodyText": "refactored", "author": "mswiderski", "createdAt": "2020-04-30T06:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java b/addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java\nindex c100423f23..6ee43bcb3e 100644\n--- a/addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java\n\n@@ -101,7 +101,7 @@ public class SpringRestJobsServiceTest {\n         when(restTemplate.getForObject(any(), any(), anyString())).thenReturn(job);\n         \n         ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n-        assertThat(scheduledTime).isNotNull();\n+        assertThat(scheduledTime).isEqualTo(job.getExpirationTime());\n         verify(restTemplate).getForObject(tested.getJobsServiceUri() + \"/{id}\", Job.class, \"123\");\n     }\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODA0OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417718048", "bodyText": "@mswiderski is expected that only one instance of ContextContainer?", "author": "cristianonicolai", "createdAt": "2020-04-30T02:21:16Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -661,4 +663,28 @@ protected String retrieveDataType(String itemSubjectRef, String dtype, Extensibl\n         \n         return null;\n     }\n+    \n+    \n+    /**\n+     * Finds the right variable by its name to make sure that when given as id it will be also matched\n+     * @param variableName name or id of the variable\n+     * @param parser parser instance\n+     * @return returns found variable name or given 'variableName' otherwise\n+     */\n+    protected String findVariable(String variableName, final ExtensibleXmlParser parser) {\n+        if (variableName == null) {\n+            return null;\n+        }\n+        List<?> parents = parser.getParents();\n+        \n+        for (Object parent : parents) {\n+            if (parent instanceof ContextContainer) {", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc3Mzg4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417773886", "bodyText": "there could be more than one ContextContainer as there can be subprocesses if that's what you mean", "author": "mswiderski", "createdAt": "2020-04-30T06:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java\nindex 5831ef4053..153d4c2de3 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java\n\n@@ -687,4 +687,5 @@ public abstract class AbstractNodeHandler extends BaseAbstractHandler implements\n         \n         return variableName;\n     }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODI3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417718279", "bodyText": "can you add the import for org.jbpm.workflow.core.node.Transformation", "author": "cristianonicolai", "createdAt": "2020-04-30T02:22:12Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -150,11 +151,12 @@ public void handleSignalNode(final Node node, final Element element, final Strin\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-\n-                String signalExpression = getSignalExpression(endNode, signalName, variable);\n-\n+                \n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)endNode.getMetaData().get(\"Transformation\")));", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\nindex 6acd711d62..823232e73e 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n\n@@ -153,7 +154,7 @@ public class EndEventHandler extends AbstractNodeHandler {\n                 }\n                 \n                 DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)endNode.getMetaData().get(\"Transformation\")));\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (Transformation)endNode.getMetaData().get(\"Transformation\")));\n                 \n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n                 actions.add(action);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODUwMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417718500", "bodyText": "would this mean that mvel expressions would not work any more, something that can be dropped?", "author": "cristianonicolai", "createdAt": "2020-04-30T02:23:06Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -150,11 +151,12 @@ public void handleSignalNode(final Node node, final Element element, final Strin\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-\n-                String signalExpression = getSignalExpression(endNode, signalName, variable);\n-\n+                \n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)endNode.getMetaData().get(\"Transformation\")));\n+                \n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n-                actions.add(new DroolsConsequenceAction(\"mvel\",signalExpression));", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc3MzAxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417773019", "bodyText": "move should not be used anyway but in reality it does not really matter as java class was generated for it anyway", "author": "mswiderski", "createdAt": "2020-04-30T06:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\nindex 6acd711d62..823232e73e 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n\n@@ -153,7 +154,7 @@ public class EndEventHandler extends AbstractNodeHandler {\n                 }\n                 \n                 DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)endNode.getMetaData().get(\"Transformation\")));\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (Transformation)endNode.getMetaData().get(\"Transformation\")));\n                 \n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n                 actions.add(action);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODcwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417718709", "bodyText": "add import for org.jbpm.workflow.core.node.Transformation", "author": "cristianonicolai", "createdAt": "2020-04-30T02:23:56Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -207,18 +210,9 @@ public void handleSignalNode(final Node node, final Element element,\n \t\t\t\t    signalName = \"ASYNC-\" + signalName;\n \t\t\t\t}\n \n-\t\t\t\tString signalExpression = getSignalExpression(actionNode, signalName, \"tVariable\");\n-\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"+\n-\t\t\t\t\t\t\t\tsignalExpression));\n+\t\t\t\tDroolsConsequenceAction action =  new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) actionNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)actionNode.getMetaData().get(\"Transformation\")));", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTA0OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417719048", "bodyText": "review code format also please", "author": "cristianonicolai", "createdAt": "2020-04-30T02:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 9bdd32ad88..c6eac145b9 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -206,14 +206,14 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n                 actionNode.setMetaData(\"Variable\", variable);\n \n \t\t\t\t// check if signal should be send async\n-\t\t\t\tif (dataInputs.containsValue(\"async\")) {\n-\t\t\t\t    signalName = \"ASYNC-\" + signalName;\n-\t\t\t\t}\n+                if (dataInputs.containsValue(\"async\")) {\n+                    signalName = \"ASYNC-\" + signalName;\n+                }\n \n-\t\t\t\tDroolsConsequenceAction action =  new DroolsConsequenceAction(\"java\", \"\");\n-                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) actionNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)actionNode.getMetaData().get(\"Transformation\")));\n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) actionNode.getMetaData(\"customScope\"), (Transformation) actionNode.getMetaData().get(\"Transformation\")));\n                 actionNode.setAction(action);\n-\t\t\t}\n+            }\n \t\t\txmlNode = xmlNode.getNextSibling();\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTExMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417719110", "bodyText": "code format", "author": "cristianonicolai", "createdAt": "2020-04-30T02:25:42Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -259,34 +253,10 @@ public void handleMessageNode(final Node node, final Element element,\n \t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n \t\t\t\tactionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n \t\t\t\tactionNode.setMetaData(\"TriggerRef\", message.getName());\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t+ \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setName(\\\"Send Task\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setParameter(\\\"MessageType\\\", \\\"\"\n-\t\t\t\t\t\t\t\t\t\t+ message.getType()\n-\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ (variable == null ? \"\"\n-\t\t\t\t\t\t\t\t\t\t\t\t: \"workItem.setParameter(\\\"Message\\\", tVariable);\" + EOL)\n-\t\t\t\t\t\t\t\t\t\t+ \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+\t\t\t\t\n+\t\t\t\tDroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new HandleMessageAction(message.getType(), variable, (Transformation) actionNode.getMetaData().get(\"Transformation\")));", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDk3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780975", "bodyText": "Reformatted", "author": "mswiderski", "createdAt": "2020-04-30T06:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTExMA=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 9bdd32ad88..c6eac145b9 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -250,13 +250,13 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n                 if (v != null) {\n                     variable = (String) v.getMetaData(variable);\n                 }\n-\t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n-\t\t\t\tactionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n-\t\t\t\tactionNode.setMetaData(\"TriggerRef\", message.getName());\n-\t\t\t\t\n-\t\t\t\tDroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n+                actionNode.setMetaData(\"MessageType\", message.getType());\n+                actionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n+                actionNode.setMetaData(\"TriggerRef\", message.getName());\n+\n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n                 action.setMetaData(\"Action\", new HandleMessageAction(message.getType(), variable, (Transformation) actionNode.getMetaData().get(\"Transformation\")));\n-\t\t\t\tactionNode.setAction(action);\t\t\t\t\n+                actionNode.setAction(action);\t\t\t\n \t\t\t}\n \t\t\txmlNode = xmlNode.getNextSibling();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTQ1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417719452", "bodyText": "nice!", "author": "cristianonicolai", "createdAt": "2020-04-30T02:27:09Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ScriptTaskHandler.java", "diffHunk": "@@ -38,7 +38,20 @@\n import org.xml.sax.SAXException;\n \n public class ScriptTaskHandler extends AbstractNodeHandler {\n-\t\n+\n+    private static Map<String, String> SUPPORTED_SCRIPT_FORMATS = new HashMap<>();\n+\n+    static {\n+        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.JAVA_LANGUAGE, JavaDialect.ID);\n+        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.JAVASCRIPT_LANGUAGE, \"JavaScript\");\n+        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.FEEL_LANGUAGE, \"FEEL\");", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f120609cdde34d44c6382f6d0fd84581d0559ee2", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ScriptTaskHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ScriptTaskHandler.java\nindex 49239fcd12..9aa021a5e7 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ScriptTaskHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ScriptTaskHandler.java\n\n@@ -38,20 +38,7 @@ import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n \n public class ScriptTaskHandler extends AbstractNodeHandler {\n-\n-    private static Map<String, String> SUPPORTED_SCRIPT_FORMATS = new HashMap<>();\n-\n-    static {\n-        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.JAVA_LANGUAGE, JavaDialect.ID);\n-        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.JAVASCRIPT_LANGUAGE, \"JavaScript\");\n-        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.FEEL_LANGUAGE, \"FEEL\");\n-        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.FEEL_LANGUAGE_SHORT, \"FEEL\");\n-    }\n-\n-    public static void registerSupportedScriptFormat(String language, String dialect) {\n-        SUPPORTED_SCRIPT_FORMATS.put(language, dialect);\n-    }\n-\n+\t\n \tprivate DataTransformerRegistry transformerRegistry = DataTransformerRegistry.get();\n     \n     protected Node createNode(Attributes attrs) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTc3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417719778", "bodyText": "use a collect to map maybe?", "author": "cristianonicolai", "createdAt": "2020-04-30T02:28:37Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/kie/kogito/process/bpmn2/BpmnVariables.java", "diffHunk": "@@ -54,8 +69,23 @@ public void fromMap(Map<String, Object> vs) {\n         variables.putAll(vs);\n     }\n \n+    public List<Variable> definitions() {\n+        return definitions;\n+    }\n+\n     @Override\n     public Map<String, Object> toMap() {\n         return Collections.unmodifiableMap(variables);\n     }\n+    \n+    public Map<String, Object> toMap(Predicate<Variable> filter) {\n+        Map<String, Object> filteredVariables = new HashMap<>();\n+        \n+        definitions.stream()\n+            .filter(filter)\n+            .filter(v -> variables.containsKey(v.getName()))\n+            .forEach(v -> filteredVariables.put(v.getName(), this.variables.get(v.getName())));       ", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/kie/kogito/process/bpmn2/BpmnVariables.java b/jbpm/jbpm-bpmn2/src/main/java/org/kie/kogito/process/bpmn2/BpmnVariables.java\nindex cdc52b83b9..dd553bf1b2 100644\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/kie/kogito/process/bpmn2/BpmnVariables.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/kie/kogito/process/bpmn2/BpmnVariables.java\n\n@@ -79,13 +80,10 @@ public class BpmnVariables implements Model {\n     }\n     \n     public Map<String, Object> toMap(Predicate<Variable> filter) {\n-        Map<String, Object> filteredVariables = new HashMap<>();\n         \n-        definitions.stream()\n+        return definitions.stream()\n             .filter(filter)\n             .filter(v -> variables.containsKey(v.getName()))\n-            .forEach(v -> filteredVariables.put(v.getName(), this.variables.get(v.getName())));       \n-        \n-        return filteredVariables;\n+            .collect(Collectors.toMap(v -> v.getName(), v -> v.getName()));               \n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDMxOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417720318", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (id.equals(nameOrId) || name.equals(nameOrId)) {\n          \n          \n            \n                    return (id.equals(nameOrId) || name.equals(nameOrId))", "author": "cristianonicolai", "createdAt": "2020-04-30T02:30:31Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -164,4 +163,12 @@ public String toString() {\n     public boolean hasTag(String tagName) {\n         return getTags().contains(tagName);\n     }\n+    \n+    public boolean matchyIdOrName(String nameOrId) {\n+        if (id.equals(nameOrId) || name.equals(nameOrId)) {", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java\nindex 73d89c8fb1..47e2a94b1f 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java\n\n@@ -165,10 +166,6 @@ public class Variable implements TypeObject, ValueObject, Serializable {\n     }\n     \n     public boolean matchyIdOrName(String nameOrId) {\n-        if (id.equals(nameOrId) || name.equals(nameOrId)) {\n-            return true;\n-        }\n-        \n-        return false;\n+        return (id.equals(nameOrId) || name.equals(nameOrId));        \n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDQ1OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417720459", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \t\tObject parameterValue = transformer.transform(transformation.getCompiledExpression(), parameters);\n          \n          \n            \n                \t\treturn transformer.transform(transformation.getCompiledExpression(), parameters);", "author": "cristianonicolai", "createdAt": "2020-04-30T02:31:01Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java", "diffHunk": "@@ -48,7 +49,14 @@ public Object transformEvent(Object event) {\n \t\t}\n \t\tDataTransformer transformer = DataTransformerRegistry.get().find(transformation.getLanguage());\n     \tif (transformer != null) {\n-    \t\tObject parameterValue = transformer.transform(transformation.getCompiledExpression(), Collections.singletonMap(name, event));\n+    \t    Map<String, Object> parameters = null;\n+    \t    if (event instanceof Map) {\n+    \t        parameters = (Map) event;\n+    \t    } else {\n+    \t        parameters = Collections.singletonMap(name, event);\n+    \t    }\n+    \t    \n+    \t\tObject parameterValue = transformer.transform(transformation.getCompiledExpression(), parameters);", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java\nindex 958cb8b190..cc5d0c1d2e 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java\n\n@@ -42,7 +42,8 @@ public class EventTransformerImpl implements EventTransformer, Serializable {\n \t\t}\n \t}\n \n-\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @Override\n \tpublic Object transformEvent(Object event) {\n \t\tif (event == null || transformation == null) {\n \t\t\treturn event;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDkwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417720907", "bodyText": "add some imports where applicable", "author": "cristianonicolai", "createdAt": "2020-04-30T02:32:44Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/actions/HandleEscalationAction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.actions;\n+\n+import java.io.Serializable;\n+\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.context.exception.ExceptionScopeInstance;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.instance.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class HandleEscalationAction implements Action, Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String faultName;\n+    private String variableName;\n+\n+    public HandleEscalationAction(String faultName, String variableName) {\n+        this.faultName = faultName;\n+        this.variableName = variableName;\n+    }\n+\n+    public void execute(ProcessContext context) throws Exception {\n+        ExceptionScopeInstance scopeInstance = (ExceptionScopeInstance) ((NodeInstance) context.getNodeInstance()).resolveContextInstance(org.jbpm.process.core.context.exception.ExceptionScope.EXCEPTION_SCOPE,", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/actions/HandleEscalationAction.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/actions/HandleEscalationAction.java\nindex 49fd7eb954..4ac5c5a69d 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/actions/HandleEscalationAction.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/actions/HandleEscalationAction.java\n\n@@ -17,7 +17,9 @@ package org.jbpm.process.instance.impl.actions;\n \n import java.io.Serializable;\n \n+import org.jbpm.process.core.context.exception.ExceptionScope;\n import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.ProcessInstance;\n import org.jbpm.process.instance.context.exception.ExceptionScopeInstance;\n import org.jbpm.process.instance.impl.Action;\n import org.jbpm.workflow.instance.NodeInstance;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMTUyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417721527", "bodyText": "code formatting", "author": "cristianonicolai", "createdAt": "2020-04-30T02:35:23Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -60,21 +60,21 @@\n \n public abstract class AbstractProcessInstance<T extends Model> implements ProcessInstance<T> {\n \n-    private final T variables;\n-    private final AbstractProcess<T> process;\n-    private final ProcessRuntime rt;\n-    private org.kie.api.runtime.process.ProcessInstance legacyProcessInstance;\n-    \n-    private Integer status;\n-    private String id;\n-    private String businessKey;\n-    private String description;\n-    \n-    private ProcessError processError;\n-    \n-    private Supplier<org.kie.api.runtime.process.ProcessInstance> reloadSupplier;\n-    \n-    private CompletionEventListener completionEventListener = new CompletionEventListener();\n+\tprotected final T variables;", "originalCommit": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4MDYzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417780638", "bodyText": "reformatted", "author": "mswiderski", "createdAt": "2020-04-30T06:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMTUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\nindex 94f1bf9fd8..bac522635d 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n\n@@ -60,7 +60,7 @@ import org.kie.kogito.services.uow.ProcessInstanceWorkUnit;\n \n public abstract class AbstractProcessInstance<T extends Model> implements ProcessInstance<T> {\n \n-\tprotected final T variables;\n+    protected final T variables;\n     protected final AbstractProcess<T> process;\n     protected final ProcessRuntime rt;\n     protected org.kie.api.runtime.process.ProcessInstance legacyProcessInstance;\n"}}, {"oid": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "url": "https://github.com/kiegroup/kogito-runtimes/commit/621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation", "committedDate": "2020-04-30T06:21:53Z", "type": "forcePushed"}, {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1c24d20a97faf04eea67f33beefc67e1b6c265de", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation", "committedDate": "2020-04-30T07:21:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwNjU0OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420306548", "bodyText": "you can extract the promise.future() into a variable to be reused.", "author": "tiagodolphine", "createdAt": "2020-05-05T18:07:16Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java", "diffHunk": "@@ -134,4 +141,24 @@ public boolean cancelJob(String id) {\n         \n         return true;\n     }\n+\n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        Promise<Job> promise = Promise.promise();\n+        \n+        client.get(JOBS_PATH + \"/\" + id).send(res -> {\n+            if (res.succeeded() && res.result().statusCode() == 200) {\n+                promise.complete(res.result().bodyAsJson(Job.class));\n+            } else if (res.succeeded() && res.result().statusCode() == 404) {\n+                promise.fail(new JobNotFoundException(id));\n+            } else {\n+                promise.fail(new RuntimeException(\"Unable to find job with id \" + id));\n+            }\n+        });\n+        if (promise.future().result() != null) {", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3OTY2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420679666", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-05-06T10:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwNjU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java b/addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java\nindex 17e233912f..82ea2a1c82 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java\n\n@@ -155,10 +156,11 @@ public class VertxJobsService extends RestJobsService {\n                 promise.fail(new RuntimeException(\"Unable to find job with id \" + id));\n             }\n         });\n-        if (promise.future().result() != null) {\n-            return promise.future().result().getExpirationTime();\n+        Future<Job> future = promise.future();\n+        if (future.result() != null) {\n+            return future.result().getExpirationTime();\n         } else {\n-            throw new RuntimeException(promise.future().cause());\n+            throw new RuntimeException(future.cause());\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTExNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420309116", "bodyText": "in case scheduled is null, maybe it is worth to check and throw a NotFound exception.", "author": "tiagodolphine", "createdAt": "2020-05-05T18:11:34Z", "path": "api/kogito-services/src/main/java/org/kie/services/jobs/impl/InMemoryJobService.java", "diffHunk": "@@ -91,6 +92,20 @@ public boolean cancelJob(String id) {\n         return false;\n     }\n \n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        if (scheduledJobs.containsKey(id)) {\n+             ScheduledFuture<?> scheduled = scheduledJobs.get(id);\n+             \n+             long remainingTime = scheduled.getDelay(TimeUnit.MILLISECONDS);", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4MDM2NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420680365", "bodyText": "I kept it as is as there is no JobNotFoundException available as this is in the api module while the exception is in the jobs-api. Note that this is mainly for test purpose so should not be used in production like scenarios.", "author": "mswiderski", "createdAt": "2020-05-06T10:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTExNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjMyMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420312322", "bodyText": "maybe extract this block of code to build the action into a common/super class and have the SignalProcessInstanceAction, HandleMessageAction... instance as a parameter to be added to metadata, a more generic attribute like Action interface.", "author": "tiagodolphine", "createdAt": "2020-05-05T18:16:58Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -150,11 +152,12 @@ public void handleSignalNode(final Node node, final Element element, final Strin\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-\n-                String signalExpression = getSignalExpression(endNode, signalName, variable);\n-\n+                \n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\nindex 823232e73e..4c465073a0 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n\n@@ -153,8 +155,7 @@ public class EndEventHandler extends AbstractNodeHandler {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n                 \n-                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (Transformation)endNode.getMetaData().get(\"Transformation\")));\n+                DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (Transformation)endNode.getMetaData().get(\"Transformation\")));\n                 \n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n                 actions.add(action);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzI3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420313273", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:18:27Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -186,17 +189,11 @@ public void handleMessageNode(final Node node, final Element element, final Stri\n                 endNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n                 endNode.setMetaData(\"TriggerRef\", message.getName());\n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n-\n-                actions.add(new DroolsConsequenceAction(\"java\",\n-                    \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\" + EOL +\n-                    \"workItem.setName(\\\"Send Task\\\");\" + EOL +\n-                    \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\" + EOL +\n-                    \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\" + EOL +\n-                    \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\" + EOL +\n-                    \"workItem.setParameter(\\\"MessageType\\\", \\\"\" + message.getType() + \"\\\");\" + EOL +\n-                    (variable == null ? \"\" : \"workItem.setParameter(\\\"Message\\\", \" + variable + \");\" + EOL) +\n-\t\t\t\t\t\"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\" + EOL +\n-                    \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+                \n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\nindex 823232e73e..4c465073a0 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n\n@@ -190,8 +191,7 @@ public class EndEventHandler extends AbstractNodeHandler {\n                 endNode.setMetaData(\"TriggerRef\", message.getName());\n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n                 \n-                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-                action.setMetaData(\"Action\", new HandleMessageAction(message.getType(), variable));\n+                DroolsConsequenceAction action = createJavaAction(new HandleMessageAction(message.getType(), variable));\n                 \n                 actions.add(action);\n                 endNode.setActions(EndNode.EVENT_NODE_ENTER, actions);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzU5OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420313599", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:18:59Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -203,23 +210,14 @@ public void handleSignalNode(final Node node, final Element element,\n                 actionNode.setMetaData(\"Variable\", variable);\n \n \t\t\t\t// check if signal should be send async\n-\t\t\t\tif (dataInputs.containsValue(\"async\")) {\n-\t\t\t\t    signalName = \"ASYNC-\" + signalName;\n-\t\t\t\t}\n+                if (dataInputs.containsValue(\"async\")) {\n+                    signalName = \"ASYNC-\" + signalName;\n+                }\n \n-\t\t\t\tString signalExpression = getSignalExpression(actionNode, signalName, \"tVariable\");\n-\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"+\n-\t\t\t\t\t\t\t\tsignalExpression));\n-\t\t\t}\n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 5282d52e16..66578427cb 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -214,8 +216,7 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n \n-                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-                action.setMetaData(ACTION_KEY, new SignalProcessInstanceAction(signalName, variable, (String) actionNode.getMetaData(\"customScope\"), (Transformation) actionNode.getMetaData().get(TRANSFORMATION_KEY)));\n+                DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(signalName, variable, (String) actionNode.getMetaData(\"customScope\"), (Transformation) actionNode.getMetaData().get(TRANSFORMATION_KEY)));\n                 actionNode.setAction(action);\n             }\n \t\t\txmlNode = xmlNode.getNextSibling();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzk5Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420313996", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:19:37Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -251,42 +249,18 @@ public void handleMessageNode(final Node node, final Element element,\n \t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\"Could not find message \" + messageRef);\n \t\t\t\t}\n-                String variable = (String) actionNode.getMetaData(\"MappingVariable\");\n+                String variable = (String) actionNode.getMetaData(MAPPING_VARIABLE_KEY);\n                 Variable v = (Variable) ((ProcessBuildData) parser.getData()).getMetaData(\"Variable\");\n                 if (v != null) {\n                     variable = (String) v.getMetaData(variable);\n                 }\n-\t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n-\t\t\t\tactionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n-\t\t\t\tactionNode.setMetaData(\"TriggerRef\", message.getName());\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t+ \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setName(\\\"Send Task\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setParameter(\\\"MessageType\\\", \\\"\"\n-\t\t\t\t\t\t\t\t\t\t+ message.getType()\n-\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ (variable == null ? \"\"\n-\t\t\t\t\t\t\t\t\t\t\t\t: \"workItem.setParameter(\\\"Message\\\", tVariable);\" + EOL)\n-\t\t\t\t\t\t\t\t\t\t+ \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+                actionNode.setMetaData(\"MessageType\", message.getType());\n+                actionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n+                actionNode.setMetaData(\"TriggerRef\", message.getName());\n+\n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 5282d52e16..66578427cb 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -258,8 +259,7 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n                 actionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n                 actionNode.setMetaData(\"TriggerRef\", message.getName());\n \n-                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-                action.setMetaData(ACTION_KEY, new HandleMessageAction(message.getType(), variable, (Transformation) actionNode.getMetaData().get(TRANSFORMATION_KEY)));\n+                DroolsConsequenceAction action = createJavaAction(new HandleMessageAction(message.getType(), variable, (Transformation) actionNode.getMetaData().get(TRANSFORMATION_KEY)));\n                 actionNode.setAction(action);\t\t\t\n \t\t\t}\n \t\t\txmlNode = xmlNode.getNextSibling();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDE1NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314155", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:19:53Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -312,36 +286,17 @@ public void handleEscalationNode(final Node node, final Element element,\n \t\t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\t\"No escalations found\");\n \t\t\t\t\t}\n-\t\t\t\t\tEscalation escalation = escalations.get(escalationRef);\n-\t\t\t\t\tif (escalation == null) {\n-\t\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\t\t\"Could not find escalation \" + escalationRef);\n-\t\t\t\t\t}\n-\t\t\t\t\tString faultName = escalation.getEscalationCode();\n-\t\t\t\t\tString variable = (String) actionNode.getMetaData(\"MappingVariable\");\n-\t\t\t\t\tactionNode\n-\t\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\t\"org.jbpm.process.instance.context.exception.ExceptionScopeInstance scopeInstance = (org.jbpm.process.instance.context.exception.ExceptionScopeInstance) ((org.jbpm.workflow.instance.NodeInstance) kcontext.getNodeInstance()).resolveContextInstance(org.jbpm.process.core.context.exception.ExceptionScope.EXCEPTION_SCOPE, \\\"\"\n-\t\t\t\t\t\t\t\t\t\t\t+ faultName\n-\t\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t\t+ \"if (scopeInstance != null) {\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t\t+ \" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"  scopeInstance.handleException(\\\"\"\n-\t\t\t\t\t\t\t\t\t\t\t+ faultName\n-\t\t\t\t\t\t\t\t\t\t\t+ \"\\\", tVariable);\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t\t+ \"} else {\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t\t+ \"    ((org.jbpm.process.instance.ProcessInstance) kcontext.getProcessInstance()).setState(org.jbpm.process.instance.ProcessInstance.STATE_ABORTED);\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL + \"}\"));\n+                    Escalation escalation = escalations.get(escalationRef);\n+                    if (escalation == null) {\n+                        throw new IllegalArgumentException(\n+                                                           \"Could not find escalation \" + escalationRef);\n+                    }\n+                    String faultName = escalation.getEscalationCode();\n+                    String variable = (String) actionNode.getMetaData(MAPPING_VARIABLE_KEY);\n+\n+                    DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 5282d52e16..66578427cb 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -294,8 +294,7 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n                     String faultName = escalation.getEscalationCode();\n                     String variable = (String) actionNode.getMetaData(MAPPING_VARIABLE_KEY);\n \n-                    DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-                    action.setMetaData(ACTION_KEY, new HandleEscalationAction(faultName, variable));\n+                    DroolsConsequenceAction action = createJavaAction(new HandleEscalationAction(faultName, variable));\n                     actionNode.setAction(action);\n \t\t\t\t} else {\n \t\t\t\t    throw new IllegalArgumentException(\"General escalation is not yet supported\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDQyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314427", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:20:19Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -403,9 +404,9 @@ private static void linkBoundaryEscalationEvent(NodeContainer nodeContainer, Nod\n         \n         String variable = ((EventNode)node).getVariableName();\n         ActionExceptionHandler exceptionHandler = new ActionExceptionHandler();\n-        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \n-                    PROCESS_INSTANCE_SIGNAL_EVENT + \"Escalation-\" + attachedTo + \"-\" + escalationCode + \"\\\", kcontext.getVariable(\\\"\" + variable +\"\\\"));\");\n+        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\nindex 88f1e4e5f2..6db7f95a09 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n\n@@ -404,9 +405,7 @@ public class ProcessHandler extends BaseAbstractHandler implements Handler {\n         \n         String variable = ((EventNode)node).getVariableName();\n         ActionExceptionHandler exceptionHandler = new ActionExceptionHandler();\n-        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-        \n-        action.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Escalation-\" + attachedTo + \"-\" + escalationCode, variable, SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+        DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(\"Escalation-\" + attachedTo + \"-\" + escalationCode, variable, SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n         exceptionHandler.setAction(action);\n         exceptionHandler.setFaultVariable(variable);\n         exceptionScope.setExceptionHandler(escalationCode, exceptionHandler);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDQ3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314477", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:20:25Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -441,17 +442,9 @@ private static void linkBoundaryErrorEvent(NodeContainer nodeContainer, Node nod\n         \n         String variable = ((EventNode)node).getVariableName();\n \n-        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\",                   \n-                    PROCESS_INSTANCE_SIGNAL_EVENT + \"Error-\" + attachedTo + \"-\" + errorCode + \"\\\", kcontext.getVariable(\\\"\" + variable +\"\\\"));\");\n-        // register directly the action as metadata to do not require compilation\n-        action.setMetaData(\"Action\", new Action() {\n-            \n-            @Override\n-            public void execute(ProcessContext kcontext) throws Exception {        \n-                kcontext.getProcessInstance().signalEvent(\"Error-\" + attachedTo + \"-\" + errorCode, kcontext.getVariable(\" + variable +\"));\n-            }\n-        });\n-        \n+        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\nindex 88f1e4e5f2..6db7f95a09 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n\n@@ -442,9 +441,7 @@ public class ProcessHandler extends BaseAbstractHandler implements Handler {\n         \n         String variable = ((EventNode)node).getVariableName();\n \n-        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n-        // register directly the action as metadata to do not require compilation        \n-        action.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Error-\" + attachedTo + \"-\" + errorCode, variable, SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+        DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(\"Error-\" + attachedTo + \"-\" + errorCode, variable, SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n         exceptionHandler.setAction(action);\n         exceptionHandler.setFaultVariable(variable);\n         exceptionScope.setExceptionHandler(hasErrorCode?errorCode:null, exceptionHandler);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDgwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314802", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:20:55Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -479,18 +472,9 @@ private static void linkBoundaryTimerEvent(NodeContainer nodeContainer, Node nod\n         if (timeDuration != null) {\n             timer.setDelay(timeDuration);\n             timer.setTimeType(Timer.TIME_DURATION);\n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\",\n-                    PROCESS_INSTANCE_SIGNAL_EVENT + \"Timer-\" + attachedTo + \"-\" + timeDuration + \"-\" + node.getId() +\"\\\", kcontext.getNodeInstance().getId());\");\n-            compositeNode.addTimer(timer, consequenceAction);\n-            \n-            // register directly the action as metadata to do not require compilation\n-            consequenceAction.setMetaData(\"Action\", new Action() {\n-                \n-                @Override\n-                public void execute(ProcessContext kcontext) throws Exception {        \n-                    kcontext.getProcessInstance().signalEvent(\"Timer-\" + attachedTo + \"-\" + timeDuration + \"-\" + node.getId(), kcontext.getNodeInstance().getId());\n-                }\n-            });\n+            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");                       ", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\nindex 88f1e4e5f2..6db7f95a09 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n\n@@ -472,8 +469,7 @@ public class ProcessHandler extends BaseAbstractHandler implements Handler {\n         if (timeDuration != null) {\n             timer.setDelay(timeDuration);\n             timer.setTimeType(Timer.TIME_DURATION);\n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");                       \n-            consequenceAction.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + timeDuration + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            DroolsConsequenceAction consequenceAction = createJavaAction(new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + timeDuration + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n             compositeNode.addTimer(timer, consequenceAction);            \n         } else if (timeCycle != null) {\n             int index = timeCycle.indexOf(\"###\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDg4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314885", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:21:06Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -503,33 +487,16 @@ public void execute(ProcessContext kcontext) throws Exception {\n             \n             String finalTimeCycle = timeCycle;\n             \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\",\n-            \t\tPROCESS_INSTANCE_SIGNAL_EVENT + \"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId() + \"\\\", kcontext.getNodeInstance().getId());\");\n+            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\nindex 88f1e4e5f2..6db7f95a09 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n\n@@ -487,16 +483,13 @@ public class ProcessHandler extends BaseAbstractHandler implements Handler {\n             \n             String finalTimeCycle = timeCycle;\n             \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");\n-            compositeNode.addTimer(timer, consequenceAction);\n-            \n-            consequenceAction.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            compositeNode.addTimer(timer, action); \n         } else if (timeDate != null) {\n             timer.setDate(timeDate);\n-            timer.setTimeType(Timer.TIME_DATE);                        \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");\n-            compositeNode.addTimer(timer, consequenceAction);            \n-            consequenceAction.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + timeDate + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            timer.setTimeType(Timer.TIME_DATE);                                              \n+            DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + timeDate + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            compositeNode.addTimer(timer, action); \n         }\n         \n         if (cancelActivity) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDk0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314946", "bodyText": "same, you can extract this block of code to build the action", "author": "tiagodolphine", "createdAt": "2020-05-05T18:21:13Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -503,33 +487,16 @@ public void execute(ProcessContext kcontext) throws Exception {\n             \n             String finalTimeCycle = timeCycle;\n             \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\",\n-            \t\tPROCESS_INSTANCE_SIGNAL_EVENT + \"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId() + \"\\\", kcontext.getNodeInstance().getId());\");\n+            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");\n             compositeNode.addTimer(timer, consequenceAction);\n             \n-            // register directly the action as metadata to do not require compilation\n-            consequenceAction.setMetaData(\"Action\", new Action() {\n-                \n-                @Override\n-                public void execute(ProcessContext kcontext) throws Exception {        \n-                    kcontext.getProcessInstance().signalEvent(\"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId(), kcontext.getNodeInstance().getId());\n-                }\n-            });\n+            consequenceAction.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n         } else if (timeDate != null) {\n             timer.setDate(timeDate);\n             timer.setTimeType(Timer.TIME_DATE);                        \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\",\n-                    PROCESS_INSTANCE_SIGNAL_EVENT + \"Timer-\" + attachedTo + \"-\" + timeDate + \"-\" + node.getId() +\"\\\", kcontext.getNodeInstance().getId());\");\n-            compositeNode.addTimer(timer, consequenceAction);\n-            \n-            // register directly the action as metadata to do not require compilation\n-            consequenceAction.setMetaData(\"Action\", new Action() {\n-                \n-                @Override\n-                public void execute(ProcessContext kcontext) throws Exception {        \n-                    kcontext.getProcessInstance().signalEvent(\"Timer-\" + attachedTo + \"-\" + timeDate + \"-\" + node.getId(), kcontext.getNodeInstance().getId());\n-                }\n-            });\n+            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\nindex 88f1e4e5f2..6db7f95a09 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java\n\n@@ -487,16 +483,13 @@ public class ProcessHandler extends BaseAbstractHandler implements Handler {\n             \n             String finalTimeCycle = timeCycle;\n             \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");\n-            compositeNode.addTimer(timer, consequenceAction);\n-            \n-            consequenceAction.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            compositeNode.addTimer(timer, action); \n         } else if (timeDate != null) {\n             timer.setDate(timeDate);\n-            timer.setTimeType(Timer.TIME_DATE);                        \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");\n-            compositeNode.addTimer(timer, consequenceAction);            \n-            consequenceAction.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + timeDate + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            timer.setTimeType(Timer.TIME_DATE);                                              \n+            DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + timeDate + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n+            compositeNode.addTimer(timer, action); \n         }\n         \n         if (cancelActivity) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyMzg3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420323879", "bodyText": "what about a more functional style, suggestion:\ntransformer.transform(transformation.getCompiledExpression(),\n                              Optional.ofNullable(event)\n                                      .filter(Map.class::isInstance)\n                                      .map(Map.class::cast)\n                                      .orElseGet(() -> Collections.singletonMap(name, event)));", "author": "tiagodolphine", "createdAt": "2020-05-05T18:36:01Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java", "diffHunk": "@@ -41,15 +42,22 @@ public EventTransformerImpl(Transformation transformation) {\n \t\t}\n \t}\n \n-\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @Override\n \tpublic Object transformEvent(Object event) {\n \t\tif (event == null || transformation == null) {\n \t\t\treturn event;\n \t\t}\n \t\tDataTransformer transformer = DataTransformerRegistry.get().find(transformation.getLanguage());\n     \tif (transformer != null) {\n-    \t\tObject parameterValue = transformer.transform(transformation.getCompiledExpression(), Collections.singletonMap(name, event));\n-    \t\treturn parameterValue;\n+    \t    Map<String, Object> parameters = null;", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938174b43f63a19c6e9a1fb163a6475399322a10", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java\nindex cc5d0c1d2e..c48baff264 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java\n\n@@ -42,7 +43,7 @@ public class EventTransformerImpl implements EventTransformer, Serializable {\n \t\t}\n \t}\n \n-\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@SuppressWarnings({\"unchecked\"})\n     @Override\n \tpublic Object transformEvent(Object event) {\n \t\tif (event == null || transformation == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNTQ2NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420325465", "bodyText": "it is only possible to add the first \"Action\"? should it throw an error in case it is being set more than one?", "author": "tiagodolphine", "createdAt": "2020-05-05T18:38:53Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/DroolsAction.java", "diffHunk": "@@ -39,7 +39,11 @@ public void wire(Object object) {\n     }\n     \n     public void setMetaData(String name, Object value) {\n-        this.metaData.put(name, value);\n+        if (\"Action\".equals(name)) {\n+            this.metaData.putIfAbsent(name, value);", "originalCommit": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4MTIwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420681202", "bodyText": "I'd say it should be possible to add only first action", "author": "mswiderski", "createdAt": "2020-05-06T10:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNTQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f120609cdde34d44c6382f6d0fd84581d0559ee2", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/DroolsAction.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/DroolsAction.java\nindex 660163357d..ace92540af 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/DroolsAction.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/DroolsAction.java\n\n@@ -39,11 +39,7 @@ public class DroolsAction implements Externalizable, Wireable {\n     }\n     \n     public void setMetaData(String name, Object value) {\n-        if (\"Action\".equals(name)) {\n-            this.metaData.putIfAbsent(name, value);\n-        } else {\n-            this.metaData.put(name, value);\n-        }\n+        this.metaData.put(name, value);\n     }\n     \n     public Object getMetaData(String name) {\n"}}, {"oid": "938174b43f63a19c6e9a1fb163a6475399322a10", "url": "https://github.com/kiegroup/kogito-runtimes/commit/938174b43f63a19c6e9a1fb163a6475399322a10", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation", "committedDate": "2020-05-06T10:08:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwOTQyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420809427", "bodyText": "@mswiderski seems like this is not used anymore", "author": "cristianonicolai", "createdAt": "2020-05-06T13:54:13Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -50,6 +55,10 @@\n \tpublic static final String LINK_NAME = \"linkName\";\n \tpublic static final String LINK_SOURCE = \"source\";\n \tpublic static final String LINK_TARGET = \"target\";\n+\t\n+\tprivate static final String MAPPING_VARIABLE_KEY = \"MappingVariable\";\n+\tprivate static final String TRANSFORMATION_KEY = \"Transformation\";\n+\tprivate static final String ACTION_KEY = \"Action\";", "originalCommit": "938174b43f63a19c6e9a1fb163a6475399322a10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNjQzNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420826434", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-05-06T14:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwOTQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 66578427cb..a18b30b9fc 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -58,7 +58,6 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n \t\n \tprivate static final String MAPPING_VARIABLE_KEY = \"MappingVariable\";\n \tprivate static final String TRANSFORMATION_KEY = \"Transformation\";\n-\tprivate static final String ACTION_KEY = \"Action\";\n \n \tprotected Node createNode(Attributes attrs) {\n \t\treturn new ActionNode();\n"}}, {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation", "committedDate": "2020-05-06T14:15:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5MjQ4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420892486", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n          \n          \n            \n                        @Override\n          \n          \n            \n                        public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n          \n          \n            \n                        ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n          \n          \n            \n                        return null;\n          \n          \n            \n                        }\n          \n          \n            \n                      }).when(request).send(any());\n          \n          \n            \n                    doAnswer(invocationOnMock -> {\n          \n          \n            \n                        Handler<AsyncResult<HttpResponse<Buffer>>> handler = invocationOnMock.getArgument(0);\n          \n          \n            \n                        handler.handle(asyncResult);\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }).when(request).send(any());\n          \n      \n    \n    \n  \n\nWhat about this? Looks much cleaner and gets rid of some unchecked warnings.", "author": "MarianMacik", "createdAt": "2020-05-06T15:40:40Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +123,51 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MjkwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421262909", "bodyText": "replaced, thanks", "author": "mswiderski", "createdAt": "2020-05-07T06:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5MjQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "14dc03ce66c1ce801875635c4b29418b669da3e6", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\nindex 4f3cdf55b4..a5a01538df 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n\n@@ -118,14 +116,14 @@ public class VertxJobsServiceTest {\n     }\n \n     @Test\n-    void testCancelJob(@Mock HttpRequest request) {\n+    void testCancelJob(@Mock HttpRequest<Buffer> request) {\n         when(webClient.delete(anyString())).thenReturn(request);\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n     \n     @Test\n-    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+    void testGetScheduleTime(@Mock HttpRequest<Buffer> request, @Mock HttpResponse<Buffer> response) {\n         when(webClient.get(anyString())).thenReturn(request);\n         Job job = new Job();\n         job.setId(\"123\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDcxNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420894716", "bodyText": "Please include type arguments to HttpRequest.", "author": "MarianMacik", "createdAt": "2020-05-06T15:43:52Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +123,51 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2Mjk5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421262990", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-05-07T06:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "14dc03ce66c1ce801875635c4b29418b669da3e6", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\nindex 4f3cdf55b4..a5a01538df 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n\n@@ -118,14 +116,14 @@ public class VertxJobsServiceTest {\n     }\n \n     @Test\n-    void testCancelJob(@Mock HttpRequest request) {\n+    void testCancelJob(@Mock HttpRequest<Buffer> request) {\n         when(webClient.delete(anyString())).thenReturn(request);\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n     \n     @Test\n-    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+    void testGetScheduleTime(@Mock HttpRequest<Buffer> request, @Mock HttpResponse<Buffer> response) {\n         when(webClient.get(anyString())).thenReturn(request);\n         Job job = new Job();\n         job.setId(\"123\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDkwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420894902", "bodyText": "Same applies for this method.", "author": "MarianMacik", "createdAt": "2020-05-06T15:44:07Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +123,51 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isEqualTo(job.getExpirationTime());\n+        verify(webClient).get(\"/jobs/123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2Mjg2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421262861", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-05-07T06:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "14dc03ce66c1ce801875635c4b29418b669da3e6", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\nindex 4f3cdf55b4..a5a01538df 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java\n\n@@ -118,14 +116,14 @@ public class VertxJobsServiceTest {\n     }\n \n     @Test\n-    void testCancelJob(@Mock HttpRequest request) {\n+    void testCancelJob(@Mock HttpRequest<Buffer> request) {\n         when(webClient.delete(anyString())).thenReturn(request);\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n     \n     @Test\n-    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+    void testGetScheduleTime(@Mock HttpRequest<Buffer> request, @Mock HttpResponse<Buffer> response) {\n         when(webClient.get(anyString())).thenReturn(request);\n         Job job = new Job();\n         job.setId(\"123\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NjI4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420946283", "bodyText": "Isn't this REST call async? In that case, shouldn't we wait for a response and only then return the expiration time?", "author": "MarianMacik", "createdAt": "2020-05-06T16:59:06Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java", "diffHunk": "@@ -134,4 +142,25 @@ public boolean cancelJob(String id) {\n         \n         return true;\n     }\n+\n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        Promise<Job> promise = Promise.promise();\n+        \n+        client.get(JOBS_PATH + \"/\" + id).send(res -> {\n+            if (res.succeeded() && res.result().statusCode() == 200) {\n+                promise.complete(res.result().bodyAsJson(Job.class));\n+            } else if (res.succeeded() && res.result().statusCode() == 404) {\n+                promise.fail(new JobNotFoundException(id));\n+            } else {\n+                promise.fail(new RuntimeException(\"Unable to find job with id \" + id));\n+            }\n+        });", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODM5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421258395", "bodyText": "isn't that what promise does?", "author": "mswiderski", "createdAt": "2020-05-07T06:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NjI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM5MDA3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421390078", "bodyText": "I checked the code and there seems to be no blocking method when calling promise.future() or future.result(). According to IDE Promise.promise() returns just FutureImpl and its result() method is basically just a getter. I understand that the only thing what Promise does is to be able to set Handler which is called after the work is done. Here we could set a handler on the future but we need to wait there for the time to be returned. So perhaps we need vertx-sync method? Maybe I am wrong, not sure.", "author": "MarianMacik", "createdAt": "2020-05-07T10:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NjI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1ODczNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421558737", "bodyText": "replaced with java CompletableFuture instead and updated test to make sure this works now. thanks", "author": "mswiderski", "createdAt": "2020-05-07T14:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NjI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f120609cdde34d44c6382f6d0fd84581d0559ee2", "chunk": "diff --git a/addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java b/addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java\nindex 82ea2a1c82..34081df85e 100644\n--- a/addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java\n+++ b/addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java\n\n@@ -145,22 +144,27 @@ public class VertxJobsService extends RestJobsService {\n \n     @Override\n     public ZonedDateTime getScheduledTime(String id) {\n-        Promise<Job> promise = Promise.promise();\n-        \n+        CompletableFuture<Job> future = new CompletableFuture<Job>();\n+\n         client.get(JOBS_PATH + \"/\" + id).send(res -> {\n             if (res.succeeded() && res.result().statusCode() == 200) {\n-                promise.complete(res.result().bodyAsJson(Job.class));\n+                future.complete(res.result().bodyAsJson(Job.class));\n             } else if (res.succeeded() && res.result().statusCode() == 404) {\n-                promise.fail(new JobNotFoundException(id));\n+                future.completeExceptionally(new JobNotFoundException(id));\n             } else {\n-                promise.fail(new RuntimeException(\"Unable to find job with id \" + id));\n+                future.completeExceptionally(new RuntimeException(\"Unable to find job with id \" + id));\n             }\n         });\n-        Future<Job> future = promise.future();\n-        if (future.result() != null) {\n-            return future.result().getExpirationTime();\n-        } else {\n-            throw new RuntimeException(future.cause());\n+\n+        try {\n+            return future.get().getExpirationTime();\n+        } catch (Exception e) {\n+            if (e.getCause() != null) {\n+                throw new RuntimeException(e.getCause());\n+            }\n+            \n+            throw new RuntimeException(e);\n         }\n+\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1OTg1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420959851", "bodyText": "Typo matchyIdOrName -> matchByIdOrName", "author": "MarianMacik", "createdAt": "2020-05-06T17:20:11Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -661,4 +663,29 @@ protected String retrieveDataType(String itemSubjectRef, String dtype, Extensibl\n         \n         return null;\n     }\n+    \n+    \n+    /**\n+     * Finds the right variable by its name to make sure that when given as id it will be also matched\n+     * @param variableName name or id of the variable\n+     * @param parser parser instance\n+     * @return returns found variable name or given 'variableName' otherwise\n+     */\n+    protected String findVariable(String variableName, final ExtensibleXmlParser parser) {\n+        if (variableName == null) {\n+            return null;\n+        }\n+        List<?> parents = parser.getParents();\n+        \n+        for (Object parent : parents) {\n+            if (parent instanceof ContextContainer) {\n+                ContextContainer contextContainer = (ContextContainer) parent;\n+                VariableScope variableScope = (VariableScope) contextContainer.getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+                return variableScope.getVariables().stream().filter(v -> v.matchyIdOrName(variableName)).map(v -> v.getName()).findFirst().orElse(variableName);", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MzIzNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421263235", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-05-07T06:16:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1OTg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "14dc03ce66c1ce801875635c4b29418b669da3e6", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java\nindex 153d4c2de3..83d9aff156 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java\n\n@@ -681,7 +654,7 @@ public abstract class AbstractNodeHandler extends BaseAbstractHandler implements\n             if (parent instanceof ContextContainer) {\n                 ContextContainer contextContainer = (ContextContainer) parent;\n                 VariableScope variableScope = (VariableScope) contextContainer.getDefaultContext(VariableScope.VARIABLE_SCOPE);\n-                return variableScope.getVariables().stream().filter(v -> v.matchyIdOrName(variableName)).map(v -> v.getName()).findFirst().orElse(variableName);\n+                return variableScope.getVariables().stream().filter(v -> v.matchByIdOrName(variableName)).map(v -> v.getName()).findFirst().orElse(variableName);\n             }\n         }\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MjA3NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420972074", "bodyText": "Shouldn't this be in a separate method or method name should be adapted?", "author": "MarianMacik", "createdAt": "2020-05-06T17:39:25Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java", "diffHunk": "@@ -113,11 +102,14 @@ public void disposeSession() {\n     @BeforeEach\n     protected void logTestStart(TestInfo testInfo) {\n         logger.info(\" >>> {} <<<\", testInfo.getDisplayName());\n+        // this is to preserve the same behavior when executing over ksession\n+        System.setProperty(\"org.jbpm.signals.defaultscope\", SignalProcessInstanceAction.DEFAULT_SCOPE);\n     }\n \n     @AfterEach\n     protected void logTestEnd(TestInfo testInfo) {\n         logger.info(\"Finished {}\", testInfo.getDisplayName());\n+        System.clearProperty(\"org.jbpm.signals.defaultscope\");", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MzI3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421263276", "bodyText": "changed method name", "author": "mswiderski", "createdAt": "2020-05-07T06:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MjA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "14dc03ce66c1ce801875635c4b29418b669da3e6", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java\nindex 86a59d951d..b9f2985780 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java\n\n@@ -100,14 +100,14 @@ public abstract class JbpmBpmn2TestCase {\n         }\n     }\n     @BeforeEach\n-    protected void logTestStart(TestInfo testInfo) {\n+    protected void logTestStartAndSetup(TestInfo testInfo) {\n         logger.info(\" >>> {} <<<\", testInfo.getDisplayName());\n         // this is to preserve the same behavior when executing over ksession\n         System.setProperty(\"org.jbpm.signals.defaultscope\", SignalProcessInstanceAction.DEFAULT_SCOPE);\n     }\n \n     @AfterEach\n-    protected void logTestEnd(TestInfo testInfo) {\n+    protected void logTestEndAndSetup(TestInfo testInfo) {\n         logger.info(\"Finished {}\", testInfo.getDisplayName());\n         System.clearProperty(\"org.jbpm.signals.defaultscope\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MjMxNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420972314", "bodyText": "Same here, the method no longer just logs the start of the test.", "author": "MarianMacik", "createdAt": "2020-05-06T17:39:47Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java", "diffHunk": "@@ -113,11 +102,14 @@ public void disposeSession() {\n     @BeforeEach\n     protected void logTestStart(TestInfo testInfo) {\n         logger.info(\" >>> {} <<<\", testInfo.getDisplayName());\n+        // this is to preserve the same behavior when executing over ksession\n+        System.setProperty(\"org.jbpm.signals.defaultscope\", SignalProcessInstanceAction.DEFAULT_SCOPE);", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MzMzNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421263334", "bodyText": "changed method name", "author": "mswiderski", "createdAt": "2020-05-07T06:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MjMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "14dc03ce66c1ce801875635c4b29418b669da3e6", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java\nindex 86a59d951d..b9f2985780 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java\n\n@@ -100,14 +100,14 @@ public abstract class JbpmBpmn2TestCase {\n         }\n     }\n     @BeforeEach\n-    protected void logTestStart(TestInfo testInfo) {\n+    protected void logTestStartAndSetup(TestInfo testInfo) {\n         logger.info(\" >>> {} <<<\", testInfo.getDisplayName());\n         // this is to preserve the same behavior when executing over ksession\n         System.setProperty(\"org.jbpm.signals.defaultscope\", SignalProcessInstanceAction.DEFAULT_SCOPE);\n     }\n \n     @AfterEach\n-    protected void logTestEnd(TestInfo testInfo) {\n+    protected void logTestEndAndSetup(TestInfo testInfo) {\n         logger.info(\"Finished {}\", testInfo.getDisplayName());\n         System.clearProperty(\"org.jbpm.signals.defaultscope\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MzA5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420973092", "bodyText": "Typo.", "author": "MarianMacik", "createdAt": "2020-05-06T17:40:56Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -164,4 +164,8 @@ public String toString() {\n     public boolean hasTag(String tagName) {\n         return getTags().contains(tagName);\n     }\n+    \n+    public boolean matchyIdOrName(String nameOrId) {", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MzM4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421263388", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-05-07T06:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MzA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "14dc03ce66c1ce801875635c4b29418b669da3e6", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java\nindex 47e2a94b1f..68e9de2128 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java\n\n@@ -165,7 +165,7 @@ public class Variable implements TypeObject, ValueObject, Serializable {\n         return getTags().contains(tagName);\n     }\n     \n-    public boolean matchyIdOrName(String nameOrId) {\n+    public boolean matchByIdOrName(String nameOrId) {\n         return (id.equals(nameOrId) || name.equals(nameOrId));        \n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxOTU0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421019542", "bodyText": "How was this handled before?\nI see that before there was just a consequence (string) set. And that consequence was then code-generated as a lambda to action() builder method in the ActionNodeVisitor (actionNode.getAction().toString() actually returns consequence):\n\n  \n    \n      kogito-runtimes/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ActionNodeVisitor.java\n    \n    \n        Lines 95 to 97\n      in\n      fba1a5e\n    \n    \n    \n    \n\n        \n          \n           actionBody.addStatement(new NameExpr(actionNode.getAction().toString())); \n        \n\n        \n          \n            \n        \n\n        \n          \n           body.addStatement(getFactoryMethod(getNodeId(node), METHOD_ACTION, lambda)); \n        \n    \n  \n\n\nSo right now the consequence is an empty string, so the compilation is no-op. But how is this then translated to the generated ActionNode in case of a throw signal node? The action has to be somehow registered on the generated node as well, right?", "author": "MarianMacik", "createdAt": "2020-05-06T18:55:32Z", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -150,11 +154,11 @@ public void handleSignalNode(final Node node, final Element element, final Strin\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-\n-                String signalExpression = getSignalExpression(endNode, signalName, variable);\n-\n+                \n+                DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (Transformation)endNode.getMetaData().get(\"Transformation\")));\n+                \n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n-                actions.add(new DroolsConsequenceAction(\"mvel\",signalExpression));", "originalCommit": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzA0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421257049", "bodyText": "there is no need to do any compilation as the action is already given as actual java class. It was not handled before at all, as this was never implemented for code gen. ActionNodes that represent Script Tasks were implemented but not the internal use of ActionNodes like this.", "author": "mswiderski", "createdAt": "2020-05-07T05:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxOTU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4MDUyMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421380520", "bodyText": "So now it is implemented for codegen? Because that's what I am asking. In that ActionNodeVisitor the lambda will be now empty I guess as we no longer specify a String action but a Java class, so how is the action generated now?", "author": "MarianMacik", "createdAt": "2020-05-07T09:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxOTU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1OTcwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421559705", "bodyText": "if this is implemented in code get it's more of a question if fluent api supports it. Once fluent api will support it will work fine. So it's prerequisite to make use of this constructs. Note that the changes where done on parser side so similar would have to be done on fluent api.", "author": "mswiderski", "createdAt": "2020-05-07T14:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxOTU0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f120609cdde34d44c6382f6d0fd84581d0559ee2", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\nindex 4c465073a0..4a364318e1 100755\n--- a/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n+++ b/jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n\n@@ -154,11 +150,11 @@ public class EndEventHandler extends AbstractNodeHandler {\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-                \n-                DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (Transformation)endNode.getMetaData().get(\"Transformation\")));\n-                \n+\n+                String signalExpression = getSignalExpression(endNode, signalName, variable);\n+\n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n-                actions.add(action);\n+                actions.add(new DroolsConsequenceAction(\"mvel\",signalExpression));\n                 endNode.setActions(EndNode.EVENT_NODE_ENTER, actions);\n             }\n             xmlNode = xmlNode.getNextSibling();\n"}}, {"oid": "14dc03ce66c1ce801875635c4b29418b669da3e6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/14dc03ce66c1ce801875635c4b29418b669da3e6", "message": "Remove getSignalExpression method as it is unused", "committedDate": "2020-05-07T06:14:18Z", "type": "forcePushed"}, {"oid": "f120609cdde34d44c6382f6d0fd84581d0559ee2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f120609cdde34d44c6382f6d0fd84581d0559ee2", "message": "KOGITO-2040 - Implemented getScheduledTime for JobsService to align it with actual capability of the jobs-service module, KOGITO-2041 - Expose process name via Process interface to be able to provide more human readable version of the process", "committedDate": "2020-05-07T14:39:15Z", "type": "commit"}, {"oid": "5fd3e8e5bb08c374bc69bf104341bcecf3eb9bad", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5fd3e8e5bb08c374bc69bf104341bcecf3eb9bad", "message": "KOGITO-2042 - Pass variable definitions via BpmnProcess and BpmnVariables, allow to filter variables on BpmnVariables", "committedDate": "2020-05-07T14:39:15Z", "type": "commit"}, {"oid": "516e066ffcea5315e1c37816319b959940ba520a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/516e066ffcea5315e1c37816319b959940ba520a", "message": "KOGITO-2043 - Externalize process instance description via function interface so different expression evaluators can be used", "committedDate": "2020-05-07T14:39:15Z", "type": "commit"}, {"oid": "d4686637c4320b32694e9ee1f8d96b0d381e2539", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d4686637c4320b32694e9ee1f8d96b0d381e2539", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation", "committedDate": "2020-05-07T14:39:15Z", "type": "commit"}, {"oid": "62d5a4d4d0375f520dbeedba39f18973031e480e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/62d5a4d4d0375f520dbeedba39f18973031e480e", "message": "Remove getSignalExpression method as it is unused", "committedDate": "2020-05-07T14:39:15Z", "type": "commit"}, {"oid": "62d5a4d4d0375f520dbeedba39f18973031e480e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/62d5a4d4d0375f520dbeedba39f18973031e480e", "message": "Remove getSignalExpression method as it is unused", "committedDate": "2020-05-07T14:39:15Z", "type": "forcePushed"}]}