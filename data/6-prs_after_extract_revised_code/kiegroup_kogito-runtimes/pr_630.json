{"pr_number": 630, "pr_title": "KOGITO-2737 - refactoring injection of addons configuration", "pr_createdAt": "2020-07-13T13:18:21Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/630", "timeline": [{"oid": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "message": "refactoring injection of addons configuration", "committedDate": "2020-07-13T13:12:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NzI2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r453777266", "bodyText": "Side note because it is not related to this PR. This code is quite error prone, if withAddons is invoked multiple times, multiple PrometheusLabelers are created", "author": "danielezonca", "createdAt": "2020-07-13T16:30:57Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -192,17 +192,12 @@ public ApplicationGenerator withRuleUnits(boolean hasRuleUnits) {\n         return this;\n     }\n \n-   public ApplicationGenerator withPersistence(boolean persistence) {\n-       this.persistence = persistence;\n-       return this;\n-   }\n-\n-   public ApplicationGenerator withMonitoring(boolean monitoring) {\n-       if (monitoring) {\n-           this.labelers.add(new PrometheusLabeler());\n-       }\n-       return this;\n-   }\n+    public ApplicationGenerator withAddons(AddonsConfig addonsConfig) {\n+        if (addonsConfig.useMonitoring()) {\n+            this.labelers.add(new PrometheusLabeler());\n+        }", "originalCommit": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzMzg2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r454133866", "bodyText": "I agree with you @danielezonca . I've changed it to a Map<Class, Labeler> to mitigate it, let me know wdyt", "author": "r00ta", "createdAt": "2020-07-14T06:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NzI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0a77f53cd8de413898b125537972c1e076afa9c0", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java\nindex b9a6223e84..9a8b48af48 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java\n\n@@ -194,7 +196,7 @@ public class ApplicationGenerator {\n \n     public ApplicationGenerator withAddons(AddonsConfig addonsConfig) {\n         if (addonsConfig.useMonitoring()) {\n-            this.labelers.add(new PrometheusLabeler());\n+            this.labelers.put(PrometheusLabeler.class, new PrometheusLabeler());\n         }\n         return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTc5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r453791792", "bodyText": "What about create a DEFAULT instance as public static final field in AddonsConfig to use as default instance in the codebase? In this way we can also define a different default value in a single place", "author": "danielezonca", "createdAt": "2020-07-13T16:54:48Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -56,7 +57,7 @@\n     private final String resourceClazzName;\n     private final String appCanonicalName;\n     private DependencyInjectionAnnotator annotator;\n-    private boolean useMonitoring;\n+    private AddonsConfig addonsConfig = new AddonsConfig();", "originalCommit": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDQ4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r454124488", "bodyText": "Sounds good to me", "author": "r00ta", "createdAt": "2020-07-14T06:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNjk4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r454126983", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-07-14T06:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "dc7be1b50ea63c101ab438e80c09b50437586fdb", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java\nindex e055eca57e..547ff43094 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java\n\n@@ -57,7 +57,7 @@ public class DMNRestResourceGenerator {\n     private final String resourceClazzName;\n     private final String appCanonicalName;\n     private DependencyInjectionAnnotator annotator;\n-    private AddonsConfig addonsConfig = new AddonsConfig();\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n     private boolean isStronglyTyped = false;\n \n     public DMNRestResourceGenerator(DMNModel model, String appCanonicalName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MjQyMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r453792420", "bodyText": "Same comment about use a common default instance", "author": "danielezonca", "createdAt": "2020-07-13T16:55:47Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -136,7 +136,7 @@ private static DecisionCodegen ofDecisions(List<DMNResource> resources) {\n \n     private final List<DMNResource> resources;\n     private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n-    private boolean useMonitoring = false;\n+    private AddonsConfig addonsConfig = new AddonsConfig();", "originalCommit": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc7be1b50ea63c101ab438e80c09b50437586fdb", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\nindex 703f0eebea..633b47e391 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\n\n@@ -136,7 +136,7 @@ public class DecisionCodegen extends AbstractGenerator {\n \n     private final List<DMNResource> resources;\n     private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n-    private AddonsConfig addonsConfig = new AddonsConfig();\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n \n     public DecisionCodegen(List<DMNResource> resources) {\n         this.resources = resources;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5Mjc1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r453792752", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-13T16:56:19Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -55,16 +56,16 @@\n \n     private String applicationCanonicalName;\n     private final List<DMNResource> resources;\n-    private boolean useTracing = false;\n+    private AddonsConfig addonsConfig = new AddonsConfig();", "originalCommit": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc7be1b50ea63c101ab438e80c09b50437586fdb", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\nindex 3071e26844..acdf3a648c 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n\n@@ -56,7 +56,7 @@ public class DecisionContainerGenerator extends AbstractApplicationSection {\n \n     private String applicationCanonicalName;\n     private final List<DMNResource> resources;\n-    private AddonsConfig addonsConfig = new AddonsConfig();\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n \n     public DecisionContainerGenerator(String applicationCanonicalName, List<DMNResource> resources) {\n         super(\"DecisionModels\", \"decisionModels\", DecisionModels.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5Mjg3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r453792877", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-13T16:56:31Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -204,7 +205,7 @@ private static Process parseWorkflowFile(Resource r, String parser) {\n     private final Map<String, WorkflowProcess> processes;\n     private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n \n-    private boolean persistence;\n+    private AddonsConfig addonsConfig = new AddonsConfig();", "originalCommit": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc7be1b50ea63c101ab438e80c09b50437586fdb", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java\nindex 53c52de52f..bbd330664e 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java\n\n@@ -205,7 +205,7 @@ public class ProcessCodegen extends AbstractGenerator {\n     private final Map<String, WorkflowProcess> processes;\n     private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n \n-    private AddonsConfig addonsConfig = new AddonsConfig();\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n \n     public ProcessCodegen(Collection<? extends Process> processes) {\n         this.processes = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MzM0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r453793342", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-13T16:57:18Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -184,7 +184,7 @@ private static ResourceType typeOf(FileSystemResource r) {\n \n     private KieModuleModel kieModuleModel;\n     private boolean hotReloadMode = false;\n-    private boolean useMonitoring = false;\n+    private AddonsConfig addonsConfig = new AddonsConfig();", "originalCommit": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc7be1b50ea63c101ab438e80c09b50437586fdb", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java\nindex 18eee7d02c..1bc2264338 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java\n\n@@ -184,7 +184,7 @@ public class IncrementalRuleCodegen extends AbstractGenerator {\n \n     private KieModuleModel kieModuleModel;\n     private boolean hotReloadMode = false;\n-    private AddonsConfig addonsConfig = new AddonsConfig();\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n     private boolean useRestServices = true;\n     private String packageName;\n     private final boolean decisionTableSupported;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MzQ3MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r453793470", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-13T16:57:30Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -83,7 +84,7 @@\n     private final String appCanonicalName;\n     private String targetTypeName;\n     private DependencyInjectionAnnotator annotator;\n-    private boolean persistence;\n+    private AddonsConfig addonsConfig = new AddonsConfig();", "originalCommit": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc7be1b50ea63c101ab438e80c09b50437586fdb", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\nindex 527ea0b51a..435b3adef0 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n\n@@ -84,7 +84,7 @@ public class ProcessGenerator {\n     private final String appCanonicalName;\n     private String targetTypeName;\n     private DependencyInjectionAnnotator annotator;\n-    private AddonsConfig addonsConfig = new AddonsConfig();\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n \n     private List<CompilationUnit> additionalClasses = new ArrayList<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5Mzg2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/630#discussion_r453793866", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-13T16:58:13Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/RuleUnitGenerator.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private DependencyInjectionAnnotator annotator;\n     private Collection<QueryModel> queries;\n     private String applicationPackageName;\n-    private boolean useMonitoring;\n+    private AddonsConfig addonsConfig = new AddonsConfig();", "originalCommit": "38e4e3693f5d40e69a7b62836f8e29d89cdb1b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc7be1b50ea63c101ab438e80c09b50437586fdb", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/RuleUnitGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/RuleUnitGenerator.java\nindex a12cc4b3d9..c2faa4ac4d 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/RuleUnitGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/RuleUnitGenerator.java\n\n@@ -56,7 +56,7 @@ public class RuleUnitGenerator implements FileGenerator {\n     private DependencyInjectionAnnotator annotator;\n     private Collection<QueryModel> queries;\n     private String applicationPackageName;\n-    private AddonsConfig addonsConfig = new AddonsConfig();\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n \n     public RuleUnitGenerator(RuleUnitDescription ruleUnit, String generatedSourceFile) {\n         this.ruleUnit = ruleUnit;\n"}}, {"oid": "dc7be1b50ea63c101ab438e80c09b50437586fdb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dc7be1b50ea63c101ab438e80c09b50437586fdb", "message": "create final static field in AddonsConfig", "committedDate": "2020-07-14T06:17:34Z", "type": "commit"}, {"oid": "0a77f53cd8de413898b125537972c1e076afa9c0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a77f53cd8de413898b125537972c1e076afa9c0", "message": "use hashmap instead of list for labelers", "committedDate": "2020-07-14T07:22:22Z", "type": "commit"}, {"oid": "a3998f57ace8a1ee0d74bfbb7018696ccdbd6b3b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a3998f57ace8a1ee0d74bfbb7018696ccdbd6b3b", "message": "add AddonsConfigTest", "committedDate": "2020-07-14T12:56:24Z", "type": "commit"}, {"oid": "b8aa4b2510e59cb9f0bd1dd288e4145b66a6f8af", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b8aa4b2510e59cb9f0bd1dd288e4145b66a6f8af", "message": "update licence header", "committedDate": "2020-07-14T13:00:52Z", "type": "commit"}]}