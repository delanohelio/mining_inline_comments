{"pr_number": 579, "pr_title": "[KOGITO-2511] Changes in Schema generation", "pr_createdAt": "2020-06-22T16:51:33Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/579", "timeline": [{"oid": "57c5d1dcd0df0f8ac99db6db333c1e150fe8b651", "url": "https://github.com/kiegroup/kogito-runtimes/commit/57c5d1dcd0df0f8ac99db6db333c1e150fe8b651", "message": "[KOGITO-2511] Changes in Schema generation\n\nAdding \"kogito.jsonSchema.version\" property for maven and quarkus\nAdding \"date-time\" format for Date types.", "committedDate": "2020-06-23T16:03:54Z", "type": "forcePushed"}, {"oid": "9cbcb3553b584d1fd1280d5521b3fa5d96eead7b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9cbcb3553b584d1fd1280d5521b3fa5d96eead7b", "message": "[KOGITO-2511] Changes in Schema generation\n\nAdding \"kogito.jsonSchema.version\" property for maven and quarkus\nAdding \"date-time\" format for Date types.", "committedDate": "2020-06-23T17:05:22Z", "type": "forcePushed"}, {"oid": "830a7b842a75f94dc5ff50cc2a953a6cba4704db", "url": "https://github.com/kiegroup/kogito-runtimes/commit/830a7b842a75f94dc5ff50cc2a953a6cba4704db", "message": "[KOGITO-2511] Changes in Schema generation\n\nAdding \"kogito.jsonSchema.version\" property for maven and quarkus\nAdding \"date-time\" format for Date types.", "committedDate": "2020-06-24T08:20:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyOTEyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/579#discussion_r444829123", "bodyText": "What about throwing even an exception here? I think one warning can be lost in the logs and users can then expect a different schema version to be used than it actually is. Though I agree this is a matter of preference.", "author": "MarianMacik", "createdAt": "2020-06-24T11:32:40Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -65,10 +71,22 @@ public Builder withGenSchemaPredicate(Predicate<? super Class<?>> shouldGenSchem\n             return this;\n         }\n \n+        public Builder withSchemaVersion(String schemaVersion) {\n+            this.schemaVersion = schemaVersion;\n+            return this;\n+        }\n+\n         public JsonSchemaGenerator build() {\n             JsonSchemaGenerator instance = new JsonSchemaGenerator(stream);\n             instance.getSchemaName = getSchemaName != null ? getSchemaName : JsonSchemaGenerator::getKey;\n             instance.shouldGenSchema = shouldGenSchema != null ? shouldGenSchema : JsonSchemaGenerator::isUserTaskClass;\n+            if (schemaVersion != null) {\n+                try {\n+                    instance.schemaVersion = SchemaVersion.valueOf(schemaVersion.trim().toUpperCase());\n+                } catch (IllegalArgumentException ex) {\n+                    logger.warn(\"Invalid value {} for schema version. Using default\", schemaVersion);", "originalCommit": "830a7b842a75f94dc5ff50cc2a953a6cba4704db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMzIzOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/579#discussion_r444923239", "bodyText": "Your approach is probably better, so changed ;)", "author": "fjtirado", "createdAt": "2020-06-24T14:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyOTEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "0dc86590e1f32b47675569abd18ff33fa02a1fbd", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java\nindex 2cb64c5d41..cd45107784 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java\n\n@@ -81,11 +81,7 @@ public class JsonSchemaGenerator {\n             instance.getSchemaName = getSchemaName != null ? getSchemaName : JsonSchemaGenerator::getKey;\n             instance.shouldGenSchema = shouldGenSchema != null ? shouldGenSchema : JsonSchemaGenerator::isUserTaskClass;\n             if (schemaVersion != null) {\n-                try {\n-                    instance.schemaVersion = SchemaVersion.valueOf(schemaVersion.trim().toUpperCase());\n-                } catch (IllegalArgumentException ex) {\n-                    logger.warn(\"Invalid value {} for schema version. Using default\", schemaVersion);\n-                }\n+                instance.schemaVersion = SchemaVersion.valueOf(schemaVersion.trim().toUpperCase());\n             }\n             return instance;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyOTk5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/579#discussion_r444829998", "bodyText": "A little nitpick. The name of the tests could me more descriptive -> testJsonSchemaGeneratorNonExistingDraft.", "author": "MarianMacik", "createdAt": "2020-06-24T11:34:41Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -84,7 +88,25 @@ public void testJsonSchemaGenerator() throws IOException {\n         assertEquals(1, files.size());\n         GeneratedFile file = files.iterator().next();\n         assertEquals(\"test_test.json\", file.relativePath());\n-        assertSchema(file);\n+        assertSchema(file, SchemaVersion.DRAFT_2019_09);\n+    }\n+    \n+    @Test\n+    public void testJsonSchemaGeneratorNonDraft() throws IOException {", "originalCommit": "830a7b842a75f94dc5ff50cc2a953a6cba4704db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMjk0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/579#discussion_r444922947", "bodyText": "Good catch, I missed a word", "author": "fjtirado", "createdAt": "2020-06-24T14:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyOTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "0dc86590e1f32b47675569abd18ff33fa02a1fbd", "chunk": "diff --git a/kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java b/kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java\nindex 3c1f94a87f..4e79773074 100644\n--- a/kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java\n+++ b/kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java\n\n@@ -92,12 +93,8 @@ public class JsonSchemaGeneratorTest {\n     }\n     \n     @Test\n-    public void testJsonSchemaGeneratorNonDraft() throws IOException {\n-        Collection<GeneratedFile> files = new JsonSchemaGenerator.Builder(Stream.of(PersonInputParams.class, PersonOutputParams.class, IgnoredClass.class)).withSchemaNameFunction(c->\"pepe\").withSchemaVersion(\"NON_EXISTING_DRAFT\").build().generate();\n-        assertEquals(1, files.size());\n-        GeneratedFile file = files.iterator().next();\n-        assertEquals(\"pepe.json\", file.relativePath());\n-        assertSchema(file, SchemaVersion.DRAFT_2019_09);\n+    public void testJsonSchemaGeneratorNonExistingDraft() throws IOException {\n+        assertThrows(IllegalArgumentException.class,() -> new JsonSchemaGenerator.Builder(Stream.of(PersonInputParams.class, PersonOutputParams.class, IgnoredClass.class)).withSchemaNameFunction(c->\"pepe\").withSchemaVersion(\"NON_EXISTING_DRAFT\").build().generate());\n     }\n \n     @Test\n"}}, {"oid": "0dc86590e1f32b47675569abd18ff33fa02a1fbd", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0dc86590e1f32b47675569abd18ff33fa02a1fbd", "message": "[KOGITO-2511] Changes in Schema generation\n\nAdding \"kogito.jsonSchema.version\" property for maven and quarkus\nAdding \"date-time\" format for Date types.", "committedDate": "2020-06-24T14:10:26Z", "type": "forcePushed"}, {"oid": "162bd80d717c0818c1cf8357db64cd6300ae76f8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/162bd80d717c0818c1cf8357db64cd6300ae76f8", "message": "[KOGITO-2511] Changes in Schema generation\n\nAdding \"kogito.jsonSchema.version\" property for maven and quarkus\nAdding \"date-time\" format for Date types.", "committedDate": "2020-06-24T16:05:14Z", "type": "forcePushed"}, {"oid": "78eac79fada2dd0643eb00a41908c6d58e542604", "url": "https://github.com/kiegroup/kogito-runtimes/commit/78eac79fada2dd0643eb00a41908c6d58e542604", "message": "[KOGITO-2511] Changes in Schema generation\n\nAdding \"kogito.jsonSchema.version\" property for maven and quarkus\nAdding \"date-time\" format for Date types.", "committedDate": "2020-06-25T10:45:34Z", "type": "forcePushed"}, {"oid": "0a5b68af0a74a272edd3d49fcd049fe17843021f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a5b68af0a74a272edd3d49fcd049fe17843021f", "message": "[KOGITO-2511] Changes in Schema generation\n\nAdding \"kogito.jsonSchema.version\" property for maven and quarkus\nAdding \"date-time\" format for Date types.", "committedDate": "2020-06-25T11:37:27Z", "type": "commit"}, {"oid": "0a5b68af0a74a272edd3d49fcd049fe17843021f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a5b68af0a74a272edd3d49fcd049fe17843021f", "message": "[KOGITO-2511] Changes in Schema generation\n\nAdding \"kogito.jsonSchema.version\" property for maven and quarkus\nAdding \"date-time\" format for Date types.", "committedDate": "2020-06-25T11:37:27Z", "type": "forcePushed"}]}