{"pr_number": 718, "pr_title": "[KOGITO-3155] Add DMN + PMML support to KogitoDMNScenarioRunnerHelper", "pr_createdAt": "2020-08-24T13:38:20Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/718", "timeline": [{"oid": "e8f6a4378c8d9819ed82090418cabd62f4b6f37f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e8f6a4378c8d9819ed82090418cabd62f4b6f37f", "message": "[KOGITO-3155] Add DMN + PMML support to KogitoDMNScenarioRunnerHelper", "committedDate": "2020-08-24T13:19:43Z", "type": "commit"}, {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d11169c8329eca6c271eeb26cb43b27538076c07", "message": "[KOGITO-3155] Minor", "committedDate": "2020-08-24T13:27:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzOTg1OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476239859", "bodyText": "Small typo here", "author": "jomarko", "createdAt": "2020-08-25T07:37:52Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java", "diffHunk": "@@ -75,4 +85,11 @@ public static PMML4Result evaluate(PMMLRuntime pmmlRuntime, String modelName, Ma\n         return pmmlRuntime.evaluate(modelName, new PMMLContextImpl(pmmlRequestData));\n     }\n \n+    private static Map<KieBase, KieRuntimeFactory> commonCreateKieRuntimeFactorie(", "originalCommit": "d11169c8329eca6c271eeb26cb43b27538076c07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzYyMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487620", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-08-27T15:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzOTg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "311578594a5d1aa4ba808ca5088312b43896a90c", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\nindex 6226c12eaf..ec2a858bd1 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\n\n@@ -85,7 +85,7 @@ public class PMMLKogito {\n         return pmmlRuntime.evaluate(modelName, new PMMLContextImpl(pmmlRequestData));\n     }\n \n-    private static Map<KieBase, KieRuntimeFactory> commonCreateKieRuntimeFactorie(\n+    private static Map<KieBase, KieRuntimeFactory> commonCreateKieRuntimeFactory(\n             final Function<Stream<Resource>, Map<KieBase, KieRuntimeFactory>> factory,\n             final String... pmmlPaths) {\n         Stream<Resource> resources = Stream.of(pmmlPaths).map(FileSystemResource::new);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjY1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476242656", "bodyText": "Could we please use import rather than FQN here?", "author": "jomarko", "createdAt": "2020-08-25T07:42:46Z", "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(", "originalCommit": "d11169c8329eca6c271eeb26cb43b27538076c07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzU2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487567", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-08-27T15:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "311578594a5d1aa4ba808ca5088312b43896a90c", "chunk": "diff --git a/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java b/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\nindex 3790dcade7..e5c8347ad3 100644\n--- a/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\n+++ b/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\n\n@@ -95,20 +97,20 @@ public class KogitoDMNScenarioRunnerHelper extends DMNScenarioRunnerHelper {\n     private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n         try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n             Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n-                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                    PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n                             fileStream\n                                     .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n                                     .map(Path::toString)\n                                     .toArray(String[]::new));\n \n             return s -> kieRuntimeFactories.keySet().stream()\n-                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .filter(kieBase -> KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n                     .map(kieRuntimeFactories::get)\n                     .findFirst()\n-                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+                    .orElseThrow(() -> new IllegalArgumentException(\"Failed to fine KieRuntimeFactory for model \" + s));\n \n         } catch (IOException e) {\n-            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);\n+            throw new IllegalStateException(\"Error initializing KogitoDMNScenarioRunnerHelper\", e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MzQ0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476243442", "bodyText": "import vs. FQN", "author": "jomarko", "createdAt": "2020-08-25T07:44:06Z", "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())", "originalCommit": "d11169c8329eca6c271eeb26cb43b27538076c07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzUwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487505", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-08-27T15:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MzQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "311578594a5d1aa4ba808ca5088312b43896a90c", "chunk": "diff --git a/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java b/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\nindex 3790dcade7..e5c8347ad3 100644\n--- a/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\n+++ b/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\n\n@@ -95,20 +97,20 @@ public class KogitoDMNScenarioRunnerHelper extends DMNScenarioRunnerHelper {\n     private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n         try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n             Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n-                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                    PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n                             fileStream\n                                     .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n                                     .map(Path::toString)\n                                     .toArray(String[]::new));\n \n             return s -> kieRuntimeFactories.keySet().stream()\n-                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .filter(kieBase -> KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n                     .map(kieRuntimeFactories::get)\n                     .findFirst()\n-                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+                    .orElseThrow(() -> new IllegalArgumentException(\"Failed to fine KieRuntimeFactory for model \" + s));\n \n         } catch (IOException e) {\n-            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);\n+            throw new IllegalStateException(\"Error initializing KogitoDMNScenarioRunnerHelper\", e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0Mzg1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476243852", "bodyText": "Idea reports typo, initializing, please update all occurrences in this file.", "author": "jomarko", "createdAt": "2020-08-25T07:44:53Z", "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .map(kieRuntimeFactories::get)\n+                    .findFirst()\n+                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);", "originalCommit": "d11169c8329eca6c271eeb26cb43b27538076c07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzQyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487423", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-08-27T15:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0Mzg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "311578594a5d1aa4ba808ca5088312b43896a90c", "chunk": "diff --git a/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java b/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\nindex 3790dcade7..e5c8347ad3 100644\n--- a/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\n+++ b/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\n\n@@ -95,20 +97,20 @@ public class KogitoDMNScenarioRunnerHelper extends DMNScenarioRunnerHelper {\n     private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n         try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n             Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n-                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                    PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n                             fileStream\n                                     .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n                                     .map(Path::toString)\n                                     .toArray(String[]::new));\n \n             return s -> kieRuntimeFactories.keySet().stream()\n-                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .filter(kieBase -> KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n                     .map(kieRuntimeFactories::get)\n                     .findFirst()\n-                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+                    .orElseThrow(() -> new IllegalArgumentException(\"Failed to fine KieRuntimeFactory for model \" + s));\n \n         } catch (IOException e) {\n-            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);\n+            throw new IllegalStateException(\"Error initializing KogitoDMNScenarioRunnerHelper\", e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0NDUxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476244519", "bodyText": "Is this really needed?", "author": "jomarko", "createdAt": "2020-08-25T07:45:48Z", "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .map(kieRuntimeFactories::get)\n+                    .findFirst()\n+                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);\n+        }\n+    }\n+\n+    private DMNRuntime initDmnRuntime() {\n+        Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction = initPmmlKieRuntimeFactory();\n+\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            List<Resource> resources = fileStream.filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".dmn\"))\n+                    .peek(System.out::println)", "originalCommit": "d11169c8329eca6c271eeb26cb43b27538076c07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzM0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487346", "bodyText": "Not really it was there for debug. Removed", "author": "danielezonca", "createdAt": "2020-08-27T15:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0NDUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "311578594a5d1aa4ba808ca5088312b43896a90c", "chunk": "diff --git a/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java b/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\nindex 3790dcade7..e5c8347ad3 100644\n--- a/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\n+++ b/drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java\n\n@@ -95,20 +97,20 @@ public class KogitoDMNScenarioRunnerHelper extends DMNScenarioRunnerHelper {\n     private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n         try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n             Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n-                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                    PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n                             fileStream\n                                     .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n                                     .map(Path::toString)\n                                     .toArray(String[]::new));\n \n             return s -> kieRuntimeFactories.keySet().stream()\n-                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .filter(kieBase -> KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n                     .map(kieRuntimeFactories::get)\n                     .findFirst()\n-                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+                    .orElseThrow(() -> new IllegalArgumentException(\"Failed to fine KieRuntimeFactory for model \" + s));\n \n         } catch (IOException e) {\n-            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);\n+            throw new IllegalStateException(\"Error initializing KogitoDMNScenarioRunnerHelper\", e);\n         }\n     }\n \n"}}, {"oid": "311578594a5d1aa4ba808ca5088312b43896a90c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/311578594a5d1aa4ba808ca5088312b43896a90c", "message": "[KOGITO-3155] PR comments", "committedDate": "2020-08-27T14:59:45Z", "type": "commit"}, {"oid": "c58b050f682f86a0a71833e9cb7b6ab527e47262", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c58b050f682f86a0a71833e9cb7b6ab527e47262", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-3155", "committedDate": "2020-08-27T14:59:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MDUyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r479980528", "bodyText": "@danielezonca Why you moved java.util import in this way? Used checkstyle in kogito-runtimes requires this?", "author": "yesamer", "createdAt": "2020-08-31T08:35:50Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java", "diffHunk": "@@ -38,11 +31,20 @@\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n+import org.kie.pmml.evaluator.assembler.service.PMMLCompilerService;\n+import org.kie.pmml.evaluator.assembler.service.PMMLLoaderService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.stream.Stream;", "originalCommit": "c58b050f682f86a0a71833e9cb7b6ab527e47262", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3MzkzMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r480073931", "bodyText": "I think I don't have any codestyle configured in kogito-* repos \ud83e\udd14", "author": "danielezonca", "createdAt": "2020-08-31T11:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MDUyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MjE2NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r479982165", "bodyText": "@danielezonca Here, you changed the format only. Is it really necessary?", "author": "yesamer", "createdAt": "2020-08-31T08:39:02Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java", "diffHunk": "@@ -73,8 +85,9 @@ private KieRuntimeFactoryBuilder() {\n                     internalKnowledgePackage = pkgReg.getPackage();\n                 }\n                 PMMLPackage pmmlPkg =\n-                        internalKnowledgePackage.getResourceTypePackages().computeIfAbsent(ResourceType.PMML,\n-                                                                                           rtp -> new PMMLPackageImpl());\n+                        internalKnowledgePackage.getResourceTypePackages().computeIfAbsent(\n+                                ResourceType.PMML,\n+                                rtp -> new PMMLPackageImpl());", "originalCommit": "c58b050f682f86a0a71833e9cb7b6ab527e47262", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3Mzc5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r480073798", "bodyText": "It is not really necessary but I find it more readable :)", "author": "danielezonca", "createdAt": "2020-08-31T11:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MjE2NQ=="}], "type": "inlineReview", "revised_code": null}]}