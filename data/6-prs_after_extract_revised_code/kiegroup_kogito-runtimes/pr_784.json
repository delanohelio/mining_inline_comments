{"pr_number": 784, "pr_title": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure per\u2026", "pr_createdAt": "2020-09-25T09:19:53Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/784", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NTgwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r494865801", "bodyText": "unneeded format change,", "author": "fjtirado", "createdAt": "2020-09-25T09:30:24Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -272,41 +271,38 @@ private MethodCallExpr createProcessRuntime() {\n                 new ThisExpr(),\n                 \"createProcessRuntime\");\n     }\n-    \n+\n     private Optional<MethodDeclaration> internalConfigure(ProcessMetaData processMetaData) {\n-       \n         if (!processMetaData.getGeneratedListeners().isEmpty()) {\n             BlockStmt body = new BlockStmt();\n             MethodDeclaration internalConfigure = new MethodDeclaration()\n                     .setModifiers(Modifier.Keyword.PUBLIC)\n                     .setType(targetTypeName)\n                     .setName(\"configure\")\n-                    .setBody(body);   \n-            \n+                    .setBody(body);\n+\n             // always call super.configure\n             body.addStatement(new MethodCallExpr(new SuperExpr(), \"configure\"));\n             processMetaData.getGeneratedListeners().forEach(listener -> {\n                 ClassOrInterfaceDeclaration clazz = listener.findFirst(ClassOrInterfaceDeclaration.class).get();\n                 MethodCallExpr eventSupport = new MethodCallExpr(new NameExpr(\"services\"), \"getEventSupport\");\n                 MethodCallExpr registerListener = new MethodCallExpr(eventSupport, \"addEventListener\")\n-                    .addArgument(\n-                        new ObjectCreationExpr(\n-                            null,\n-                            new ClassOrInterfaceType(\n-                                null,\n-                                listener.getPackageDeclaration().map(pd -> pd.getName().toString()).orElse(\"\") + \".\" +clazz.getName()),\n-                            NodeList.nodeList()));\n-                \n+                        .addArgument(", "originalCommit": "dbe7036057cf127e363970a897d3dea4a3d581ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e9113adf12be3bc875c3205045cd6c80b2069c32", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\nindex a6f48563b6..8c88967456 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n\n@@ -287,13 +287,13 @@ public class ProcessGenerator {\n                 ClassOrInterfaceDeclaration clazz = listener.findFirst(ClassOrInterfaceDeclaration.class).get();\n                 MethodCallExpr eventSupport = new MethodCallExpr(new NameExpr(\"services\"), \"getEventSupport\");\n                 MethodCallExpr registerListener = new MethodCallExpr(eventSupport, \"addEventListener\")\n-                        .addArgument(\n-                                new ObjectCreationExpr(\n-                                        null,\n-                                        new ClassOrInterfaceType(\n-                                                null,\n-                                                listener.getPackageDeclaration().map(pd -> pd.getName().toString()).orElse(\"\") + \".\" + clazz.getName()),\n-                                        NodeList.nodeList()));\n+                    .addArgument(\n+                        new ObjectCreationExpr(\n+                            null,\n+                            new ClassOrInterfaceType(\n+                                null,\n+                                listener.getPackageDeclaration().map(pd -> pd.getName().toString()).orElse(\"\") + \".\" +clazz.getName()),\n+                            NodeList.nodeList()));\n \n                 body.addStatement(registerListener);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NjE4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r494866181", "bodyText": "unneeded fomat change", "author": "fjtirado", "createdAt": "2020-09-25T09:31:03Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -434,57 +436,29 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n         }\n         String processInstanceFQCN = ProcessInstanceGenerator.qualifiedName(packageName, typeName);\n         cls.addExtendedType(abstractProcessType(modelTypeName))\n-        .addMember(constructorDeclaration)\n-        .addMember(getConstructorDeclaration())\n-        .addMember(createInstanceMethod(processInstanceFQCN))\n-        .addMember(createInstanceWithBusinessKeyMethod(processInstanceFQCN))\n-        .addMember(new MethodDeclaration()\n-                   .addModifier(Keyword.PUBLIC)\n-                   .setName(CREATE_MODEL)\n-                   .setType(modelTypeName)\n-                   .addAnnotation(Override.class)\n-                   .setBody(new BlockStmt()\n-                            .addStatement(new ReturnStmt(new ObjectCreationExpr(null, \n-                                                                                new ClassOrInterfaceType(null, modelTypeName), \n-                                                                                NodeList.nodeList())))))\n-        .addMember(createInstanceGenericMethod(processInstanceFQCN))\n-        .addMember(createInstanceGenericWithBusinessKeyMethod(processInstanceFQCN))\n-        .addMember(createInstanceGenericWithWorkflowInstanceMethod(processInstanceFQCN))\n-        .addMember(createReadOnlyInstanceGenericWithWorkflowInstanceMethod(processInstanceFQCN))\n-        .addMember(process(processMetaData));\n+                .addMember(constructorDeclaration)", "originalCommit": "dbe7036057cf127e363970a897d3dea4a3d581ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e9113adf12be3bc875c3205045cd6c80b2069c32", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\nindex a6f48563b6..8c88967456 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n\n@@ -429,14 +429,14 @@ public class ProcessGenerator {\n                                      clazzNameType,\n                                      NodeList.nodeList()));\n \n-                constructorDeclaration.addParameter(parameter);\n+                constructor.addParameter(parameter);\n                 handlersCollection.addArgument(new NameExpr(varName));\n                 additionalClasses.add(handler.getValue());\n             }\n         }\n         String processInstanceFQCN = ProcessInstanceGenerator.qualifiedName(packageName, typeName);\n         cls.addExtendedType(abstractProcessType(modelTypeName))\n-                .addMember(constructorDeclaration)\n+                .addMember(constructor)\n                 .addMember(getConstructorDeclaration())\n                 .addMember(createInstanceMethod(processInstanceFQCN))\n                 .addMember(createInstanceWithBusinessKeyMethod(processInstanceFQCN))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2ODU5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r494868597", "bodyText": "unneeded format change", "author": "fjtirado", "createdAt": "2020-09-25T09:35:23Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -96,12 +96,11 @@\n \n     private List<CompilationUnit> additionalClasses = new ArrayList<>();\n \n-    public ProcessGenerator(\n-            WorkflowProcess process,\n-            ProcessExecutableModelGenerator processGenerator,\n-            String typeName,\n-            String modelTypeName,\n-            String appCanonicalName) {\n+    public ProcessGenerator(WorkflowProcess process,", "originalCommit": "dbe7036057cf127e363970a897d3dea4a3d581ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e9113adf12be3bc875c3205045cd6c80b2069c32", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e9113adf12be3bc875c3205045cd6c80b2069c32", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used", "committedDate": "2020-09-25T09:48:18Z", "type": "forcePushed"}, {"oid": "156b179308f85fcc38809fe2d17245f231878d91", "url": "https://github.com/kiegroup/kogito-runtimes/commit/156b179308f85fcc38809fe2d17245f231878d91", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used", "committedDate": "2020-09-25T11:37:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMDY2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495700668", "bodyText": "If this test requires Infinispan, then it's an Integration Test and it should be renamed from BasicRestTest to BasicRestIT.", "author": "Sgitario", "createdAt": "2020-09-28T05:45:26Z", "path": "integration-tests/integration-tests-quarkus-processes/src/test/java/org/kie/kogito/integrationtests/quarkus/BasicRestTest.java", "diffHunk": "@@ -33,6 +35,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n @QuarkusTest\n+@QuarkusTestResource(InfinispanQuarkusTestResource.Conditional.class)\n class BasicRestTest {", "originalCommit": "156b179308f85fcc38809fe2d17245f231878d91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxMDk0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495710941", "bodyText": "all tests in this module are conditional to Infinispan as we run the same set of tests, with and without persistence enabled.", "author": "cristianonicolai", "createdAt": "2020-09-28T06:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMDY2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMTM3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495701373", "bodyText": "If this test requires Infinispan, then it's an Integration test and it should be renamed from InfinispanTest to InfinispanIT. Also, the name does not say what this suite is meant to. Can you rename it to a more meaningful name?", "author": "Sgitario", "createdAt": "2020-09-28T05:47:59Z", "path": "integration-tests/integration-tests-quarkus-processes/src/test/java/org/kie/kogito/integrationtests/quarkus/infinispan/InfinispanTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.quarkus.infinispan;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.quarkus.InfinispanQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(InfinispanQuarkusTestResource.class)\n+class InfinispanTest {", "originalCommit": "156b179308f85fcc38809fe2d17245f231878d91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxMDUzNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495710536", "bodyText": "open to suggestions :) testIfinispanPersistence? just really checking if the cache was created and contains the new process in it, as the error would be that it would silently use in memory and not Infinispan.", "author": "cristianonicolai", "createdAt": "2020-09-28T06:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMTM3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMTY1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495701652", "bodyText": "Same comments as in the quarkus version.", "author": "Sgitario", "createdAt": "2020-09-28T05:49:00Z", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/infinispan/InfinispanTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot.infinispan;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.kie.kogito.integrationtests.springboot.BaseRestTest;\n+import org.kie.kogito.integrationtests.springboot.KogitoSpringbootApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n+@ContextConfiguration(initializers = InfinispanSpringBootTestResource.class)\n+class InfinispanTest extends BaseRestTest {", "originalCommit": "156b179308f85fcc38809fe2d17245f231878d91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMjA1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495702054", "bodyText": "Format issue here.", "author": "Sgitario", "createdAt": "2020-09-28T05:50:21Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -342,30 +339,36 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             .setName(targetTypeName)\n             .setModifiers(Modifier.Keyword.PUBLIC);\n         ProcessMetaData processMetaData = processExecutable.generate();\n-        ConstructorDeclaration constructorDeclaration =\n-                getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n+        ConstructorDeclaration constructor = getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n+\n+        if (addonsConfig.usePersistence()) {\n+            constructor.addParameter(ProcessInstancesFactory.class.getCanonicalName(), FACTORY);\n+        }\n+\n         MethodCallExpr handlersCollection = new MethodCallExpr(new NameExpr(\"java.util.Arrays\"), \"asList\");\n-        constructorDeclaration\n-            .setBody(\n-                     new BlockStmt()\n-                         .addStatement(\n-                                       new MethodCallExpr(null, \"super\")\n-                                           .addArgument(new NameExpr(APPLICATION))\n-                                           .addArgument(handlersCollection))\n-                         .addStatement(new MethodCallExpr(\"activate\")));\n+        constructor.setBody(new BlockStmt()\n+                                               .addStatement(new MethodCallExpr(null, \"super\")", "originalCommit": "156b179308f85fcc38809fe2d17245f231878d91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNjkwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495716907", "bodyText": "fixed", "author": "cristianonicolai", "createdAt": "2020-09-28T06:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMjA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "1ab3b28de9efcad2d9675c3a274c27906603a99e", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\nindex 0456f6da12..83a760b58c 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n\n@@ -347,11 +347,11 @@ public class ProcessGenerator {\n \n         MethodCallExpr handlersCollection = new MethodCallExpr(new NameExpr(\"java.util.Arrays\"), \"asList\");\n         constructor.setBody(new BlockStmt()\n-                                               .addStatement(new MethodCallExpr(null, \"super\")\n-                                                                     .addArgument(new NameExpr(APPLICATION))\n-                                                                     .addArgument(new NameExpr(addonsConfig.usePersistence() ? FACTORY : \"null\"))\n-                                                                     .addArgument(handlersCollection))\n-                                               .addStatement(new MethodCallExpr(\"activate\")));\n+                                    .addStatement(new MethodCallExpr(null, \"super\")\n+                                                          .addArgument(new NameExpr(APPLICATION))\n+                                                          .addArgument(new NameExpr(addonsConfig.usePersistence() ? FACTORY : \"null\"))\n+                                                          .addArgument(handlersCollection))\n+                                    .addStatement(new MethodCallExpr(\"activate\")));\n         \n         if (useInjection()) {\n             annotator.withNamedApplicationComponent(cls, process.getId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMjMzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495702338", "bodyText": "Really nice! This way we don't rely on the default configuration from docker.", "author": "Sgitario", "createdAt": "2020-09-28T05:51:27Z", "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoInfinispanContainer.java", "diffHunk": "@@ -33,16 +34,17 @@\n     public static final String NAME = \"infinispan\";\n     public static final int PORT = 11222;\n     public static final String INFINISPAN_PROPERTY = \"container.image.\" + NAME;\n-    public static final String USER = \"admin\";\n-    public static final String PASS = \"admin\";\n+    public static final String CONF_PATH = \"/opt/infinispan/server/conf/\";\n \n     public KogitoInfinispanContainer() {\n         addExposedPort(PORT);\n-        withEnv(\"USER\", USER);\n-        withEnv(\"PASS\", PASS);\n         withLogConsumer(new Slf4jLogConsumer(LOGGER));\n         waitingFor(Wait.forHttp(\"/\"));\n         setDockerImageName(System.getProperty(INFINISPAN_PROPERTY));\n+        withClasspathResourceMapping(\"testcontainers/infinispan/infinispan-local.xml\", CONF_PATH + \"infinispan-local.xml\", BindMode.READ_ONLY);\n+        withClasspathResourceMapping(\"testcontainers/infinispan/users.properties\", CONF_PATH + \"users.properties\", BindMode.READ_ONLY);\n+        withClasspathResourceMapping(\"testcontainers/infinispan/groups.properties\", CONF_PATH + \"groups.properties\", BindMode.READ_ONLY);\n+        setCommand(\"/opt/infinispan/bin/server.sh -c infinispan-local.xml\");", "originalCommit": "156b179308f85fcc38809fe2d17245f231878d91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7578faa62195a21d6fec108120d822d0c04934ed", "chunk": "diff --git a/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoInfinispanContainer.java b/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoInfinispanContainer.java\nindex 2b17bd02c9..7807400b3a 100644\n--- a/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoInfinispanContainer.java\n+++ b/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoInfinispanContainer.java\n\n@@ -34,17 +33,16 @@ public class KogitoInfinispanContainer extends GenericContainer<KogitoInfinispan\n     public static final String NAME = \"infinispan\";\n     public static final int PORT = 11222;\n     public static final String INFINISPAN_PROPERTY = \"container.image.\" + NAME;\n-    public static final String CONF_PATH = \"/opt/infinispan/server/conf/\";\n+    public static final String USER = \"admin\";\n+    public static final String PASS = \"admin\";\n \n     public KogitoInfinispanContainer() {\n         addExposedPort(PORT);\n+        withEnv(\"USER\", USER);\n+        withEnv(\"PASS\", PASS);\n         withLogConsumer(new Slf4jLogConsumer(LOGGER));\n         waitingFor(Wait.forHttp(\"/\"));\n         setDockerImageName(System.getProperty(INFINISPAN_PROPERTY));\n-        withClasspathResourceMapping(\"testcontainers/infinispan/infinispan-local.xml\", CONF_PATH + \"infinispan-local.xml\", BindMode.READ_ONLY);\n-        withClasspathResourceMapping(\"testcontainers/infinispan/users.properties\", CONF_PATH + \"users.properties\", BindMode.READ_ONLY);\n-        withClasspathResourceMapping(\"testcontainers/infinispan/groups.properties\", CONF_PATH + \"groups.properties\", BindMode.READ_ONLY);\n-        setCommand(\"/opt/infinispan/bin/server.sh -c infinispan-local.xml\");\n     }\n \n     @Override\n"}}, {"oid": "1ab3b28de9efcad2d9675c3a274c27906603a99e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1ab3b28de9efcad2d9675c3a274c27906603a99e", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used", "committedDate": "2020-09-28T06:22:27Z", "type": "forcePushed"}, {"oid": "bee3eb5eb7ce64305b1c5d22862f906c395b61a7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bee3eb5eb7ce64305b1c5d22862f906c395b61a7", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used", "committedDate": "2020-09-29T00:24:12Z", "type": "forcePushed"}, {"oid": "7578faa62195a21d6fec108120d822d0c04934ed", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7578faa62195a21d6fec108120d822d0c04934ed", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used", "committedDate": "2020-09-29T04:38:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNTk5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r496605993", "bodyText": "Im now wondering if it wont be better to add factory as the third parameter rather than the second, please see comment below", "author": "fjtirado", "createdAt": "2020-09-29T10:21:02Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java", "diffHunk": "@@ -71,22 +71,27 @@ protected AbstractProcess(ProcessConfig config) {\n     }\n \n     protected AbstractProcess(ProcessRuntimeServiceProvider services) {\n-       this (services,Collections.emptyList());\n+        this(services, null, Collections.emptyList());\n+    }\n+\n+    protected AbstractProcess(Application app, Collection<WorkItemHandler> handlers) {\n+        this(app, null, handlers);\n     }\n     \n-    protected AbstractProcess (Application app , Collection<WorkItemHandler> handlers) {\n-        this (new ConfiguredProcessServices(app.config().process()),handlers);\n+    protected AbstractProcess(Application app, ProcessInstancesFactory factory, Collection<WorkItemHandler> handlers) {", "originalCommit": "7578faa62195a21d6fec108120d822d0c04934ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3OTk3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r496779979", "bodyText": "done", "author": "cristianonicolai", "createdAt": "2020-09-29T14:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNTk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java\nindex 810c32d1af..dff4265d03 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java\n\n@@ -71,19 +71,19 @@ public abstract class AbstractProcess<T extends Model> implements Process<T> {\n     }\n \n     protected AbstractProcess(ProcessRuntimeServiceProvider services) {\n-        this(services, null, Collections.emptyList());\n+        this(services, Collections.emptyList(), null);\n     }\n \n     protected AbstractProcess(Application app, Collection<WorkItemHandler> handlers) {\n-        this(app, null, handlers);\n+        this(app, handlers, null);\n     }\n     \n-    protected AbstractProcess(Application app, ProcessInstancesFactory factory, Collection<WorkItemHandler> handlers) {\n-        this(new ConfiguredProcessServices(app.config().process()), factory, handlers);\n+    protected AbstractProcess(Application app, Collection<WorkItemHandler> handlers, ProcessInstancesFactory factory) {\n+        this(new ConfiguredProcessServices(app.config().process()), handlers, factory);\n         this.app = app;\n     }\n \n-    protected AbstractProcess(ProcessRuntimeServiceProvider services, ProcessInstancesFactory factory, Collection<WorkItemHandler> handlers) {\n+    protected AbstractProcess(ProcessRuntimeServiceProvider services, Collection<WorkItemHandler> handlers, ProcessInstancesFactory factory) {\n         this.services = services;\n         this.instances = new MapProcessInstances<>();\n         this.processInstancesFactory = factory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjQzMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r496606431", "bodyText": "If we put factory as third parameter of super constructor, we can skip the null and just do not add the argument, wdyt?", "author": "fjtirado", "createdAt": "2020-09-29T10:21:47Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -342,30 +339,36 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             .setName(targetTypeName)\n             .setModifiers(Modifier.Keyword.PUBLIC);\n         ProcessMetaData processMetaData = processExecutable.generate();\n-        ConstructorDeclaration constructorDeclaration =\n-                getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n+        ConstructorDeclaration constructor = getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n+\n+        if (addonsConfig.usePersistence()) {\n+            constructor.addParameter(ProcessInstancesFactory.class.getCanonicalName(), FACTORY);\n+        }\n+\n         MethodCallExpr handlersCollection = new MethodCallExpr(new NameExpr(\"java.util.Arrays\"), \"asList\");\n-        constructorDeclaration\n-            .setBody(\n-                     new BlockStmt()\n-                         .addStatement(\n-                                       new MethodCallExpr(null, \"super\")\n-                                           .addArgument(new NameExpr(APPLICATION))\n-                                           .addArgument(handlersCollection))\n-                         .addStatement(new MethodCallExpr(\"activate\")));\n+        constructor.setBody(new BlockStmt()\n+                                    .addStatement(new MethodCallExpr(null, \"super\")\n+                                                          .addArgument(new NameExpr(APPLICATION))\n+                                                          .addArgument(new NameExpr(addonsConfig.usePersistence() ? FACTORY : \"null\"))", "originalCommit": "7578faa62195a21d6fec108120d822d0c04934ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\nindex e7f33dff48..ee0950deff 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java\n\n@@ -341,16 +341,18 @@ public class ProcessGenerator {\n         ProcessMetaData processMetaData = processExecutable.generate();\n         ConstructorDeclaration constructor = getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n \n+        MethodCallExpr handlersCollection = new MethodCallExpr(new NameExpr(\"java.util.Arrays\"), \"asList\");\n+        MethodCallExpr superMethod = new MethodCallExpr(null, \"super\")\n+                .addArgument(new NameExpr(APPLICATION))\n+                .addArgument(handlersCollection);\n+\n         if (addonsConfig.usePersistence()) {\n             constructor.addParameter(ProcessInstancesFactory.class.getCanonicalName(), FACTORY);\n+            superMethod.addArgument(new NameExpr(FACTORY));\n         }\n-\n-        MethodCallExpr handlersCollection = new MethodCallExpr(new NameExpr(\"java.util.Arrays\"), \"asList\");\n+        \n         constructor.setBody(new BlockStmt()\n-                                    .addStatement(new MethodCallExpr(null, \"super\")\n-                                                          .addArgument(new NameExpr(APPLICATION))\n-                                                          .addArgument(new NameExpr(addonsConfig.usePersistence() ? FACTORY : \"null\"))\n-                                                          .addArgument(handlersCollection))\n+                                    .addStatement(superMethod)\n                                     .addStatement(new MethodCallExpr(\"activate\")));\n         \n         if (useInjection()) {\n"}}, {"oid": "5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used", "committedDate": "2020-09-29T14:46:14Z", "type": "commit"}, {"oid": "5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used", "committedDate": "2020-09-29T14:46:14Z", "type": "forcePushed"}]}