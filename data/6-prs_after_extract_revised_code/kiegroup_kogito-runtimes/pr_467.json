{"pr_number": 467, "pr_title": "[KOGITO-1248] Add casemgmt tests", "pr_createdAt": "2020-04-21T20:13:45Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/467", "timeline": [{"oid": "b36881a30c27ac9101b92dce63b92df5c72a4f60", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b36881a30c27ac9101b92dce63b92df5c72a4f60", "message": "[KOGITO-1248] Add casemgmt tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-04-22T09:21:28Z", "type": "forcePushed"}, {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2ab16fddfb9586c39b243b901c30622281945c8d", "message": "[KOGITO-1248] Add casemgmt tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-04-22T11:25:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTAyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413615023", "bodyText": "if these are public maybe we should move them to some more descriptive class name. Like Messages or something like that?", "author": "evacchi", "createdAt": "2020-04-23T08:25:08Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java", "diffHunk": "@@ -48,15 +48,16 @@\n import static org.jbpm.ruleflow.core.factory.MappableNodeFactory.METHOD_OUT_MAPPING;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_DONE;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_NAME;\n+import static org.jbpm.ruleflow.core.factory.StateBasedNodeFactory.METHOD_TIMER;\n \n public abstract class AbstractNodeVisitor extends AbstractVisitor {\n \n-    protected static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n-    protected static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n-    protected static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n-    protected static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n-    protected static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n-    protected static final String METADATA_EVENT_TYPE = \"EventType\";\n+    public static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n+    public static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n+    public static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n+    public static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n+    public static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n+    public static final String METADATA_EVENT_TYPE = \"EventType\";", "originalCommit": "2ab16fddfb9586c39b243b901c30622281945c8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMjE3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413632175", "bodyText": "Do you think a Metadata interface would be better? I thought putting these constants in the \"owner\" visitors or in the common ancestor if they are shared.", "author": "ruromero", "createdAt": "2020-04-23T08:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTU2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351562", "bodyText": "Metadata interface/util class would be perfect!", "author": "MarianMacik", "createdAt": "2020-05-04T10:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java\nindex 77ee26c9ae..4b9a150718 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java\n\n@@ -44,38 +41,31 @@ import java.util.List;\n import java.util.Map.Entry;\n \n import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.jbpm.ruleflow.core.Metadata.HIDDEN;\n import static org.jbpm.ruleflow.core.factory.MappableNodeFactory.METHOD_IN_MAPPING;\n import static org.jbpm.ruleflow.core.factory.MappableNodeFactory.METHOD_OUT_MAPPING;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_DONE;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_NAME;\n-import static org.jbpm.ruleflow.core.factory.StateBasedNodeFactory.METHOD_TIMER;\n \n-public abstract class AbstractNodeVisitor extends AbstractVisitor {\n-\n-    public static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n-    public static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n-    public static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n-    public static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n-    public static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n-    public static final String METADATA_EVENT_TYPE = \"EventType\";\n+public abstract class AbstractNodeVisitor<T extends Node> extends AbstractVisitor {\n \n     protected static final String EVENT_TYPE_SIGNAL = \"signal\";\n     protected static final String EVENT_TYPE_MESSAGE = \"message\";\n \n     protected abstract String getNodeKey();\n \n-    public void visitNode(Node node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+    public void visitNode(T node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n         visitNode(FACTORY_FIELD_NAME, node, body, variableScope, metadata);\n     }\n \n-    protected String getNodeId(Node node) {\n+    protected String getNodeId(T node) {\n         return getNodeKey() + node.getId();\n     }\n \n-    public void visitNode(String factoryField, Node node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+    public void visitNode(String factoryField, T node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n     }\n \n-    protected MethodCallExpr getNameMethod(Node node, String defaultName) {\n+    protected MethodCallExpr getNameMethod(T node, String defaultName) {\n         return getFactoryMethod(getNodeId(node), METHOD_NAME, new StringLiteralExpr(getOrDefault(node.getName(), defaultName)));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413615785", "bodyText": "could it be mis-read? I was thinking this was pointing to the \"parent\" of this node (i.e. another node).", "author": "evacchi", "createdAt": "2020-04-23T08:26:09Z", "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "originalCommit": "2ab16fddfb9586c39b243b901c30622281945c8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMDc5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413630798", "bodyText": "I renamed it because some nodes have their own nodeContainer. Besides, whenever this method is used is assigned to a variable called parent and the attribute returned is parentNodeContainer.", "author": "ruromero", "createdAt": "2020-04-23T08:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MDMwMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419350300", "bodyText": "Hmm, if some nodes have their own nodeContainer, then getNodeContainer() should return \"their own nodeContainer\" or not?", "author": "MarianMacik", "createdAt": "2020-05-04T10:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMzA3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419613071", "bodyText": "Only CompositeNode has its own nodeContainer? I mean it seems it is returning itself.\nWhy not just overriding the original getNodeContainer on  CompositeNode, or whatever node that has a different behavior other than returning the parent.", "author": "tiagodolphine", "createdAt": "2020-05-04T17:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MTQ2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419671468", "bodyText": "Ah, I see now. CompositeNode has another NodeContainer named nodeContainer but this, until now, wasn't returned by any of the CompositeNode methods. So by calling getNodeContainer() the NodeContainer from the NodeImpl parent was returned and there was no option to obtain the NodeContainer of CompositeNode using a getter. Now, the getParentContainer() will return the one-level-above container (the one from NodeImpl) and getNodeContainer() will return the one from CompositeNode. In practice, these nodes can be nested into each other many times, but now it is possible to obtain just the container with nodes inside (\"belonging to\") the CompositeNode and the container which CompositeNode is in separately.", "author": "MarianMacik", "createdAt": "2020-05-04T19:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTEzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351132", "bodyText": "Hmm, it seems you swapped these 2 tests :)\nHere the name of the test is time cycle but you are setting time duration and vice versa.", "author": "MarianMacik", "createdAt": "2020-05-04T10:46:28Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -116,7 +118,11 @@ public void testBoundaryTimerTimeCycle() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeCycle(\"1s###5s\").cancelActivity(false).done()\n+                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2)\n+                    .metaData(BoundaryEventNodeFactory.METADATA_TIME_DURATION, duration)", "originalCommit": "2ab16fddfb9586c39b243b901c30622281945c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\nindex 01b19ce75f..4ee25f0194 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\n\n@@ -109,28 +126,40 @@ public class ProcessFactoryTest extends JbpmBpmn2TestCase {\n     public void testBoundaryTimerTimeCycle() throws Exception {\n         NodeLeftCountDownProcessEventListener countDownListener = new NodeLeftCountDownProcessEventListener(\"BoundaryTimerEvent\",\n                                                                                                             1);\n-        String duration = \"1s\";\n+        String timeCycle = \"1s###5s\";\n         RuleFlowProcessFactory factory = RuleFlowProcessFactory.createProcess(\"org.jbpm.process\");\n         factory\n                 // header\n-                .name(\"My process\").packageName(\"org.jbpm\")\n+                .name(\"My process\")\n+                .packageName(\"org.jbpm\")\n                 // nodes\n-                .startNode(1).name(\"Start\").done()\n-                .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n-                .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2)\n-                    .metaData(BoundaryEventNodeFactory.METADATA_TIME_DURATION, duration)\n-                    .metaData(BoundaryEventNodeFactory.METADATA_CANCEL_ACTIVITY, false)\n-                    .eventType(BoundaryEventNodeFactory.EVENT_TYPE_TIMER, duration)\n+                .startNode(1)\n+                    .name(\"Start\")\n+                    .done()\n+                .humanTaskNode(2)\n+                    .name(\"Task\")\n+                    .actorId(\"john\")\n+                    .taskName(\"MyTask\")\n+                    .done()\n+                .endNode(3)\n+                    .name(\"End1\")\n+                    .terminate(false)\n+                    .done()\n+                .boundaryEventNode(4)\n+                    .name(\"BoundaryTimerEvent\")\n+                    .attachedTo(2)\n+                    .metaData(TIME_CYCLE, timeCycle)\n+                    .metaData(CANCEL_ACTIVITY, false)\n+                    .eventType(EVENT_TYPE_TIMER, timeCycle)\n+                    .done()\n+                .endNode(5)\n+                    .name(\"End2\")\n+                    .terminate(false)\n                     .done()\n-                .endNode(5).name(\"End2\").terminate(false).done()\n                 // connections\n-                .connection(1,\n-                            2)\n-                .connection(2,\n-                            3)\n-                .connection(4,\n-                            5);\n+                .connection(1, 2)\n+                .connection(2, 3)\n+                .connection(4, 5);\n         RuleFlowProcess process = factory.validate().getProcess();\n \n         Resource res = ResourceFactory.newByteArrayResource(XmlBPMNProcessDumper.INSTANCE.dump(process).getBytes());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTI0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351246", "bodyText": "Here's the second test.", "author": "MarianMacik", "createdAt": "2020-05-04T10:46:43Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -165,7 +172,13 @@ public void testBoundaryTimerTimeDuration() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeDuration(\"1s\").cancelActivity(false).done()\n+                .boundaryEventNode(4)\n+                    .name(\"BoundaryTimerEvent\")\n+                    .attachedTo(2)\n+                    .metaData(BoundaryEventNodeFactory.METADATA_TIME_CYCLE, timeCycle)", "originalCommit": "2ab16fddfb9586c39b243b901c30622281945c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\nindex 01b19ce75f..4ee25f0194 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\n\n@@ -163,30 +192,40 @@ public class ProcessFactoryTest extends JbpmBpmn2TestCase {\n     public void testBoundaryTimerTimeDuration() throws Exception {\n         NodeLeftCountDownProcessEventListener countDownListener = new NodeLeftCountDownProcessEventListener(\"BoundaryTimerEvent\",\n                                                                                                             1);\n-        String timeCycle = \"1s###5s\";\n+        String timeDuration = \"1s\";\n         RuleFlowProcessFactory factory = RuleFlowProcessFactory.createProcess(\"org.jbpm.process\");\n         factory\n                 // header\n-                .name(\"My process\").packageName(\"org.jbpm\")\n+                .name(\"My process\")\n+                .packageName(\"org.jbpm\")\n                 // nodes\n-                .startNode(1).name(\"Start\").done()\n-                .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n-                .endNode(3).name(\"End1\").terminate(false).done()\n+                .startNode(1)\n+                    .name(\"Start\")\n+                    .done()\n+                .humanTaskNode(2)\n+                    .name(\"Task\")\n+                    .actorId(\"john\")\n+                    .taskName(\"MyTask\")\n+                    .done()\n+                .endNode(3)\n+                    .name(\"End1\")\n+                    .terminate(false)\n+                    .done()\n                 .boundaryEventNode(4)\n                     .name(\"BoundaryTimerEvent\")\n                     .attachedTo(2)\n-                    .metaData(BoundaryEventNodeFactory.METADATA_TIME_CYCLE, timeCycle)\n-                    .metaData(BoundaryEventNodeFactory.METADATA_CANCEL_ACTIVITY, false)\n-                    .eventType(BoundaryEventNodeFactory.EVENT_TYPE_TIMER, timeCycle)\n+                    .metaData(TIME_DURATION, timeDuration)\n+                    .metaData(CANCEL_ACTIVITY, false)\n+                    .eventType(EVENT_TYPE_TIMER, timeDuration)\n+                    .done()\n+                .endNode(5)\n+                    .name(\"End2\")\n+                    .terminate(false)\n                     .done()\n-                .endNode(5).name(\"End2\").terminate(false).done()\n                 // connections\n-                .connection(1,\n-                            2)\n-                .connection(2,\n-                            3)\n-                .connection(4,\n-                            5);\n+                .connection(1, 2)\n+                .connection(2, 3)\n+                .connection(4, 5);\n         RuleFlowProcess process = factory.validate().getProcess();\n \n         Resource res = ResourceFactory.newByteArrayResource(XmlBPMNProcessDumper.INSTANCE.dump(process).getBytes());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MDYxNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419380616", "bodyText": "Why where these helper methods removed? Or did you want to make the setup more explicit?", "author": "MarianMacik", "createdAt": "2020-05-04T11:52:11Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/BoundaryEventNodeFactory.java", "diffHunk": "@@ -118,24 +115,4 @@ public BoundaryEventNodeFactory eventType(String eventTypePrefix, String eventTy\n         super.eventFilter(filter);\n         return this;\n     }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        return metaData(METADATA_TIME_CYCLE, timeCycle);\n-    }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle, String language) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        metaData(METADATA_TIME_CYCLE, timeCycle);\n-        return metaData(METADATA_LANGUAGE, language);\n-    }\n-\n-    public BoundaryEventNodeFactory timeDuration(String timeDuration) {\n-        eventType(EVENT_TYPE_TIMER, timeDuration);\n-        return metaData(METADATA_TIME_DURATION, timeDuration);\n-    }\n-\n-    public BoundaryEventNodeFactory cancelActivity(boolean cancelActivity) {\n-        return metaData(METADATA_CANCEL_ACTIVITY, cancelActivity);\n-    }", "originalCommit": "2ab16fddfb9586c39b243b901c30622281945c8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNDkyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419404926", "bodyText": "The main reason is that Metadata attributes are copied in the VisitMetadata method so this seems redundant.", "author": "ruromero", "createdAt": "2020-05-04T12:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MDYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MjY4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419672685", "bodyText": "I see, so eventTypes and metaData are \"copied\" when bpmn is traversed anyway.", "author": "MarianMacik", "createdAt": "2020-05-04T19:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MDYxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDQ4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419384489", "bodyText": "Hmm, what about calling it getParentNodeContainer()? This way it will be consistent, i.e. getNodeContainer() for getting this node's container and getParentNodeContainer() for getting the node container of this node parent :) Wdyt?", "author": "MarianMacik", "createdAt": "2020-05-04T12:00:23Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java", "diffHunk": "@@ -245,7 +245,7 @@ public Connection getTo() {\n         return getOutgoingConnections(org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE);\n     }\n \n-    public NodeContainer getNodeContainer() {\n+    public NodeContainer getParentContainer() {\n         return parentNodeContainer;", "originalCommit": "2ab16fddfb9586c39b243b901c30622281945c8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNDE5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419404192", "bodyText": "What about just getContainer and getParentContainer ? FYI not all nodes have their own container, only CompositeNode nodes have it.", "author": "ruromero", "createdAt": "2020-05-04T12:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MzI1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419673251", "bodyText": "Yes, +1.", "author": "MarianMacik", "createdAt": "2020-05-04T19:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java\nindex a1984725e6..2248f3c36e 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java\n\n@@ -246,11 +246,11 @@ public abstract class NodeImpl implements Node, Serializable, ContextResolver {\n     }\n \n     public NodeContainer getParentContainer() {\n-        return parentNodeContainer;\n+        return parentContainer;\n     }\n     \n-    public void setNodeContainer(NodeContainer nodeContainer) {\n-        this.parentNodeContainer = nodeContainer;\n+    public void setParentContainer(NodeContainer nodeContainer) {\n+        this.parentContainer = nodeContainer;\n     }\n     \n     public void setContext(String contextId, Context context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NjA1NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419386055", "bodyText": "So in this case the actionType key is not present in a map? In this case we should probably assert for null in the previous if condition, right?", "author": "MarianMacik", "createdAt": "2020-05-04T12:03:46Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java", "diffHunk": "@@ -194,7 +197,7 @@ private static void assertActions(Node eNode, ExtendedNodeImpl expected, Extende\n             try {\n                 if (expected.getActions(actionType) == null) {\n                     assertNull(current.getActions(actionType));\n-                } else {\n+                } else if (!EVENT_NODE_ENTER.equals(actionType) && !EVENT_NODE_EXIT.equals(actionType)){", "originalCommit": "2ab16fddfb9586c39b243b901c30622281945c8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NTA2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419465061", "bodyText": "As discussed, this is ok.", "author": "MarianMacik", "createdAt": "2020-05-04T14:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NjA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java b/kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java\nindex 560c840c57..1589f77fc5 100644\n--- a/kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java\n+++ b/kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java\n\n@@ -197,7 +197,7 @@ public class ProcessGenerationTest extends AbstractCodegenTest {\n             try {\n                 if (expected.getActions(actionType) == null) {\n                     assertNull(current.getActions(actionType));\n-                } else if (!EVENT_NODE_ENTER.equals(actionType) && !EVENT_NODE_EXIT.equals(actionType)){\n+                } else if (!EVENT_NODE_ENTER.equals(actionType) && !EVENT_NODE_EXIT.equals(actionType)) {\n                     assertNotNull(current.getActions(actionType));\n                     // onEntry and onExit actions are not yet supported\n //                    assertEquals(expected.getActions(actionType).size(), current.getActions(actionType).size());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2OTE3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419569171", "bodyText": "just a formatting comment, it would be great to break all chained method calls into different lines.", "author": "tiagodolphine", "createdAt": "2020-05-04T16:36:01Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -116,7 +122,11 @@ public void testBoundaryTimerTimeCycle() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeCycle(\"1s###5s\").cancelActivity(false).done()\n+                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2)", "originalCommit": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\nindex b5f290be9d..4ee25f0194 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java\n\n@@ -117,24 +130,36 @@ public class ProcessFactoryTest extends JbpmBpmn2TestCase {\n         RuleFlowProcessFactory factory = RuleFlowProcessFactory.createProcess(\"org.jbpm.process\");\n         factory\n                 // header\n-                .name(\"My process\").packageName(\"org.jbpm\")\n+                .name(\"My process\")\n+                .packageName(\"org.jbpm\")\n                 // nodes\n-                .startNode(1).name(\"Start\").done()\n-                .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n-                .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2)\n+                .startNode(1)\n+                    .name(\"Start\")\n+                    .done()\n+                .humanTaskNode(2)\n+                    .name(\"Task\")\n+                    .actorId(\"john\")\n+                    .taskName(\"MyTask\")\n+                    .done()\n+                .endNode(3)\n+                    .name(\"End1\")\n+                    .terminate(false)\n+                    .done()\n+                .boundaryEventNode(4)\n+                    .name(\"BoundaryTimerEvent\")\n+                    .attachedTo(2)\n                     .metaData(TIME_CYCLE, timeCycle)\n                     .metaData(CANCEL_ACTIVITY, false)\n                     .eventType(EVENT_TYPE_TIMER, timeCycle)\n                     .done()\n-                .endNode(5).name(\"End2\").terminate(false).done()\n+                .endNode(5)\n+                    .name(\"End2\")\n+                    .terminate(false)\n+                    .done()\n                 // connections\n-                .connection(1,\n-                            2)\n-                .connection(2,\n-                            3)\n-                .connection(4,\n-                            5);\n+                .connection(1, 2)\n+                .connection(2, 3)\n+                .connection(4, 5);\n         RuleFlowProcess process = factory.validate().getProcess();\n \n         Resource res = ResourceFactory.newByteArrayResource(XmlBPMNProcessDumper.INSTANCE.dump(process).getBytes());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzU1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419573554", "bodyText": "why not passing the function,body::addStatement  as a parameter to the visitCustomFields method and apply it on the method implementation, I mean to keep the same approach of other visit methods, or just change the method name to getCustomFields ?", "author": "tiagodolphine", "createdAt": "2020-05-04T16:42:56Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java", "diffHunk": "@@ -71,6 +73,8 @@ public void visitNode(String factoryField, Node node, BlockStmt body, VariableSc\n             visitVariableScope(getNodeId(node), variableScopeNode, body, new HashSet<>());\n         }\n \n+        visitCustomFields(compositeContextNode).forEach(body::addStatement);", "originalCommit": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzA5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419653090", "bodyText": "Probably the best option would be to pass body as another argument as with other visitors.", "author": "MarianMacik", "createdAt": "2020-05-04T18:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNTc2MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419705760", "bodyText": "why not passing the function,body::addStatement as a parameter to the visitCustomFields method and apply it on the method implementation, I mean to keep the same approach of other visit methods, or just change the method name to getCustomFields ?\n\nThat will make it look very different from the other visit methods.\n\nProbably the best option would be to pass body as another argument as with other visitors.\n\nI wanted to avoid passing an object to be modified as an argument. This is part of some refactoring I did everywhere that didn't require too big changes, like in visitNodes.", "author": "ruromero", "createdAt": "2020-05-04T20:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java\nindex 0c520b20b1..144d78bd86 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java\n\n@@ -61,23 +61,27 @@ public class CompositeContextNodeVisitor extends AbstractCompositeNodeVisitor {\n     }\n \n     @Override\n-    public void visitNode(String factoryField, Node node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n-        CompositeContextNode compositeContextNode = (CompositeContextNode) node;\n-\n-        body.addStatement(getAssignedFactoryMethod(factoryField, factoryClass(), getNodeId(node), factoryMethod(), new LongLiteralExpr(compositeContextNode.getId())))\n+    public void visitNode(String factoryField, T node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        body.addStatement(getAssignedFactoryMethod(factoryField, factoryClass(), getNodeId(node), factoryMethod(), new LongLiteralExpr(node.getId())))\n                 .addStatement(getNameMethod(node, getDefaultName()));\n-        visitMetaData(compositeContextNode.getMetaData(), body, getNodeId(node));\n-        VariableScope variableScopeNode = (VariableScope) compositeContextNode.getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        visitMetaData(node.getMetaData(), body, getNodeId(node));\n+        VariableScope variableScopeNode = (VariableScope) node.getDefaultContext(VariableScope.VARIABLE_SCOPE);\n \n         if (variableScope != null) {\n             visitVariableScope(getNodeId(node), variableScopeNode, body, new HashSet<>());\n         }\n \n-        visitCustomFields(compositeContextNode).forEach(body::addStatement);\n+        visitCustomFields(node).forEach(body::addStatement);\n+\n+        // composite context node might not have variable scope\n+        // in that case inherit it from parent\n+        if (node.getDefaultContext(VariableScope.VARIABLE_SCOPE) == null) {\n+            visitNodes(getNodeId(node), node.getNodes(), body, variableScope, metadata);\n+        } else {\n+            visitNodes(getNodeId(node), node.getNodes(), body, ((VariableScope) node.getDefaultContext(VariableScope.VARIABLE_SCOPE)), metadata);\n+        }\n \n-        // visit nodes\n-        visitNodes(getNodeId(node), compositeContextNode.getNodes(), body, ((VariableScope) compositeContextNode.getDefaultContext(VariableScope.VARIABLE_SCOPE)), metadata);\n-        visitConnections(getNodeId(node), compositeContextNode.getNodes(), body);\n+        visitConnections(getNodeId(node), node.getNodes(), body);\n         body.addStatement(getDoneMethod(getNodeId(node)));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NTE3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419575177", "bodyText": "isn't safer to check if node is instance of DynamicNode? Or maybe better to use Generics on AbstractNodeVisitor, to avoid the need for casting.", "author": "tiagodolphine", "createdAt": "2020-05-04T16:45:22Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.ruleflow.core.factory.CompositeContextNodeFactory;\n+import org.jbpm.ruleflow.core.factory.DynamicNodeFactory;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n+import org.jbpm.workflow.core.node.DynamicNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_ACTIVATION_EXPRESSION;\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_COMPLETION_EXPRESSION;\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_LANGUAGE;\n+\n+public class DynamicNodeVisitor extends CompositeContextNodeVisitor {\n+\n+    private static final String FACTORY_METHOD_NAME = \"dynamicNode\";\n+\n+    public DynamicNodeVisitor(Map<Class<?>, AbstractNodeVisitor> nodesVisitors) {\n+        super(nodesVisitors);\n+    }\n+\n+    @Override\n+    protected Class<? extends CompositeContextNodeFactory> factoryClass() {\n+        return DynamicNodeFactory.class;\n+    }\n+\n+    @Override\n+    protected String factoryMethod() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n+    @Override\n+    protected String getDefaultName() {\n+        return \"Dynamic\";\n+    }\n+\n+    @Override\n+    public Stream<MethodCallExpr> visitCustomFields(CompositeContextNode node) {\n+        Collection<MethodCallExpr> methods = new ArrayList<>();\n+        DynamicNode dynamicNode = (DynamicNode) node;", "originalCommit": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg3NjA4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419876084", "bodyText": "I have refactored all the visitor classes to make them use generics, I think they look much better. Thanks for the suggestion.", "author": "ruromero", "createdAt": "2020-05-05T05:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NTE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java\nindex e90f2b4323..13b1c191ca 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3OTc1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419579758", "bodyText": "same here, check before casting, or better to use generics.", "author": "tiagodolphine", "createdAt": "2020-05-04T16:52:15Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java", "diffHunk": "@@ -38,8 +50,24 @@ protected String factoryMethod() {\n         return FACTORY_METHOD_NAME;\n     }\n \n+    @Override\n+    protected String getNodeKey() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n     @Override\n     protected String getDefaultName() {\n         return \"Event Subprocess\";\n     }\n+\n+    @Override\n+    public Stream<MethodCallExpr> visitCustomFields(CompositeContextNode node) {\n+        EventSubProcessNode eventSubProcessNode = (EventSubProcessNode) node;", "originalCommit": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubProcessNodeVisitor.java\nsimilarity index 79%\nrename from jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java\nrename to jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubProcessNodeVisitor.java\nindex 839c7c179c..3db0201604 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubProcessNodeVisitor.java\n\n@@ -61,12 +60,10 @@ public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor {\n     }\n \n     @Override\n-    public Stream<MethodCallExpr> visitCustomFields(CompositeContextNode node) {\n-        EventSubProcessNode eventSubProcessNode = (EventSubProcessNode) node;\n+    public Stream<MethodCallExpr> visitCustomFields(EventSubProcessNode node) {\n         Collection<MethodCallExpr> methods = new ArrayList<>();\n-        methods.add(getFactoryMethod(getNodeId(node), METHOD_KEEP_ACTIVE, new BooleanLiteralExpr(eventSubProcessNode.isKeepActive())));\n-        eventSubProcessNode.getEvents()\n-                .stream()\n+        methods.add(getFactoryMethod(getNodeId(node), METHOD_KEEP_ACTIVE, new BooleanLiteralExpr(node.isKeepActive())));\n+        node.getEvents()\n                 .forEach(e -> methods.add(getFactoryMethod(getNodeId(node), METHOD_EVENT, new StringLiteralExpr(e))));\n         return methods.stream();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5OTMzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419599332", "bodyText": "same here, to avoid the cast it could be used generics, maybe on AbstractNodeVisitor", "author": "tiagodolphine", "createdAt": "2020-05-04T17:23:19Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.LongLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.ruleflow.core.factory.MilestoneNodeFactory;\n+import org.jbpm.workflow.core.node.MilestoneNode;\n+import org.kie.api.definition.process.Node;\n+\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_CONSTRAINT;\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_MATCH_VARIABLE;\n+\n+public class MilestoneNodeVisitor extends AbstractNodeVisitor {\n+\n+    private static final String NODE_KEY = \"milestoneNode\";\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return NODE_KEY;\n+    }\n+\n+    @Override\n+    public void visitNode(String factoryField, Node node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        MilestoneNode milestoneNode = (MilestoneNode) node;", "originalCommit": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java\nindex 72f4ed630d..b3849c2a92 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java\n\n@@ -23,12 +23,11 @@ import com.github.javaparser.utils.StringEscapeUtils;\n import org.jbpm.process.core.context.variable.VariableScope;\n import org.jbpm.ruleflow.core.factory.MilestoneNodeFactory;\n import org.jbpm.workflow.core.node.MilestoneNode;\n-import org.kie.api.definition.process.Node;\n \n import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_CONSTRAINT;\n import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_MATCH_VARIABLE;\n \n-public class MilestoneNodeVisitor extends AbstractNodeVisitor {\n+public class MilestoneNodeVisitor extends AbstractNodeVisitor<MilestoneNode> {\n \n     private static final String NODE_KEY = \"milestoneNode\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTI5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419605293", "bodyText": "why the static final was removed? Anyway, if it is not a constant anymore you can change the name to camel case.", "author": "tiagodolphine", "createdAt": "2020-05-04T17:32:30Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/Node.java", "diffHunk": "@@ -28,7 +28,7 @@\n  */\n public interface Node extends org.kie.api.definition.process.Node, Contextable, Serializable {\n \n-    static final String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";\n+    String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";", "originalCommit": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4MTMxMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419681312", "bodyText": "On interfaces, every field is defined as static final and public so this is redundant.", "author": "ruromero", "createdAt": "2020-05-04T19:40:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5ODg0NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419698845", "bodyText": "ooh this is an interface, yep you are right!", "author": "tiagodolphine", "createdAt": "2020-05-04T20:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTI5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNjYxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r420116617", "bodyText": "Generics now works but just because here we use unsafe casting. Without it the types in the call on line 44 visitor.visitNode(factoryField, node, body, variableScope, metadata); wouldn't match as U[] nodes is always array of Node (passed from the visitNode method) so U is Node but then we are passing this node variable of type Node to that method call on line 44. But given we did unsafe casting here, compiler is happy and it is ok after type erasure as during runtime the signature of abstractNodeVisitor visitNode() method has Node.\nIn short, I am not sure if this helped the hierarchy :) We also use raw types for Visitors in ProcessVisitor.java file.", "author": "MarianMacik", "createdAt": "2020-05-05T13:39:58Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java", "diffHunk": "@@ -17,21 +17,27 @@\n \n import com.github.javaparser.ast.stmt.BlockStmt;\n import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n import org.kie.api.definition.process.Node;\n \n import java.util.Map;\n \n-public abstract class AbstractCompositeNodeVisitor extends AbstractNodeVisitor {\n+public abstract class AbstractCompositeNodeVisitor<T extends CompositeContextNode> extends AbstractNodeVisitor<T> {\n \n-    protected Map<Class<?>, AbstractNodeVisitor> nodesVisitors;\n+    protected Map<Class<?>, AbstractNodeVisitor<? extends Node>> nodesVisitors;\n \n-    public AbstractCompositeNodeVisitor(Map<Class<?>, AbstractNodeVisitor> nodesVisitors) {\n+    public AbstractCompositeNodeVisitor(Map<Class<?>, AbstractNodeVisitor<? extends Node>> nodesVisitors) {\n         this.nodesVisitors = nodesVisitors;\n     }\n \n-    protected void visitNodes(String factoryField, Node[] nodes, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n-        for (Node node : nodes) {\n-            AbstractNodeVisitor visitor = nodesVisitors.get(node.getClass());\n+    @Override\n+    public void visitNode(T node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        super.visitNode(node, body, variableScope, metadata);\n+    }\n+\n+    protected <U extends Node> void visitNodes(String factoryField, U[] nodes, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        for (U node : nodes) {\n+            AbstractNodeVisitor<U> visitor = (AbstractNodeVisitor<U>) nodesVisitors.get(node.getClass());", "originalCommit": "dcef3f83a431f4638d36ebbdaa04893f9aef164c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2233c5383c201b9b83d958f9963c0276620b8d93", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java\nindex db98a1a547..5162b4ef25 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java\n\n@@ -30,11 +30,6 @@ public abstract class AbstractCompositeNodeVisitor<T extends CompositeContextNod\n         this.nodesVisitors = nodesVisitors;\n     }\n \n-    @Override\n-    public void visitNode(T node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n-        super.visitNode(node, body, variableScope, metadata);\n-    }\n-\n     protected <U extends Node> void visitNodes(String factoryField, U[] nodes, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n         for (U node : nodes) {\n             AbstractNodeVisitor<U> visitor = (AbstractNodeVisitor<U>) nodesVisitors.get(node.getClass());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNjk1Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r420116957", "bodyText": "Here we are using raw types for example.\nSame issue with unsafe calls now appeared in visitNodes method as well.", "author": "MarianMacik", "createdAt": "2020-05-05T13:40:27Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java", "diffHunk": "@@ -103,6 +105,9 @@ public ProcessVisitor(ClassLoader contextClassLoader) {\n         this.nodesVisitors.put(CompositeContextNode.class, new CompositeContextNodeVisitor(nodesVisitors));", "originalCommit": "dcef3f83a431f4638d36ebbdaa04893f9aef164c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java\nindex e5da46ab8a..91c082cffe 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java\n\n@@ -102,8 +102,8 @@ public class ProcessVisitor extends AbstractVisitor {\n         this.nodesVisitors.put(BoundaryEventNode.class, new BoundaryEventNodeVisitor());\n         this.nodesVisitors.put(EventNode.class, new EventNodeVisitor());\n         this.nodesVisitors.put(ForEachNode.class, new ForEachNodeVisitor(nodesVisitors));\n-        this.nodesVisitors.put(CompositeContextNode.class, new CompositeContextNodeVisitor(nodesVisitors));\n-        this.nodesVisitors.put(EventSubProcessNode.class, new EventSubprocessNodeVisitor(nodesVisitors));\n+        this.nodesVisitors.put(CompositeContextNode.class, new CompositeContextNodeVisitor<>(nodesVisitors));\n+        this.nodesVisitors.put(EventSubProcessNode.class, new EventSubProcessNodeVisitor(nodesVisitors));\n         this.nodesVisitors.put(TimerNode.class, new TimerNodeVisitor());\n         this.nodesVisitors.put(MilestoneNode.class, new MilestoneNodeVisitor());\n         this.nodesVisitors.put(DynamicNode.class, new DynamicNodeVisitor(nodesVisitors));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTEwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421211106", "bodyText": "@ruromero not sure we should introduce a new extension. Should these just be as regular .bpmn or .bpmn2 ?", "author": "cristianonicolai", "createdAt": "2020-05-07T03:02:00Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -84,7 +84,7 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ProcessCodegen.class);\n \n     private static final SemanticModules BPMN_SEMANTIC_MODULES = new SemanticModules();\n-    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\")));\n+    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\", \".bpmn-cm\")));", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzUyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421257525", "bodyText": "bpmn-cm is a format introduced in jbpm7 for case modeler. It is compatible with bpmn2 and as we are adding functionalities for case management processes I think it's nice to have. Otherwise, processes created with the case modeler jbpm7.x will have to be renamed to work on Kogito.", "author": "ruromero", "createdAt": "2020-05-07T06:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNjgyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421426825", "bodyText": "@ruromero you do have a point but I believe that it should be discussed with the team to understand our overall strategy around it. At least to me, it is not clear if we want to promote that with Kogito.", "author": "cristianonicolai", "createdAt": "2020-05-07T11:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "fddacfd09726ce2aa5fb348c0eda788415f228c1", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java\nindex e0b1043d33..59466db5bd 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java\n\n@@ -84,7 +84,7 @@ public class ProcessCodegen extends AbstractGenerator {\n     private static final Logger LOGGER = LoggerFactory.getLogger(ProcessCodegen.class);\n \n     private static final SemanticModules BPMN_SEMANTIC_MODULES = new SemanticModules();\n-    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\", \".bpmn-cm\")));\n+    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\")));\n     private static final String YAML_PARSER = \"yml\";\n     private static final String JSON_PARSER = \"json\";\n     public static final Map<String, String> SUPPORTED_SW_EXTENSIONS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNjc1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421216751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-05-07T03:24:44Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java\nindex a83f3850eb..13b1c191ca 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODA0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218049", "bodyText": "@ruromero should these fields be moved to DynamicNodeVisitor?", "author": "cristianonicolai", "createdAt": "2020-05-07T03:30:06Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/DynamicNodeFactory.java", "diffHunk": "@@ -25,6 +25,10 @@\n \n public class DynamicNodeFactory extends CompositeContextNodeFactory {\n \n+\tpublic static final String METHOD_LANGUAGE = \"language\";", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODQ1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421258451", "bodyText": "It's just a matter of taste, I considered the owner of the method should have the constant that will be used by the visitor to make it easier to maintain and remove/update as the methods are defined here.", "author": "ruromero", "createdAt": "2020-05-07T06:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODA0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODI0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218247", "bodyText": "similar here, move to EventSubprocessNodeVisitor?", "author": "cristianonicolai", "createdAt": "2020-05-07T03:30:53Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -16,13 +16,16 @@\n \n package org.jbpm.ruleflow.core.factory;\n \n+import org.jbpm.process.core.event.EventTypeFilter;\n import org.jbpm.ruleflow.core.RuleFlowNodeContainerFactory;\n import org.jbpm.workflow.core.NodeContainer;\n import org.jbpm.workflow.core.node.CompositeContextNode;\n import org.jbpm.workflow.core.node.EventSubProcessNode;\n \n public class EventSubProcessNodeFactory extends CompositeContextNodeFactory {\n \n+    public static final String METHOD_KEEP_ACTIVE = \"keepActive\";", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODQ4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421258485", "bodyText": "same", "author": "ruromero", "createdAt": "2020-05-07T06:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODI0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODQ3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218475", "bodyText": "@ruromero seems like method is not used, could it be removed?", "author": "cristianonicolai", "createdAt": "2020-05-07T03:31:50Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -32,4 +35,16 @@ public EventSubProcessNodeFactory(RuleFlowNodeContainerFactory nodeContainerFact\n     protected CompositeContextNode createNode() {\n         return new EventSubProcessNode();\n     }\n+\n+    public EventSubProcessNodeFactory keepActive(boolean keepActive) {", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODg0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421258843", "bodyText": "It is used in the generated code. See EventSubprocessNodeVisitor#visitCustomFields", "author": "ruromero", "createdAt": "2020-05-07T06:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODQ3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODgxNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218816", "bodyText": "same here, not used?", "author": "cristianonicolai", "createdAt": "2020-05-07T03:33:14Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -32,4 +35,16 @@ public EventSubProcessNodeFactory(RuleFlowNodeContainerFactory nodeContainerFact\n     protected CompositeContextNode createNode() {\n         return new EventSubProcessNode();\n     }\n+\n+    public EventSubProcessNodeFactory keepActive(boolean keepActive) {\n+        ((EventSubProcessNode) getCompositeNode()).setKeepActive(keepActive);\n+        return this;\n+    }\n+\n+    public EventSubProcessNodeFactory event(String event) {", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODk4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421258983", "bodyText": "same", "author": "ruromero", "createdAt": "2020-05-07T06:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODgxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODkzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218932", "bodyText": "move to MilestoneNodeVisitor?", "author": "cristianonicolai", "createdAt": "2020-05-07T03:33:43Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/MilestoneNodeFactory.java", "diffHunk": "@@ -23,6 +23,9 @@\n \n public class MilestoneNodeFactory extends StateBasedNodeFactory {\n \n+    public static final String METHOD_CONSTRAINT = \"constraint\";", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1OTMzNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421259335", "bodyText": "same as for the EventSubProcessNodeFactory I consider factories are the owners of the methods and these literals should be here.", "author": "ruromero", "createdAt": "2020-05-07T06:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODkzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTA0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421219049", "bodyText": "not used?", "author": "cristianonicolai", "createdAt": "2020-05-07T03:34:05Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/StateBasedNodeFactory.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n public abstract class StateBasedNodeFactory extends ExtendedNodeFactory {\n \n+    public static final String METHOD_TIMER = \"timer\";", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MDkwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421260902", "bodyText": "They're not used because timers have not yet been added to StateBasedNodeVisitor and its hierarchy. However as this method is not new I decided to add it. I can remove it or try to add timers to WorkItemNode, RuleSetNode, SubProcessNode, MilestoneNode and HumanTaskNode", "author": "ruromero", "createdAt": "2020-05-07T06:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNzQ1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421427450", "bodyText": "np to leave it then", "author": "cristianonicolai", "createdAt": "2020-05-07T11:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTA0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyOTM5NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421229394", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {\n          \n          \n            \n            public class EventSubProcessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {", "author": "cristianonicolai", "createdAt": "2020-05-07T04:17:57Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java", "diffHunk": "@@ -15,16 +15,27 @@\n \n package org.jbpm.compiler.canonical;\n \n+import com.github.javaparser.ast.expr.BooleanLiteralExpr;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n import org.jbpm.ruleflow.core.factory.CompositeContextNodeFactory;\n import org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory;\n+import org.jbpm.workflow.core.node.EventSubProcessNode;\n+import org.kie.api.definition.process.Node;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Map;\n+import java.util.stream.Stream;\n \n-public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor {\n+import static org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory.METHOD_EVENT;\n+import static org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory.METHOD_KEEP_ACTIVE;\n+\n+public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubProcessNodeVisitor.java\nsimilarity index 94%\nrename from jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java\nrename to jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubProcessNodeVisitor.java\nindex 3ff15f60a1..3db0201604 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubProcessNodeVisitor.java\n\n@@ -31,11 +31,11 @@ import java.util.stream.Stream;\n import static org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory.METHOD_EVENT;\n import static org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory.METHOD_KEEP_ACTIVE;\n \n-public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {\n+public class EventSubProcessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {\n \n     private static final String FACTORY_METHOD_NAME = \"eventSubProcessNode\";\n \n-    public EventSubprocessNodeVisitor(Map<Class<?>, AbstractNodeVisitor<? extends Node>> nodesVisitors) {\n+    public EventSubProcessNodeVisitor(Map<Class<?>, AbstractNodeVisitor<? extends Node>> nodesVisitors) {\n         super(nodesVisitors);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyOTY5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421229698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY,new LongLiteralExpr(node.getId())))\n          \n          \n            \n                    body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY, new LongLiteralExpr(node.getId())))", "author": "cristianonicolai", "createdAt": "2020-05-07T04:19:02Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.LongLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.ruleflow.core.factory.MilestoneNodeFactory;\n+import org.jbpm.workflow.core.node.MilestoneNode;\n+\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_CONSTRAINT;\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_MATCH_VARIABLE;\n+\n+public class MilestoneNodeVisitor extends AbstractNodeVisitor<MilestoneNode> {\n+\n+    private static final String NODE_KEY = \"milestoneNode\";\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return NODE_KEY;\n+    }\n+\n+    @Override\n+    public void visitNode(String factoryField, MilestoneNode node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY,new LongLiteralExpr(node.getId())))", "originalCommit": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java\nindex 2b4854eec8..b3849c2a92 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java\n\n@@ -38,7 +38,7 @@ public class MilestoneNodeVisitor extends AbstractNodeVisitor<MilestoneNode> {\n \n     @Override\n     public void visitNode(String factoryField, MilestoneNode node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n-        body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY,new LongLiteralExpr(node.getId())))\n+        body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY, new LongLiteralExpr(node.getId())))\n                 .addStatement(getNameMethod(node, \"Milestone\"))\n                 .addStatement(getFactoryMethod(getNodeId(node), METHOD_CONSTRAINT, new StringLiteralExpr(StringEscapeUtils.escapeJava(node.getConstraint()))));\n         if (node.getMatchVariable() != null) {\n"}}, {"oid": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "message": "[KOGITO-1248] Remove comment\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-07T07:29:19Z", "type": "forcePushed"}, {"oid": "21a3e25eb99d243028a81acee7a233118c5142cf", "url": "https://github.com/kiegroup/kogito-runtimes/commit/21a3e25eb99d243028a81acee7a233118c5142cf", "message": "[KOGITO-1248] Rename class\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-07T07:30:01Z", "type": "forcePushed"}, {"oid": "fddacfd09726ce2aa5fb348c0eda788415f228c1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fddacfd09726ce2aa5fb348c0eda788415f228c1", "message": "[KOGITO-1248] Remove bpmn-cm extension and add missing test class\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-07T12:53:56Z", "type": "forcePushed"}, {"oid": "2233c5383c201b9b83d958f9963c0276620b8d93", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2233c5383c201b9b83d958f9963c0276620b8d93", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T07:50:13Z", "type": "forcePushed"}, {"oid": "92f6bf138c2b206a581efd77a4d3b03e86f4f9e1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/92f6bf138c2b206a581efd77a4d3b03e86f4f9e1", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T07:50:54Z", "type": "forcePushed"}, {"oid": "7934ed01f2fe8fe8280cd7500e7cdfe4f2e68b5e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7934ed01f2fe8fe8280cd7500e7cdfe4f2e68b5e", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T08:57:20Z", "type": "forcePushed"}, {"oid": "c97bd6558da8743206b97c7d80cb744516f13d2e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c97bd6558da8743206b97c7d80cb744516f13d2e", "message": "[KOGITO-1248] Add casemgmt tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "53e9ea2281f44ecb2f73dcc4425e4aaf5a2da3c1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/53e9ea2281f44ecb2f73dcc4425e4aaf5a2da3c1", "message": "[KOGITO-1248] Create Metadata interface\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "426252e175516b9f47581b8ed8d973a749ee6652", "url": "https://github.com/kiegroup/kogito-runtimes/commit/426252e175516b9f47581b8ed8d973a749ee6652", "message": "[KOGITO-1248] Use generics in Visitors\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "c8fb6a601ecfc066c9a9bd83cb9037190ed9497f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c8fb6a601ecfc066c9a9bd83cb9037190ed9497f", "message": "[KOGITO-1248] Use missing generics in ProcessVisitors\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "2f2f1966019ac1f073ae745d78e56cde585e0929", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2f2f1966019ac1f073ae745d78e56cde585e0929", "message": "Update jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "163b8634edc6180ee8e5760bb40361fa35862d58", "url": "https://github.com/kiegroup/kogito-runtimes/commit/163b8634edc6180ee8e5760bb40361fa35862d58", "message": "Update jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "c6d259a828a67d282cc30a27ad31f3d640d82ffa", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c6d259a828a67d282cc30a27ad31f3d640d82ffa", "message": "[KOGITO-1248] Rename class\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "052f01891cd6939c93c6623caf4fa2b42aa47e2f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/052f01891cd6939c93c6623caf4fa2b42aa47e2f", "message": "[KOGITO-1248] Remove bpmn-cm extension and add missing test class\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "1e23933bb10e3fce8e8dbb78ca770ee60599acc8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1e23933bb10e3fce8e8dbb78ca770ee60599acc8", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "commit"}, {"oid": "1e23933bb10e3fce8e8dbb78ca770ee60599acc8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1e23933bb10e3fce8e8dbb78ca770ee60599acc8", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-05-08T13:08:20Z", "type": "forcePushed"}]}