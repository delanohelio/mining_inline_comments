{"pr_number": 302, "pr_title": "KOGITO-458 Add health check for Data Index service", "pr_createdAt": "2020-02-04T13:53:06Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/302", "timeline": [{"oid": "58c8c9a40a5aeb88b0ed324edc3ea2e5661b61e4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/58c8c9a40a5aeb88b0ed324edc3ea2e5661b61e4", "message": "KOGITO-458 Add health check for Data Index service\n\nSetting kafka client endpoint on data-index", "committedDate": "2020-02-04T13:50:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375270267", "bodyText": "is there a liveness check as well?", "author": "spolti", "createdAt": "2020-02-05T14:00:13Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/InfinispanHealthCheckProducer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+\n+import org.eclipse.microprofile.health.Readiness;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.kie.kogito.infinispan.health.InfinispanHealthCheck;\n+\n+@ApplicationScoped\n+public class InfinispanHealthCheckProducer {\n+\n+    @Produces\n+    @Readiness", "originalCommit": "58c8c9a40a5aeb88b0ed324edc3ea2e5661b61e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MTI3NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375371274", "bodyText": "@spolti, in this case, this is a Readiness check, because infinispan may be down and up, in the same way as kafka, so the state may change over time depending on external services, it will give the information if the application is ready. The Liveness could make sense in case our service (in this case data-index) achieved an unrecoverable state (out of memory for instance) and must be restarted/killed, giving the information if the application is alive.\nFor now, we are adding the Readiness health check, and if we face any case to check the Liveness we can add in the future.", "author": "tiagodolphine", "createdAt": "2020-02-05T16:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NDQ0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375374444", "bodyText": "It is important for OpenShift IMHO, with a proper liveness probe OCP can use it to guarantee that the pod will be restarted in case the liveness fails.", "author": "spolti", "createdAt": "2020-02-05T16:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NzIyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375387228", "bodyText": "For OpenShift/k8s point for view the liveness health check to be used is /health/live, and the implementation is up to each service, and for now it will return HTTP 200 ok for liveness, the default implementation on quarkus health, in the future if we face any case that may break the application to a \"dead\" state we can add this Liveness implementation, but the API remains the same.", "author": "tiagodolphine", "createdAt": "2020-02-05T17:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MjY4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375392685", "bodyText": "Ok, sounds good then, thanks for the explanation.", "author": "spolti", "createdAt": "2020-02-05T17:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NzgyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375397825", "bodyText": "Sure, it was worth our discussion in this way we are all aligned, and maybe we can add this on runtime as well, thank you for bringing this up.\n@mswiderski @cristianonicolai do we have the health check on the runtime?", "author": "tiagodolphine", "createdAt": "2020-02-05T17:24:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNjkwMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375436903", "bodyText": "No, as we expect to define it by users to properly handle that. We could think on what might be valid to check from engines point of view as most of the cases are compile checks when it comes to pure engine but there might be more depending whar components are used, eg infinispan, jobs service etc", "author": "mswiderski", "createdAt": "2020-02-05T18:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg1NzgwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375857805", "bodyText": "Yeah, maybe we can have some default health check that checks the used dependencies like you said, infinispan, jobs service etc, in case the user wants to define more, he can extend or customize, anyway just brainstorming, not the scope of this PR :)", "author": "tiagodolphine", "createdAt": "2020-02-06T14:16:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyMDE5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/302#discussion_r375920197", "bodyText": "+1 for connection with other components. We can detect which components the kogito app will be connected to when compiling assets/endpoints and based on that generate health checks, i.e. if we use persistence, have a persistence health check as we now have for jobs and data index.", "author": "MarianMacik", "createdAt": "2020-02-06T15:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MDI2Nw=="}], "type": "inlineReview", "revised_code": null}]}