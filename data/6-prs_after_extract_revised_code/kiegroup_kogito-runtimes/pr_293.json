{"pr_number": 293, "pr_title": "KOGITO-885 [Jobs Service] Add health check for Jobs Service", "pr_createdAt": "2020-01-23T18:51:54Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/293", "timeline": [{"oid": "f8cfe51dbaf3704fea84c423050a48d40b5dc35f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f8cfe51dbaf3704fea84c423050a48d40b5dc35f", "message": "KOGITO-885 [Jobs Service] Add health check for Jobs Service", "committedDate": "2020-01-27T09:05:21Z", "type": "commit"}, {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/41465626566aeb0fb2c9cfc2e941990e646c4e9e", "message": "changing assertj scope to test", "committedDate": "2020-01-27T09:14:15Z", "type": "commit"}, {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/41465626566aeb0fb2c9cfc2e941990e646c4e9e", "message": "changing assertj scope to test", "committedDate": "2020-01-27T09:14:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2MjU5MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372562591", "bodyText": "The name of the method suggests we will always return DOWN response, but it depends on the state parameter. Can we remain it to just buildReponse or buildHealthCheckResponse for the sake of readability?", "author": "MarianMacik", "createdAt": "2020-01-29T18:43:50Z", "path": "addons/persistence/infinispan-quarkus-health/src/main/java/org/kie/kogito/infinispan/health/InfinispanHealthCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan.health;\n+\n+import java.net.SocketAddress;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.inject.Instance;\n+\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.Configuration;\n+import org.infinispan.client.hotrod.event.impl.ClientListenerNotifier;\n+import org.infinispan.client.hotrod.impl.operations.OperationsFactory;\n+import org.infinispan.client.hotrod.impl.operations.PingOperation;\n+import org.infinispan.client.hotrod.impl.operations.PingResponse;\n+import org.infinispan.client.hotrod.impl.protocol.Codec;\n+import org.infinispan.client.hotrod.impl.transport.netty.ChannelFactory;\n+\n+/**\n+ * This is a health check implementation for Infinispan Hot Rod Server, based on client and\n+ * {@link RemoteCacheManager}. Basically it executes a ping operation to all nodes and if all are down it responds as\n+ * Down, otherwise it responds as Up.\n+ */\n+public class InfinispanHealthCheck implements HealthCheck {\n+\n+    private Optional<RemoteCacheManager> cacheManagerOptional;\n+\n+    public InfinispanHealthCheck(Instance<RemoteCacheManager> cacheManagerInstance) {\n+        this.cacheManagerOptional = Optional.of(cacheManagerInstance)\n+                .filter(Instance::isResolvable)\n+                .map(Instance::get);\n+    }\n+\n+    @Override\n+    public HealthCheckResponse call() {\n+        return cacheManagerOptional.map(cacheManager -> {\n+\n+            final ChannelFactory channelFactory = cacheManager.getChannelFactory();\n+            final Codec codec = cacheManager.getCodec();\n+            final Configuration configuration = cacheManager.getConfiguration();\n+            final ClientListenerNotifier listenerNotifier = new ClientListenerNotifier(codec,\n+                                                                                       cacheManager.getMarshaller(),\n+                                                                                       channelFactory,\n+                                                                                       configuration);\n+            final OperationsFactory operationsFactory = new OperationsFactory(channelFactory,\n+                                                                              codec,\n+                                                                              listenerNotifier,\n+                                                                              configuration);\n+\n+            return Optional.of(channelFactory\n+                                       .getServers()\n+                                       .stream()\n+                                       .map(server -> invokePingOperation(channelFactory, operationsFactory, server)\n+                                               .thenApply(PingResponse::isSuccess)\n+                                               .exceptionally(ex -> false))\n+                                       .map(op -> {\n+                                           try {\n+                                               return op.get(500, TimeUnit.MILLISECONDS);\n+                                           } catch (Exception e) {\n+                                               return false;\n+                                           }\n+                                       })\n+                                       .allMatch(Boolean.FALSE::equals))\n+                    .map(allDown -> buildDownResponse(channelFactory, !allDown))\n+                    .orElse(buildDownResponse(channelFactory, false));\n+        }).orElse(null);\n+    }\n+\n+    private HealthCheckResponse buildDownResponse(ChannelFactory channelFactory, boolean state) {", "originalCommit": "41465626566aeb0fb2c9cfc2e941990e646c4e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwNTA2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372805067", "bodyText": "Done.", "author": "tiagodolphine", "createdAt": "2020-01-30T08:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2MjU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd209ff4fced07ceeebad9022a7459a2504e3d3a", "chunk": "diff --git a/addons/persistence/infinispan-quarkus-health/src/main/java/org/kie/kogito/infinispan/health/InfinispanHealthCheck.java b/addons/persistence/infinispan-quarkus-health/src/main/java/org/kie/kogito/infinispan/health/InfinispanHealthCheck.java\nindex 304c98692f..a8e2436dab 100644\n--- a/addons/persistence/infinispan-quarkus-health/src/main/java/org/kie/kogito/infinispan/health/InfinispanHealthCheck.java\n+++ b/addons/persistence/infinispan-quarkus-health/src/main/java/org/kie/kogito/infinispan/health/InfinispanHealthCheck.java\n\n@@ -80,12 +80,12 @@ public class InfinispanHealthCheck implements HealthCheck {\n                                            }\n                                        })\n                                        .allMatch(Boolean.FALSE::equals))\n-                    .map(allDown -> buildDownResponse(channelFactory, !allDown))\n-                    .orElse(buildDownResponse(channelFactory, false));\n+                    .map(allDown -> buildResponse(channelFactory, !allDown))\n+                    .orElse(buildResponse(channelFactory, false));\n         }).orElse(null);\n     }\n \n-    private HealthCheckResponse buildDownResponse(ChannelFactory channelFactory, boolean state) {\n+    private HealthCheckResponse buildResponse(ChannelFactory channelFactory, boolean state) {\n         return HealthCheckResponse.builder()\n                 .withData(\"nodes\", Optional.ofNullable(channelFactory.getServers())\n                         .orElse(Collections.emptyList())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372563772", "bodyText": "Just FYI, after this is merged we will have 3 almost identical InfinispanServerTestResource classes. Wdyt about unifying them? I can create a separate module for test resources/test classes in general so we won't duplicate things. Wdyt @cristianonicolai ?", "author": "MarianMacik", "createdAt": "2020-01-29T18:46:06Z", "path": "addons/persistence/infinispan-quarkus-health/src/test/java/org/kie/kogito/infinispan/InfinispanServerTestResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+public class InfinispanServerTestResource implements QuarkusTestResourceLifecycleManager {", "originalCommit": "41465626566aeb0fb2c9cfc2e941990e646c4e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4NDY4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372584685", "bodyText": "+1 to unify, we need to create a shared module for these test resources.", "author": "cristianonicolai", "createdAt": "2020-01-29T19:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4NTQ0NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372585445", "bodyText": "I'm happy for that to be handled on another JIRA/PR.", "author": "cristianonicolai", "createdAt": "2020-01-29T19:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5MTU5MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372791591", "bodyText": "Sure, I can probably plan something for next week/sprint.", "author": "MarianMacik", "createdAt": "2020-01-30T07:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwNDExMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372804113", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-01-30T08:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "dd209ff4fced07ceeebad9022a7459a2504e3d3a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dd209ff4fced07ceeebad9022a7459a2504e3d3a", "message": "Changing buildResponse method name on InfinispanHealthCheck", "committedDate": "2020-01-30T08:05:57Z", "type": "commit"}, {"oid": "547fb0f40833abd50585d8b1b7f61776160e48d0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/547fb0f40833abd50585d8b1b7f61776160e48d0", "message": "Reinserting the onStart on InfinispanConfiguration", "committedDate": "2020-01-30T08:48:09Z", "type": "commit"}, {"oid": "a1f124f90a703ad6f62b7716b32adf3a12696898", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a1f124f90a703ad6f62b7716b32adf3a12696898", "message": "changing module name infinispan-quarkus-health-addon", "committedDate": "2020-01-31T09:15:04Z", "type": "commit"}]}