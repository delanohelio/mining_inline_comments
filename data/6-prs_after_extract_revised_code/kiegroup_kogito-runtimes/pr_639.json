{"pr_number": 639, "pr_title": "DROOLS-5491 - Integrate PMML with Kogito", "pr_createdAt": "2020-07-16T14:39:41Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/639", "timeline": [{"oid": "112311307198829faa843a1486f14481c680bad9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/112311307198829faa843a1486f14481c680bad9", "message": "[DROOLS-5492] Instantiating and propagating PMMLRuntime", "committedDate": "2020-07-08T11:13:07Z", "type": "commit"}, {"oid": "064ed3c3787b39f1cc83186d11919046921507d0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/064ed3c3787b39f1cc83186d11919046921507d0", "message": "[DROOLS-5492] Managing versions", "committedDate": "2020-07-08T13:10:07Z", "type": "commit"}, {"oid": "8c86d8ed193822ee87f246de34528be846ccdeed", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8c86d8ed193822ee87f246de34528be846ccdeed", "message": "[DROOLS-5492] Managing versions - Add PMMLCOnstants", "committedDate": "2020-07-08T15:23:59Z", "type": "commit"}, {"oid": "90b40f6d7eb74051e1c801ac5375c186dbee8039", "url": "https://github.com/kiegroup/kogito-runtimes/commit/90b40f6d7eb74051e1c801ac5375c186dbee8039", "message": "[DROOLS-5492] Preliminary plumbing", "committedDate": "2020-07-09T08:57:16Z", "type": "commit"}, {"oid": "1aa5d0206ebd52730d8aa8f92cc12bc7ceb0cd6b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1aa5d0206ebd52730d8aa8f92cc12bc7ceb0cd6b", "message": "[DROOLS-5493] UPdating pom for kie-pmml dependencies", "committedDate": "2020-07-09T09:02:27Z", "type": "commit"}, {"oid": "41a1cf25c02f73c4edd65e5290019f971d632edf", "url": "https://github.com/kiegroup/kogito-runtimes/commit/41a1cf25c02f73c4edd65e5290019f971d632edf", "message": "[DROOLS-5493] First working iteration", "committedDate": "2020-07-09T13:06:02Z", "type": "commit"}, {"oid": "455129059c1cbc9211903abfcb27ad11ef8e8128", "url": "https://github.com/kiegroup/kogito-runtimes/commit/455129059c1cbc9211903abfcb27ad11ef8e8128", "message": "Merge branch 'DROOLS-5493' into DROOLS-5492\n\n# Conflicts:\n#\tpom.xml", "committedDate": "2020-07-09T13:07:55Z", "type": "commit"}, {"oid": "d58789a3145095c5a868daa0e9b2c318d624ca27", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d58789a3145095c5a868daa0e9b2c318d624ca27", "message": "[DROOLS-5492] Integrating PMMLKogito", "committedDate": "2020-07-10T07:52:54Z", "type": "commit"}, {"oid": "2cf434a56415eafb5fb22ecbf3142e7c2bcc3439", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2cf434a56415eafb5fb22ecbf3142e7c2bcc3439", "message": "[DROOLS-5492] Fixing integration (broken)", "committedDate": "2020-07-10T10:41:16Z", "type": "commit"}, {"oid": "571b8817f99ef86565f0a201a68878e44fab358a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/571b8817f99ef86565f0a201a68878e44fab358a", "message": "[DROOLS-5493] Updating tests. Begin removal of \"first citizen/next citizen\" differentiation", "committedDate": "2020-07-10T14:20:36Z", "type": "commit"}, {"oid": "760336fde5f567d2ac85d93ff08b980aadbdafe8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/760336fde5f567d2ac85d93ff08b980aadbdafe8", "message": "[DROOLS-5493] Removed unused thrown IOException", "committedDate": "2020-07-10T14:21:08Z", "type": "commit"}, {"oid": "771b3a7d4e8a935e74013623ef2c592d0be9d7a1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/771b3a7d4e8a935e74013623ef2c592d0be9d7a1", "message": "[DROOLS-5493] Removed unused thrown IOException", "committedDate": "2020-07-10T14:21:19Z", "type": "commit"}, {"oid": "2472c4a14fdd924e48c84b6b3a362208e83323c8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2472c4a14fdd924e48c84b6b3a362208e83323c8", "message": "[DROOLS-5493] Renaming to follow convention", "committedDate": "2020-07-10T14:21:43Z", "type": "commit"}, {"oid": "68cb8120ef4956cdee2254a28299a91a2658d115", "url": "https://github.com/kiegroup/kogito-runtimes/commit/68cb8120ef4956cdee2254a28299a91a2658d115", "message": "[DROOLS-5493] Declaring PMMLRuntime as public static field", "committedDate": "2020-07-10T14:22:15Z", "type": "commit"}, {"oid": "47b825b634f2c529845878ba541e74bd7e2f7a3e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/47b825b634f2c529845878ba541e74bd7e2f7a3e", "message": "[DROOLS-5493] Updating ApplicationConfigTemplate to manage Prediction", "committedDate": "2020-07-10T14:22:59Z", "type": "commit"}, {"oid": "73fce5c04adbafb1b6527247e34877592271c0da", "url": "https://github.com/kiegroup/kogito-runtimes/commit/73fce5c04adbafb1b6527247e34877592271c0da", "message": "[DROOLS-5493] Fixed assertion", "committedDate": "2020-07-10T14:23:53Z", "type": "commit"}, {"oid": "bb7672e78b51aa5c2af868f745a7606ec520594c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bb7672e78b51aa5c2af868f745a7606ec520594c", "message": "[DROOLS-5493] Fixing template", "committedDate": "2020-07-10T14:35:29Z", "type": "commit"}, {"oid": "2796f646adf061271df09f43f75dfa43ea691830", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2796f646adf061271df09f43f75dfa43ea691830", "message": "[DROOLS-5493] Fixing tests", "committedDate": "2020-07-10T15:38:32Z", "type": "commit"}, {"oid": "d3828f8817885fd18ad2c8623cdfa1d3858deacb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d3828f8817885fd18ad2c8623cdfa1d3858deacb", "message": "[KOGITO-2730] Refactoring AbstractCodegenTest", "committedDate": "2020-07-10T16:05:31Z", "type": "commit"}, {"oid": "6ac0c91232929a1ab5159ca9706f0edee1ee3987", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6ac0c91232929a1ab5159ca9706f0edee1ee3987", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2730", "committedDate": "2020-07-13T07:40:57Z", "type": "commit"}, {"oid": "8e8af7ed2fd107696b4abd76dca1173e03229b5c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8e8af7ed2fd107696b4abd76dca1173e03229b5c", "message": "Merge branch 'KOGITO-2730' into DROOLS-5493\n\n# Conflicts:\n#\tkogito-codegen/src/test/java/org/kie/kogito/codegen/AbstractCodegenTest.java", "committedDate": "2020-07-13T07:42:41Z", "type": "commit"}, {"oid": "655a7b139df68b48c51f82eec64054cc5456c6e3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/655a7b139df68b48c51f82eec64054cc5456c6e3", "message": "[DROOLS-5493] Implementing missing pieces (stub)", "committedDate": "2020-07-13T12:44:42Z", "type": "commit"}, {"oid": "79b716dd98b7aa6abc420abc6933fec1e71897b9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/79b716dd98b7aa6abc420abc6933fec1e71897b9", "message": "[DROOLS-5493] Add pmml to bom", "committedDate": "2020-07-13T13:12:42Z", "type": "commit"}, {"oid": "c6b04eba1fb4deea9123c1f84eec5bb8206092a1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c6b04eba1fb4deea9123c1f84eec5bb8206092a1", "message": "Merge branch 'DROOLS-5493' into DROOLS-5492\n\n# Conflicts:\n#\tdrools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PMMLKogitoTest.java\n#\tkogito-codegen/src/main/resources/class-templates/config/ApplicationConfigTemplate.java", "committedDate": "2020-07-13T13:14:05Z", "type": "commit"}, {"oid": "fc4aff3aa90b391d7b803f55ea2d369b698275e4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc4aff3aa90b391d7b803f55ea2d369b698275e4", "message": "[DROOLS-5492] Working example with Regression", "committedDate": "2020-07-14T07:50:20Z", "type": "commit"}, {"oid": "ba4f2c3b10f22b41d51fc48105749edc16bb4895", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ba4f2c3b10f22b41d51fc48105749edc16bb4895", "message": "[DROOLS-5492] Working example with Tree (drools model)", "committedDate": "2020-07-14T10:15:13Z", "type": "commit"}, {"oid": "da3a89c5b00d72682f47fdf2fb50836293b84a9d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/da3a89c5b00d72682f47fdf2fb50836293b84a9d", "message": "[KOGITO-2752] generate executable model sources in pmml codegen", "committedDate": "2020-07-14T13:00:39Z", "type": "commit"}, {"oid": "dd0de22b8109508c4e7ee3566357bbe0147d2645", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dd0de22b8109508c4e7ee3566357bbe0147d2645", "message": "Merge pull request #1 from mariofusco/k2752\n\n[KOGITO-2752] generate executable model sources in pmml codegen", "committedDate": "2020-07-15T07:45:37Z", "type": "commit"}, {"oid": "b701f43e7753c58c46182114d6adf959b0f3fddf", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b701f43e7753c58c46182114d6adf959b0f3fddf", "message": "[DROOLS-5491] Working DMN+PMML with Regression and Tree PMML models", "committedDate": "2020-07-15T14:41:52Z", "type": "commit"}, {"oid": "b609e4dc5dba7697488e4e47c79ebcb944f23f44", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b609e4dc5dba7697488e4e47c79ebcb944f23f44", "message": "[DROOLS-5491] Working status for both drools and not-drools PMMLS, Rest implementation and direct PMML invocation", "committedDate": "2020-07-16T08:14:56Z", "type": "commit"}, {"oid": "cc6d2c11d3c63d145edbbf51220478a6b1b4deab", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cc6d2c11d3c63d145edbbf51220478a6b1b4deab", "message": "[DROOLS-5491] Implemented kogito-pmml-dependencies", "committedDate": "2020-07-16T08:57:17Z", "type": "commit"}, {"oid": "60444b6c97b113390c2933b006e075b2606499f4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/60444b6c97b113390c2933b006e075b2606499f4", "message": "[DROOLS-5491] Add integration tests. BusinessRuleTaskTest.testDecision() test broken", "committedDate": "2020-07-16T12:59:39Z", "type": "commit"}, {"oid": "34f22fa3b7e6d3e86494c897bdb6390dcec58682", "url": "https://github.com/kiegroup/kogito-runtimes/commit/34f22fa3b7e6d3e86494c897bdb6390dcec58682", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5491\n\n# Conflicts:\n#\tkogito-codegen/src/main/java/org/kie/kogito/codegen/ConfigGenerator.java\n#\tkogito-codegen/src/main/resources/class-templates/config/ApplicationConfigTemplate.java\n#\tkogito-codegen/src/test/java/org/kie/kogito/codegen/AbstractCodegenTest.java\n#\tkogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java\n#\tpom.xml", "committedDate": "2020-07-16T13:11:55Z", "type": "commit"}, {"oid": "3ebfbf30eea7d1418e73fe16b470d69397a8db32", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3ebfbf30eea7d1418e73fe16b470d69397a8db32", "message": "[DROOLS-5491] Fixing merge with master", "committedDate": "2020-07-16T14:03:08Z", "type": "commit"}, {"oid": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f1ccb91a5a11339e368013e935ce33bd0ca17021", "message": "[DROOLS-5491] Disabling test", "committedDate": "2020-07-16T14:26:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNzgwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455927802", "bodyText": "What is the reason of this method? PMML doesn't support listener (yet?) so I think we should remove it for now", "author": "danielezonca", "createdAt": "2020-07-16T16:48:12Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionConfig.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.prediction;\n+\n+public interface PredictionConfig {\n+\n+    PredictionEventListenerConfig predictionEventListeners();", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcwNjMyMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r458706322", "bodyText": "Preparing for EventListener implementation\nsee https://issues.redhat.com/browse/DROOLS-5193", "author": "gitgabrio", "createdAt": "2020-07-22T10:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNzgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c83366fefd777941968cde457ee9c023c3460df2", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionConfig.java b/api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionConfig.java\nindex 3123b07405..2c1512d1ce 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionConfig.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionConfig.java\n\n@@ -17,6 +17,4 @@ package org.kie.kogito.prediction;\n \n public interface PredictionConfig {\n \n-    PredictionEventListenerConfig predictionEventListeners();\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNzkwMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455927900", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-16T16:48:22Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionEventListenerConfig.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.prediction;\n+\n+public interface PredictionEventListenerConfig {", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcwNjM5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r458706392", "bodyText": "same as above", "author": "gitgabrio", "createdAt": "2020-07-22T10:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNzkwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyODkwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455928906", "bodyText": "What is used for? Can you please add a javadoc?\nIf this is not supposed to be used by the user (or seen?) I would suggest to move it to kogito-internal", "author": "danielezonca", "createdAt": "2020-07-16T16:50:03Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionRuleMapper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.prediction;\n+\n+public interface PredictionRuleMapper {", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcwNDkyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r458704925", "bodyText": "I would prefer to keep it here.\nSpreading code here and there makes maintenance pretty hard.", "author": "gitgabrio", "createdAt": "2020-07-22T10:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyODkwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNDg5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455934890", "bodyText": "What about make PMMLRuntimeBuilder accept a Stream as parameter so that you can avoid to iterate over the list twice?", "author": "danielezonca", "createdAt": "2020-07-16T16:59:50Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.pmml;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.kie.api.io.Resource;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.kogito.Application;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n+import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Internal Utility class.<br/>\n+ * Use {@link Application#predictionModels()} of Kogito API to programmatically access PMML assets and evaluate PMML\n+ * predictions.\n+ */\n+public class PMMLKogito {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PMMLKogito.class);\n+\n+    private PMMLKogito() {\n+        // intentionally private.\n+    }\n+\n+    /**\n+     * Internal Utility class.<br/>\n+     * Use {@link Application#predictionModels()} of Kogito API to programmatically access PMML assets and evaluate\n+     * PMML decisions.\n+     */\n+    public static Map<String, PMMLRuntime> createPMMLRuntimes(String... pmmlPaths) {\n+        List<Resource> resources = Stream.of(pmmlPaths).map(FileSystemResource::new).collect(Collectors.toList());\n+        return PMMLRuntimeBuilder.fromResources(resources, new PMMLModelEvaluatorFinderImpl());", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\nindex c21a810056..9bb3870fb3 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\n\n@@ -22,15 +22,16 @@ import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import org.drools.core.io.impl.FileSystemResource;\n+import org.kie.api.KieBase;\n import org.kie.api.io.Resource;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.Application;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.PMMLContextImpl;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n-import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNTgwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455935809", "bodyText": "Can you please add the number of models found in the message? I would suggest to update the message too because you can find 0 models so probably Wrong number of models... is more accurate", "author": "danielezonca", "createdAt": "2020-07-16T17:01:17Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.pmml;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.kie.api.io.Resource;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.kogito.Application;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n+import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Internal Utility class.<br/>\n+ * Use {@link Application#predictionModels()} of Kogito API to programmatically access PMML assets and evaluate PMML\n+ * predictions.\n+ */\n+public class PMMLKogito {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PMMLKogito.class);\n+\n+    private PMMLKogito() {\n+        // intentionally private.\n+    }\n+\n+    /**\n+     * Internal Utility class.<br/>\n+     * Use {@link Application#predictionModels()} of Kogito API to programmatically access PMML assets and evaluate\n+     * PMML decisions.\n+     */\n+    public static Map<String, PMMLRuntime> createPMMLRuntimes(String... pmmlPaths) {\n+        List<Resource> resources = Stream.of(pmmlPaths).map(FileSystemResource::new).collect(Collectors.toList());\n+        return PMMLRuntimeBuilder.fromResources(resources, new PMMLModelEvaluatorFinderImpl());\n+    }\n+\n+    public static KiePMMLModel modelByName(PMMLRuntime pmmlRuntime, String modelName) {\n+        List<KiePMMLModel> modelsWithName =\n+                pmmlRuntime.getModels().stream().filter(m -> modelName.equals(m.getName())).collect(Collectors.toList());\n+        if (modelsWithName.size() == 1) {\n+            return modelsWithName.get(0);\n+        } else {\n+            throw new RuntimeException(\"Multiple model with the same name: \" + modelName);", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\nindex c21a810056..9bb3870fb3 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\n\n@@ -22,15 +22,16 @@ import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import org.drools.core.io.impl.FileSystemResource;\n+import org.kie.api.KieBase;\n import org.kie.api.io.Resource;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.Application;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.PMMLContextImpl;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n-import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNjA4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455936086", "bodyText": "Is this a constant? If so can you please move it to a static field?", "author": "danielezonca", "createdAt": "2020-07-16T17:01:47Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.pmml;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.kie.api.io.Resource;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.kogito.Application;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n+import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Internal Utility class.<br/>\n+ * Use {@link Application#predictionModels()} of Kogito API to programmatically access PMML assets and evaluate PMML\n+ * predictions.\n+ */\n+public class PMMLKogito {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PMMLKogito.class);\n+\n+    private PMMLKogito() {\n+        // intentionally private.\n+    }\n+\n+    /**\n+     * Internal Utility class.<br/>\n+     * Use {@link Application#predictionModels()} of Kogito API to programmatically access PMML assets and evaluate\n+     * PMML decisions.\n+     */\n+    public static Map<String, PMMLRuntime> createPMMLRuntimes(String... pmmlPaths) {\n+        List<Resource> resources = Stream.of(pmmlPaths).map(FileSystemResource::new).collect(Collectors.toList());\n+        return PMMLRuntimeBuilder.fromResources(resources, new PMMLModelEvaluatorFinderImpl());\n+    }\n+\n+    public static KiePMMLModel modelByName(PMMLRuntime pmmlRuntime, String modelName) {\n+        List<KiePMMLModel> modelsWithName =\n+                pmmlRuntime.getModels().stream().filter(m -> modelName.equals(m.getName())).collect(Collectors.toList());\n+        if (modelsWithName.size() == 1) {\n+            return modelsWithName.get(0);\n+        } else {\n+            throw new RuntimeException(\"Multiple model with the same name: \" + modelName);\n+        }\n+    }\n+\n+    public static PMML4Result evaluate(PMMLRuntime pmmlRuntime, String modelName, Map<String, Object> pmmlContext) {\n+        final PMMLRequestData pmmlRequestData = getPMMLRequestData(modelName, pmmlContext);\n+        return pmmlRuntime.evaluate(modelName, new PMMLContextImpl(pmmlRequestData));\n+    }\n+\n+    private static PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters) {\n+        String correlationId = \"CORRELATION_ID\";", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MzYwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460763602", "bodyText": "@danielezonca\nIt is not a constant. It is a left-over from legacy implementation and I still have to find a clean way to use/generate it.", "author": "gitgabrio", "createdAt": "2020-07-27T09:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNjA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\nindex c21a810056..9bb3870fb3 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java\n\n@@ -22,15 +22,16 @@ import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import org.drools.core.io.impl.FileSystemResource;\n+import org.kie.api.KieBase;\n import org.kie.api.io.Resource;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.Application;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.PMMLContextImpl;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n-import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNjk0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455936944", "bodyText": "In a future ticket I would consider to move these methods to PMMLRuntimeBuilder and make PMMLAssembler use them instead of the opposite so that we will have this PMMLRuntimeBuilder as single entry point for both. Wdyt?", "author": "danielezonca", "createdAt": "2020-07-16T17:03:15Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.pmml;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.PackageRegistry;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.model.Model;\n+import org.drools.modelcompiler.builder.KieBaseBuilder;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.kogito.prediction.PredictionRuleMapper;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n+import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.assembler.service.PMMLAssemblerService.getFactoryClassNamePackageName;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLLoaderService.getKiePMMLModelsLoadedFromResource;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MTc3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460791773", "bodyText": "This would make sense only if/when there would a PMML module implemented outside any \"container\" - so that common code (e.g. PMMLRuntimeBuilder) could be referred to by both containers (Drools/Kogito) without having one of them depending on the other.", "author": "gitgabrio", "createdAt": "2020-07-27T10:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNjk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\nsimilarity index 90%\nrename from drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java\nrename to drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\nindex 52fa1df1e8..1509fb6dd6 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\n\n@@ -27,15 +27,15 @@ import org.drools.core.definitions.InternalKnowledgePackage;\n import org.drools.core.impl.KnowledgeBaseImpl;\n import org.drools.model.Model;\n import org.drools.modelcompiler.builder.KieBaseBuilder;\n+import org.kie.api.KieBase;\n import org.kie.api.io.Resource;\n import org.kie.api.io.ResourceType;\n+import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.prediction.PredictionRuleMapper;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.container.PMMLPackage;\n-import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n-import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNzgwMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455937800", "bodyText": "To be removed?", "author": "danielezonca", "createdAt": "2020-07-16T17:04:46Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.kie.kogito.pmml;\n+\n+import java.util.Map;\n+\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.kogito.ExecutionIdSupplier;\n+import org.kie.kogito.prediction.PredictionModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+\n+public class PmmlPredictionModel implements PredictionModel {\n+\n+    private final PMMLRuntime pmmlRuntime;\n+    private final ExecutionIdSupplier execIdSupplier;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java\nindex 4b03bfb8f6..239d9219b1 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java\n\n@@ -4,7 +4,6 @@ import java.util.Map;\n \n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n-import org.kie.kogito.ExecutionIdSupplier;\n import org.kie.kogito.prediction.PredictionModel;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzODA3NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455938074", "bodyText": "Is it a constant? If so can you please move it to a static field?", "author": "danielezonca", "createdAt": "2020-07-16T17:05:18Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.kie.kogito.pmml;\n+\n+import java.util.Map;\n+\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.kogito.ExecutionIdSupplier;\n+import org.kie.kogito.prediction.PredictionModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+\n+public class PmmlPredictionModel implements PredictionModel {\n+\n+    private final PMMLRuntime pmmlRuntime;\n+    private final ExecutionIdSupplier execIdSupplier;\n+    private final KiePMMLModel pmmlModel;\n+\n+    public PmmlPredictionModel(PMMLRuntime pmmlRuntime, String modelName) {\n+        this(pmmlRuntime, modelName, null);\n+    }\n+\n+    public PmmlPredictionModel(PMMLRuntime pmmlRuntime, String modelName, ExecutionIdSupplier execIdSupplier) {\n+        this.pmmlRuntime = pmmlRuntime;\n+        this.execIdSupplier = execIdSupplier;\n+        this.pmmlModel = pmmlRuntime.getModel(modelName).orElseThrow(() -> new IllegalStateException(\"PMML model '\" + modelName + \"' not found in the inherent PMMLRuntime.\"));\n+    }\n+\n+    @Override\n+    public PMMLContext newContext(Map<String, Object> variables) {\n+        final PMMLRequestData pmmlRequestData = getPMMLRequestData(pmmlModel.getName(), variables);\n+        return new PMMLContextImpl(pmmlRequestData);\n+    }\n+\n+\n+    @Override\n+    public PMML4Result evaluateAll(PMMLContext context) {\n+        return pmmlRuntime.evaluate(pmmlModel.getName(), context);\n+    }\n+\n+    @Override\n+    public KiePMMLModel getKiePMMLModel() {\n+        return pmmlModel;\n+    }\n+\n+    private static PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters) {\n+        String correlationId = \"CORRELATION_ID\";", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java\nindex 4b03bfb8f6..239d9219b1 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PmmlPredictionModel.java\n\n@@ -4,7 +4,6 @@ import java.util.Map;\n \n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n-import org.kie.kogito.ExecutionIdSupplier;\n import org.kie.kogito.prediction.PredictionModel;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0OTc3MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455949770", "bodyText": "To be removed fixed/removed before merging (or at least create a ticket to track this)", "author": "danielezonca", "createdAt": "2020-07-16T17:24:19Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java", "diffHunk": "@@ -138,6 +139,7 @@ public void beforeProcessStarted(ProcessStartedEvent event) {\n         assertThat(startedProcesses).hasSize(1);\n     }\n \n+    @Disabled", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java b/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java\nindex 9175fdd341..b62e331368 100644\n--- a/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java\n+++ b/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java\n\n@@ -139,7 +139,6 @@ public class BusinessRuleTaskTest extends AbstractCodegenTest {\n         assertThat(startedProcesses).hasSize(1);\n     }\n \n-    @Disabled\n     @Test\n     public void testDecision() throws Exception {\n         Map<AbstractCodegenTest.TYPE, List<String>> resourcesTypeMap = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1MjI0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455952247", "bodyText": "STRONGLY_TYPED_CONFIGURATION_KEY is a DMN specific configuration to enable bean generation and replace Map<String, Object> as input. Does PMML have something similar? I think it can be removed", "author": "danielezonca", "createdAt": "2020-07-16T17:28:18Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.ByteArrayResource;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.core.io.internal.InternalResource;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.kogito.codegen.AbstractGenerator;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.ApplicationGenerator;\n+import org.kie.kogito.codegen.ApplicationSection;\n+import org.kie.kogito.codegen.ConfigGenerator;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.KogitoPackageSources;\n+import org.kie.kogito.codegen.decision.DMNRestResourceGenerator;\n+import org.kie.kogito.codegen.decision.DecisionCodegen;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.prediction.config.PredictionConfigGenerator;\n+import org.kie.kogito.codegen.rules.RuleCodegenError;\n+import org.kie.kogito.codegen.rules.config.RuleConfigGenerator;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n+import static org.kie.api.io.ResourceType.determineResourceType;\n+import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+public class PredictionCodegen extends AbstractGenerator {\n+\n+    private static final String operationalDashboardDmnTemplate = \"/grafana-dashboard-template/operational-dashboard\" +\n+            \"-template.json\";\n+    private static final String domainDashboardDmnTemplate = \"/grafana-dashboard-template/blank-dashboard.json\";\n+    public static String STRONGLY_TYPED_CONFIGURATION_KEY = \"kogito.predictions.stronglytyped\";", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex 55aa450de7..baec709857 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -283,6 +283,4 @@ public class PredictionCodegen extends AbstractGenerator {\n     private void storeFile(GeneratedFile.Type type, String path, String source) {\n         generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n     }\n-\n-\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NDkyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455954928", "bodyText": "I think we can remove strongly typed here (as comment above)", "author": "danielezonca", "createdAt": "2020-07-16T17:32:42Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/prediction/PredictionCodegenTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.GeneratorContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class PredictionCodegenTest extends AbstractCodegenTest {\n+\n+    private static final String SOURCE = \"prediction/test_regression.pmml\";\n+    private static final String FULL_SOURCE = \"src/test/resources/\" + SOURCE;\n+\n+    @Test\n+    public void generateAllFiles() throws Exception {\n+\n+        GeneratorContext context = stronglyTypedContext();\n+\n+        PredictionCodegen codeGenerator = PredictionCodegen.ofPath(Paths.get(FULL_SOURCE).toAbsolutePath());\n+        codeGenerator.setContext(context);\n+\n+        List<GeneratedFile> generatedFiles = codeGenerator.generate();\n+        assertEquals(4, generatedFiles.size());\n+\n+        ClassOrInterfaceDeclaration classDeclaration = codeGenerator.moduleGenerator().classDeclaration();\n+        assertNotNull(classDeclaration);\n+    }\n+\n+    private GeneratorContext stronglyTypedContext() {\n+        Properties properties = new Properties();\n+        properties.put(PredictionCodegen.STRONGLY_TYPED_CONFIGURATION_KEY, Boolean.TRUE.toString());\n+        return GeneratorContext.ofProperties(properties);\n+    }", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b26e5d0be33f129725b200e8266a6f88a53327bd", "chunk": "diff --git a/kogito-codegen/src/test/java/org/kie/kogito/codegen/prediction/PredictionCodegenTest.java b/kogito-codegen/src/test/java/org/kie/kogito/codegen/prediction/PredictionCodegenTest.java\nindex 1faedc088d..9e1e7a965b 100644\n--- a/kogito-codegen/src/test/java/org/kie/kogito/codegen/prediction/PredictionCodegenTest.java\n+++ b/kogito-codegen/src/test/java/org/kie/kogito/codegen/prediction/PredictionCodegenTest.java\n\n@@ -36,7 +36,7 @@ public class PredictionCodegenTest extends AbstractCodegenTest {\n     @Test\n     public void generateAllFiles() throws Exception {\n \n-        GeneratorContext context = stronglyTypedContext();\n+        GeneratorContext context = GeneratorContext.ofProperties(new Properties());\n \n         PredictionCodegen codeGenerator = PredictionCodegen.ofPath(Paths.get(FULL_SOURCE).toAbsolutePath());\n         codeGenerator.setContext(context);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTkwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455955907", "bodyText": "To be removed?", "author": "danielezonca", "createdAt": "2020-07-16T17:34:27Z", "path": "kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.pmml.rest;\n+\n+import java.time.Period;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.drools.core.beliefsystem.simple.SimpleMode;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.kogito.Application;\n+\n+\n+@Path(\"/$nameURL$\")\n+public class PMMLRestResourceTemplate {\n+\n+    Application application;\n+\n+    private static final String KOGITO_DECISION_INFOWARN_HEADER = \"X-Kogito-decision-messages\";\n+\n+    @javax.ws.rs.core.Context\n+    private org.jboss.resteasy.spi.HttpResponse httpResponse;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b26e5d0be33f129725b200e8266a6f88a53327bd", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java b/kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java\nindex b54086917d..06e2a340fc 100644\n--- a/kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java\n\n@@ -21,9 +21,6 @@ public class PMMLRestResourceTemplate {\n \n     private static final String KOGITO_DECISION_INFOWARN_HEADER = \"X-Kogito-decision-messages\";\n \n-    @javax.ws.rs.core.Context\n-    private org.jboss.resteasy.spi.HttpResponse httpResponse;\n-\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1ODQ2OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455958469", "bodyText": "Side note for another ticket: I think it could be nice to move this class to a -api module instead of -commons. Wdyt?", "author": "danielezonca", "createdAt": "2020-07-16T17:38:50Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionModel.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.prediction;\n+\n+import java.util.Map;\n+\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.pmml.commons.model.KiePMMLModel;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NDQ2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460794462", "bodyText": "Yes - not sure to remember why it ended here", "author": "gitgabrio", "createdAt": "2020-07-27T10:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1ODQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0aa3425618c753225f55bd277bd3a8cf25619776", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionModel.java b/api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionModel.java\nindex 96a3e068aa..07d18e1f6e 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionModel.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/prediction/PredictionModel.java\n\n@@ -18,8 +18,6 @@ package org.kie.kogito.prediction;\n import java.util.Map;\n \n import org.kie.api.pmml.PMML4Result;\n-import org.kie.dmn.api.core.DMNContext;\n-import org.kie.dmn.api.core.DMNResult;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1OTM1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455959351", "bodyText": "I think this should be removed. It is a feature specific of DMN", "author": "danielezonca", "createdAt": "2020-07-16T17:40:28Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.net.URLEncoder;\n+import java.util.NoSuchElementException;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.drools.core.util.StringUtils;\n+import org.kie.dmn.feel.codegen.feel11.CodegenStringUtil;\n+import org.kie.kogito.codegen.BodyDeclarationComparator;\n+import org.kie.kogito.codegen.CodegenUtils;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public class PMMLRestResourceGenerator {\n+\n+    private static final String TEMPLATE_JAVA = \"/class-templates/PMMLRestResourceTemplate.java\";\n+\n+    private final KiePMMLModel kiePMMLModel;\n+    private final String nameURL;\n+    private final String packageName;\n+    private final String relativePath;\n+    private final String resourceClazzName;\n+    private final String appCanonicalName;\n+    private DependencyInjectionAnnotator annotator;\n+    private boolean useMonitoring;\n+    private boolean isStronglyTyped = false;\n+\n+    public PMMLRestResourceGenerator(KiePMMLModel model, String appCanonicalName) {\n+        this.kiePMMLModel = model;\n+        this.packageName = CodegenStringUtil.escapeIdentifier(model.getClass().getPackage().getName());\n+        this.nameURL = URLEncoder.encode(model.getName()).replaceAll(\"\\\\+\", \"%20\");\n+        this.appCanonicalName = appCanonicalName;\n+        String classPrefix = StringUtils.capitalize(model.getName());\n+        this.resourceClazzName = classPrefix + \"Resource\";\n+        this.relativePath = packageName.replace(\".\", \"/\") + \"/\" + resourceClazzName + \".java\";\n+    }\n+\n+    public String generate() {\n+        CompilationUnit clazz = parse(this.getClass().getResourceAsStream(TEMPLATE_JAVA));\n+        clazz.setPackageDeclaration(this.packageName);\n+\n+        ClassOrInterfaceDeclaration template = clazz\n+                .findFirst(ClassOrInterfaceDeclaration.class)\n+                .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface \" +\n+                                                                      \"declaration!\"));\n+\n+        template.setName(resourceClazzName);\n+\n+        template.findAll(StringLiteralExpr.class).forEach(this::interpolateStrings);\n+\n+        interpolateInputType(template);\n+\n+        if (useInjection()) {\n+            template.findAll(FieldDeclaration.class,\n+                             CodegenUtils::isApplicationField).forEach(fd -> annotator.withInjection(fd));\n+        } else {\n+            template.findAll(FieldDeclaration.class,\n+                             CodegenUtils::isApplicationField).forEach(this::initializeApplicationField);\n+        }\n+\n+        template.getMembers().sort(new BodyDeclarationComparator());\n+        return clazz.toString();\n+    }\n+\n+    private void interpolateInputType(ClassOrInterfaceDeclaration template) {\n+        String inputType = isStronglyTyped ? \"InputSet\" : \"java.util.Map<String, Object>\";\n+        template.findAll(ClassOrInterfaceType.class, t -> t.asString().equals(\"$inputType$\"))\n+                .forEach(type -> type.setName(inputType));\n+    }", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da8de1788693b4bcb169b6358ef9b6cb7f0769f9", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java\nindex fe235b7faf..c7257e3629 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java\n\n@@ -50,7 +50,7 @@ public class PMMLRestResourceGenerator {\n \n     public PMMLRestResourceGenerator(KiePMMLModel model, String appCanonicalName) {\n         this.kiePMMLModel = model;\n-        this.packageName = CodegenStringUtil.escapeIdentifier(model.getClass().getPackage().getName());\n+        this.packageName = \"org.kie.kogito.\" + CodegenStringUtil.escapeIdentifier(model.getClass().getPackage().getName());\n         this.nameURL = URLEncoder.encode(model.getName()).replaceAll(\"\\\\+\", \"%20\");\n         this.appCanonicalName = appCanonicalName;\n         String classPrefix = StringUtils.capitalize(model.getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDY4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455960685", "bodyText": "Not used (and btw after a recent refactor now we use AddonsConfig class to wrap all these boolean)", "author": "danielezonca", "createdAt": "2020-07-16T17:42:51Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.net.URLEncoder;\n+import java.util.NoSuchElementException;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.drools.core.util.StringUtils;\n+import org.kie.dmn.feel.codegen.feel11.CodegenStringUtil;\n+import org.kie.kogito.codegen.BodyDeclarationComparator;\n+import org.kie.kogito.codegen.CodegenUtils;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public class PMMLRestResourceGenerator {\n+\n+    private static final String TEMPLATE_JAVA = \"/class-templates/PMMLRestResourceTemplate.java\";\n+\n+    private final KiePMMLModel kiePMMLModel;\n+    private final String nameURL;\n+    private final String packageName;\n+    private final String relativePath;\n+    private final String resourceClazzName;\n+    private final String appCanonicalName;\n+    private DependencyInjectionAnnotator annotator;\n+    private boolean useMonitoring;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da8de1788693b4bcb169b6358ef9b6cb7f0769f9", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java\nindex fe235b7faf..c7257e3629 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLRestResourceGenerator.java\n\n@@ -50,7 +50,7 @@ public class PMMLRestResourceGenerator {\n \n     public PMMLRestResourceGenerator(KiePMMLModel model, String appCanonicalName) {\n         this.kiePMMLModel = model;\n-        this.packageName = CodegenStringUtil.escapeIdentifier(model.getClass().getPackage().getName());\n+        this.packageName = \"org.kie.kogito.\" + CodegenStringUtil.escapeIdentifier(model.getClass().getPackage().getName());\n         this.nameURL = URLEncoder.encode(model.getName()).replaceAll(\"\\\\+\", \"%20\");\n         this.appCanonicalName = appCanonicalName;\n         String classPrefix = StringUtils.capitalize(model.getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MTY5NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455961694", "bodyText": "To be removed, addonsConfig fields already contains all of them", "author": "danielezonca", "createdAt": "2020-07-16T17:44:32Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.ByteArrayResource;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.core.io.internal.InternalResource;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.kogito.codegen.AbstractGenerator;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.ApplicationGenerator;\n+import org.kie.kogito.codegen.ApplicationSection;\n+import org.kie.kogito.codegen.ConfigGenerator;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.KogitoPackageSources;\n+import org.kie.kogito.codegen.decision.DMNRestResourceGenerator;\n+import org.kie.kogito.codegen.decision.DecisionCodegen;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.prediction.config.PredictionConfigGenerator;\n+import org.kie.kogito.codegen.rules.RuleCodegenError;\n+import org.kie.kogito.codegen.rules.config.RuleConfigGenerator;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n+import static org.kie.api.io.ResourceType.determineResourceType;\n+import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+public class PredictionCodegen extends AbstractGenerator {\n+\n+    private static final String operationalDashboardDmnTemplate = \"/grafana-dashboard-template/operational-dashboard\" +\n+            \"-template.json\";\n+    private static final String domainDashboardDmnTemplate = \"/grafana-dashboard-template/blank-dashboard.json\";\n+    public static String STRONGLY_TYPED_CONFIGURATION_KEY = \"kogito.predictions.stronglytyped\";\n+    private final List<PMMLResource> resources;\n+    private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n+    private String packageName;\n+    private String applicationCanonicalName;\n+    private DependencyInjectionAnnotator annotator;\n+    private PredictionContainerGenerator moduleGenerator;\n+    private boolean useMonitoring = false;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex 55aa450de7..baec709857 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -283,6 +283,4 @@ public class PredictionCodegen extends AbstractGenerator {\n     private void storeFile(GeneratedFile.Type type, String path, String source) {\n         generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n     }\n-\n-\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2Mjk4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455962982", "bodyText": "Can you please add model path to error message (it should be available in resource)", "author": "danielezonca", "createdAt": "2020-07-16T17:46:31Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.ByteArrayResource;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.core.io.internal.InternalResource;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.kogito.codegen.AbstractGenerator;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.ApplicationGenerator;\n+import org.kie.kogito.codegen.ApplicationSection;\n+import org.kie.kogito.codegen.ConfigGenerator;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.KogitoPackageSources;\n+import org.kie.kogito.codegen.decision.DMNRestResourceGenerator;\n+import org.kie.kogito.codegen.decision.DecisionCodegen;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.prediction.config.PredictionConfigGenerator;\n+import org.kie.kogito.codegen.rules.RuleCodegenError;\n+import org.kie.kogito.codegen.rules.config.RuleConfigGenerator;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n+import static org.kie.api.io.ResourceType.determineResourceType;\n+import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+public class PredictionCodegen extends AbstractGenerator {\n+\n+    private static final String operationalDashboardDmnTemplate = \"/grafana-dashboard-template/operational-dashboard\" +\n+            \"-template.json\";\n+    private static final String domainDashboardDmnTemplate = \"/grafana-dashboard-template/blank-dashboard.json\";\n+    public static String STRONGLY_TYPED_CONFIGURATION_KEY = \"kogito.predictions.stronglytyped\";\n+    private final List<PMMLResource> resources;\n+    private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n+    private String packageName;\n+    private String applicationCanonicalName;\n+    private DependencyInjectionAnnotator annotator;\n+    private PredictionContainerGenerator moduleGenerator;\n+    private boolean useMonitoring = false;\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n+\n+    public PredictionCodegen(List<PMMLResource> resources) {\n+        this.resources = resources;\n+\n+        // set default package name\n+        setPackageName(ApplicationGenerator.DEFAULT_PACKAGE_NAME);\n+        this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n+    }\n+\n+    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+        List<PMMLResource> pmmlResources = new ArrayList<>();\n+        for (Path jarPath : jarPaths) {\n+            List<Resource> resources = new ArrayList<>();\n+            try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+                while (entries.hasMoreElements()) {\n+                    ZipEntry entry = entries.nextElement();\n+                    ResourceType resourceType = determineResourceType(entry.getName());\n+                    if (resourceType == ResourceType.PMML) {\n+                        InternalResource resource =\n+                                new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                        resource.setResourceType(resourceType);\n+                        resource.setSourcePath(entry.getName());\n+                        resources.add(resource);\n+                    }\n+                }\n+            }\n+            pmmlResources.addAll(parsePredictions(jarPath, resources));\n+        }\n+        return ofPredictions(pmmlResources);\n+    }\n+\n+    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n+        List<PMMLResource> resources = new ArrayList<>();\n+        for (Path path : paths) {\n+            Path srcPath = Paths.get(path.toString());\n+            try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+                List<File> files = filesStream.filter(p -> p.toString().endsWith(\".pmml\"))\n+                        .map(Path::toFile)\n+                        .collect(Collectors.toList());\n+                resources.addAll(parseFiles(srcPath, files));\n+            }\n+        }\n+        return ofPredictions(resources);\n+    }\n+\n+    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n+        return ofPredictions(parseFiles(basePath, files));\n+    }\n+\n+    private static PredictionCodegen ofPredictions(List<PMMLResource> resources) {\n+        return new PredictionCodegen(resources);\n+    }\n+\n+    private static List<PMMLResource> parseFiles(Path path, List<File> files) {\n+        return parsePredictions(path, files.stream().map(FileSystemResource::new).collect(toList()));\n+    }\n+\n+    private static List<PMMLResource> parsePredictions(Path path, List<Resource> resources) {\n+        final InternalKnowledgeBase knowledgeBase = new KnowledgeBaseImpl(\"PMML\", null);\n+        KnowledgeBuilderImpl kbuilderImpl = new KnowledgeBuilderImpl(knowledgeBase);\n+        List<PMMLResource> toReturn = new ArrayList<>();\n+        resources.forEach(resource -> {\n+            List<KiePMMLModel> kiePMMLModels = getKiePMMLModelsFromResourceFromPlugin(kbuilderImpl, resource);\n+            String modelPath = resource.getSourcePath();\n+            PMMLResource toAdd = new PMMLResource(kiePMMLModels, path, modelPath);\n+            toReturn.add(toAdd);\n+        });\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        if (!resources.isEmpty()) {\n+            cfg.withPredictionConfig(new PredictionConfigGenerator(packageName));\n+        }\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    public PredictionCodegen withAddons(AddonsConfig addonsConfig) {\n+        this.moduleGenerator.withAddons(addonsConfig);\n+        this.addonsConfig = addonsConfig;\n+        return this;\n+    }\n+\n+\n+    public void setPackageName(String packageName) {\n+        this.packageName = packageName;\n+        this.applicationCanonicalName = packageName + \".Application\";\n+    }\n+\n+    public void setDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+    }\n+\n+    public PredictionContainerGenerator moduleGenerator() {\n+        return moduleGenerator;\n+    }\n+\n+    public List<GeneratedFile> generate() {\n+        if (resources.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n+                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        CompositeKnowledgeBuilder batch = modelBuilder.batch();\n+        for (PMMLResource resource : resources) {\n+            List<KiePMMLModel> kiepmmlModels = resource.getKiePmmlModels();\n+            for (KiePMMLModel model : kiepmmlModels) {\n+                if (model.getName() == null || model.getName().isEmpty()) {\n+                    throw new RuntimeException(\"Model name should not be empty\");", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5Njk1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460796953", "bodyText": "Model name is automatically generated (when missing) now.", "author": "gitgabrio", "createdAt": "2020-07-27T10:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2Mjk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex 55aa450de7..baec709857 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -283,6 +283,4 @@ public class PredictionCodegen extends AbstractGenerator {\n     private void storeFile(GeneratedFile.Type type, String path, String source) {\n         generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n     }\n-\n-\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzIxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455963219", "bodyText": "Can you please add model path to error message (it should be available in resource)", "author": "danielezonca", "createdAt": "2020-07-16T17:46:51Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.ByteArrayResource;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.core.io.internal.InternalResource;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.kogito.codegen.AbstractGenerator;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.ApplicationGenerator;\n+import org.kie.kogito.codegen.ApplicationSection;\n+import org.kie.kogito.codegen.ConfigGenerator;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.KogitoPackageSources;\n+import org.kie.kogito.codegen.decision.DMNRestResourceGenerator;\n+import org.kie.kogito.codegen.decision.DecisionCodegen;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.prediction.config.PredictionConfigGenerator;\n+import org.kie.kogito.codegen.rules.RuleCodegenError;\n+import org.kie.kogito.codegen.rules.config.RuleConfigGenerator;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n+import static org.kie.api.io.ResourceType.determineResourceType;\n+import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+public class PredictionCodegen extends AbstractGenerator {\n+\n+    private static final String operationalDashboardDmnTemplate = \"/grafana-dashboard-template/operational-dashboard\" +\n+            \"-template.json\";\n+    private static final String domainDashboardDmnTemplate = \"/grafana-dashboard-template/blank-dashboard.json\";\n+    public static String STRONGLY_TYPED_CONFIGURATION_KEY = \"kogito.predictions.stronglytyped\";\n+    private final List<PMMLResource> resources;\n+    private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n+    private String packageName;\n+    private String applicationCanonicalName;\n+    private DependencyInjectionAnnotator annotator;\n+    private PredictionContainerGenerator moduleGenerator;\n+    private boolean useMonitoring = false;\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n+\n+    public PredictionCodegen(List<PMMLResource> resources) {\n+        this.resources = resources;\n+\n+        // set default package name\n+        setPackageName(ApplicationGenerator.DEFAULT_PACKAGE_NAME);\n+        this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n+    }\n+\n+    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+        List<PMMLResource> pmmlResources = new ArrayList<>();\n+        for (Path jarPath : jarPaths) {\n+            List<Resource> resources = new ArrayList<>();\n+            try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+                while (entries.hasMoreElements()) {\n+                    ZipEntry entry = entries.nextElement();\n+                    ResourceType resourceType = determineResourceType(entry.getName());\n+                    if (resourceType == ResourceType.PMML) {\n+                        InternalResource resource =\n+                                new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                        resource.setResourceType(resourceType);\n+                        resource.setSourcePath(entry.getName());\n+                        resources.add(resource);\n+                    }\n+                }\n+            }\n+            pmmlResources.addAll(parsePredictions(jarPath, resources));\n+        }\n+        return ofPredictions(pmmlResources);\n+    }\n+\n+    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n+        List<PMMLResource> resources = new ArrayList<>();\n+        for (Path path : paths) {\n+            Path srcPath = Paths.get(path.toString());\n+            try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+                List<File> files = filesStream.filter(p -> p.toString().endsWith(\".pmml\"))\n+                        .map(Path::toFile)\n+                        .collect(Collectors.toList());\n+                resources.addAll(parseFiles(srcPath, files));\n+            }\n+        }\n+        return ofPredictions(resources);\n+    }\n+\n+    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n+        return ofPredictions(parseFiles(basePath, files));\n+    }\n+\n+    private static PredictionCodegen ofPredictions(List<PMMLResource> resources) {\n+        return new PredictionCodegen(resources);\n+    }\n+\n+    private static List<PMMLResource> parseFiles(Path path, List<File> files) {\n+        return parsePredictions(path, files.stream().map(FileSystemResource::new).collect(toList()));\n+    }\n+\n+    private static List<PMMLResource> parsePredictions(Path path, List<Resource> resources) {\n+        final InternalKnowledgeBase knowledgeBase = new KnowledgeBaseImpl(\"PMML\", null);\n+        KnowledgeBuilderImpl kbuilderImpl = new KnowledgeBuilderImpl(knowledgeBase);\n+        List<PMMLResource> toReturn = new ArrayList<>();\n+        resources.forEach(resource -> {\n+            List<KiePMMLModel> kiePMMLModels = getKiePMMLModelsFromResourceFromPlugin(kbuilderImpl, resource);\n+            String modelPath = resource.getSourcePath();\n+            PMMLResource toAdd = new PMMLResource(kiePMMLModels, path, modelPath);\n+            toReturn.add(toAdd);\n+        });\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        if (!resources.isEmpty()) {\n+            cfg.withPredictionConfig(new PredictionConfigGenerator(packageName));\n+        }\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    public PredictionCodegen withAddons(AddonsConfig addonsConfig) {\n+        this.moduleGenerator.withAddons(addonsConfig);\n+        this.addonsConfig = addonsConfig;\n+        return this;\n+    }\n+\n+\n+    public void setPackageName(String packageName) {\n+        this.packageName = packageName;\n+        this.applicationCanonicalName = packageName + \".Application\";\n+    }\n+\n+    public void setDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+    }\n+\n+    public PredictionContainerGenerator moduleGenerator() {\n+        return moduleGenerator;\n+    }\n+\n+    public List<GeneratedFile> generate() {\n+        if (resources.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n+                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        CompositeKnowledgeBuilder batch = modelBuilder.batch();\n+        for (PMMLResource resource : resources) {\n+            List<KiePMMLModel> kiepmmlModels = resource.getKiePmmlModels();\n+            for (KiePMMLModel model : kiepmmlModels) {\n+                if (model.getName() == null || model.getName().isEmpty()) {\n+                    throw new RuntimeException(\"Model name should not be empty\");\n+                }\n+                if (!(model instanceof HasSourcesMap)) {\n+                    throw new RuntimeException(\"Expecting HasSourcesMap instance, retrieved \" + model.getClass().getName());", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex 55aa450de7..baec709857 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -283,6 +283,4 @@ public class PredictionCodegen extends AbstractGenerator {\n     private void storeFile(GeneratedFile.Type type, String path, String source) {\n         generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n     }\n-\n-\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NDE1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455964154", "bodyText": "Side note: it would be nice in a future ticket to refactor this code to invoke directly rule generators (/cc @evacchi @mariofusco )", "author": "danielezonca", "createdAt": "2020-07-16T17:48:22Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.ByteArrayResource;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.core.io.internal.InternalResource;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.kogito.codegen.AbstractGenerator;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.ApplicationGenerator;\n+import org.kie.kogito.codegen.ApplicationSection;\n+import org.kie.kogito.codegen.ConfigGenerator;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.KogitoPackageSources;\n+import org.kie.kogito.codegen.decision.DMNRestResourceGenerator;\n+import org.kie.kogito.codegen.decision.DecisionCodegen;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.prediction.config.PredictionConfigGenerator;\n+import org.kie.kogito.codegen.rules.RuleCodegenError;\n+import org.kie.kogito.codegen.rules.config.RuleConfigGenerator;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n+import static org.kie.api.io.ResourceType.determineResourceType;\n+import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+public class PredictionCodegen extends AbstractGenerator {\n+\n+    private static final String operationalDashboardDmnTemplate = \"/grafana-dashboard-template/operational-dashboard\" +\n+            \"-template.json\";\n+    private static final String domainDashboardDmnTemplate = \"/grafana-dashboard-template/blank-dashboard.json\";\n+    public static String STRONGLY_TYPED_CONFIGURATION_KEY = \"kogito.predictions.stronglytyped\";\n+    private final List<PMMLResource> resources;\n+    private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n+    private String packageName;\n+    private String applicationCanonicalName;\n+    private DependencyInjectionAnnotator annotator;\n+    private PredictionContainerGenerator moduleGenerator;\n+    private boolean useMonitoring = false;\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n+\n+    public PredictionCodegen(List<PMMLResource> resources) {\n+        this.resources = resources;\n+\n+        // set default package name\n+        setPackageName(ApplicationGenerator.DEFAULT_PACKAGE_NAME);\n+        this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n+    }\n+\n+    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+        List<PMMLResource> pmmlResources = new ArrayList<>();\n+        for (Path jarPath : jarPaths) {\n+            List<Resource> resources = new ArrayList<>();\n+            try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+                while (entries.hasMoreElements()) {\n+                    ZipEntry entry = entries.nextElement();\n+                    ResourceType resourceType = determineResourceType(entry.getName());\n+                    if (resourceType == ResourceType.PMML) {\n+                        InternalResource resource =\n+                                new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                        resource.setResourceType(resourceType);\n+                        resource.setSourcePath(entry.getName());\n+                        resources.add(resource);\n+                    }\n+                }\n+            }\n+            pmmlResources.addAll(parsePredictions(jarPath, resources));\n+        }\n+        return ofPredictions(pmmlResources);\n+    }\n+\n+    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n+        List<PMMLResource> resources = new ArrayList<>();\n+        for (Path path : paths) {\n+            Path srcPath = Paths.get(path.toString());\n+            try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+                List<File> files = filesStream.filter(p -> p.toString().endsWith(\".pmml\"))\n+                        .map(Path::toFile)\n+                        .collect(Collectors.toList());\n+                resources.addAll(parseFiles(srcPath, files));\n+            }\n+        }\n+        return ofPredictions(resources);\n+    }\n+\n+    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n+        return ofPredictions(parseFiles(basePath, files));\n+    }\n+\n+    private static PredictionCodegen ofPredictions(List<PMMLResource> resources) {\n+        return new PredictionCodegen(resources);\n+    }\n+\n+    private static List<PMMLResource> parseFiles(Path path, List<File> files) {\n+        return parsePredictions(path, files.stream().map(FileSystemResource::new).collect(toList()));\n+    }\n+\n+    private static List<PMMLResource> parsePredictions(Path path, List<Resource> resources) {\n+        final InternalKnowledgeBase knowledgeBase = new KnowledgeBaseImpl(\"PMML\", null);\n+        KnowledgeBuilderImpl kbuilderImpl = new KnowledgeBuilderImpl(knowledgeBase);\n+        List<PMMLResource> toReturn = new ArrayList<>();\n+        resources.forEach(resource -> {\n+            List<KiePMMLModel> kiePMMLModels = getKiePMMLModelsFromResourceFromPlugin(kbuilderImpl, resource);\n+            String modelPath = resource.getSourcePath();\n+            PMMLResource toAdd = new PMMLResource(kiePMMLModels, path, modelPath);\n+            toReturn.add(toAdd);\n+        });\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        if (!resources.isEmpty()) {\n+            cfg.withPredictionConfig(new PredictionConfigGenerator(packageName));\n+        }\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    public PredictionCodegen withAddons(AddonsConfig addonsConfig) {\n+        this.moduleGenerator.withAddons(addonsConfig);\n+        this.addonsConfig = addonsConfig;\n+        return this;\n+    }\n+\n+\n+    public void setPackageName(String packageName) {\n+        this.packageName = packageName;\n+        this.applicationCanonicalName = packageName + \".Application\";\n+    }\n+\n+    public void setDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+    }\n+\n+    public PredictionContainerGenerator moduleGenerator() {\n+        return moduleGenerator;\n+    }\n+\n+    public List<GeneratedFile> generate() {\n+        if (resources.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n+                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        CompositeKnowledgeBuilder batch = modelBuilder.batch();\n+        for (PMMLResource resource : resources) {\n+            List<KiePMMLModel> kiepmmlModels = resource.getKiePmmlModels();\n+            for (KiePMMLModel model : kiepmmlModels) {\n+                if (model.getName() == null || model.getName().isEmpty()) {\n+                    throw new RuntimeException(\"Model name should not be empty\");\n+                }\n+                if (!(model instanceof HasSourcesMap)) {\n+                    throw new RuntimeException(\"Expecting HasSourcesMap instance, retrieved \" + model.getClass().getName());\n+                }\n+                Map<String, String> sourceMap = ((HasSourcesMap) model).getSourcesMap();\n+                for (Map.Entry<String, String> sourceMapEntry : sourceMap.entrySet()) {\n+                    String path = sourceMapEntry.getKey().replace('.', File.separatorChar) + \".java\";\n+                    storeFile(GeneratedFile.Type.PMML, path, sourceMapEntry.getValue());\n+                }\n+                if (model instanceof KiePMMLDroolsModelWithSources) {\n+                    PackageDescr packageDescr = ((KiePMMLDroolsModelWithSources)model).getPackageDescr();\n+                    batch.add( new DescrResource( packageDescr ), ResourceType.DESCR );\n+                }\n+                if (!(model instanceof KiePMMLFactoryModel)) {\n+                    PMMLRestResourceGenerator resourceGenerator = new PMMLRestResourceGenerator(model, applicationCanonicalName)\n+                            .withDependencyInjection(annotator)\n+                            .withMonitoring(useMonitoring);\n+                    storeFile(GeneratedFile.Type.PMML, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+                }\n+            }\n+        }\n+\n+        generatedFiles.addAll( generateRules(modelBuilder, batch) );\n+\n+        return generatedFiles;\n+    }\n+\n+    private List<GeneratedFile> generateRules(ModelBuilderImpl<KogitoPackageSources> modelBuilder, CompositeKnowledgeBuilder batch) {", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex 55aa450de7..baec709857 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -283,6 +283,4 @@ public class PredictionCodegen extends AbstractGenerator {\n     private void storeFile(GeneratedFile.Type type, String path, String source) {\n         generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n     }\n-\n-\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NjA5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455966097", "bodyText": "This is needed in DMN to properly serialize dates and duration. I don't think PMML supports these data types. Am I wrong?", "author": "danielezonca", "createdAt": "2020-07-16T17:51:26Z", "path": "kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.pmml.rest;\n+\n+import java.time.Period;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.drools.core.beliefsystem.simple.SimpleMode;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.kogito.Application;\n+\n+\n+@Path(\"/$nameURL$\")\n+public class PMMLRestResourceTemplate {\n+\n+    Application application;\n+\n+    private static final String KOGITO_DECISION_INFOWARN_HEADER = \"X-Kogito-decision-messages\";\n+\n+    @javax.ws.rs.core.Context\n+    private org.jboss.resteasy.spi.HttpResponse httpResponse;\n+\n+    @POST\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object pmml($inputType$ variables) {\n+        org.kie.kogito.prediction.PredictionModel prediction = application.predictionModels().getPredictionModel(\"$modelName$\");\n+        return wrapResult(prediction.evaluateAll(prediction.newContext(variables)));\n+    }\n+\n+    private Object wrapResult(PMML4Result result){\n+        try {\n+            return objectMapper.writeValueAsString(result);\n+        } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static final com.fasterxml.jackson.databind.ObjectMapper objectMapper = new com.fasterxml.jackson.databind.ObjectMapper()\n+            .registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule())\n+            .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n+            .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS);", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b26e5d0be33f129725b200e8266a6f88a53327bd", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java b/kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java\nindex b54086917d..06e2a340fc 100644\n--- a/kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/PMMLRestResourceTemplate.java\n\n@@ -21,9 +21,6 @@ public class PMMLRestResourceTemplate {\n \n     private static final String KOGITO_DECISION_INFOWARN_HEADER = \"X-Kogito-decision-messages\";\n \n-    @javax.ws.rs.core.Context\n-    private org.jboss.resteasy.spi.HttpResponse httpResponse;\n-\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NjkwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455966901", "bodyText": "Can you add predictive to the message?", "author": "danielezonca", "createdAt": "2020-07-16T17:52:44Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.pmml;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.PackageRegistry;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.model.Model;\n+import org.drools.modelcompiler.builder.KieBaseBuilder;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.kogito.prediction.PredictionRuleMapper;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n+import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.assembler.service.PMMLAssemblerService.getFactoryClassNamePackageName;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLLoaderService.getKiePMMLModelsLoadedFromResource;\n+\n+/**\n+ * Utility class to replace the <b>Assembler</b> mechanism where this is not available\n+ */\n+public class PMMLRuntimeBuilder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeBuilder.class);\n+\n+    public static Map<String, PMMLRuntime> fromResources(final List<Resource> resources,\n+                                                         final PMMLModelEvaluatorFinderImpl pmmlModelExecutorFinder) {\n+        Map<String, PMMLRuntime> toReturn = new HashMap<>();\n+        resources.forEach(resource -> {\n+            final String[] factoryClassNamePackageName = getFactoryClassNamePackageName(resource);\n+            final KnowledgeBuilderImpl kbuilderImpl = createKnowledgeBuilderImpl(resource);\n+            List<KiePMMLModel> toAdd = getKiePMMLModelsLoadedFromResource(kbuilderImpl, resource);\n+            if (toAdd.isEmpty()) {\n+                throw new RuntimeException(\"Failed to retrieve compiled models\");", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\nsimilarity index 90%\nrename from drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java\nrename to drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\nindex 52fa1df1e8..1509fb6dd6 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\n\n@@ -27,15 +27,15 @@ import org.drools.core.definitions.InternalKnowledgePackage;\n import org.drools.core.impl.KnowledgeBaseImpl;\n import org.drools.model.Model;\n import org.drools.modelcompiler.builder.KieBaseBuilder;\n+import org.kie.api.KieBase;\n import org.kie.api.io.Resource;\n import org.kie.api.io.ResourceType;\n+import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.prediction.PredictionRuleMapper;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.container.PMMLPackage;\n-import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n-import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NzQ0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455967446", "bodyText": "Why are you returning null instead of throwing an exception like you do in loadModel method?", "author": "danielezonca", "createdAt": "2020-07-16T17:53:41Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.pmml;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.PackageRegistry;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.model.Model;\n+import org.drools.modelcompiler.builder.KieBaseBuilder;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.kogito.prediction.PredictionRuleMapper;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n+import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.assembler.service.PMMLAssemblerService.getFactoryClassNamePackageName;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLLoaderService.getKiePMMLModelsLoadedFromResource;\n+\n+/**\n+ * Utility class to replace the <b>Assembler</b> mechanism where this is not available\n+ */\n+public class PMMLRuntimeBuilder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeBuilder.class);\n+\n+    public static Map<String, PMMLRuntime> fromResources(final List<Resource> resources,\n+                                                         final PMMLModelEvaluatorFinderImpl pmmlModelExecutorFinder) {\n+        Map<String, PMMLRuntime> toReturn = new HashMap<>();\n+        resources.forEach(resource -> {\n+            final String[] factoryClassNamePackageName = getFactoryClassNamePackageName(resource);\n+            final KnowledgeBuilderImpl kbuilderImpl = createKnowledgeBuilderImpl(resource);\n+            List<KiePMMLModel> toAdd = getKiePMMLModelsLoadedFromResource(kbuilderImpl, resource);\n+            if (toAdd.isEmpty()) {\n+                throw new RuntimeException(\"Failed to retrieve compiled models\");\n+            }\n+            for (KiePMMLModel kiePMMLModel : toAdd) {\n+                InternalKnowledgePackage internalKnowledgePackage =\n+                        kbuilderImpl.getKnowledgeBase().getPackage(factoryClassNamePackageName[1]);\n+                if (internalKnowledgePackage == null) {\n+                    PackageDescr pkgDescr = new PackageDescr(kiePMMLModel.getKModulePackageName());\n+                    PackageRegistry pkgReg = kbuilderImpl.getOrCreatePackageRegistry(pkgDescr);\n+                    internalKnowledgePackage = pkgReg.getPackage();\n+                }\n+                PMMLPackage pmmlPkg =\n+                        internalKnowledgePackage.getResourceTypePackages().computeIfAbsent(ResourceType.PMML,\n+                                                                                           rtp -> new PMMLPackageImpl());\n+                pmmlPkg.addAll(Collections.singletonList(kiePMMLModel));\n+            }\n+            toReturn.put(resource.getSourcePath(), new PMMLRuntimeImpl(kbuilderImpl.getKnowledgeBase(),\n+                                                                       pmmlModelExecutorFinder));\n+        });\n+        return toReturn;\n+    }\n+\n+    private static KnowledgeBuilderImpl createKnowledgeBuilderImpl(final Resource resource) {\n+        KnowledgeBaseImpl defaultKnowledgeBase = new KnowledgeBaseImpl(\"PMML\", null);\n+        KnowledgeBuilderImpl toReturn = new KnowledgeBuilderImpl(defaultKnowledgeBase);\n+        PredictionRuleMapper pmmlRuleMapper = loadPMMLRuleMapper(toReturn.getRootClassLoader(), resource);\n+        if (pmmlRuleMapper != null) {\n+            String ruleName = pmmlRuleMapper.getRuleName();\n+            Model model = loadModel(toReturn.getRootClassLoader(), ruleName);\n+            toReturn = new KnowledgeBuilderImpl(KieBaseBuilder.createKieBaseFromModel(model));\n+        }\n+        return toReturn;\n+    }\n+\n+    private static PredictionRuleMapper loadPMMLRuleMapper(final ClassLoader classLoader,\n+                                                           final Resource resource) {\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String packageName = classNamePackageName[1];\n+        String fullPMMLRuleMapperClassName = packageName + \".PredictionRuleMapperImpl\";\n+        try {\n+            return (PredictionRuleMapper) classLoader.loadClass(fullPMMLRuleMapperClassName).newInstance();\n+        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | ClassCastException e) {\n+            logger.info(String.format(\"%s class not found in rootClassLoader\", fullPMMLRuleMapperClassName));\n+            return null;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\nsimilarity index 90%\nrename from drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java\nrename to drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\nindex 52fa1df1e8..1509fb6dd6 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLRuntimeBuilder.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java\n\n@@ -27,15 +27,15 @@ import org.drools.core.definitions.InternalKnowledgePackage;\n import org.drools.core.impl.KnowledgeBaseImpl;\n import org.drools.model.Model;\n import org.drools.modelcompiler.builder.KieBaseBuilder;\n+import org.kie.api.KieBase;\n import org.kie.api.io.Resource;\n import org.kie.api.io.ResourceType;\n+import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.prediction.PredictionRuleMapper;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.container.PMMLPackage;\n-import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n-import org.kie.pmml.evaluator.core.service.PMMLRuntimeImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODM2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455968364", "bodyText": "Isn't modelPath also available inside Path?", "author": "danielezonca", "createdAt": "2020-07-16T17:55:13Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PMMLResource.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+public class PMMLResource {\n+    private final List<KiePMMLModel> kiePmmlModels;\n+    private final Path path;\n+    private final String modelPath;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMDIwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460800208", "bodyText": "They are different\nSee PredictionCodegen#110\npmmlResources.addAll(parsePredictions(jarPath, resources));", "author": "gitgabrio", "createdAt": "2020-07-27T10:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODM2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTg2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455969866", "bodyText": "To be removed, addonsConfig already contains this information", "author": "danielezonca", "createdAt": "2020-07-16T17:57:43Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+  * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.BinaryExpr;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.ThisExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.Statement;\n+import org.kie.kogito.codegen.AbstractApplicationSection;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.dmn.DmnExecutionIdSupplier;\n+import org.kie.kogito.prediction.PredictionModels;\n+\n+import static org.kie.kogito.codegen.CodegenUtils.newObject;\n+\n+public class PredictionContainerGenerator extends AbstractApplicationSection {\n+\n+    private static final String TEMPLATE_JAVA = \"/class-templates/PMMLApplicationClassDeclTemplate.java\";\n+\n+    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION = new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n+\n+    private String applicationCanonicalName;\n+    private final List<PMMLResource> resources;\n+    private boolean useTracing = false;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java\nindex c6a7648ec6..339f61c9b5 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java\n\n@@ -1,5 +1,5 @@\n /*\n-  * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MDE5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455970193", "bodyText": "Internal PMML tracing is not supported yet so this code should be removed", "author": "danielezonca", "createdAt": "2020-07-16T17:58:16Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+  * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.BinaryExpr;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.ThisExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.Statement;\n+import org.kie.kogito.codegen.AbstractApplicationSection;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.dmn.DmnExecutionIdSupplier;\n+import org.kie.kogito.prediction.PredictionModels;\n+\n+import static org.kie.kogito.codegen.CodegenUtils.newObject;\n+\n+public class PredictionContainerGenerator extends AbstractApplicationSection {\n+\n+    private static final String TEMPLATE_JAVA = \"/class-templates/PMMLApplicationClassDeclTemplate.java\";\n+\n+    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION = new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n+\n+    private String applicationCanonicalName;\n+    private final List<PMMLResource> resources;\n+    private boolean useTracing = false;\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n+\n+    public PredictionContainerGenerator(String applicationCanonicalName, List<PMMLResource> resources) {\n+        super(\"PredictionModels\", \"predictionModels\", PredictionModels.class);\n+        this.applicationCanonicalName = applicationCanonicalName;\n+        this.resources = resources;\n+    }\n+\n+    public PredictionContainerGenerator withAddons(AddonsConfig addonsConfig) {\n+        this.addonsConfig = addonsConfig;\n+        return this;\n+    }\n+\n+    @Override\n+    public ClassOrInterfaceDeclaration classDeclaration() {\n+        CompilationUnit clazz = StaticJavaParser.parse(this.getClass().getResourceAsStream(TEMPLATE_JAVA));\n+        ClassOrInterfaceDeclaration typeDeclaration = (ClassOrInterfaceDeclaration) clazz.getTypes().get(0);\n+        for (PMMLResource resource : resources) {\n+            StringLiteralExpr getResAsStream = getReadResourceMethod(resource );\n+            Optional<FieldDeclaration> pmmlRuntimeField = typeDeclaration.getFieldByName(\"pmmlRuntimes\");\n+            Expression initializer = pmmlRuntimeField.flatMap(x -> x.getVariable(0).getInitializer()).orElseThrow(() -> MODIFIED_TEMPLATE_EXCEPTION);\n+            initializer.asMethodCallExpr().addArgument(getResAsStream);\n+        }\n+        if (useTracing) {\n+            VariableDeclarator execIdSupplierVariable = typeDeclaration.getFieldByName(\"execIdSupplier\")\n+                    .map(x -> x.getVariable(0))\n+                    .orElseThrow(() -> new RuntimeException(\"Can't find \\\"execIdSupplier\\\" field in \" + TEMPLATE_JAVA));\n+            execIdSupplierVariable.setInitializer(newObject(DmnExecutionIdSupplier.class));\n+        }", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java\nindex c6a7648ec6..339f61c9b5 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java\n\n@@ -1,5 +1,5 @@\n /*\n-  * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MDczOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455970739", "bodyText": "To be removed", "author": "danielezonca", "createdAt": "2020-07-16T17:59:11Z", "path": "kogito-codegen/src/main/resources/class-templates/PMMLApplicationClassDeclTemplate.java", "diffHunk": "@@ -0,0 +1,24 @@\n+public class PredictionModels implements org.kie.kogito.prediction.PredictionModels {\n+\n+    public static java.util.Map<java.lang.String, org.kie.pmml.evaluator.api.executor.PMMLRuntime>  pmmlRuntimes = org.kie.kogito.pmml.PMMLKogito.createPMMLRuntimes();\n+    private final static org.kie.kogito.ExecutionIdSupplier execIdSupplier = null;", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "chunk": "diff --git a/kogito-codegen/src/main/resources/class-templates/PMMLApplicationClassDeclTemplate.java b/kogito-codegen/src/main/resources/class-templates/PMMLApplicationClassDeclTemplate.java\nindex c133f1f4fb..77ddcfd7bc 100644\n--- a/kogito-codegen/src/main/resources/class-templates/PMMLApplicationClassDeclTemplate.java\n+++ b/kogito-codegen/src/main/resources/class-templates/PMMLApplicationClassDeclTemplate.java\n\n@@ -1,24 +1,37 @@\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+\n public class PredictionModels implements org.kie.kogito.prediction.PredictionModels {\n \n-    public static java.util.Map<java.lang.String, org.kie.pmml.evaluator.api.executor.PMMLRuntime>  pmmlRuntimes = org.kie.kogito.pmml.PMMLKogito.createPMMLRuntimes();\n-    private final static org.kie.kogito.ExecutionIdSupplier execIdSupplier = null;\n+    public final static java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n+\n+    static {\n+        final java.util.Map<org.kie.api.KieBase, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactories = org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactories();\n+        kieRuntimeFactoryFunction = new java.util.function.Function<java.lang.String, org.kie.api.runtime.KieRuntimeFactory>() {\n+            @Override\n+            public org.kie.api.runtime.KieRuntimeFactory apply(java.lang.String s) {\n+                return kieRuntimeFactories.keySet().stream()\n+                        .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                        .map(kieBase ->  kieRuntimeFactories.get(kieBase))\n+                        .findFirst()\n+                        .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" +s));\n+            }\n+        };\n+    }\n \n     public void init(org.kie.kogito.Application app) {\n     }\n \n     public org.kie.kogito.prediction.PredictionModel getPredictionModel(java.lang.String modelName) {\n-        return new org.kie.kogito.pmml.PmmlPredictionModel(getPMMLRuntime(modelName), modelName, execIdSupplier);\n+        return new org.kie.kogito.pmml.PmmlPredictionModel(getPMMLRuntime(modelName), modelName);\n     }\n \n     private org.kie.pmml.evaluator.api.executor.PMMLRuntime getPMMLRuntime(java.lang.String modelName) {\n-        String sanitizedModelName = org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName(modelName);\n-        return pmmlRuntimes.values().stream()\n-                .filter(pmmlRuntime ->  pmmlRuntime.getModels().stream().anyMatch(kiePMMLModel -> {\n-                    String originalSanitizedModelName = org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName(kiePMMLModel.getName());\n-                    return java.util.Objects.equals(sanitizedModelName, originalSanitizedModelName);\n-                }))\n-                .findFirst()\n-                .orElseThrow(() -> new RuntimeException(String.format(\"Failed to find a PMMLRuntime for %s\", sanitizedModelName)));\n+        return kieRuntimeFactoryFunction.apply(modelName).get(org.kie.pmml.evaluator.api.executor.PMMLRuntime.class);\n     }\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MjIyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r455972226", "bodyText": "As far as I can see this and the implementation of this method are the only real change in the whole file.\nCan you please revert the formatting? I think should increase the limit of characters per line", "author": "danielezonca", "createdAt": "2020-07-16T18:01:39Z", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -390,54 +415,66 @@ private ApplicationGenerator createApplicationGenerator(AppPaths appPaths, Combi\n \n         GeneratorContext context = buildContext(appPaths, combinedIndexBuildItem.getIndex());\n \n-        ApplicationGenerator appGen = new ApplicationGenerator(appPackageName, new File(appPaths.getFirstProjectPath().toFile(), \"target\"))\n+        ApplicationGenerator appGen = new ApplicationGenerator(appPackageName,\n+                                                               new File(appPaths.getFirstProjectPath().toFile(),\n+                                                                        \"target\"))\n                 .withDependencyInjection(new CDIDependencyInjectionAnnotator())\n                 .withAddons(addonsConfig)\n                 .withGeneratorContext(context);\n \n         addProcessGenerator(appPaths, addonsConfig, appGen);\n         addRuleGenerator(appPaths, appGen, addonsConfig);\n+        addPredictionGenerator(appPaths, appGen, addonsConfig);", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e297e2e096ea77cd7b93abe5f145dc4aec66aaf", "chunk": "diff --git a/kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java b/kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java\nindex 660e8b9a8d..0cc20f6b80 100644\n--- a/kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java\n+++ b/kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java\n\n@@ -452,8 +440,7 @@ public class KogitoAssetsProcessor {\n         }\n \n         return KieModuleModelImpl.fromXML(\n-                \"<kmodule xmlns=\\\"http://www.drools.org/xsd/kmodule\\\" xmlns:xsi=\\\"http://www.w3\" +\n-                        \".org/2001/XMLSchema-instance\\\"/>\");\n+                \"<kmodule xmlns=\\\"http://www.drools.org/xsd/kmodule\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"/>\");\n     }\n \n     private void addProcessGenerator(AppPaths appPaths, AddonsConfig addonsConfig, ApplicationGenerator appGen) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzNzIwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r456337201", "bodyText": "Please remove one space before \"DecisionConfig\".", "author": "jiripetrlik", "createdAt": "2020-07-17T09:43:28Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/StaticConfig.java", "diffHunk": "@@ -24,20 +25,23 @@\n     private final Addons addons;\n     private final ProcessConfig processConfig;\n     private final RuleConfig ruleConfig;\n+    private final PredictionConfig predictionConfig;\n     private final DecisionConfig decisionConfig;\n \n-    public StaticConfig(Addons addons, ProcessConfig processConfig, RuleConfig ruleConfig, DecisionConfig decisionConfig) {\n+    public StaticConfig(Addons addons, ProcessConfig processConfig, RuleConfig ruleConfig,  DecisionConfig decisionConfig, PredictionConfig predictionConfig) {", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/StaticConfig.java b/api/kogito-api/src/main/java/org/kie/kogito/StaticConfig.java\nindex fe328845c8..f092c8e810 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/StaticConfig.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/StaticConfig.java\n\n@@ -28,7 +28,7 @@ public class StaticConfig implements Config {\n     private final PredictionConfig predictionConfig;\n     private final DecisionConfig decisionConfig;\n \n-    public StaticConfig(Addons addons, ProcessConfig processConfig, RuleConfig ruleConfig,  DecisionConfig decisionConfig, PredictionConfig predictionConfig) {\n+    public StaticConfig(Addons addons, ProcessConfig processConfig, RuleConfig ruleConfig, DecisionConfig decisionConfig, PredictionConfig predictionConfig) {\n         this.addons = addons;\n         this.processConfig = processConfig;\n         this.ruleConfig = ruleConfig;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzODYwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r456338609", "bodyText": "Remove unnecessary new lines.", "author": "jiripetrlik", "createdAt": "2020-07-17T09:46:14Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/config/DefaultPredictionEventListenerConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.pmml.config;\n+\n+import org.kie.kogito.prediction.PredictionEventListenerConfig;\n+\n+public class DefaultPredictionEventListenerConfig implements PredictionEventListenerConfig {\n+\n+    public DefaultPredictionEventListenerConfig() {\n+    }\n+\n+", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "chunk": "diff --git a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/config/DefaultPredictionEventListenerConfig.java b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/config/DefaultPredictionEventListenerConfig.java\nindex 5e0d585c81..cbdf046a0b 100644\n--- a/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/config/DefaultPredictionEventListenerConfig.java\n+++ b/drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/config/DefaultPredictionEventListenerConfig.java\n\n@@ -21,6 +21,4 @@ public class DefaultPredictionEventListenerConfig implements PredictionEventList\n \n     public DefaultPredictionEventListenerConfig() {\n     }\n-\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzOTk4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r456339987", "bodyText": "Remove new lines.", "author": "jiripetrlik", "createdAt": "2020-07-17T09:48:50Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.prediction;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.ByteArrayResource;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.core.io.internal.InternalResource;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.kogito.codegen.AbstractGenerator;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.ApplicationGenerator;\n+import org.kie.kogito.codegen.ApplicationSection;\n+import org.kie.kogito.codegen.ConfigGenerator;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.KogitoPackageSources;\n+import org.kie.kogito.codegen.decision.DMNRestResourceGenerator;\n+import org.kie.kogito.codegen.decision.DecisionCodegen;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.prediction.config.PredictionConfigGenerator;\n+import org.kie.kogito.codegen.rules.RuleCodegenError;\n+import org.kie.kogito.codegen.rules.config.RuleConfigGenerator;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n+import static org.kie.api.io.ResourceType.determineResourceType;\n+import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+public class PredictionCodegen extends AbstractGenerator {\n+\n+    private static final String operationalDashboardDmnTemplate = \"/grafana-dashboard-template/operational-dashboard\" +\n+            \"-template.json\";\n+    private static final String domainDashboardDmnTemplate = \"/grafana-dashboard-template/blank-dashboard.json\";\n+    public static String STRONGLY_TYPED_CONFIGURATION_KEY = \"kogito.predictions.stronglytyped\";\n+    private final List<PMMLResource> resources;\n+    private final List<GeneratedFile> generatedFiles = new ArrayList<>();\n+    private String packageName;\n+    private String applicationCanonicalName;\n+    private DependencyInjectionAnnotator annotator;\n+    private PredictionContainerGenerator moduleGenerator;\n+    private boolean useMonitoring = false;\n+    private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n+\n+    public PredictionCodegen(List<PMMLResource> resources) {\n+        this.resources = resources;\n+\n+        // set default package name\n+        setPackageName(ApplicationGenerator.DEFAULT_PACKAGE_NAME);\n+        this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n+    }\n+\n+    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+        List<PMMLResource> pmmlResources = new ArrayList<>();\n+        for (Path jarPath : jarPaths) {\n+            List<Resource> resources = new ArrayList<>();\n+            try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+                while (entries.hasMoreElements()) {\n+                    ZipEntry entry = entries.nextElement();\n+                    ResourceType resourceType = determineResourceType(entry.getName());\n+                    if (resourceType == ResourceType.PMML) {\n+                        InternalResource resource =\n+                                new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                        resource.setResourceType(resourceType);\n+                        resource.setSourcePath(entry.getName());\n+                        resources.add(resource);\n+                    }\n+                }\n+            }\n+            pmmlResources.addAll(parsePredictions(jarPath, resources));\n+        }\n+        return ofPredictions(pmmlResources);\n+    }\n+\n+    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n+        List<PMMLResource> resources = new ArrayList<>();\n+        for (Path path : paths) {\n+            Path srcPath = Paths.get(path.toString());\n+            try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+                List<File> files = filesStream.filter(p -> p.toString().endsWith(\".pmml\"))\n+                        .map(Path::toFile)\n+                        .collect(Collectors.toList());\n+                resources.addAll(parseFiles(srcPath, files));\n+            }\n+        }\n+        return ofPredictions(resources);\n+    }\n+\n+    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n+        return ofPredictions(parseFiles(basePath, files));\n+    }\n+\n+    private static PredictionCodegen ofPredictions(List<PMMLResource> resources) {\n+        return new PredictionCodegen(resources);\n+    }\n+\n+    private static List<PMMLResource> parseFiles(Path path, List<File> files) {\n+        return parsePredictions(path, files.stream().map(FileSystemResource::new).collect(toList()));\n+    }\n+\n+    private static List<PMMLResource> parsePredictions(Path path, List<Resource> resources) {\n+        final InternalKnowledgeBase knowledgeBase = new KnowledgeBaseImpl(\"PMML\", null);\n+        KnowledgeBuilderImpl kbuilderImpl = new KnowledgeBuilderImpl(knowledgeBase);\n+        List<PMMLResource> toReturn = new ArrayList<>();\n+        resources.forEach(resource -> {\n+            List<KiePMMLModel> kiePMMLModels = getKiePMMLModelsFromResourceFromPlugin(kbuilderImpl, resource);\n+            String modelPath = resource.getSourcePath();\n+            PMMLResource toAdd = new PMMLResource(kiePMMLModels, path, modelPath);\n+            toReturn.add(toAdd);\n+        });\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        if (!resources.isEmpty()) {\n+            cfg.withPredictionConfig(new PredictionConfigGenerator(packageName));\n+        }\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    public PredictionCodegen withAddons(AddonsConfig addonsConfig) {\n+        this.moduleGenerator.withAddons(addonsConfig);\n+        this.addonsConfig = addonsConfig;\n+        return this;\n+    }\n+\n+\n+    public void setPackageName(String packageName) {\n+        this.packageName = packageName;\n+        this.applicationCanonicalName = packageName + \".Application\";\n+    }\n+\n+    public void setDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+    }\n+\n+    public PredictionContainerGenerator moduleGenerator() {\n+        return moduleGenerator;\n+    }\n+\n+    public List<GeneratedFile> generate() {\n+        if (resources.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n+                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        CompositeKnowledgeBuilder batch = modelBuilder.batch();\n+        for (PMMLResource resource : resources) {\n+            List<KiePMMLModel> kiepmmlModels = resource.getKiePmmlModels();\n+            for (KiePMMLModel model : kiepmmlModels) {\n+                if (model.getName() == null || model.getName().isEmpty()) {\n+                    throw new RuntimeException(\"Model name should not be empty\");\n+                }\n+                if (!(model instanceof HasSourcesMap)) {\n+                    throw new RuntimeException(\"Expecting HasSourcesMap instance, retrieved \" + model.getClass().getName());\n+                }\n+                Map<String, String> sourceMap = ((HasSourcesMap) model).getSourcesMap();\n+                for (Map.Entry<String, String> sourceMapEntry : sourceMap.entrySet()) {\n+                    String path = sourceMapEntry.getKey().replace('.', File.separatorChar) + \".java\";\n+                    storeFile(GeneratedFile.Type.PMML, path, sourceMapEntry.getValue());\n+                }\n+                if (model instanceof KiePMMLDroolsModelWithSources) {\n+                    PackageDescr packageDescr = ((KiePMMLDroolsModelWithSources)model).getPackageDescr();\n+                    batch.add( new DescrResource( packageDescr ), ResourceType.DESCR );\n+                }\n+                if (!(model instanceof KiePMMLFactoryModel)) {\n+                    PMMLRestResourceGenerator resourceGenerator = new PMMLRestResourceGenerator(model, applicationCanonicalName)\n+                            .withDependencyInjection(annotator)\n+                            .withMonitoring(useMonitoring);\n+                    storeFile(GeneratedFile.Type.PMML, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+                }\n+            }\n+        }\n+\n+        generatedFiles.addAll( generateRules(modelBuilder, batch) );\n+\n+        return generatedFiles;\n+    }\n+\n+    private List<GeneratedFile> generateRules(ModelBuilderImpl<KogitoPackageSources> modelBuilder, CompositeKnowledgeBuilder batch) {\n+        try {\n+            batch.build();\n+        } catch (RuntimeException e) {\n+            for (DroolsError error : modelBuilder.getErrors().getErrors()) {\n+                logger.error(error.toString());\n+            }\n+            logger.error(e.getMessage());\n+            throw new RuleCodegenError(e, modelBuilder.getErrors().getErrors());\n+        }\n+\n+        if (modelBuilder.hasErrors()) {\n+            for (DroolsError error : modelBuilder.getErrors().getErrors()) {\n+                logger.error(error.toString());\n+            }\n+            throw new RuleCodegenError(modelBuilder.getErrors().getErrors());\n+        }\n+\n+        return generateModels( modelBuilder ).stream().map(f -> new org.kie.kogito.codegen.GeneratedFile(\n+                        org.kie.kogito.codegen.GeneratedFile.Type.RULE,\n+                        f.getPath(), f.getData())).collect(toList());\n+    }\n+\n+    private List<org.drools.modelcompiler.builder.GeneratedFile> generateModels( ModelBuilderImpl<KogitoPackageSources> modelBuilder) {\n+        List<org.drools.modelcompiler.builder.GeneratedFile> toReturn = new ArrayList<>();\n+        for (KogitoPackageSources pkgSources : modelBuilder.getPackageSources()) {\n+\n+            pkgSources.collectGeneratedFiles( toReturn );\n+            toReturn.add(getRuleMapperClass(pkgSources));\n+            org.drools.modelcompiler.builder.GeneratedFile reflectConfigSource = pkgSources.getReflectConfigSource();\n+            if (reflectConfigSource != null) {\n+                toReturn.add(new org.drools.modelcompiler.builder.GeneratedFile( org.drools.modelcompiler.builder.GeneratedFile.Type.RULE, \"../../classes/\" + reflectConfigSource.getPath(), new String(reflectConfigSource.getData(), StandardCharsets.UTF_8)));\n+            }\n+\n+        }\n+        return toReturn;\n+    }\n+\n+    private org.drools.modelcompiler.builder.GeneratedFile getRuleMapperClass(KogitoPackageSources pkgSources) {\n+        final String rulesFileName = pkgSources.getRulesFileName();\n+        final String fullRuleName =\n+                pkgSources.getModelsByUnit().values().stream().filter(i -> i.endsWith(\".\" + rulesFileName))\n+                .findFirst().orElseThrow(() -> new RuntimeException(\"Failed to find mapped Rule file \" + rulesFileName));\n+        final String predictionRuleMapperPath =  fullRuleName.substring(0, fullRuleName.lastIndexOf('.')) + File.separator + \"PredictionRuleMapperImpl.java\";\n+        final String predictionRuleMapperSource =\n+                PredictionRuleMapperGenerator.getPredictionRuleMapperSource(fullRuleName);\n+        return new org.drools.modelcompiler.builder.GeneratedFile( org.drools.modelcompiler.builder.GeneratedFile.Type.CLASS, predictionRuleMapperPath, predictionRuleMapperSource);\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+", "originalCommit": "f1ccb91a5a11339e368013e935ce33bd0ca17021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\nindex 55aa450de7..baec709857 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n\n@@ -283,6 +283,4 @@ public class PredictionCodegen extends AbstractGenerator {\n     private void storeFile(GeneratedFile.Type type, String path, String source) {\n         generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n     }\n-\n-\n }\n\\ No newline at end of file\n"}}, {"oid": "c96e9abe1e69c411dcd658a4e95f1e770de8830e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c96e9abe1e69c411dcd658a4e95f1e770de8830e", "message": "[DROOLS-5491] Working PMML and DMN+PMML. Replaced PMMLRuntime propagation with Function kiePMMLRuntimeFactoryFunction", "committedDate": "2020-07-20T12:54:07Z", "type": "commit"}, {"oid": "62241a34b0b8c689ff1b3154b59452515b33aea4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/62241a34b0b8c689ff1b3154b59452515b33aea4", "message": "[DROOLS-5491] Begin springboot integration", "committedDate": "2020-07-21T08:05:14Z", "type": "commit"}, {"oid": "f8ed70a428d7275e5e51d462c86f22c1e07f2411", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f8ed70a428d7275e5e51d462c86f22c1e07f2411", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5491", "committedDate": "2020-07-21T08:15:09Z", "type": "commit"}, {"oid": "1e297e2e096ea77cd7b93abe5f145dc4aec66aaf", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1e297e2e096ea77cd7b93abe5f145dc4aec66aaf", "message": "[DROOLS-5491] Sync with master", "committedDate": "2020-07-21T08:42:56Z", "type": "commit"}, {"oid": "da8de1788693b4bcb169b6358ef9b6cb7f0769f9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/da8de1788693b4bcb169b6358ef9b6cb7f0769f9", "message": "[DROOLS-5491] Fixing pom. Fixing package name for PMML rest", "committedDate": "2020-07-22T07:09:17Z", "type": "commit"}, {"oid": "1a3e677fefe523aaeabda5dd95e16105d19b3d83", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1a3e677fefe523aaeabda5dd95e16105d19b3d83", "message": "[DROOLS-5491] Fixed as per PR suggestion", "committedDate": "2020-07-22T14:26:23Z", "type": "commit"}, {"oid": "b1bf4ed760a71f911125981563adc9dcbe151df4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b1bf4ed760a71f911125981563adc9dcbe151df4", "message": "Merge branch 'master' into DROOLS-5491\n\n# Conflicts:\n#\tpom.xml", "committedDate": "2020-07-24T14:22:27Z", "type": "commit"}, {"oid": "7533004e6f490268064da05b0c5973d72b3bf761", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7533004e6f490268064da05b0c5973d72b3bf761", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5491\n\n# Conflicts:\n#\tdrools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java", "committedDate": "2020-07-27T07:31:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MjkzNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460742937", "bodyText": "Can you please create a ticket to improve the test and remove this hack?", "author": "danielezonca", "createdAt": "2020-07-27T08:53:42Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/AbstractCodegenTest.java", "diffHunk": "@@ -137,12 +146,18 @@ protected Application generateCode(Map<TYPE, List<String>> resourcesTypeMap,\n                         .withRuleUnits(hasRuleUnit)\n                         .withDependencyInjection(null);\n \n-\n+        // Hack just to avoid test breaking\n+        Set<TYPE> generatedTypes = new HashSet<>();\n         for (TYPE type :  TYPE.values()) {\n             if (resourcesTypeMap.containsKey(type) && !resourcesTypeMap.get(type).isEmpty()) {\n                 appGen.withGenerator(generatorTypeMap.get(type).apply(resourcesTypeMap.get(type)));\n+                generatedTypes.add(type);\n             }\n         }\n+        // Hack just to avoid test breaking\n+        if (generatedTypes.contains(TYPE.DECISION) && !generatedTypes.contains(TYPE.PREDICTION)) {\n+            appGen.withGenerator(generatorTypeMap.get(TYPE.PREDICTION).apply(Collections.EMPTY_LIST));\n+        }", "originalCommit": "7533004e6f490268064da05b0c5973d72b3bf761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NTk3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460745975", "bodyText": "I don't think iff was a typo and it should be intended as if and only if", "author": "danielezonca", "createdAt": "2020-07-27T08:58:32Z", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateDeclaredTypes.java", "diffHunk": "@@ -64,13 +64,16 @@\n     // codegen backend only if at least one file of the given type exist\n \n     @Parameter(property = \"kogito.codegen.rules\", defaultValue = \"\")\n-    private String generateRules; // defaults to true iff there exist DRL files\n+    private String generateRules; // defaults to true if there exist DRL files\n \n     @Parameter(property = \"kogito.codegen.processes\", defaultValue = \"\")\n-    private String generateProcesses; // defaults to true iff there exist BPMN files\n+    private String generateProcesses; // defaults to true if there exist BPMN files\n \n     @Parameter(property = \"kogito.codegen.decisions\", defaultValue = \"\")\n-    private String generateDecisions; // defaults to true iff there exist DMN files\n+    private String generateDecisions; // defaults to true if there exist DMN files\n+\n+    @Parameter(property = \"kogito.codegen.predictions\", defaultValue = \"\")\n+    private String generatePredictions; // defaults to true if there exist PMML files", "originalCommit": "7533004e6f490268064da05b0c5973d72b3bf761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b5827aaf630317745af1c5afad901edc28f51d1", "chunk": "diff --git a/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateDeclaredTypes.java b/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateDeclaredTypes.java\nindex a3263c8c34..bd4e859c59 100644\n--- a/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateDeclaredTypes.java\n+++ b/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateDeclaredTypes.java\n\n@@ -64,16 +64,16 @@ public class GenerateDeclaredTypes extends AbstractKieMojo {\n     // codegen backend only if at least one file of the given type exist\n \n     @Parameter(property = \"kogito.codegen.rules\", defaultValue = \"\")\n-    private String generateRules; // defaults to true if there exist DRL files\n+    private String generateRules; // defaults to true iff there exist DRL files\n \n     @Parameter(property = \"kogito.codegen.processes\", defaultValue = \"\")\n-    private String generateProcesses; // defaults to true if there exist BPMN files\n+    private String generateProcesses; // defaults to true iff there exist BPMN files\n \n     @Parameter(property = \"kogito.codegen.decisions\", defaultValue = \"\")\n-    private String generateDecisions; // defaults to true if there exist DMN files\n+    private String generateDecisions; // defaults to true iff there exist DMN files\n \n     @Parameter(property = \"kogito.codegen.predictions\", defaultValue = \"\")\n-    private String generatePredictions; // defaults to true if there exist PMML files\n+    private String generatePredictions; // defaults to true iff there exist PMML files\n \n     @Parameter(property = \"kogito.sources.keep\", defaultValue = \"false\")\n     private boolean keepSources;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NjI0NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460746245", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-07-27T08:59:00Z", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -91,13 +93,16 @@\n     // codegen backend only if at least one file of the given type exist\n \n     @Parameter(property = \"kogito.codegen.rules\", defaultValue = \"\")\n-    private String generateRules; // defaults to true iff there exist DRL files\n+    private String generateRules; // defaults to true if there exist DRL files\n \n     @Parameter(property = \"kogito.codegen.processes\", defaultValue = \"\")\n-    private String generateProcesses; // defaults to true iff there exist BPMN files\n+    private String generateProcesses; // defaults to true if there exist BPMN files\n \n     @Parameter(property = \"kogito.codegen.decisions\", defaultValue = \"\")\n-    private String generateDecisions; // defaults to true iff there exist DMN files\n+    private String generateDecisions; // defaults to true if there exist DMN files", "originalCommit": "7533004e6f490268064da05b0c5973d72b3bf761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b5827aaf630317745af1c5afad901edc28f51d1", "chunk": "diff --git a/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java b/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java\nindex f87ed560d7..ed5556fef5 100644\n--- a/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java\n+++ b/kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java\n\n@@ -93,16 +92,16 @@ public class GenerateModelMojo extends AbstractKieMojo {\n     // codegen backend only if at least one file of the given type exist\n \n     @Parameter(property = \"kogito.codegen.rules\", defaultValue = \"\")\n-    private String generateRules; // defaults to true if there exist DRL files\n+    private String generateRules; // defaults to true iff there exist DRL files\n \n     @Parameter(property = \"kogito.codegen.processes\", defaultValue = \"\")\n-    private String generateProcesses; // defaults to true if there exist BPMN files\n+    private String generateProcesses; // defaults to true iff there exist BPMN files\n \n     @Parameter(property = \"kogito.codegen.decisions\", defaultValue = \"\")\n-    private String generateDecisions; // defaults to true if there exist DMN files\n+    private String generateDecisions; // defaults to true iff there exist DMN files\n \n     @Parameter(property = \"kogito.codegen.predictions\", defaultValue = \"\")\n-    private String generatePredictions; // defaults to true if there exist PMML files\n+    private String generatePredictions; // defaults to true iff there exist PMML files\n \n     /**\n      * Partial generation can be used when reprocessing a pre-compiled project\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODI4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460748288", "bodyText": "What is the reason of this change?", "author": "danielezonca", "createdAt": "2020-07-27T09:02:19Z", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/util/MojoUtil.java", "diffHunk": "@@ -52,14 +53,8 @@\n \n         mavenProject.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\", \"runtime\")));\n         for (final Artifact artifact : mavenProject.getArtifacts()) {\n-            final File file = artifact.getFile();\n-            if (file != null && file.isFile()) {\n-                urls.add(file.toURI().toURL());\n-                final KieModuleModel depModel = getDependencyKieModel(file);\n-                if (kmoduleDeps != null && depModel != null) {\n-                    final ReleaseId releaseId = new ReleaseIdImpl(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());\n-                    kmoduleDeps.add(new ZipKieModule(releaseId, depModel, file));\n-                }\n+            if (artifact.getType().equals(\"jar\")) {\n+                populateURLsFromJarArtifact(urls, artifact, kmoduleDeps);", "originalCommit": "7533004e6f490268064da05b0c5973d72b3bf761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxOTkxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r460919917", "bodyText": "If you look the original code - and the invoked method - they both expected a file to be a \"jar\" file, which is not verified anywhere. An artifact may contain a \"pom\" file, and in such situation the snippet:\nprivate static KieModuleModel getDependencyKieModel(final File jar) throws IOException {\n         ZipFile zipFile = new ZipFile(jar)\nthrows an Excpetion.\nSimilar modification has been proposed inside Drools too.", "author": "gitgabrio", "createdAt": "2020-07-27T14:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODI4OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b26e5d0be33f129725b200e8266a6f88a53327bd", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b26e5d0be33f129725b200e8266a6f88a53327bd", "message": "[DROOLS-5491] Fixed as per PR suggestions", "committedDate": "2020-07-27T10:53:54Z", "type": "commit"}, {"oid": "9115d30fd35603677160b46eaf334151ad67572b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9115d30fd35603677160b46eaf334151ad67572b", "message": "[DROOLS-5491] Fixed as per PR suggestions", "committedDate": "2020-07-27T10:58:49Z", "type": "commit"}, {"oid": "0aa3425618c753225f55bd277bd3a8cf25619776", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0aa3425618c753225f55bd277bd3a8cf25619776", "message": "[DROOLS-5491] Fixed as per SONAR suggestions", "committedDate": "2020-07-27T13:29:59Z", "type": "commit"}, {"oid": "1b5827aaf630317745af1c5afad901edc28f51d1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1b5827aaf630317745af1c5afad901edc28f51d1", "message": "[DROOLS-5491] Fixed as per PR suggestions", "committedDate": "2020-07-27T14:09:22Z", "type": "commit"}, {"oid": "c83366fefd777941968cde457ee9c023c3460df2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c83366fefd777941968cde457ee9c023c3460df2", "message": "[DROOLS-5491] Fixed as per PR reviews. Minor refactoring", "committedDate": "2020-07-28T08:43:04Z", "type": "commit"}, {"oid": "a81e16d834b07fef955e1c2c5ba238b6bce0df3d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a81e16d834b07fef955e1c2c5ba238b6bce0df3d", "message": "[DROOLS-5491] Extend test coverage", "committedDate": "2020-07-28T11:43:36Z", "type": "commit"}, {"oid": "3d363b92b23cd95efe1ff5b5057cb6a63aa99772", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3d363b92b23cd95efe1ff5b5057cb6a63aa99772", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5491", "committedDate": "2020-07-28T12:41:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMDUzMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r483630533", "bodyText": "@gitgabrio @danielezonca I have stumbled upon this when trying to upgrade kogito to the latest snapshot in optaplanner.\nDoes it mean that if I declare a dependency on org.kie.kogito:drools-core, which depends on drools-core-static, I have to declare also a runtime dependency on org.kie:kie-pmml-evaluator-core (or rather org.kie.kogito:kogito-pmml)?", "author": "rsynek", "createdAt": "2020-09-04T13:54:35Z", "path": "drools/drools-core-static/src/main/java/org/drools/statics/StaticServiceRegistry.java", "diffHunk": "@@ -55,11 +57,15 @@ private void wireServices() {\n         serviceMap.put(org.kie.kogito.rules.DataSource.Factory.class, SimpleInstanceCreator.instance(\"org.kie.kogito.rules.units.impl.DataSourceFactoryImpl\"));\n         serviceMap.put(org.kie.internal.ruleunit.RuleUnitComponentFactory.class, SimpleInstanceCreator.instance(\"org.kie.kogito.rules.units.impl.RuleUnitComponentFactoryImpl\"));\n         serviceMap.put(KieAssemblers.class, new StaticKieAssemblers());\n+        serviceMap.put(KieRuntimes.class, SimpleInstanceCreator.instance(\"org.kie.internal.services.KieRuntimesImpl\"));\n+\n \n         registerService(\"org.drools.compiler.kie.builder.impl.InternalKieModuleProvider\", \"org.drools.modelcompiler.CanonicalKieModuleProvider\", true);\n         registerService(\"org.drools.compiler.compiler.DecisionTableProvider\", \"org.drools.decisiontable.DecisionTableProviderImpl\", false);\n \n         constructorMap.put(\"TimerService\", SimpleInstanceCreator.constructor(\"org.kie.kogito.timer.impl.JDKTimerService\"));\n+\n+        registerKieRuntimeService(\"org.kie.pmml.evaluator.api.executor.PMMLRuntime\", \"org.kie.pmml.evaluator.core.service.PMMLRuntimeService\");", "originalCommit": "3d363b92b23cd95efe1ff5b5057cb6a63aa99772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMTIyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/639#discussion_r484701226", "bodyText": "@rsynek\nSee https://issues.redhat.com/browse/KOGITO-3290", "author": "gitgabrio", "createdAt": "2020-09-08T07:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMDUzMw=="}], "type": "inlineReview", "revised_code": null}]}