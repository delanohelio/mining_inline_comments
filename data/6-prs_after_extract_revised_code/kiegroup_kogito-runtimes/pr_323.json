{"pr_number": 323, "pr_title": "KOGITO-893: Use Singleton DataSource in processes+rules", "pr_createdAt": "2020-02-19T16:04:00Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/323", "timeline": [{"oid": "232e29db9e9d747dbb6bbd2def0a97c66a374451", "url": "https://github.com/kiegroup/kogito-runtimes/commit/232e29db9e9d747dbb6bbd2def0a97c66a374451", "message": "KOGITO-893: Use Singleton DataSource in processes+rules", "committedDate": "2020-02-20T15:06:37Z", "type": "commit"}, {"oid": "232e29db9e9d747dbb6bbd2def0a97c66a374451", "url": "https://github.com/kiegroup/kogito-runtimes/commit/232e29db9e9d747dbb6bbd2def0a97c66a374451", "message": "KOGITO-893: Use Singleton DataSource in processes+rules", "committedDate": "2020-02-20T15:06:37Z", "type": "forcePushed"}, {"oid": "26a9b809096bbd1c7cb9f8302e36f2b54e851ebd", "url": "https://github.com/kiegroup/kogito-runtimes/commit/26a9b809096bbd1c7cb9f8302e36f2b54e851ebd", "message": "fix codegen in bpm", "committedDate": "2020-02-20T16:20:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NzkzNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/323#discussion_r382467936", "bodyText": "this did not implement Mappable, but it did provide all of the required methods", "author": "evacchi", "createdAt": "2020-02-21T09:06:18Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/RuleSetNode.java", "diffHunk": "@@ -37,7 +38,8 @@\n /**\n  * Default implementation of a RuleSet node.\n  */\n-public class RuleSetNode extends StateBasedNode implements ContextContainer {\n+public class RuleSetNode extends StateBasedNode implements ContextContainer,\n+                                                           Mappable {", "originalCommit": "26a9b809096bbd1c7cb9f8302e36f2b54e851ebd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2ODE4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/323#discussion_r382468183", "bodyText": "moved the documentation of the mappings, as it was now handled here", "author": "evacchi", "createdAt": "2020-02-21T09:06:53Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/RuleUnitHandler.java", "diffHunk": "@@ -35,6 +35,19 @@\n \n import static com.github.javaparser.StaticJavaParser.parse;\n \n+/*\n+ *\n+ * Input/Output mapping with Rule Units:\n+ *\n+ * | Mapping | Process Variable | Rule Unit field   | Action\n+ * | IN      | scalar           | scalar            | Assignment\n+ * | IN      | scalar           | data source \t    | Add to (i.e. insert into) data source\n+ * | IN      | collection       | data source \t    | Add all contents from data source\n+ * | OUT     | scalar           | scalar \t        | Assignment\n+ * | OUT     | scalar           | data source \t    | get 1 value off the data source\n+ * | OUT     | collection       | data source \t    | Add all contents to the data source\n+ *\n+ */", "originalCommit": "26a9b809096bbd1c7cb9f8302e36f2b54e851ebd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2ODM4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/323#discussion_r382468388", "bodyText": "this code was duplicated in handleDecision+generateRuleUnitDescription", "author": "evacchi", "createdAt": "2020-02-21T09:07:24Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/RuleSetNodeVisitor.java", "diffHunk": "@@ -100,27 +88,10 @@ public void visitNode(String factoryField, Node node, BlockStmt body, VariableSc\n         m.setScope(methodScope);\n         body.addStatement(m);\n \n-        for (Entry<String, String> entry : ruleSetNode.getInMappings().entrySet()) {\n-            addFactoryMethodWithArgs(body, callTargetName, \"inMapping\", new StringLiteralExpr(entry.getKey()), new StringLiteralExpr(entry.getValue()));\n-        }\n-        for (Entry<String, String> entry : ruleSetNode.getOutMappings().entrySet()) {\n-            addFactoryMethodWithArgs(body, callTargetName, \"outMapping\", new StringLiteralExpr(entry.getKey()), new StringLiteralExpr(entry.getValue()));\n-        }\n-\n         visitMetaData(ruleSetNode.getMetaData(), body, callTargetName);\n \n         addFactoryMethodWithArgs(body, callTargetName, \"done\");\n \n-        if (ruleType.isRuleUnit()) {\n-            if (ruleSetNode.getInMappings().isEmpty()) {\n-                GeneratedRuleUnitDescription generatedRuleUnitDescription = new GeneratedRuleUnitDescription(ruleType.getName(), contextClassLoader);\n-                for (Variable v : variableScope.getVariables()) {\n-                    generatedRuleUnitDescription.putDatasourceVar(v.getName(), DataStore.class.getCanonicalName(), v.getType().getStringType());\n-                }\n-                RuleUnitComponentFactoryImpl impl = (RuleUnitComponentFactoryImpl) RuleUnitComponentFactory.get();\n-                impl.registerRuleUnitDescription(generatedRuleUnitDescription);\n-            }\n-        }", "originalCommit": "26a9b809096bbd1c7cb9f8302e36f2b54e851ebd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2ODYyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/323#discussion_r382468625", "bodyText": "renamed as it now takes any Mappable node", "author": "evacchi", "createdAt": "2020-02-21T09:07:56Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractVisitor.java", "diffHunk": "@@ -153,8 +154,7 @@ protected void addWorkItemParameters(Work work, BlockStmt body, String variableN\n         }\n     }\n \n-    protected void addWorkItemMappings(WorkItemNode workItemNode, BlockStmt body, String variableName) {\n-\n+    protected void addNodeMappings(Mappable workItemNode, BlockStmt body, String variableName) {", "originalCommit": "26a9b809096bbd1c7cb9f8302e36f2b54e851ebd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e259f682fbaee67191126af0ae7c14970fb2cc55", "chunk": "diff --git a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractVisitor.java b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractVisitor.java\nindex bdcf3f5e1a..8148c09d4a 100644\n--- a/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractVisitor.java\n+++ b/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractVisitor.java\n\n@@ -154,11 +154,11 @@ public abstract class AbstractVisitor {\n         }\n     }\n \n-    protected void addNodeMappings(Mappable workItemNode, BlockStmt body, String variableName) {\n-        for (Entry<String, String> entry : workItemNode.getInMappings().entrySet()) {\n+    protected void addNodeMappings(Mappable node, BlockStmt body, String variableName) {\n+        for (Entry<String, String> entry : node.getInMappings().entrySet()) {\n             addFactoryMethodWithArgs(body, variableName, \"inMapping\", new StringLiteralExpr(entry.getKey()), new StringLiteralExpr(entry.getValue()));\n         }\n-        for (Entry<String, String> entry : workItemNode.getOutMappings().entrySet()) {\n+        for (Entry<String, String> entry : node.getOutMappings().entrySet()) {\n             addFactoryMethodWithArgs(body, variableName, \"outMapping\", new StringLiteralExpr(entry.getKey()), new StringLiteralExpr(entry.getValue()));\n         }\n     }\n"}}, {"oid": "e259f682fbaee67191126af0ae7c14970fb2cc55", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e259f682fbaee67191126af0ae7c14970fb2cc55", "message": "rename var", "committedDate": "2020-02-21T09:09:07Z", "type": "commit"}, {"oid": "95364fbb48442e4c2702a3f1057f909fb870bf45", "url": "https://github.com/kiegroup/kogito-runtimes/commit/95364fbb48442e4c2702a3f1057f909fb870bf45", "message": "no need to clear then set var: just re-set", "committedDate": "2020-02-25T07:44:33Z", "type": "commit"}]}