{"pr_number": 895, "pr_title": "FAI-216: move DMN domain metrics generation inside DecisionModels", "pr_createdAt": "2020-11-16T14:18:08Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/895", "timeline": [{"oid": "88112be66d5199faadcf3dfa184c9a1bbc449777", "url": "https://github.com/kiegroup/kogito-runtimes/commit/88112be66d5199faadcf3dfa184c9a1bbc449777", "message": "FAI-216: move domain metrics generation in MonitoringDecisionModel", "committedDate": "2020-11-13T15:40:45Z", "type": "commit"}, {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "url": "https://github.com/kiegroup/kogito-runtimes/commit/473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "message": "FAI-216: add MonitoringDecisionModelTest", "committedDate": "2020-11-16T14:00:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NjQ2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524386466", "bodyText": "Just a side comment: what about MonitoredDecisionModel?", "author": "r00ta", "createdAt": "2020-11-16T16:11:34Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {", "originalCommit": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMjU4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525012584", "bodyText": "Good idea! I changed the name \ud83d\udc4d", "author": "kostola", "createdAt": "2020-11-17T09:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NjQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ce3b6f720cc85c7635bb981b66a2eb34a576761d", "chunk": "diff --git a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\nsimilarity index 62%\nrename from addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java\nrename to addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\nindex 5d0bf06051..33639ac3c5 100644\n--- a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java\n+++ b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\n\n@@ -25,40 +25,44 @@ import org.kie.dmn.api.core.FEELPropertyAccessible;\n import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n \n-public class MonitoringDecisionModel implements DecisionModel {\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.monitoring.decision.MonitoredDecisionModel</code>\n+ * for code generation plugins to inject this class.\n+ */\n+public class MonitoredDecisionModel implements DecisionModel {\n \n-    private final DecisionModel wrapped;\n+    private final DecisionModel originalModel;\n \n-    public MonitoringDecisionModel(DecisionModel wrapped) {\n-        this.wrapped = wrapped;\n+    public MonitoredDecisionModel(DecisionModel originalModel) {\n+        this.originalModel = originalModel;\n     }\n \n     @Override\n     public DMNContext newContext(Map<String, Object> inputSet) {\n-        return wrapped.newContext(inputSet);\n+        return originalModel.newContext(inputSet);\n     }\n \n     @Override\n     public DMNContext newContext(FEELPropertyAccessible inputSet) {\n-        return wrapped.newContext(inputSet);\n+        return originalModel.newContext(inputSet);\n     }\n \n     @Override\n     public DMNResult evaluateAll(DMNContext context) {\n-        DMNResult result = wrapped.evaluateAll(context);\n-        DMNResultMetricsBuilder.generateMetrics(result, wrapped.getDMNModel().getName());\n+        DMNResult result = originalModel.evaluateAll(context);\n+        DMNResultMetricsBuilder.generateMetrics(result, originalModel.getDMNModel().getName());\n         return result;\n     }\n \n     @Override\n     public DMNResult evaluateDecisionService(DMNContext context, String decisionServiceName) {\n-        DMNResult result = wrapped.evaluateDecisionService(context, decisionServiceName);\n-        DMNResultMetricsBuilder.generateMetrics(result, wrapped.getDMNModel().getName());\n+        DMNResult result = originalModel.evaluateDecisionService(context, decisionServiceName);\n+        DMNResultMetricsBuilder.generateMetrics(result, originalModel.getDMNModel().getName());\n         return result;\n     }\n \n     @Override\n     public DMNModel getDMNModel() {\n-        return wrapped.getDMNModel();\n+        return originalModel.getDMNModel();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524387480", "bodyText": "Are both overloads needed?", "author": "r00ta", "createdAt": "2020-11-16T16:13:00Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "originalCommit": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxNTg2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525015864", "bodyText": "Well..now we're only using the new one (with org.kie.dmn.api.core.DMNResult parameter) but I kept the previous one because it was quick in case we may need it again in the future. Should I remove it?", "author": "kostola", "createdAt": "2020-11-17T09:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0MDEwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525040108", "bodyText": "For me we should remove it \ud83d\udc4d", "author": "r00ta", "createdAt": "2020-11-17T10:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwOTg2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525909862", "bodyText": "My only concern is about backward compatibility. @danielezonca wdyt?", "author": "kostola", "createdAt": "2020-11-18T08:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAyOTQ3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r526029473", "bodyText": "I think it is safe to remove, it is not a public API and the old usages is codegenerated so it should be automatically \"migrated\" when they user will compile with the new version", "author": "danielezonca", "createdAt": "2020-11-18T11:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MTEwMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r526391103", "bodyText": "Yep, Daniele is right \ud83d\udc4d", "author": "r00ta", "createdAt": "2020-11-18T20:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MDc4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r526690783", "bodyText": "Removed \ud83d\udc4d", "author": "kostola", "createdAt": "2020-11-19T08:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "09486a24913f9ed2a85ae6fd8ac3841173fc8ece", "chunk": "diff --git a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java\nindex c73b3d1871..a98ebe9b30 100644\n--- a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java\n+++ b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java\n\n@@ -68,16 +68,8 @@ public class DMNResultMetricsBuilder {\n         return handlers;\n     }\n \n-    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n-        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n-    }\n-\n-    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n-        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n-    }\n-\n-    private static <T> void generateMetrics(T dmnResult, String endpointName, Function<T, List<DMNDecisionResult>> getDecisionResults) {\n-        Optional<List<DMNDecisionResult>> optDecisionResults = Optional.ofNullable(dmnResult).map(getDecisionResults);\n+    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n+        Optional<List<DMNDecisionResult>> optDecisionResults = Optional.ofNullable(dmnResult).map(DMNResult::getDecisionResults);\n \n         if (optDecisionResults.isPresent()) {\n             for (DMNDecisionResult decision : optDecisionResults.get()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4OTU5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524389597", "bodyText": "Just a side comment: what about originalModel or simply model?", "author": "r00ta", "createdAt": "2020-11-16T16:15:34Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {\n+\n+    private final DecisionModel wrapped;\n+\n+    public MonitoringDecisionModel(DecisionModel wrapped) {\n+        this.wrapped = wrapped;", "originalCommit": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMjgxMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525012812", "bodyText": "Good idea as well...went with originalModel", "author": "kostola", "createdAt": "2020-11-17T09:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4OTU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ce3b6f720cc85c7635bb981b66a2eb34a576761d", "chunk": "diff --git a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\nsimilarity index 62%\nrename from addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java\nrename to addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\nindex 5d0bf06051..33639ac3c5 100644\n--- a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java\n+++ b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\n\n@@ -25,40 +25,44 @@ import org.kie.dmn.api.core.FEELPropertyAccessible;\n import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n \n-public class MonitoringDecisionModel implements DecisionModel {\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.monitoring.decision.MonitoredDecisionModel</code>\n+ * for code generation plugins to inject this class.\n+ */\n+public class MonitoredDecisionModel implements DecisionModel {\n \n-    private final DecisionModel wrapped;\n+    private final DecisionModel originalModel;\n \n-    public MonitoringDecisionModel(DecisionModel wrapped) {\n-        this.wrapped = wrapped;\n+    public MonitoredDecisionModel(DecisionModel originalModel) {\n+        this.originalModel = originalModel;\n     }\n \n     @Override\n     public DMNContext newContext(Map<String, Object> inputSet) {\n-        return wrapped.newContext(inputSet);\n+        return originalModel.newContext(inputSet);\n     }\n \n     @Override\n     public DMNContext newContext(FEELPropertyAccessible inputSet) {\n-        return wrapped.newContext(inputSet);\n+        return originalModel.newContext(inputSet);\n     }\n \n     @Override\n     public DMNResult evaluateAll(DMNContext context) {\n-        DMNResult result = wrapped.evaluateAll(context);\n-        DMNResultMetricsBuilder.generateMetrics(result, wrapped.getDMNModel().getName());\n+        DMNResult result = originalModel.evaluateAll(context);\n+        DMNResultMetricsBuilder.generateMetrics(result, originalModel.getDMNModel().getName());\n         return result;\n     }\n \n     @Override\n     public DMNResult evaluateDecisionService(DMNContext context, String decisionServiceName) {\n-        DMNResult result = wrapped.evaluateDecisionService(context, decisionServiceName);\n-        DMNResultMetricsBuilder.generateMetrics(result, wrapped.getDMNModel().getName());\n+        DMNResult result = originalModel.evaluateDecisionService(context, decisionServiceName);\n+        DMNResultMetricsBuilder.generateMetrics(result, originalModel.getDMNModel().getName());\n         return result;\n     }\n \n     @Override\n     public DMNModel getDMNModel() {\n-        return wrapped.getDMNModel();\n+        return originalModel.getDMNModel();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODU0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524458541", "bodyText": "In this way you are hiding any possible error (i.e. template changed). What about preserve the optional and then if empty throws an error?", "author": "danielezonca", "createdAt": "2020-11-16T17:47:58Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,14 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class))\n+                    .ifPresent(rs -> rs.getExpression().ifPresent(rsExp ->\n+                            rs.setExpression(newObject(\"org.kie.kogito.monitoring.decision.MonitoringDecisionModel\", rsExp))\n+                    ));", "originalCommit": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMzU2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525013564", "bodyText": "You're right. I originally used ifPresentOrElse but it's a Java 9+ API and we must stick to Java 8 for kogito-runtimes.\nI changed now anyway to throw an exception if the template is changed. \ud83d\udc4d", "author": "kostola", "createdAt": "2020-11-17T09:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ce3b6f720cc85c7635bb981b66a2eb34a576761d", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\nindex 84dcfde158..04a9241f29 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n\n@@ -74,11 +74,16 @@ public class DecisionContainerGenerator extends AbstractApplicationSection {\n         }\n \n         if (addonsConfig.useMonitoring()) {\n-            typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n-                    .flatMap(md -> md.findFirst(ReturnStmt.class))\n-                    .ifPresent(rs -> rs.getExpression().ifPresent(rsExp ->\n-                            rs.setExpression(newObject(\"org.kie.kogito.monitoring.decision.MonitoringDecisionModel\", rsExp))\n-                    ));\n+            Optional<ReturnStmt> optReturnStmt = typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class));\n+\n+            if (optReturnStmt.isPresent() && optReturnStmt.get().getExpression().isPresent()) {\n+                ReturnStmt returnStmt = optReturnStmt.get();\n+                Expression returnExpr = returnStmt.getExpression().get();\n+                returnStmt.setExpression(newObject(\"org.kie.kogito.monitoring.decision.MonitoredDecisionModel\", returnExpr));\n+            } else {\n+                throw new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n+            }\n         }\n \n         if (addonsConfig.useTracing()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1OTg4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524459882", "bodyText": "Is this working with/without strongly typed extension?", "author": "danielezonca", "createdAt": "2020-11-16T17:50:06Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {", "originalCommit": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMTEwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525911106", "bodyText": "I tested by manually enabling kogito.decisions.stronglytyped=true in kogito-examples/dmn-drools-quarkus-metrics and everything works as expected. Wdyt?", "author": "kostola", "createdAt": "2020-11-18T08:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1OTg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ce3b6f720cc85c7635bb981b66a2eb34a576761d", "chunk": "diff --git a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\nsimilarity index 62%\nrename from addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java\nrename to addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\nindex 5d0bf06051..33639ac3c5 100644\n--- a/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java\n+++ b/addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoredDecisionModel.java\n\n@@ -25,40 +25,44 @@ import org.kie.dmn.api.core.FEELPropertyAccessible;\n import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n \n-public class MonitoringDecisionModel implements DecisionModel {\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.monitoring.decision.MonitoredDecisionModel</code>\n+ * for code generation plugins to inject this class.\n+ */\n+public class MonitoredDecisionModel implements DecisionModel {\n \n-    private final DecisionModel wrapped;\n+    private final DecisionModel originalModel;\n \n-    public MonitoringDecisionModel(DecisionModel wrapped) {\n-        this.wrapped = wrapped;\n+    public MonitoredDecisionModel(DecisionModel originalModel) {\n+        this.originalModel = originalModel;\n     }\n \n     @Override\n     public DMNContext newContext(Map<String, Object> inputSet) {\n-        return wrapped.newContext(inputSet);\n+        return originalModel.newContext(inputSet);\n     }\n \n     @Override\n     public DMNContext newContext(FEELPropertyAccessible inputSet) {\n-        return wrapped.newContext(inputSet);\n+        return originalModel.newContext(inputSet);\n     }\n \n     @Override\n     public DMNResult evaluateAll(DMNContext context) {\n-        DMNResult result = wrapped.evaluateAll(context);\n-        DMNResultMetricsBuilder.generateMetrics(result, wrapped.getDMNModel().getName());\n+        DMNResult result = originalModel.evaluateAll(context);\n+        DMNResultMetricsBuilder.generateMetrics(result, originalModel.getDMNModel().getName());\n         return result;\n     }\n \n     @Override\n     public DMNResult evaluateDecisionService(DMNContext context, String decisionServiceName) {\n-        DMNResult result = wrapped.evaluateDecisionService(context, decisionServiceName);\n-        DMNResultMetricsBuilder.generateMetrics(result, wrapped.getDMNModel().getName());\n+        DMNResult result = originalModel.evaluateDecisionService(context, decisionServiceName);\n+        DMNResultMetricsBuilder.generateMetrics(result, originalModel.getDMNModel().getName());\n         return result;\n     }\n \n     @Override\n     public DMNModel getDMNModel() {\n-        return wrapped.getDMNModel();\n+        return originalModel.getDMNModel();\n     }\n }\n"}}, {"oid": "ce3b6f720cc85c7635bb981b66a2eb34a576761d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ce3b6f720cc85c7635bb981b66a2eb34a576761d", "message": "FAI-216: renamed MonitoringDecisionModel into MonitoredDecisionModel", "committedDate": "2020-11-17T09:19:53Z", "type": "commit"}, {"oid": "09486a24913f9ed2a85ae6fd8ac3841173fc8ece", "url": "https://github.com/kiegroup/kogito-runtimes/commit/09486a24913f9ed2a85ae6fd8ac3841173fc8ece", "message": "FAI-216: clean DMNResultMetricsBuilder", "committedDate": "2020-11-19T08:20:24Z", "type": "commit"}, {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3bd6c33ac74203ef887ebd677b443c371c295744", "message": "FAI-216: Merge branch master", "committedDate": "2020-11-19T08:37:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r527576364", "bodyText": "Please check with Sonar cloud. We should probably check if the value is not null before using it.", "author": "jiripetrlik", "createdAt": "2020-11-20T09:53:45Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,19 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            Optional<ReturnStmt> optReturnStmt = typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class));\n+\n+            if (optReturnStmt.isPresent() && optReturnStmt.get().getExpression().isPresent()) {\n+                ReturnStmt returnStmt = optReturnStmt.get();\n+                Expression returnExpr = returnStmt.getExpression().get();", "originalCommit": "3bd6c33ac74203ef887ebd677b443c371c295744", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3ODMyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r527578327", "bodyText": "I looked more at if. It seems we are in fact checking it. But probably it would be better to check it in a better way to avoid Sonar cloud warning.", "author": "jiripetrlik", "createdAt": "2020-11-20T09:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5NzkzNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r530197934", "bodyText": "I made a change. Let's see if SonarCloud is happy \ud83d\ude09", "author": "kostola", "createdAt": "2020-11-25T08:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyODYxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r530828611", "bodyText": "SonarCloud seems happy now \ud83d\udc4d", "author": "kostola", "createdAt": "2020-11-26T07:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "ad2be57d4e8d753dd23ae3f69dd2bad8d11653f7", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\nindex 04a9241f29..486d2a6b7e 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n\n@@ -69,7 +72,7 @@ public class DecisionContainerGenerator extends AbstractApplicationSection {\n             if (initalizer.isPresent()) {\n                 initalizer.get().asMethodCallExpr().addArgument(isr);\n             } else {\n-                throw new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n+                throw MODIFIED_TEMPLATE_EXCEPTION;\n             }\n         }\n \n"}}, {"oid": "89edd8661d19e85ee24a36096b4d71b6d19803ce", "url": "https://github.com/kiegroup/kogito-runtimes/commit/89edd8661d19e85ee24a36096b4d71b6d19803ce", "message": "FAI-216: add mockito-inline to kogito-build-parent", "committedDate": "2020-11-25T08:38:02Z", "type": "commit"}, {"oid": "ad2be57d4e8d753dd23ae3f69dd2bad8d11653f7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ad2be57d4e8d753dd23ae3f69dd2bad8d11653f7", "message": "FAI-216: try to make SonarCloud happy", "committedDate": "2020-11-25T09:20:24Z", "type": "forcePushed"}, {"oid": "1bec1e7819344ee11531abb264454a1b76838054", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1bec1e7819344ee11531abb264454a1b76838054", "message": "FAI-216: try to make SonarCloud happy", "committedDate": "2020-11-25T20:55:29Z", "type": "commit"}, {"oid": "1bec1e7819344ee11531abb264454a1b76838054", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1bec1e7819344ee11531abb264454a1b76838054", "message": "FAI-216: try to make SonarCloud happy", "committedDate": "2020-11-25T20:55:29Z", "type": "forcePushed"}, {"oid": "8820655a35f7e307544c4b5362264cd200dcef59", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8820655a35f7e307544c4b5362264cd200dcef59", "message": "FAI-216: Merge branch master", "committedDate": "2020-11-25T21:11:03Z", "type": "commit"}, {"oid": "5598b556f7b32a6c95d7ae2f45d5be81848d1eff", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5598b556f7b32a6c95d7ae2f45d5be81848d1eff", "message": "FAI-216: merge branch master", "committedDate": "2020-12-18T09:36:08Z", "type": "commit"}, {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4f997ed9db8afb1f269da775a7f15f2effc1254d", "message": "FAI-216: fix comment", "committedDate": "2020-12-18T09:37:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDE0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714141", "bodyText": "@danielezonca here", "author": "kostola", "createdAt": "2020-12-18T09:39:22Z", "path": "addons/monitoring/monitoring-core/monitoring-core-common/src/main/java/org/kie/kogito/monitoring/core/common/decision/MonitoredDecisionModelTransformer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.core.common.decision;\n+\n+import java.util.function.Function;\n+\n+import org.kie.kogito.decision.DecisionModel;\n+\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.monitoring.core.common.decision.MonitoredDecisionModelTransformer</code>\n+ * for code generation plugins to inject this class.\n+ */\n+public class MonitoredDecisionModelTransformer implements Function<DecisionModel, DecisionModel> {\n+\n+    @Override\n+    public DecisionModel apply(DecisionModel decisionModel) {\n+        return new MonitoredDecisionModel(decisionModel);\n+    }\n+}", "originalCommit": "4f997ed9db8afb1f269da775a7f15f2effc1254d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDY3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714673", "bodyText": "@danielezonca here as well", "author": "kostola", "createdAt": "2020-12-18T09:40:24Z", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/AbstractDecisionModels.java", "diffHunk": "@@ -14,41 +14,49 @@\n  */\n package org.kie.kogito.dmn;\n \n+import java.io.Reader;\n+import java.util.function.Function;\n+\n import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.kogito.Application;\n import org.kie.kogito.ExecutionIdSupplier;\n import org.kie.kogito.decision.DecisionConfig;\n+import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.decision.DecisionModels;\n \n-import java.io.Reader;\n-import java.util.function.Function;\n-\n public abstract class AbstractDecisionModels implements DecisionModels {\n \n     private static final boolean CAN_PLATFORM_CLASSLOAD = org.kie.dmn.feel.util.ClassLoaderUtil.CAN_PLATFORM_CLASSLOAD;\n     private static DMNRuntime dmnRuntime = null;\n     private static ExecutionIdSupplier execIdSupplier = null;\n+    private static Function<DecisionModel, DecisionModel> decisionModelTransformer = null;\n \n     protected static void init(Function<String, KieRuntimeFactory> sKieRuntimeFactoryFunction,\n                                ExecutionIdSupplier executionIdSupplier,\n+                               Function<DecisionModel, DecisionModel> decisionModelTransformerInit,\n                                Reader... readers) {\n         dmnRuntime = DMNKogito.createGenericDMNRuntime(sKieRuntimeFactoryFunction, readers);\n         execIdSupplier = executionIdSupplier;\n+        decisionModelTransformer = decisionModelTransformerInit;\n     }\n \n-    public org.kie.kogito.decision.DecisionModel getDecisionModel(String namespace, String name) {\n-        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);\n+    public DecisionModel getDecisionModel(String namespace, String name) {\n+        DecisionModel model = new DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);\n+        return decisionModelTransformer == null\n+                ? model\n+                : decisionModelTransformer.apply(model);\n     }", "originalCommit": "4f997ed9db8afb1f269da775a7f15f2effc1254d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDk0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714941", "bodyText": "@danielezonca here as well", "author": "kostola", "createdAt": "2020-12-18T09:40:53Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -92,20 +111,32 @@ public CompilationUnit compilationUnit() {\n                         \"Missing init() method\"));\n \n         setupExecIdSupplierVariable(initMethod);\n+        setupDecisionModelTransformerVariable(initMethod);\n \n         for (CollectedResource resource : resources) {\n             MethodCallExpr getResAsStream = getReadResourceMethod(applicationClass, resource);\n             MethodCallExpr isr = new MethodCallExpr(\"readResource\").addArgument(getResAsStream);\n             initMethod.addArgument(isr);\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+\n+        }\n+\n         return compilationUnit;\n     }\n \n     private void setupExecIdSupplierVariable(MethodCallExpr initMethod) {\n         Expression execIdSupplier = addonsConfig.useTracing() ?\n-                newObject(DmnExecutionIdSupplier.class):\n+                newObject(DmnExecutionIdSupplier.class) :\n                 new NullLiteralExpr();\n         initMethod.addArgument(execIdSupplier);\n     }\n-}\n\\ No newline at end of file\n+\n+    private void setupDecisionModelTransformerVariable(MethodCallExpr initMethod) {\n+        Expression decisionModelTransformerExpr = addonsConfig.useMonitoring() ?\n+                newObject(\"org.kie.kogito.monitoring.core.common.decision.MonitoredDecisionModelTransformer\") :\n+                new NullLiteralExpr();\n+        initMethod.addArgument(decisionModelTransformerExpr);\n+    }\n+}", "originalCommit": "4f997ed9db8afb1f269da775a7f15f2effc1254d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\nindex d98c2eea4e..9810982a34 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n\n@@ -119,10 +103,6 @@ public class DecisionContainerGenerator extends AbstractApplicationSection {\n             initMethod.addArgument(isr);\n         }\n \n-        if (addonsConfig.useMonitoring()) {\n-\n-        }\n-\n         return compilationUnit;\n     }\n \n"}}, {"oid": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2bd9ff7bf99195637f8df6709809198c3cbeb4ec", "message": "FAI-216: cleanup", "committedDate": "2020-12-18T09:42:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNDc5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545734792", "bodyText": "You probably want to remove the commented block entirely?", "author": "manstis", "createdAt": "2020-12-18T10:16:35Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -42,6 +42,9 @@\n     private static final String RESOURCE_SPRING = \"/class-templates/spring/SpringDecisionContainerTemplate.java\";\n     private static final String SECTION_CLASS_NAME = \"DecisionModels\";\n \n+//    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION =", "originalCommit": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNzA0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545737042", "bodyText": "Nice catch...forgot about that", "author": "kostola", "createdAt": "2020-12-18T10:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0MTg3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545741875", "bodyText": "Removed \ud83d\udc4d", "author": "kostola", "createdAt": "2020-12-18T10:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNDc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "793207cd5ed211213d641fb05b7af0b12d95aba0", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\nindex 9810982a34..8ed120fbc9 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java\n\n@@ -42,9 +42,6 @@ public class DecisionContainerGenerator extends AbstractApplicationSection {\n     private static final String RESOURCE_SPRING = \"/class-templates/spring/SpringDecisionContainerTemplate.java\";\n     private static final String SECTION_CLASS_NAME = \"DecisionModels\";\n \n-//    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION =\n-//            new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n-\n     private String applicationCanonicalName;\n     private final List<CollectedResource> resources;\n     private AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n"}}, {"oid": "793207cd5ed211213d641fb05b7af0b12d95aba0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/793207cd5ed211213d641fb05b7af0b12d95aba0", "message": "FAI-216: cleanup", "committedDate": "2020-12-18T10:29:08Z", "type": "commit"}]}