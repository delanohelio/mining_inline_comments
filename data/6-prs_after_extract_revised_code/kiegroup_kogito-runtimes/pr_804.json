{"pr_number": 804, "pr_title": "KOGITO-3540 DMN wire DT static analysis to Kogito Codegen", "pr_createdAt": "2020-10-03T08:34:51Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/804", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NDY4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/804#discussion_r499454683", "bodyText": "What about rename the method to something more explicit like loadModelsAndValidate / loadAndValidate / parseModelsAndValidate?", "author": "danielezonca", "createdAt": "2020-10-05T09:16:13Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -102,11 +102,15 @@ public DecisionCodegen(List<CollectedResource> cResources) {\n \n     private void init() {", "originalCommit": "c3dce5303d4c26cfbc1d020e3dbfd5bc65625bc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\nindex 026c4ba886..499bdc60fa 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\n\n@@ -100,7 +100,7 @@ public class DecisionCodegen extends AbstractGenerator {\n         this.decisionContainerGenerator = new DecisionContainerGenerator(applicationCanonicalName, this.cResources);\n     }\n \n-    private void init() {\n+    private void loadModelsAndValidate() {\n         Map<Resource, CollectedResource> r2cr = cResources.stream().collect(Collectors.toMap(CollectedResource::resource, Function.identity()));\n         // First, we perform static validation on directly the XML\n         DecisionValidation.dmnValidateResources(context(), r2cr.keySet());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NzY1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/804#discussion_r499477651", "bodyText": "What about rename it to something like extractMsgPrefix / getMsgPrefix or similar?", "author": "danielezonca", "createdAt": "2020-10-05T09:52:41Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionValidation.java", "diffHunk": "@@ -71,21 +82,21 @@ static void dmnValidateResources(GeneratorContext context, Collection<Resource>\n                                                                                            .map(DecisionValidation::resourceToReader)\n                                                                                            .collect(Collectors.toList())\n                                                                                            .toArray(new Reader[]{}));\n-        logValidationMessages(schemaModelValidations);\n-        List<DMNMessage> errors = schemaModelValidations.stream().filter(m -> m.getLevel() == Level.ERROR).collect(Collectors.toList());\n-        if (!errors.isEmpty()) {\n-            if (validateOption != ValidationOption.IGNORE) {\n-                StringBuilder sb = new StringBuilder(\"DMN Validation schema and model validation contained errors\").append(\"\\n\");\n-                sb.append(\"You may configure \").append(DecisionCodegen.VALIDATION_CONFIGURATION_KEY).append(\"=IGNORE to ignore validation errors\").append(\"\\n\");\n-                sb.append(\"DMN Validation errors:\").append(\"\\n\");\n-                sb.append(errors.stream().map(DMNMessage::getMessage).collect(Collectors.joining(\",\\n\")));\n-                LOG.error(sb.toString());\n-                throw new RuntimeException(sb.toString());\n-            } else {\n-                LOG.warn(\"DMN Validation encountered errors but validation configuration was set to IGNORE, continuing with no blocking error.\");\n-                return;\n+        logValidationMessages(schemaModelValidations, DecisionValidation::validateMsgPrefixer, DMNMessage::getText);\n+        processMessagesHandleErrors(validateOption, schemaModelValidations);\n+    }\n+\n+    private static String validateMsgPrefixer(DMNMessage msg) {", "originalCommit": "c3dce5303d4c26cfbc1d020e3dbfd5bc65625bc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc349ac0ef90978ec8639a2093bd9cb38e460d34", "chunk": "diff --git a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionValidation.java b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionValidation.java\nindex c6a4838151..e2460399d8 100644\n--- a/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionValidation.java\n+++ b/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionValidation.java\n\n@@ -83,7 +83,20 @@ public class DecisionValidation {\n                                                                                            .collect(Collectors.toList())\n                                                                                            .toArray(new Reader[]{}));\n         logValidationMessages(schemaModelValidations, DecisionValidation::validateMsgPrefixer, DMNMessage::getText);\n-        processMessagesHandleErrors(validateOption, schemaModelValidations);\n+        List<DMNMessage> errors = schemaModelValidations.stream().filter(m -> m.getLevel() == Level.ERROR).collect(Collectors.toList());\n+        if (!errors.isEmpty()) {\n+            if (validateOption != ValidationOption.IGNORE) {\n+                StringBuilder sb = new StringBuilder(\"DMN Validation schema and model validation contained errors\").append(\"\\n\");\n+                sb.append(\"You may configure \").append(DecisionCodegen.VALIDATION_CONFIGURATION_KEY).append(\"=IGNORE to ignore validation errors\").append(\"\\n\");\n+                sb.append(\"DMN Validation errors:\").append(\"\\n\");\n+                sb.append(errors.stream().map(DMNMessage::getMessage).collect(Collectors.joining(\",\\n\")));\n+                LOG.error(sb.toString());\n+                throw new RuntimeException(sb.toString());\n+            } else {\n+                LOG.warn(\"DMN Validation encountered errors but validation configuration was set to IGNORE, continuing with no blocking error.\");\n+                return;\n+            }\n+        }\n     }\n \n     private static String validateMsgPrefixer(DMNMessage msg) {\n"}}, {"oid": "cc349ac0ef90978ec8639a2093bd9cb38e460d34", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cc349ac0ef90978ec8639a2093bd9cb38e460d34", "message": "KOGITO-3540 DMN wire DT static analysis to Kogito Codegen", "committedDate": "2020-10-05T11:43:47Z", "type": "commit"}, {"oid": "33db5498115e52ff5ffb569344eca2d4e90febed", "url": "https://github.com/kiegroup/kogito-runtimes/commit/33db5498115e52ff5ffb569344eca2d4e90febed", "message": "better handling of DT errors\n\nwhen codegen/validation is called as part of a non interactive build,\nalso DT errors are displayed as part of the exception thrown.", "committedDate": "2020-10-05T11:43:48Z", "type": "commit"}, {"oid": "01d51e34da40a9ebc8de42369cdc6564f970a511", "url": "https://github.com/kiegroup/kogito-runtimes/commit/01d51e34da40a9ebc8de42369cdc6564f970a511", "message": "improve sonarcloud score", "committedDate": "2020-10-05T11:43:48Z", "type": "commit"}, {"oid": "d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "message": "implement codereview feedback", "committedDate": "2020-10-05T11:43:49Z", "type": "commit"}, {"oid": "d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "message": "implement codereview feedback", "committedDate": "2020-10-05T11:43:49Z", "type": "forcePushed"}]}