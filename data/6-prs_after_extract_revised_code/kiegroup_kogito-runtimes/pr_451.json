{"pr_number": 451, "pr_title": "KOGITO-1632 - Event descriptions for given process instance", "pr_createdAt": "2020-04-17T07:45:10Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/451", "timeline": [{"oid": "23121ee46f24ba1a1f71c23a04481d32eff8be57", "url": "https://github.com/kiegroup/kogito-runtimes/commit/23121ee46f24ba1a1f71c23a04481d32eff8be57", "message": "KOGITO-1632 - Event descriptions for given process instance", "committedDate": "2020-04-17T08:44:36Z", "type": "forcePushed"}, {"oid": "2646f4c79d8fdd642dcc57a8a578875dd537789b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2646f4c79d8fdd642dcc57a8a578875dd537789b", "message": "KOGITO-1632 - Event descriptions for given process instance", "committedDate": "2020-04-17T09:52:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MzcxMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410183710", "bodyText": "@mswiderski could you use a logger or remove these?", "author": "cristianonicolai", "createdAt": "2020-04-17T12:17:19Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -1006,6 +1176,10 @@ public void testTimerBoundaryEventDuration() throws Exception {\n         ksession.addEventListener(countDownListener);\n         ProcessInstance processInstance = ksession.startProcess(\"TimerBoundaryEvent\");\n         assertProcessInstanceActive(processInstance);\n+        \n+        System.out.println(\"Events  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());", "originalCommit": "2646f4c79d8fdd642dcc57a8a578875dd537789b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NTc0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410185749", "bodyText": "leftover will remove", "author": "mswiderski", "createdAt": "2020-04-17T12:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MzcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "7ffcf440e0e258d489fd49799669468a80accaa6", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\nindex 6e17ab2601..174f020fa6 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\n\n@@ -1177,8 +1177,19 @@ public class IntermediateEventTest extends JbpmBpmn2TestCase {\n         ProcessInstance processInstance = ksession.startProcess(\"TimerBoundaryEvent\");\n         assertProcessInstanceActive(processInstance);\n         \n-        System.out.println(\"Events  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());\n-        \n+        Set<EventDescription<?>> eventDescriptions = processInstance.getEventDescriptions();\n+        assertThat(eventDescriptions)\n+            .hasSize(2)\n+            .extracting(\"event\").contains(\"workItemCompleted\", \"timerTriggered\");\n+        assertThat(eventDescriptions)\n+            .extracting(\"eventType\").contains(\"workItem\", \"timer\");\n+        assertThat(eventDescriptions)            \n+            .extracting(\"processInstanceId\").contains(processInstance.getId());\n+        assertThat(eventDescriptions)\n+            .filteredOn(\"eventType\", \"timer\")\n+            .hasSize(1)\n+            .extracting(\"properties\", Map.class)\n+            .anyMatch(m -> m.containsKey(\"TimerID\") && m.containsKey(\"Period\"));\n         \n         countDownListener.waitTillCompleted();\n         ksession = restoreSession(ksession, true);\n"}}, {"oid": "7ffcf440e0e258d489fd49799669468a80accaa6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7ffcf440e0e258d489fd49799669468a80accaa6", "message": "KOGITO-1632 - Event descriptions for given process instance", "committedDate": "2020-04-17T12:44:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzEyMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410193120", "bodyText": "this is not really used, so not sure if you want to keep it.", "author": "cristianonicolai", "createdAt": "2020-04-17T12:36:48Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/GroupedNamedDataType.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class GroupedNamedDataType {\n+\n+    private final Map<String, Set<NamedDataType>> groupedDataTypes = new HashMap<>();\n+\n+    public void add(String name, NamedDataType dataType) {", "originalCommit": "2646f4c79d8fdd642dcc57a8a578875dd537789b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIxMzM0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410213342", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-04-17T13:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/process/GroupedNamedDataType.java b/api/kogito-api/src/main/java/org/kie/kogito/process/GroupedNamedDataType.java\nindex 1c11bd8e82..5b086a75b0 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/process/GroupedNamedDataType.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/process/GroupedNamedDataType.java\n\n@@ -26,12 +26,6 @@ public class GroupedNamedDataType {\n \n     private final Map<String, Set<NamedDataType>> groupedDataTypes = new HashMap<>();\n \n-    public void add(String name, NamedDataType dataType) {\n-        Set<NamedDataType> dataTypes = this.groupedDataTypes.getOrDefault(name, new LinkedHashSet<>());\n-        dataTypes.add(dataType);\n-        this.groupedDataTypes.put(name, dataTypes);\n-    }\n-\n     public void add(String name, List<NamedDataType> types) {\n         Set<NamedDataType> dataTypes = this.groupedDataTypes.getOrDefault(name, new LinkedHashSet<>());\n         dataTypes.addAll(types);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzgwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410193809", "bodyText": "could you add some test to cover these two methods?", "author": "cristianonicolai", "createdAt": "2020-04-17T12:38:10Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/EventNodeInstance.java", "diffHunk": "@@ -285,4 +291,20 @@ private String resolveVariable(String s) {\n \tprivate void callSignal(String type, Object event) {\n \t    signalEvent(type, event);\n \t}\n+\n+    @Override\n+    public String[] getEventTypes() {\n+        return new String[] {getEventType()};", "originalCommit": "2646f4c79d8fdd642dcc57a8a578875dd537789b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIxNjA5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410216093", "bodyText": "not sure what you want to test.. this was just exposing already defined method to fit the interface.", "author": "mswiderski", "createdAt": "2020-04-17T13:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzgwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5ODUzNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410198535", "bodyText": "Im wondering here in case we dont actually have a long on ids[1], should i fail completely or handle it and continue to look into the next nodes?", "author": "cristianonicolai", "createdAt": "2020-04-17T12:47:09Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java", "diffHunk": "@@ -483,4 +483,28 @@ protected void mapDynamicOutputData(Map<String, Object> results) {\n             }\n         }\n     }\n+    \n+    public Map<String, String> extractTimerEventInformation() {\n+        if (getTimerInstances() != null) {\n+            for (String id : getTimerInstances()) {\n+                String[] ids = id.split(\"_\");\n+                \n+                for (Map.Entry<Timer, DroolsAction> entry : getEventBasedNode().getTimers().entrySet()) {\n+                    if (entry.getKey().getId() == Long.valueOf(ids[1])) {", "originalCommit": "7ffcf440e0e258d489fd49799669468a80accaa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwMDE2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410200166", "bodyText": "it should fail completely as this means the id of the timer is not valid", "author": "mswiderski", "createdAt": "2020-04-17T12:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5ODUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java\nindex e97182534e..66dd683186 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java\n\n@@ -489,13 +489,13 @@ public abstract class StateBasedNodeInstance extends ExtendedNodeInstanceImpl im\n             for (String id : getTimerInstances()) {\n                 String[] ids = id.split(\"_\");\n                 \n-                for (Map.Entry<Timer, DroolsAction> entry : getEventBasedNode().getTimers().entrySet()) {\n-                    if (entry.getKey().getId() == Long.valueOf(ids[1])) {\n+                for (Timer entry : getEventBasedNode().getTimers().keySet()) {\n+                    if (entry.getId() == Long.valueOf(ids[1])) {\n                         Map<String, String> properties = new HashMap<>();\n                         properties.put(\"TimerID\", id);\n-                        properties.put(\"Delay\", entry.getKey().getDelay());\n-                        properties.put(\"Period\", entry.getKey().getPeriod());\n-                        properties.put(\"Date\", entry.getKey().getDate()); \n+                        properties.put(\"Delay\", entry.getDelay());\n+                        properties.put(\"Period\", entry.getPeriod());\n+                        properties.put(\"Date\", entry.getDate()); \n                         \n                         return properties;\n                     }\n"}}, {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "url": "https://github.com/kiegroup/kogito-runtimes/commit/48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "message": "KOGITO-1632 - Event descriptions for given process instance", "committedDate": "2020-04-17T13:12:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3NTE3Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411575172", "bodyText": "Unnecessary.", "author": "MarianMacik", "createdAt": "2020-04-20T17:52:35Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/NamedDataType.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process;\n+\n+\n+public class NamedDataType {\n+\n+    private final String name;\n+\n+    private final Object dataType;\n+\n+    public NamedDataType(String name, Object dataType) {\n+        super();", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDI1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411654250", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-04-20T20:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3NTE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/process/NamedDataType.java b/api/kogito-api/src/main/java/org/kie/kogito/process/NamedDataType.java\nindex b37a9e7a02..bc6a5f1836 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/process/NamedDataType.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/process/NamedDataType.java\n\n@@ -24,7 +24,6 @@ public class NamedDataType {\n     private final Object dataType;\n \n     public NamedDataType(String name, Object dataType) {\n-        super();\n         this.name = name;\n         this.dataType = dataType;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3ODYyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411578628", "bodyText": "Unnecessary blank line.", "author": "MarianMacik", "createdAt": "2020-04-20T17:57:46Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -351,6 +353,14 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n         this.rt.getWorkItemManager().transitionWorkItem(id, transition);\n         removeOnFinish();\n     }\n+    \n+    \n+    @Override\n+    public Set<EventDescription<?>> events() {\n+", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDMwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411654302", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-04-20T20:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3ODYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\nindex d93d4bd391..eb668ea105 100644\n--- a/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java\n\n@@ -357,7 +357,6 @@ public abstract class AbstractProcessInstance<T extends Model> implements Proces\n     \n     @Override\n     public Set<EventDescription<?>> events() {\n-\n         return legacyProcessInstance().getEventDescriptions();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjM0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411582341", "bodyText": "Probably would be good to add what kind of variable is queried.", "author": "MarianMacik", "createdAt": "2020-04-20T18:03:34Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/EventNodeInterface.java", "diffHunk": "@@ -25,5 +25,7 @@\n \tdefault\tboolean acceptsEvent(String type, Object event, Function<String, String> resolver) {\n \t    return acceptsEvent(type, event);\n \t}\n+\t\n+\tString getVariableName();", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDcxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411654711", "bodyText": "not sure what you mean...", "author": "mswiderski", "createdAt": "2020-04-20T20:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1MzY2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411953667", "bodyText": "I didn't get what variableName means basically :) But then found out that it is a kind of the variable used to store the event in?", "author": "MarianMacik", "createdAt": "2020-04-21T07:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1NDY1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411954656", "bodyText": "yes, this is the name of the variable that the event payload received will be mapped to on process instance", "author": "mswiderski", "createdAt": "2020-04-21T07:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjM0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MzMwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411583307", "bodyText": "Unnecessary.", "author": "MarianMacik", "createdAt": "2020-04-20T18:05:10Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/Process.java", "diffHunk": "@@ -38,4 +38,5 @@\n     void activate();\n \n     void deactivate();\n+", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDY2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411654667", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-04-20T20:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MzMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/api/kogito-api/src/main/java/org/kie/kogito/process/Process.java b/api/kogito-api/src/main/java/org/kie/kogito/process/Process.java\nindex b1065de648..2c63160503 100644\n--- a/api/kogito-api/src/main/java/org/kie/kogito/process/Process.java\n+++ b/api/kogito-api/src/main/java/org/kie/kogito/process/Process.java\n\n@@ -38,5 +38,4 @@ public interface Process<T> {\n     void activate();\n \n     void deactivate();\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NTA4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411595089", "bodyText": "Probably eventVar?", "author": "MarianMacik", "createdAt": "2020-04-20T18:24:37Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -765,6 +774,97 @@ private void removeEventListeners() {\n     public String[] getEventTypes() {\n         return externalEventListeners.keySet().stream().map(this::resolveVariable).collect(Collectors.toList()).toArray(new String[externalEventListeners.size()]);\n     }\n+    \n+    @Override\n+    public Set<EventDescription<?>> getEventDescriptions() {\n+        if (getState() == ProcessInstance.STATE_COMPLETED || getState() == ProcessInstance.STATE_ABORTED) {\n+            return Collections.emptySet();\n+        }\n+        VariableScope variableScope = (VariableScope) ((ContextContainer) getProcess()).getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        Set<EventDescription<?>> eventDesciptions = new LinkedHashSet<>();\n+        \n+        List<EventListener> activeListeners = eventListeners.values().stream()\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+        \n+        activeListeners.addAll(externalEventListeners.values().stream()\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList()));\n+        \n+        activeListeners.forEach(el -> eventDesciptions.addAll(el.getEventDescriptions()));\n+        \n+ \n+        ((org.jbpm.workflow.core.WorkflowProcess)getProcess()).getNodesRecursively().stream().filter(n -> n instanceof EventNodeInterface).forEach(n -> {\n+            \n+            NamedDataType dataType = null;\n+            if (((EventNodeInterface)n).getVariableName() != null) {\n+                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (evantVar != null) {", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDc0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411654742", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-04-20T20:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NTA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\nindex 8b6f37146b..d6c23dc7e2 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\n\n@@ -798,9 +798,9 @@ public abstract class WorkflowProcessInstanceImpl extends ProcessInstanceImpl\n             \n             NamedDataType dataType = null;\n             if (((EventNodeInterface)n).getVariableName() != null) {\n-                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n-                if (evantVar != null) {\n-                    dataType = new NamedDataType(evantVar.getName(), evantVar.getType());\n+                Variable eventVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (eventVar != null) {\n+                    dataType = new NamedDataType(eventVar.getName(), eventVar.getType());\n                 }\n             }\n             if (n instanceof BoundaryEventNode) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTQzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411599438", "bodyText": "This can be put on less than 3 lines I guess :)", "author": "MarianMacik", "createdAt": "2020-04-20T18:31:33Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -765,6 +774,97 @@ private void removeEventListeners() {\n     public String[] getEventTypes() {\n         return externalEventListeners.keySet().stream().map(this::resolveVariable).collect(Collectors.toList()).toArray(new String[externalEventListeners.size()]);\n     }\n+    \n+    @Override\n+    public Set<EventDescription<?>> getEventDescriptions() {\n+        if (getState() == ProcessInstance.STATE_COMPLETED || getState() == ProcessInstance.STATE_ABORTED) {\n+            return Collections.emptySet();\n+        }\n+        VariableScope variableScope = (VariableScope) ((ContextContainer) getProcess()).getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        Set<EventDescription<?>> eventDesciptions = new LinkedHashSet<>();\n+        \n+        List<EventListener> activeListeners = eventListeners.values().stream()\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+        \n+        activeListeners.addAll(externalEventListeners.values().stream()\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList()));\n+        \n+        activeListeners.forEach(el -> eventDesciptions.addAll(el.getEventDescriptions()));\n+        \n+ \n+        ((org.jbpm.workflow.core.WorkflowProcess)getProcess()).getNodesRecursively().stream().filter(n -> n instanceof EventNodeInterface).forEach(n -> {\n+            \n+            NamedDataType dataType = null;\n+            if (((EventNodeInterface)n).getVariableName() != null) {\n+                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (evantVar != null) {\n+                    dataType = new NamedDataType(evantVar.getName(), evantVar.getType());\n+                }\n+            }\n+            if (n instanceof BoundaryEventNode) {\n+                BoundaryEventNode boundaryEventNode = (BoundaryEventNode) n;\n+                StateBasedNodeInstance attachedToNodeInstance = (StateBasedNodeInstance) getNodeInstances(true).stream().filter( ni -> ni.getNode().getMetaData().get(\"UniqueId\").equals(boundaryEventNode.getAttachedToNodeId())).findFirst().orElse(null);\n+                if (attachedToNodeInstance != null) {\n+                    Map<String, String> properties = new HashMap<>();\n+                    properties.put(\"AttachedToID\", attachedToNodeInstance.getNodeDefinitionId());\n+                    properties.put(\"AttachedToName\", attachedToNodeInstance.getNodeName());\n+                    String eventType = \"signal\";\n+                    String eventName = boundaryEventNode.getType();\n+                    Map<String, String> timerProperties = attachedToNodeInstance.extractTimerEventInformation();\n+                    if (timerProperties != null) {\n+                        properties.putAll(timerProperties);\n+                        eventType = \"timer\";\n+                        eventName = \"timerTriggered\";\n+                    } \n+                \n+                    eventDesciptions.add(new BaseEventDescription(eventName, (String)n.getMetaData().get(\"UniqueId\"), n.getName(), eventType, null, getId(), dataType, properties));\n+                    \n+                }\n+                \n+            } else if (n instanceof EventSubProcessNode) {\n+                EventSubProcessNode eventSubProcessNode = (EventSubProcessNode) n;\n+                Node startNode = eventSubProcessNode.findStartNode();\n+                Map<Timer, DroolsAction> timers = eventSubProcessNode.getTimers();\n+                if (timers != null && !timers.isEmpty()) {\n+                    getNodeInstances(eventSubProcessNode.getId()).forEach(ni -> {\n+                        \n+                        Map<String, String> timerProperties = ((StateBasedNodeInstance) ni).extractTimerEventInformation();\n+                        if (timerProperties != null) {\n+                         \n+                            eventDesciptions.add(new BaseEventDescription(\"timerTriggered\", (String)startNode.getMetaData().get(\"UniqueId\"), startNode.getName(), \"timer\", ni.getId(), getId(), null, timerProperties));\n+                          \n+                        }\n+                    });\n+                } else {\n+                \n+                    for (String eventName : eventSubProcessNode.getEvents()) {\n+                        \n+                        eventDesciptions.add(new BaseEventDescription(eventName, (String)startNode.getMetaData().get(\"UniqueId\"), startNode.getName(), \"signal\", null, getId(), dataType));\n+                    }\n+                \n+                }\n+            } else if (n instanceof EventNode) {\n+                NamedDataType finalDataType = dataType;\n+                getNodeInstances(n.getId()).forEach(ni -> {\n+                    eventDesciptions.add(new BaseEventDescription(((EventNode) n).getType(), (String) n.getMetaData().get(\"UniqueId\"), n.getName(), (String) n.getMetaData().getOrDefault(\"EventType\", \"signal\"), ni.getId(),\n+                                                              getId(), finalDataType));\n+                });\n+            } else if (n instanceof StateNode) {\n+                \n+                getNodeInstances(n.getId()).forEach(ni -> {\n+                    eventDesciptions.add(new BaseEventDescription((String) n.getMetaData().get(\"Condition\"), (String) n.getMetaData().get(\"UniqueId\"), n.getName(), (String) n.getMetaData().getOrDefault(\"EventType\",\n+                                                                                                                                                                                                      \"signal\"), ni.getId(),\n+                                                              getId(), null));", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDg4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411654889", "bodyText": "reformatted", "author": "mswiderski", "createdAt": "2020-04-20T20:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\nindex 8b6f37146b..d6c23dc7e2 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\n\n@@ -798,9 +798,9 @@ public abstract class WorkflowProcessInstanceImpl extends ProcessInstanceImpl\n             \n             NamedDataType dataType = null;\n             if (((EventNodeInterface)n).getVariableName() != null) {\n-                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n-                if (evantVar != null) {\n-                    dataType = new NamedDataType(evantVar.getName(), evantVar.getType());\n+                Variable eventVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (eventVar != null) {\n+                    dataType = new NamedDataType(eventVar.getName(), eventVar.getType());\n                 }\n             }\n             if (n instanceof BoundaryEventNode) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTExMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411609110", "bodyText": "Maybe a stupid question but why do we iterate here over BoundaryEventNode and not over instance of it? Is the attachedTo property accessible only via nodes and not node instances?", "author": "MarianMacik", "createdAt": "2020-04-20T18:47:12Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -765,6 +774,97 @@ private void removeEventListeners() {\n     public String[] getEventTypes() {\n         return externalEventListeners.keySet().stream().map(this::resolveVariable).collect(Collectors.toList()).toArray(new String[externalEventListeners.size()]);\n     }\n+    \n+    @Override\n+    public Set<EventDescription<?>> getEventDescriptions() {\n+        if (getState() == ProcessInstance.STATE_COMPLETED || getState() == ProcessInstance.STATE_ABORTED) {\n+            return Collections.emptySet();\n+        }\n+        VariableScope variableScope = (VariableScope) ((ContextContainer) getProcess()).getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        Set<EventDescription<?>> eventDesciptions = new LinkedHashSet<>();\n+        \n+        List<EventListener> activeListeners = eventListeners.values().stream()\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+        \n+        activeListeners.addAll(externalEventListeners.values().stream()\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList()));\n+        \n+        activeListeners.forEach(el -> eventDesciptions.addAll(el.getEventDescriptions()));\n+        \n+ \n+        ((org.jbpm.workflow.core.WorkflowProcess)getProcess()).getNodesRecursively().stream().filter(n -> n instanceof EventNodeInterface).forEach(n -> {\n+            \n+            NamedDataType dataType = null;\n+            if (((EventNodeInterface)n).getVariableName() != null) {\n+                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (evantVar != null) {\n+                    dataType = new NamedDataType(evantVar.getName(), evantVar.getType());\n+                }\n+            }\n+            if (n instanceof BoundaryEventNode) {\n+                BoundaryEventNode boundaryEventNode = (BoundaryEventNode) n;\n+                StateBasedNodeInstance attachedToNodeInstance = (StateBasedNodeInstance) getNodeInstances(true).stream().filter( ni -> ni.getNode().getMetaData().get(\"UniqueId\").equals(boundaryEventNode.getAttachedToNodeId())).findFirst().orElse(null);", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTk3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411655976", "bodyText": "boundary event node instances are created on demand and thus do not exist as node instances so it needs to find if there is a node instance of that this boundary is attached to as active node instance", "author": "mswiderski", "createdAt": "2020-04-20T20:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1NDI5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411954295", "bodyText": "Thanks,", "author": "MarianMacik", "createdAt": "2020-04-21T07:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTExMA=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\nindex 8b6f37146b..d6c23dc7e2 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java\n\n@@ -798,9 +798,9 @@ public abstract class WorkflowProcessInstanceImpl extends ProcessInstanceImpl\n             \n             NamedDataType dataType = null;\n             if (((EventNodeInterface)n).getVariableName() != null) {\n-                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n-                if (evantVar != null) {\n-                    dataType = new NamedDataType(evantVar.getName(), evantVar.getType());\n+                Variable eventVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (eventVar != null) {\n+                    dataType = new NamedDataType(eventVar.getName(), eventVar.getType());\n                 }\n             }\n             if (n instanceof BoundaryEventNode) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTM0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411609347", "bodyText": "What about just get keySet here and filter in lambda? Would be more readable I think.", "author": "MarianMacik", "createdAt": "2020-04-20T18:47:39Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java", "diffHunk": "@@ -483,4 +483,28 @@ protected void mapDynamicOutputData(Map<String, Object> results) {\n             }\n         }\n     }\n+    \n+    public Map<String, String> extractTimerEventInformation() {\n+        if (getTimerInstances() != null) {\n+            for (String id : getTimerInstances()) {\n+                String[] ids = id.split(\"_\");\n+                \n+                for (Map.Entry<Timer, DroolsAction> entry : getEventBasedNode().getTimers().entrySet()) {\n+                    if (entry.getKey().getId() == Long.valueOf(ids[1])) {", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDk4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411654987", "bodyText": "used keySet instead", "author": "mswiderski", "createdAt": "2020-04-20T20:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java\nindex e97182534e..66dd683186 100755\n--- a/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java\n+++ b/jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java\n\n@@ -489,13 +489,13 @@ public abstract class StateBasedNodeInstance extends ExtendedNodeInstanceImpl im\n             for (String id : getTimerInstances()) {\n                 String[] ids = id.split(\"_\");\n                 \n-                for (Map.Entry<Timer, DroolsAction> entry : getEventBasedNode().getTimers().entrySet()) {\n-                    if (entry.getKey().getId() == Long.valueOf(ids[1])) {\n+                for (Timer entry : getEventBasedNode().getTimers().keySet()) {\n+                    if (entry.getId() == Long.valueOf(ids[1])) {\n                         Map<String, String> properties = new HashMap<>();\n                         properties.put(\"TimerID\", id);\n-                        properties.put(\"Delay\", entry.getKey().getDelay());\n-                        properties.put(\"Period\", entry.getKey().getPeriod());\n-                        properties.put(\"Date\", entry.getKey().getDate()); \n+                        properties.put(\"Delay\", entry.getDelay());\n+                        properties.put(\"Period\", entry.getPeriod());\n+                        properties.put(\"Date\", entry.getDate()); \n                         \n                         return properties;\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTA5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411615095", "bodyText": "Can we rather log these or delete them?", "author": "MarianMacik", "createdAt": "2020-04-20T18:56:36Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -1172,6 +1357,9 @@ public void testIntermediateCatchEventSignal() throws Exception {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n+        \n+        System.out.println(\"Boundary  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());\n+        ", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTA4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411655082", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-04-20T20:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\nindex 174f020fa6..20c155ad7f 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\n\n@@ -1357,9 +1354,7 @@ public class IntermediateEventTest extends JbpmBpmn2TestCase {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n-        \n-        System.out.println(\"Boundary  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());\n-        \n+   \n         ksession = restoreSession(ksession, true);\n         // now signal process instance\n         ksession.signalEvent(\"MyMessage\", \"SomeValue\", processInstance.getId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTIyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411615226", "bodyText": "Same here.", "author": "MarianMacik", "createdAt": "2020-04-20T18:56:43Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -1189,6 +1377,8 @@ public void testIntermediateCatchEventMessage() throws Exception {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n+        \n+        System.out.println(Arrays.toString(processInstance.getEventTypes()));", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTE3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411655173", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-04-20T20:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\nindex 174f020fa6..20c155ad7f 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\n\n@@ -1377,8 +1372,7 @@ public class IntermediateEventTest extends JbpmBpmn2TestCase {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n-        \n-        System.out.println(Arrays.toString(processInstance.getEventTypes()));\n+                \n         ksession = restoreSession(ksession, true);\n         // now signal process instance\n         ksession.signalEvent(\"Message-HelloMessage\", \"SomeValue\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTMxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411615317", "bodyText": "Same here.", "author": "MarianMacik", "createdAt": "2020-04-20T18:56:50Z", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -1226,6 +1416,8 @@ public void testIntermediateCatchEventTimerDuration() throws Exception {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n+        \n+        System.out.println(\"Events  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());", "originalCommit": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTIxNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411655215", "bodyText": "removed", "author": "mswiderski", "createdAt": "2020-04-20T20:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "chunk": "diff --git a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\nindex 174f020fa6..20c155ad7f 100755\n--- a/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\n+++ b/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java\n\n@@ -1416,9 +1410,7 @@ public class IntermediateEventTest extends JbpmBpmn2TestCase {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n-        \n-        System.out.println(\"Events  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());\n-\n+  \n         // now wait for 1 second for timer to trigger\n         countDownListener.waitTillCompleted();\n \n"}}, {"oid": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "url": "https://github.com/kiegroup/kogito-runtimes/commit/90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "message": "KOGITO-1632 - Event descriptions for given process instance", "committedDate": "2020-04-20T19:37:40Z", "type": "commit"}, {"oid": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "url": "https://github.com/kiegroup/kogito-runtimes/commit/90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "message": "KOGITO-1632 - Event descriptions for given process instance", "committedDate": "2020-04-20T19:37:40Z", "type": "forcePushed"}]}