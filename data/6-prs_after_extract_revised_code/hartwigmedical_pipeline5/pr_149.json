{"pr_number": 149, "pr_title": "DEV-1250 Register CRAMs with API", "pr_createdAt": "2020-05-01T16:23:26Z", "pr_url": "https://github.com/hartwigmedical/pipeline5/pull/149", "timeline": [{"oid": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "url": "https://github.com/hartwigmedical/pipeline5/commit/171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "message": "DEV-1250 Register CRAMs with API\n\nAllow calling of arbitrary API endpoints after files have been created\nso that we can add additional metadata for certain files from the run.", "committedDate": "2020-05-01T16:22:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxOTMyOA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418619328", "bodyText": "singleton anti-pattern. makes the class impossible to unit test. let's invert the dependency and make AdditionalApiCalls a field.\nAlso I was thinking we'd use the \"ReportComponents\" for this rather than introducing a new class in which to register them.", "author": "pauldwolfe", "createdAt": "2020-05-01T16:28:41Z", "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -66,10 +71,18 @@ public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobSta\n         String cram = new File(outputCram).getName();\n         String crai = CramOutput.craiFile(cram);\n         Folder folder = Folder.from(metadata);\n+\n+        String fullCram = format(\"%s%s/%s\", folder.name(), NAMESPACE, cram);\n+        String fullCrai = format(\"%s%s/%s\", folder.name(), NAMESPACE, crai);\n+\n+        AdditionalApiCalls.instance().register(fullCram, new LinkFileToSample(metadata.sampleId()));", "originalCommit": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzNjgwOQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418636809", "bodyText": "Meant to mention - this is absolutely just a waypoint, it won't be staying that way, working on getting rid of it now.\nI was sitting on the fence with putting it in the ReportComponents, wasn't sure about overloading but am happy to make that change.", "author": "nedleitch", "createdAt": "2020-05-01T17:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxOTMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "64f97614656161d14a899136ba0c73fcf264164a", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java b/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\nindex 32eb6b73..e77339ee 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\n\n@@ -75,8 +75,8 @@ public class CramConversion implements Stage<CramOutput, SingleSampleRunMetadata\n         String fullCram = format(\"%s%s/%s\", folder.name(), NAMESPACE, cram);\n         String fullCrai = format(\"%s%s/%s\", folder.name(), NAMESPACE, crai);\n \n-        AdditionalApiCalls.instance().register(fullCram, new LinkFileToSample(metadata.sampleId()));\n-        AdditionalApiCalls.instance().register(fullCrai, new LinkFileToSample(metadata.sampleId()));\n+        AdditionalApiCalls.instance().register(fullCram, new LinkFileToSample(metadata.entityId()));\n+        AdditionalApiCalls.instance().register(fullCrai, new LinkFileToSample(metadata.entityId()));\n         AdditionalApiCalls.instance().register(fullCram, new AddDatatypeToFile(\"reads\"));\n         AdditionalApiCalls.instance().register(fullCrai, new AddDatatypeToFile(\"reads\"));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDA2OA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620068", "bodyText": "another side-effect of singleton. Why isn't register modelled as an Operation somehow?", "author": "pauldwolfe", "createdAt": "2020-05-01T16:30:13Z", "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/AdditionalApiCalls.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AdditionalApiCalls {\n+    private static final AdditionalApiCalls INSTANCE = new AdditionalApiCalls();\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdditionalApiCalls.class);\n+    private Map<String, List<ApiFileOperation>> metadata;\n+\n+    private AdditionalApiCalls() {\n+        metadata = new HashMap<>();\n+        //String name = RunTag.apply(arguments, metadata.sampleId());\n+    }\n+\n+    public static AdditionalApiCalls instance() {\n+        return INSTANCE;\n+    }\n+\n+    public synchronized void register(String filePath, ApiFileOperation extraOperation) {", "originalCommit": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "661a0d911e552368b484d88a797ececbfd7aa364", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/metadata/AdditionalApiCalls.java b/cluster/src/main/java/com/hartwig/pipeline/metadata/AdditionalApiCalls.java\nindex 0f77dfdb..ed9bf579 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/metadata/AdditionalApiCalls.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/metadata/AdditionalApiCalls.java\n\n@@ -5,7 +5,7 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.AddFileApiResponse;\n import com.hartwig.pipeline.sbpapi.SbpRestApi;\n \n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDYzOA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620638", "bodyText": "I like the thought behind this but feel like it introduces inconsistency to only have ApiFile operation and no similar abstractions for other operations.", "author": "pauldwolfe", "createdAt": "2020-05-01T16:31:32Z", "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/ApiFileOperation.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+public interface ApiFileOperation {", "originalCommit": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "661a0d911e552368b484d88a797ececbfd7aa364", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/metadata/ApiFileOperation.java b/cluster/src/main/java/com/hartwig/pipeline/metadata/ApiFileOperation.java\nindex be9342ff..70bde685 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/metadata/ApiFileOperation.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/metadata/ApiFileOperation.java\n\n@@ -1,8 +1,10 @@\n package com.hartwig.pipeline.metadata;\n \n-import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.AddFileApiResponse;\n import com.hartwig.pipeline.sbpapi.SbpRestApi;\n \n public interface ApiFileOperation {\n-    void apply(SbpRestApi api, FileResponse file);\n+    void apply(SbpRestApi api, AddFileApiResponse file);\n+\n+    String path();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDkyMQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418620921", "bodyText": "They also don't do much... maybe you can get away with just a BiFunction where you need the abstraction?", "author": "pauldwolfe", "createdAt": "2020-05-01T16:32:15Z", "path": "cluster/src/main/java/com/hartwig/pipeline/metadata/LinkFileToSample.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.hartwig.pipeline.metadata;\n+\n+import com.hartwig.pipeline.sbpapi.FileResponse;\n+import com.hartwig.pipeline.sbpapi.SbpRestApi;\n+\n+public class LinkFileToSample implements ApiFileOperation {\n+    private final String sampleId;\n+\n+    public LinkFileToSample(String sampleId) {\n+        this.sampleId = sampleId;\n+    }\n+\n+    @Override\n+    public void apply(final SbpRestApi api, final FileResponse fileResponse) {", "originalCommit": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64f97614656161d14a899136ba0c73fcf264164a", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/metadata/LinkFileToSample.java b/cluster/src/main/java/com/hartwig/pipeline/metadata/LinkFileToSample.java\nindex e755e541..3a86116e 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/metadata/LinkFileToSample.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/metadata/LinkFileToSample.java\n\n@@ -4,9 +4,9 @@ import com.hartwig.pipeline.sbpapi.FileResponse;\n import com.hartwig.pipeline.sbpapi.SbpRestApi;\n \n public class LinkFileToSample implements ApiFileOperation {\n-    private final String sampleId;\n+    private final int sampleId;\n \n-    public LinkFileToSample(String sampleId) {\n+    public LinkFileToSample(int sampleId) {\n         this.sampleId = sampleId;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMTE5Mw==", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418621193", "bodyText": "empty constructor and non-final mutable field? looks like a job for immutables", "author": "pauldwolfe", "createdAt": "2020-05-01T16:32:52Z", "path": "cluster/src/main/java/com/hartwig/pipeline/sbpapi/FileResponse.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.hartwig.pipeline.sbpapi;\n+\n+public class FileResponse {\n+    public int id;\n+\n+    public FileResponse() {", "originalCommit": "171c0195b32c0a9a111e0c7219e1acbe4ff27a78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzNzM1OQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/149#discussion_r418637359", "bodyText": "Indeed. Was actually looking for a way to inline it but will switch to an Immutable.", "author": "nedleitch", "createdAt": "2020-05-01T17:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "661a0d911e552368b484d88a797ececbfd7aa364", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/sbpapi/FileResponse.java b/cluster/src/main/java/com/hartwig/pipeline/sbpapi/FileResponse.java\ndeleted file mode 100644\nindex ba91f610..00000000\n--- a/cluster/src/main/java/com/hartwig/pipeline/sbpapi/FileResponse.java\n+++ /dev/null\n\n@@ -1,8 +0,0 @@\n-package com.hartwig.pipeline.sbpapi;\n-\n-public class FileResponse {\n-    public int id;\n-\n-    public FileResponse() {\n-    }\n-}\n"}}, {"oid": "64f97614656161d14a899136ba0c73fcf264164a", "url": "https://github.com/hartwigmedical/pipeline5/commit/64f97614656161d14a899136ba0c73fcf264164a", "message": "DEV-1250 Correct API parameters", "committedDate": "2020-05-01T22:15:48Z", "type": "commit"}, {"oid": "661a0d911e552368b484d88a797ececbfd7aa364", "url": "https://github.com/hartwigmedical/pipeline5/commit/661a0d911e552368b484d88a797ececbfd7aa364", "message": "DEV-1250 Move additional file ops to StageOutput", "committedDate": "2020-05-02T18:13:24Z", "type": "commit"}, {"oid": "c1646825bcbd3d2f28a5b1d293fc352c56c32f65", "url": "https://github.com/hartwigmedical/pipeline5/commit/c1646825bcbd3d2f28a5b1d293fc352c56c32f65", "message": "DEV-1250 Move completion steps up to FullPipeline", "committedDate": "2020-05-03T19:18:49Z", "type": "commit"}]}