{"pr_number": 130, "pr_title": "DEV-1122 Add CRAM conversion to pipeline", "pr_createdAt": "2020-02-21T06:42:47Z", "pr_url": "https://github.com/hartwigmedical/pipeline5/pull/130", "timeline": [{"oid": "3d5573ad876b62d50b8f3c624fdb571141ef9ce2", "url": "https://github.com/hartwigmedical/pipeline5/commit/3d5573ad876b62d50b8f3c624fdb571141ef9ce2", "message": "DEV-1122 Add CRAM conversion to pipeline", "committedDate": "2020-02-21T06:36:48Z", "type": "commit"}, {"oid": "e9d979a061f61bcbd7652909b2981c5a357ada0e", "url": "https://github.com/hartwigmedical/pipeline5/commit/e9d979a061f61bcbd7652909b2981c5a357ada0e", "message": "DEV-1122 Fix output filename bug", "committedDate": "2020-02-21T07:46:08Z", "type": "commit"}, {"oid": "39017f6b2d52bf51abf33bfb5f28209707346217", "url": "https://github.com/hartwigmedical/pipeline5/commit/39017f6b2d52bf51abf33bfb5f28209707346217", "message": "DEV-1122 Fix test failure", "committedDate": "2020-02-21T07:58:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNTcxNA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382535714", "bodyText": "I think the Substage interface would work well for this", "author": "pauldwolfe", "createdAt": "2020-02-21T11:35:58Z", "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramAndValidateCommands.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hartwig.pipeline.calling.command.VersionedToolCommand;\n+import com.hartwig.pipeline.execution.vm.Bash;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.JavaClassCommand;\n+import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.tools.Versions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramAndValidateCommands {", "originalCommit": "39017f6b2d52bf51abf33bfb5f28209707346217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTE4MA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382925180", "bodyText": "Still do :)", "author": "pauldwolfe", "createdAt": "2020-02-22T16:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTgwMQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382965801", "bodyText": "Sorry wasn't ignoring this suggestion, just forgot. But now that I look more closely at it, I'd have to do some gymnastics to use the substages from the batch side because it doesn't really care about samples (it deals generically with input files) and I'm not sure whether it's worth the effort. For the pipeline invocation it makes more sense but not sure whether that's compelling by itself.", "author": "nedleitch", "createdAt": "2020-02-23T05:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5OTE3OQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382999179", "bodyText": "I don't think it would be too hard to remove the references to samples, but also fine to leave this for now and make that a part of another separate refactoring task.", "author": "pauldwolfe", "createdAt": "2020-02-23T12:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNTcxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjM2OA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382536368", "bodyText": "I see we add the CRAM here to the final output I guess we want to remove the BAM from the aligner report components as well?", "author": "pauldwolfe", "createdAt": "2020-02-21T11:37:48Z", "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentOutput;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.ImmutableVirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.InputDownload;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.SingleFileComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.stages.Stage;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramConversion implements Stage<CramOutput, SingleSampleRunMetadata> {\n+    public static final String NAMESPACE = \"cram\";\n+    static final int NUMBER_OF_CORES = 6;\n+\n+    private final InputDownload bamDownload;\n+\n+    public CramConversion(final AlignmentOutput alignmentOutput) {\n+        bamDownload = new InputDownload(alignmentOutput.finalBamLocation());\n+    }\n+\n+    @Override\n+    public List<BashCommand> inputs() {\n+        return Collections.singletonList(bamDownload);\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(SingleSampleRunMetadata metadata) {\n+        return new CramAndValidateCommands(bamDownload.getLocalTargetPath(),\n+                VmDirectories.outputFile(CramOutput.cramFile(bamDownload.getLocalTargetPath()))).commands();\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(BashStartupScript bash, ResultsDirectory resultsDirectory) {\n+        return ImmutableVirtualMachineJobDefinition.builder()\n+                .name(\"cram\")\n+                .startupCommand(bash)\n+                .performanceProfile(VirtualMachinePerformanceProfile.custom(NUMBER_OF_CORES, 6))\n+                .namespacedResults(resultsDirectory)\n+                .build();\n+    }\n+\n+    @Override\n+    public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobStatus, RuntimeBucket bucket, ResultsDirectory resultsDirectory) {\n+        String cram = CramOutput.cramFile(metadata.sampleName());\n+        String crai = CramOutput.craiFile(metadata.sampleName());\n+        Folder folder = Folder.from(metadata);\n+        return CramOutput.builder()\n+                .status(jobStatus)\n+                .addReportComponents(", "originalCommit": "39017f6b2d52bf51abf33bfb5f28209707346217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjU4OA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382536588", "bodyText": "Or maybe you were thinking we persist both to start?", "author": "pauldwolfe", "createdAt": "2020-02-21T11:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NzY3Mg==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382587672", "bodyText": "I was. But maybe that's overly cautious and not really beneficial.", "author": "nedleitch", "createdAt": "2020-02-21T13:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "649d3a1732f8fef6f6560c15936477cc9526ac9a", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java b/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\nindex b26b04f3..ea40ec4a 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\n\n@@ -19,6 +19,7 @@ import com.hartwig.pipeline.report.StartupScriptComponent;\n import com.hartwig.pipeline.stages.Stage;\n import com.hartwig.pipeline.storage.RuntimeBucket;\n \n+import java.io.File;\n import java.util.Collections;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjg4OA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382536888", "bodyText": "I think we should have an option to enable/disable this feature", "author": "pauldwolfe", "createdAt": "2020-02-21T11:39:13Z", "path": "cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hartwig.pipeline.cram;\n+\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentOutput;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.ImmutableVirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.InputDownload;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.SingleFileComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.stages.Stage;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CramConversion implements Stage<CramOutput, SingleSampleRunMetadata> {\n+    public static final String NAMESPACE = \"cram\";\n+    static final int NUMBER_OF_CORES = 6;\n+\n+    private final InputDownload bamDownload;\n+\n+    public CramConversion(final AlignmentOutput alignmentOutput) {\n+        bamDownload = new InputDownload(alignmentOutput.finalBamLocation());\n+    }\n+\n+    @Override\n+    public List<BashCommand> inputs() {\n+        return Collections.singletonList(bamDownload);\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(SingleSampleRunMetadata metadata) {\n+        return new CramAndValidateCommands(bamDownload.getLocalTargetPath(),\n+                VmDirectories.outputFile(CramOutput.cramFile(bamDownload.getLocalTargetPath()))).commands();\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(BashStartupScript bash, ResultsDirectory resultsDirectory) {\n+        return ImmutableVirtualMachineJobDefinition.builder()\n+                .name(\"cram\")\n+                .startupCommand(bash)\n+                .performanceProfile(VirtualMachinePerformanceProfile.custom(NUMBER_OF_CORES, 6))\n+                .namespacedResults(resultsDirectory)\n+                .build();\n+    }\n+\n+    @Override\n+    public CramOutput output(SingleSampleRunMetadata metadata, PipelineStatus jobStatus, RuntimeBucket bucket, ResultsDirectory resultsDirectory) {\n+        String cram = CramOutput.cramFile(metadata.sampleName());\n+        String crai = CramOutput.craiFile(metadata.sampleName());\n+        Folder folder = Folder.from(metadata);\n+        return CramOutput.builder()\n+                .status(jobStatus)\n+                .addReportComponents(\n+                        new RunLogComponent(bucket, NAMESPACE, folder, resultsDirectory),\n+                        new StartupScriptComponent(bucket, NAMESPACE, folder),\n+                        new SingleFileComponent(bucket, NAMESPACE, folder, cram, cram, resultsDirectory),\n+                        new SingleFileComponent(bucket, NAMESPACE, folder, crai, crai, resultsDirectory))\n+                .build();\n+    }\n+\n+    @Override\n+    public CramOutput skippedOutput(SingleSampleRunMetadata metadata) {\n+        throw new IllegalStateException(\"CRAM conversion cannot be skipped.\");\n+    }\n+\n+    @Override\n+    public boolean shouldRun(Arguments arguments) {", "originalCommit": "39017f6b2d52bf51abf33bfb5f28209707346217", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "649d3a1732f8fef6f6560c15936477cc9526ac9a", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java b/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\nindex b26b04f3..ea40ec4a 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/cram/CramConversion.java\n\n@@ -19,6 +19,7 @@ import com.hartwig.pipeline.report.StartupScriptComponent;\n import com.hartwig.pipeline.stages.Stage;\n import com.hartwig.pipeline.storage.RuntimeBucket;\n \n+import java.io.File;\n import java.util.Collections;\n import java.util.List;\n \n"}}, {"oid": "649d3a1732f8fef6f6560c15936477cc9526ac9a", "url": "https://github.com/hartwigmedical/pipeline5/commit/649d3a1732f8fef6f6560c15936477cc9526ac9a", "message": "DEV-1122 Put CRAM output behind feature toggle\n\nAlso fix a bug in the image import script that I noticed while pushing\nthe image for manual testing.\n\nIn addition add some options to the InputFileDescriptor class to\nsignificantly improve download speed for batch files. Also scale down\nthe required disk space for the batch converter.", "committedDate": "2020-02-21T21:39:59Z", "type": "commit"}, {"oid": "f466ede19b6cf749183fd8dbc6caaac5412b227a", "url": "https://github.com/hartwigmedical/pipeline5/commit/f466ede19b6cf749183fd8dbc6caaac5412b227a", "message": "DEV-1122 Do not store BAMs when outputting CRAMs", "committedDate": "2020-02-22T03:13:40Z", "type": "commit"}, {"oid": "75b162bd213afae3c6c5497a74ab65b5c8c1f758", "url": "https://github.com/hartwigmedical/pipeline5/commit/75b162bd213afae3c6c5497a74ab65b5c8c1f758", "message": "DEV-1122 Don't copy new BAMs after CRAM finishes\n\nThe CRAM conversion generates a BAM from the new CRAM and then\ncompares that to the original. These are not generally useful\nto copy up to the cloud, but we do want to keep them around if\nthere is anything out of ordinary. Move them to another folder\nso they aren't automatically copied up on job completion.", "committedDate": "2020-02-22T04:04:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTA5MQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382925091", "bodyText": "Rename to SamtoolsBamToCram?", "author": "pauldwolfe", "createdAt": "2020-02-22T16:40:36Z", "path": "batch/src/main/java/com/hartwig/batch/operations/SamtoolsCramToBam.java", "diffHunk": "@@ -1,53 +1,41 @@\n package com.hartwig.batch.operations;\n \n-import java.io.File;\n-\n import com.hartwig.batch.BatchOperation;\n import com.hartwig.batch.input.InputBundle;\n import com.hartwig.batch.input.InputFileDescriptor;\n import com.hartwig.pipeline.ResultsDirectory;\n-import com.hartwig.pipeline.calling.command.VersionedToolCommand;\n-import com.hartwig.pipeline.execution.vm.Bash;\n+import com.hartwig.pipeline.cram.CramAndValidateCommands;\n import com.hartwig.pipeline.execution.vm.BashStartupScript;\n import com.hartwig.pipeline.execution.vm.OutputUpload;\n import com.hartwig.pipeline.execution.vm.RuntimeFiles;\n import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n import com.hartwig.pipeline.execution.vm.VirtualMachinePerformanceProfile;\n import com.hartwig.pipeline.execution.vm.VmDirectories;\n-import com.hartwig.pipeline.resource.Resource;\n+import com.hartwig.pipeline.execution.vm.unix.MvCommand;\n import com.hartwig.pipeline.storage.GoogleStorageLocation;\n import com.hartwig.pipeline.storage.RuntimeBucket;\n-import com.hartwig.pipeline.tools.Versions;\n+\n+import java.io.File;\n+\n+import static java.lang.String.format;\n \n public class SamtoolsCramToBam implements BatchOperation {", "originalCommit": "75b162bd213afae3c6c5497a74ab65b5c8c1f758", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTY5NQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382965695", "bodyText": "Good call. Not sure why this was named this way to start with.", "author": "nedleitch", "createdAt": "2020-02-23T05:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a3fbc673dd8033670a7f4b4a9fab37e81e115bf", "chunk": "diff --git a/batch/src/main/java/com/hartwig/batch/operations/SamtoolsCramToBam.java b/batch/src/main/java/com/hartwig/batch/operations/SamtoolsBamToCram.java\nsimilarity index 93%\nrename from batch/src/main/java/com/hartwig/batch/operations/SamtoolsCramToBam.java\nrename to batch/src/main/java/com/hartwig/batch/operations/SamtoolsBamToCram.java\nindex 73bad576..1a0d0a8c 100644\n--- a/batch/src/main/java/com/hartwig/batch/operations/SamtoolsCramToBam.java\n+++ b/batch/src/main/java/com/hartwig/batch/operations/SamtoolsBamToCram.java\n\n@@ -19,7 +19,7 @@ import java.io.File;\n \n import static java.lang.String.format;\n \n-public class SamtoolsCramToBam implements BatchOperation {\n+public class SamtoolsBamToCram implements BatchOperation {\n     @Override\n     public VirtualMachineJobDefinition execute(final InputBundle inputs, final RuntimeBucket bucket,\n                                                final BashStartupScript startupScript, final RuntimeFiles executionFlags) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTMxNA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/130#discussion_r382925314", "bodyText": "0.1 implies its not ready for production, would suggest we use 1.0 once its validated (which I think it sort of is by Korneel)", "author": "pauldwolfe", "createdAt": "2020-02-22T16:43:49Z", "path": "cluster/src/main/java/com/hartwig/pipeline/tools/Versions.java", "diffHunk": "@@ -30,6 +30,7 @@\n     String CHORD = \"60.02_1.03\";\n     String SAMTOOLS = \"1.9\";\n     String BCL2FASTQ = \"2.20.0.422\";\n+    String BAMCOMP = \"0.1\";", "originalCommit": "75b162bd213afae3c6c5497a74ab65b5c8c1f758", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a3fbc673dd8033670a7f4b4a9fab37e81e115bf", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/tools/Versions.java b/cluster/src/main/java/com/hartwig/pipeline/tools/Versions.java\nindex ed94d944..78fb281d 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/tools/Versions.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/tools/Versions.java\n\n@@ -30,7 +30,7 @@ public interface Versions {\n     String CHORD = \"60.02_1.03\";\n     String SAMTOOLS = \"1.9\";\n     String BCL2FASTQ = \"2.20.0.422\";\n-    String BAMCOMP = \"0.1\";\n+    String BAMCOMP = \"1.0\";\n \n     static void printAll() {\n         Logger logger = LoggerFactory.getLogger(Versions.class);\n"}}, {"oid": "6a3fbc673dd8033670a7f4b4a9fab37e81e115bf", "url": "https://github.com/hartwigmedical/pipeline5/commit/6a3fbc673dd8033670a7f4b4a9fab37e81e115bf", "message": "DEV-1122 Improve batch operation naming\n\nAlso bump bamcomp version to 1.0.", "committedDate": "2020-02-23T05:31:56Z", "type": "commit"}, {"oid": "71b7d46012134f6a8325496337cbbf95bb4b550b", "url": "https://github.com/hartwigmedical/pipeline5/commit/71b7d46012134f6a8325496337cbbf95bb4b550b", "message": "DEV-1122 Fix failing test\n\nBump the bamcomp version in the test", "committedDate": "2020-02-23T13:25:06Z", "type": "commit"}]}