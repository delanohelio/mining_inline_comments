{"pr_number": 179, "pr_title": "DEV-1428 Wrap all list operations in a backoff retry", "pr_createdAt": "2020-07-30T21:51:27Z", "pr_url": "https://github.com/hartwigmedical/pipeline5/pull/179", "timeline": [{"oid": "21cd5b90c729d9a04bc3a50e9a676975697c4793", "url": "https://github.com/hartwigmedical/pipeline5/commit/21cd5b90c729d9a04bc3a50e9a676975697c4793", "message": "DEV-1428 Wrap all list operations in a backoff retry\n\nNow all interactions in the Lifecycle manager are retried with a backoff.", "committedDate": "2020-07-30T21:50:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3ODQ2MQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/179#discussion_r463378461", "bodyText": "I wonder in retrospect whether the three-argument version of withDelay might be more appropriate (provide a min and max delay and it will choose a random time between them). I think it's more readable too (and you could do without the constant - just use 5 and specify minutes instead of seconds).", "author": "nedleitch", "createdAt": "2020-07-31T02:50:35Z", "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "diffHunk": "@@ -128,21 +131,23 @@ private Operation executeSynchronously(ComputeRequest<Operation> request, String\n                 Thread.currentThread().interrupt();\n             }\n         }\n-        return executeWithRetries(() -> compute.zoneOperations().get(projectName, zoneName, asyncOp.getName()).execute());\n+        return executeWithRetries(() -> compute.zoneOperations().get(projectName, zoneName, asyncOp.getName()).execute(),\n+                IOException.class);\n     }\n \n-    private Operation executeWithRetries(final CheckedSupplier<Operation> operationCheckedSupplier) {\n-        return Failsafe.with(new RetryPolicy<>().handle(IOException.class).withDelay(Duration.ofSeconds(pollInterval)).withMaxRetries(5))\n+    private <T> T executeWithRetries(final CheckedSupplier<T> operationCheckedSupplier, final Class<? extends Exception> exception) {\n+        return Failsafe.with(new RetryPolicy<>().handle(exception)\n+                .withBackoff(pollInterval, FIVE_MINUTES, ChronoUnit.SECONDS, new Random().nextInt(pollInterval)))", "originalCommit": "21cd5b90c729d9a04bc3a50e9a676975697c4793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fd5c8f6f1857526d69188bb263e97255ed22f84", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java b/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\nindex 412e8035..520d34d1 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\n\n@@ -132,12 +132,11 @@ class InstanceLifecycleManager {\n             }\n         }\n         return executeWithRetries(() -> compute.zoneOperations().get(projectName, zoneName, asyncOp.getName()).execute(),\n-                IOException.class);\n+                \"getZoneOperations\");\n     }\n \n-    private <T> T executeWithRetries(final CheckedSupplier<T> operationCheckedSupplier, final Class<? extends Exception> exception) {\n-        return Failsafe.with(new RetryPolicy<>().handle(exception)\n-                .withBackoff(pollInterval, FIVE_MINUTES, ChronoUnit.SECONDS, new Random().nextInt(pollInterval)))\n+    private <T> T executeWithRetries(final CheckedSupplier<T> operationCheckedSupplier, final String opName) {\n+        return Failsafe.with(DefaultBackoffPolicy.of(String.format(\"Lifecycly manager operation [%s]\", opName)))\n                 .get(operationCheckedSupplier);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3ODU0NA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/179#discussion_r463378544", "bodyText": "This is 10 minutes :)", "author": "nedleitch", "createdAt": "2020-07-31T02:50:54Z", "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "diffHunk": "@@ -28,6 +30,7 @@\n class InstanceLifecycleManager {\n     private static final String RUNNING_STATUS = \"RUNNING\";\n     private static final Logger LOGGER = LoggerFactory.getLogger(InstanceLifecycleManager.class);\n+    public static final int FIVE_MINUTES = 600;", "originalCommit": "21cd5b90c729d9a04bc3a50e9a676975697c4793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1NDgyNQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/179#discussion_r463654825", "bodyText": "toucher", "author": "pauldwolfe", "createdAt": "2020-07-31T14:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3ODU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7fd5c8f6f1857526d69188bb263e97255ed22f84", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java b/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\nindex 412e8035..520d34d1 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\n\n@@ -30,7 +29,6 @@ import net.jodah.failsafe.function.CheckedSupplier;\n class InstanceLifecycleManager {\n     private static final String RUNNING_STATUS = \"RUNNING\";\n     private static final Logger LOGGER = LoggerFactory.getLogger(InstanceLifecycleManager.class);\n-    public static final int FIVE_MINUTES = 600;\n \n     private final String project;\n     private final Compute compute;\n"}}, {"oid": "7fd5c8f6f1857526d69188bb263e97255ed22f84", "url": "https://github.com/hartwigmedical/pipeline5/commit/7fd5c8f6f1857526d69188bb263e97255ed22f84", "message": "DEV-1428 Wrap stage runner compute engine submit in backoff retry\n\nAnd extract a common class to avoid duplication with lifecycle manager.", "committedDate": "2020-07-31T15:06:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2ODc2Mw==", "url": "https://github.com/hartwigmedical/pipeline5/pull/179#discussion_r463668763", "bodyText": "Repeated op name, maybe put in a constant?", "author": "nedleitch", "createdAt": "2020-07-31T15:10:55Z", "path": "cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java", "diffHunk": "@@ -73,22 +75,22 @@ Operation deleteOldInstancesAndStart(Instance instance, String zone, String vmNa\n             }\n         });\n         try {\n-            return executeSynchronously(compute.instances().insert(project, zone, instance), project, zone);\n+            return executeSynchronously(compute.instances().insert(project, zone, instance), project, zone, \"insertVm\");\n         } catch (IOException ioe) {\n             throw new RuntimeException(\"Could not initialise insert operation!\", ioe);\n         }\n     }\n \n     void delete(String zone, String vm) {\n-        executeSynchronously(getWithRetries(() -> compute.instances().delete(project, zone, vm)), project, zone);\n+        executeSynchronously(getWithRetries(() -> compute.instances().delete(project, zone, vm)), project, zone, \"deleteVm\");", "originalCommit": "7fd5c8f6f1857526d69188bb263e97255ed22f84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7788daedb1eb99ae6758d6e2b12aa08d0692b1cc", "chunk": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java b/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\nindex 520d34d1..edf8866f 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/execution/vm/InstanceLifecycleManager.java\n\n@@ -82,15 +89,15 @@ class InstanceLifecycleManager {\n     }\n \n     void delete(String zone, String vm) {\n-        executeSynchronously(getWithRetries(() -> compute.instances().delete(project, zone, vm)), project, zone, \"deleteVm\");\n+        executeSynchronously(getWithRetries(() -> compute.instances().delete(project, zone, vm)), project, zone, DELETE_VM);\n     }\n \n     void stop(String zone, String vm) {\n-        executeSynchronously(getWithRetries(() -> compute.instances().stop(project, zone, vm)), project, zone, \"stopVm\");\n+        executeSynchronously(getWithRetries(() -> compute.instances().stop(project, zone, vm)), project, zone, STOP_VM);\n     }\n \n     private String operationStatus(String jobName, String zoneName) {\n-        return executeWithRetries(() -> compute.zoneOperations().get(project, zoneName, jobName).execute(), \"operationStatus\").getStatus();\n+        return executeWithRetries(() -> compute.zoneOperations().get(project, zoneName, jobName).execute(), OPERATION_STATUS).getStatus();\n     }\n \n     String instanceStatus(String vm, String zone) {\n"}}, {"oid": "7788daedb1eb99ae6758d6e2b12aa08d0692b1cc", "url": "https://github.com/hartwigmedical/pipeline5/commit/7788daedb1eb99ae6758d6e2b12aa08d0692b1cc", "message": "DEV-1428 Add test and infinite backoff", "committedDate": "2020-07-31T17:11:50Z", "type": "commit"}, {"oid": "8b6429ef94f639f454fedf6d7932c3df3cbb70b1", "url": "https://github.com/hartwigmedical/pipeline5/commit/8b6429ef94f639f454fedf6d7932c3df3cbb70b1", "message": "DEV-1428 Error in minutes to second conversion", "committedDate": "2020-07-31T17:23:18Z", "type": "commit"}]}