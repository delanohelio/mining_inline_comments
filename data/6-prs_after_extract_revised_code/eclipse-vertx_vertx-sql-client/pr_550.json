{"pr_number": 550, "pr_title": "Enable binary data type TCK tests", "pr_createdAt": "2020-03-19T16:55:56Z", "pr_url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/550", "timeline": [{"oid": "82e2c7774caf18341d96d20d2cd439b208c68592", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/82e2c7774caf18341d96d20d2cd439b208c68592", "message": "Enable binary data type TCK tests", "committedDate": "2020-03-19T17:01:37Z", "type": "forcePushed"}, {"oid": "8adfb8b583d47a491cd238f21cbaa409ee36aa12", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/8adfb8b583d47a491cd238f21cbaa409ee36aa12", "message": "Enable binary data type TCK tests", "committedDate": "2020-03-19T17:29:29Z", "type": "commit"}, {"oid": "8adfb8b583d47a491cd238f21cbaa409ee36aa12", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/8adfb8b583d47a491cd238f21cbaa409ee36aa12", "message": "Enable binary data type TCK tests", "committedDate": "2020-03-19T17:29:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5NzU4OA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/550#discussion_r395397588", "bodyText": "Why not just add \"return clazz == Numeric.class\" to canConvert in ClientTypes?  Is there a case where ClientTypes is a BIT, CHAR or LONGVARCHAR and you want to return a Numeric class only if it is not one of those types?", "author": "gjwatts", "createdAt": "2020-03-20T01:01:20Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/DB2ParamDesc.java", "diffHunk": "@@ -40,12 +43,29 @@ public String prepare(TupleInternal values) {\n         for (int i = 0; i < paramDefinitions.columns_; i++) {\n         \tObject val = values.getValue(i);\n         \tint type =  paramDefinitions.types_[i];\n-        \tif (!ClientTypes.canConvert(val, type)) {\n+        \tif (!canConvert(val, type)) {\n         \t\treturn \"Parameter at position [\" + i + \"] with class = [\" + val.getClass() + \n         \t\t\t\t\"] cannot be coerced to [\" + ClientTypes.getTypeString(type) + \"] for encoding\";\n         \t}\n         }\n         return null;\n     }\n+    \n+    private static boolean canConvert(Object val, int type) {\n+    \tif (ClientTypes.canConvert(val, type))\n+    \t\treturn true;\n+    \tClass<?> clazz = val.getClass();\n+    \tswitch (type) {\n+        case ClientTypes.BIGINT:\n+        case ClientTypes.BOOLEAN:\n+        case ClientTypes.DECIMAL:\n+        case ClientTypes.DOUBLE:\n+        case ClientTypes.INTEGER:\n+        case ClientTypes.REAL:\n+        case ClientTypes.SMALLINT:\n+        \treturn clazz == Numeric.class;\n+    \t}\n+    \treturn false;\n+    }\n ", "originalCommit": "8adfb8b583d47a491cd238f21cbaa409ee36aa12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MTU5OA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/550#discussion_r395641598", "bodyText": "right, the other types like CHAR, LONGVARCHAR, DATE, TIME, (and in the future BLOB and CLOB) won't be convertable to Numeric", "author": "aguibert", "createdAt": "2020-03-20T13:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5NzU4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5Nzg1Mg==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/550#discussion_r395397852", "bodyText": "Should we add a check to make sure the passed in i >= 0?  Or are we guaranteed a value that is 0+", "author": "gjwatts", "createdAt": "2020-03-20T01:02:44Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/ColumnMetaData.java", "diffHunk": "@@ -105,21 +107,48 @@ public void setColumnCount(final int numColumns) {\n     }\n     \n     public List<String> getColumnNames() {\n+    \tList<String> cols = new ArrayList<>(columns_);\n+    \tfor (int i = 0; i < columns_; i++) {\n+    \t\tcols.add(i, getColumnName(i));\n+    \t}\n+    \treturn cols;\n+    }\n+    \n+    public String getColumnName(int i) {\n     \t// Prefer column names from SQLDXGRP if set\n-    \tif (!isNull(sqlxName_))\n-    \t\treturn Collections.unmodifiableList(Stream.of(sqlxName_).collect(Collectors.toList()));\n+    \tif (sqlxName_ != null && i < sqlxName_.length && sqlxName_[i] != null)\n+    \t\treturn sqlxName_[i];\n     \t// Otherwise use column names from SQLDOPTGRP\n-    \tif (sqlName_ != null && sqlName_.length > 0)\n-    \t\treturn Collections.unmodifiableList(Stream.of(sqlName_).collect(Collectors.toList()));\n-    \treturn Collections.emptyList();\n+    \tif (sqlName_ != null && i < sqlName_.length)\n+    \t\treturn sqlName_[i];\n+    \treturn null;\n     }", "originalCommit": "8adfb8b583d47a491cd238f21cbaa409ee36aa12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5OTg0NQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/550#discussion_r395699845", "bodyText": "Good catch, I think this method will eventually be an SPI so I'll add the check in a follow-on PR", "author": "aguibert", "createdAt": "2020-03-20T15:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5Nzg1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5NzkzNQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/550#discussion_r395397935", "bodyText": "Remove?", "author": "gjwatts", "createdAt": "2020-03-20T01:03:04Z", "path": "vertx-sql-client/src/main/java/io/vertx/sqlclient/impl/ListTuple.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n import io.vertx.sqlclient.Tuple;\n \n+import java.util.Iterator;", "originalCommit": "8adfb8b583d47a491cd238f21cbaa409ee36aa12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}