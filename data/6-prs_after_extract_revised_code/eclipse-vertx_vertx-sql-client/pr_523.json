{"pr_number": 523, "pr_title": "Initial transaction implementation for DB2", "pr_createdAt": "2020-02-21T23:35:09Z", "pr_url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/523", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0OTIwOQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/523#discussion_r384549209", "bodyText": "missing curly braces for statement", "author": "vietj", "createdAt": "2020-02-26T15:02:31Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/ExtendedQueryCommandCodec.java", "diffHunk": "@@ -121,7 +118,8 @@ private void decodeUpdate(ByteBuf payload) {\n         int updatedCount = (int) updateResponse.readExecute();\n         // TODO: If auto-generated keys, read an OPNQRY here\n         // readOpenQuery()\n-        updateResponse.readLocalCommit();\n+        if (!cmd.inTransaction())", "originalCommit": "65f79be724e7aed73cce91c24aece7807551b6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6eb82d02b562c04045fe76fcf91222b6cf5a2b4e", "chunk": "diff --git a/vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/ExtendedQueryCommandCodec.java b/vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/ExtendedQueryCommandCodec.java\nindex 0eafb807..19191a9e 100644\n--- a/vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/ExtendedQueryCommandCodec.java\n+++ b/vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/ExtendedQueryCommandCodec.java\n\n@@ -118,8 +119,9 @@ class ExtendedQueryCommandCodec<R> extends ExtendedQueryCommandBaseCodec<R, Exte\n         int updatedCount = (int) updateResponse.readExecute();\n         // TODO: If auto-generated keys, read an OPNQRY here\n         // readOpenQuery()\n-        if (!cmd.inTransaction())\n+        if (cmd.autoCommit()) {\n           updateResponse.readLocalCommit();\n+        }\n \n         R result = emptyResult(cmd.collector());\n         cmd.resultHandler().handleResult(updatedCount, 0, null, result, null);\n"}}, {"oid": "6eb82d02b562c04045fe76fcf91222b6cf5a2b4e", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/6eb82d02b562c04045fe76fcf91222b6cf5a2b4e", "message": "Initial transaction implementation for DB2 module", "committedDate": "2020-02-28T17:35:23Z", "type": "forcePushed"}, {"oid": "0ed3b78eca69aa880d1d05777cb8d58eba333911", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/0ed3b78eca69aa880d1d05777cb8d58eba333911", "message": "Initial transaction implementation for DB2 module", "committedDate": "2020-02-28T17:44:35Z", "type": "forcePushed"}, {"oid": "0937210be54e5be81b124d928308512c7d79740b", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/0937210be54e5be81b124d928308512c7d79740b", "message": "Initial transaction implementation for DB2 module", "committedDate": "2020-02-28T17:46:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzcyMw==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/523#discussion_r390163723", "bodyText": "could we get these tests in the TCK ?", "author": "vietj", "createdAt": "2020-03-10T08:47:14Z", "path": "vertx-db2-client/src/test/java/io/vertx/db2client/DB2TransactionTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright (C) 2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.db2client.junit.DB2Resource;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.SqlClient;\n+import io.vertx.sqlclient.Transaction;\n+import io.vertx.sqlclient.Tuple;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class DB2TransactionTest {", "originalCommit": "0937210be54e5be81b124d928308512c7d79740b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62b7eac6151510d8337c700e8c2d1a3abc56d997", "chunk": "diff --git a/vertx-db2-client/src/test/java/io/vertx/db2client/DB2TransactionTest.java b/vertx-db2-client/src/test/java/io/vertx/db2client/DB2TransactionTest.java\ndeleted file mode 100644\nindex a0462538..00000000\n--- a/vertx-db2-client/src/test/java/io/vertx/db2client/DB2TransactionTest.java\n+++ /dev/null\n\n@@ -1,209 +0,0 @@\n-/*\n- * Copyright (C) 2020 IBM Corporation\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.vertx.db2client;\n-\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.function.Consumer;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-import io.vertx.core.AsyncResult;\n-import io.vertx.core.Handler;\n-import io.vertx.core.Vertx;\n-import io.vertx.db2client.junit.DB2Resource;\n-import io.vertx.ext.unit.Async;\n-import io.vertx.ext.unit.TestContext;\n-import io.vertx.ext.unit.junit.VertxUnitRunner;\n-import io.vertx.sqlclient.PoolOptions;\n-import io.vertx.sqlclient.Row;\n-import io.vertx.sqlclient.SqlClient;\n-import io.vertx.sqlclient.Transaction;\n-import io.vertx.sqlclient.Tuple;\n-\n-@RunWith(VertxUnitRunner.class)\n-public class DB2TransactionTest {\n-  \n-  @ClassRule\n-  public static DB2Resource rule = DB2Resource.SHARED_INSTANCE;\n-  \n-  private Vertx vertx;\n-  private DB2Pool pool;\n-  private Consumer<Handler<AsyncResult<Transaction>>> connector;\n-  \n-  @BeforeClass\n-  public static void beforeAll(TestContext ctx) throws Exception {\n-    DB2Pool pool = DB2Pool.pool(Vertx.vertx(), new DB2ConnectOptions(rule.options()), new PoolOptions().setMaxSize(1));\n-    pool.query(\"DELETE FROM mutable\", ctx.asyncAssertSuccess(result -> {}));\n-  }\n-  \n-  @Before\n-  public void setup() throws Exception {\n-    vertx = Vertx.vertx();\n-    connector = handler -> {\n-      if (pool == null) {\n-        pool = DB2Pool.pool(vertx, new DB2ConnectOptions(rule.options()), new PoolOptions().setMaxSize(1));\n-      }\n-      pool.begin(handler);\n-    };\n-  }\n-\n-  @After\n-  public void teardown(TestContext ctx) {\n-    vertx.close(ctx.asyncAssertSuccess());\n-  }\n-  \n-  @Test\n-  public void testReleaseConnectionOnCommit(TestContext ctx) {\n-    Async async = ctx.async();\n-    connector.accept(ctx.asyncAssertSuccess(conn -> {\n-      conn.query(\"UPDATE Fortune SET message = 'Whatever' WHERE id = 9\", ctx.asyncAssertSuccess(result -> {\n-        ctx.assertEquals(1, result.rowCount());\n-        conn.commit(ctx.asyncAssertSuccess(v1 -> {\n-          // Try acquire a connection\n-          pool.getConnection(ctx.asyncAssertSuccess(v2 -> {\n-            async.complete();\n-          }));\n-        }));\n-      }));\n-    }));\n-  }\n-\n-  @Test\n-  public void testReleaseConnectionOnRollback(TestContext ctx) {\n-    Async async = ctx.async();\n-    connector.accept(ctx.asyncAssertSuccess(conn -> {\n-      conn.query(\"UPDATE Fortune SET message = 'Whatever' WHERE id = 9\", ctx.asyncAssertSuccess(result -> {\n-        ctx.assertEquals(1, result.rowCount());\n-        conn.rollback(ctx.asyncAssertSuccess(v1 -> {\n-          // Try acquire a connection\n-          pool.getConnection(ctx.asyncAssertSuccess(v2 -> {\n-            async.complete();\n-          }));\n-        }));\n-      }));\n-    }));\n-  }\n-\n-  @Test\n-  public void testReleaseConnectionOnSetRollback(TestContext ctx) {\n-    Async async = ctx.async();\n-    connector.accept(ctx.asyncAssertSuccess(conn -> {\n-      conn.abortHandler(v -> {\n-        // Try acquire the same connection on rollback\n-        pool.getConnection(ctx.asyncAssertSuccess(v2 -> {\n-          async.complete();\n-        }));\n-      });\n-      // Failure will abort\n-      conn.query(\"SELECT whatever from DOES_NOT_EXIST\", ctx.asyncAssertFailure(result -> { }));\n-    }));\n-  }\n-\n-  @Test\n-  public void testCommitWithPreparedQuery(TestContext ctx) {\n-    Async async = ctx.async();\n-    connector.accept(ctx.asyncAssertSuccess(conn -> {\n-      conn.preparedQuery(\"INSERT INTO mutable (id, val) VALUES (?, ?);\", Tuple.of(13, \"test message1\"), ctx.asyncAssertSuccess(result -> {\n-        ctx.assertEquals(1, result.rowCount());\n-        conn.commit(ctx.asyncAssertSuccess(v1 -> {\n-          pool.query(\"SELECT id, val from mutable where id = 13\", ctx.asyncAssertSuccess(rowSet -> {\n-            ctx.assertEquals(1, rowSet.rowCount());\n-            Row row = rowSet.iterator().next();\n-            ctx.assertEquals(13, row.getInteger(\"id\"));\n-            ctx.assertEquals(\"test message1\", row.getString(\"val\"));\n-            async.complete();\n-          }));\n-        }));\n-      }));\n-    }));\n-  }\n-\n-  @Test\n-  public void testCommitWithQuery(TestContext ctx) {\n-    Async async = ctx.async();\n-    connector.accept(ctx.asyncAssertSuccess(conn -> {\n-      conn.query(\"INSERT INTO mutable (id, val) VALUES (14, 'test message2');\", ctx.asyncAssertSuccess(result -> {\n-        ctx.assertEquals(1, result.rowCount());\n-        conn.commit(ctx.asyncAssertSuccess(v1 -> {\n-          pool.query(\"SELECT id, val from mutable where id = 14\", ctx.asyncAssertSuccess(rowSet -> {\n-            ctx.assertEquals(1, rowSet.rowCount());\n-            Row row = rowSet.iterator().next();\n-            ctx.assertEquals(14, row.getInteger(\"id\"));\n-            ctx.assertEquals(\"test message2\", row.getString(\"val\"));\n-            async.complete();\n-          }));\n-        }));\n-      }));\n-    }));\n-  }\n-  \n-  @Test\n-  public void testRollbackData(TestContext ctx) {\n-    Async async = ctx.async();\n-    connector.accept(ctx.asyncAssertSuccess(conn -> {\n-      conn.query(\"UPDATE immutable SET message = 'roll me back' WHERE id = 7\", ctx.asyncAssertSuccess(result -> {\n-        ctx.assertEquals(1, result.rowCount());\n-        conn.rollback(ctx.asyncAssertSuccess(v1 -> {\n-          pool.query(\"SELECT id, message from immutable where id = 7\", ctx.asyncAssertSuccess(rowSet -> {\n-            ctx.assertEquals(1, rowSet.rowCount());\n-            Row row = rowSet.iterator().next();\n-            ctx.assertEquals(7, row.getInteger(\"id\"));\n-            ctx.assertEquals(\"Any program that runs right is obsolete.\", row.getString(\"message\"));\n-            async.complete();\n-          }));\n-        }));\n-      }));\n-    }));\n-  }\n-  \n-  @Test\n-  public void testDelayedCommit(TestContext ctx) {\n-    DB2Pool nonTxPool = DB2Pool.pool(vertx, new DB2ConnectOptions(rule.options()), new PoolOptions().setMaxSize(1));\n-    Async async = ctx.async();\n-    connector.accept(ctx.asyncAssertSuccess(conn -> {\n-      conn.query(\"INSERT INTO mutable (id, val) VALUES (15, 'wait for it...')\", ctx.asyncAssertSuccess(result -> {\n-        ctx.assertEquals(1, result.rowCount());\n-        // Should find the data within the same transaction\n-        conn.query(\"SELECT id, val from mutable WHERE id = 15\", ctx.asyncAssertSuccess(txRows -> {\n-          ctx.assertEquals(1, txRows.rowCount());\n-          Row r = txRows.iterator().next();\n-          ctx.assertEquals(15, r.getInteger(\"id\"));\n-          ctx.assertEquals(\"wait for it...\", r.getString(\"val\"));\n-          // Should NOT find the data from outside of the transaction\n-          nonTxPool.query(\"SELECT id, val from mutable WHERE id = 15\", ctx.asyncAssertSuccess(notFound -> {\n-            ctx.assertEquals(0, notFound.rowCount());\n-            conn.commit(ctx.asyncAssertSuccess(nonTxRows -> {\n-              nonTxPool.query(\"SELECT id, val from mutable WHERE id = 15\", ctx.asyncAssertSuccess(nonTxFound -> {\n-                // After commiting the transaction, the data should be visible from other connections\n-                ctx.assertEquals(1, nonTxFound.rowCount());\n-                Row nonTxRow = nonTxFound.iterator().next();\n-                ctx.assertEquals(15, nonTxRow.getInteger(\"id\"));\n-                ctx.assertEquals(\"wait for it...\", nonTxRow.getString(\"val\"));\n-                async.complete();\n-              }));\n-            }));\n-          }));\n-        }));\n-      }));\n-    }));\n-  }\n-    \n-}\n"}}, {"oid": "62b7eac6151510d8337c700e8c2d1a3abc56d997", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/62b7eac6151510d8337c700e8c2d1a3abc56d997", "message": "Add autoCommit property to internal SqlClientBase and QueryCommandBase", "committedDate": "2020-03-10T15:59:42Z", "type": "commit"}, {"oid": "32f2b87243a67f7888a4d8f1498751ed6dba55a3", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/32f2b87243a67f7888a4d8f1498751ed6dba55a3", "message": "Initial transaction implementation for DB2 module", "committedDate": "2020-03-10T15:59:42Z", "type": "commit"}, {"oid": "ccb2584090fcc14769a5d3c4a3c72e5f1cd55a7d", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/ccb2584090fcc14769a5d3c4a3c72e5f1cd55a7d", "message": "Move transaction tests to common TCK", "committedDate": "2020-03-12T16:31:26Z", "type": "commit"}, {"oid": "ccb2584090fcc14769a5d3c4a3c72e5f1cd55a7d", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/ccb2584090fcc14769a5d3c4a3c72e5f1cd55a7d", "message": "Move transaction tests to common TCK", "committedDate": "2020-03-12T16:31:26Z", "type": "forcePushed"}]}