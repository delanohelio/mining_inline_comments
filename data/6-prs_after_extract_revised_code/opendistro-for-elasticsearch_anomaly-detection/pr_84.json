{"pr_number": 84, "pr_title": "Add state and error to profile API", "pr_createdAt": "2020-04-10T23:08:07Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84", "timeline": [{"oid": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/7ed1fec205ba998968880a7f5415cf21b41c2b19", "message": "Add state and error to profile API\n\nWe want to make it easy for customers and oncalls to identify a detector\u2019s state and error if any. This PR adds such information to our new profile API.\n\nWe expect three kinds of states:\n-Disabled: if get ad job api says the job is disabled;\n-Init: if anomaly score after the last update time of the detector is larger than 0\n-Running: if neither of the above applies and no exceptions.\n\nError is populated if error of the latest anomaly result is not empty.\n\nTesting done:\n-manual testing during a detector\u2019s life cycle: not created, created but not started, started, during initialization, after initialization, stopped, restarted\n-added unit tests to cover above scenario", "committedDate": "2020-04-10T23:05:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4Njc2MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407886760", "bodyText": "Use job enabled_time here, think of the case : detector last update time not changed, but we disabled and restarted job multiple times. So we may get some AD result with non-zero anomaly score which generated before latest job enabled time, but actually the latest AD job is still initializing.", "author": "ylwu-amzn", "createdAt": "2020-04-14T06:04:16Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));\n+            } else {\n+                SearchHit hit = hits.getAt(0);\n+\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, hit.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyResult result = parser.namedObject(AnomalyResult.class, AnomalyResult.PARSE_FIELD_NAME, null);\n+\n+                    DetectorProfile profile = new DetectorProfile();\n+                    if (result.getError() != null) {\n+                        profile.setError(result.getError());\n+                    }\n+                    listener.onResponse(profile);\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(\"Fail to parse anomaly result with \" + hit.toString());\n+                    listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, e));\n+                }\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onResponse(new DetectorProfile());\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: \" + detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create search request to check if we have at least 1 anomaly score larger than 0 after last update time\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeEpochMs last update time in milliseconds\n+     * @return the search request\n+     */\n+    private SearchRequest createInittedEverRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4NzEzMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408387130", "bodyText": "good point. Done.", "author": "kaituo", "createdAt": "2020-04-14T19:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4Njc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NzY3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407887672", "bodyText": "Similar as line 260, we should use AD job \"enabled_time\"", "author": "ylwu-amzn", "createdAt": "2020-04-14T06:07:07Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));\n+            } else {\n+                SearchHit hit = hits.getAt(0);\n+\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, hit.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyResult result = parser.namedObject(AnomalyResult.class, AnomalyResult.PARSE_FIELD_NAME, null);\n+\n+                    DetectorProfile profile = new DetectorProfile();\n+                    if (result.getError() != null) {\n+                        profile.setError(result.getError());\n+                    }\n+                    listener.onResponse(profile);\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(\"Fail to parse anomaly result with \" + hit.toString());\n+                    listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, e));\n+                }\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onResponse(new DetectorProfile());\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: \" + detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector error: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create search request to check if we have at least 1 anomaly score larger than 0 after last update time\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeEpochMs last update time in milliseconds\n+     * @return the search request\n+     */\n+    private SearchRequest createInittedEverRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.ANOMALY_SCORE_FIELD).gt(0));\n+\n+        SearchSourceBuilder source = new SearchSourceBuilder().query(filterQuery).size(1);\n+\n+        SearchRequest request = new SearchRequest(AnomalyResult.ANOMALY_RESULT_INDEX);\n+        request.source(source);\n+        return request;\n+    }\n+\n+    private SearchRequest createLatestAnomalyResultRequest(String detectorId, long lastUpdateTimeEpochMs) {\n+        BoolQueryBuilder filterQuery = new BoolQueryBuilder();\n+        filterQuery.filter(QueryBuilders.termQuery(AnomalyResult.DETECTOR_ID_FIELD, detectorId));\n+        filterQuery.filter(QueryBuilders.rangeQuery(AnomalyResult.EXECUTION_END_TIME_FIELD).gte(lastUpdateTimeEpochMs));", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4ODU0Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408388546", "bodyText": "done", "author": "kaituo", "createdAt": "2020-04-14T19:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NzY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4OTE2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407889166", "bodyText": "log exception stack trace to make operation easier? Similar to other places", "author": "ylwu-amzn", "createdAt": "2020-04-14T06:11:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5MDQyOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408390428", "bodyText": "The catch block is changed after addressing other comments.  New code would log stack trace.", "author": "kaituo", "createdAt": "2020-04-14T19:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4OTE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMTgwNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407901806", "bodyText": "saved means the responses are from some saved result from ES indices ? Or means we cache these response ?", "author": "ylwu-amzn", "createdAt": "2020-04-14T06:45:26Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MDA5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408450096", "bodyText": "the latter. Added a comment.", "author": "kaituo", "createdAt": "2020-04-14T21:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMTgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nsimilarity index 78%\nrename from src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java\nrename to src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nindex a57d5dd..a08b36b 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n\n@@ -27,21 +27,24 @@ import org.elasticsearch.action.ActionListener;\n \n import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n \n-public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n-    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n     private final ActionListener<T> delegate;\n     private final AtomicInteger collectedResponseCount;\n     private final int expectedResponseCount;\n+    // save responses from multiple requests\n     private final List<T> savedResponses;\n     private List<String> exceptions;\n     private String finalErrorMsg;\n \n-    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n         this.delegate = delegate;\n         this.collectedResponseCount = new AtomicInteger(0);\n         this.expectedResponseCount = expectedResponseCount;\n         this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n-        ;\n         this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n         this.finalErrorMsg = finalErrorMsg;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjA5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407906092", "bodyText": "How about we add some comments about what TYPE means and the supported value?", "author": "ylwu-amzn", "createdAt": "2020-04-14T06:55:36Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -55,11 +65,32 @@\n \n     private static final String GET_ANOMALY_DETECTOR_ACTION = \"get_anomaly_detector\";\n     private static final Logger logger = LogManager.getLogger(RestGetAnomalyDetectorAction.class);\n+    private final AnomalyDetectorProfileRunner profileRunner;\n+    private final Set<String> allProfileTypeStrs;\n+\n+    public RestGetAnomalyDetectorAction(\n+        RestController controller,\n+        AnomalyDetectorProfileRunner profileRunner,\n+        Set<String> allProfileTypeStrs\n+    ) {\n+        this.profileRunner = profileRunner;\n+        this.allProfileTypeStrs = allProfileTypeStrs;\n \n-    public RestGetAnomalyDetectorAction(RestController controller) {\n         String path = String.format(Locale.ROOT, \"%s/{%s}\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID);\n         controller.registerHandler(RestRequest.Method.GET, path, this);\n         controller.registerHandler(RestRequest.Method.HEAD, path, this);\n+        controller\n+            .registerHandler(\n+                RestRequest.Method.GET,\n+                String.format(Locale.ROOT, \"%s/{%s}/%s\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID, PROFILE),\n+                this\n+            );\n+        controller\n+            .registerHandler(\n+                RestRequest.Method.GET,\n+                String.format(Locale.ROOT, \"%s/{%s}/%s/{%s}\", AnomalyDetectorPlugin.AD_BASE_DETECTORS_URI, DETECTOR_ID, PROFILE, TYPE),", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMzI0OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408433248", "bodyText": "done", "author": "kaituo", "createdAt": "2020-04-14T21:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java\nindex 4734125..21e142e 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java\n\n@@ -67,6 +68,7 @@ public class RestGetAnomalyDetectorAction extends BaseRestHandler {\n     private static final Logger logger = LogManager.getLogger(RestGetAnomalyDetectorAction.class);\n     private final AnomalyDetectorProfileRunner profileRunner;\n     private final Set<String> allProfileTypeStrs;\n+    private final Set<ProfileName> allProfileTypes;\n \n     public RestGetAnomalyDetectorAction(\n         RestController controller,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjUwOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407906508", "bodyText": "How about we validate type here and return Set<ProfileName>?", "author": "ylwu-amzn", "createdAt": "2020-04-14T06:56:38Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -148,4 +178,25 @@ public RestResponse buildResponse(MultiGetResponse multiGetResponse) throws Exce\n         };\n     }\n \n+    private ActionListener<DetectorProfile> getProfileActionListener(RestChannel channel, String detectorId) {\n+        return ActionListener\n+            .wrap(\n+                profile -> { channel.sendResponse(new BytesRestResponse(RestStatus.OK, profile.toXContent(channel.newBuilder()))); },\n+                exception -> { channel.sendResponse(buildInternalServerErrorResponse(exception, exception.getMessage())); }\n+            );\n+    }\n+\n+    private RestResponse buildInternalServerErrorResponse(Exception e, String errorMsg) {\n+        logger.error(errorMsg, e);\n+        return new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, errorMsg);\n+    }\n+\n+    private Set<String> getProfilesToCollect(String typesStr) {", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0ODgyMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408448822", "bodyText": "done", "author": "kaituo", "createdAt": "2020-04-14T21:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java\nindex 4734125..21e142e 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java\n\n@@ -191,12 +196,12 @@ public class RestGetAnomalyDetectorAction extends BaseRestHandler {\n         return new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, errorMsg);\n     }\n \n-    private Set<String> getProfilesToCollect(String typesStr) {\n+    private Set<ProfileName> getProfilesToCollect(String typesStr) {\n         if (Strings.isEmpty(typesStr)) {\n-            return this.allProfileTypeStrs;\n+            return this.allProfileTypes;\n         } else {\n             Set<String> typesInRequest = new HashSet<>(Arrays.asList(typesStr.split(\",\")));\n-            return Sets.intersection(this.allProfileTypeStrs, typesInRequest);\n+            return ProfileName.getNames(Sets.intersection(this.allProfileTypeStrs, typesInRequest));\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMzMwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407913301", "bodyText": "Seems you design this general delegate listener not only for profile API. Can you add more comments? Suggest to use a more specific name like MultiResponsesDelegateActionListener ?", "author": "ylwu-amzn", "createdAt": "2020-04-14T07:11:31Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTc4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408449782", "bodyText": "done", "author": "kaituo", "createdAt": "2020-04-14T21:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMzMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nsimilarity index 78%\nrename from src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java\nrename to src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nindex a57d5dd..a08b36b 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n\n@@ -27,21 +27,24 @@ import org.elasticsearch.action.ActionListener;\n \n import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n \n-public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n-    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n     private final ActionListener<T> delegate;\n     private final AtomicInteger collectedResponseCount;\n     private final int expectedResponseCount;\n+    // save responses from multiple requests\n     private final List<T> savedResponses;\n     private List<String> exceptions;\n     private String finalErrorMsg;\n \n-    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n         this.delegate = delegate;\n         this.collectedResponseCount = new AtomicInteger(0);\n         this.expectedResponseCount = expectedResponseCount;\n         this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n-        ;\n         this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n         this.finalErrorMsg = finalErrorMsg;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNTc2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407915765", "bodyText": "If expectedResponseCount==0 , collectedResponseCount.incrementAndGet() will always greater than expectedResponseCount , please add some validation for expectedResponseCount, or change to collectedResponseCount.incrementAndGet() >= expectedResponseCount", "author": "ylwu-amzn", "createdAt": "2020-04-14T07:16:25Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        ;\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MDcwOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408450708", "bodyText": "good point.  Used the latter.", "author": "kaituo", "createdAt": "2020-04-14T21:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNTc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nsimilarity index 78%\nrename from src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java\nrename to src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nindex a57d5dd..a08b36b 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n\n@@ -27,21 +27,24 @@ import org.elasticsearch.action.ActionListener;\n \n import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n \n-public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n-    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n     private final ActionListener<T> delegate;\n     private final AtomicInteger collectedResponseCount;\n     private final int expectedResponseCount;\n+    // save responses from multiple requests\n     private final List<T> savedResponses;\n     private List<String> exceptions;\n     private String finalErrorMsg;\n \n-    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n         this.delegate = delegate;\n         this.collectedResponseCount = new AtomicInteger(0);\n         this.expectedResponseCount = expectedResponseCount;\n         this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n-        ;\n         this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n         this.finalErrorMsg = finalErrorMsg;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNzc1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407917755", "bodyText": "Why log response0 here? Similar for line 84.", "author": "ylwu-amzn", "createdAt": "2020-04-14T07:20:11Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        ;\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() == expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+    }\n+\n+    private void finish() {\n+        if (this.exceptions.size() == 0) {\n+            if (savedResponses.size() == 0) {\n+                this.delegate.onFailure(new RuntimeException(String.format(\"Unexpected exceptions\")));\n+            } else {\n+                T response0 = savedResponses.get(0);\n+                LOG.info(response0);", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MjM4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408452386", "bodyText": "It is used for debugging.  removed.", "author": "kaituo", "createdAt": "2020-04-14T21:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNzc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nsimilarity index 78%\nrename from src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java\nrename to src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nindex a57d5dd..a08b36b 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/DelegateActionListener.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n\n@@ -27,21 +27,24 @@ import org.elasticsearch.action.ActionListener;\n \n import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n \n-public class DelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n-    private static final Logger LOG = LogManager.getLogger(DelegateActionListener.class);\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n     private final ActionListener<T> delegate;\n     private final AtomicInteger collectedResponseCount;\n     private final int expectedResponseCount;\n+    // save responses from multiple requests\n     private final List<T> savedResponses;\n     private List<String> exceptions;\n     private String finalErrorMsg;\n \n-    public DelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n         this.delegate = delegate;\n         this.collectedResponseCount = new AtomicInteger(0);\n         this.expectedResponseCount = expectedResponseCount;\n         this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n-        ;\n         this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n         this.finalErrorMsg = finalErrorMsg;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyMjM4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407922381", "bodyText": "Here, the finalErrorMsg is \"Fail to fetch profile for \" + detectorId.\nFrom line89 of class DelegateActionListener: this.delegate.onFailure(new RuntimeException(String.format(Locale.ROOT, finalErrorMsg, exceptions)));,  String.format(...) will not include exceptions, is this by design?", "author": "ylwu-amzn", "createdAt": "2020-04-14T07:28:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5MTk4OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408391988", "bodyText": "String.format(...) would include exception message.  Could you explain your questions?", "author": "kaituo", "createdAt": "2020-04-14T19:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyMjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwNzM0Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408507346", "bodyText": "fixed as we discussed offline.", "author": "kaituo", "createdAt": "2020-04-15T00:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyMjM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNjAxMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407926010", "bodyText": "How about we change to \"Must set at least one profile type\" to avoid confusion between empty profile types and wrong profile types which we don't support?", "author": "ylwu-amzn", "createdAt": "2020-04-14T07:35:21Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NDM0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408394349", "bodyText": "RestGetAnomalyDetectorAction.getProfilesToCollect would return an interaction between valid types and the provided types.  If the result is empty, it means all of the types from the users are unsupported. So the error is not that customers have not set at least one profile type.  It is all of the profile types are invalid.", "author": "kaituo", "createdAt": "2020-04-14T19:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMDUxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407930515", "bodyText": "minor: can use this method: listener.failImmediately(String errMsg, Exception e)", "author": "ylwu-amzn", "createdAt": "2020-04-14T07:43:24Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NTM1MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408395350", "bodyText": "Good catch. Fixed.", "author": "kaituo", "createdAt": "2020-04-14T19:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMDUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTU1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407935555", "bodyText": "If some uncatched exception, will not execute listener.onFailure method, collectedResponseCount will not increase, so will never execute finish.\nSuggest to catch Exception here to avoid some uncatched exceptions. Similar to line 236", "author": "ylwu-amzn", "createdAt": "2020-04-14T07:52:33Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyNjI2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408426267", "bodyText": "If some uncatched exception,  control flow would be redirected to the exception branch and listener.onFailure would be called.  Please see the implementation of ActionListener.", "author": "kaituo", "createdAt": "2020-04-14T20:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0MDkwNw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407940907", "bodyText": "Can we add custom error message here?", "author": "ylwu-amzn", "createdAt": "2020-04-14T08:01:11Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyNzU1NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408427554", "bodyText": "This line is removed after addressing other comments.", "author": "kaituo", "createdAt": "2020-04-14T20:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0MDkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NTcxMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407945710", "bodyText": "minor: make the error message more accurate, like Fail to find latest anomaly result with anomalyScore>0 from XXX for detector XXX", "author": "ylwu-amzn", "createdAt": "2020-04-14T08:09:27Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyOTc4NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408429784", "bodyText": "done", "author": "kaituo", "createdAt": "2020-04-14T20:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NTcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0OTU1OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r407949558", "bodyText": "Why throw exception if we can't find AD result ? If not AD result, that means AD job is initializing and no error. But from DelegateActionListener  line 89, if any exception occurs, will execute this.delegate.onFailure(...) rather than return Init state and null error.", "author": "ylwu-amzn", "createdAt": "2020-04-14T08:15:44Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE.getName()) || profiles.contains(ProfileName.ERROR.getName())) {\n+            prepareProfileStateNError(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfileStateNError(String detectorId, DelegateActionListener<DetectorProfile> listener, Set<String> profiles) {\n+        GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+        client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+    }\n+\n+    private ActionListener<GetResponse> onGetDetectorResponse(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        Set<String> profiles\n+    ) {\n+        return ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetector detector = parser.namedObject(AnomalyDetector.class, AnomalyDetector.PARSE_FIELD_NAME, null);\n+                    long lastUpdateTimeMs = detector.getLastUpdateTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE.getName())) {\n+                        profileState(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR.getName())) {\n+                        profileError(detectorId, lastUpdateTimeMs, listener);\n+                    }\n+\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(new RuntimeException(FAIL_TO_FIND_DETECTOR_MSG + detectorId, e));\n+                }\n+            } else {\n+                listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId);\n+            }\n+        }, exception -> { listener.failImmediately(FAIL_TO_FIND_DETECTOR_MSG + detectorId, exception); });\n+    }\n+\n+    /**\n+     * We expect three kinds of states:\n+     *  -Disabled: if get ad job api says the job is disabled;\n+     *  -Init: if anomaly score after the last update time of the detector is larger than 0\n+     *  -Running: if neither of the above applies and no exceptions.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned state or exception\n+     */\n+    private void profileState(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    if (job.isEnabled()) {\n+                        SearchRequest searchLatestResult = createInittedEverRequest(detectorId, lastUpdateTimeMs);\n+                        client.search(searchLatestResult, onInittedEver(listener, detectorId, lastUpdateTimeMs));\n+                    } else {\n+                        DetectorProfile profile = new DetectorProfile();\n+                        profile.setState(DetectorState.DISABLED);\n+                        listener.onResponse(profile);\n+                    }\n+                } catch (IOException | XContentParseException e) {\n+                    String error = \"Fail to parse detector with id: \" + detectorId;\n+                    logger.error(error);\n+                    listener.onFailure(new RuntimeException(error, e));\n+                }\n+            } else {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            }\n+        }, exception -> {\n+            logger.warn(exception);\n+            // detector job index does not exist\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                profile.setState(DetectorState.DISABLED);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to get detector state for \" + detectorId);\n+                listener.onFailure(exception);\n+            }\n+        }));\n+\n+    }\n+\n+    private ActionListener<SearchResponse> onInittedEver(\n+        DelegateActionListener<DetectorProfile> listener,\n+        String detectorId,\n+        long lastUpdateTimeMs\n+    ) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            DetectorProfile profile = new DetectorProfile();\n+            if (hits.getTotalHits().value == 0L) {\n+                profile.setState(DetectorState.INIT);\n+            } else {\n+                profile.setState(DetectorState.RUNNING);\n+            }\n+\n+            listener.onResponse(profile);\n+\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {\n+                DetectorProfile profile = new DetectorProfile();\n+                // anomaly result index is not created yet\n+                profile.setState(DetectorState.INIT);\n+                listener.onResponse(profile);\n+            } else {\n+                logger.error(\"Fail to find latest anomaly result of id: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Fail to find detector state: \" + detectorId, exception));\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Error is populated if error of the latest anomaly result is not empty.\n+     * @param detectorId detector id\n+     * @param lastUpdateTimeMs last update time of the detector in milliseconds\n+     * @param listener listener to process the returned error or exception\n+     */\n+    private void profileError(String detectorId, long lastUpdateTimeMs, DelegateActionListener<DetectorProfile> listener) {\n+        SearchRequest searchLatestResult = createLatestAnomalyResultRequest(detectorId, lastUpdateTimeMs);\n+        client.search(searchLatestResult, onGetLatestAnomalyResult(listener, detectorId));\n+    }\n+\n+    private ActionListener<SearchResponse> onGetLatestAnomalyResult(ActionListener<DetectorProfile> listener, String detectorId) {\n+        return ActionListener.wrap(searchResponse -> {\n+            SearchHits hits = searchResponse.getHits();\n+            if (hits.getTotalHits().value == 0L) {\n+                logger.error(\"We should not get empty result: {}\", detectorId);\n+                listener.onFailure(new RuntimeException(\"Unexpected error while looking for detector state:  \" + detectorId));", "originalCommit": "7ed1fec205ba998968880a7f5415cf21b41c2b19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMTYzMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r408431630", "bodyText": "good catch.  Fixed.", "author": "kaituo", "createdAt": "2020-04-14T20:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0OTU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b445fb8e91640794c5bcd707054564b33d0a9716", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex 6f22d4d..bf1e7c9 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -44,27 +44,27 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n \n-import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n-import com.amazon.opendistroforelasticsearch.ad.util.DelegateActionListener;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n \n public class AnomalyDetectorProfileRunner {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n     private Client client;\n     private NamedXContentRegistry xContentRegistry;\n     static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n \n     public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n         this.client = client;\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<String> profiles) {\n-        DelegateActionListener<DetectorProfile> delegateListener = new DelegateActionListener<DetectorProfile>(\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n             listener,\n             profiles.size(),\n             \"Fail to fetch profile for \" + detectorId\n"}}, {"oid": "6a1a304ab1d71841a2dac7c226560f06cb66825a", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/6a1a304ab1d71841a2dac7c226560f06cb66825a", "message": "Added URL for jb_scheduler-plugin_zip instead of local file path (#82)\n\n* Added URL for jb_scheduler-plugin_zip instead of local file path\r\n\r\n* Fixed windows path by adding additional /", "committedDate": "2020-04-15T01:37:39Z", "type": "commit"}, {"oid": "c04e836c03069617bac4fd2c5bda648f2464d890", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/c04e836c03069617bac4fd2c5bda648f2464d890", "message": "Use callbacks and bug fix (#83)\n\n* Use callbacks and bug fix\r\n\r\nThis PR includes the following changes:\r\n\r\n1. remove classes that are not needed in jacocoExclusions since we have enough coverage for those classes.\r\n2. Use ClientUtil instead of Elasticsearch\u2019s client in AD job runner\r\n3. Use one function to get the number of partitioned forests. Previously, we have redundant code in both ModelManager and ADStateManager.\r\n4. Change ADStateManager.getAnomalyDetector to use callback.\r\n5. Change AnomalyResultTransportAction to use callback to get features.\r\n6. Add in AnomalyResultTransportAction to handle the case where all features have been disabled, and users' index does not exist.\r\n7. Change get RCF and threshold result methods to use callback and add exception handling of IndexNotFoundException due to the change. Previously, getting RCF and threshold result methods won\u2019t throw IndexNotFoundException.\r\n8. Remove unused fields in StopDetectorTransportAction and AnomalyResultTransportAction\r\n9. Unwrap EsRejectedExecutionException as it can be nested inside RemoteTransportException. Previously, we would not recognize EsRejectedExecutionException and thus miss anomaly results write retrying.\r\n10. Add error in anomaly result schema.11. Fix broken tests due to my changes.\r\n\r\nTesting done:\r\n1. unit/integration tests pass\r\n2. do end-to-end testing and make sure my fix achieves the purpose\u00a0\r\n   * timeout issue is gone\u00a0\r\n   * when all features have been disabled or index does not exist, we will retry a few more times and disable AD jobs.", "committedDate": "2020-04-15T01:38:26Z", "type": "commit"}, {"oid": "db4543ca46c21320cbe9663e82e9d124caa2d068", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/db4543ca46c21320cbe9663e82e9d124caa2d068", "message": "Add state and error to profile API\n\nWe want to make it easy for customers and oncalls to identify a detector\u2019s state and error if any. This PR adds such information to our new profile API.\n\nWe expect three kinds of states:\n-Disabled: if get ad job api says the job is disabled;\n-Init: if anomaly score after the last update time of the detector is larger than 0\n-Running: if neither of the above applies and no exceptions.\n\nError is populated if error of the latest anomaly result is not empty.\n\nTesting done:\n-manual testing during a detector\u2019s life cycle: not created, created but not started, started, during initialization, after initialization, stopped, restarted\n-added unit tests to cover above scenario", "committedDate": "2020-04-15T01:38:26Z", "type": "commit"}, {"oid": "b445fb8e91640794c5bcd707054564b33d0a9716", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/b445fb8e91640794c5bcd707054564b33d0a9716", "message": "Addresss various comments from Yaliang", "committedDate": "2020-04-15T01:38:27Z", "type": "commit"}, {"oid": "a476ed48257ace99427189f7a0d53281b27245b2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/a476ed48257ace99427189f7a0d53281b27245b2", "message": "Merge branch 'development' into profile3", "committedDate": "2020-04-15T02:47:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzMwOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409013308", "bodyText": "not blocker: you can move this isEmpty() check to the entry of this method, aka line 67. And then you can skip the check on line 78", "author": "yizheliu-amazon", "createdAt": "2020-04-15T17:30:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {", "originalCommit": "a476ed48257ace99427189f7a0d53281b27245b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyODY0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409028641", "bodyText": "good catch.  Fixed.", "author": "kaituo", "createdAt": "2020-04-15T17:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "3d6e9bba19c0bb9a97591156ffbead8de9588045", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex bf1e7c9..1cf75cd 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -64,20 +64,19 @@ public class AnomalyDetectorProfileRunner {\n     }\n \n     public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n-        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n-            listener,\n-            profiles.size(),\n-            \"Fail to fetch profile for \" + detectorId\n-        );\n \n         if (profiles.isEmpty()) {\n             listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n             return;\n         }\n \n-        if (profiles.contains(ProfileName.STATE) || profiles.contains(ProfileName.ERROR)) {\n-            prepareProfile(detectorId, delegateListener, profiles);\n-        }\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        prepareProfile(detectorId, delegateListener, profiles);\n     }\n \n     private void prepareProfile(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMTM1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409021352", "bodyText": "Unsupported profile", "author": "yizheliu-amazon", "createdAt": "2020-04-15T17:43:47Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.model;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public enum ProfileName {\n+    STATE(\"state\"),\n+    ERROR(\"error\");\n+\n+    private String name;\n+\n+    ProfileName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * Get profile name\n+     *\n+     * @return name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get set of profile names\n+     *\n+     * @return set of profile names\n+     */\n+    public static Set<String> getNames() {\n+        Set<String> names = new HashSet<>();\n+\n+        for (ProfileName statName : ProfileName.values()) {\n+            names.add(statName.getName());\n+        }\n+        return names;\n+    }\n+\n+    public static ProfileName getName(String name) {\n+        switch (name) {\n+            case \"state\":\n+                return STATE;\n+            case \"error\":\n+                return ERROR;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported prof\");", "originalCommit": "a476ed48257ace99427189f7a0d53281b27245b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyOTA3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409029075", "bodyText": "thanks for the catch.  Fixed.", "author": "kaituo", "createdAt": "2020-04-15T17:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMTM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3d6e9bba19c0bb9a97591156ffbead8de9588045", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java\nindex c7a40bd..ea0be27 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java\n\n@@ -59,7 +59,7 @@ public enum ProfileName {\n             case \"error\":\n                 return ERROR;\n             default:\n-                throw new IllegalArgumentException(\"Unsupported prof\");\n+                throw new IllegalArgumentException(\"Unsupported profile types\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNTI1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409025256", "bodyText": "LOG.error()", "author": "yizheliu-amazon", "createdAt": "2020-04-15T17:50:20Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);", "originalCommit": "a476ed48257ace99427189f7a0d53281b27245b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMDk5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409030999", "bodyText": "fixed.", "author": "kaituo", "createdAt": "2020-04-15T17:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNTI1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3d6e9bba19c0bb9a97591156ffbead8de9588045", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nindex a08b36b..3f42a18 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n\n@@ -34,16 +34,16 @@ public class MultiResponsesDelegateActionListener<T extends Mergeable> implement\n     private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n     private final ActionListener<T> delegate;\n     private final AtomicInteger collectedResponseCount;\n-    private final int expectedResponseCount;\n+    private final int maxResponseCount;\n     // save responses from multiple requests\n     private final List<T> savedResponses;\n     private List<String> exceptions;\n     private String finalErrorMsg;\n \n-    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int maxResponseCount, String finalErrorMsg) {\n         this.delegate = delegate;\n         this.collectedResponseCount = new AtomicInteger(0);\n-        this.expectedResponseCount = expectedResponseCount;\n+        this.maxResponseCount = maxResponseCount;\n         this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n         this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n         this.finalErrorMsg = finalErrorMsg;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409027965", "bodyText": "It looks like to be duplicate with above line 60. Can we remove the finally here? And also, the only potential scenario where exception can get thrown is that Exception e is null, but I don't think it is possible.", "author": "yizheliu-amazon", "createdAt": "2020-04-15T17:54:46Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }", "originalCommit": "a476ed48257ace99427189f7a0d53281b27245b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0MDU4NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409040584", "bodyText": "The purpose of this class is to collect async requests: no matter it is a failure or success, and then increment the count.  If the count equals to or larger than expected, then send a final success or failure responses.  We need finally here to increment the count when there is a failure.  THis is not a failure when e is null.  It means an async request fails.", "author": "kaituo", "createdAt": "2020-04-15T18:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0Nzg2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409047863", "bodyText": "After another look, I guess exception can be thrown if thread is interrupted.", "author": "yizheliu-amazon", "createdAt": "2020-04-15T18:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMTYxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409121615", "bodyText": "yes, any exception can be thrown by an asynchronous request.", "author": "kaituo", "createdAt": "2020-04-15T20:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d6e9bba19c0bb9a97591156ffbead8de9588045", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nindex a08b36b..3f42a18 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n\n@@ -34,16 +34,16 @@ public class MultiResponsesDelegateActionListener<T extends Mergeable> implement\n     private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n     private final ActionListener<T> delegate;\n     private final AtomicInteger collectedResponseCount;\n-    private final int expectedResponseCount;\n+    private final int maxResponseCount;\n     // save responses from multiple requests\n     private final List<T> savedResponses;\n     private List<String> exceptions;\n     private String finalErrorMsg;\n \n-    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int maxResponseCount, String finalErrorMsg) {\n         this.delegate = delegate;\n         this.collectedResponseCount = new AtomicInteger(0);\n-        this.expectedResponseCount = expectedResponseCount;\n+        this.maxResponseCount = maxResponseCount;\n         this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n         this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n         this.finalErrorMsg = finalErrorMsg;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NDU4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409044587", "bodyText": "expected implies that the total collected count must be more than expectedResponseCount, otherwise it is a failure. Based on my understanding of use of this class, I guess maxResponseCount might be a better name.", "author": "yizheliu-amazon", "createdAt": "2020-04-15T18:23:35Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {", "originalCommit": "a476ed48257ace99427189f7a0d53281b27245b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDcwNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409120706", "bodyText": "done", "author": "kaituo", "createdAt": "2020-04-15T20:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NDU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3d6e9bba19c0bb9a97591156ffbead8de9588045", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nindex a08b36b..3f42a18 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n\n@@ -34,16 +34,16 @@ public class MultiResponsesDelegateActionListener<T extends Mergeable> implement\n     private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n     private final ActionListener<T> delegate;\n     private final AtomicInteger collectedResponseCount;\n-    private final int expectedResponseCount;\n+    private final int maxResponseCount;\n     // save responses from multiple requests\n     private final List<T> savedResponses;\n     private List<String> exceptions;\n     private String finalErrorMsg;\n \n-    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int maxResponseCount, String finalErrorMsg) {\n         this.delegate = delegate;\n         this.collectedResponseCount = new AtomicInteger(0);\n-        this.expectedResponseCount = expectedResponseCount;\n+        this.maxResponseCount = maxResponseCount;\n         this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n         this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n         this.finalErrorMsg = finalErrorMsg;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0OTQyNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409049424", "bodyText": "String.format may not be needed if only static string is there. Also, I think in case of empty exceptions and empty savedResponses, it may be better to throw exception with message like No response collected, which makes more sense to me.", "author": "yizheliu-amazon", "createdAt": "2020-04-15T18:32:04Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.Mergeable;\n+\n+/**\n+ * A listener wrapper to help send multiple requests asynchronously and return one final responses together\n+ */\n+public class MultiResponsesDelegateActionListener<T extends Mergeable> implements ActionListener<T> {\n+    private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n+    private final ActionListener<T> delegate;\n+    private final AtomicInteger collectedResponseCount;\n+    private final int expectedResponseCount;\n+    // save responses from multiple requests\n+    private final List<T> savedResponses;\n+    private List<String> exceptions;\n+    private String finalErrorMsg;\n+\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+        this.delegate = delegate;\n+        this.collectedResponseCount = new AtomicInteger(0);\n+        this.expectedResponseCount = expectedResponseCount;\n+        this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n+        this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n+        this.finalErrorMsg = finalErrorMsg;\n+    }\n+\n+    @Override\n+    public void onResponse(T response) {\n+        try {\n+            if (response != null) {\n+                this.savedResponses.add(response);\n+            }\n+        } catch (Exception e) {\n+            onFailure(e);\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void onFailure(Exception e) {\n+        LOG.info(e);\n+        try {\n+            this.exceptions.add(e.getMessage());\n+        } finally {\n+            if (collectedResponseCount.incrementAndGet() >= expectedResponseCount) {\n+                finish();\n+            }\n+        }\n+    }\n+\n+    private void finish() {\n+        if (this.exceptions.size() == 0) {\n+            if (savedResponses.size() == 0) {\n+                this.delegate.onFailure(new RuntimeException(String.format(\"Unexpected exceptions\")));", "originalCommit": "a476ed48257ace99427189f7a0d53281b27245b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMjM0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409122345", "bodyText": "good catch.  Removed String.format and changed to \"No response collected\".", "author": "kaituo", "createdAt": "2020-04-15T20:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0OTQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "3d6e9bba19c0bb9a97591156ffbead8de9588045", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\nindex a08b36b..3f42a18 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/MultiResponsesDelegateActionListener.java\n\n@@ -34,16 +34,16 @@ public class MultiResponsesDelegateActionListener<T extends Mergeable> implement\n     private static final Logger LOG = LogManager.getLogger(MultiResponsesDelegateActionListener.class);\n     private final ActionListener<T> delegate;\n     private final AtomicInteger collectedResponseCount;\n-    private final int expectedResponseCount;\n+    private final int maxResponseCount;\n     // save responses from multiple requests\n     private final List<T> savedResponses;\n     private List<String> exceptions;\n     private String finalErrorMsg;\n \n-    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int expectedResponseCount, String finalErrorMsg) {\n+    public MultiResponsesDelegateActionListener(ActionListener<T> delegate, int maxResponseCount, String finalErrorMsg) {\n         this.delegate = delegate;\n         this.collectedResponseCount = new AtomicInteger(0);\n-        this.expectedResponseCount = expectedResponseCount;\n+        this.maxResponseCount = maxResponseCount;\n         this.savedResponses = Collections.synchronizedList(new ArrayList<T>());\n         this.exceptions = Collections.synchronizedList(new ArrayList<String>());\n         this.finalErrorMsg = finalErrorMsg;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1OTMxNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409059314", "bodyText": "can you log exception here as well?", "author": "yizheliu-amazon", "createdAt": "2020-04-15T18:48:32Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector.ANOMALY_DETECTORS_INDEX;\n+import static com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.IndexNotFoundException;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorJob;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorProfile;\n+import com.amazon.opendistroforelasticsearch.ad.model.DetectorState;\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+import com.amazon.opendistroforelasticsearch.ad.util.MultiResponsesDelegateActionListener;\n+\n+public class AnomalyDetectorProfileRunner {\n+    private final Logger logger = LogManager.getLogger(AnomalyDetectorProfileRunner.class);\n+    private Client client;\n+    private NamedXContentRegistry xContentRegistry;\n+    static String FAIL_TO_FIND_DETECTOR_MSG = \"Fail to find detector with id: \";\n+    static String FAIL_TO_GET_PROFILE_MSG = \"Fail to get profile for detector \";\n+\n+    public AnomalyDetectorProfileRunner(Client client, NamedXContentRegistry xContentRegistry) {\n+        this.client = client;\n+        this.xContentRegistry = xContentRegistry;\n+    }\n+\n+    public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        if (profiles.isEmpty()) {\n+            listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n+            return;\n+        }\n+\n+        if (profiles.contains(ProfileName.STATE) || profiles.contains(ProfileName.ERROR)) {\n+            prepareProfile(detectorId, delegateListener, profiles);\n+        }\n+    }\n+\n+    private void prepareProfile(\n+        String detectorId,\n+        MultiResponsesDelegateActionListener<DetectorProfile> listener,\n+        Set<ProfileName> profiles\n+    ) {\n+        GetRequest getRequest = new GetRequest(ANOMALY_DETECTOR_JOB_INDEX, detectorId);\n+        client.get(getRequest, ActionListener.wrap(getResponse -> {\n+            if (getResponse != null && getResponse.isExists()) {\n+                try (\n+                    XContentParser parser = XContentType.JSON\n+                        .xContent()\n+                        .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, getResponse.getSourceAsString())\n+                ) {\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n+                    AnomalyDetectorJob job = AnomalyDetectorJob.parse(parser);\n+                    long enabledTimeMs = job.getEnabledTime().toEpochMilli();\n+\n+                    if (profiles.contains(ProfileName.STATE)) {\n+                        profileState(detectorId, enabledTimeMs, listener, job.isEnabled());\n+                    }\n+                    if (profiles.contains(ProfileName.ERROR)) {\n+                        profileError(detectorId, enabledTimeMs, listener);\n+                    }\n+                } catch (IOException | XContentParseException | NullPointerException e) {\n+                    logger.error(e);\n+                    listener.failImmediately(FAIL_TO_GET_PROFILE_MSG, e);\n+                }\n+            } else {\n+                GetRequest getDetectorRequest = new GetRequest(ANOMALY_DETECTORS_INDEX, detectorId);\n+                client.get(getDetectorRequest, onGetDetectorResponse(listener, detectorId, profiles));\n+            }\n+        }, exception -> {\n+            if (exception instanceof IndexNotFoundException) {", "originalCommit": "a476ed48257ace99427189f7a0d53281b27245b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTQzMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/84#discussion_r409119430", "bodyText": "done", "author": "kaituo", "createdAt": "2020-04-15T20:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1OTMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "3d6e9bba19c0bb9a97591156ffbead8de9588045", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\nindex bf1e7c9..1cf75cd 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java\n\n@@ -64,20 +64,19 @@ public class AnomalyDetectorProfileRunner {\n     }\n \n     public void profile(String detectorId, ActionListener<DetectorProfile> listener, Set<ProfileName> profiles) {\n-        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n-            listener,\n-            profiles.size(),\n-            \"Fail to fetch profile for \" + detectorId\n-        );\n \n         if (profiles.isEmpty()) {\n             listener.onFailure(new RuntimeException(\"Unsupported profile types.\"));\n             return;\n         }\n \n-        if (profiles.contains(ProfileName.STATE) || profiles.contains(ProfileName.ERROR)) {\n-            prepareProfile(detectorId, delegateListener, profiles);\n-        }\n+        MultiResponsesDelegateActionListener<DetectorProfile> delegateListener = new MultiResponsesDelegateActionListener<DetectorProfile>(\n+            listener,\n+            profiles.size(),\n+            \"Fail to fetch profile for \" + detectorId\n+        );\n+\n+        prepareProfile(detectorId, delegateListener, profiles);\n     }\n \n     private void prepareProfile(\n"}}, {"oid": "3d6e9bba19c0bb9a97591156ffbead8de9588045", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/3d6e9bba19c0bb9a97591156ffbead8de9588045", "message": "Address comments from Yizhe", "committedDate": "2020-04-15T21:08:18Z", "type": "commit"}]}