{"pr_number": 134, "pr_title": "Prevent creating detector with duplicate name. Issue:#118", "pr_createdAt": "2020-05-22T05:35:39Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134", "timeline": [{"oid": "49f30a23d690ff22f6df902f3969f7b6047a496f", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/49f30a23d690ff22f6df902f3969f7b6047a496f", "message": "Prevent creating detector with duplicate name. Issue:#118", "committedDate": "2020-05-22T05:16:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMjM2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429412363", "bodyText": "minor. can this query also include a condition like not this detector id to utilize es search instead of additional postprocessing?", "author": "wnbts", "createdAt": "2020-05-22T19:07:13Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +222,46 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+            // src/main/resources/mappings/anomaly-detectors.json#L14\n+            .query(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()))", "originalCommit": "49f30a23d690ff22f6df902f3969f7b6047a496f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyOTk5MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429429990", "bodyText": "that's a good point. will change to use must_not to exclude this detector id", "author": "yizheliu-amazon", "createdAt": "2020-05-22T19:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMjM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\nindex 200222b..187ae89 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n\n@@ -228,10 +229,12 @@ public class IndexAnomalyDetectorActionHandler extends AbstractActionHandler {\n     }\n \n     private void checkADNameExists(String detectorId) throws IOException {\n-        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n-            // src/main/resources/mappings/anomaly-detectors.json#L14\n-            .query(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()))\n-            .timeout(requestTimeout);\n+        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n+        // src/main/resources/mappings/anomaly-detectors.json#L14\n+        boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n+        // _id field does not allow \"\", but allows \" \"\n+        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(boolQueryBuilder).timeout(requestTimeout);\n         SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n \n         client\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMzUxOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429413518", "bodyText": "minor. i would use a warning for this case since it's a harmless user error.", "author": "wnbts", "createdAt": "2020-05-22T19:10:23Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +222,46 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+            // src/main/resources/mappings/anomaly-detectors.json#L14\n+            .query(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()))\n+            .timeout(requestTimeout);\n+        SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+        client\n+            .search(\n+                searchRequest,\n+                ActionListener\n+                    .wrap(\n+                        searchResponse -> onSearchADNameResponse(searchResponse, detectorId, anomalyDetector.getName()),\n+                        exception -> onFailure(exception)\n+                    )\n+            );\n+    }\n+\n+    private void onSearchADNameResponse(SearchResponse response, String detectorId, String name) throws IOException {\n+        boolean hasDuplicateName = false;\n+        String existingDetectorId = null;\n+        if (response.getHits().getTotalHits().value > 0) {\n+            for (SearchHit hit : response.getHits()) {\n+                if (!hit.getId().equals(detectorId)) {\n+                    hasDuplicateName = true;\n+                    existingDetectorId = hit.getId();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        if (hasDuplicateName) {\n+            String errorMsg = String.format(\"Cannot create anomaly detector with name[%s] used by detectorId %s\", name, existingDetectorId);\n+            logger.error(errorMsg);", "originalCommit": "49f30a23d690ff22f6df902f3969f7b6047a496f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMDAxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429430015", "bodyText": "sure. will do", "author": "yizheliu-amazon", "createdAt": "2020-05-22T19:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMzUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\nindex 200222b..187ae89 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n\n@@ -228,10 +229,12 @@ public class IndexAnomalyDetectorActionHandler extends AbstractActionHandler {\n     }\n \n     private void checkADNameExists(String detectorId) throws IOException {\n-        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n-            // src/main/resources/mappings/anomaly-detectors.json#L14\n-            .query(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()))\n-            .timeout(requestTimeout);\n+        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n+        // src/main/resources/mappings/anomaly-detectors.json#L14\n+        boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n+        // _id field does not allow \"\", but allows \" \"\n+        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(boolQueryBuilder).timeout(requestTimeout);\n         SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n \n         client\n"}}, {"oid": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21", "message": "Exclude detector with input detector id when searching detector with duplicate name", "committedDate": "2020-05-22T21:46:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTkzNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429475936", "bodyText": "How about we add mustNot condition only when detectorId is not blank?", "author": "ylwu-amzn", "createdAt": "2020-05-22T22:14:46Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +223,41 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n+        // src/main/resources/mappings/anomaly-detectors.json#L14\n+        boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n+        // _id field does not allow \"\", but allows \" \"\n+        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));", "originalCommit": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDY0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429480643", "bodyText": "I like the idea. Thanks!", "author": "yizheliu-amazon", "createdAt": "2020-05-22T22:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "53a264caabec7cb06c2c9b23f4cbbcc0fe8072d7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\nindex 187ae89..b28db4e 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n\n@@ -232,8 +232,9 @@ public class IndexAnomalyDetectorActionHandler extends AbstractActionHandler {\n         BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n         // src/main/resources/mappings/anomaly-detectors.json#L14\n         boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n-        // _id field does not allow \"\", but allows \" \"\n-        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));\n+        if (StringUtils.isNotBlank(detectorId)) {\n+            boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, detectorId));\n+        }\n         SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(boolQueryBuilder).timeout(requestTimeout);\n         SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjgxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429476811", "bodyText": "We may show this error message on Kibana. How about we make it more readable?\nCannot create anomaly detector with name [%s] as it's already used by detector [%s]", "author": "ylwu-amzn", "createdAt": "2020-05-22T22:18:51Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -221,6 +223,41 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n                 + Arrays.toString(anomalyDetector.getIndices().toArray(new String[0]));\n             logger.error(errorMsg);\n             onFailure(new IllegalArgumentException(errorMsg));\n+        } else {\n+            checkADNameExists(detectorId);\n+        }\n+    }\n+\n+    private void checkADNameExists(String detectorId) throws IOException {\n+        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n+        // src/main/resources/mappings/anomaly-detectors.json#L14\n+        boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n+        // _id field does not allow \"\", but allows \" \"\n+        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(boolQueryBuilder).timeout(requestTimeout);\n+        SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n+\n+        client\n+            .search(\n+                searchRequest,\n+                ActionListener\n+                    .wrap(\n+                        searchResponse -> onSearchADNameResponse(searchResponse, detectorId, anomalyDetector.getName()),\n+                        exception -> onFailure(exception)\n+                    )\n+            );\n+    }\n+\n+    private void onSearchADNameResponse(SearchResponse response, String detectorId, String name) throws IOException {\n+        if (response.getHits().getTotalHits().value > 0) {\n+            String errorMsg = String\n+                .format(\n+                    \"Cannot create anomaly detector with name[%s] used by detectorId %s\",", "originalCommit": "6f1c83c7bbd1f2537c3eaab7a38e09cd69de9e21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDcxMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/134#discussion_r429480713", "bodyText": "sure. will change that.", "author": "yizheliu-amazon", "createdAt": "2020-05-22T22:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "53a264caabec7cb06c2c9b23f4cbbcc0fe8072d7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\nindex 187ae89..b28db4e 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n\n@@ -232,8 +232,9 @@ public class IndexAnomalyDetectorActionHandler extends AbstractActionHandler {\n         BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n         // src/main/resources/mappings/anomaly-detectors.json#L14\n         boolQueryBuilder.must(QueryBuilders.termQuery(\"name.keyword\", anomalyDetector.getName()));\n-        // _id field does not allow \"\", but allows \" \"\n-        boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, StringUtils.isBlank(detectorId) ? \" \" : detectorId));\n+        if (StringUtils.isNotBlank(detectorId)) {\n+            boolQueryBuilder.mustNot(QueryBuilders.termQuery(RestHandlerUtils._ID, detectorId));\n+        }\n         SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(boolQueryBuilder).timeout(requestTimeout);\n         SearchRequest searchRequest = new SearchRequest(ANOMALY_DETECTORS_INDEX).source(searchSourceBuilder);\n \n"}}, {"oid": "53a264caabec7cb06c2c9b23f4cbbcc0fe8072d7", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/53a264caabec7cb06c2c9b23f4cbbcc0fe8072d7", "message": "Address Yaliang's comments and add 1 more test case", "committedDate": "2020-05-22T23:13:06Z", "type": "commit"}]}