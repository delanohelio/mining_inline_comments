{"pr_number": 65, "pr_title": "Fix empty preview result due to insufficient sample", "pr_createdAt": "2020-03-16T07:12:46Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65", "timeline": [{"oid": "d3c7fd473fe76a8f07d736bab37d875a9b3537db", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d3c7fd473fe76a8f07d736bab37d875a9b3537db", "message": "Fix empty preview result due to insufficient sample\n\nPreview does not use all data in the given time range as it is costly. Previously, we sample data by issuing multiple queries on shard 0 data. The purpose of the shard 0 query restriction is to reduce system costs. The nab_art_daily_jumpsup data set has one doc in each interval, and the doc is spread out in 5 shards. Even though we issue 360 queries, we only get 70~80 samples back by querying shard 0. Together with interpolated data points, the preview run misses significant portions of data required to train models (400 is the minimum) and thus returns empty preview results. This PR fixes the issue by removing the shard 0 search restriction.\n\nPreviously, the preview API issues multiple queries encapsulated in a multisearch request (the request can contain 360 search queries at most). The same result could be obtained via a date range query with multiple range buckets. We show a date range query is 2~10 times faster than a multisearch request (https://github.com/opendistro-for-elasticsearch/anomaly-detection/issues/63). This PR replaces the multisearch request with a date range query.\n\nThis PR also removes unused field scriptService in SearchFeatureDao.\n\nTesting done:\n- Previous preview unit tests pass.\n- Manually verified date range queries results are correctly processed by cross checking intermediate logs.\n- Manually verified preview results with multisearch and date range implementation are the same.\n- Manually verified preview don't show empty results with the nab_art_daily_jumpsup data set with the fix", "committedDate": "2020-03-16T07:05:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzODM2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393838363", "bodyText": "Minor. FEATURE_SAMPLE_PREFERENCE can be removed.", "author": "wnbts", "createdAt": "2020-03-17T17:11:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +200,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))", "originalCommit": "d3c7fd473fe76a8f07d736bab37d875a9b3537db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNzE3NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394107174", "bodyText": "removed", "author": "kaituo", "createdAt": "2020-03-18T04:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzODM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\nindex c38847d..ee69356 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n\n@@ -200,7 +191,7 @@ public class SearchFeatureDao {\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        SearchRequest request = createPreviewSearchRequest(detector, ranges, Optional.empty());\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n         client.search(request, ActionListener.wrap(response -> {\n             Aggregations aggs = response.getAggregations();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MDczNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393840734", "bodyText": "Minor. Some parts might be refactored with existing response parsing logic.", "author": "wnbts", "createdAt": "2020-03-17T17:15:39Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +320,32 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(\n+        AnomalyDetector detector,\n+        List<Entry<Long, Long>> ranges,\n+        Optional<String> preference\n+    ) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private Optional<double[]> parseBucket(InternalDateRange.Bucket bucket, List<String> featureIds) {", "originalCommit": "d3c7fd473fe76a8f07d736bab37d875a9b3537db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNjU5NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394116594", "bodyText": "refactored", "author": "kaituo", "createdAt": "2020-03-18T05:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MDczNA=="}], "type": "inlineReview", "revised_code": {"commit": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\nindex c38847d..ee69356 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n\n@@ -321,14 +312,10 @@ public class SearchFeatureDao {\n         }\n     }\n \n-    private SearchRequest createPreviewSearchRequest(\n-        AnomalyDetector detector,\n-        List<Entry<Long, Long>> ranges,\n-        Optional<String> preference\n-    ) {\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n         try {\n             SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n-            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n         } catch (IOException e) {\n             logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n             throw new IllegalStateException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MjUwOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r393842508", "bodyText": "Minor. Since this parameter is not used, it can be removed.", "author": "wnbts", "createdAt": "2020-03-17T17:18:29Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +320,32 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(\n+        AnomalyDetector detector,\n+        List<Entry<Long, Long>> ranges,\n+        Optional<String> preference", "originalCommit": "d3c7fd473fe76a8f07d736bab37d875a9b3537db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNzIyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394107221", "bodyText": "removed", "author": "kaituo", "createdAt": "2020-03-18T04:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MjUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\nindex c38847d..ee69356 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n\n@@ -321,14 +312,10 @@ public class SearchFeatureDao {\n         }\n     }\n \n-    private SearchRequest createPreviewSearchRequest(\n-        AnomalyDetector detector,\n-        List<Entry<Long, Long>> ranges,\n-        Optional<String> preference\n-    ) {\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n         try {\n             SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n-            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n         } catch (IOException e) {\n             logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n             throw new IllegalStateException(e);\n"}}, {"oid": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "message": "Remove unused field and parameter, refacor for code reuse", "committedDate": "2020-03-18T05:33:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NzM5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394497393", "bodyText": "log detector.getDetectorId()", "author": "ylwu-amzn", "createdAt": "2020-03-18T16:54:07Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);", "originalCommit": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMzYzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394733631", "bodyText": "good catch.  fixed.", "author": "kaituo", "createdAt": "2020-03-19T01:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NzM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "778f934f9ccb737bcf6ab0b058705cb0236a4aff", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\nindex ee69356..ff81f66 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n\n@@ -307,7 +308,11 @@ public class SearchFeatureDao {\n             SearchSourceBuilder searchSourceBuilder = ParseUtils.generateInternalFeatureQuery(detector, startTime, endTime, xContent);\n             return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n         } catch (IOException e) {\n-            logger.warn(\"Failed to create feature search request for \" + detector + \" from \" + startTime + \" to \" + endTime, e);\n+            logger\n+                .warn(\n+                    \"Failed to create feature search request for \" + detector.getDetectorId() + \" from \" + startTime + \" to \" + endTime,\n+                    e\n+                );\n             throw new IllegalStateException(e);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394501270", "bodyText": "Why wrap IOException with IllegalStateException?", "author": "ylwu-amzn", "createdAt": "2020-03-18T16:59:51Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private SearchRequest createPreviewSearchRequest(AnomalyDetector detector, List<Entry<Long, Long>> ranges) {\n+        try {\n+            SearchSourceBuilder searchSourceBuilder = ParseUtils.generatePreviewQuery(detector, ranges, xContent);\n+            return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder);\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to create feature search request for \" + detector + \" for preview\", e);\n+            throw new IllegalStateException(e);", "originalCommit": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczNDA0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394734049", "bodyText": "I am following Lai's style in this class.  He prefers unchecked exception like IllegalStateException. IOException is checked exception and the method and and its callers have to declare the exception before the exception is handled.\nI prefer checked exceptions as they serve as documentation on what a method can throw and remind the caller to handle it.\nDo you have any preference on when to use checked and unchecked exceptions?", "author": "kaituo", "createdAt": "2020-03-19T01:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0MTg5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395241897", "bodyText": "https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-exceptions.html\ni don't mind the team making their own decisions.", "author": "wnbts", "createdAt": "2020-03-19T18:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0ODAyMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395248023", "bodyText": "From https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html\n\nGenerally speaking, do not throw a RuntimeException or create a subclass of RuntimeException simply because you don't want to be bothered with specifying the exceptions your methods can throw.\nHere's the bottom line guideline: If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.\n\nFor this case, generateInternalFeatureQuery method may throw IOException which caused by user's wrong query input. It's possible to be recovered from this for user to fix the query. And we just wrap the IOException without adding more info like custom error message; and no special handling logic for this IllegalStateException .  Seems we just don't want to be bothered with specifying the checked exception IOException.  So prefer to use checked exception here.", "author": "ylwu-amzn", "createdAt": "2020-03-19T18:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0Mjc5NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395442795", "bodyText": "Thanks for your analysis.  fixed it.", "author": "kaituo", "createdAt": "2020-03-20T05:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "778f934f9ccb737bcf6ab0b058705cb0236a4aff", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\nindex ee69356..ff81f66 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n\n@@ -307,7 +308,11 @@ public class SearchFeatureDao {\n             SearchSourceBuilder searchSourceBuilder = ParseUtils.generateInternalFeatureQuery(detector, startTime, endTime, xContent);\n             return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n         } catch (IOException e) {\n-            logger.warn(\"Failed to create feature search request for \" + detector + \" from \" + startTime + \" to \" + endTime, e);\n+            logger\n+                .warn(\n+                    \"Failed to create feature search request for \" + detector.getDetectorId() + \" from \" + startTime + \" to \" + endTime,\n+                    e\n+                );\n             throw new IllegalStateException(e);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394503894", "bodyText": "Is it possible ES returns different date range class other than InternalDateRange for this case?", "author": "ylwu-amzn", "createdAt": "2020-03-18T17:03:44Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());\n+            }\n+\n+            listener\n+                .onResponse(\n+                    aggs\n+                        .asList()\n+                        .stream()\n+                        .filter(InternalDateRange.class::isInstance)", "originalCommit": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTQyMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394729420", "bodyText": "for 7.4, it is not possible.  For other versions, it is possible.", "author": "kaituo", "createdAt": "2020-03-19T01:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0Mjg1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395242852", "bodyText": "Got it. So for other version, the InternalDateRange.class is still what we want?", "author": "ylwu-amzn", "createdAt": "2020-03-19T18:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMzI4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395433285", "bodyText": "other versions is untested.  Will do that when we release new versions.", "author": "kaituo", "createdAt": "2020-03-20T04:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "778f934f9ccb737bcf6ab0b058705cb0236a4aff", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\nindex ee69356..ff81f66 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n\n@@ -197,6 +197,7 @@ public class SearchFeatureDao {\n             Aggregations aggs = response.getAggregations();\n             if (aggs == null) {\n                 listener.onResponse(Collections.emptyList());\n+                return;\n             }\n \n             listener\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MjU3OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394542578", "bodyText": "Should we do return here? Otherwise it will continue to line 202", "author": "yizheliu-amazon", "createdAt": "2020-03-18T18:05:00Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -207,34 +191,25 @@ public void getFeatureSamplesForPeriods(\n         List<Entry<Long, Long>> ranges,\n         ActionListener<List<Optional<double[]>>> listener\n     ) {\n-        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();\n-        ranges\n-            .stream()\n-            .map(range -> createFeatureSearchRequest(detector, range.getKey(), range.getValue(), Optional.of(FEATURE_SAMPLE_PREFERENCE)))\n-            .forEachOrdered(request -> multiSearchRequest.add(request));\n+        SearchRequest request = createPreviewSearchRequest(detector, ranges);\n \n-        client\n-            .multiSearch(\n-                multiSearchRequest,\n-                ActionListener\n-                    .wrap(\n-                        response -> listener\n-                            .onResponse(\n-                                Optional\n-                                    .of(response)\n-                                    .map(Stream::of)\n-                                    .orElseGet(Stream::empty)\n-                                    .flatMap(multiSearchResp -> Arrays.stream(multiSearchResp.getResponses()))\n-                                    .map(\n-                                        item -> Optional\n-                                            .ofNullable(item.getResponse())\n-                                            .flatMap(r -> parseResponse(r, detector.getEnabledFeatureIds()))\n-                                    )\n-                                    .collect(Collectors.toList())\n-                            ),\n-                        listener::onFailure\n-                    )\n-            );\n+        client.search(request, ActionListener.wrap(response -> {\n+            Aggregations aggs = response.getAggregations();\n+            if (aggs == null) {\n+                listener.onResponse(Collections.emptyList());", "originalCommit": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyODg4MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394728880", "bodyText": "good catch.  fixed.", "author": "kaituo", "createdAt": "2020-03-19T00:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MjU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "778f934f9ccb737bcf6ab0b058705cb0236a4aff", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\nindex ee69356..ff81f66 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n\n@@ -197,6 +197,7 @@ public class SearchFeatureDao {\n             Aggregations aggs = response.getAggregations();\n             if (aggs == null) {\n                 listener.onResponse(Collections.emptyList());\n+                return;\n             }\n \n             listener\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzU2MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394543560", "bodyText": "same as Yaliang's comment.", "author": "yizheliu-amazon", "createdAt": "2020-03-18T18:06:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -336,4 +311,30 @@ private SearchRequest createFeatureSearchRequest(AnomalyDetector detector, long\n             throw new IllegalStateException(e);", "originalCommit": "a118ec1c1d3eb9ebde244823cc52bff1920aeba5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMzQ1MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r394733450", "bodyText": "This is Lai's code I guess.  I guess IOException is checked exception and the method and and its callers have to declare the exception before the exception is handled.  Lai prefers to use unchecked exception like IllegalStateException.\nI prefer checked exceptions as they serve as documentation on what a method can throw and remind the caller to handle it.\nDo you have any preference on when to use checked and unchecked exceptions?", "author": "kaituo", "createdAt": "2020-03-19T01:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "778f934f9ccb737bcf6ab0b058705cb0236a4aff", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\nindex ee69356..ff81f66 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java\n\n@@ -307,7 +308,11 @@ public class SearchFeatureDao {\n             SearchSourceBuilder searchSourceBuilder = ParseUtils.generateInternalFeatureQuery(detector, startTime, endTime, xContent);\n             return new SearchRequest(detector.getIndices().toArray(new String[0]), searchSourceBuilder).preference(preference.orElse(null));\n         } catch (IOException e) {\n-            logger.warn(\"Failed to create feature search request for \" + detector + \" from \" + startTime + \" to \" + endTime, e);\n+            logger\n+                .warn(\n+                    \"Failed to create feature search request for \" + detector.getDetectorId() + \" from \" + startTime + \" to \" + endTime,\n+                    e\n+                );\n             throw new IllegalStateException(e);\n         }\n     }\n"}}, {"oid": "778f934f9ccb737bcf6ab0b058705cb0236a4aff", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/778f934f9ccb737bcf6ab0b058705cb0236a4aff", "message": "Fix bug and log", "committedDate": "2020-03-19T01:31:09Z", "type": "commit"}, {"oid": "c58329cb227d3927856e3720f7ca67ba8afc645c", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/c58329cb227d3927856e3720f7ca67ba8afc645c", "message": "Unwrap IOException", "committedDate": "2020-03-20T05:15:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzODc5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395838793", "bodyText": "question: why send OK response if there is an exception while running AD?", "author": "yizheliu-amazon", "createdAt": "2020-03-20T19:07:32Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -184,23 +184,24 @@ protected void processResponse(GetResponse response) throws Exception {\n                 ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n                 AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n \n-                anomalyDetectorRunner.run(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n-                    XContentBuilder builder = channel\n-                        .newBuilder()\n-                        .startObject()\n-                        .field(ANOMALY_RESULT, anomalyResult)\n-                        .field(ANOMALY_DETECTOR, detector)\n-                        .endObject();\n-                    channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                }, exception -> {\n-                    logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n-                    try {\n-                        XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                anomalyDetectorRunner\n+                    .executeDetector(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n+                        XContentBuilder builder = channel\n+                            .newBuilder()\n+                            .startObject()\n+                            .field(ANOMALY_RESULT, anomalyResult)\n+                            .field(ANOMALY_DETECTOR, detector)\n+                            .endObject();\n                         channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                    } catch (IOException e) {\n-                        logger.error(\"Fail to send back exception message\" + detector.getDetectorId(), exception);\n-                    }\n-                }));\n+                    }, exception -> {\n+                        logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n+                        try {\n+                            XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                            channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));", "originalCommit": "c58329cb227d3927856e3720f7ca67ba8afc645c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MzAyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/65#discussion_r395953029", "bodyText": "Good catch.  I changed to RestStatus.INTERNAL_SERVER_ERROR.", "author": "kaituo", "createdAt": "2020-03-21T02:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzODc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "636a40451ae091a1a1071b737c5920bc6144680e", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\nindex 90b80af..ebbb4a4 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n\n@@ -197,7 +197,7 @@ public class RestExecuteAnomalyDetectorAction extends BaseRestHandler {\n                         logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n                         try {\n                             XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n-                            channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n+                            channel.sendResponse(new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, builder));\n                         } catch (IOException e) {\n                             logger.error(\"Fail to send back exception message\" + detector.getDetectorId(), exception);\n                         }\n"}}, {"oid": "636a40451ae091a1a1071b737c5920bc6144680e", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/636a40451ae091a1a1071b737c5920bc6144680e", "message": "Fix rest status during exception", "committedDate": "2020-03-21T02:35:20Z", "type": "commit"}]}