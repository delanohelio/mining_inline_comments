{"pr_number": 56, "pr_title": "Add threadpool prefix and change threadpool name", "pr_createdAt": "2020-03-06T05:23:23Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/56", "timeline": [{"oid": "9a3b653cf9e596cfe7ff9b9700282c5dfd361569", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/9a3b653cf9e596cfe7ff9b9700282c5dfd361569", "message": "Add threadpool prefix and change threadpool name\n\nWhen we run AD and SQL plugin together, ES fails to start with registering a setting twice error. AD's threadpool setting prefix is null. Since SQL plugin uses null as well, we would have a register setting conflict because we cannot register setting [null.size] twice. The fix is to give our threadpool a setting name prefix instead of null\n\nAlso, this threadpool would be used by other components besides AD job.  Rename it to make it not ad job specific.\n\nTesting done:\n- run all unit and integration tests", "committedDate": "2020-03-06T05:21:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMjM2MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/56#discussion_r388722361", "bodyText": "How about we use \"opendistro.ad.\"+ AD_THREAD_POOL_NAME ? So we can know exactly which threadpool it maps to.", "author": "ylwu-amzn", "createdAt": "2020-03-06T05:42:28Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java", "diffHunk": "@@ -346,10 +346,10 @@ private static Void initGson() {\n             .singletonList(\n                 new FixedExecutorBuilder(\n                     settings,\n-                    AD_JOB_THREAD_POOL_NAME,\n+                    AD_THREAD_POOL_NAME,\n                     Math.max(1, EsExecutors.numberOfProcessors(settings) / 4),\n-                    AD_JOB_THEAD_POOL_QUEUE_SIZE,\n-                    null\n+                    AD_THEAD_POOL_QUEUE_SIZE,\n+                    \"opendistro.ad.ad_thread_pool\"", "originalCommit": "9a3b653cf9e596cfe7ff9b9700282c5dfd361569", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyODE5NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/56#discussion_r388728194", "bodyText": "good idea.  Changed.", "author": "kaituo", "createdAt": "2020-03-06T06:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMjM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "22da669226407e72c874a763fcdc5208a508377c", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java\nindex 4e018fe..42d783f 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java\n\n@@ -349,7 +349,7 @@ public class AnomalyDetectorPlugin extends Plugin implements ActionPlugin, Scrip\n                     AD_THREAD_POOL_NAME,\n                     Math.max(1, EsExecutors.numberOfProcessors(settings) / 4),\n                     AD_THEAD_POOL_QUEUE_SIZE,\n-                    \"opendistro.ad.ad_thread_pool\"\n+                    \"opendistro.ad.\" + AD_THREAD_POOL_NAME\n                 )\n             );\n     }\n"}}, {"oid": "22da669226407e72c874a763fcdc5208a508377c", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/22da669226407e72c874a763fcdc5208a508377c", "message": "Change prefix to include threadpool name", "committedDate": "2020-03-06T06:09:05Z", "type": "commit"}]}