{"pr_number": 184, "pr_title": "change to exhausive search for training data", "pr_createdAt": "2020-07-02T16:59:59Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450380129", "bodyText": "add some interpolation if you miss less than 25% of points?", "author": "kaituo", "createdAt": "2020-07-06T17:40:16Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -241,30 +250,59 @@ public void getColdStartData(AnomalyDetector detector, ActionListener<Optional<d\n \n     private void getColdStartSamples(Optional<Long> latest, AnomalyDetector detector, ActionListener<Optional<double[][]>> listener) {\n         if (latest.isPresent()) {\n-            searchFeatureDao\n-                .getFeaturesForSampledPeriods(\n-                    detector,\n-                    maxTrainSamples,\n-                    maxSampleStride,\n-                    latest.get(),\n-                    ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n-                );\n+            List<Entry<Long, Long>> sampleRanges = getColdStartSampleRanges(detector, latest.get());\n+            try {\n+                searchFeatureDao\n+                    .getFeatureSamplesForPeriods(\n+                        detector,\n+                        sampleRanges,\n+                        ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n+                    );\n+            } catch (IOException e) {\n+                listener.onFailure(e);\n+            }\n         } else {\n             listener.onResponse(Optional.empty());\n         }\n     }\n \n-    private void processColdStartSamples(Optional<Entry<double[][], Integer>> samples, ActionListener<Optional<double[][]>> listener) {\n-        listener\n-            .onResponse(\n-                samples\n-                    .map(\n-                        results -> transpose(\n-                            interpolator.interpolate(transpose(results.getKey()), results.getValue() * (results.getKey().length - 1) + 1)\n-                        )\n-                    )\n-                    .map(points -> batchShingle(points, shingleSize))\n-            );\n+    private void processColdStartSamples(List<Optional<double[]>> samples, ActionListener<Optional<double[][]>> listener) {\n+        List<double[]> shingles = new ArrayList<>();\n+        Optional<double[]> previous = Optional.empty();\n+        List<double[]> currentBlock = new ArrayList<>();\n+        for (Optional<double[]> sample : samples) {\n+            if (sample.isPresent()) {\n+                currentBlock.add(sample.get());\n+            } else {\n+                if (previous.isPresent()) {\n+                    batchShingle(currentBlock, this.shingleSize).ifPresent(batch -> Arrays.stream(batch).forEach(shingles::add));\n+                    currentBlock.clear();\n+                }\n+            }\n+            previous = sample;\n+        }\n+        batchShingle(currentBlock, this.shingleSize).ifPresent(batch -> Arrays.stream(batch).forEach(shingles::add));\n+        listener.onResponse(Optional.of(shingles.toArray(new double[0][0])).filter(results -> results.length > 0));\n+    }\n+\n+    private Optional<double[][]> batchShingle(List<double[]> points, int shingleSize) {\n+        return Optional\n+            .ofNullable(points)\n+            .filter(p -> p.size() >= shingleSize)", "originalCommit": "976a225a275d724b0f8775b8136e0327b47ba3c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5ODExNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450498116", "bodyText": "no, since the results from search are known to be missing. that truth should not be manipulated. interpolation is for when the data is unknown.", "author": "wnbts", "createdAt": "2020-07-06T21:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTc4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450535785", "bodyText": "Interpolation is for robust results.  I don't agree with truth should not be manipulated assertion.  Say samples are always 6 points, you are gonna drop them all and start with 0 shingles.", "author": "kaituo", "createdAt": "2020-07-06T23:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0NTYxMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450545613", "bodyText": "yes, the behavior in the example is expected. when data is sparse and shingle is required, the conflict will persist throughout the detector run. even training data were to be populated by introducing non-existent data, real-time prediciton will still fail for lack of data. there will need to be a different solution for solving this problem. let's start with the right solution and see the feedback.", "author": "wnbts", "createdAt": "2020-07-07T00:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMDAyOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r451000028", "bodyText": "We had this conversation before: once in your initial cold start CR where you dropped all samples if you encounter a hole, once for missing data inside the shingle.  We agree to use limited interpolation and not dropping samples.  What's the difference this time?", "author": "kaituo", "createdAt": "2020-07-07T16:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyOTcwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r451129701", "bodyText": "Before this change, due to the few number of samples (a few dozens), interpolation has to be used or there is no training data at all.\nWith exhaustive search, there are more samples for training and knowingly inserting data that is known not to exist becomes unnecessary given its downsides.\n\ninterpolated data affects model accuracy.\nit's highly controversial and idiosyncratic when to/not to fake data, how, and even why and therefore there is unlikely a solution satisfactory to all. Think person A thinks 20% is ok for interpolation. person B thinks 60% is better. person C thinks a different interpolation is the best. and yet person D says even 10% is bad. Using data as-it-is is the most agreeable approach.\n\nThis pr is adding improvements from standard data processing over the existing one, serving as the least controversial foundation yet not a one-way door. In case someone has a strong personal preference, they can always raise a new pr based on this one for everyone to see and take/reject.", "author": "wnbts", "createdAt": "2020-07-07T20:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NzkzMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r451177933", "bodyText": "About your downside points:\n\nno doubt\nInterpolation is basic in machine learning.  I am not sure about the high controversial part.  We don't want to put users on such delicate choice of the percentage of fake data.  We want to guide users  reasonable choice.\n\nI feel the PR can be better by considering data imputation.  I don't want a half-done solution.  We have already gone this far by running much more queries than we planned.  It's better to make it worthwhile and not trivially throw away points.", "author": "kaituo", "createdAt": "2020-07-07T22:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNjg3OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r451226878", "bodyText": "the controversies are as follows.\n\nwhen to interpolate/not to interpolate. with 1% data, can anyone \"interpolate\" the rest 99%? 10% to 90%? what's the boundary? who makes the rules on what authority? even with interpolation, how many more data points are expected to be produced? no one can guarantee those arbitrary rules will produce more data points. if there is still no enough samples, then what? keep beating this dead horse?\nhow to interpolate/impute. there are many options. for example, why not just filter out gaps and shingle the remaining? again, any proposal will be unfair to some and attract challenges and who is the judge.\n\nit should be clear now that on this topic, the matters are not what everyone, or even we, can agree on, and they may continue forever due to their flexible/ill-defined targets and lack of a legal means/authority to resolve. What in one's opinion is completely-done can be considered further wrong in another's.", "author": "wnbts", "createdAt": "2020-07-08T01:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MDEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "13ca74e6dd85e9b4496af4ceafae8608bbe6adc6", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java\nindex 52ec5c2..6aef9e4 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java\n\n@@ -259,7 +261,7 @@ public class FeatureManager {\n                         ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n                     );\n             } catch (IOException e) {\n-                listener.onFailure(e);\n+                listener.onFailure(new EndRunException(detector.getDetectorId(), CommonErrorMessages.INVALID_SEARCH_QUERY_MSG, e, true));\n             }\n         } else {\n             listener.onResponse(Optional.empty());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3Njk4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450476986", "bodyText": "Is checking for latest.isPresent() (or even passing in latest as a param) still needed, since latest is not used by searchFeatureDao.getFeatureSamplesForPeriods or anywhere else in this function anymore?", "author": "LiuJoyceC", "createdAt": "2020-07-06T20:59:38Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -241,30 +250,59 @@ public void getColdStartData(AnomalyDetector detector, ActionListener<Optional<d\n \n     private void getColdStartSamples(Optional<Long> latest, AnomalyDetector detector, ActionListener<Optional<double[][]>> listener) {\n         if (latest.isPresent()) {\n-            searchFeatureDao\n-                .getFeaturesForSampledPeriods(\n-                    detector,\n-                    maxTrainSamples,\n-                    maxSampleStride,\n-                    latest.get(),\n-                    ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n-                );\n+            List<Entry<Long, Long>> sampleRanges = getColdStartSampleRanges(detector, latest.get());\n+            try {\n+                searchFeatureDao\n+                    .getFeatureSamplesForPeriods(\n+                        detector,\n+                        sampleRanges,\n+                        ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n+                    );", "originalCommit": "976a225a275d724b0f8775b8136e0327b47ba3c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5Njg2MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/184#discussion_r450496861", "bodyText": "it's now used in line 253.", "author": "wnbts", "createdAt": "2020-07-06T21:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3Njk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "13ca74e6dd85e9b4496af4ceafae8608bbe6adc6", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java\nindex 52ec5c2..6aef9e4 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java\n\n@@ -259,7 +261,7 @@ public class FeatureManager {\n                         ActionListener.wrap(samples -> processColdStartSamples(samples, listener), listener::onFailure)\n                     );\n             } catch (IOException e) {\n-                listener.onFailure(e);\n+                listener.onFailure(new EndRunException(detector.getDetectorId(), CommonErrorMessages.INVALID_SEARCH_QUERY_MSG, e, true));\n             }\n         } else {\n             listener.onResponse(Optional.empty());\n"}}, {"oid": "13ca74e6dd85e9b4496af4ceafae8608bbe6adc6", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/13ca74e6dd85e9b4496af4ceafae8608bbe6adc6", "message": "change to exhausive search for training data", "committedDate": "2020-07-09T01:33:53Z", "type": "commit"}]}