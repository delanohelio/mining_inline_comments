{"pr_number": 72, "pr_title": "preview detector on the fly", "pr_createdAt": "2020-03-19T21:21:23Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r395955426", "bodyText": "I removed run since it is the same as executeDetector.  Please rebase .", "author": "kaituo", "createdAt": "2020-03-21T03:02:55Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -106,12 +106,27 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             String rawPath = request.rawPath();\n             String error = validateAdExecutionInput(input);\n             if (error != null) {\n-                channel.sendResponse(new BytesRestResponse(RestStatus.NOT_FOUND, error));\n+                channel.sendResponse(new BytesRestResponse(RestStatus.BAD_REQUEST, error));\n                 return;\n             }\n \n             if (rawPath.endsWith(PREVIEW)) {\n-                preivewAnomalyDetector(client, channel, input);\n+                if (input.getDetector() != null) {\n+                    error = validateDetector(input.getDetector());\n+                    if (error != null) {\n+                        channel.sendResponse(new BytesRestResponse(RestStatus.BAD_REQUEST, error));\n+                        return;\n+                    }\n+                    anomalyDetectorRunner\n+                        .run(", "originalCommit": "d51b001b9662a7b47c0a99d339d8064270525a7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODQ0NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396608444", "bodyText": "sure, will rebase", "author": "ylwu-amzn", "createdAt": "2020-03-23T17:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "13847b40d68a47450d0d3c4fe74f93eeb2106f70", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\nindex 45daba6..4185309 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n\n@@ -118,7 +118,7 @@ public class RestExecuteAnomalyDetectorAction extends BaseRestHandler {\n                         return;\n                     }\n                     anomalyDetectorRunner\n-                        .run(\n+                        .executeDetector(\n                             input.getDetector(),\n                             input.getPeriodStart(),\n                             input.getPeriodEnd(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQ3MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r395955470", "bodyText": "Do u need to verify other things like index name?", "author": "kaituo", "createdAt": "2020-03-21T03:03:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -123,6 +138,13 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n         };\n     }\n \n+    private String validateDetector(AnomalyDetector detector) {\n+        if (detector.getFeatureAttributes().isEmpty()) {", "originalCommit": "d51b001b9662a7b47c0a99d339d8064270525a7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODgyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396608826", "bodyText": "Other required fields are verified in AnomalyDetector", "author": "ylwu-amzn", "createdAt": "2020-03-23T17:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg0Njk2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396846962", "bodyText": "As Lai suggested, add same validation logic as  line 166 in IndexAnomalyDetectorActionHandler.java", "author": "ylwu-amzn", "createdAt": "2020-03-24T01:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "72a4754bfc39ead472d256a9bc814cb63844e4ac", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\nindex 45daba6..0707948 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n\n@@ -141,8 +146,9 @@ public class RestExecuteAnomalyDetectorAction extends BaseRestHandler {\n     private String validateDetector(AnomalyDetector detector) {\n         if (detector.getFeatureAttributes().isEmpty()) {\n             return \"Can't preview detector without feature\";\n+        } else {\n+            return RestHandlerUtils.validateAnomalyDetector(detector, maxAnomalyFeatures);\n         }\n-        return null;\n     }\n \n     private AnomalyDetectorExecutionInput getAnomalyDetectorExecutionInput(RestRequest request) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTU0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r395955547", "bodyText": "rest status should be internal failure.  I updated and please rebase.", "author": "kaituo", "createdAt": "2020-03-21T03:04:56Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -184,24 +206,29 @@ protected void processResponse(GetResponse response) throws Exception {\n                 ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n                 AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n \n-                anomalyDetectorRunner.run(detector, input.getPeriodStart(), input.getPeriodEnd(), ActionListener.wrap(anomalyResult -> {\n-                    XContentBuilder builder = channel\n-                        .newBuilder()\n-                        .startObject()\n-                        .field(ANOMALY_RESULT, anomalyResult)\n-                        .field(ANOMALY_DETECTOR, detector)\n-                        .endObject();\n-                    channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                }, exception -> {\n-                    logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n-                    try {\n-                        XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n-                        channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n-                    } catch (IOException e) {\n-                        logger.error(\"Fail to send back exception message\" + detector.getDetectorId(), exception);\n-                    }\n-                }));\n+                anomalyDetectorRunner\n+                    .run(detector, input.getPeriodStart(), input.getPeriodEnd(), getPreviewDetectorActionListener(channel, detector));\n             }\n         };\n     }\n+\n+    private ActionListener getPreviewDetectorActionListener(RestChannel channel, AnomalyDetector detector) {\n+        return ActionListener.wrap(anomalyResult -> {\n+            XContentBuilder builder = channel\n+                .newBuilder()\n+                .startObject()\n+                .field(ANOMALY_RESULT, anomalyResult)\n+                .field(ANOMALY_DETECTOR, detector)\n+                .endObject();\n+            channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n+        }, exception -> {\n+            logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n+            try {\n+                XContentBuilder builder = channel.newBuilder().startObject().field(ANOMALY_DETECTOR, detector).endObject();\n+                channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));", "originalCommit": "d51b001b9662a7b47c0a99d339d8064270525a7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODk5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396608996", "bodyText": "Sure, will rebase", "author": "ylwu-amzn", "createdAt": "2020-03-23T17:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NTU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "13847b40d68a47450d0d3c4fe74f93eeb2106f70", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\nindex 45daba6..4185309 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n\n@@ -207,7 +207,7 @@ public class RestExecuteAnomalyDetectorAction extends BaseRestHandler {\n                 AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n \n                 anomalyDetectorRunner\n-                    .run(detector, input.getPeriodStart(), input.getPeriodEnd(), getPreviewDetectorActionListener(channel, detector));\n+                    .executeDetector(detector, input.getPeriodStart(), input.getPeriodEnd(), getPreviewDetectorActionListener(channel, detector));\n             }\n         };\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NjUyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r395956526", "bodyText": "Instead of creating a new AnomalyDetector, why don't we have a setter method for update time and reset anomalyDetector's last update time?", "author": "kaituo", "createdAt": "2020-03-21T03:20:56Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -268,9 +269,24 @@ private void onSearchAdInputIndicesResponse(SearchResponse response, String dete\n     }\n \n     private void indexAnomalyDetector(String detectorId) throws IOException {\n+        AnomalyDetector detector = new AnomalyDetector(\n+            anomalyDetector.getDetectorId(),", "originalCommit": "d51b001b9662a7b47c0a99d339d8064270525a7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTk0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396609941", "bodyText": "This is to make detector immutable object, to make it thread-safe.", "author": "ylwu-amzn", "createdAt": "2020-03-23T17:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NjUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NzgwMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396857802", "bodyText": "make sense", "author": "kaituo", "createdAt": "2020-03-24T01:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1NjUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "13847b40d68a47450d0d3c4fe74f93eeb2106f70", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\nindex b8ab28c..27156f7 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java\n\n@@ -269,24 +268,9 @@ public class IndexAnomalyDetectorActionHandler extends AbstractActionHandler {\n     }\n \n     private void indexAnomalyDetector(String detectorId) throws IOException {\n-        AnomalyDetector detector = new AnomalyDetector(\n-            anomalyDetector.getDetectorId(),\n-            anomalyDetector.getVersion(),\n-            anomalyDetector.getName(),\n-            anomalyDetector.getDescription(),\n-            anomalyDetector.getTimeField(),\n-            anomalyDetector.getIndices(),\n-            anomalyDetector.getFeatureAttributes(),\n-            anomalyDetector.getFilterQuery(),\n-            anomalyDetector.getDetectionInterval(),\n-            anomalyDetector.getWindowDelay(),\n-            anomalyDetector.getUiMetadata(),\n-            anomalyDetector.getSchemaVersion(),\n-            Instant.now()\n-        );\n         IndexRequest indexRequest = new IndexRequest(ANOMALY_DETECTORS_INDEX)\n             .setRefreshPolicy(refreshPolicy)\n-            .source(detector.toXContent(channel.newBuilder(), XCONTENT_WITH_TYPE))\n+            .source(anomalyDetector.toXContent(channel.newBuilder(), XCONTENT_WITH_TYPE))\n             .setIfSeqNo(seqNo)\n             .setIfPrimaryTerm(primaryTerm)\n             .timeout(requestTimeout);\n"}}, {"oid": "13847b40d68a47450d0d3c4fe74f93eeb2106f70", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/13847b40d68a47450d0d3c4fe74f93eeb2106f70", "message": "preview detector on the fly", "committedDate": "2020-03-22T00:33:59Z", "type": "commit"}, {"oid": "b9019b18dc4f90c07e61c1f271762b90dd8d851a", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/b9019b18dc4f90c07e61c1f271762b90dd8d851a", "message": "reset detector last update time when create/update", "committedDate": "2020-03-22T00:33:59Z", "type": "commit"}, {"oid": "0d9f58fc5fd2ade84e45d442c1c6468aef5cf4d1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/0d9f58fc5fd2ade84e45d442c1c6468aef5cf4d1", "message": "resolve merge conflict", "committedDate": "2020-03-22T04:16:15Z", "type": "commit"}, {"oid": "0d9f58fc5fd2ade84e45d442c1c6468aef5cf4d1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/0d9f58fc5fd2ade84e45d442c1c6468aef5cf4d1", "message": "resolve merge conflict", "committedDate": "2020-03-22T04:16:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3OTEzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396779131", "bodyText": "should this validation be the same as the one in indexing detector, line 166 in IndexAnomalyDetectorActionHandler.java ?", "author": "wnbts", "createdAt": "2020-03-23T21:52:57Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java", "diffHunk": "@@ -123,6 +138,13 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n         };\n     }\n \n+    private String validateDetector(AnomalyDetector detector) {", "originalCommit": "0d9f58fc5fd2ade84e45d442c1c6468aef5cf4d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg0NzA1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/72#discussion_r396847055", "bodyText": "Good point, will add that verification.", "author": "ylwu-amzn", "createdAt": "2020-03-24T01:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3OTEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "72a4754bfc39ead472d256a9bc814cb63844e4ac", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\nindex 35c02cb..0707948 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestExecuteAnomalyDetectorAction.java\n\n@@ -141,8 +146,9 @@ public class RestExecuteAnomalyDetectorAction extends BaseRestHandler {\n     private String validateDetector(AnomalyDetector detector) {\n         if (detector.getFeatureAttributes().isEmpty()) {\n             return \"Can't preview detector without feature\";\n+        } else {\n+            return RestHandlerUtils.validateAnomalyDetector(detector, maxAnomalyFeatures);\n         }\n-        return null;\n     }\n \n     private AnomalyDetectorExecutionInput getAnomalyDetectorExecutionInput(RestRequest request) throws IOException {\n"}}, {"oid": "72a4754bfc39ead472d256a9bc814cb63844e4ac", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/72a4754bfc39ead472d256a9bc814cb63844e4ac", "message": "validate duplicate feature/aggregation name", "committedDate": "2020-03-24T01:00:05Z", "type": "commit"}]}