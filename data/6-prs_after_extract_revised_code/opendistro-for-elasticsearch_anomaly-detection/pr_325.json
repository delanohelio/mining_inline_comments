{"pr_number": 325, "pr_title": "Adding role based filtering for rest of APIs", "pr_createdAt": "2020-12-07T18:46:50Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325", "timeline": [{"oid": "6e3ae23973459c4a5b1ceeb59e19031d21541245", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/6e3ae23973459c4a5b1ceeb59e19031d21541245", "message": "Adding role based filtering on rest of the APIs", "committedDate": "2020-12-07T18:12:51Z", "type": "commit"}, {"oid": "8133c1d0b4153cde70ae203c6d52a758d385ca97", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8133c1d0b4153cde70ae203c6d52a758d385ca97", "message": "Adding exception handling", "committedDate": "2020-12-07T18:25:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MTExOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r537771119", "bodyText": "I have seen multiple resolveUserAndExecute for different TransportAction, is it possible to change it to a common method like below?\nresolveUserAndExecute(User requestedUser,\n        String detectorId,\n        ActionListener listener,\n        AnomalyDetectorFunction function,\n        AnomalyDetectorFunction functionWithSecurityAndFilterBy) // a better name is needed. :)\n {\n\n        if (requestedUser == null) {\n            // Security is disabled or user is superadmin\n            function.execute();\n        } else if (!filterByEnabled) {\n            // security is enabled and filterby is disabled.\n            function.execute();\n        } else {\n            // security is enabled and filterby is enabled.\n            // Get detector and check if the user has permissions to access the detector\n            try {\n                functionWithSecurityAndFilterBy.execute();\n            } catch (Exception e) {\n                listener.onFailure(e);\n            }\n        }\n}", "author": "yizheliu-amazon", "createdAt": "2020-12-07T19:29:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobTransportAction.java", "diffHunk": "@@ -34,64 +36,104 @@\n import org.elasticsearch.transport.TransportService;\n \n import com.amazon.opendistroforelasticsearch.ad.indices.AnomalyDetectionIndices;\n+import com.amazon.opendistroforelasticsearch.ad.rest.handler.AnomalyDetectorFunction;\n import com.amazon.opendistroforelasticsearch.ad.rest.handler.IndexAnomalyDetectorJobActionHandler;\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.User;\n \n public class AnomalyDetectorJobTransportAction extends HandledTransportAction<AnomalyDetectorJobRequest, AnomalyDetectorJobResponse> {\n     private final Logger logger = LogManager.getLogger(AnomalyDetectorJobTransportAction.class);\n \n     private final Client client;\n+    private final ClusterService clusterService;\n     private final Settings settings;\n     private final AnomalyDetectionIndices anomalyDetectionIndices;\n     private final NamedXContentRegistry xContentRegistry;\n+    private volatile Boolean filterByEnabled;\n \n     @Inject\n     public AnomalyDetectorJobTransportAction(\n         TransportService transportService,\n         ActionFilters actionFilters,\n         Client client,\n+        ClusterService clusterService,\n         Settings settings,\n         AnomalyDetectionIndices anomalyDetectionIndices,\n         NamedXContentRegistry xContentRegistry\n     ) {\n         super(AnomalyDetectorJobAction.NAME, transportService, actionFilters, AnomalyDetectorJobRequest::new);\n         this.client = client;\n+        this.clusterService = clusterService;\n         this.settings = settings;\n         this.anomalyDetectionIndices = anomalyDetectionIndices;\n         this.xContentRegistry = xContentRegistry;\n+        filterByEnabled = AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(FILTER_BY_BACKEND_ROLES, it -> filterByEnabled = it);\n     }\n \n     @Override\n     protected void doExecute(Task task, AnomalyDetectorJobRequest request, ActionListener<AnomalyDetectorJobResponse> listener) {\n+        String detectorId = request.getDetectorID();\n+        // By the time request reaches here, the user permissions are validated by Security plugin.\n+        User user = getUserContext(client);\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            resolveUserAndExecute(user, detectorId, listener, () -> adJobExecute(request, listener));\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private void adJobExecute(AnomalyDetectorJobRequest request, ActionListener<AnomalyDetectorJobResponse> listener) {\n         String detectorId = request.getDetectorID();\n         long seqNo = request.getSeqNo();\n         long primaryTerm = request.getPrimaryTerm();\n         String rawPath = request.getRawPath();\n         TimeValue requestTimeout = REQUEST_TIMEOUT.get(settings);\n \n-        // By the time request reaches here, the user permissions are validated by Security plugin.\n-        // Since the detectorID is provided, this can only happen if User is part of a role which has access\n-        // to the detector. This is filtered by our Search Detector API.\n-\n-        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n-            IndexAnomalyDetectorJobActionHandler handler = new IndexAnomalyDetectorJobActionHandler(\n-                client,\n-                listener,\n-                anomalyDetectionIndices,\n-                detectorId,\n-                seqNo,\n-                primaryTerm,\n-                requestTimeout,\n-                xContentRegistry\n-            );\n+        IndexAnomalyDetectorJobActionHandler handler = new IndexAnomalyDetectorJobActionHandler(\n+            client,\n+            listener,\n+            anomalyDetectionIndices,\n+            detectorId,\n+            seqNo,\n+            primaryTerm,\n+            requestTimeout,\n+            xContentRegistry\n+        );\n+        try {\n             if (rawPath.endsWith(RestHandlerUtils.START_JOB)) {\n                 handler.startAnomalyDetectorJob();\n             } else if (rawPath.endsWith(RestHandlerUtils.STOP_JOB)) {\n                 handler.stopAnomalyDetectorJob(detectorId);\n             }\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             logger.error(e);\n             listener.onFailure(e);\n         }\n     }\n+\n+    private void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        ActionListener<AnomalyDetectorJobResponse> listener,\n+        AnomalyDetectorFunction function\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }", "originalCommit": "8133c1d0b4153cde70ae203c6d52a758d385ca97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3Mzk2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r537773962", "bodyText": "Yeah good point. I thought about it as well. I backed off because IndexAnomalyDetectorTransportAction needed a slightly different logic within this function.\nWhat I can do is stub this out to a common function and leave it for IndexAnomalyDetectorTransportAction.", "author": "saratvemulapalli", "createdAt": "2020-12-07T19:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MTExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c08d59c9ad8bf626300915750ce215d6a76cb8be", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobTransportAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobTransportAction.java\nindex a7e5534..7787def 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobTransportAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobTransportAction.java\n\n@@ -36,7 +36,6 @@ import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n \n import com.amazon.opendistroforelasticsearch.ad.indices.AnomalyDetectionIndices;\n-import com.amazon.opendistroforelasticsearch.ad.rest.handler.AnomalyDetectorFunction;\n import com.amazon.opendistroforelasticsearch.ad.rest.handler.IndexAnomalyDetectorJobActionHandler;\n import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MjI3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r537772272", "bodyText": "maybe replace with ResourceNotFound exception", "author": "yizheliu-amazon", "createdAt": "2020-12-07T19:31:31Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +457,99 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void getDetector(\n+        User requestUser,\n+        String detectorId,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (clusterService.state().metadata().indices().containsKey(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+            GetRequest request = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client\n+                .get(\n+                    request,\n+                    ActionListener\n+                        .wrap(\n+                            response -> onGetAdResponse(response, requestUser, detectorId, listener, function, xContentRegistry),\n+                            exception -> {\n+                                logger.error(\"Failed to get anomaly detector: \" + detectorId, exception);\n+                                listener.onFailure(exception);\n+                            }\n+                        )\n+                );\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Failed to get anomaly detector: \" + detectorId));\n+        }\n+    }\n+\n+    public static void onGetAdResponse(\n+        GetResponse response,\n+        User requestUser,\n+        String detectorId,\n+        ActionListener<GetAnomalyDetectorResponse> listener,\n+        AnomalyDetectorFunction function,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (response.isExists()) {\n+            try (\n+                XContentParser parser = RestHandlerUtils.createXContentParserFromRegistry(xContentRegistry, response.getSourceAsBytesRef())\n+            ) {\n+                ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n+                AnomalyDetector detector = AnomalyDetector.parse(parser);\n+                User resourceUser = detector.getUser();\n+\n+                if (checkUserPermissions(requestUser, resourceUser, detectorId)) {\n+                    function.execute();\n+                } else {\n+                    logger.debug(\"User: \" + requestUser.getName() + \" does not have permissions to access detector: \" + detectorId);\n+                    listener.onFailure(new ElasticsearchException(\"User does not have permissions to access detector: \" + detectorId));\n+                }\n+            } catch (Exception e) {\n+                listener.onFailure(new ElasticsearchException(\"Unable to get user information from detector \" + detectorId));\n+            }\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Could not find detector \" + detectorId));", "originalCommit": "8133c1d0b4153cde70ae203c6d52a758d385ca97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NDk0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r537774949", "bodyText": "+1 I like that sure.", "author": "saratvemulapalli", "createdAt": "2020-12-07T19:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MjI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c08d59c9ad8bf626300915750ce215d6a76cb8be", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\nindex 0731339..50ea3f7 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n\n@@ -457,6 +458,33 @@ public final class ParseUtils {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        boolean filterByEnabled,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n     public static void getDetector(\n         User requestUser,\n         String detectorId,\n"}}, {"oid": "c08d59c9ad8bf626300915750ce215d6a76cb8be", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/c08d59c9ad8bf626300915750ce215d6a76cb8be", "message": "Moving common code to ParseUtils", "committedDate": "2020-12-08T19:08:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3NjgwNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r538876806", "bodyText": "How about change this error message to \"Anomaly detector index not found\"? \"Failed to get anomaly detector\" is too general and doesn't show exactly this error.", "author": "ylwu-amzn", "createdAt": "2020-12-08T23:08:25Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +458,126 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        boolean filterByEnabled,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n+    public static void getDetector(\n+        User requestUser,\n+        String detectorId,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (clusterService.state().metadata().indices().containsKey(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+            GetRequest request = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client\n+                .get(\n+                    request,\n+                    ActionListener\n+                        .wrap(\n+                            response -> onGetAdResponse(response, requestUser, detectorId, listener, function, xContentRegistry),\n+                            exception -> {\n+                                logger.error(\"Failed to get anomaly detector: \" + detectorId, exception);\n+                                listener.onFailure(exception);\n+                            }\n+                        )\n+                );\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Failed to get anomaly detector: \" + detectorId));", "originalCommit": "c08d59c9ad8bf626300915750ce215d6a76cb8be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MDU0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r538890543", "bodyText": "Sure that makes sense as well. It's probably actionable for the user.", "author": "saratvemulapalli", "createdAt": "2020-12-08T23:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3NjgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e2ad5c562e26d18769143b385d4db7146780e95a", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\nindex 50ea3f7..9c31226 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n\n@@ -509,7 +509,10 @@ public final class ParseUtils {\n                         )\n                 );\n         } else {\n-            listener.onFailure(new ElasticsearchException(\"Failed to get anomaly detector: \" + detectorId));\n+            listener\n+                .onFailure(\n+                    new ResourceNotFoundException(\"Failed to find anomaly detector index: \" + AnomalyDetector.ANOMALY_DETECTORS_INDEX)\n+                );\n         }\n     }\n \n"}}, {"oid": "e2ad5c562e26d18769143b385d4db7146780e95a", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/e2ad5c562e26d18769143b385d4db7146780e95a", "message": "Updating exception handling", "committedDate": "2020-12-08T23:59:42Z", "type": "commit"}, {"oid": "d3cb69a081580d7dc6cb0b64a24863368bbf0362", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d3cb69a081580d7dc6cb0b64a24863368bbf0362", "message": "Merge branch 'master' into fgac-role-based-filtering", "committedDate": "2020-12-09T22:07:28Z", "type": "commit"}, {"oid": "349b1e36a8fd53e86fd472abd02900a5b5f6bf3c", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/349b1e36a8fd53e86fd472abd02900a5b5f6bf3c", "message": "Merge branch 'master' into fgac-role-based-filtering", "committedDate": "2020-12-09T22:32:17Z", "type": "commit"}, {"oid": "25c6e1ef1ac44433c7148c347b393ed2522f8a63", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/25c6e1ef1ac44433c7148c347b393ed2522f8a63", "message": "Adding tests for creating anomaly detector transport action", "committedDate": "2020-12-10T06:29:32Z", "type": "commit"}, {"oid": "43880bd8fa82649a8ce67992e3bd6499bd182646", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/43880bd8fa82649a8ce67992e3bd6499bd182646", "message": "Merge branch 'fgac-role-based-filtering' of https://github.com/opendistro-for-elasticsearch/anomaly-detection into fgac-role-based-filtering", "committedDate": "2020-12-10T06:38:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODQzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540348435", "bodyText": "ParseUtils are utility functions to parse ES responses.  Can we move these functions to sth like SecurityUtils?", "author": "kaituo", "createdAt": "2020-12-10T17:14:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +458,129 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(", "originalCommit": "43880bd8fa82649a8ce67992e3bd6499bd182646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4MTg0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540381843", "bodyText": "Thats a good point. I thought about it as well. Will make a change as part of the integration tests coming up in the next PR.", "author": "saratvemulapalli", "createdAt": "2020-12-10T18:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NTkxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540385919", "bodyText": "When you add security plugin, how would the gradle build work when we upgrade versions?  Would the test depend on the availability of the new security plugin version?", "author": "kaituo", "createdAt": "2020-12-10T18:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNDM4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540404381", "bodyText": "Good question. There are 2 parts to answer:\n\nHow do we test the existing functionality is not broken by changes in AD.\nHow do we test new changes in security plugin that our existing functionality is not broken in AD.\n\n1> We will use the tests where security is enabled as part of our CI. This will pull in the latest docker image and will test what ever is available.\n2> The next step is to take the tip of Security Plugin and test our changes against it. I am exploring different options to do this and we will have other dependency issues like our CI being blocked due to security plugin changes.\nAlso, doing step 1. allows testing against local clusters which is a good start as part of our release even though the latest docker is not available.\nI hope that helps.", "author": "saratvemulapalli", "createdAt": "2020-12-10T18:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwODE0MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540408140", "bodyText": "Yes, we need to use stable release version of security plugin to test so that security plugin bugs won't block us that often as you said.\nAlso, if new versions are not available during release preparation, we need to skip the test.", "author": "kaituo", "createdAt": "2020-12-10T18:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "31b4a9f83101057896ba310a15e6a4908d02ffb4", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\nindex 9c31226..68e515d 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n\n@@ -546,7 +546,7 @@ public final class ParseUtils {\n         }\n     }\n \n-    public static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {\n+    private static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {\n         if (resourceUser.getBackendRoles() == null || requestedUser.getBackendRoles() == null) {\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MDU1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540350556", "bodyText": "Since this is a public function, what if the caller passes in a null requestedUser or resourceUser?  Also, we are assuming backend role filter is on before calling this function, what if users forget that?  If it is only used by other functions in the class, can we make it private?", "author": "kaituo", "createdAt": "2020-12-10T17:17:16Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +458,129 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        boolean filterByEnabled,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n+    public static void getDetector(\n+        User requestUser,\n+        String detectorId,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (clusterService.state().metadata().indices().containsKey(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+            GetRequest request = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client\n+                .get(\n+                    request,\n+                    ActionListener\n+                        .wrap(\n+                            response -> onGetAdResponse(response, requestUser, detectorId, listener, function, xContentRegistry),\n+                            exception -> {\n+                                logger.error(\"Failed to get anomaly detector: \" + detectorId, exception);\n+                                listener.onFailure(exception);\n+                            }\n+                        )\n+                );\n+        } else {\n+            listener\n+                .onFailure(\n+                    new ResourceNotFoundException(\"Failed to find anomaly detector index: \" + AnomalyDetector.ANOMALY_DETECTORS_INDEX)\n+                );\n+        }\n+    }\n+\n+    public static void onGetAdResponse(\n+        GetResponse response,\n+        User requestUser,\n+        String detectorId,\n+        ActionListener<GetAnomalyDetectorResponse> listener,\n+        AnomalyDetectorFunction function,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (response.isExists()) {\n+            try (\n+                XContentParser parser = RestHandlerUtils.createXContentParserFromRegistry(xContentRegistry, response.getSourceAsBytesRef())\n+            ) {\n+                ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n+                AnomalyDetector detector = AnomalyDetector.parse(parser);\n+                User resourceUser = detector.getUser();\n+\n+                if (checkUserPermissions(requestUser, resourceUser, detectorId)) {\n+                    function.execute();\n+                } else {\n+                    logger.debug(\"User: \" + requestUser.getName() + \" does not have permissions to access detector: \" + detectorId);\n+                    listener.onFailure(new ElasticsearchException(\"User does not have permissions to access detector: \" + detectorId));\n+                }\n+            } catch (Exception e) {\n+                listener.onFailure(new ElasticsearchException(\"Unable to get user information from detector \" + detectorId));\n+            }\n+        } else {\n+            listener.onFailure(new ResourceNotFoundException(\"Could not find detector \" + detectorId));\n+        }\n+    }\n+\n+    public static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {", "originalCommit": "43880bd8fa82649a8ce67992e3bd6499bd182646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NTE3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540375175", "bodyText": "Sure, we can make this private, which actually makes sense as no other callers exist at this point of time.\nAlso the assumption is this function is only called when backend role filter is enabled and user is not null.", "author": "saratvemulapalli", "createdAt": "2020-12-10T17:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MDU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "31b4a9f83101057896ba310a15e6a4908d02ffb4", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\nindex 9c31226..68e515d 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n\n@@ -546,7 +546,7 @@ public final class ParseUtils {\n         }\n     }\n \n-    public static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {\n+    private static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {\n         if (resourceUser.getBackendRoles() == null || requestedUser.getBackendRoles() == null) {\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTU5MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540351590", "bodyText": "You may want to add requestedUsers != null if this is a public method.", "author": "kaituo", "createdAt": "2020-12-10T17:18:43Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java", "diffHunk": "@@ -450,6 +458,129 @@ public static User getUserContext(Client client) {\n         return User.parse(userStr);\n     }\n \n+    public static void resolveUserAndExecute(\n+        User requestedUser,\n+        String detectorId,\n+        boolean filterByEnabled,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (requestedUser == null) {\n+            // Security is disabled or user is superadmin\n+            function.execute();\n+        } else if (!filterByEnabled) {\n+            // security is enabled and filterby is disabled.\n+            function.execute();\n+        } else {\n+            // security is enabled and filterby is enabled.\n+            // Get detector and check if the user has permissions to access the detector\n+            try {\n+                getDetector(requestedUser, detectorId, listener, function, client, clusterService, xContentRegistry);\n+            } catch (Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n+    public static void getDetector(\n+        User requestUser,\n+        String detectorId,\n+        ActionListener listener,\n+        AnomalyDetectorFunction function,\n+        Client client,\n+        ClusterService clusterService,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (clusterService.state().metadata().indices().containsKey(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+            GetRequest request = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client\n+                .get(\n+                    request,\n+                    ActionListener\n+                        .wrap(\n+                            response -> onGetAdResponse(response, requestUser, detectorId, listener, function, xContentRegistry),\n+                            exception -> {\n+                                logger.error(\"Failed to get anomaly detector: \" + detectorId, exception);\n+                                listener.onFailure(exception);\n+                            }\n+                        )\n+                );\n+        } else {\n+            listener\n+                .onFailure(\n+                    new ResourceNotFoundException(\"Failed to find anomaly detector index: \" + AnomalyDetector.ANOMALY_DETECTORS_INDEX)\n+                );\n+        }\n+    }\n+\n+    public static void onGetAdResponse(\n+        GetResponse response,\n+        User requestUser,\n+        String detectorId,\n+        ActionListener<GetAnomalyDetectorResponse> listener,\n+        AnomalyDetectorFunction function,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        if (response.isExists()) {\n+            try (\n+                XContentParser parser = RestHandlerUtils.createXContentParserFromRegistry(xContentRegistry, response.getSourceAsBytesRef())\n+            ) {\n+                ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n+                AnomalyDetector detector = AnomalyDetector.parse(parser);\n+                User resourceUser = detector.getUser();\n+\n+                if (checkUserPermissions(requestUser, resourceUser, detectorId)) {\n+                    function.execute();\n+                } else {\n+                    logger.debug(\"User: \" + requestUser.getName() + \" does not have permissions to access detector: \" + detectorId);\n+                    listener.onFailure(new ElasticsearchException(\"User does not have permissions to access detector: \" + detectorId));\n+                }\n+            } catch (Exception e) {\n+                listener.onFailure(new ElasticsearchException(\"Unable to get user information from detector \" + detectorId));\n+            }\n+        } else {\n+            listener.onFailure(new ResourceNotFoundException(\"Could not find detector \" + detectorId));\n+        }\n+    }\n+\n+    public static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {\n+        if (resourceUser.getBackendRoles() == null || requestedUser.getBackendRoles() == null) {\n+            return false;\n+        }\n+        // Check if requested user has backend role required to access the resource\n+        for (String backendRole : requestedUser.getBackendRoles()) {\n+            if (resourceUser.getBackendRoles().contains(backendRole)) {\n+                logger\n+                    .debug(\n+                        \"User: \"\n+                            + requestedUser.getName()\n+                            + \" has backend role: \"\n+                            + backendRole\n+                            + \" permissions to access detector: \"\n+                            + detectorId\n+                    );\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static boolean checkFilterByBackendRoles(User requestedUser, ActionListener listener) {", "originalCommit": "43880bd8fa82649a8ce67992e3bd6499bd182646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NjkwMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540376902", "bodyText": "Sure we can add that it doesnt hurt, but also we only use this when the user is not null.", "author": "saratvemulapalli", "createdAt": "2020-12-10T17:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NjYyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540386626", "bodyText": "yeah, understood.  When others call this method, they have to have the same level of familiarity to the code like you.", "author": "kaituo", "createdAt": "2020-12-10T18:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NzAzMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540397030", "bodyText": "Sure makes sense.", "author": "saratvemulapalli", "createdAt": "2020-12-10T18:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "31b4a9f83101057896ba310a15e6a4908d02ffb4", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\nindex 9c31226..68e515d 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ParseUtils.java\n\n@@ -546,7 +546,7 @@ public final class ParseUtils {\n         }\n     }\n \n-    public static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {\n+    private static boolean checkUserPermissions(User requestedUser, User resourceUser, String detectorId) throws Exception {\n         if (resourceUser.getBackendRoles() == null || requestedUser.getBackendRoles() == null) {\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzE1NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540367154", "bodyText": "Not related to this line, when I read testStartAdJobTransportAction and testStopAdJobTransportAction, there are no asserts or verification.  Is it correct?", "author": "kaituo", "createdAt": "2020-12-10T17:40:12Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java", "diffHunk": "@@ -43,11 +55,26 @@\n     @Before\n     public void setUp() throws Exception {\n         super.setUp();\n+        ClusterService clusterService = mock(ClusterService.class);\n+        ClusterSettings clusterSettings = new ClusterSettings(\n+            Settings.EMPTY,\n+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES)))\n+        );\n+\n+        Settings build = Settings.builder().build();\n+        ThreadContext threadContext = new ThreadContext(build);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice\");\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        Client client = mock(Client.class);\n+        org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n+        when(client.threadPool()).thenReturn(mockThreadPool);\n+        when(mockThreadPool.getThreadContext()).thenReturn(threadContext);\n \n         action = new AnomalyDetectorJobTransportAction(\n             mock(TransportService.class),\n             mock(ActionFilters.class),\n-            client(),\n+            client,\n+            clusterService,", "originalCommit": "43880bd8fa82649a8ce67992e3bd6499bd182646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3ODIzMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540378230", "bodyText": "Correct, the asserts are in the listener, when the transport action is called. And the listener is common to all of them.", "author": "saratvemulapalli", "createdAt": "2020-12-10T17:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NzUyMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540387523", "bodyText": "Are these the asserts you referred to:\nresponse = new ActionListener<AnomalyDetectorJobResponse>() {\n            @Override\n            public void onResponse(AnomalyDetectorJobResponse adResponse) {\n                // Will not be called as there is no detector\n                Assert.assertTrue(true);\n            }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                // Will not be called as there is no detector\n                Assert.assertTrue(true);\n            }\n        };\n\nIf yes, we always pass the test?", "author": "kaituo", "createdAt": "2020-12-10T18:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NzM3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540397371", "bodyText": "Nice catch, onResponse should have been false. I'll take care of that.", "author": "saratvemulapalli", "createdAt": "2020-12-10T18:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "31b4a9f83101057896ba310a15e6a4908d02ffb4", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java b/src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java\nindex d74bba4..9c519f8 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java\n\n@@ -63,7 +63,7 @@ public class AnomalyDetectorJobActionTests extends ESIntegTestCase {\n \n         Settings build = Settings.builder().build();\n         ThreadContext threadContext = new ThreadContext(build);\n-        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice\");\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice|odfe,aes|engineering,operations\");\n         when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n         Client client = mock(Client.class);\n         org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzYwNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540367606", "bodyText": "do we have code verifying alice has permission to do sth but not others?", "author": "kaituo", "createdAt": "2020-12-10T17:40:48Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java", "diffHunk": "@@ -43,11 +55,26 @@\n     @Before\n     public void setUp() throws Exception {\n         super.setUp();\n+        ClusterService clusterService = mock(ClusterService.class);\n+        ClusterSettings clusterSettings = new ClusterSettings(\n+            Settings.EMPTY,\n+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES)))\n+        );\n+\n+        Settings build = Settings.builder().build();\n+        ThreadContext threadContext = new ThreadContext(build);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice\");", "originalCommit": "43880bd8fa82649a8ce67992e3bd6499bd182646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NzM0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540377349", "bodyText": "That will not be covered in the unit tests, integration tests will cover them.", "author": "saratvemulapalli", "createdAt": "2020-12-10T17:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NDc2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540384767", "bodyText": "We can still do it in unit tests by mocking the output of resourceUser.getBackendRoles().", "author": "kaituo", "createdAt": "2020-12-10T18:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MjkxNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r541272914", "bodyText": "Definitely, the problem with verifying Alice permissions is that we have to create a detector with a user, then probably verify if alice really has access. We are literally spending a lot of time mocking some parts rather than unit testing, integration tests will cleanly cover them. I understand we dont have it as part of Jacoco for integration tests, I'll spend sometime to get that working, its probably worth the effort.", "author": "saratvemulapalli", "createdAt": "2020-12-11T20:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMTkxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r541301919", "bodyText": "Thanks Sarat.", "author": "kaituo", "createdAt": "2020-12-11T21:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NzYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "31b4a9f83101057896ba310a15e6a4908d02ffb4", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java b/src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java\nindex d74bba4..9c519f8 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyDetectorJobActionTests.java\n\n@@ -63,7 +63,7 @@ public class AnomalyDetectorJobActionTests extends ESIntegTestCase {\n \n         Settings build = Settings.builder().build();\n         ThreadContext threadContext = new ThreadContext(build);\n-        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice\");\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice|odfe,aes|engineering,operations\");\n         when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n         Client client = mock(Client.class);\n         org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODIyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540368225", "bodyText": "any verification after the call?", "author": "kaituo", "createdAt": "2020-12-10T17:41:33Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/IndexAnomalyDetectorTransportActionTests.java", "diffHunk": "@@ -83,6 +105,52 @@ public void testIndexTransportAction() {\n         action.doExecute(task, request, response);\n     }\n \n+    @Test\n+    public void testIndexTransportActionWithUserAndFilterOn() {\n+        Settings settings = Settings.builder().put(AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.getKey(), true).build();\n+        ThreadContext threadContext = new ThreadContext(settings);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice|odfe,aes|engineering,operations\");\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        Client client = mock(Client.class);\n+        org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n+        when(client.threadPool()).thenReturn(mockThreadPool);\n+        when(mockThreadPool.getThreadContext()).thenReturn(threadContext);\n+\n+        IndexAnomalyDetectorTransportAction transportAction = new IndexAnomalyDetectorTransportAction(\n+            mock(TransportService.class),\n+            mock(ActionFilters.class),\n+            client,\n+            clusterService,\n+            settings,\n+            mock(AnomalyDetectionIndices.class),\n+            xContentRegistry()\n+        );\n+        transportAction.doExecute(task, request, response);", "originalCommit": "43880bd8fa82649a8ce67992e3bd6499bd182646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3ODgyNw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540378827", "bodyText": "Verification is done at line 93 and line 98.", "author": "saratvemulapalli", "createdAt": "2020-12-10T17:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MDM2NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540390364", "bodyText": "I see. So we tested 1 branch (index does not exist).  You might plan testing other branches using integration test.", "author": "kaituo", "createdAt": "2020-12-10T18:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NDczNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540394735", "bodyText": "There can be a race condition for verification. doExecute is an async call and the assert won't be callled (since it would be called by another thread).  So Junit would always declare victory after the doExecute call.", "author": "kaituo", "createdAt": "2020-12-10T18:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTY4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r541265689", "bodyText": "Had a chat with Kaituo offline. We did see its being run in a single thread. Its probably safe for us to assume that as listener onFailure is being called and no async calls are made.", "author": "saratvemulapalli", "createdAt": "2020-12-11T20:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODIyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODcwMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540368703", "bodyText": "I didn't find any any verification in the test case.", "author": "kaituo", "createdAt": "2020-12-10T17:42:01Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/IndexAnomalyDetectorTransportActionTests.java", "diffHunk": "@@ -83,6 +105,52 @@ public void testIndexTransportAction() {\n         action.doExecute(task, request, response);\n     }\n \n+    @Test\n+    public void testIndexTransportActionWithUserAndFilterOn() {\n+        Settings settings = Settings.builder().put(AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.getKey(), true).build();\n+        ThreadContext threadContext = new ThreadContext(settings);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice|odfe,aes|engineering,operations\");\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        Client client = mock(Client.class);\n+        org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n+        when(client.threadPool()).thenReturn(mockThreadPool);\n+        when(mockThreadPool.getThreadContext()).thenReturn(threadContext);\n+\n+        IndexAnomalyDetectorTransportAction transportAction = new IndexAnomalyDetectorTransportAction(\n+            mock(TransportService.class),\n+            mock(ActionFilters.class),\n+            client,\n+            clusterService,\n+            settings,\n+            mock(AnomalyDetectionIndices.class),\n+            xContentRegistry()\n+        );\n+        transportAction.doExecute(task, request, response);\n+    }\n+\n+    @Test\n+    public void testIndexTransportActionWithUserAndFilterOff() {\n+        Settings settings = Settings.builder().build();\n+        ThreadContext threadContext = new ThreadContext(settings);\n+        threadContext.putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER_INFO_THREAD_CONTEXT, \"alice|odfe,aes|engineering,operations\");\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        Client client = mock(Client.class);\n+        org.elasticsearch.threadpool.ThreadPool mockThreadPool = mock(ThreadPool.class);\n+        when(client.threadPool()).thenReturn(mockThreadPool);\n+        when(mockThreadPool.getThreadContext()).thenReturn(threadContext);\n+\n+        IndexAnomalyDetectorTransportAction transportAction = new IndexAnomalyDetectorTransportAction(\n+            mock(TransportService.class),\n+            mock(ActionFilters.class),\n+            client,\n+            clusterService,\n+            settings,\n+            mock(AnomalyDetectionIndices.class),\n+            xContentRegistry()\n+        );\n+        transportAction.doExecute(task, request, response);", "originalCommit": "43880bd8fa82649a8ce67992e3bd6499bd182646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3OTI2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540379263", "bodyText": "Same here, the listener gets the verification.\nPlease see line 93 and line 98.", "author": "saratvemulapalli", "createdAt": "2020-12-10T17:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MDQ0NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/325#discussion_r540390444", "bodyText": "got it.", "author": "kaituo", "createdAt": "2020-12-10T18:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2ODcwMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "31b4a9f83101057896ba310a15e6a4908d02ffb4", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/31b4a9f83101057896ba310a15e6a4908d02ffb4", "message": "Adding additional checks to security util functions", "committedDate": "2020-12-11T21:27:51Z", "type": "commit"}]}