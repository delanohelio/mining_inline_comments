{"pr_number": 81, "pr_title": "add async trainModel", "pr_createdAt": "2020-04-08T23:06:54Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTc0OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406405748", "bodyText": "iteration means some repeated steps. Suggest to rename to step.", "author": "kaituo", "createdAt": "2020-04-09T18:45:41Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +598,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {\n+        if (dataPoints.length == 0 || dataPoints[0].length == 0) {\n+            listener.onFailure(new IllegalArgumentException(\"Data points must not be empty.\"));\n+        } else {\n+            int rcfNumFeatures = dataPoints[0].length;\n+            // creates partitioned RCF models\n+            try {\n+                Entry<Integer, Integer> partitionResults = getPartitionedForestSizes(\n+                    RandomCutForest\n+                        .builder()\n+                        .dimensions(rcfNumFeatures)\n+                        .sampleSize(rcfNumSamplesInTree)\n+                        .numberOfTrees(rcfNumTrees)\n+                        .outputAfter(rcfNumSamplesInTree)\n+                        .parallelExecutionEnabled(false)\n+                        .build(),\n+                    anomalyDetector.getDetectorId()\n+                );\n+                int numForests = partitionResults.getKey();\n+                int forestSize = partitionResults.getValue();\n+                double[] scores = new double[dataPoints.length];\n+                Arrays.fill(scores, 0.);\n+                trainModelForIteration(anomalyDetector, dataPoints, rcfNumFeatures, numForests, forestSize, scores, 0, listener);\n+            } catch (LimitExceededException e) {\n+                listener.onFailure(e);\n+            }\n+        }\n+    }\n+\n+    private void trainModelForIteration(", "originalCommit": "3f625a0d73d87be24135cc429fd71332e80ba1a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MjM0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406462349", "bodyText": "chagned", "author": "wnbts", "createdAt": "2020-04-09T20:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java\nindex 97883dc..dbf74b1 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java\n\n@@ -635,24 +635,24 @@ public class ModelManager {\n                 int forestSize = partitionResults.getValue();\n                 double[] scores = new double[dataPoints.length];\n                 Arrays.fill(scores, 0.);\n-                trainModelForIteration(anomalyDetector, dataPoints, rcfNumFeatures, numForests, forestSize, scores, 0, listener);\n+                trainModelForStep(anomalyDetector, dataPoints, rcfNumFeatures, numForests, forestSize, scores, 0, listener);\n             } catch (LimitExceededException e) {\n                 listener.onFailure(e);\n             }\n         }\n     }\n \n-    private void trainModelForIteration(\n+    private void trainModelForStep(\n         AnomalyDetector detector,\n         double[][] dataPoints,\n         int rcfNumFeatures,\n         int numForests,\n         int forestSize,\n         final double[] scores,\n-        int iteration,\n+        int step,\n         ActionListener<Void> listener\n     ) {\n-        if (iteration < numForests) {\n+        if (step < numForests) {\n             RandomCutForest rcf = RandomCutForest\n                 .builder()\n                 .dimensions(rcfNumFeatures)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNzcxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406407715", "bodyText": "I changed this in another PR: https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83/files#diff-0ba3da6c04a6db2df8146de98b12d850\nThis is to have  a single place to get the number of partitioned forests. Previously, we have redundant code in both ModelManager and ADStateManager.\nIf you agree, please use the changed getPartitionedForestSizes.", "author": "kaituo", "createdAt": "2020-04-09T18:49:09Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +598,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {\n+        if (dataPoints.length == 0 || dataPoints[0].length == 0) {\n+            listener.onFailure(new IllegalArgumentException(\"Data points must not be empty.\"));\n+        } else {\n+            int rcfNumFeatures = dataPoints[0].length;\n+            // creates partitioned RCF models\n+            try {\n+                Entry<Integer, Integer> partitionResults = getPartitionedForestSizes(\n+                    RandomCutForest\n+                        .builder()\n+                        .dimensions(rcfNumFeatures)\n+                        .sampleSize(rcfNumSamplesInTree)\n+                        .numberOfTrees(rcfNumTrees)\n+                        .outputAfter(rcfNumSamplesInTree)\n+                        .parallelExecutionEnabled(false)\n+                        .build(),\n+                    anomalyDetector.getDetectorId()\n+                );", "originalCommit": "3f625a0d73d87be24135cc429fd71332e80ba1a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2NDM5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406464396", "bodyText": "the changes in that pr are currently unavailable in dev branch. if that is checked in first, this pr can be updated based on that. Or if this pr is checked in first, the refactoring can be done in a separate pr.", "author": "wnbts", "createdAt": "2020-04-09T20:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNzcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4OTY4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406489689", "bodyText": "fair enough.", "author": "kaituo", "createdAt": "2020-04-09T21:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNzcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java b/src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java\nindex 97883dc..dbf74b1 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java\n\n@@ -635,24 +635,24 @@ public class ModelManager {\n                 int forestSize = partitionResults.getValue();\n                 double[] scores = new double[dataPoints.length];\n                 Arrays.fill(scores, 0.);\n-                trainModelForIteration(anomalyDetector, dataPoints, rcfNumFeatures, numForests, forestSize, scores, 0, listener);\n+                trainModelForStep(anomalyDetector, dataPoints, rcfNumFeatures, numForests, forestSize, scores, 0, listener);\n             } catch (LimitExceededException e) {\n                 listener.onFailure(e);\n             }\n         }\n     }\n \n-    private void trainModelForIteration(\n+    private void trainModelForStep(\n         AnomalyDetector detector,\n         double[][] dataPoints,\n         int rcfNumFeatures,\n         int numForests,\n         int forestSize,\n         final double[] scores,\n-        int iteration,\n+        int step,\n         ActionListener<Void> listener\n     ) {\n-        if (iteration < numForests) {\n+        if (step < numForests) {\n             RandomCutForest rcf = RandomCutForest\n                 .builder()\n                 .dimensions(rcfNumFeatures)\n"}}, {"oid": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c", "message": "add async trainModel", "committedDate": "2020-04-09T20:36:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjQzMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406616430", "bodyText": "Just transform the sync method to callback, not change any logic, right?", "author": "ylwu-amzn", "createdAt": "2020-04-10T06:04:14Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +598,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {", "originalCommit": "7f4f5157cfa2b1d870b5c04abc3fc8e42a99e05c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzODAyOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/81#discussion_r406838028", "bodyText": "yes, changed to async inside out", "author": "wnbts", "createdAt": "2020-04-10T16:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjQzMA=="}], "type": "inlineReview", "revised_code": null}]}