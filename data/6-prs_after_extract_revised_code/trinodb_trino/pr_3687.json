{"pr_number": 3687, "pr_title": "Add support for showing view definition in BigQuery", "pr_createdAt": "2020-05-10T08:15:54Z", "pr_url": "https://github.com/trinodb/trino/pull/3687", "timeline": [{"oid": "b5bb8c8a83bd0a3b3be4f9d4f430880e920fc3cc", "url": "https://github.com/trinodb/trino/commit/b5bb8c8a83bd0a3b3be4f9d4f430880e920fc3cc", "message": "Add support for showing view definition in BigQuery", "committedDate": "2020-05-11T02:32:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3OTA0MQ==", "url": "https://github.com/trinodb/trino/pull/3687#discussion_r423179041", "bodyText": "Is the second call to viewDefinition.getQuery() needed?", "author": "davidrabinowitz", "createdAt": "2020-05-11T16:52:02Z", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -118,6 +123,30 @@ public BigQueryMetadata(BigQueryClient bigQueryClient, BigQueryConfig config)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Optional<ConnectorViewDefinition> getView(ConnectorSession session, SchemaTableName viewName)\n+    {\n+        TableInfo tableInfo = getBigQueryTable(viewName);\n+\n+        if (tableInfo.getDefinition() instanceof ViewDefinition) {\n+            List<BigQueryColumnHandle> columns = getTableColumns(tableInfo);\n+            ViewDefinition viewDefinition = tableInfo.getDefinition();\n+            ConnectorViewDefinition definition = new ConnectorViewDefinition(\n+                    viewDefinition.getQuery(),\n+                    Optional.of(catalogName.toString()),\n+                    Optional.of(viewName.getSchemaName()),\n+                    columns.stream()\n+                            .map(column -> new ConnectorViewDefinition.ViewColumn(column.getName(), column.getPrestoType().getTypeId()))\n+                            .collect(toImmutableList()),\n+                    Optional.ofNullable(tableInfo.getDescription()),\n+                    Optional.empty(),\n+                    false);\n+            viewDefinition.getQuery();", "originalCommit": "b5bb8c8a83bd0a3b3be4f9d4f430880e920fc3cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MDM4Nw==", "url": "https://github.com/trinodb/trino/pull/3687#discussion_r423380387", "bodyText": "It's my mistake. Let me remove.", "author": "ebyhr", "createdAt": "2020-05-11T23:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3OTA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5630b2af6ec952381f4153b94b52b7e768c21893", "chunk": "diff --git a/presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryMetadata.java b/presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryMetadata.java\ndeleted file mode 100644\nindex e748fae279..0000000000\n--- a/presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryMetadata.java\n+++ /dev/null\n\n@@ -1,335 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.prestosql.plugin.bigquery;\n-\n-import com.google.cloud.bigquery.DatasetId;\n-import com.google.cloud.bigquery.Field;\n-import com.google.cloud.bigquery.Schema;\n-import com.google.cloud.bigquery.Table;\n-import com.google.cloud.bigquery.TableDefinition;\n-import com.google.cloud.bigquery.TableId;\n-import com.google.cloud.bigquery.TableInfo;\n-import com.google.cloud.bigquery.ViewDefinition;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Streams;\n-import io.airlift.log.Logger;\n-import io.prestosql.plugin.base.CatalogName;\n-import io.prestosql.spi.connector.ColumnHandle;\n-import io.prestosql.spi.connector.ColumnMetadata;\n-import io.prestosql.spi.connector.ConnectorMetadata;\n-import io.prestosql.spi.connector.ConnectorSession;\n-import io.prestosql.spi.connector.ConnectorTableHandle;\n-import io.prestosql.spi.connector.ConnectorTableMetadata;\n-import io.prestosql.spi.connector.ConnectorTableProperties;\n-import io.prestosql.spi.connector.ConnectorViewDefinition;\n-import io.prestosql.spi.connector.Constraint;\n-import io.prestosql.spi.connector.ConstraintApplicationResult;\n-import io.prestosql.spi.connector.LimitApplicationResult;\n-import io.prestosql.spi.connector.NotFoundException;\n-import io.prestosql.spi.connector.ProjectionApplicationResult;\n-import io.prestosql.spi.connector.ProjectionApplicationResult.Assignment;\n-import io.prestosql.spi.connector.SchemaTableName;\n-import io.prestosql.spi.connector.SchemaTablePrefix;\n-import io.prestosql.spi.connector.TableNotFoundException;\n-import io.prestosql.spi.expression.ConnectorExpression;\n-import io.prestosql.spi.predicate.TupleDomain;\n-\n-import javax.inject.Inject;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-\n-import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n-import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n-import static java.util.Objects.requireNonNull;\n-import static java.util.function.Function.identity;\n-import static java.util.stream.Collectors.toMap;\n-\n-public class BigQueryMetadata\n-        implements ConnectorMetadata\n-{\n-    private static final Logger log = Logger.get(BigQueryMetadata.class);\n-\n-    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n-    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n-    static final String INFORMATION_SCHEMA = \"information_schema\";\n-\n-    private final BigQueryClient bigQueryClient;\n-    private final String projectId;\n-    private final CatalogName catalogName;\n-\n-    @Inject\n-    public BigQueryMetadata(BigQueryClient bigQueryClient, BigQueryConfig config, CatalogName catalogName)\n-    {\n-        this.bigQueryClient = requireNonNull(bigQueryClient, \"bigQueryClient is null\");\n-        this.projectId = requireNonNull(config, \"config is null\").getProjectId().orElse(bigQueryClient.getProjectId());\n-        this.catalogName = requireNonNull(catalogName, \"catalogName is null\");\n-    }\n-\n-    @Override\n-    public List<String> listSchemaNames(ConnectorSession session)\n-    {\n-        log.debug(\"listSchemaNames(session=%s)\", session);\n-        return Streams.stream(bigQueryClient.listDatasets(projectId))\n-                .map(dataset -> dataset.getDatasetId().getDataset())\n-                .filter(schemaName -> !schemaName.equalsIgnoreCase(INFORMATION_SCHEMA))\n-                .collect(toImmutableList());\n-    }\n-\n-    @Override\n-    public List<SchemaTableName> listTables(ConnectorSession session, Optional<String> schemaName)\n-    {\n-        log.debug(\"listTables(session=%s, schemaName=%s)\", session, schemaName);\n-        return listTablesWithTypes(session, schemaName, TABLE);\n-    }\n-\n-    @Override\n-    public List<SchemaTableName> listViews(ConnectorSession session, Optional<String> schemaName)\n-    {\n-        log.debug(\"listViews(session=%s, schemaName=%s)\", session, schemaName);\n-        return listTablesWithTypes(session, schemaName, VIEW);\n-    }\n-\n-    private List<SchemaTableName> listTablesWithTypes(ConnectorSession session, Optional<String> schemaName, TableDefinition.Type... types)\n-    {\n-        if (schemaName.isPresent() && schemaName.get().equalsIgnoreCase(INFORMATION_SCHEMA)) {\n-            return ImmutableList.of();\n-        }\n-        Set<String> schemaNames = schemaName.map(ImmutableSet::of)\n-                .orElseGet(() -> ImmutableSet.copyOf(listSchemaNames(session)));\n-\n-        ImmutableList.Builder<SchemaTableName> tableNames = ImmutableList.builder();\n-        for (String datasetId : schemaNames) {\n-            for (Table table : bigQueryClient.listTables(DatasetId.of(projectId, datasetId), types)) {\n-                tableNames.add(new SchemaTableName(datasetId, table.getTableId().getTable()));\n-            }\n-        }\n-        return tableNames.build();\n-    }\n-\n-    @Override\n-    public Optional<ConnectorViewDefinition> getView(ConnectorSession session, SchemaTableName viewName)\n-    {\n-        TableInfo tableInfo = getBigQueryTable(viewName);\n-\n-        if (tableInfo.getDefinition() instanceof ViewDefinition) {\n-            List<BigQueryColumnHandle> columns = getTableColumns(tableInfo);\n-            ViewDefinition viewDefinition = tableInfo.getDefinition();\n-            ConnectorViewDefinition definition = new ConnectorViewDefinition(\n-                    viewDefinition.getQuery(),\n-                    Optional.of(catalogName.toString()),\n-                    Optional.of(viewName.getSchemaName()),\n-                    columns.stream()\n-                            .map(column -> new ConnectorViewDefinition.ViewColumn(column.getName(), column.getPrestoType().getTypeId()))\n-                            .collect(toImmutableList()),\n-                    Optional.ofNullable(tableInfo.getDescription()),\n-                    Optional.empty(),\n-                    false);\n-            viewDefinition.getQuery();\n-            return Optional.of(definition);\n-        }\n-        return Optional.empty();\n-    }\n-\n-    @Override\n-    public ConnectorTableHandle getTableHandle(ConnectorSession session, SchemaTableName tableName)\n-    {\n-        log.debug(\"getTableHandle(session=%s, tableName=%s)\", session, tableName);\n-        TableInfo tableInfo = getBigQueryTable(tableName);\n-        if (tableInfo == null) {\n-            log.debug(\"Table [%s.%s] was not found\", tableName.getSchemaName(), tableName.getTableName());\n-            return null;\n-        }\n-        return BigQueryTableHandle.from(tableInfo);\n-    }\n-\n-    // May return null\n-    private TableInfo getBigQueryTable(SchemaTableName tableName)\n-    {\n-        return bigQueryClient.getTable(TableId.of(projectId, tableName.getSchemaName(), tableName.getTableName()));\n-    }\n-\n-    public ConnectorTableMetadata getTableMetadata(ConnectorSession session, SchemaTableName schemaTableName)\n-    {\n-        ConnectorTableHandle table = getTableHandle(session, schemaTableName);\n-        if (table == null) {\n-            throw new TableNotFoundException(schemaTableName);\n-        }\n-        return getTableMetadata(session, table);\n-    }\n-\n-    @Override\n-    public ConnectorTableMetadata getTableMetadata(ConnectorSession session, ConnectorTableHandle tableHandle)\n-    {\n-        log.debug(\"getTableMetadata(session=%s, tableHandle=%s)\", session, tableHandle);\n-        TableInfo table = bigQueryClient.getTable(((BigQueryTableHandle) tableHandle).getTableId());\n-        SchemaTableName schemaTableName = new SchemaTableName(table.getTableId().getDataset(), table.getTableId().getTable());\n-        Schema schema = table.getDefinition().getSchema();\n-        List<ColumnMetadata> columns = schema == null ?\n-                ImmutableList.of() :\n-                schema.getFields().stream()\n-                        .map(Conversions::toColumnMetadata)\n-                        .collect(toImmutableList());\n-        return new ConnectorTableMetadata(schemaTableName, columns);\n-    }\n-\n-    @Override\n-    public Map<String, ColumnHandle> getColumnHandles(ConnectorSession session, ConnectorTableHandle tableHandle)\n-    {\n-        log.debug(\"getColumnHandles(session=%s, tableHandle=%s)\", session, tableHandle);\n-        List<BigQueryColumnHandle> columnHandles = getTableColumns(((BigQueryTableHandle) tableHandle).getTableId());\n-        return columnHandles.stream().collect(toMap(BigQueryColumnHandle::getName, identity()));\n-    }\n-\n-    List<BigQueryColumnHandle> getTableColumns(TableId tableId)\n-    {\n-        return getTableColumns(bigQueryClient.getTable(tableId));\n-    }\n-\n-    private List<BigQueryColumnHandle> getTableColumns(TableInfo table)\n-    {\n-        ImmutableList.Builder<BigQueryColumnHandle> columns = ImmutableList.builder();\n-        TableDefinition tableDefinition = table.getDefinition();\n-        Schema schema = tableDefinition.getSchema();\n-        if (schema != null) {\n-            for (Field field : schema.getFields()) {\n-                columns.add(Conversions.toColumnHandle(field));\n-            }\n-        }\n-        return columns.build();\n-    }\n-\n-    @Override\n-    public ColumnMetadata getColumnMetadata(\n-            ConnectorSession session,\n-            ConnectorTableHandle tableHandle,\n-            ColumnHandle columnHandle)\n-    {\n-        log.debug(\"getColumnMetadata(session=%s, tableHandle=%s, columnHandle=%s)\", session, columnHandle, columnHandle);\n-        return ((BigQueryColumnHandle) columnHandle).getColumnMetadata();\n-    }\n-\n-    @Override\n-    public Map<SchemaTableName, List<ColumnMetadata>> listTableColumns(ConnectorSession session, SchemaTablePrefix prefix)\n-    {\n-        log.debug(\"listTableColumns(session=%s, prefix=%s)\", session, prefix);\n-        requireNonNull(prefix, \"prefix is null\");\n-        ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> columns = ImmutableMap.builder();\n-        for (SchemaTableName tableName : listTables(session, prefix)) {\n-            try {\n-                columns.put(tableName, getTableMetadata(session, tableName).getColumns());\n-            }\n-            catch (NotFoundException e) {\n-                // table disappeared during listing operation\n-            }\n-        }\n-        return columns.build();\n-    }\n-\n-    private List<SchemaTableName> listTables(ConnectorSession session, SchemaTablePrefix prefix)\n-    {\n-        if (!prefix.getTable().isPresent()) {\n-            return listTables(session, prefix.getSchema());\n-        }\n-        SchemaTableName tableName = prefix.toSchemaTableName();\n-        TableInfo tableInfo = getBigQueryTable(tableName);\n-        return tableInfo == null ?\n-                ImmutableList.of() : // table does not exist\n-                ImmutableList.of(tableName);\n-    }\n-\n-    @Override\n-    public boolean usesLegacyTableLayouts()\n-    {\n-        return false;\n-    }\n-\n-    @Override\n-    public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n-    {\n-        log.debug(\"getTableProperties(session=%s, prefix=%s)\", session, table);\n-        return new ConnectorTableProperties();\n-    }\n-\n-    @Override\n-    public Optional<LimitApplicationResult<ConnectorTableHandle>> applyLimit(\n-            ConnectorSession session,\n-            ConnectorTableHandle handle,\n-            long limit)\n-    {\n-        log.debug(\"applyLimit(session=%s, handle=%s, limit=%s)\", session, handle, limit);\n-        BigQueryTableHandle bigQueryTableHandle = (BigQueryTableHandle) handle;\n-\n-        if (bigQueryTableHandle.getLimit().isPresent() && bigQueryTableHandle.getLimit().getAsLong() <= limit) {\n-            return Optional.empty();\n-        }\n-\n-        bigQueryTableHandle = bigQueryTableHandle.withLimit(limit);\n-\n-        return Optional.of(new LimitApplicationResult<>(bigQueryTableHandle, false));\n-    }\n-\n-    @Override\n-    public Optional<ProjectionApplicationResult<ConnectorTableHandle>> applyProjection(\n-            ConnectorSession session,\n-            ConnectorTableHandle handle,\n-            List<ConnectorExpression> projections,\n-            Map<String, ColumnHandle> assignments)\n-    {\n-        log.debug(\"applyProjection(session=%s, handle=%s, projections=%s, assignments=%s)\",\n-                session, handle, projections, assignments);\n-        BigQueryTableHandle bigQueryTableHandle = (BigQueryTableHandle) handle;\n-\n-        if (bigQueryTableHandle.getProjectedColumns().isPresent()) {\n-            return Optional.empty();\n-        }\n-\n-        ImmutableList.Builder<ColumnHandle> projectedColumns = ImmutableList.builder();\n-        ImmutableList.Builder<Assignment> assignmentList = ImmutableList.builder();\n-        assignments.forEach((name, column) -> {\n-            projectedColumns.add(column);\n-            assignmentList.add(new Assignment(name, column, ((BigQueryColumnHandle) column).getPrestoType()));\n-        });\n-\n-        bigQueryTableHandle = bigQueryTableHandle.withProjectedColumns(projectedColumns.build());\n-\n-        return Optional.of(new ProjectionApplicationResult<>(bigQueryTableHandle, projections, assignmentList.build()));\n-    }\n-\n-    @Override\n-    public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(\n-            ConnectorSession session,\n-            ConnectorTableHandle handle,\n-            Constraint constraint)\n-    {\n-        log.debug(\"applyFilter(session=%s, handle=%s, summary=%s, predicate=%s, columns=%s)\",\n-                session, handle, constraint.getSummary(), constraint.predicate(), constraint.getPredicateColumns());\n-        BigQueryTableHandle bigQueryTableHandle = (BigQueryTableHandle) handle;\n-\n-        TupleDomain<ColumnHandle> oldDomain = bigQueryTableHandle.getConstraint();\n-        TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary());\n-        if (oldDomain.equals(newDomain)) {\n-            return Optional.empty();\n-        }\n-\n-        BigQueryTableHandle updatedHandle = bigQueryTableHandle.withConstraint(newDomain);\n-\n-        return Optional.of(new ConstraintApplicationResult<>(updatedHandle, constraint.getSummary()));\n-    }\n-}\n"}}, {"oid": "5630b2af6ec952381f4153b94b52b7e768c21893", "url": "https://github.com/trinodb/trino/commit/5630b2af6ec952381f4153b94b52b7e768c21893", "message": "Add view_definition system table for BigQuery view", "committedDate": "2021-02-07T05:56:42Z", "type": "commit"}, {"oid": "5630b2af6ec952381f4153b94b52b7e768c21893", "url": "https://github.com/trinodb/trino/commit/5630b2af6ec952381f4153b94b52b7e768c21893", "message": "Add view_definition system table for BigQuery view", "committedDate": "2021-02-07T05:56:42Z", "type": "forcePushed"}]}