{"pr_number": 3715, "pr_title": "Add grouped_execution to kudu connector", "pr_createdAt": "2020-05-13T09:00:26Z", "pr_url": "https://github.com/trinodb/trino/pull/3715", "timeline": [{"oid": "0ddbec5dde4346310c6d233413634fe0269e0b2c", "url": "https://github.com/trinodb/trino/commit/0ddbec5dde4346310c6d233413634fe0269e0b2c", "message": "Add grouped_execution to kudu connector\n\nWhen the input tables are already partitioned on the join key or aggregation key, make Presto could process a subset (group) of the partitions of the data at a time.", "committedDate": "2020-07-16T03:32:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDcxMjIzOQ==", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r584712239", "bodyText": "Any reason bucketCount gets ignored here?", "author": "findepi", "createdAt": "2021-03-01T13:31:14Z", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return IntStream.range(0, handle.getBucketCount())\n+                .mapToObj(KuduPartitionHandle::new)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return createBucketNodeMap(handle.getBucketCount());\n+    }\n+\n+    @Override\n+    public ToIntFunction<ConnectorSplit> getSplitBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        return value -> ((KuduSplit) value).getBucketNumber();\n+    }\n+\n+    @Override\n+    public BucketFunction getBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle,\n+            List<Type> partitionChannelTypes,\n+            int bucketCount)", "originalCommit": "0ddbec5dde4346310c6d233413634fe0269e0b2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMzNDQwMQ==", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r587334401", "bodyText": "Well, bucketCount means the total count of bucket, and I can get more informations about bucket schema in attribute KuduBucketFunction#hashBucketSchemas, so I didn't use this param.   :)", "author": "Crossoverrr", "createdAt": "2021-03-04T10:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDcxMjIzOQ=="}], "type": "inlineReview", "revised_code": null}]}