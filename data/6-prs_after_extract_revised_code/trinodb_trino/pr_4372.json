{"pr_number": 4372, "pr_title": "Add salesforce authenticator.", "pr_createdAt": "2020-07-07T00:50:55Z", "pr_url": "https://github.com/trinodb/trino/pull/4372", "timeline": [{"oid": "f7c5194e36fabd4888714a764c64c8119d4b918c", "url": "https://github.com/trinodb/trino/commit/f7c5194e36fabd4888714a764c64c8119d4b918c", "message": "Add salesforce authenticator.", "committedDate": "2020-07-07T00:37:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NjI5MA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456846290", "bodyText": "[style] Instead of aligned end of line comments, we place comments above the field.", "author": "dain", "createdAt": "2020-07-19T01:34:21Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzODEyOQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456938129", "bodyText": "No problem.  Updating.", "author": "weissleb", "createdAt": "2020-07-19T18:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NjI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NjM5MA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456846390", "bodyText": "I'm pretty sure this and responseMap can be final.", "author": "dain", "createdAt": "2020-07-19T01:35:28Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2OTIxMg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456969212", "bodyText": "Will get rid of responseMap, per your rewrite of the document parsing.", "author": "weissleb", "createdAt": "2020-07-19T23:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NjM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NjQyNw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456846427", "bodyText": "Make a defensive copy with ImmutableSet.copyOf(config.getOrgSet())", "author": "dain", "createdAt": "2020-07-19T01:36:07Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NjY3Nw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456846677", "bodyText": "check not null:\nthis.httpClient = requireNonNull(httpClient, \"httpClient is null\");", "author": "dain", "createdAt": "2020-07-19T01:39:56Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0OTcxMw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456849713", "bodyText": "I don't think this parsing code is thread safe.  I think this can be done much simpler without converting the whole response into a map.  After playing with the Document APIs for a little bit, here is what I came up with:\n        Document xmlResponse;\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            xmlResponse = builder.parse(new InputSource(new StringReader(response.getBody())));\n        }\n        catch (ParserConfigurationException | SAXException | IOException  e) {\n            throw new RuntimeException(String.format(\n                    \"Error parsing response: %s\\n\\tReceived error message: %s\",\n                    response.getBody(),\n                    e.getMessage()));\n        }\n\n        // sessionId is required by not used\n        getElementValue(xmlResponse, \"sessionId\");\n\n        // Verify organization is in allowed o\n        String returnedOrg = getElementValue(xmlResponse, \"organizationId\");\n        if (!(allowedOrganization.size() == 1 && allowedOrganization.contains(\"all\")) && !allowedOrganization.contains(returnedOrg.toLowerCase(US))) {\n            throw new AccessDeniedException(String.format(\n                    \"Login successful, but for wrong Salesforce org.  Got %s, but expected a different org.\",\n                    returnedOrg));\n        }\n        return new BasicPrincipal(username);\n    }\n\n    private static String getElementValue(Document document, String elementName)\n    {\n        NodeList nodeList = document.getElementsByTagName(elementName);\n        if (nodeList.getLength() == 0) {\n            throw new RuntimeException(String.format(\"Salesforce login response does not contain a '%s' entry\", elementName));\n        }\n        if (nodeList.getLength() > 1) {\n            throw new RuntimeException(String.format(\"Salesforce login response contains multiple '%s' entries\", elementName));\n        }\n        String content = emptyToNull(nodeList.item(0).getTextContent());\n        if (content == null) {\n            throw new RuntimeException(String.format(\"Salesforce login response contains an empty '%s' entry\", elementName));\n        }\n        return content;\n    }", "author": "dain", "createdAt": "2020-07-19T02:27:30Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds(), TimeUnit.SECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(getClass().getClassLoader())) {\n+            return userCache.getUnchecked(new Credential(username, password));\n+        }\n+        catch (UncheckedExecutionException e) {\n+            throwIfInstanceOf(e.getCause(), AccessDeniedException.class);\n+            throw e;\n+        }\n+    }\n+\n+    // This does the work of logging into Salesforce.\n+    private Principal doLogin(Credential credential)\n+    {\n+        log.info(\"Logging into Salesforce.\");\n+        String username = credential.getUser();\n+        String password = credential.getPassword();\n+\n+        // Login requests must be POSTs\n+        Request request = new Request.Builder()\n+                .setUri(URI.create(LOGINURL + APIVERSION))\n+                .setHeader(\"Content-Type\", \"text/xml;charset=UTF-8\")\n+                .setHeader(\"SOAPAction\", \"login\")\n+                .setMethod(\"POST\")\n+                .setBodyGenerator(StaticBodyGenerator.createStaticBodyGenerator(String.format(LOGIN_SOAP_MESSAGE, username, password), UTF_8))\n+                .build();\n+\n+        StringResponseHandler.StringResponse response = httpClient.execute(request, StringResponseHandler.createStringResponseHandler());\n+\n+        final int statusCode = response.getStatusCode();\n+        if (statusCode < 200 || statusCode >= 300) {\n+            throw new AccessDeniedException(String.format(\"Invalid response for login [%s]: %s. %s\",\n+                    statusCode,\n+                    response.getBody(),\n+                    response.getHeaders()));\n+        }\n+\n+        Document xmlResponse;\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder;\n+        try {\n+            builder = factory.newDocumentBuilder();\n+            xmlResponse = builder.parse(new InputSource(new StringReader(\n+                    response.getBody())));\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(String.format(\"Error parsing response: %s\\n\\tReceived error message: %s\",\n+                    response.getBody(),\n+                    e.getMessage()));\n+        }\n+\n+        // Parse the response into a flattened map.", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2OTE1NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456969154", "bodyText": "Nice!  Should work.", "author": "weissleb", "createdAt": "2020-07-19T23:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0OTcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0OTgyNA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456849824", "bodyText": "I suggest renaming this to allowedOrganization and then we can remove the comment as the usage is obvious.  Also, we generally try to avoid abbreviations, because they can be difficult for non-native speakers to understand.  In the case \"org\" is pretty common, so it wouldn't necessary need a change, but I think allowedOrganization is much more understandable.", "author": "dain", "createdAt": "2020-07-19T02:29:29Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzOTUxMg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456939512", "bodyText": "Solid idea.  Will do.", "author": "weissleb", "createdAt": "2020-07-19T18:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0OTgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0OTg0Ng==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456849846", "bodyText": "The comment is necessary as the usage is obvious.", "author": "dain", "createdAt": "2020-07-19T02:29:51Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDA3Ng==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850076", "bodyText": "I'd inline this into the usage.  I don't think the comment isn't really necessary here, and this code is really only following the lower in the config class.", "author": "dain", "createdAt": "2020-07-19T02:33:37Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDA4OQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850089", "bodyText": "(nit) static import SECONDS", "author": "dain", "createdAt": "2020-07-19T02:33:57Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds(), TimeUnit.SECONDS)", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDE1Mg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850152", "bodyText": "Is the ThreadContextClassLoader required here?  I don't think anything inside of this method uses a special class loader.", "author": "dain", "createdAt": "2020-07-19T02:34:57Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds(), TimeUnit.SECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(getClass().getClassLoader())) {", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDE0MQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456940141", "bodyText": "Not strictly, no I don't think so.  Original implementation did not include this, but honestly I added it after reviewing the LDAPAuthenticator.", "author": "weissleb", "createdAt": "2020-07-19T18:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDI3Mg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850272", "bodyText": "I don't think this will be helpful in a production server.  I would remove this message", "author": "dain", "createdAt": "2020-07-19T02:36:24Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds(), TimeUnit.SECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(getClass().getClassLoader())) {\n+            return userCache.getUnchecked(new Credential(username, password));\n+        }\n+        catch (UncheckedExecutionException e) {\n+            throwIfInstanceOf(e.getCause(), AccessDeniedException.class);\n+            throw e;\n+        }\n+    }\n+\n+    // This does the work of logging into Salesforce.\n+    private Principal doLogin(Credential credential)\n+    {\n+        log.info(\"Logging into Salesforce.\");", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDQyNA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456940424", "bodyText": "Had it there for a couple of reasons.  First is simply to ensure the cache was working as expected, so you're right, definitely not a production need.  The second is that at Salesforce we are using multiple authentication options, so that users can login either via credentials we store in a password file, or through another custom mechanism we wrote, or via their Salesforce credentials.  This is a little bit of a crude audit mechanism, though clearly very crude.\nHappy to remove it, or is it acceptable to change to debug?", "author": "weissleb", "createdAt": "2020-07-19T18:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDMyMQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850321", "bodyText": "(nit) static import createStaticBodyGenerator.  The factory methods that are named createFullClassName are designed to be static imported`", "author": "dain", "createdAt": "2020-07-19T02:37:16Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds(), TimeUnit.SECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(getClass().getClassLoader())) {\n+            return userCache.getUnchecked(new Credential(username, password));\n+        }\n+        catch (UncheckedExecutionException e) {\n+            throwIfInstanceOf(e.getCause(), AccessDeniedException.class);\n+            throw e;\n+        }\n+    }\n+\n+    // This does the work of logging into Salesforce.\n+    private Principal doLogin(Credential credential)\n+    {\n+        log.info(\"Logging into Salesforce.\");\n+        String username = credential.getUser();\n+        String password = credential.getPassword();\n+\n+        // Login requests must be POSTs\n+        Request request = new Request.Builder()\n+                .setUri(URI.create(LOGINURL + APIVERSION))\n+                .setHeader(\"Content-Type\", \"text/xml;charset=UTF-8\")\n+                .setHeader(\"SOAPAction\", \"login\")\n+                .setMethod(\"POST\")\n+                .setBodyGenerator(StaticBodyGenerator.createStaticBodyGenerator(String.format(LOGIN_SOAP_MESSAGE, username, password), UTF_8))", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDM3NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850374", "bodyText": "(nit) We don't use final on local variables in Presto", "author": "dain", "createdAt": "2020-07-19T02:38:23Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds(), TimeUnit.SECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(getClass().getClassLoader())) {\n+            return userCache.getUnchecked(new Credential(username, password));\n+        }\n+        catch (UncheckedExecutionException e) {\n+            throwIfInstanceOf(e.getCause(), AccessDeniedException.class);\n+            throw e;\n+        }\n+    }\n+\n+    // This does the work of logging into Salesforce.\n+    private Principal doLogin(Credential credential)\n+    {\n+        log.info(\"Logging into Salesforce.\");\n+        String username = credential.getUser();\n+        String password = credential.getPassword();\n+\n+        // Login requests must be POSTs\n+        Request request = new Request.Builder()\n+                .setUri(URI.create(LOGINURL + APIVERSION))\n+                .setHeader(\"Content-Type\", \"text/xml;charset=UTF-8\")\n+                .setHeader(\"SOAPAction\", \"login\")\n+                .setMethod(\"POST\")\n+                .setBodyGenerator(StaticBodyGenerator.createStaticBodyGenerator(String.format(LOGIN_SOAP_MESSAGE, username, password), UTF_8))\n+                .build();\n+\n+        StringResponseHandler.StringResponse response = httpClient.execute(request, StringResponseHandler.createStringResponseHandler());\n+\n+        final int statusCode = response.getStatusCode();", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDQ5NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850494", "bodyText": "Instead of allowing all 2xx responses, I would check the actual response that Salesforce sends.  In this case, I would guess that the only valid response is 200.  If so, I would inline statusCode variable.", "author": "dain", "createdAt": "2020-07-19T02:39:58Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds(), TimeUnit.SECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(getClass().getClassLoader())) {\n+            return userCache.getUnchecked(new Credential(username, password));\n+        }\n+        catch (UncheckedExecutionException e) {\n+            throwIfInstanceOf(e.getCause(), AccessDeniedException.class);\n+            throw e;\n+        }\n+    }\n+\n+    // This does the work of logging into Salesforce.\n+    private Principal doLogin(Credential credential)\n+    {\n+        log.info(\"Logging into Salesforce.\");\n+        String username = credential.getUser();\n+        String password = credential.getPassword();\n+\n+        // Login requests must be POSTs\n+        Request request = new Request.Builder()\n+                .setUri(URI.create(LOGINURL + APIVERSION))\n+                .setHeader(\"Content-Type\", \"text/xml;charset=UTF-8\")\n+                .setHeader(\"SOAPAction\", \"login\")\n+                .setMethod(\"POST\")\n+                .setBodyGenerator(StaticBodyGenerator.createStaticBodyGenerator(String.format(LOGIN_SOAP_MESSAGE, username, password), UTF_8))\n+                .build();\n+\n+        StringResponseHandler.StringResponse response = httpClient.execute(request, StringResponseHandler.createStringResponseHandler());\n+\n+        final int statusCode = response.getStatusCode();\n+        if (statusCode < 200 || statusCode >= 300) {", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MTc2OQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456941769", "bodyText": "You're right.  Response should be 200.", "author": "weissleb", "createdAt": "2020-07-19T18:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDcyMA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850720", "bodyText": "Exception is a bit broad, and will result in a runtime exception wrapped in a runtime exception.  Instead I would use:\ncatch (ParserConfigurationException | SAXException | IOException  e) {", "author": "dain", "createdAt": "2020-07-19T02:43:55Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StaticBodyGenerator;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n+import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    private Set<String> orgs;                                   // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private Map<String, String> responseMap = new HashMap<>();  // A flattened map of xml elements from the Salesforce login response.\n+    private String key = \"\";                                    // Will hold the xml element tag, we can add to the map with its text attribute.\n+    private final HttpClient httpClient;                        // An http client for posting to the Salesforce login endpoint.\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    private final Locale locale = Locale.US;                    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.orgs = config.getOrgSet();\n+        this.httpClient = httpClient;\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds(), TimeUnit.SECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(getClass().getClassLoader())) {\n+            return userCache.getUnchecked(new Credential(username, password));\n+        }\n+        catch (UncheckedExecutionException e) {\n+            throwIfInstanceOf(e.getCause(), AccessDeniedException.class);\n+            throw e;\n+        }\n+    }\n+\n+    // This does the work of logging into Salesforce.\n+    private Principal doLogin(Credential credential)\n+    {\n+        log.info(\"Logging into Salesforce.\");\n+        String username = credential.getUser();\n+        String password = credential.getPassword();\n+\n+        // Login requests must be POSTs\n+        Request request = new Request.Builder()\n+                .setUri(URI.create(LOGINURL + APIVERSION))\n+                .setHeader(\"Content-Type\", \"text/xml;charset=UTF-8\")\n+                .setHeader(\"SOAPAction\", \"login\")\n+                .setMethod(\"POST\")\n+                .setBodyGenerator(StaticBodyGenerator.createStaticBodyGenerator(String.format(LOGIN_SOAP_MESSAGE, username, password), UTF_8))\n+                .build();\n+\n+        StringResponseHandler.StringResponse response = httpClient.execute(request, StringResponseHandler.createStringResponseHandler());\n+\n+        final int statusCode = response.getStatusCode();\n+        if (statusCode < 200 || statusCode >= 300) {\n+            throw new AccessDeniedException(String.format(\"Invalid response for login [%s]: %s. %s\",\n+                    statusCode,\n+                    response.getBody(),\n+                    response.getHeaders()));\n+        }\n+\n+        Document xmlResponse;\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder;\n+        try {\n+            builder = factory.newDocumentBuilder();\n+            xmlResponse = builder.parse(new InputSource(new StringReader(\n+                    response.getBody())));\n+        }\n+        catch (Exception e) {", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex f739e0dbf0..0169847c92 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -16,42 +16,39 @@ package io.prestosql.plugin.password.salesforce;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StaticBodyGenerator;\n import io.airlift.http.client.StringResponseHandler;\n import io.airlift.log.Logger;\n import io.prestosql.plugin.password.Credential;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.security.AccessDeniedException;\n import io.prestosql.spi.security.BasicPrincipal;\n import io.prestosql.spi.security.PasswordAuthenticator;\n import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Text;\n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n import javax.inject.Inject;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n \n+import java.io.IOException;\n import java.io.StringReader;\n import java.net.URI;\n import java.security.Principal;\n-import java.util.HashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.APIVERSION;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGINURL;\n-import static io.prestosql.plugin.password.salesforce.SalesforceConfig.LOGIN_SOAP_MESSAGE;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n /**\n  * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDgxMw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850813", "bodyText": "I would just inline this and drop the comment.  We can fix this later if it becomes an issue.", "author": "dain", "createdAt": "2020-07-19T02:45:15Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);\n+\n+    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n+    protected static final String APIVERSION = \"46.0\";\n+\n+    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n+            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n+            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n+            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n+            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n+            \" <env:Header>\\n\" +\n+            \"     <urn:CallOptions>\\n\" +\n+            \"       <urn:client>presto</urn:client>\\n\" +\n+            \"     </urn:CallOptions>\\n\" +\n+            \" </env:Header>\\n\" +\n+            \" <env:Body>\\n\" +\n+            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n+            \"     <n1:username>%s</n1:username>\\n\" +\n+            \"     <n1:password>%s</n1:password>\\n\" +\n+            \"   </n1:login>\\n\" +\n+            \" </env:Body>\\n\" +\n+            \"</env:Envelope>\\n\";\n+\n+    public static final int MAX_EXPIRE = 3600;\n+    private int cacheSize = 4096;\n+    private int cacheExpireSeconds = 120;\n+    private String orgs;\n+\n+    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDg2Mg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850862", "bodyText": "Is there any reason to not have the default be \"all\"?", "author": "dain", "createdAt": "2020-07-19T02:46:01Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);\n+\n+    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n+    protected static final String APIVERSION = \"46.0\";\n+\n+    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n+            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n+            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n+            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n+            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n+            \" <env:Header>\\n\" +\n+            \"     <urn:CallOptions>\\n\" +\n+            \"       <urn:client>presto</urn:client>\\n\" +\n+            \"     </urn:CallOptions>\\n\" +\n+            \" </env:Header>\\n\" +\n+            \" <env:Body>\\n\" +\n+            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n+            \"     <n1:username>%s</n1:username>\\n\" +\n+            \"     <n1:password>%s</n1:password>\\n\" +\n+            \"   </n1:login>\\n\" +\n+            \" </env:Body>\\n\" +\n+            \"</env:Envelope>\\n\";\n+\n+    public static final int MAX_EXPIRE = 3600;\n+    private int cacheSize = 4096;\n+    private int cacheExpireSeconds = 120;\n+    private String orgs;", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjQzNw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456852437", "bodyText": "Also rename to allowedOrganizations", "author": "dain", "createdAt": "2020-07-19T03:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzE0OQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456943149", "bodyText": "Good idea on the rename.\nI originally had the default just implicitly be \"all\", but @lhofhansl strongly suggested that we require admins to set this explicitly.  I agree, and not just cause he's my boss.  I actually raised the concern about implicitly allowing all orgs, and do in fact prefer the explicit setting.", "author": "weissleb", "createdAt": "2020-07-19T19:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDkxMA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456850910", "bodyText": "I would change this to salesforce.allowed-organization, which will make usage more obvious", "author": "dain", "createdAt": "2020-07-19T02:46:53Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);\n+\n+    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n+    protected static final String APIVERSION = \"46.0\";\n+\n+    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n+            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n+            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n+            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n+            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n+            \" <env:Header>\\n\" +\n+            \"     <urn:CallOptions>\\n\" +\n+            \"       <urn:client>presto</urn:client>\\n\" +\n+            \"     </urn:CallOptions>\\n\" +\n+            \" </env:Header>\\n\" +\n+            \" <env:Body>\\n\" +\n+            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n+            \"     <n1:username>%s</n1:username>\\n\" +\n+            \"     <n1:password>%s</n1:password>\\n\" +\n+            \"   </n1:login>\\n\" +\n+            \" </env:Body>\\n\" +\n+            \"</env:Envelope>\\n\";\n+\n+    public static final int MAX_EXPIRE = 3600;\n+    private int cacheSize = 4096;\n+    private int cacheExpireSeconds = 120;\n+    private String orgs;\n+\n+    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n+    public String getOrgs()\n+    {\n+        return orgs;\n+    }\n+\n+    public Set<String> getOrgSet()\n+    {\n+        Set<String> tmp = new HashSet<>();\n+        if (orgs == null) {\n+            orgs = \"\";\n+        }\n+        String[] orgsSplit = orgs.split(\"[,;]\");\n+        for (String s : orgsSplit) {\n+            tmp.add(s.toLowerCase(locale).trim());\n+        }\n+\n+        return tmp;\n+    }\n+\n+    @Config(\"salesforce.org\")", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTE2NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851164", "bodyText": "The XML document encodes this in element \"organizationId\".  Does Salesforce refer to this as OrgId in the documentation?  Also I don't think the possessive on OrgId is correct.", "author": "dain", "createdAt": "2020-07-19T02:50:36Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);\n+\n+    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n+    protected static final String APIVERSION = \"46.0\";\n+\n+    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n+            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n+            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n+            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n+            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n+            \" <env:Header>\\n\" +\n+            \"     <urn:CallOptions>\\n\" +\n+            \"       <urn:client>presto</urn:client>\\n\" +\n+            \"     </urn:CallOptions>\\n\" +\n+            \" </env:Header>\\n\" +\n+            \" <env:Body>\\n\" +\n+            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n+            \"     <n1:username>%s</n1:username>\\n\" +\n+            \"     <n1:password>%s</n1:password>\\n\" +\n+            \"   </n1:login>\\n\" +\n+            \" </env:Body>\\n\" +\n+            \"</env:Envelope>\\n\";\n+\n+    public static final int MAX_EXPIRE = 3600;\n+    private int cacheSize = 4096;\n+    private int cacheExpireSeconds = 120;\n+    private String orgs;\n+\n+    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzQ5NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456943494", "bodyText": "So, OrgId is commonly used among Salesforce employees and admins.  That stated, it's not found in official documentation I don't think.  I'll change it to Organization Id, and will fix the possessive.", "author": "weissleb", "createdAt": "2020-07-19T19:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTI3MQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851271", "bodyText": "Instead of using a field containing a hard coded unit, use io.airlift.units.Duration.  This is used throughout Presto, so examples should be easy to find.  There is also a MaxDuration annotation that can be used here.", "author": "dain", "createdAt": "2020-07-19T02:52:45Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);\n+\n+    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n+    protected static final String APIVERSION = \"46.0\";\n+\n+    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n+            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n+            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n+            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n+            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n+            \" <env:Header>\\n\" +\n+            \"     <urn:CallOptions>\\n\" +\n+            \"       <urn:client>presto</urn:client>\\n\" +\n+            \"     </urn:CallOptions>\\n\" +\n+            \" </env:Header>\\n\" +\n+            \" <env:Body>\\n\" +\n+            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n+            \"     <n1:username>%s</n1:username>\\n\" +\n+            \"     <n1:password>%s</n1:password>\\n\" +\n+            \"   </n1:login>\\n\" +\n+            \" </env:Body>\\n\" +\n+            \"</env:Envelope>\\n\";\n+\n+    public static final int MAX_EXPIRE = 3600;\n+    private int cacheSize = 4096;\n+    private int cacheExpireSeconds = 120;\n+    private String orgs;\n+\n+    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n+    // and responses are English, and organization id is not in Japaneses characters (this is\n+    // also true of the organization id in the UI, even with other text showing in Japanese).\n+\n+    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n+    public String getOrgs()\n+    {\n+        return orgs;\n+    }\n+\n+    public Set<String> getOrgSet()\n+    {\n+        Set<String> tmp = new HashSet<>();\n+        if (orgs == null) {\n+            orgs = \"\";\n+        }\n+        String[] orgsSplit = orgs.split(\"[,;]\");\n+        for (String s : orgsSplit) {\n+            tmp.add(s.toLowerCase(locale).trim());\n+        }\n+\n+        return tmp;\n+    }\n+\n+    @Config(\"salesforce.org\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n+    public SalesforceConfig setOrgs(String orgs)\n+    {\n+        this.orgs = orgs;\n+        return this;\n+    }\n+\n+    public int getCacheSize()\n+    {\n+        return cacheSize;\n+    }\n+\n+    @Config(\"salesforce.cache-size\")\n+    @ConfigDescription(\"Maximum size of the cache that holds authenticated users.\")\n+    public SalesforceConfig setCacheSize(int cacheSize)\n+    {\n+        this.cacheSize = cacheSize;\n+        return this;\n+    }\n+\n+    @Max(value = MAX_EXPIRE, message = \"The salesforce.cache-expire-seconds is set too high.  Maximum is \" + MAX_EXPIRE + \" seconds.\")\n+    public int getCacheExpireSeconds()", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTQxMw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851413", "bodyText": "Config should be used for user configuration.  I'd move this constants to the class that uses them, and make them private.", "author": "dain", "createdAt": "2020-07-19T02:55:02Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);\n+\n+    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n+    protected static final String APIVERSION = \"46.0\";\n+\n+    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTUwNQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851505", "bodyText": "This comment isn't necessary.... there are tons of these config tests in Presto and they all work the same way", "author": "dain", "createdAt": "2020-07-19T02:56:19Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Map;\n+\n+import static io.airlift.configuration.testing.ConfigAssertions.assertFullMapping;\n+import static io.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n+import static io.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestSalesforceConfig\n+{\n+    private final int defaultCacheSize = 4096;\n+    private final int defaultCacheExpireSeconds = 120;\n+\n+    @Test\n+    public void testDefault()\n+    {\n+        assertRecordedDefaults(recordDefaults(SalesforceConfig.class)\n+                .setOrgs(null)\n+                .setCacheSize(defaultCacheSize)\n+                .setCacheExpireSeconds(defaultCacheExpireSeconds));\n+    }\n+\n+    // Test will only pass if config is created with properties that are different than the defaults.", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java\nindex f10327bba5..589e801271 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java\n\n@@ -14,6 +14,7 @@\n package io.prestosql.plugin.password.salesforce;\n \n import com.google.common.collect.ImmutableMap;\n+import io.airlift.units.Duration;\n import org.testng.annotations.Test;\n \n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTUzOA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851538", "bodyText": "Pick values that are extremely unlikely default values... so maybe 111 and 3333.", "author": "dain", "createdAt": "2020-07-19T02:56:56Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Map;\n+\n+import static io.airlift.configuration.testing.ConfigAssertions.assertFullMapping;\n+import static io.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n+import static io.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestSalesforceConfig\n+{\n+    private final int defaultCacheSize = 4096;\n+    private final int defaultCacheExpireSeconds = 120;\n+\n+    @Test\n+    public void testDefault()\n+    {\n+        assertRecordedDefaults(recordDefaults(SalesforceConfig.class)\n+                .setOrgs(null)\n+                .setCacheSize(defaultCacheSize)\n+                .setCacheExpireSeconds(defaultCacheExpireSeconds));\n+    }\n+\n+    // Test will only pass if config is created with properties that are different than the defaults.\n+    @Test\n+    public void testExplicitConfig()\n+    {\n+        String org = \"my18CharOrgId\";\n+        String cacheSize = \"128\";", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java\nindex f10327bba5..589e801271 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceConfig.java\n\n@@ -14,6 +14,7 @@\n package io.prestosql.plugin.password.salesforce;\n \n import com.google.common.collect.ImmutableMap;\n+import io.airlift.units.Duration;\n import org.testng.annotations.Test;\n \n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTY5MQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851691", "bodyText": "These two fields can be constants.", "author": "dain", "createdAt": "2020-07-19T02:59:12Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private HttpClient testHttpClient;\n+    private String org;\n+    private String username;\n+    private String password;\n+    private String successResponse;\n+    private String failedResponse;\n+    private SalesforceConfig config;\n+    private boolean forReal;\n+\n+    @BeforeSuite\n+    void initOnce()\n+    {\n+        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex 8787936acc..db8ca3d8cd 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -18,33 +18,30 @@ import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n import io.prestosql.spi.security.AccessDeniedException;\n import org.testng.SkipException;\n import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.fail;\n \n public class TestSalesforceBasicAuthenticator\n {\n-    private HttpClient testHttpClient;\n-    private String org;\n-    private String username;\n-    private String password;\n-    private String successResponse;\n-    private String failedResponse;\n-    private SalesforceConfig config;\n     private boolean forReal;\n \n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n     @BeforeSuite\n     void initOnce()\n     {\n-        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n-        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n         forReal = false;\n         String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n         if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTgxMg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851812", "bodyText": "This technique for enabling full integration tests doesn't look like other tests in Presto I have seen.  I could be wrong, but I would look at the other tests and copy the techniques.", "author": "dain", "createdAt": "2020-07-19T03:01:13Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private HttpClient testHttpClient;\n+    private String org;\n+    private String username;\n+    private String password;\n+    private String successResponse;\n+    private String failedResponse;\n+    private SalesforceConfig config;\n+    private boolean forReal;\n+\n+    @BeforeSuite\n+    void initOnce()\n+    {\n+        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+        forReal = false;", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex 8787936acc..db8ca3d8cd 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -18,33 +18,30 @@ import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n import io.prestosql.spi.security.AccessDeniedException;\n import org.testng.SkipException;\n import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.fail;\n \n public class TestSalesforceBasicAuthenticator\n {\n-    private HttpClient testHttpClient;\n-    private String org;\n-    private String username;\n-    private String password;\n-    private String successResponse;\n-    private String failedResponse;\n-    private SalesforceConfig config;\n     private boolean forReal;\n \n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n     @BeforeSuite\n     void initOnce()\n     {\n-        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n-        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n         forReal = false;\n         String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n         if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTg3OA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851878", "bodyText": "Presto runs test in parallel with multiple threads, and I don't think this is thread safe.\nI suggest removing all of the fields here and up, and just using local variables.", "author": "dain", "createdAt": "2020-07-19T03:02:13Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private HttpClient testHttpClient;\n+    private String org;\n+    private String username;\n+    private String password;\n+    private String successResponse;\n+    private String failedResponse;\n+    private SalesforceConfig config;", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex 8787936acc..db8ca3d8cd 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -18,33 +18,30 @@ import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n import io.prestosql.spi.security.AccessDeniedException;\n import org.testng.SkipException;\n import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.fail;\n \n public class TestSalesforceBasicAuthenticator\n {\n-    private HttpClient testHttpClient;\n-    private String org;\n-    private String username;\n-    private String password;\n-    private String successResponse;\n-    private String failedResponse;\n-    private SalesforceConfig config;\n     private boolean forReal;\n \n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n     @BeforeSuite\n     void initOnce()\n     {\n-        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n-        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n         forReal = false;\n         String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n         if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTkzOQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456851939", "bodyText": "You can wrapper all of these with emptyToNull to simplify the usages", "author": "dain", "createdAt": "2020-07-19T03:03:27Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private HttpClient testHttpClient;\n+    private String org;\n+    private String username;\n+    private String password;\n+    private String successResponse;\n+    private String failedResponse;\n+    private SalesforceConfig config;\n+    private boolean forReal;\n+\n+    @BeforeSuite\n+    void initOnce()\n+    {\n+        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+        forReal = false;\n+        String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n+        if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n+            forReal = true;\n+        }\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipal_success()\n+            throws InterruptedException\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org)\n+                .setCacheExpireSeconds(1); // Test cache timeout.\n+\n+        String xmlResponse = String.format(successResponse, org, username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name.\");\n+\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from cache.\");\n+\n+        Thread.sleep(2000L);\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from expired cache.\");\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipal_wrongOrg()\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        final String xmlResponse = String.format(successResponse, \"NotMyOrg\", username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+        authenticator.createAuthenticatedPrincipal(username, password);\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipal_badPass()\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        final String xmlResponse = failedResponse;\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.INTERNAL_SERVER_ERROR, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipalAllOrgs()\n+    {\n+        org = \"all\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        String xmlResponse = String.format(successResponse, \"some18CharOrgId\", username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test allowing all orgs.\");\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipalFewOrgs()\n+    {\n+        org = \"my18CharOrgId,your18CharOrgId, his18CharOrgId ,her18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        String xmlResponse = String.format(successResponse, \"my18CharOrgId\", username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test allowing a few orgs.\");\n+    }\n+\n+    /*\n+     * Real tests that use Salesforce credentials and actually attempt to login.\n+     * These should be disabled for automated builds and test runs.\n+     *\n+     * In order to run these, the following environment variables need to be set.\n+     *\n+     *   - SALESFORCE_TEST_ORG (this is the 18 character organization id)\n+     *   - SALESFORCE_TEST_USERNAME\n+     *   - SALESFORCE_TEST_PASSWORD (this must be password and security token concatenation)\n+     *   - SALESFORCE_TEST_FORREAL must be TRUE\n+     */\n+\n+    // Test a real login.\n+    @Test(description = \"Test principal name for real, yo!\")\n+    void createAuthenticatedPrincipal_realSuccess()\n+    {\n+        // Skip this test if SALESFORCE_TEST_FORREAL is not set to TRUE.\n+        if (!forReal) {\n+            throw new SkipException(\"Skipping real tests.\");\n+        }\n+\n+        org = System.getenv(\"SALESFORCE_TEST_ORG\");\n+        if (org == null || org.length() == 0) {\n+            fail(\"Must set SALESFORCE_TEST_ORG environment variable.\");\n+        }\n+        username = System.getenv(\"SALESFORCE_TEST_USERNAME\");", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex 8787936acc..db8ca3d8cd 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -18,33 +18,30 @@ import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n import io.prestosql.spi.security.AccessDeniedException;\n import org.testng.SkipException;\n import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.fail;\n \n public class TestSalesforceBasicAuthenticator\n {\n-    private HttpClient testHttpClient;\n-    private String org;\n-    private String username;\n-    private String password;\n-    private String successResponse;\n-    private String failedResponse;\n-    private SalesforceConfig config;\n     private boolean forReal;\n \n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n     @BeforeSuite\n     void initOnce()\n     {\n-        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n-        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n         forReal = false;\n         String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n         if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjAxOA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456852018", "bodyText": "this form username.length() == 0 should be replaced with username.isEmpty(). Your IDE should be making this suggestion for you automatically.", "author": "dain", "createdAt": "2020-07-19T03:04:29Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private HttpClient testHttpClient;\n+    private String org;\n+    private String username;\n+    private String password;\n+    private String successResponse;\n+    private String failedResponse;\n+    private SalesforceConfig config;\n+    private boolean forReal;\n+\n+    @BeforeSuite\n+    void initOnce()\n+    {\n+        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+        forReal = false;\n+        String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n+        if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n+            forReal = true;\n+        }\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipal_success()\n+            throws InterruptedException\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org)\n+                .setCacheExpireSeconds(1); // Test cache timeout.\n+\n+        String xmlResponse = String.format(successResponse, org, username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name.\");\n+\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from cache.\");\n+\n+        Thread.sleep(2000L);\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from expired cache.\");\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipal_wrongOrg()\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        final String xmlResponse = String.format(successResponse, \"NotMyOrg\", username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+        authenticator.createAuthenticatedPrincipal(username, password);\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipal_badPass()\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        final String xmlResponse = failedResponse;\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.INTERNAL_SERVER_ERROR, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipalAllOrgs()\n+    {\n+        org = \"all\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        String xmlResponse = String.format(successResponse, \"some18CharOrgId\", username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test allowing all orgs.\");\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipalFewOrgs()\n+    {\n+        org = \"my18CharOrgId,your18CharOrgId, his18CharOrgId ,her18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        String xmlResponse = String.format(successResponse, \"my18CharOrgId\", username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test allowing a few orgs.\");\n+    }\n+\n+    /*\n+     * Real tests that use Salesforce credentials and actually attempt to login.\n+     * These should be disabled for automated builds and test runs.\n+     *\n+     * In order to run these, the following environment variables need to be set.\n+     *\n+     *   - SALESFORCE_TEST_ORG (this is the 18 character organization id)\n+     *   - SALESFORCE_TEST_USERNAME\n+     *   - SALESFORCE_TEST_PASSWORD (this must be password and security token concatenation)\n+     *   - SALESFORCE_TEST_FORREAL must be TRUE\n+     */\n+\n+    // Test a real login.\n+    @Test(description = \"Test principal name for real, yo!\")\n+    void createAuthenticatedPrincipal_realSuccess()\n+    {\n+        // Skip this test if SALESFORCE_TEST_FORREAL is not set to TRUE.\n+        if (!forReal) {\n+            throw new SkipException(\"Skipping real tests.\");\n+        }\n+\n+        org = System.getenv(\"SALESFORCE_TEST_ORG\");\n+        if (org == null || org.length() == 0) {\n+            fail(\"Must set SALESFORCE_TEST_ORG environment variable.\");\n+        }\n+        username = System.getenv(\"SALESFORCE_TEST_USERNAME\");\n+        password = System.getenv(\"SALESFORCE_TEST_PASSWORD\");\n+        if (username == null || username.length() == 0 || password == null || password.length() == 0) {", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NjI2Nw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456946267", "bodyText": "Didn't get any hint on it from IntelliJ, but will research perhaps why.  I've replaced all these checks with emptyToNull as suggested.  These checks are out of old habit.  I should form new habits.", "author": "weissleb", "createdAt": "2020-07-19T19:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex 8787936acc..db8ca3d8cd 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -18,33 +18,30 @@ import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n import io.prestosql.spi.security.AccessDeniedException;\n import org.testng.SkipException;\n import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.fail;\n \n public class TestSalesforceBasicAuthenticator\n {\n-    private HttpClient testHttpClient;\n-    private String org;\n-    private String username;\n-    private String password;\n-    private String successResponse;\n-    private String failedResponse;\n-    private SalesforceConfig config;\n     private boolean forReal;\n \n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n     @BeforeSuite\n     void initOnce()\n     {\n-        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n-        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n         forReal = false;\n         String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n         if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjA2NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456852064", "bodyText": "(nit) removed unused variable principal", "author": "dain", "createdAt": "2020-07-19T03:05:00Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private HttpClient testHttpClient;\n+    private String org;\n+    private String username;\n+    private String password;\n+    private String successResponse;\n+    private String failedResponse;\n+    private SalesforceConfig config;\n+    private boolean forReal;\n+\n+    @BeforeSuite\n+    void initOnce()\n+    {\n+        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+        forReal = false;\n+        String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n+        if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n+            forReal = true;\n+        }\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipal_success()\n+            throws InterruptedException\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org)\n+                .setCacheExpireSeconds(1); // Test cache timeout.\n+\n+        String xmlResponse = String.format(successResponse, org, username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name.\");\n+\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from cache.\");\n+\n+        Thread.sleep(2000L);\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from expired cache.\");\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipal_wrongOrg()\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        final String xmlResponse = String.format(successResponse, \"NotMyOrg\", username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+        authenticator.createAuthenticatedPrincipal(username, password);\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipal_badPass()\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org);\n+\n+        final String xmlResponse = failedResponse;\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.INTERNAL_SERVER_ERROR, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex 8787936acc..db8ca3d8cd 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -18,33 +18,30 @@ import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n import io.prestosql.spi.security.AccessDeniedException;\n import org.testng.SkipException;\n import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.fail;\n \n public class TestSalesforceBasicAuthenticator\n {\n-    private HttpClient testHttpClient;\n-    private String org;\n-    private String username;\n-    private String password;\n-    private String successResponse;\n-    private String failedResponse;\n-    private SalesforceConfig config;\n     private boolean forReal;\n \n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n     @BeforeSuite\n     void initOnce()\n     {\n-        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n-        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n         forReal = false;\n         String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n         if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjIwOA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456852208", "bodyText": "(nit) I don't think we use underscores in method names in Presto", "author": "dain", "createdAt": "2020-07-19T03:07:14Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private HttpClient testHttpClient;\n+    private String org;\n+    private String username;\n+    private String password;\n+    private String successResponse;\n+    private String failedResponse;\n+    private SalesforceConfig config;\n+    private boolean forReal;\n+\n+    @BeforeSuite\n+    void initOnce()\n+    {\n+        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+        forReal = false;\n+        String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n+        if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n+            forReal = true;\n+        }\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipal_success()\n+            throws InterruptedException\n+    {\n+        org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        username = \"user@salesforce.com\";\n+        password = \"passtoken\";\n+\n+        config = new SalesforceConfig()\n+                .setOrgs(org)\n+                .setCacheExpireSeconds(1); // Test cache timeout.\n+\n+        String xmlResponse = String.format(successResponse, org, username);\n+\n+        testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name.\");\n+\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from cache.\");\n+\n+        Thread.sleep(2000L);\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from expired cache.\");\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipal_wrongOrg()", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex 8787936acc..db8ca3d8cd 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -18,33 +18,30 @@ import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n import io.prestosql.spi.security.AccessDeniedException;\n import org.testng.SkipException;\n import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Strings.emptyToNull;\n import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.fail;\n \n public class TestSalesforceBasicAuthenticator\n {\n-    private HttpClient testHttpClient;\n-    private String org;\n-    private String username;\n-    private String password;\n-    private String successResponse;\n-    private String failedResponse;\n-    private SalesforceConfig config;\n     private boolean forReal;\n \n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n     @BeforeSuite\n     void initOnce()\n     {\n-        successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n-        failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n         forReal = false;\n         String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n         if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjM1NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456852354", "bodyText": "(nit) Add underscores to the names to the spell checker in the ID doesn't complain", "author": "dain", "createdAt": "2020-07-19T03:09:40Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);\n+\n+    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n+    protected static final String APIVERSION = \"46.0\";", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjQwMw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456852403", "bodyText": "This isn't used", "author": "dain", "createdAt": "2020-07-19T03:09:53Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjQ0Mg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456852442", "bodyText": "This can be private", "author": "dain", "createdAt": "2020-07-19T03:10:27Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.log.Logger;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class SalesforceConfig\n+{\n+    private static final Logger log = Logger.get(SalesforceConfig.class);\n+\n+    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n+    protected static final String APIVERSION = \"46.0\";\n+\n+    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n+            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n+            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n+            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n+            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n+            \" <env:Header>\\n\" +\n+            \"     <urn:CallOptions>\\n\" +\n+            \"       <urn:client>presto</urn:client>\\n\" +\n+            \"     </urn:CallOptions>\\n\" +\n+            \" </env:Header>\\n\" +\n+            \" <env:Body>\\n\" +\n+            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n+            \"     <n1:username>%s</n1:username>\\n\" +\n+            \"     <n1:password>%s</n1:password>\\n\" +\n+            \"   </n1:login>\\n\" +\n+            \" </env:Body>\\n\" +\n+            \"</env:Envelope>\\n\";\n+\n+    public static final int MAX_EXPIRE = 3600;", "originalCommit": "f7c5194e36fabd4888714a764c64c8119d4b918c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0Njc5NQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r456946795", "bodyText": "Originally didn't depend on the annotations for validation, and therefore used this throughout the package.  I've refactored to use @MaxDuration per your suggestion.", "author": "weissleb", "createdAt": "2020-07-19T19:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MjQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5e980142135dae30e630189904f984fd59d3378a", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex b447b51db6..8987e4d4e4 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -15,74 +15,48 @@ package io.prestosql.plugin.password.salesforce;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n \n-import javax.validation.constraints.Max;\n import javax.validation.constraints.NotNull;\n \n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n public class SalesforceConfig\n {\n-    private static final Logger log = Logger.get(SalesforceConfig.class);\n-\n-    protected static final String LOGINURL = \"https://login.salesforce.com/services/Soap/u/\";\n-    protected static final String APIVERSION = \"46.0\";\n-\n-    protected static final String LOGIN_SOAP_MESSAGE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n-            \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n-            \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n-            \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-            \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n-            \" <env:Header>\\n\" +\n-            \"     <urn:CallOptions>\\n\" +\n-            \"       <urn:client>presto</urn:client>\\n\" +\n-            \"     </urn:CallOptions>\\n\" +\n-            \" </env:Header>\\n\" +\n-            \" <env:Body>\\n\" +\n-            \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n-            \"     <n1:username>%s</n1:username>\\n\" +\n-            \"     <n1:password>%s</n1:password>\\n\" +\n-            \"   </n1:login>\\n\" +\n-            \" </env:Body>\\n\" +\n-            \"</env:Envelope>\\n\";\n-\n-    public static final int MAX_EXPIRE = 3600;\n     private int cacheSize = 4096;\n-    private int cacheExpireSeconds = 120;\n-    private String orgs;\n-\n-    private final Locale locale = Locale.US;    // Tested API request and response for user with Japanese locale and language preference,\n-    // and responses are English, and organization id is not in Japaneses characters (this is\n-    // also true of the organization id in the UI, even with other text showing in Japanese).\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n \n-    @NotNull(message = \"Must set salesforce.org with one or more Salesforce 18 char OrgId's, or \\\"all\\\"\")\n-    public String getOrgs()\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n     {\n-        return orgs;\n+        return allowedOrganizations;\n     }\n \n     public Set<String> getOrgSet()\n     {\n         Set<String> tmp = new HashSet<>();\n-        if (orgs == null) {\n-            orgs = \"\";\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n         }\n-        String[] orgsSplit = orgs.split(\"[,;]\");\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n         for (String s : orgsSplit) {\n-            tmp.add(s.toLowerCase(locale).trim());\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n         }\n \n         return tmp;\n     }\n \n-    @Config(\"salesforce.org\")\n-    @ConfigDescription(\"Comma separated list of Salesforce 18 Character OrgId.\")\n-    public SalesforceConfig setOrgs(String orgs)\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n     {\n-        this.orgs = orgs;\n+        this.allowedOrganizations = allowedOrganizations;\n         return this;\n     }\n \n"}}, {"oid": "5e980142135dae30e630189904f984fd59d3378a", "url": "https://github.com/trinodb/trino/commit/5e980142135dae30e630189904f984fd59d3378a", "message": "Addressed feedback from Dain.", "committedDate": "2020-07-20T00:05:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4OTIwMA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r464589200", "bodyText": "Since we are interpolating into XML let's run the values through Guava's xml excape method: https://guava.dev/releases/20.0/api/docs/com/google/common/xml/XmlEscapers.html", "author": "dain", "createdAt": "2020-08-03T18:28:55Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private final Set<String> allowedOrganizations;\n+    private final HttpClient httpClient;\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.allowedOrganizations = ImmutableSet.copyOf(config.getOrgSet());\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds().toMillis(), MILLISECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try {\n+            return userCache.getUnchecked(new Credential(username, password));\n+        }\n+        catch (UncheckedExecutionException e) {\n+            throwIfInstanceOf(e.getCause(), AccessDeniedException.class);\n+            throw e;\n+        }\n+    }\n+\n+    // This does the work of logging into Salesforce.\n+    private Principal doLogin(Credential credential)\n+    {\n+        log.debug(\"Logging into Salesforce.\");\n+        String username = credential.getUser();\n+        String password = credential.getPassword();\n+\n+        // Login requests must be POSTs\n+        String loginSoapMessage = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n+                \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n+                \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n+                \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n+                \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n+                \" <env:Header>\\n\" +\n+                \"     <urn:CallOptions>\\n\" +\n+                \"       <urn:client>presto</urn:client>\\n\" +\n+                \"     </urn:CallOptions>\\n\" +\n+                \" </env:Header>\\n\" +\n+                \" <env:Body>\\n\" +\n+                \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n+                \"     <n1:username>%s</n1:username>\\n\" +\n+                \"     <n1:password>%s</n1:password>\\n\" +", "originalCommit": "5e980142135dae30e630189904f984fd59d3378a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwOTQ0Nw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r465709447", "bodyText": "@dain something as simple as this?\n        Escaper escaper = xmlContentEscaper();\n        Request request = new Request.Builder()\n                .setUri(URI.create(loginUrl + apiVersion))\n                .setHeader(\"Content-Type\", \"text/xml;charset=UTF-8\")\n                .setHeader(\"SOAPAction\", \"login\")\n                .setMethod(\"POST\")\n                .setBodyGenerator(createStaticBodyGenerator(String.format(loginSoapMessage, escaper.escape(username), escaper.escape(password)), UTF_8))\n                .build();", "author": "weissleb", "createdAt": "2020-08-05T13:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4OTIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "00d66e4fbb65529d877e7a645561b1510cf7cbcc", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex 0169847c92..30e0059635 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -17,6 +17,7 @@ import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.escape.Escaper;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDM5Ng==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r464590396", "bodyText": "you can use allowedOrganizations.equals(ImmutableList.of(\"all\") &&.  Also, for the style, I believe we put the && on the end of the line.", "author": "dain", "createdAt": "2020-08-03T18:31:28Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.password.Credential;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.PasswordAuthenticator;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.inject.Inject;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Throwables.throwIfInstanceOf;\n+import static io.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * Allows users to authenticate to Presto using their Salesforce username and password + security token concatenation.  You can learn about\n+ * the Salesforce security token at https://help.salesforce.com/articleView?id=user_security_token.htm.\n+ * <br><br>\n+ * If your password is <code>foo</code> and token is <code>bar</code>, then your Presto password will be <code>foobar</code>.\n+ * <br><br>\n+ * Admins can configure one or more Salesforce Organization Ids (18 char) via <code>salesforce.org</code> in <code>password-authenticator.properties</code>\n+ * to act as a single layer of authZ.  Essentially, if the user who logs in is not part of the configured org, their access will be denied.  Alternatively,\n+ * the admin can specify \"all\", rather than actual orgs.  This will allow any authenticated Salesforce user access to Presto.\n+ */\n+public class SalesforceBasicAuthenticator\n+        implements PasswordAuthenticator\n+{\n+    private static final Logger log = Logger.get(SalesforceBasicAuthenticator.class);\n+\n+    // Set of Salesforce orgs, which users must belong to in order to authN.\n+    private final Set<String> allowedOrganizations;\n+    private final HttpClient httpClient;\n+    private final LoadingCache<Credential, Principal> userCache;\n+\n+    @Inject\n+    public SalesforceBasicAuthenticator(SalesforceConfig config, @SalesforceAuthenticationClient HttpClient httpClient)\n+    {\n+        this.allowedOrganizations = ImmutableSet.copyOf(config.getOrgSet());\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+\n+        this.userCache = CacheBuilder.newBuilder()\n+                .maximumSize(config.getCacheSize())\n+                .expireAfterWrite(config.getCacheExpireSeconds().toMillis(), MILLISECONDS)\n+                .build(CacheLoader.from(this::doLogin));\n+    }\n+\n+    @Override\n+    public Principal createAuthenticatedPrincipal(String username, String password)\n+    {\n+        try {\n+            return userCache.getUnchecked(new Credential(username, password));\n+        }\n+        catch (UncheckedExecutionException e) {\n+            throwIfInstanceOf(e.getCause(), AccessDeniedException.class);\n+            throw e;\n+        }\n+    }\n+\n+    // This does the work of logging into Salesforce.\n+    private Principal doLogin(Credential credential)\n+    {\n+        log.debug(\"Logging into Salesforce.\");\n+        String username = credential.getUser();\n+        String password = credential.getPassword();\n+\n+        // Login requests must be POSTs\n+        String loginSoapMessage = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\" +\n+                \"<env:Envelope xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n\" +\n+                \"xmlns:urn=\\\"urn:enterprise.soap.sforce.com\\\"\\n\" +\n+                \"   xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n+                \"   xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\" +\n+                \" <env:Header>\\n\" +\n+                \"     <urn:CallOptions>\\n\" +\n+                \"       <urn:client>presto</urn:client>\\n\" +\n+                \"     </urn:CallOptions>\\n\" +\n+                \" </env:Header>\\n\" +\n+                \" <env:Body>\\n\" +\n+                \"   <n1:login xmlns:n1=\\\"urn:partner.soap.sforce.com\\\">\\n\" +\n+                \"     <n1:username>%s</n1:username>\\n\" +\n+                \"     <n1:password>%s</n1:password>\\n\" +\n+                \"   </n1:login>\\n\" +\n+                \" </env:Body>\\n\" +\n+                \"</env:Envelope>\\n\";\n+        String apiVersion = \"46.0\";\n+        String loginUrl = \"https://login.salesforce.com/services/Soap/u/\";\n+        Request request = new Request.Builder()\n+                .setUri(URI.create(loginUrl + apiVersion))\n+                .setHeader(\"Content-Type\", \"text/xml;charset=UTF-8\")\n+                .setHeader(\"SOAPAction\", \"login\")\n+                .setMethod(\"POST\")\n+                .setBodyGenerator(createStaticBodyGenerator(String.format(loginSoapMessage, username, password), UTF_8))\n+                .build();\n+\n+        StringResponseHandler.StringResponse response = httpClient.execute(request, StringResponseHandler.createStringResponseHandler());\n+\n+        if (response.getStatusCode() != 200) {\n+            throw new AccessDeniedException(String.format(\"Invalid response for login\\n.%s\",\n+                    response.getBody()));\n+        }\n+\n+        Document xmlResponse;\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            xmlResponse = builder.parse(new InputSource(new StringReader(\n+                    response.getBody())));\n+        }\n+        catch (ParserConfigurationException | SAXException | IOException e) {\n+            throw new RuntimeException(String.format(\"Error parsing response: %s\\n\\tReceived error message: %s\",\n+                    response.getBody(),\n+                    e.getMessage()));\n+        }\n+\n+        // Make sure a Session Id has been returned.\n+        getElementValue(xmlResponse, \"sessionId\");\n+\n+        // We want the organizationId from the response to compare it to the configured org from password-authenticator.properties.\n+        String returnedOrg = getElementValue(xmlResponse, \"organizationId\");\n+        // If the only entry in the set is \"all\", don't bother to check, otherwise make sure the returned org is in the set.\n+        // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+        if (!(allowedOrganizations.size() == 1 && allowedOrganizations.contains(\"all\"))", "originalCommit": "5e980142135dae30e630189904f984fd59d3378a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNzY3Mg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r465717672", "bodyText": "Updating check as follows.\n        // If the only entry in the set is \"all\", don't bother to check, otherwise make sure the returned org is in the set.\n        // The organizationId is always in Locale.US, regardless of the user's locale and language.\n        if (!allowedOrganizations.equals(ImmutableSet.of(\"all\"))) {\n            if (!allowedOrganizations.contains(returnedOrg.toLowerCase(Locale.US))) {\n                throw new AccessDeniedException(String.format(\n                        \"Login successful, but for wrong Salesforce org.  Got %s, but expected a different org.\",\n                        returnedOrg));\n            }\n        }", "author": "weissleb", "createdAt": "2020-08-05T13:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "00d66e4fbb65529d877e7a645561b1510cf7cbcc", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\nindex 0169847c92..30e0059635 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceBasicAuthenticator.java\n\n@@ -17,6 +17,7 @@ import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.escape.Escaper;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.Request;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNzc2Nw==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r464727767", "bodyText": "I'd use 1h here instead", "author": "dain", "createdAt": "2020-08-04T00:16:59Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SalesforceConfig\n+{\n+    private int cacheSize = 4096;\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n+\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n+    {\n+        return allowedOrganizations;\n+    }\n+\n+    public Set<String> getOrgSet()\n+    {\n+        Set<String> tmp = new HashSet<>();\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n+        }\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n+        for (String s : orgsSplit) {\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n+        }\n+\n+        return tmp;\n+    }\n+\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n+    {\n+        this.allowedOrganizations = allowedOrganizations;\n+        return this;\n+    }\n+\n+    public int getCacheSize()\n+    {\n+        return cacheSize;\n+    }\n+\n+    @Config(\"salesforce.cache-size\")\n+    @ConfigDescription(\"Maximum size of the cache that holds authenticated users.  Default is 4096 entries.\")\n+    public SalesforceConfig setCacheSize(int cacheSize)\n+    {\n+        this.cacheSize = cacheSize;\n+        return this;\n+    }\n+\n+    @MaxDuration(value = \"3600s\")", "originalCommit": "5e980142135dae30e630189904f984fd59d3378a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00d66e4fbb65529d877e7a645561b1510cf7cbcc", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex 8987e4d4e4..eeae3637e6 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -28,7 +28,7 @@ import java.util.concurrent.TimeUnit;\n public class SalesforceConfig\n {\n     private int cacheSize = 4096;\n-    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private Duration cacheExpireDuration = Duration.succinctDuration(2, TimeUnit.MINUTES);\n     private String allowedOrganizations;\n \n     @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNzc4OA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r464727788", "bodyText": "This should not be named -seconds now that we are using Duration since duration can be any unit.", "author": "dain", "createdAt": "2020-08-04T00:17:03Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SalesforceConfig\n+{\n+    private int cacheSize = 4096;\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n+\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n+    {\n+        return allowedOrganizations;\n+    }\n+\n+    public Set<String> getOrgSet()\n+    {\n+        Set<String> tmp = new HashSet<>();\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n+        }\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n+        for (String s : orgsSplit) {\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n+        }\n+\n+        return tmp;\n+    }\n+\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n+    {\n+        this.allowedOrganizations = allowedOrganizations;\n+        return this;\n+    }\n+\n+    public int getCacheSize()\n+    {\n+        return cacheSize;\n+    }\n+\n+    @Config(\"salesforce.cache-size\")\n+    @ConfigDescription(\"Maximum size of the cache that holds authenticated users.  Default is 4096 entries.\")\n+    public SalesforceConfig setCacheSize(int cacheSize)\n+    {\n+        this.cacheSize = cacheSize;\n+        return this;\n+    }\n+\n+    @MaxDuration(value = \"3600s\")\n+    public Duration getCacheExpireSeconds()\n+    {\n+        return cacheExpireSeconds;\n+    }\n+\n+    @Config(\"salesforce.cache-expire-seconds\")", "originalCommit": "5e980142135dae30e630189904f984fd59d3378a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00d66e4fbb65529d877e7a645561b1510cf7cbcc", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex 8987e4d4e4..eeae3637e6 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -28,7 +28,7 @@ import java.util.concurrent.TimeUnit;\n public class SalesforceConfig\n {\n     private int cacheSize = 4096;\n-    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private Duration cacheExpireDuration = Duration.succinctDuration(2, TimeUnit.MINUTES);\n     private String allowedOrganizations;\n \n     @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyODY2NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r464728664", "bodyText": "style: we don't use final on local variables (or parameters)", "author": "dain", "createdAt": "2020-08-04T00:20:15Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Strings.emptyToNull;\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private boolean forReal;\n+\n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n+    @BeforeSuite\n+    void initOnce()\n+    {\n+        forReal = false;\n+        String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n+        if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n+            forReal = true;\n+        }\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipalSuccess()\n+            throws InterruptedException\n+    {\n+        String org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        String username = \"user@salesforce.com\";\n+        String password = \"passtoken\";\n+\n+        SalesforceConfig config = new SalesforceConfig()\n+                .setAllowedOrganizations(org)\n+                .setCacheExpireSeconds(Duration.succinctDuration(1, TimeUnit.SECONDS)); // Test cache timeout.\n+\n+        String xmlResponse = String.format(successResponse, org, username);\n+\n+        HttpClient testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name.\");\n+\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from cache.\");\n+\n+        Thread.sleep(2000L);\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from expired cache.\");\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipalWrongOrg()\n+    {\n+        String org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        String username = \"user@salesforce.com\";\n+        String password = \"passtoken\";\n+\n+        SalesforceConfig config = new SalesforceConfig()\n+                .setAllowedOrganizations(org);\n+\n+        final String xmlResponse = String.format(successResponse, \"NotMyOrg\", username);", "originalCommit": "5e980142135dae30e630189904f984fd59d3378a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00d66e4fbb65529d877e7a645561b1510cf7cbcc", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex db8ca3d8cd..777a684912 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -13,7 +13,6 @@\n  */\n package io.prestosql.plugin.password.salesforce;\n \n-import com.google.common.net.MediaType;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyODc4NQ==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r464728785", "bodyText": "Consider static importing the response code and media types", "author": "dain", "createdAt": "2020-08-04T00:20:43Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import com.google.common.net.MediaType;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.jetty.JettyHttpClient;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.google.common.base.Strings.emptyToNull;\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class TestSalesforceBasicAuthenticator\n+{\n+    private boolean forReal;\n+\n+    private final String successResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns=\\\"urn:partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><loginResponse><result><metadataServerUrl>https://example.salesforce.com/services/Soap/m/46.0/example</metadataServerUrl><passwordExpired>false</passwordExpired><sandbox>false</sandbox><serverUrl>https://example.salesforce.com/services/Soap/u/46.0/example</serverUrl><sessionId>example</sessionId><userId>example</userId><userInfo><accessibilityMode>false</accessibilityMode><chatterExternal>false</chatterExternal><currencySymbol>$</currencySymbol><orgAttachmentFileSizeLimit>5242880</orgAttachmentFileSizeLimit><orgDefaultCurrencyIsoCode>USD</orgDefaultCurrencyIsoCode><orgDefaultCurrencyLocale>en_US</orgDefaultCurrencyLocale><orgDisallowHtmlAttachments>false</orgDisallowHtmlAttachments><orgHasPersonAccounts>true</orgHasPersonAccounts><organizationId>%s</organizationId><organizationMultiCurrency>false</organizationMultiCurrency><organizationName>example</organizationName><profileId>example</profileId><roleId>example</roleId><sessionSecondsValid>7200</sessionSecondsValid><userDefaultCurrencyIsoCode xsi:nil=\\\"true\\\"/><userEmail>user@salesforce.com</userEmail><userFullName>Vince Chase</userFullName><userId>example</userId><userLanguage>en_US</userLanguage><userLocale>en_US</userLocale><userName>%s</userName><userTimeZone>America/Chicago</userTimeZone><userType>Standard</userType><userUiSkin>Theme3</userUiSkin></userInfo></result></loginResponse></soapenv:Body></soapenv:Envelope>\";\n+    private final String failedResponse = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:sf=\\\"urn:fault.partner.soap.sforce.com\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"><soapenv:Body><soapenv:Fault><faultcode>sf:INVALID_LOGIN</faultcode><faultstring>INVALID_LOGIN: Invalid username, password, security token; or user locked out.</faultstring><detail><sf:LoginFault xsi:type=\\\"sf:LoginFault\\\"><sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode><sf:exceptionMessage>Invalid username, password, security token; or user locked out.</sf:exceptionMessage></sf:LoginFault></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>\";\n+\n+    @BeforeSuite\n+    void initOnce()\n+    {\n+        forReal = false;\n+        String forRealEnvVar = System.getenv(\"SALESFORCE_TEST_FORREAL\");\n+        if (forRealEnvVar != null && forRealEnvVar.equalsIgnoreCase(\"TRUE\")) {\n+            forReal = true;\n+        }\n+    }\n+\n+    @Test\n+    public void createAuthenticatedPrincipalSuccess()\n+            throws InterruptedException\n+    {\n+        String org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        String username = \"user@salesforce.com\";\n+        String password = \"passtoken\";\n+\n+        SalesforceConfig config = new SalesforceConfig()\n+                .setAllowedOrganizations(org)\n+                .setCacheExpireSeconds(Duration.succinctDuration(1, TimeUnit.SECONDS)); // Test cache timeout.\n+\n+        String xmlResponse = String.format(successResponse, org, username);\n+\n+        HttpClient testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));\n+        SalesforceBasicAuthenticator authenticator = new SalesforceBasicAuthenticator(config, testHttpClient);\n+\n+        Principal principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name.\");\n+\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from cache.\");\n+\n+        Thread.sleep(2000L);\n+        principal = authenticator.createAuthenticatedPrincipal(username, password);\n+        assertEquals(principal.getName(), username, \"Test principal name from expired cache.\");\n+    }\n+\n+    @Test(expectedExceptions = AccessDeniedException.class)\n+    public void createAuthenticatedPrincipalWrongOrg()\n+    {\n+        String org = \"my18CharOrgId\";  // As if from salesforce.org property.\n+        String username = \"user@salesforce.com\";\n+        String password = \"passtoken\";\n+\n+        SalesforceConfig config = new SalesforceConfig()\n+                .setAllowedOrganizations(org);\n+\n+        final String xmlResponse = String.format(successResponse, \"NotMyOrg\", username);\n+\n+        HttpClient testHttpClient = new TestingHttpClient((request -> mockResponse(HttpStatus.OK, MediaType.ANY_TEXT_TYPE, xmlResponse)));", "originalCommit": "5e980142135dae30e630189904f984fd59d3378a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00d66e4fbb65529d877e7a645561b1510cf7cbcc", "chunk": "diff --git a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\nindex db8ca3d8cd..777a684912 100644\n--- a/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n+++ b/presto-password-authenticators/src/test/java/io/prestosql/plugin/password/salesforce/TestSalesforceBasicAuthenticator.java\n\n@@ -13,7 +13,6 @@\n  */\n package io.prestosql.plugin.password.salesforce;\n \n-import com.google.common.net.MediaType;\n import io.airlift.http.client.HttpClient;\n import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.jetty.JettyHttpClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MTgyNg==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r464741826", "bodyText": "Let's go with Expire time in for an entry in cache since last write. The description should not include the default value.  The default is printed separately during setup, and the airlift config system has a way to override the defaults.  Also, I don't think we include the max in any descriptions.", "author": "dain", "createdAt": "2020-08-04T01:10:41Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.salesforce;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SalesforceConfig\n+{\n+    private int cacheSize = 4096;\n+    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private String allowedOrganizations;\n+\n+    @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n+    public String getAllowedOrganizations()\n+    {\n+        return allowedOrganizations;\n+    }\n+\n+    public Set<String> getOrgSet()\n+    {\n+        Set<String> tmp = new HashSet<>();\n+        if (allowedOrganizations == null) {\n+            allowedOrganizations = \"\";\n+        }\n+        String[] orgsSplit = allowedOrganizations.split(\"[,;]\");\n+        for (String s : orgsSplit) {\n+            // The organizationId is always in Locale.US, regardless of the user's locale and language.\n+            tmp.add(s.toLowerCase(Locale.US).trim());\n+        }\n+\n+        return tmp;\n+    }\n+\n+    @Config(\"salesforce.allowed-organizations\")\n+    @ConfigDescription(\"Comma separated list of Salesforce 18 Character Organization Ids.\")\n+    public SalesforceConfig setAllowedOrganizations(String allowedOrganizations)\n+    {\n+        this.allowedOrganizations = allowedOrganizations;\n+        return this;\n+    }\n+\n+    public int getCacheSize()\n+    {\n+        return cacheSize;\n+    }\n+\n+    @Config(\"salesforce.cache-size\")\n+    @ConfigDescription(\"Maximum size of the cache that holds authenticated users.  Default is 4096 entries.\")\n+    public SalesforceConfig setCacheSize(int cacheSize)\n+    {\n+        this.cacheSize = cacheSize;\n+        return this;\n+    }\n+\n+    @MaxDuration(value = \"3600s\")\n+    public Duration getCacheExpireSeconds()\n+    {\n+        return cacheExpireSeconds;\n+    }\n+\n+    @Config(\"salesforce.cache-expire-seconds\")\n+    @ConfigDescription(\"Expire time in seconds for an entry in cache since last write.  Default is 120 seconds, max is 3600 seconds.\")", "originalCommit": "5e980142135dae30e630189904f984fd59d3378a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMzA3NA==", "url": "https://github.com/trinodb/trino/pull/4372#discussion_r465723074", "bodyText": "Cool?\n    @MaxDuration(value = \"1h\")\n    public Duration getCacheExpireDuration()\n    {\n        return cacheExpireDuration;\n    }\n\n    @Config(\"salesforce.cache-expire-duration\")\n    @ConfigDescription(\"Expire duration for an entry in cache since last write.\")\n    public SalesforceConfig setCacheExpireDuration(Duration cacheExpireDuration)\n    {\n        this.cacheExpireDuration = cacheExpireDuration;\n        return this;\n    }", "author": "weissleb", "createdAt": "2020-08-05T13:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MTgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "00d66e4fbb65529d877e7a645561b1510cf7cbcc", "chunk": "diff --git a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\nindex 8987e4d4e4..eeae3637e6 100644\n--- a/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n+++ b/presto-password-authenticators/src/main/java/io/prestosql/plugin/password/salesforce/SalesforceConfig.java\n\n@@ -28,7 +28,7 @@ import java.util.concurrent.TimeUnit;\n public class SalesforceConfig\n {\n     private int cacheSize = 4096;\n-    private Duration cacheExpireSeconds = Duration.succinctDuration(120, TimeUnit.SECONDS);\n+    private Duration cacheExpireDuration = Duration.succinctDuration(2, TimeUnit.MINUTES);\n     private String allowedOrganizations;\n \n     @NotNull(message = \"Must set salesforce.allowed-organization with one or more Salesforce 18 char Organization Ids, or \\\"all\\\"\")\n"}}, {"oid": "00d66e4fbb65529d877e7a645561b1510cf7cbcc", "url": "https://github.com/trinodb/trino/commit/00d66e4fbb65529d877e7a645561b1510cf7cbcc", "message": "Addressed second round of review comments, mainly added xml escaping and changing cache expiration property to reflect Duration type.", "committedDate": "2020-08-05T13:41:54Z", "type": "commit"}]}