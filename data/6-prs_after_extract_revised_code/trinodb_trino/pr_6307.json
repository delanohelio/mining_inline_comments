{"pr_number": 6307, "pr_title": "Fix DATA_TYPE, DECIMAL_DIGITS for parametric date/time types", "pr_createdAt": "2020-12-11T15:22:05Z", "pr_url": "https://github.com/trinodb/trino/pull/6307", "timeline": [{"oid": "d192b773e5cb37a1f7075a45ef2d911ac3432d64", "url": "https://github.com/trinodb/trino/commit/d192b773e5cb37a1f7075a45ef2d911ac3432d64", "message": "Move system.runtime's tests to system.runtime package", "committedDate": "2020-12-11T14:54:00Z", "type": "commit"}, {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a", "url": "https://github.com/trinodb/trino/commit/2b480500b4f79764cd3663a3c053605afa7c718a", "message": "Fix DATA_TYPE, DECIMAL_DIGITS for parametric date/time types\n\nFix information reported by `DatabaseMetaData#getColumns`:\n\n- fix `DATA_TYPE` for parametric `time` and `time with time zone`\n- provide `DECIMAL_DIGITS` for parametric `time` and `timestamp` (with\n  and without zone)\n\nTest `TYPE_NAME` returned by that method.", "committedDate": "2020-12-11T15:21:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTE0Mw==", "url": "https://github.com/trinodb/trino/pull/6307#discussion_r541031143", "bodyText": "What is the meaning of columnSize here? It seem weird that increase by N in TIMESTAMP precision makes the columnSize increase by N.", "author": "losipiuk", "createdAt": "2020-12-11T15:32:55Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java", "diffHunk": "@@ -763,12 +783,30 @@ public void testGetColumns()\n                 assertColumnSpec(rs, Types.VARCHAR, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, createUnboundedVarcharType());\n                 assertColumnSpec(rs, Types.CHAR, 345L, null, null, 345L, createCharType(345));\n                 assertColumnSpec(rs, Types.VARBINARY, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, VarbinaryType.VARBINARY);\n-                assertColumnSpec(rs, Types.TIME, 12L, null, null, null, TimeType.TIME);\n-                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, null, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, null, null, TimestampType.TIMESTAMP_MILLIS);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, null, null, createTimestampType(9));\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, null, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 65L, null, null, null, createTimestampWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, TimeType.TIME);\n+                assertColumnSpec(rs, Types.TIME, 8L, null, 0L, null, createTimeType(0));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, createTimeType(3));\n+                assertColumnSpec(rs, Types.TIME, 15L, null, 6L, null, createTimeType(6));\n+                assertColumnSpec(rs, Types.TIME, 18L, null, 9L, null, createTimeType(9));\n+                assertColumnSpec(rs, Types.TIME, 21L, null, 12L, null, createTimeType(12));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 14L, null, 0L, null, createTimeWithTimeZoneType(0));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, createTimeWithTimeZoneType(3));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 21L, null, 6L, null, createTimeWithTimeZoneType(6));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 24L, null, 9L, null, createTimeWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 27L, null, 12L, null, createTimeWithTimeZoneType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, TimestampType.TIMESTAMP);\n+                assertColumnSpec(rs, Types.TIMESTAMP, 21L, null, 0L, null, createTimestampType(0));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, createTimestampType(3));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 28L, null, 6L, null, createTimestampType(6));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, 9L, null, createTimestampType(9));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 34L, null, 12L, null, createTimestampType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, 3L, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 55L, null, 0L, null, createTimestampWithTimeZoneType(0));", "originalCommit": "2b480500b4f79764cd3663a3c053605afa7c718a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMjE4MA==", "url": "https://github.com/trinodb/trino/pull/6307#discussion_r541032180", "bodyText": "It\u2019s the size of the rendered value, if I recall", "author": "martint", "createdAt": "2020-12-11T15:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1Mzg4Ng==", "url": "https://github.com/trinodb/trino/pull/6307#discussion_r541053886", "bodyText": "@losipiuk  see  https://github.com/prestosql/presto/blob/22717c61419c851b1c3814b60a3453b22d4a45ef/presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java#L446-L455", "author": "findepi", "createdAt": "2020-12-11T16:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTE0Mw=="}], "type": "inlineReview", "revised_code": null}]}