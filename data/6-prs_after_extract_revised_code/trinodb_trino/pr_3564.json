{"pr_number": 3564, "pr_title": "Verify support for correlation during analysis", "pr_createdAt": "2020-04-28T00:13:46Z", "pr_url": "https://github.com/trinodb/trino/pull/3564", "timeline": [{"oid": "671ebf093999451aee100ba35ebbef725060e17c", "url": "https://github.com/trinodb/trino/commit/671ebf093999451aee100ba35ebbef725060e17c", "message": "Verify support for correlation during analysis", "committedDate": "2020-04-28T03:45:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTE3NQ==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416415175", "bodyText": "This is very generic name, however I can't think of any better though...", "author": "kokosing", "createdAt": "2020-04-28T08:08:16Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Correlation.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.analyzer;\n+\n+public enum Correlation", "originalCommit": "671ebf093999451aee100ba35ebbef725060e17c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNDM5Mw==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r417434393", "bodyText": "Renamed to CorrelationSupport", "author": "martint", "createdAt": "2020-04-29T16:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/analyzer/Correlation.java b/presto-main/src/main/java/io/prestosql/sql/analyzer/CorrelationSupport.java\nsimilarity index 95%\nrename from presto-main/src/main/java/io/prestosql/sql/analyzer/Correlation.java\nrename to presto-main/src/main/java/io/prestosql/sql/analyzer/CorrelationSupport.java\nindex abac8e7604..3f0e9c61d2 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/analyzer/Correlation.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/analyzer/CorrelationSupport.java\n\n@@ -13,7 +13,7 @@\n  */\n package io.prestosql.sql.analyzer;\n \n-public enum Correlation\n+public enum CorrelationSupport\n {\n     ALLOWED,\n     DISALLOWED\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNjU0Nw==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416416547", "bodyText": "Is it DISALLOWED because planner cannot handle them or ANSI SQL disallows such queries? I think we need to distinguish these two situations with different error messages.", "author": "kokosing", "createdAt": "2020-04-28T08:10:33Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1450,7 +1455,7 @@ else if (node.getType() == FULL) {\n                 Expression expression = ((JoinOn) criteria).getExpression();\n \n                 // need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n-                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output);\n+                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? Correlation.ALLOWED : Correlation.DISALLOWED);", "originalCommit": "671ebf093999451aee100ba35ebbef725060e17c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyODMzNQ==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416628335", "bodyText": "It\u2019s disallowed from a planner/analyzer perspective. I\u2019m not aware of any case that\u2019s disallowed by the spec", "author": "martint", "createdAt": "2020-04-28T13:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNjU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java\nindex 7d726635d6..7e4c94ddd0 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java\n\n@@ -1454,8 +1454,9 @@ class StatementAnalyzer\n             if (criteria instanceof JoinOn) {\n                 Expression expression = ((JoinOn) criteria).getExpression();\n \n-                // need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n-                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? Correlation.ALLOWED : Correlation.DISALLOWED);\n+                // Need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n+                // Correlations are only currently support in the join criteria for INNER joins\n+                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? CorrelationSupport.ALLOWED : CorrelationSupport.DISALLOWED);\n                 Type clauseType = expressionAnalysis.getType(expression);\n                 if (!clauseType.equals(BOOLEAN)) {\n                     if (!clauseType.equals(UNKNOWN)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MDk0Nw==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416870947", "bodyText": "inline this constructor, there is just 1 call site left", "author": "findepi", "createdAt": "2020-04-28T19:34:45Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -213,6 +214,20 @@ public ExpressionAnalyzer(\n             Map<NodeRef<Parameter>, Expression> parameters,\n             WarningCollector warningCollector,\n             boolean isDescribe)\n+    {\n+        this(metadata, accessControl, statementAnalyzerFactory, session, symbolTypes, parameters, warningCollector, isDescribe, Correlation.ALLOWED);", "originalCommit": "671ebf093999451aee100ba35ebbef725060e17c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java b/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\nindex 88b0a9c895..af8398dd95 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\n\n@@ -203,20 +203,7 @@ public class ExpressionAnalyzer\n     private final Map<NodeRef<Parameter>, Expression> parameters;\n     private final WarningCollector warningCollector;\n     private final TypeCoercion typeCoercion;\n-    private final Correlation correlation;\n-\n-    public ExpressionAnalyzer(\n-            Metadata metadata,\n-            AccessControl accessControl,\n-            Function<Node, StatementAnalyzer> statementAnalyzerFactory,\n-            Session session,\n-            TypeProvider symbolTypes,\n-            Map<NodeRef<Parameter>, Expression> parameters,\n-            WarningCollector warningCollector,\n-            boolean isDescribe)\n-    {\n-        this(metadata, accessControl, statementAnalyzerFactory, session, symbolTypes, parameters, warningCollector, isDescribe, Correlation.ALLOWED);\n-    }\n+    private final CorrelationSupport correlationSupport;\n \n     public ExpressionAnalyzer(\n             Metadata metadata,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTIxOQ==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416871219", "bodyText": "\"correlation\" sounds like an actual occurances of a correlation (like correlated identifier(s))\nit's not meaningful.\nif we cannot find a better name, boolean correlationAllowed would be better", "author": "findepi", "createdAt": "2020-04-28T19:35:18Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -213,6 +214,20 @@ public ExpressionAnalyzer(\n             Map<NodeRef<Parameter>, Expression> parameters,\n             WarningCollector warningCollector,\n             boolean isDescribe)\n+    {\n+        this(metadata, accessControl, statementAnalyzerFactory, session, symbolTypes, parameters, warningCollector, isDescribe, Correlation.ALLOWED);\n+    }\n+\n+    public ExpressionAnalyzer(\n+            Metadata metadata,\n+            AccessControl accessControl,\n+            Function<Node, StatementAnalyzer> statementAnalyzerFactory,\n+            Session session,\n+            TypeProvider symbolTypes,\n+            Map<NodeRef<Parameter>, Expression> parameters,\n+            WarningCollector warningCollector,\n+            boolean isDescribe,\n+            Correlation correlation)", "originalCommit": "671ebf093999451aee100ba35ebbef725060e17c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNTc1Mg==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r417435752", "bodyText": "Renamed to correlationSupport. I chose not to use a boolean because it's easy to confuse with isDescribe above and very error prone.", "author": "martint", "createdAt": "2020-04-29T16:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java b/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\nindex 88b0a9c895..af8398dd95 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\n\n@@ -203,20 +203,7 @@ public class ExpressionAnalyzer\n     private final Map<NodeRef<Parameter>, Expression> parameters;\n     private final WarningCollector warningCollector;\n     private final TypeCoercion typeCoercion;\n-    private final Correlation correlation;\n-\n-    public ExpressionAnalyzer(\n-            Metadata metadata,\n-            AccessControl accessControl,\n-            Function<Node, StatementAnalyzer> statementAnalyzerFactory,\n-            Session session,\n-            TypeProvider symbolTypes,\n-            Map<NodeRef<Parameter>, Expression> parameters,\n-            WarningCollector warningCollector,\n-            boolean isDescribe)\n-    {\n-        this(metadata, accessControl, statementAnalyzerFactory, session, symbolTypes, parameters, warningCollector, isDescribe, Correlation.ALLOWED);\n-    }\n+    private final CorrelationSupport correlationSupport;\n \n     public ExpressionAnalyzer(\n             Metadata metadata,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3Mzg1Nw==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416873857", "bodyText": "looks like handleUncorrelatedSubqueries and handleSubqueries can now be merged into single method", "author": "findepi", "createdAt": "2020-04-28T19:39:52Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/SubqueryPlanner.java", "diffHunk": "@@ -103,30 +101,25 @@\n     public PlanBuilder handleSubqueries(PlanBuilder builder, Collection<Expression> expressions, Node node)\n     {\n         for (Expression expression : expressions) {\n-            builder = handleSubqueries(builder, expression, node, true);\n+            builder = handleSubqueries(builder, expression, node);\n         }\n         return builder;\n     }\n \n     public PlanBuilder handleUncorrelatedSubqueries(PlanBuilder builder, Collection<Expression> expressions, Node node)\n     {\n         for (Expression expression : expressions) {\n-            builder = handleSubqueries(builder, expression, node, false);\n+            builder = handleSubqueries(builder, expression, node);", "originalCommit": "671ebf093999451aee100ba35ebbef725060e17c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/planner/SubqueryPlanner.java b/presto-main/src/main/java/io/prestosql/sql/planner/SubqueryPlanner.java\nindex 218955c52e..e520d028ac 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/planner/SubqueryPlanner.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/planner/SubqueryPlanner.java\n\n@@ -106,14 +106,6 @@ class SubqueryPlanner\n         return builder;\n     }\n \n-    public PlanBuilder handleUncorrelatedSubqueries(PlanBuilder builder, Collection<Expression> expressions, Node node)\n-    {\n-        for (Expression expression : expressions) {\n-            builder = handleSubqueries(builder, expression, node);\n-        }\n-        return builder;\n-    }\n-\n     public PlanBuilder handleSubqueries(PlanBuilder builder, Expression expression, Node node)\n     {\n         builder = appendInPredicateApplyNodes(builder, collectInPredicateSubqueries(expression, node), node);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3NTAxOQ==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416875019", "bodyText": "it's nice this code line has a (preexisting) comment, but please  add a comment how the processing depends on the join type", "author": "findepi", "createdAt": "2020-04-28T19:41:46Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1450,7 +1455,7 @@ else if (node.getType() == FULL) {\n                 Expression expression = ((JoinOn) criteria).getExpression();\n \n                 // need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n-                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output);\n+                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? Correlation.ALLOWED : Correlation.DISALLOWED);", "originalCommit": "671ebf093999451aee100ba35ebbef725060e17c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java\nindex 7d726635d6..7e4c94ddd0 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java\n\n@@ -1454,8 +1454,9 @@ class StatementAnalyzer\n             if (criteria instanceof JoinOn) {\n                 Expression expression = ((JoinOn) criteria).getExpression();\n \n-                // need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n-                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? Correlation.ALLOWED : Correlation.DISALLOWED);\n+                // Need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n+                // Correlations are only currently support in the join criteria for INNER joins\n+                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? CorrelationSupport.ALLOWED : CorrelationSupport.DISALLOWED);\n                 Type clauseType = expressionAnalysis.getType(expression);\n                 if (!clauseType.equals(BOOLEAN)) {\n                     if (!clauseType.equals(UNKNOWN)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3NTgzMg==", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416875832", "bodyText": "\"from outer scope\" ?", "author": "findepi", "createdAt": "2020-04-28T19:43:16Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -411,6 +427,10 @@ protected Type visitIdentifier(Identifier node, StackableAstVisitorContext<Conte\n \n         private Type handleResolvedField(Expression node, ResolvedField resolvedField, StackableAstVisitorContext<Context> context)\n         {\n+            if (!resolvedField.isLocal() && correlation != Correlation.ALLOWED) {\n+                throw semanticException(NOT_SUPPORTED, node, \"Reference to column '%s' in outer scope not allowed in this context\", node);", "originalCommit": "671ebf093999451aee100ba35ebbef725060e17c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java b/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\nindex 88b0a9c895..af8398dd95 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java\n\n@@ -427,8 +414,8 @@ public class ExpressionAnalyzer\n \n         private Type handleResolvedField(Expression node, ResolvedField resolvedField, StackableAstVisitorContext<Context> context)\n         {\n-            if (!resolvedField.isLocal() && correlation != Correlation.ALLOWED) {\n-                throw semanticException(NOT_SUPPORTED, node, \"Reference to column '%s' in outer scope not allowed in this context\", node);\n+            if (!resolvedField.isLocal() && correlationSupport != CorrelationSupport.ALLOWED) {\n+                throw semanticException(NOT_SUPPORTED, node, \"Reference to column '%s' from outer scope not allowed in this context\", node);\n             }\n \n             return handleResolvedField(node, FieldId.from(resolvedField), resolvedField.getField(), context);\n"}}, {"oid": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "url": "https://github.com/trinodb/trino/commit/226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "message": "Verify support for correlation during analysis", "committedDate": "2020-04-29T18:15:10Z", "type": "commit"}, {"oid": "226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "url": "https://github.com/trinodb/trino/commit/226e7fe330e6dbf5c11b6f4431f3a368e424f5f0", "message": "Verify support for correlation during analysis", "committedDate": "2020-04-29T18:15:10Z", "type": "forcePushed"}]}