{"pr_number": 4224, "pr_title": "Add support for lazy dynamic filters on coordinator", "pr_createdAt": "2020-06-25T15:18:50Z", "pr_url": "https://github.com/trinodb/trino/pull/4224", "timeline": [{"oid": "e2730efef2249c4cfbeea59f45bdd6be1ed39e15", "url": "https://github.com/trinodb/trino/commit/e2730efef2249c4cfbeea59f45bdd6be1ed39e15", "message": "Add support for lazy dynamic filters on coordinator", "committedDate": "2020-07-09T14:33:58Z", "type": "commit"}, {"oid": "0018542180c57962c3665fd23d59bd581eee503e", "url": "https://github.com/trinodb/trino/commit/0018542180c57962c3665fd23d59bd581eee503e", "message": "Improve DynamicFilterService concurrency", "committedDate": "2020-07-09T14:33:58Z", "type": "commit"}, {"oid": "dbfd69957ddce4a31002a1c6d191c8abab8ccf80", "url": "https://github.com/trinodb/trino/commit/dbfd69957ddce4a31002a1c6d191c8abab8ccf80", "message": "Allow only repartitioned dynamic filters to be lazy\n\nCurrently for broadcast join there will be a deadlock when:\n\n1. build side source tasks cannot flush their output buffers\n2. broadcast join probe side source cannot schedule more splits\n\nCurrently such deadlock is detected and resolved by fixing task-to-node assignments.\nThis allows build side tasks to finish and flush their output buffers.\n\nIf probe side was waiting for dynamic fitlers to materialize such\ndeadlock would be permanent since netiher splits would be generated\nnor DF would be collected.", "committedDate": "2020-07-09T14:33:58Z", "type": "commit"}, {"oid": "dbfd69957ddce4a31002a1c6d191c8abab8ccf80", "url": "https://github.com/trinodb/trino/commit/dbfd69957ddce4a31002a1c6d191c8abab8ccf80", "message": "Allow only repartitioned dynamic filters to be lazy\n\nCurrently for broadcast join there will be a deadlock when:\n\n1. build side source tasks cannot flush their output buffers\n2. broadcast join probe side source cannot schedule more splits\n\nCurrently such deadlock is detected and resolved by fixing task-to-node assignments.\nThis allows build side tasks to finish and flush their output buffers.\n\nIf probe side was waiting for dynamic fitlers to materialize such\ndeadlock would be permanent since netiher splits would be generated\nnor DF would be collected.", "committedDate": "2020-07-09T14:33:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MzkwMw==", "url": "https://github.com/trinodb/trino/pull/4224#discussion_r452363903", "bodyText": "Is this used anywhere other than in tests?", "author": "martint", "createdAt": "2020-07-09T17:04:26Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/DynamicFilter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import io.prestosql.spi.predicate.TupleDomain;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+public interface DynamicFilter\n+{\n+    CompletableFuture<?> NOT_BLOCKED = CompletableFuture.completedFuture(null);\n+\n+    DynamicFilter EMPTY = new DynamicFilter()\n+    {\n+        @Override\n+        public CompletableFuture<?> isBlocked()\n+        {\n+            return NOT_BLOCKED;\n+        }\n+\n+        @Override\n+        public boolean isComplete()\n+        {\n+            return true;\n+        }\n+\n+        @Override\n+        public TupleDomain<ColumnHandle> getCurrentPredicate()\n+        {\n+            return TupleDomain.all();  // no filtering\n+        }\n+    };\n+\n+    /**\n+     * Block until dynamic filter is narrowed down.\n+     * Dynamic filter might be narrowed down multiple times during query runtime.\n+     */\n+    CompletableFuture<?> isBlocked();", "originalCommit": "e2730efef2249c4cfbeea59f45bdd6be1ed39e15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNDU2OQ==", "url": "https://github.com/trinodb/trino/pull/4224#discussion_r452424569", "bodyText": "Is this used anywhere other than in tests?\n\nNot yet.", "author": "sopel39", "createdAt": "2020-07-09T18:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MzkwMw=="}], "type": "inlineReview", "revised_code": null}]}