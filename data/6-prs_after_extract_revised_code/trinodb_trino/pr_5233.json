{"pr_number": 5233, "pr_title": "Adding product test for aborted transaction in Hive ACID", "pr_createdAt": "2020-09-20T12:27:38Z", "pr_url": "https://github.com/trinodb/trino/pull/5233", "timeline": [{"oid": "07d2b02696b1096e530388f58d6951af9e2d34c6", "url": "https://github.com/trinodb/trino/commit/07d2b02696b1096e530388f58d6951af9e2d34c6", "message": "addessing review comments", "committedDate": "2020-09-28T06:34:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjUxMg==", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495746512", "bodyText": "static import onHive", "author": "losipiuk", "createdAt": "2020-09-28T07:42:37Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -40,40 +38,32 @@ private ACIDTestHelper()\n     {\n     }\n \n-    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n-    // 1. Open Txn\n-    // 2. Rollback Txn\n-    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n-    // 4. Insert something to it which will create a file for this table\n+    // Simulates an aborted transaction which leaves behind a file in a table partition with some data\n     public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n             throws TException\n     {\n         ThriftHiveMetastoreClient client = createMetastoreClient();\n         try {\n-            // Step 1\n             long transaction = client.openTransaction(\"test\");\n \n-            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n-            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n-            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+            long writeId = client.allocateTableWriteIds(database, tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n \n-            // Step 2\n-            client.rollbackTransaction(transaction);\n+            // Rollback transaction which leaves behind a delta directory\n+            client.abortTransaction(transaction);\n \n-            // Step 3\n+            // Create a new external table with location as the given partition location + delta directory for the rolled back transaction\n             Table table = client.getTableWithCapabilities(database, tableName);\n             String tableLocation = table.getSd().getLocation();\n             String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n             String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n-            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n \n             String tmpTableName = getNewTableName();\n-            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+            QueryExecutors.onHive().executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) STORED AS ORC LOCATION '%s'\", tmpTableName, deltaLocation));\n \n-            // Step 4\n-            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n-            assertThat(hiveQueryExecutor.executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n-            hiveQueryExecutor.executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n+            // Insert data to the external table\n+            QueryExecutors.onHive().executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));", "originalCommit": "07d2b02696b1096e530388f58d6951af9e2d34c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08c366bca6be37955846655275591f9d32d03585", "chunk": "diff --git a/presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java b/presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java\ndeleted file mode 100644\nindex 4a13bcf283..0000000000\n--- a/presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java\n+++ /dev/null\n\n@@ -1,91 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.prestosql.tests.hive;\n-\n-import com.google.common.net.HostAndPort;\n-import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n-import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n-import io.prestosql.plugin.hive.metastore.thrift.Transport;\n-import io.prestosql.tests.utils.QueryExecutors;\n-import org.apache.hadoop.hive.metastore.api.Table;\n-import org.apache.hadoop.hive.ql.io.AcidUtils;\n-import org.apache.thrift.TException;\n-\n-import java.net.URI;\n-import java.util.Collections;\n-import java.util.Optional;\n-import java.util.UUID;\n-\n-import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n-import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n-\n-public final class ACIDTestHelper\n-{\n-    private static final String LOCALHOST = \"localhost\";\n-\n-    private ACIDTestHelper()\n-    {\n-    }\n-\n-    // Simulates an aborted transaction which leaves behind a file in a table partition with some data\n-    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n-            throws TException\n-    {\n-        ThriftHiveMetastoreClient client = createMetastoreClient();\n-        try {\n-            long transaction = client.openTransaction(\"test\");\n-\n-            long writeId = client.allocateTableWriteIds(database, tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n-\n-            // Rollback transaction which leaves behind a delta directory\n-            client.abortTransaction(transaction);\n-\n-            // Create a new external table with location as the given partition location + delta directory for the rolled back transaction\n-            Table table = client.getTableWithCapabilities(database, tableName);\n-            String tableLocation = table.getSd().getLocation();\n-            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n-            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n-\n-            String tmpTableName = getNewTableName();\n-            QueryExecutors.onHive().executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) STORED AS ORC LOCATION '%s'\", tmpTableName, deltaLocation));\n-\n-            // Insert data to the external table\n-            QueryExecutors.onHive().executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n-            assertThat(QueryExecutors.onHive().executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n-            QueryExecutors.onHive().executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n-        }\n-        finally {\n-            client.close();\n-        }\n-    }\n-\n-    private static String getNewTableName()\n-    {\n-        return \"table_\" + UUID.randomUUID().toString().replace('-', '_');\n-    }\n-\n-    private static ThriftHiveMetastoreClient createMetastoreClient()\n-            throws TException\n-    {\n-        URI metastore = URI.create(\"thrift://hadoop-master:9083\");\n-        return new ThriftHiveMetastoreClient(\n-                Transport.create(\n-                        HostAndPort.fromParts(metastore.getHost(), metastore.getPort()),\n-                        Optional.empty(),\n-                        Optional.empty(),\n-                        10000,\n-                        new NoHiveMetastoreAuthentication(),\n-                        Optional.empty()), LOCALHOST);\n-    }\n-}\n"}}, {"oid": "08c366bca6be37955846655275591f9d32d03585", "url": "https://github.com/trinodb/trino/commit/08c366bca6be37955846655275591f9d32d03585", "message": "Added product test to verify Presto doesn't read aborted transactions of a transactional table.", "committedDate": "2020-10-07T05:28:43Z", "type": "commit"}, {"oid": "08c366bca6be37955846655275591f9d32d03585", "url": "https://github.com/trinodb/trino/commit/08c366bca6be37955846655275591f9d32d03585", "message": "Added product test to verify Presto doesn't read aborted transactions of a transactional table.", "committedDate": "2020-10-07T05:28:43Z", "type": "forcePushed"}]}