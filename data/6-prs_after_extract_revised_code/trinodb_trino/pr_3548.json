{"pr_number": 3548, "pr_title": "Tests' cleanup", "pr_createdAt": "2020-04-25T20:53:05Z", "pr_url": "https://github.com/trinodb/trino/pull/3548", "timeline": [{"oid": "f59dc4968c8d0a1477a8eb03776344766449f86a", "url": "https://github.com/trinodb/trino/commit/f59dc4968c8d0a1477a8eb03776344766449f86a", "message": "Cleanup Throwable declarations in benchmarks", "committedDate": "2020-04-25T20:35:19Z", "type": "commit"}, {"oid": "5eccdc2e672a1f72012e353b44df482362b03046", "url": "https://github.com/trinodb/trino/commit/5eccdc2e672a1f72012e353b44df482362b03046", "message": "Remove redundant throws declarations", "committedDate": "2020-04-25T20:52:50Z", "type": "commit"}, {"oid": "d155de19536df7d0423b13ed27b40d9bb708aea0", "url": "https://github.com/trinodb/trino/commit/d155de19536df7d0423b13ed27b40d9bb708aea0", "message": "Inline @DataProvider\n\n`@DataProvider` makes it harder to locate a failing test cases when\nthere are many test cases.", "committedDate": "2020-04-25T20:52:50Z", "type": "commit"}, {"oid": "5a4bc767b38011e865db43154da6118fcf50ba97", "url": "https://github.com/trinodb/trino/commit/5a4bc767b38011e865db43154da6118fcf50ba97", "message": "Simplify test code", "committedDate": "2020-04-25T20:52:50Z", "type": "commit"}, {"oid": "d5db67235d827be36b692e9ef773a12770d55f2e", "url": "https://github.com/trinodb/trino/commit/d5db67235d827be36b692e9ef773a12770d55f2e", "message": "Split test method", "committedDate": "2020-04-25T20:52:50Z", "type": "commit"}, {"oid": "6dcecfec8c73783ecb3cfeef2c5e0f3db4ab658c", "url": "https://github.com/trinodb/trino/commit/6dcecfec8c73783ecb3cfeef2c5e0f3db4ab658c", "message": "Add null test case", "committedDate": "2020-04-25T20:52:50Z", "type": "commit"}, {"oid": "0706fe6e152c650d112a5648a1a80824833d85fb", "url": "https://github.com/trinodb/trino/commit/0706fe6e152c650d112a5648a1a80824833d85fb", "message": "Simplify trust setup", "committedDate": "2020-04-25T21:00:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4MjkyMw==", "url": "https://github.com/trinodb/trino/pull/3548#discussion_r415382923", "bodyText": "Maybe put the 13 into a constant so that it's clear where it comes from, especially since it's used further down.", "author": "martint", "createdAt": "2020-04-26T19:31:16Z", "path": "presto-parquet/src/test/java/io/prestosql/parquet/reader/TestMetadataReader.java", "diffHunk": "@@ -130,95 +130,97 @@ public void testReadStatsBinary(Optional<String> fileCreatedBy)\n     public void testReadStatsBinaryUtf8OldWriter()\n     {\n         // [, bc\u00e9]: min is empty, max starts with ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, new byte[0], \"bc\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, new byte[0], \"bc\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, new byte[0], \"bc\u00e9\".getBytes(UTF_8), 13, null, null);\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"\", \"bc\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"\", \"bc\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"\", \"bc\u00e9\", null, null);\n \n         // [, \u00e9bc]: min is empty, max starts with non-ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, new byte[0], \"\u00e9bc\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, new byte[0], \"\u00e9bc\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, new byte[0], \"\u00e9bc\".getBytes(UTF_8), 13, null, null);\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"\", \"\u00e9bc\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"\", \"\u00e9bc\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"\", \"\u00e9bc\", null, null);\n \n         // [aa, b\u00e9]: no common prefix, first different are both ASCII, min is all ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"aa\".getBytes(UTF_8), \"b\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"aa\".getBytes(UTF_8), \"b\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"aa\".getBytes(UTF_8), \"b\u00e9\".getBytes(UTF_8), 13, \"aa\".getBytes(UTF_8), \"c\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"aa\", \"b\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"aa\", \"b\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"aa\", \"b\u00e9\", \"aa\", \"c\");\n \n         // [abcd, abcdN]: common prefix, not only ASCII, one prefix of the other, last common ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"abcd\".getBytes(UTF_8), \"abcdN\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"abcd\".getBytes(UTF_8), \"abcdN\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"abcd\".getBytes(UTF_8), \"abcdN\".getBytes(UTF_8), 13, \"abcd\".getBytes(UTF_8), \"abce\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"abcd\", \"abcdN\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"abcd\", \"abcdN\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"abcd\", \"abcdN\", \"abcd\", \"abce\");\n \n         // [abc\u00e9, abc\u00e9N]: common prefix, not only ASCII, one prefix of the other, last common non ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"abc\u00e9\".getBytes(UTF_8), \"abc\u00e9N\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"abc\u00e9\".getBytes(UTF_8), \"abc\u00e9N\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"abc\u00e9\".getBytes(UTF_8), \"abc\u00e9N\".getBytes(UTF_8), 13, \"abc\u00e9\".getBytes(UTF_8), \"abd\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"abc\u00e9\", \"abc\u00e9N\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"abc\u00e9\", \"abc\u00e9N\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"abc\u00e9\", \"abc\u00e9N\", \"abc\u00e9\", \"abd\");\n \n         // [abc\u00e9M, abc\u00e9N]: common prefix, not only ASCII, first different are both ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"abc\u00e9M\".getBytes(UTF_8), \"abc\u00e9N\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"abc\u00e9M\".getBytes(UTF_8), \"abc\u00e9N\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"abc\u00e9M\".getBytes(UTF_8), \"abc\u00e9N\".getBytes(UTF_8), 13, \"abc\u00e9M\".getBytes(UTF_8), \"abc\u00e9O\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"abc\u00e9M\", \"abc\u00e9N\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"abc\u00e9M\", \"abc\u00e9N\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"abc\u00e9M\", \"abc\u00e9N\", \"abc\u00e9M\", \"abc\u00e9O\");\n \n         // [abc\u00e9Mab, abc\u00e9Nxy]: common prefix, not only ASCII, first different are both ASCII, more characters afterwards\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"abc\u00e9Mab\".getBytes(UTF_8), \"abc\u00e9Nxy\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"abc\u00e9Mab\".getBytes(UTF_8), \"abc\u00e9Nxy\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"abc\u00e9Mab\".getBytes(UTF_8), \"abc\u00e9Nxy\".getBytes(UTF_8), 13, \"abc\u00e9Mab\".getBytes(UTF_8), \"abc\u00e9O\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"abc\u00e9Mab\", \"abc\u00e9Nxy\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"abc\u00e9Mab\", \"abc\u00e9Nxy\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"abc\u00e9Mab\", \"abc\u00e9Nxy\", \"abc\u00e9Mab\", \"abc\u00e9O\");\n \n         // [abc\u00e9M, abc\u00e9\\u00f7]: common prefix, not only ASCII, first different are both ASCII, but need to be chopped off (127)\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"abc\u00e9M\".getBytes(UTF_8), \"abc\u00e9\\u00f7\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"abc\u00e9M\".getBytes(UTF_8), \"abc\u00e9\\u00f7\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"abc\u00e9M\".getBytes(UTF_8), \"abc\u00e9\\u00f7\".getBytes(UTF_8), 13, \"abc\u00e9M\".getBytes(UTF_8), \"abd\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"abc\u00e9M\", \"abc\u00e9\\u00f7\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"abc\u00e9M\", \"abc\u00e9\\u00f7\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"abc\u00e9M\", \"abc\u00e9\\u00f7\", \"abc\u00e9M\", \"abd\");\n \n         // [abc\\u007f\u00e9, bcd\\u007f\u00e9]: no common prefix, first different are both ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"abc\\u007f\u00e9\".getBytes(UTF_8), \"bcd\\u007f\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"abc\\u007f\u00e9\".getBytes(UTF_8), \"bcd\\u007f\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"abc\\u007f\u00e9\".getBytes(UTF_8), \"bcd\\u007f\u00e9\".getBytes(UTF_8), 13, \"abc\\u007f\".getBytes(UTF_8), \"c\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"abc\\u007f\u00e9\", \"bcd\\u007f\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"abc\\u007f\u00e9\", \"bcd\\u007f\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"abc\\u007f\u00e9\", \"bcd\\u007f\u00e9\", \"abc\\u007f\", \"c\");\n \n         // [\u00e9, a]: no common prefix, first different are not both ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"\u00e9\".getBytes(UTF_8), \"a\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"\u00e9\".getBytes(UTF_8), \"a\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"\u00e9\".getBytes(UTF_8), \"a\".getBytes(UTF_8), 13, null, null);\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"\u00e9\", \"a\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"\u00e9\", \"a\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"\u00e9\", \"a\", null, null);\n \n         // [\u00e9, \u00ea]: no common prefix, first different are both not ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"\u00e9\".getBytes(UTF_8), \"\u00ea\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"\u00e9\".getBytes(UTF_8), \"\u00ea\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"\u00e9\".getBytes(UTF_8), \"\u00ea\".getBytes(UTF_8), 13, null, null);\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"\u00e9\", \"\u00ea\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"\u00e9\", \"\u00ea\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"\u00e9\", \"\u00ea\", null, null);\n \n         // [a\u00e9, a\u00e9]: min = max (common prefix, first different are both not ASCII)\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"a\u00e9\".getBytes(UTF_8), \"a\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"a\u00e9\".getBytes(UTF_8), \"a\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"a\u00e9\".getBytes(UTF_8), \"a\u00e9\".getBytes(UTF_8), 13, \"a\u00e9\".getBytes(UTF_8), \"a\u00e9\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"a\u00e9\", \"a\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"a\u00e9\", \"a\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"a\u00e9\", \"a\u00e9\", \"a\u00e9\", \"a\u00e9\");\n \n         // [a\u00e9, b\u00e9]: no common prefix, first different are both ASCII\n-        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, 13, \"a\u00e9\".getBytes(UTF_8), \"b\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, 13, \"a\u00e9\".getBytes(UTF_8), \"b\u00e9\".getBytes(UTF_8), 13, null, null);\n-        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, 13, \"a\u00e9\".getBytes(UTF_8), \"b\u00e9\".getBytes(UTF_8), 13, \"a\".getBytes(UTF_8), \"c\".getBytes(UTF_8));\n+        testReadStatsBinaryUtf8OldWriter(NO_CREATED_BY, \"a\u00e9\", \"b\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR, \"a\u00e9\", \"b\u00e9\", null, null);\n+        testReadStatsBinaryUtf8OldWriter(PARQUET_MR_1_8, \"a\u00e9\", \"b\u00e9\", \"a\", \"c\");\n     }\n \n-    private void testReadStatsBinaryUtf8OldWriter(Optional<String> fileCreatedBy, int nullCount, byte[] min, byte[] max, int expectedNullCount, byte[] expectedMin, byte[] expectedMax)\n+    private void testReadStatsBinaryUtf8OldWriter(Optional<String> fileCreatedBy, String min, String max, String expectedMin, String expectedMax)\n     {\n         Statistics statistics = new Statistics();\n-        statistics.setNull_count(nullCount);\n-        statistics.setMin(min);\n-        statistics.setMax(max);\n+        statistics.setNull_count(13);", "originalCommit": "5a4bc767b38011e865db43154da6118fcf50ba97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM5MDczOA==", "url": "https://github.com/trinodb/trino/pull/3548#discussion_r415390738", "bodyText": "i will", "author": "findepi", "createdAt": "2020-04-26T20:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4MjkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM5MDk0Mg==", "url": "https://github.com/trinodb/trino/pull/3548#discussion_r415390942", "bodyText": "hm... i will not do it. It's like this in every other test method in this class.", "author": "findepi", "createdAt": "2020-04-26T20:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4MjkyMw=="}], "type": "inlineReview", "revised_code": null}]}