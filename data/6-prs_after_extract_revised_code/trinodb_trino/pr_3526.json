{"pr_number": 3526, "pr_title": "Ensure proper memory visibility in RubixConfigurationInitializer", "pr_createdAt": "2020-04-23T12:36:33Z", "pr_url": "https://github.com/trinodb/trino/pull/3526", "timeline": [{"oid": "3cf2d48ae299d37e81b205e205a92e52a37402ca", "url": "https://github.com/trinodb/trino/commit/3cf2d48ae299d37e81b205e205a92e52a37402ca", "message": "Ensure proper memory visibility in RubixConfigurationInitializer\n\nMaking RubixConfigurationInitializer.cacheNotReady volatile to ensure\nchanges made to instance variables before cacheNotReady was switched  to\nfalse are visible to thread calling out to initializeConfiguration.", "committedDate": "2020-04-23T12:32:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwMDQxNA==", "url": "https://github.com/trinodb/trino/pull/3526#discussion_r413800414", "bodyText": "Let's reverse this variable, call it cacheReady", "author": "sopel39", "createdAt": "2020-04-23T13:08:00Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -53,7 +53,7 @@\n     private final int dataTransferServerPort;\n \n     // Configs below are dependent on node joining the cluster\n-    private boolean cacheNotReady = true;\n+    private volatile boolean cacheNotReady = true;", "originalCommit": "3cf2d48ae299d37e81b205e205a92e52a37402ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwMTkwNg==", "url": "https://github.com/trinodb/trino/pull/3526#discussion_r413801906", "bodyText": "How long lived are Configuration objects. Is there a potential for race condition where Configuration will be set without cache for minutes (even though cache initialize a second after)?", "author": "sopel39", "createdAt": "2020-04-23T13:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwMDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwNzY0OA==", "url": "https://github.com/trinodb/trino/pull/3526#discussion_r413807648", "bodyText": "How long lived are Configuration objects. Is there a potential for race condition where Configuration will be set without cache for minutes (even though cache initialize a second after)?\n\nI think there is a chance for that. See #3525.\nSo there is a possiblity that this whole cacheReady flag will have to go away together with mutability of the class.", "author": "losipiuk", "createdAt": "2020-04-23T13:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwMDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgxOTY2Ng==", "url": "https://github.com/trinodb/trino/pull/3526#discussion_r413819666", "bodyText": "Ya, in worst case there is a possibility to have rubix enabled and initialized but not being used if all threadLocal configs are configured before rubix initialization. I think the DynamicConfigurationProvider approach mentioned there is the easiest one to solve this but it break the construct of only dynamic configurations injected using DynamicConfigurationProvider as rubix configs will be static once it is initialized.", "author": "shubhamtagra", "createdAt": "2020-04-23T14:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwMDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5NTM5MQ==", "url": "https://github.com/trinodb/trino/pull/3526#discussion_r413895391", "bodyText": "What is the downside of doing it that way? Technicaly speaking current Rubix config is dynamic. Just state change machine is simple :)", "author": "losipiuk", "createdAt": "2020-04-23T15:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwMDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMDAyOA==", "url": "https://github.com/trinodb/trino/pull/3526#discussion_r414020028", "bodyText": "Not 100% sure but not everything is on DynamicConfigurationProvider so I guess there is a reason to be cautious about what we put there. One reason could be to minimize the number Configuration object we create, with dynamic configurations there will be a new copy every time Configuration is asked for which will be at least once for every split in a node. Rubix config is somewhere in between DynamicConfigurationProvider and the static ConfigurationInitializers, it is dynamic until initialized and after that it is static.", "author": "shubhamtagra", "createdAt": "2020-04-23T18:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwMDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4OTE1NQ==", "url": "https://github.com/trinodb/trino/pull/3526#discussion_r425089155", "bodyText": "I think there are 2 approaches here:\n\nWe let queries run without caching until Rubix is initialized. Then we need to put initialization as part of DynamicConfigurationProvider. I don't think performance penalty is big looking at getFileSystem method callers.\nWe fail any request to getFileSystem until Rubix is initialized. Maybe we could make that check part of ConfigurationProvider.\n\nIMO 1) is safer as new nodes can join existing cluster and queries shouldn't fail once Presto is marked as ready", "author": "sopel39", "createdAt": "2020-05-14T12:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwMDQxNA=="}], "type": "inlineReview", "revised_code": null}]}