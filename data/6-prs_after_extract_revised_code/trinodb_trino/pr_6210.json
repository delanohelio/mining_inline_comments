{"pr_number": 6210, "pr_title": "add option to configure s3 mappings provider", "pr_createdAt": "2020-12-04T17:31:13Z", "pr_url": "https://github.com/trinodb/trino/pull/6210", "timeline": [{"oid": "9de82db1874140a8819752c6c254b12675271899", "url": "https://github.com/trinodb/trino/commit/9de82db1874140a8819752c6c254b12675271899", "message": "add configuration and tests", "committedDate": "2021-04-07T13:40:40Z", "type": "forcePushed"}, {"oid": "a63d962213616ddeaf63f61dc875c9acad8dca0b", "url": "https://github.com/trinodb/trino/commit/a63d962213616ddeaf63f61dc875c9acad8dca0b", "message": "Merge remote-tracking branch 'origin/master' into feature/configurable-s3-mappings-provider", "committedDate": "2021-04-08T08:17:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYwODAxNQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620608015", "bodyText": "Configs are mutable (they are beans in order to use the Bean Validation framework), so we always copy out the values into final fields in the constructor, along with null checks, etc.", "author": "electrum", "createdAt": "2021-04-26T20:01:12Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.json.ObjectMapperProvider;\n+\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final S3SecurityMappingConfig config;\n+\n+    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.config = config;", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex 79f93b5612..48af9a51af 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,49 +13,35 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.airlift.json.ObjectMapperProvider;\n+import io.trino.plugin.base.util.JsonUtils;\n \n import java.util.function.Supplier;\n \n-import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public abstract class S3SecurityMappingsProvider\n         implements Supplier<S3SecurityMappings>\n {\n-    protected final S3SecurityMappingConfig config;\n+    protected final String jsonPointer;\n \n-    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n     {\n-        this.config = config;\n+        this.jsonPointer = requireNonNull(config.getJsonPointer());\n     }\n \n     protected S3SecurityMappings parse(String jsonString)\n     {\n-        try {\n-            ObjectMapper mapper = new ObjectMapperProvider().get()\n-                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n-            JsonNode node = mapper.readTree(jsonString);\n-            JsonNode mappingsNode = node.at(config.getJSONPointer());\n-            return mapper.treeToValue(mappingsNode, S3SecurityMappings.class);\n-        }\n-        catch (JsonProcessingException ex) {\n-            throw new IllegalArgumentException(format(\"Could not parse json input string '%s' as s3 security mappings\", jsonString));\n-        }\n+        JsonNode node = JsonUtils.parseJson(jsonString);\n+        JsonNode mappingsNode = node.at(this.jsonPointer);\n+        return JsonUtils.jsonTreeToValue(mappingsNode, S3SecurityMappings.class);\n     }\n \n-    protected abstract String getRawJSONString();\n-\n-    public abstract boolean checkPreconditions();\n+    protected abstract String getRawJsonString();\n \n     @Override\n     public S3SecurityMappings get()\n     {\n-        return parse(getRawJSONString());\n+        return parse(getRawJsonString());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYxNDQwMA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620614400", "bodyText": "Can you add a method\npublic static JsonNode parseJson(byte[] jsonBytes);\nto io.trino.plugin.base.util.JsonUtils? You can make the ObjectMapper a constant in that utility class so that we share it across both methods (and importantly, ensure it is the same configuration).", "author": "electrum", "createdAt": "2021-04-26T20:11:06Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.json.ObjectMapperProvider;\n+\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final S3SecurityMappingConfig config;\n+\n+    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.config = config;\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            ObjectMapper mapper = new ObjectMapperProvider().get()", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex 79f93b5612..48af9a51af 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,49 +13,35 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.airlift.json.ObjectMapperProvider;\n+import io.trino.plugin.base.util.JsonUtils;\n \n import java.util.function.Supplier;\n \n-import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public abstract class S3SecurityMappingsProvider\n         implements Supplier<S3SecurityMappings>\n {\n-    protected final S3SecurityMappingConfig config;\n+    protected final String jsonPointer;\n \n-    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n     {\n-        this.config = config;\n+        this.jsonPointer = requireNonNull(config.getJsonPointer());\n     }\n \n     protected S3SecurityMappings parse(String jsonString)\n     {\n-        try {\n-            ObjectMapper mapper = new ObjectMapperProvider().get()\n-                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n-            JsonNode node = mapper.readTree(jsonString);\n-            JsonNode mappingsNode = node.at(config.getJSONPointer());\n-            return mapper.treeToValue(mappingsNode, S3SecurityMappings.class);\n-        }\n-        catch (JsonProcessingException ex) {\n-            throw new IllegalArgumentException(format(\"Could not parse json input string '%s' as s3 security mappings\", jsonString));\n-        }\n+        JsonNode node = JsonUtils.parseJson(jsonString);\n+        JsonNode mappingsNode = node.at(this.jsonPointer);\n+        return JsonUtils.jsonTreeToValue(mappingsNode, S3SecurityMappings.class);\n     }\n \n-    protected abstract String getRawJSONString();\n-\n-    public abstract boolean checkPreconditions();\n+    protected abstract String getRawJsonString();\n \n     @Override\n     public S3SecurityMappings get()\n     {\n-        return parse(getRawJSONString());\n+        return parse(getRawJsonString());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYxNzQ2MA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620617460", "bodyText": "Let's preserve the original exception, since it will give a hint why it failed. I'm not sure if we want to include the full JSON, but if so, we can put it at the end, so we don't split the error message\nthrow new IllegalArgumentException(\"Failed to parse JSON for S3 security mappings: \" + jsonString, e);", "author": "electrum", "createdAt": "2021-04-26T20:15:57Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.json.ObjectMapperProvider;\n+\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final S3SecurityMappingConfig config;\n+\n+    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.config = config;\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            ObjectMapper mapper = new ObjectMapperProvider().get()\n+                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n+            JsonNode node = mapper.readTree(jsonString);\n+            JsonNode mappingsNode = node.at(config.getJSONPointer());\n+            return mapper.treeToValue(mappingsNode, S3SecurityMappings.class);\n+        }\n+        catch (JsonProcessingException ex) {\n+            throw new IllegalArgumentException(format(\"Could not parse json input string '%s' as s3 security mappings\", jsonString));", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex 79f93b5612..48af9a51af 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,49 +13,35 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.airlift.json.ObjectMapperProvider;\n+import io.trino.plugin.base.util.JsonUtils;\n \n import java.util.function.Supplier;\n \n-import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public abstract class S3SecurityMappingsProvider\n         implements Supplier<S3SecurityMappings>\n {\n-    protected final S3SecurityMappingConfig config;\n+    protected final String jsonPointer;\n \n-    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n     {\n-        this.config = config;\n+        this.jsonPointer = requireNonNull(config.getJsonPointer());\n     }\n \n     protected S3SecurityMappings parse(String jsonString)\n     {\n-        try {\n-            ObjectMapper mapper = new ObjectMapperProvider().get()\n-                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n-            JsonNode node = mapper.readTree(jsonString);\n-            JsonNode mappingsNode = node.at(config.getJSONPointer());\n-            return mapper.treeToValue(mappingsNode, S3SecurityMappings.class);\n-        }\n-        catch (JsonProcessingException ex) {\n-            throw new IllegalArgumentException(format(\"Could not parse json input string '%s' as s3 security mappings\", jsonString));\n-        }\n+        JsonNode node = JsonUtils.parseJson(jsonString);\n+        JsonNode mappingsNode = node.at(this.jsonPointer);\n+        return JsonUtils.jsonTreeToValue(mappingsNode, S3SecurityMappings.class);\n     }\n \n-    protected abstract String getRawJSONString();\n-\n-    public abstract boolean checkPreconditions();\n+    protected abstract String getRawJsonString();\n \n     @Override\n     public S3SecurityMappings get()\n     {\n-        return parse(getRawJSONString());\n+        return parse(getRawJsonString());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYxNzg0Mw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620617843", "bodyText": "Nit: our code style only capitalizes the first letter, so name this getRawJsonString()", "author": "electrum", "createdAt": "2021-04-26T20:16:33Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.json.ObjectMapperProvider;\n+\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final S3SecurityMappingConfig config;\n+\n+    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.config = config;\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            ObjectMapper mapper = new ObjectMapperProvider().get()\n+                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n+            JsonNode node = mapper.readTree(jsonString);\n+            JsonNode mappingsNode = node.at(config.getJSONPointer());\n+            return mapper.treeToValue(mappingsNode, S3SecurityMappings.class);\n+        }\n+        catch (JsonProcessingException ex) {\n+            throw new IllegalArgumentException(format(\"Could not parse json input string '%s' as s3 security mappings\", jsonString));\n+        }\n+    }\n+\n+    protected abstract String getRawJSONString();", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex 79f93b5612..48af9a51af 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,49 +13,35 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.airlift.json.ObjectMapperProvider;\n+import io.trino.plugin.base.util.JsonUtils;\n \n import java.util.function.Supplier;\n \n-import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public abstract class S3SecurityMappingsProvider\n         implements Supplier<S3SecurityMappings>\n {\n-    protected final S3SecurityMappingConfig config;\n+    protected final String jsonPointer;\n \n-    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n     {\n-        this.config = config;\n+        this.jsonPointer = requireNonNull(config.getJsonPointer());\n     }\n \n     protected S3SecurityMappings parse(String jsonString)\n     {\n-        try {\n-            ObjectMapper mapper = new ObjectMapperProvider().get()\n-                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n-            JsonNode node = mapper.readTree(jsonString);\n-            JsonNode mappingsNode = node.at(config.getJSONPointer());\n-            return mapper.treeToValue(mappingsNode, S3SecurityMappings.class);\n-        }\n-        catch (JsonProcessingException ex) {\n-            throw new IllegalArgumentException(format(\"Could not parse json input string '%s' as s3 security mappings\", jsonString));\n-        }\n+        JsonNode node = JsonUtils.parseJson(jsonString);\n+        JsonNode mappingsNode = node.at(this.jsonPointer);\n+        return JsonUtils.jsonTreeToValue(mappingsNode, S3SecurityMappings.class);\n     }\n \n-    protected abstract String getRawJSONString();\n-\n-    public abstract boolean checkPreconditions();\n+    protected abstract String getRawJsonString();\n \n     @Override\n     public S3SecurityMappings get()\n     {\n-        return parse(getRawJSONString());\n+        return parse(getRawJsonString());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYxODA2OA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620618068", "bodyText": "Nit: put empty method on one line\nprivate S3SecurityMappingsProviderFactory() {}", "author": "electrum", "createdAt": "2021-04-26T20:16:57Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public class S3SecurityMappingsProviderFactory\n+{\n+    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n+\n+    private S3SecurityMappingsProviderFactory()", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java\ndeleted file mode 100644\nindex 793ef09b1e..0000000000\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java\n+++ /dev/null\n\n@@ -1,59 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.trino.plugin.hive.s3;\n-\n-import io.airlift.log.Logger;\n-\n-import java.util.List;\n-\n-public class S3SecurityMappingsProviderFactory\n-{\n-    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n-\n-    private S3SecurityMappingsProviderFactory()\n-    {}\n-\n-    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n-    {\n-        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n-        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n-    }\n-\n-    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n-    {\n-        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n-        long matching = getNumberOfMatchingProviders(config);\n-        if (matching == 0) {\n-            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +\n-                    \"Try to set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        else if (matching > 1) {\n-            throw new IllegalArgumentException(\"Ambiguous provider configuration in hive.s3.security-mapping. \" +\n-                    \"Please set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        else {\n-            return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).findFirst().get();\n-        }\n-    }\n-\n-    public static boolean isProviderAvailable(S3SecurityMappingConfig config)\n-    {\n-        long matching = getNumberOfMatchingProviders(config);\n-        if (matching > 1L) {\n-            log.warn(\"Ambiguous provider configuration in hive.s3.security-mapping. \" +\n-                    \"Please set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        return matching == 1L;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYyMDQ4Nw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620620487", "bodyText": "Move the default to the initializer and make this @NotNull\nprivate String jsonPointer = \"\";\n@NotNull\npublic String getJsonPointer()\n{\n    return jsonPointer;\n}", "author": "electrum", "createdAt": "2021-04-26T20:20:56Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -42,6 +44,32 @@ public S3SecurityMappingConfig setConfigFile(File configFile)\n         return this;\n     }\n \n+    public Optional<String> getConfigUri()\n+    {\n+        return Optional.ofNullable(configUri);\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.config-uri\")\n+    @ConfigDescription(\"URI returning the security mappings as JSON\")\n+    public S3SecurityMappingConfig setConfigUri(String configUri)\n+    {\n+        this.configUri = configUri;\n+        return this;\n+    }\n+\n+    public String getJSONPointer()\n+    {\n+        return jsonPointer == null ? \"\" : jsonPointer;", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\nindex cdcb143902..d4e877cc78 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\n\n@@ -15,56 +15,43 @@ package io.trino.plugin.hive.s3;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.configuration.validation.FileExists;\n import io.airlift.units.Duration;\n \n-import java.io.File;\n+import javax.validation.constraints.NotNull;\n+\n import java.util.Optional;\n \n public class S3SecurityMappingConfig\n {\n-    private File configFile;\n-    private String configUri;\n-    private String jsonPointer;\n+    private String configFilePath;\n+    private String jsonPointer = \"\";\n     private String roleCredentialName;\n     private String kmsKeyIdCredentialName;\n     private Duration refreshPeriod;\n     private String colonReplacement;\n \n-    public Optional<@FileExists File> getConfigFile()\n+    public Optional<String> getConfigFilePath()\n     {\n-        return Optional.ofNullable(configFile);\n+        return Optional.ofNullable(configFilePath);\n     }\n \n     @Config(\"hive.s3.security-mapping.config-file\")\n     @ConfigDescription(\"JSON configuration file containing security mappings\")\n-    public S3SecurityMappingConfig setConfigFile(File configFile)\n-    {\n-        this.configFile = configFile;\n-        return this;\n-    }\n-\n-    public Optional<String> getConfigUri()\n-    {\n-        return Optional.ofNullable(configUri);\n-    }\n-\n-    @Config(\"hive.s3.security-mapping.config-uri\")\n-    @ConfigDescription(\"URI returning the security mappings as JSON\")\n-    public S3SecurityMappingConfig setConfigUri(String configUri)\n+    public S3SecurityMappingConfig setConfigFilePath(String configFilePath)\n     {\n-        this.configUri = configUri;\n+        this.configFilePath = configFilePath;\n         return this;\n     }\n \n-    public String getJSONPointer()\n+    @NotNull\n+    public String getJsonPointer()\n     {\n-        return jsonPointer == null ? \"\" : jsonPointer;\n+        return jsonPointer;\n     }\n \n     @Config(\"hive.s3.security-mapping.json-pointer\")\n     @ConfigDescription(\"JSON pointer (RFC 6901) to mappings inside JSON config\")\n-    public S3SecurityMappingConfig setJSONPointer(String jsonPointer)\n+    public S3SecurityMappingConfig setJsonPointer(String jsonPointer)\n     {\n         this.jsonPointer = jsonPointer;\n         return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY1NzQ2NA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620657464", "bodyText": "This will cause isProviderAvailable() to fail (since this method cannot return zero)", "author": "electrum", "createdAt": "2021-04-26T21:19:37Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public class S3SecurityMappingsProviderFactory\n+{\n+    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n+\n+    private S3SecurityMappingsProviderFactory()\n+    {}\n+\n+    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n+    }\n+\n+    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        long matching = getNumberOfMatchingProviders(config);\n+        if (matching == 0) {\n+            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTAwNTkxNQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r621005915", "bodyText": "Sorry, I do not fully understand your comment. isProivderAvailable() should return a boolean indicating if a single, unambiguous provider can be created. Of course, we cannot force devs to call this method first before calling createMappingsProvider(...). Here I wanted to distinguish between ambigous configuration and no provider configured at all as different error causes.", "author": "clemensvonschwerin", "createdAt": "2021-04-27T08:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY1NzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTEzODEzMw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r621138133", "bodyText": "I guess it does not matter anyways, because I removed S3SecurityMappingsProviderFactory.java completely in favour of setup via airlift & binders as you suggested in your comment about using airlift's HttpClient.", "author": "clemensvonschwerin", "createdAt": "2021-04-27T11:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY1NzQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java\ndeleted file mode 100644\nindex 793ef09b1e..0000000000\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java\n+++ /dev/null\n\n@@ -1,59 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.trino.plugin.hive.s3;\n-\n-import io.airlift.log.Logger;\n-\n-import java.util.List;\n-\n-public class S3SecurityMappingsProviderFactory\n-{\n-    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n-\n-    private S3SecurityMappingsProviderFactory()\n-    {}\n-\n-    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n-    {\n-        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n-        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n-    }\n-\n-    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n-    {\n-        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n-        long matching = getNumberOfMatchingProviders(config);\n-        if (matching == 0) {\n-            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +\n-                    \"Try to set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        else if (matching > 1) {\n-            throw new IllegalArgumentException(\"Ambiguous provider configuration in hive.s3.security-mapping. \" +\n-                    \"Please set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        else {\n-            return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).findFirst().get();\n-        }\n-    }\n-\n-    public static boolean isProviderAvailable(S3SecurityMappingConfig config)\n-    {\n-        long matching = getNumberOfMatchingProviders(config);\n-        if (matching > 1L) {\n-            log.warn(\"Ambiguous provider configuration in hive.s3.security-mapping. \" +\n-                    \"Please set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        return matching == 1L;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY1OTc1Ng==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620659756", "bodyText": "You can move this into S3SecurityMappingConfig to have a better user experience\n@AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\npublic boolean atMostOneProvider()\n{\n    return getConfigFile() == null || getConfigUri() == null;\n}", "author": "electrum", "createdAt": "2021-04-26T21:23:30Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public class S3SecurityMappingsProviderFactory\n+{\n+    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n+\n+    private S3SecurityMappingsProviderFactory()\n+    {}\n+\n+    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n+    }\n+\n+    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        long matching = getNumberOfMatchingProviders(config);\n+        if (matching == 0) {\n+            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +\n+                    \"Try to set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n+        }\n+        else if (matching > 1) {\n+            throw new IllegalArgumentException(\"Ambiguous provider configuration in hive.s3.security-mapping. \" +", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java\ndeleted file mode 100644\nindex 793ef09b1e..0000000000\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java\n+++ /dev/null\n\n@@ -1,59 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.trino.plugin.hive.s3;\n-\n-import io.airlift.log.Logger;\n-\n-import java.util.List;\n-\n-public class S3SecurityMappingsProviderFactory\n-{\n-    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n-\n-    private S3SecurityMappingsProviderFactory()\n-    {}\n-\n-    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n-    {\n-        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n-        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n-    }\n-\n-    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n-    {\n-        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n-        long matching = getNumberOfMatchingProviders(config);\n-        if (matching == 0) {\n-            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +\n-                    \"Try to set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        else if (matching > 1) {\n-            throw new IllegalArgumentException(\"Ambiguous provider configuration in hive.s3.security-mapping. \" +\n-                    \"Please set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        else {\n-            return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).findFirst().get();\n-        }\n-    }\n-\n-    public static boolean isProviderAvailable(S3SecurityMappingConfig config)\n-    {\n-        long matching = getNumberOfMatchingProviders(config);\n-        if (matching > 1L) {\n-            log.warn(\"Ambiguous provider configuration in hive.s3.security-mapping. \" +\n-                    \"Please set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n-        }\n-        return matching == 1L;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY4NzIyOQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620687229", "bodyText": "We should really use the Airlift HTTP client here, like we do in the rest of Trino, since it integrates with the config system and provides full support for HTTPS configuration rather than relying on JVM defaults. It may feel like overkill here, but provides consistency and makes it more future proof.\nYou'd do this by changing the bindings in HiveS3Module to bind the provider conditionally and inject S3SecurityMappingsProvider rather than having S3SecurityMappingsProviderFactory. Something like this\nprivate void bindSecurityMapping(Binder binder)\n{\n    if (buildConfigObject(S3SecurityMappingConfig.class).getConfigFile().isPresent()) {\n        binder.bind(S3SecurityMappingsProvider).to(FileBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n    }\n    else if (buildConfigObject(S3SecurityMappingConfig.class).getConfigUri().isPresent()) {\n        binder.bind(S3SecurityMappingsProvider).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n        httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n                .withConfigDefaults(config -> config\n                        .setRequestTimeout(10, SECONDS)\n                        .setSelectorCount(1)\n                        .setMinThreads(1);\n                });\n    }\n    else {\n        return;\n    }\n\n    newSetBinder(binder, DynamicConfigurationProvider.class).addBinding()\n            .to(S3SecurityMappingConfigurationProvider.class).in(Scopes.SINGLETON);\n\n    checkArgument(!buildConfigObject(HiveConfig.class).isS3SelectPushdownEnabled(), \"S3 security mapping is not compatible with S3 Select pushdown\");\n    checkArgument(!buildConfigObject(RubixEnabledConfig.class).isCacheEnabled(), \"S3 security mapping is not compatible with Hive caching\");\n}\nSee io.trino.server.security.jwt.JwkService for a simple example of using the client. You'll need to add an annotation ForS3SecurityMapping to qualify the client for injecting (just copy ForJwk). Using createStringResponseHandler() is probably good for this, just like Jwks.", "author": "electrum", "createdAt": "2021-04-26T22:14:54Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+    }\n+\n+    @Override\n+    protected String getRawJSONString()\n+    {\n+        String urlString = config.getConfigUri().orElseThrow(() -> new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\"));\n+        try {\n+            URL url = new URL(urlString);\n+            HttpURLConnection con = (HttpURLConnection) url.openConnection();", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex cc0b04a0e9..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,56 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import com.google.inject.Inject;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n-    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    private final URI configUri;\n+    private final HttpClient httpClient;\n+\n+    @Inject\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n-    protected String getRawJSONString()\n+    protected String getRawJsonString()\n     {\n-        String urlString = config.getConfigUri().orElseThrow(() -> new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\"));\n-        try {\n-            URL url = new URL(urlString);\n-            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-            con.setRequestMethod(\"GET\");\n-            int status = con.getResponseCode();\n-            if (200 <= status && status <= 299) {\n-                try (BufferedReader in = new BufferedReader(\n-                        new InputStreamReader(con.getInputStream()))) {\n-                    String inputLine;\n-                    StringBuilder content = new StringBuilder();\n-                    while ((inputLine = in.readLine()) != null) {\n-                        content.append(inputLine);\n-                    }\n-                    return content.toString();\n-                }\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", urlString, status));\n-        }\n-        catch (MalformedURLException ex) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri is not a valid URL\");\n-        }\n-        catch (IOException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s': '%s'\", urlString, ex.getMessage()));\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return config.getConfigUri().isPresent();\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY5MjIwOA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620692208", "bodyText": "This is an internal JDK API that we shouldn't use. See TestJwkService for how to use TestingHttpClient to test the code after switching to Airlift HTTP client.", "author": "electrum", "createdAt": "2021-04-26T22:25:31Z", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.sun.net.httpserver.HttpServer;", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\nindex 011e8f5169..1dfd29f7a6 100644\n--- a/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\n\n@@ -13,59 +13,29 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.sun.net.httpserver.HttpServer;\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.Response;\n+import io.airlift.http.client.testing.TestingHttpClient;\n import org.testng.annotations.Test;\n \n-import java.io.IOException;\n-import java.net.HttpURLConnection;\n-import java.net.InetSocketAddress;\n-import java.nio.charset.StandardCharsets;\n-\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n \n public class TestUriBasedS3SecurityMappingsProvider\n {\n+    private static final String MOCK_MAPPINGS_RESPONSE =\n+            \"{\\\"mappings\\\": [{\\\"iamRole\\\":\\\"arn:aws:iam::test\\\",\\\"user\\\":\\\"test\\\"}]}\";\n+\n     @Test\n     public void testGetRawJSON()\n     {\n-        try (FakeServer server = new FakeServer()) {\n-            S3SecurityMappingConfig conf = new S3SecurityMappingConfig()\n-                    .setConfigUri(\"http://\" + server.address.getHostString() + \":\" + server.address.getPort() + \"/api/endpoint\");\n-            UriBasedS3SecurityMappingsProvider provider =\n-                    new UriBasedS3SecurityMappingsProvider(conf);\n-            String result = provider.getRawJSONString();\n-            assertEquals(\"{\\\"mappings\\\": [{\\\"iamRole\\\":\\\"arn:aws:iam::test\\\",\\\"user\\\":\\\"test\\\"}]}\", result);\n-        }\n-        catch (Exception ex) {\n-            throw new RuntimeException(ex);\n-        }\n-    }\n-\n-    private static class FakeServer\n-            implements AutoCloseable\n-    {\n-        HttpServer httpServer;\n-        InetSocketAddress address;\n-\n-        FakeServer()\n-                throws IOException\n-        {\n-            address = new InetSocketAddress(\"127.0.0.1\", 1234);\n-            httpServer = HttpServer.create(address, 0);\n-            httpServer.createContext(\"/api/endpoint\", exchange -> {\n-                byte[] response = \"{\\\"mappings\\\": [{\\\"iamRole\\\":\\\"arn:aws:iam::test\\\",\\\"user\\\":\\\"test\\\"}]}\".getBytes(StandardCharsets.UTF_8);\n-                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n-                exchange.getResponseBody().write(response);\n-                exchange.close();\n-            });\n-            httpServer.start();\n-        }\n-\n-        @Override\n-        public void close()\n-                throws Exception\n-        {\n-            httpServer.stop(0);\n-        }\n+        final Response response = mockResponse(HttpStatus.OK, JSON_UTF_8, MOCK_MAPPINGS_RESPONSE);\n+        S3SecurityMappingConfig conf = new S3SecurityMappingConfig().setConfigFilePath(\"http://test:1234/api/endpoint\");\n+        UriBasedS3SecurityMappingsProvider provider =\n+                new UriBasedS3SecurityMappingsProvider(conf,\n+                        new TestingHttpClient(request -> response));\n+        String result = provider.getRawJsonString();\n+        assertEquals(result, MOCK_MAPPINGS_RESPONSE);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY5MjU2OQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620692569", "bodyText": "Please revert this change, since it's an unrelated refactoring / code organization and not logically part of this PR.", "author": "electrum", "createdAt": "2021-04-26T22:26:16Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMapping.java", "diffHunk": "@@ -96,6 +96,25 @@ public S3SecurityMapping(\n         this.endpoint = requireNonNull(endpoint, \"endpoint is null\");\n     }\n \n+    private static Predicate<URI> prefixPredicate(URI prefix)", "originalCommit": "ab47b6d9ee46e968b3539a1170a9d08076e52e33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMapping.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMapping.java\nindex 2558d1fab7..f125a9d27a 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMapping.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMapping.java\n\n@@ -96,25 +96,6 @@ public class S3SecurityMapping\n         this.endpoint = requireNonNull(endpoint, \"endpoint is null\");\n     }\n \n-    private static Predicate<URI> prefixPredicate(URI prefix)\n-    {\n-        checkArgument(\"s3\".equals(prefix.getScheme()), \"prefix URI scheme is not 's3': %s\", prefix);\n-        checkArgument(prefix.getQuery() == null, \"prefix URI must not contain query: %s\", prefix);\n-        checkArgument(prefix.getFragment() == null, \"prefix URI must not contain fragment: %s\", prefix);\n-        return value -> extractBucketName(prefix).equals(extractBucketName(value)) &&\n-                value.getPath().startsWith(prefix.getPath());\n-    }\n-\n-    private static Predicate<String> toPredicate(Pattern pattern)\n-    {\n-        return value -> pattern.matcher(value).matches();\n-    }\n-\n-    private static <T> Predicate<Collection<T>> anyMatch(Predicate<T> predicate)\n-    {\n-        return values -> values.stream().anyMatch(predicate);\n-    }\n-\n     public boolean matches(ConnectorIdentity identity, URI uri)\n     {\n         return user.test(identity.getUser())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3NzU2Mg==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627077562", "bodyText": "Please leave this method in the original location, as we typically put private methods at the end of the file (but before any nested classes)", "author": "electrum", "createdAt": "2021-05-06T04:55:36Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -16,23 +16,38 @@\n import com.google.inject.Binder;\n import com.google.inject.Scopes;\n import io.airlift.configuration.AbstractConfigurationAwareModule;\n+import io.airlift.units.Duration;\n import io.trino.plugin.hive.ConfigurationInitializer;\n import io.trino.plugin.hive.DynamicConfigurationProvider;\n import io.trino.plugin.hive.HiveConfig;\n import io.trino.plugin.hive.rubix.RubixEnabledConfig;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hive.common.JavaUtils;\n \n+import java.util.concurrent.TimeUnit;\n+\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.inject.multibindings.Multibinder.newSetBinder;\n import static io.airlift.configuration.ConfigBinder.configBinder;\n+import static io.airlift.http.client.HttpClientBinder.httpClientBinder;\n import static org.weakref.jmx.guice.ExportBinder.newExporter;\n \n public class HiveS3Module\n         extends AbstractConfigurationAwareModule\n {\n     public static final String EMR_FS_CLASS_NAME = \"com.amazon.ws.emr.hadoop.fs.EmrFileSystem\";\n \n+    private static void validateEmrFsClass()", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java\nindex a61514714a..8cc633f3d2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java\n\n@@ -37,17 +37,6 @@ public class HiveS3Module\n {\n     public static final String EMR_FS_CLASS_NAME = \"com.amazon.ws.emr.hadoop.fs.EmrFileSystem\";\n \n-    private static void validateEmrFsClass()\n-    {\n-        // verify that the class exists\n-        try {\n-            Class.forName(EMR_FS_CLASS_NAME, true, JavaUtils.getClassLoader());\n-        }\n-        catch (ClassNotFoundException e) {\n-            throw new RuntimeException(\"EMR File System class not found: \" + EMR_FS_CLASS_NAME, e);\n-        }\n-    }\n-\n     @Override\n     protected void setup(Binder binder)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3ODE4OQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627078189", "bodyText": "This class is only bound if the config file is present, so we can validate this in the constructor:\nconfigFile = config.getConfigFile().orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));", "author": "electrum", "createdAt": "2021-05-06T04:57:30Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static java.lang.String.format;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+        configFile = config.getConfigFile().orElse(null);", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\nindex c0b9ee7094..1a40cbef4f 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n\n@@ -13,44 +13,39 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.log.Logger;\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n \n-import static java.lang.String.format;\n-\n public class FileBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n     private final File configFile;\n \n+    @Inject\n     public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n     {\n         super(config);\n-        configFile = config.getConfigFile().orElse(null);\n+        configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));\n+        }\n     }\n \n     @Override\n     public String getRawJsonString()\n     {\n-        if (this.configFile == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-file is not set\");\n-        }\n         log.info(\"Retrieving config from file %s\", configFile);\n         try {\n             return Files.readString(configFile.toPath());\n         }\n-        catch (IOException ex) {\n-            throw new IllegalStateException(format(\"Could not read file '%s', cause: '%s'\", configFile.toPath(), ex.getMessage()));\n+        catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to read file: \" + configFile, e);\n         }\n     }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configFile != null;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3ODI2NA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627078264", "bodyText": "Nit: we normally name exceptions e", "author": "electrum", "createdAt": "2021-05-06T04:57:48Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static java.lang.String.format;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+        configFile = config.getConfigFile().orElse(null);\n+    }\n+\n+    @Override\n+    public String getRawJsonString()\n+    {\n+        if (this.configFile == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-file is not set\");\n+        }\n+        log.info(\"Retrieving config from file %s\", configFile);\n+        try {\n+            return Files.readString(configFile.toPath());\n+        }\n+        catch (IOException ex) {", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\nindex c0b9ee7094..1a40cbef4f 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n\n@@ -13,44 +13,39 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.log.Logger;\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n \n-import static java.lang.String.format;\n-\n public class FileBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n     private final File configFile;\n \n+    @Inject\n     public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n     {\n         super(config);\n-        configFile = config.getConfigFile().orElse(null);\n+        configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));\n+        }\n     }\n \n     @Override\n     public String getRawJsonString()\n     {\n-        if (this.configFile == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-file is not set\");\n-        }\n         log.info(\"Retrieving config from file %s\", configFile);\n         try {\n             return Files.readString(configFile.toPath());\n         }\n-        catch (IOException ex) {\n-            throw new IllegalStateException(format(\"Could not read file '%s', cause: '%s'\", configFile.toPath(), ex.getMessage()));\n+        catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to read file: \" + configFile, e);\n         }\n     }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configFile != null;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3ODYzMw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627078633", "bodyText": "Rethrow IOException as UncheckedIOException and simply propagate the cause\nthrow new UncheckedIOException(\"Failed to read file: \" + configFile, e);", "author": "electrum", "createdAt": "2021-05-06T04:58:57Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static java.lang.String.format;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+        configFile = config.getConfigFile().orElse(null);\n+    }\n+\n+    @Override\n+    public String getRawJsonString()\n+    {\n+        if (this.configFile == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-file is not set\");\n+        }\n+        log.info(\"Retrieving config from file %s\", configFile);\n+        try {\n+            return Files.readString(configFile.toPath());\n+        }\n+        catch (IOException ex) {\n+            throw new IllegalStateException(format(\"Could not read file '%s', cause: '%s'\", configFile.toPath(), ex.getMessage()));", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\nindex c0b9ee7094..1a40cbef4f 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n\n@@ -13,44 +13,39 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.log.Logger;\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n \n-import static java.lang.String.format;\n-\n public class FileBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n     private final File configFile;\n \n+    @Inject\n     public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n     {\n         super(config);\n-        configFile = config.getConfigFile().orElse(null);\n+        configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));\n+        }\n     }\n \n     @Override\n     public String getRawJsonString()\n     {\n-        if (this.configFile == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-file is not set\");\n-        }\n         log.info(\"Retrieving config from file %s\", configFile);\n         try {\n             return Files.readString(configFile.toPath());\n         }\n-        catch (IOException ex) {\n-            throw new IllegalStateException(format(\"Could not read file '%s', cause: '%s'\", configFile.toPath(), ex.getMessage()));\n+        catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to read file: \" + configFile, e);\n         }\n     }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configFile != null;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3ODgxMA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627078810", "bodyText": "This is now unused. Please remove everywhere", "author": "electrum", "createdAt": "2021-05-06T04:59:30Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final String jsonPointer;\n+\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.jsonPointer = requireNonNull(config.getJSONPointer());\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            JsonNode node = JsonUtils.parseJson(jsonString.getBytes(StandardCharsets.UTF_8));\n+            JsonNode mappingsNode = node.at(this.jsonPointer);\n+            return JsonUtils.OBJECT_MAPPER.treeToValue(mappingsNode, S3SecurityMappings.class);\n+        }\n+        catch (JsonProcessingException e) {\n+            throw new IllegalArgumentException(format(\"Failed to parse JSON for S3 security mappings: %s\", jsonString), e);\n+        }\n+    }\n+\n+    protected abstract String getRawJsonString();\n+\n+    public abstract boolean checkPreconditions();", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex cb308c867d..48af9a51af 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,14 +13,11 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import io.trino.plugin.base.util.JsonUtils;\n \n-import java.nio.charset.StandardCharsets;\n import java.util.function.Supplier;\n \n-import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public abstract class S3SecurityMappingsProvider\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3OTAzMw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627079033", "bodyText": "Nit: write empty annotations like\npublic @interface ForS3SecurityMapping {}", "author": "electrum", "createdAt": "2021-05-06T05:00:00Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/ForS3SecurityMapping.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.google.inject.BindingAnnotation;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Retention(RUNTIME)\n+@Target({FIELD, PARAMETER, METHOD})\n+@BindingAnnotation\n+public @interface ForS3SecurityMapping", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/ForS3SecurityMapping.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/ForS3SecurityMapping.java\nindex f86954282a..41088150b3 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/ForS3SecurityMapping.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/ForS3SecurityMapping.java\n\n@@ -26,6 +26,4 @@ import static java.lang.annotation.RetentionPolicy.RUNTIME;\n @Retention(RUNTIME)\n @Target({FIELD, PARAMETER, METHOD})\n @BindingAnnotation\n-public @interface ForS3SecurityMapping\n-{\n-}\n+public @interface ForS3SecurityMapping {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3OTI0NQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627079245", "bodyText": "This should be javax.validation.constraints.NotNull", "author": "electrum", "createdAt": "2021-05-06T05:00:28Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -17,13 +17,18 @@\n import io.airlift.configuration.ConfigDescription;\n import io.airlift.configuration.validation.FileExists;\n import io.airlift.units.Duration;\n+import org.codehaus.commons.nullanalysis.NotNull;", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\nindex 5886657a4f..d4e877cc78 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\n\n@@ -15,66 +15,43 @@ package io.trino.plugin.hive.s3;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.configuration.validation.FileExists;\n import io.airlift.units.Duration;\n-import org.codehaus.commons.nullanalysis.NotNull;\n \n-import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.NotNull;\n \n-import java.io.File;\n import java.util.Optional;\n \n public class S3SecurityMappingConfig\n {\n-    private File configFile;\n-    private String configUri;\n+    private String configFilePath;\n     private String jsonPointer = \"\";\n     private String roleCredentialName;\n     private String kmsKeyIdCredentialName;\n     private Duration refreshPeriod;\n     private String colonReplacement;\n \n-    public Optional<@FileExists File> getConfigFile()\n+    public Optional<String> getConfigFilePath()\n     {\n-        return Optional.ofNullable(configFile);\n+        return Optional.ofNullable(configFilePath);\n     }\n \n     @Config(\"hive.s3.security-mapping.config-file\")\n     @ConfigDescription(\"JSON configuration file containing security mappings\")\n-    public S3SecurityMappingConfig setConfigFile(File configFile)\n+    public S3SecurityMappingConfig setConfigFilePath(String configFilePath)\n     {\n-        this.configFile = configFile;\n+        this.configFilePath = configFilePath;\n         return this;\n     }\n \n-    public Optional<String> getConfigUri()\n-    {\n-        return Optional.ofNullable(configUri);\n-    }\n-\n-    @Config(\"hive.s3.security-mapping.config-uri\")\n-    @ConfigDescription(\"URI returning the security mappings as JSON\")\n-    public S3SecurityMappingConfig setConfigUri(String configUri)\n-    {\n-        this.configUri = configUri;\n-        return this;\n-    }\n-\n-    @AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\n-    public boolean atMostOneProvider()\n-    {\n-        return getConfigFile().isEmpty() || getConfigUri().isEmpty();\n-    }\n-\n     @NotNull\n-    public String getJSONPointer()\n+    public String getJsonPointer()\n     {\n         return jsonPointer;\n     }\n \n     @Config(\"hive.s3.security-mapping.json-pointer\")\n     @ConfigDescription(\"JSON pointer (RFC 6901) to mappings inside JSON config\")\n-    public S3SecurityMappingConfig setJSONPointer(String jsonPointer)\n+    public S3SecurityMappingConfig setJsonPointer(String jsonPointer)\n     {\n         this.jsonPointer = jsonPointer;\n         return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3OTUwNg==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627079506", "bodyText": "Our code style is to name things in camel case where only the first letter is capitalized, including acronyms, so write this as getJsonPointer", "author": "electrum", "createdAt": "2021-05-06T05:01:14Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -42,6 +47,39 @@ public S3SecurityMappingConfig setConfigFile(File configFile)\n         return this;\n     }\n \n+    public Optional<String> getConfigUri()\n+    {\n+        return Optional.ofNullable(configUri);\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.config-uri\")\n+    @ConfigDescription(\"URI returning the security mappings as JSON\")\n+    public S3SecurityMappingConfig setConfigUri(String configUri)\n+    {\n+        this.configUri = configUri;\n+        return this;\n+    }\n+\n+    @AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\n+    public boolean atMostOneProvider()\n+    {\n+        return getConfigFile().isEmpty() || getConfigUri().isEmpty();\n+    }\n+\n+    @NotNull\n+    public String getJSONPointer()", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\nindex 5886657a4f..d4e877cc78 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\n\n@@ -15,66 +15,43 @@ package io.trino.plugin.hive.s3;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.configuration.validation.FileExists;\n import io.airlift.units.Duration;\n-import org.codehaus.commons.nullanalysis.NotNull;\n \n-import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.NotNull;\n \n-import java.io.File;\n import java.util.Optional;\n \n public class S3SecurityMappingConfig\n {\n-    private File configFile;\n-    private String configUri;\n+    private String configFilePath;\n     private String jsonPointer = \"\";\n     private String roleCredentialName;\n     private String kmsKeyIdCredentialName;\n     private Duration refreshPeriod;\n     private String colonReplacement;\n \n-    public Optional<@FileExists File> getConfigFile()\n+    public Optional<String> getConfigFilePath()\n     {\n-        return Optional.ofNullable(configFile);\n+        return Optional.ofNullable(configFilePath);\n     }\n \n     @Config(\"hive.s3.security-mapping.config-file\")\n     @ConfigDescription(\"JSON configuration file containing security mappings\")\n-    public S3SecurityMappingConfig setConfigFile(File configFile)\n+    public S3SecurityMappingConfig setConfigFilePath(String configFilePath)\n     {\n-        this.configFile = configFile;\n+        this.configFilePath = configFilePath;\n         return this;\n     }\n \n-    public Optional<String> getConfigUri()\n-    {\n-        return Optional.ofNullable(configUri);\n-    }\n-\n-    @Config(\"hive.s3.security-mapping.config-uri\")\n-    @ConfigDescription(\"URI returning the security mappings as JSON\")\n-    public S3SecurityMappingConfig setConfigUri(String configUri)\n-    {\n-        this.configUri = configUri;\n-        return this;\n-    }\n-\n-    @AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\n-    public boolean atMostOneProvider()\n-    {\n-        return getConfigFile().isEmpty() || getConfigUri().isEmpty();\n-    }\n-\n     @NotNull\n-    public String getJSONPointer()\n+    public String getJsonPointer()\n     {\n         return jsonPointer;\n     }\n \n     @Config(\"hive.s3.security-mapping.json-pointer\")\n     @ConfigDescription(\"JSON pointer (RFC 6901) to mappings inside JSON config\")\n-    public S3SecurityMappingConfig setJSONPointer(String jsonPointer)\n+    public S3SecurityMappingConfig setJsonPointer(String jsonPointer)\n     {\n         this.jsonPointer = jsonPointer;\n         return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3OTU2NQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627079565", "bodyText": "setJsonPointer", "author": "electrum", "createdAt": "2021-05-06T05:01:22Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -42,6 +47,39 @@ public S3SecurityMappingConfig setConfigFile(File configFile)\n         return this;\n     }\n \n+    public Optional<String> getConfigUri()\n+    {\n+        return Optional.ofNullable(configUri);\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.config-uri\")\n+    @ConfigDescription(\"URI returning the security mappings as JSON\")\n+    public S3SecurityMappingConfig setConfigUri(String configUri)\n+    {\n+        this.configUri = configUri;\n+        return this;\n+    }\n+\n+    @AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\n+    public boolean atMostOneProvider()\n+    {\n+        return getConfigFile().isEmpty() || getConfigUri().isEmpty();\n+    }\n+\n+    @NotNull\n+    public String getJSONPointer()\n+    {\n+        return jsonPointer;\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.json-pointer\")\n+    @ConfigDescription(\"JSON pointer (RFC 6901) to mappings inside JSON config\")\n+    public S3SecurityMappingConfig setJSONPointer(String jsonPointer)", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\nindex 5886657a4f..d4e877cc78 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java\n\n@@ -15,66 +15,43 @@ package io.trino.plugin.hive.s3;\n \n import io.airlift.configuration.Config;\n import io.airlift.configuration.ConfigDescription;\n-import io.airlift.configuration.validation.FileExists;\n import io.airlift.units.Duration;\n-import org.codehaus.commons.nullanalysis.NotNull;\n \n-import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.NotNull;\n \n-import java.io.File;\n import java.util.Optional;\n \n public class S3SecurityMappingConfig\n {\n-    private File configFile;\n-    private String configUri;\n+    private String configFilePath;\n     private String jsonPointer = \"\";\n     private String roleCredentialName;\n     private String kmsKeyIdCredentialName;\n     private Duration refreshPeriod;\n     private String colonReplacement;\n \n-    public Optional<@FileExists File> getConfigFile()\n+    public Optional<String> getConfigFilePath()\n     {\n-        return Optional.ofNullable(configFile);\n+        return Optional.ofNullable(configFilePath);\n     }\n \n     @Config(\"hive.s3.security-mapping.config-file\")\n     @ConfigDescription(\"JSON configuration file containing security mappings\")\n-    public S3SecurityMappingConfig setConfigFile(File configFile)\n+    public S3SecurityMappingConfig setConfigFilePath(String configFilePath)\n     {\n-        this.configFile = configFile;\n+        this.configFilePath = configFilePath;\n         return this;\n     }\n \n-    public Optional<String> getConfigUri()\n-    {\n-        return Optional.ofNullable(configUri);\n-    }\n-\n-    @Config(\"hive.s3.security-mapping.config-uri\")\n-    @ConfigDescription(\"URI returning the security mappings as JSON\")\n-    public S3SecurityMappingConfig setConfigUri(String configUri)\n-    {\n-        this.configUri = configUri;\n-        return this;\n-    }\n-\n-    @AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\n-    public boolean atMostOneProvider()\n-    {\n-        return getConfigFile().isEmpty() || getConfigUri().isEmpty();\n-    }\n-\n     @NotNull\n-    public String getJSONPointer()\n+    public String getJsonPointer()\n     {\n         return jsonPointer;\n     }\n \n     @Config(\"hive.s3.security-mapping.json-pointer\")\n     @ConfigDescription(\"JSON pointer (RFC 6901) to mappings inside JSON config\")\n-    public S3SecurityMappingConfig setJSONPointer(String jsonPointer)\n+    public S3SecurityMappingConfig setJsonPointer(String jsonPointer)\n     {\n         this.jsonPointer = jsonPointer;\n         return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MDQwOA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627080408", "bodyText": "Add a utility method jsonTreeToValue to JsonUtils for this and make OBJECT_MAPPER private", "author": "electrum", "createdAt": "2021-05-06T05:03:57Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final String jsonPointer;\n+\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.jsonPointer = requireNonNull(config.getJSONPointer());\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            JsonNode node = JsonUtils.parseJson(jsonString.getBytes(StandardCharsets.UTF_8));\n+            JsonNode mappingsNode = node.at(this.jsonPointer);\n+            return JsonUtils.OBJECT_MAPPER.treeToValue(mappingsNode, S3SecurityMappings.class);", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex cb308c867d..48af9a51af 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,14 +13,11 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import io.trino.plugin.base.util.JsonUtils;\n \n-import java.nio.charset.StandardCharsets;\n import java.util.function.Supplier;\n \n-import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public abstract class S3SecurityMappingsProvider\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MTExOQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627081119", "bodyText": "Change parseJson to take a String so that callers don't need to do conversion to bytes. ObjectMapper has a readTree overload that takes String directly.", "author": "electrum", "createdAt": "2021-05-06T05:06:21Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final String jsonPointer;\n+\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.jsonPointer = requireNonNull(config.getJSONPointer());\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            JsonNode node = JsonUtils.parseJson(jsonString.getBytes(StandardCharsets.UTF_8));", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex cb308c867d..48af9a51af 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,14 +13,11 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import io.trino.plugin.base.util.JsonUtils;\n \n-import java.nio.charset.StandardCharsets;\n import java.util.function.Supplier;\n \n-import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public abstract class S3SecurityMappingsProvider\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MTQwNw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627081407", "bodyText": "throw new UncheckedIOException(\"Failed to parse JSON for S3 security mappings: \" + jsonString, e);", "author": "electrum", "createdAt": "2021-05-06T05:07:14Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final String jsonPointer;\n+\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.jsonPointer = requireNonNull(config.getJSONPointer());\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            JsonNode node = JsonUtils.parseJson(jsonString.getBytes(StandardCharsets.UTF_8));\n+            JsonNode mappingsNode = node.at(this.jsonPointer);\n+            return JsonUtils.OBJECT_MAPPER.treeToValue(mappingsNode, S3SecurityMappings.class);\n+        }\n+        catch (JsonProcessingException e) {\n+            throw new IllegalArgumentException(format(\"Failed to parse JSON for S3 security mappings: %s\", jsonString), e);", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex cb308c867d..48af9a51af 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,14 +13,11 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import io.trino.plugin.base.util.JsonUtils;\n \n-import java.nio.charset.StandardCharsets;\n import java.util.function.Supplier;\n \n-import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public abstract class S3SecurityMappingsProvider\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MTgzOQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627081839", "bodyText": "Make final", "author": "electrum", "createdAt": "2021-05-06T05:08:40Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex ecffa51cde..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,53 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n import java.net.URI;\n \n import static io.airlift.http.client.Request.Builder.prepareGet;\n import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private final URI configUri;\n-    private HttpClient httpClient;\n+    private final HttpClient httpClient;\n \n+    @Inject\n     public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n-        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n-        this.httpClient = httpClient;\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n     protected String getRawJsonString()\n     {\n-        if (this.configUri == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-        Request request = prepareGet().setUri(this.configUri).build();\n-        StringResponseHandler.StringResponse response;\n-        try {\n-            response = httpClient.execute(request, createStringResponseHandler());\n-            int status = response.getStatusCode();\n-            if (200 <= status && status <= 299) {\n-                return response.getBody();\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n-        }\n-        catch (RuntimeException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configUri != null;\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjE2Mw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082163", "bodyText": "This class should only be constructed when the URI is present\nthis.configUri = config.getConfigUri().orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));", "author": "electrum", "createdAt": "2021-05-06T05:09:35Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex ecffa51cde..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,53 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n import java.net.URI;\n \n import static io.airlift.http.client.Request.Builder.prepareGet;\n import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private final URI configUri;\n-    private HttpClient httpClient;\n+    private final HttpClient httpClient;\n \n+    @Inject\n     public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n-        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n-        this.httpClient = httpClient;\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n     protected String getRawJsonString()\n     {\n-        if (this.configUri == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-        Request request = prepareGet().setUri(this.configUri).build();\n-        StringResponseHandler.StringResponse response;\n-        try {\n-            response = httpClient.execute(request, createStringResponseHandler());\n-            int status = response.getStatusCode();\n-            if (200 <= status && status <= 299) {\n-                return response.getBody();\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n-        }\n-        catch (RuntimeException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configUri != null;\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjIyNQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082225", "bodyText": "this.httpClient = requireNonNull(httpClient, \"httpClient is null\");", "author": "electrum", "createdAt": "2021-05-06T05:09:47Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex ecffa51cde..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,53 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n import java.net.URI;\n \n import static io.airlift.http.client.Request.Builder.prepareGet;\n import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private final URI configUri;\n-    private HttpClient httpClient;\n+    private final HttpClient httpClient;\n \n+    @Inject\n     public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n-        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n-        this.httpClient = httpClient;\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n     protected String getRawJsonString()\n     {\n-        if (this.configUri == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-        Request request = prepareGet().setUri(this.configUri).build();\n-        StringResponseHandler.StringResponse response;\n-        try {\n-            response = httpClient.execute(request, createStringResponseHandler());\n-            int status = response.getStatusCode();\n-            if (200 <= status && status <= 299) {\n-                return response.getBody();\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n-        }\n-        catch (RuntimeException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configUri != null;\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjM1Nw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082357", "bodyText": "Not needed after moving validation to constructor", "author": "electrum", "createdAt": "2021-05-06T05:10:13Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static java.lang.String.format;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+        configFile = config.getConfigFile().orElse(null);\n+    }\n+\n+    @Override\n+    public String getRawJsonString()\n+    {\n+        if (this.configFile == null) {", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\nindex c0b9ee7094..1a40cbef4f 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n\n@@ -13,44 +13,39 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.log.Logger;\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n \n-import static java.lang.String.format;\n-\n public class FileBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n     private final File configFile;\n \n+    @Inject\n     public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n     {\n         super(config);\n-        configFile = config.getConfigFile().orElse(null);\n+        configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));\n+        }\n     }\n \n     @Override\n     public String getRawJsonString()\n     {\n-        if (this.configFile == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-file is not set\");\n-        }\n         log.info(\"Retrieving config from file %s\", configFile);\n         try {\n             return Files.readString(configFile.toPath());\n         }\n-        catch (IOException ex) {\n-            throw new IllegalStateException(format(\"Could not read file '%s', cause: '%s'\", configFile.toPath(), ex.getMessage()));\n+        catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to read file: \" + configFile, e);\n         }\n     }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configFile != null;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjQzOA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082438", "bodyText": "Not needed after moving validation to constructor", "author": "electrum", "createdAt": "2021-05-06T05:10:30Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex ecffa51cde..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,53 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n import java.net.URI;\n \n import static io.airlift.http.client.Request.Builder.prepareGet;\n import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private final URI configUri;\n-    private HttpClient httpClient;\n+    private final HttpClient httpClient;\n \n+    @Inject\n     public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n-        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n-        this.httpClient = httpClient;\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n     protected String getRawJsonString()\n     {\n-        if (this.configUri == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-        Request request = prepareGet().setUri(this.configUri).build();\n-        StringResponseHandler.StringResponse response;\n-        try {\n-            response = httpClient.execute(request, createStringResponseHandler());\n-            int status = response.getStatusCode();\n-            if (200 <= status && status <= 299) {\n-                return response.getBody();\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n-        }\n-        catch (RuntimeException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configUri != null;\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjU4OQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082589", "bodyText": "We normally only use this. in the constructor for assignments (often required due to fields and parameters having the same name)", "author": "electrum", "createdAt": "2021-05-06T05:10:58Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        }\n+        Request request = prepareGet().setUri(this.configUri).build();", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex ecffa51cde..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,53 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n import java.net.URI;\n \n import static io.airlift.http.client.Request.Builder.prepareGet;\n import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private final URI configUri;\n-    private HttpClient httpClient;\n+    private final HttpClient httpClient;\n \n+    @Inject\n     public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n-        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n-        this.httpClient = httpClient;\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n     protected String getRawJsonString()\n     {\n-        if (this.configUri == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-        Request request = prepareGet().setUri(this.configUri).build();\n-        StringResponseHandler.StringResponse response;\n-        try {\n-            response = httpClient.execute(request, createStringResponseHandler());\n-            int status = response.getStatusCode();\n-            if (200 <= status && status <= 299) {\n-                return response.getBody();\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n-        }\n-        catch (RuntimeException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configUri != null;\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NDExNg==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627084116", "bodyText": "I think we only want to accept 200, as anything else won't have a body\nif (status != HttpStatusOK.code()) {\n    throw new RuntimeException(format(\"Unexpected status code %s from %s\", status, configUri));\n}", "author": "electrum", "createdAt": "2021-05-06T05:15:59Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        }\n+        Request request = prepareGet().setUri(this.configUri).build();\n+        StringResponseHandler.StringResponse response;\n+        try {\n+            response = httpClient.execute(request, createStringResponseHandler());\n+            int status = response.getStatusCode();\n+            if (200 <= status && status <= 299) {", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex ecffa51cde..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,53 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n import java.net.URI;\n \n import static io.airlift.http.client.Request.Builder.prepareGet;\n import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private final URI configUri;\n-    private HttpClient httpClient;\n+    private final HttpClient httpClient;\n \n+    @Inject\n     public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n-        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n-        this.httpClient = httpClient;\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n     protected String getRawJsonString()\n     {\n-        if (this.configUri == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-        Request request = prepareGet().setUri(this.configUri).build();\n-        StringResponseHandler.StringResponse response;\n-        try {\n-            response = httpClient.execute(request, createStringResponseHandler());\n-            int status = response.getStatusCode();\n-            if (200 <= status && status <= 299) {\n-                return response.getBody();\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n-        }\n-        catch (RuntimeException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configUri != null;\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NDIwOA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627084208", "bodyText": "We shouldn't need to do this, as the HTTP client already throws a good error message on failure", "author": "electrum", "createdAt": "2021-05-06T05:16:13Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        }\n+        Request request = prepareGet().setUri(this.configUri).build();\n+        StringResponseHandler.StringResponse response;\n+        try {\n+            response = httpClient.execute(request, createStringResponseHandler());\n+            int status = response.getStatusCode();\n+            if (200 <= status && status <= 299) {\n+                return response.getBody();\n+            }\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n+        }\n+        catch (RuntimeException ex) {\n+            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex ecffa51cde..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,53 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n import java.net.URI;\n \n import static io.airlift.http.client.Request.Builder.prepareGet;\n import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private final URI configUri;\n-    private HttpClient httpClient;\n+    private final HttpClient httpClient;\n \n+    @Inject\n     public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n-        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n-        this.httpClient = httpClient;\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n     protected String getRawJsonString()\n     {\n-        if (this.configUri == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-        Request request = prepareGet().setUri(this.configUri).build();\n-        StringResponseHandler.StringResponse response;\n-        try {\n-            response = httpClient.execute(request, createStringResponseHandler());\n-            int status = response.getStatusCode();\n-            if (200 <= status && status <= 299) {\n-                return response.getBody();\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n-        }\n-        catch (RuntimeException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configUri != null;\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NDMxMQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627084311", "bodyText": "Nit: status import StringResponse", "author": "electrum", "createdAt": "2021-05-06T05:16:33Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        }\n+        Request request = prepareGet().setUri(this.configUri).build();\n+        StringResponseHandler.StringResponse response;", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\nindex ecffa51cde..5fa8331ab2 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java\n\n@@ -13,53 +13,42 @@\n  */\n package io.trino.plugin.hive.s3;\n \n+import com.google.inject.Inject;\n import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.HttpStatus;\n import io.airlift.http.client.Request;\n-import io.airlift.http.client.StringResponseHandler;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n \n import java.net.URI;\n \n import static io.airlift.http.client.Request.Builder.prepareGet;\n import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class UriBasedS3SecurityMappingsProvider\n         extends S3SecurityMappingsProvider\n {\n     private final URI configUri;\n-    private HttpClient httpClient;\n+    private final HttpClient httpClient;\n \n+    @Inject\n     public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n     {\n         super(config);\n-        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n-        this.httpClient = httpClient;\n+        this.configUri = config.getConfigFilePath().map(URI::create).orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n     }\n \n     @Override\n     protected String getRawJsonString()\n     {\n-        if (this.configUri == null) {\n-            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        Request request = prepareGet().setUri(configUri).build();\n+        StringResponse response = httpClient.execute(request, createStringResponseHandler());\n+        int status = response.getStatusCode();\n+        if (status != HttpStatus.OK.code()) {\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", configUri, status));\n         }\n-        Request request = prepareGet().setUri(this.configUri).build();\n-        StringResponseHandler.StringResponse response;\n-        try {\n-            response = httpClient.execute(request, createStringResponseHandler());\n-            int status = response.getStatusCode();\n-            if (200 <= status && status <= 299) {\n-                return response.getBody();\n-            }\n-            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n-        }\n-        catch (RuntimeException ex) {\n-            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean checkPreconditions()\n-    {\n-        return configUri != null;\n+        return response.getBody();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NDU0NQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627084545", "bodyText": "This isn't needed as the testDefaults method already does this", "author": "electrum", "createdAt": "2021-05-06T05:17:18Z", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestS3SecurityMappingConfig.java", "diffHunk": "@@ -26,20 +26,30 @@\n import static io.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n import static io.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.testng.Assert.assertEquals;\n \n public class TestS3SecurityMappingConfig\n {\n     @Test\n     public void testDefaults()\n     {\n         assertRecordedDefaults(recordDefaults(S3SecurityMappingConfig.class)\n+                .setConfigUri(null)\n+                .setJSONPointer(\"\")\n                 .setConfigFile(null)\n                 .setRoleCredentialName(null)\n                 .setKmsKeyIdCredentialName(null)\n                 .setRefreshPeriod(null)\n                 .setColonReplacement(null));\n     }\n \n+    @Test\n+    public void testDefaultValues()", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestS3SecurityMappingConfig.java b/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestS3SecurityMappingConfig.java\nindex e9a5f49898..b492220d3d 100644\n--- a/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestS3SecurityMappingConfig.java\n+++ b/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestS3SecurityMappingConfig.java\n\n@@ -26,7 +26,6 @@ import static io.airlift.configuration.testing.ConfigAssertions.assertFullMappin\n import static io.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n import static io.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n import static java.util.concurrent.TimeUnit.SECONDS;\n-import static org.testng.Assert.assertEquals;\n \n public class TestS3SecurityMappingConfig\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NTUyMA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627085520", "bodyText": "I don't think AtomicReference is needed here. Doing this as\nResponse response = ...\nnew TestingHttpClient(request -> response)\nshould work the same", "author": "electrum", "createdAt": "2021-05-06T05:20:26Z", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.Response;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestUriBasedS3SecurityMappingsProvider\n+{\n+    private static final String MOCK_MAPPINGS_RESPONSE =\n+            \"{\\\"mappings\\\": [{\\\"iamRole\\\":\\\"arn:aws:iam::test\\\",\\\"user\\\":\\\"test\\\"}]}\";\n+\n+    @Test\n+    public void testGetRawJSON()\n+    {\n+        AtomicReference<Response> response = new AtomicReference<>(mockResponse(HttpStatus.OK, JSON_UTF_8, MOCK_MAPPINGS_RESPONSE));", "originalCommit": "c4731029d37f59c8a5ffa7e08726b9071b1531ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "chunk": "diff --git a/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\nindex 61a0e4db7c..1dfd29f7a6 100644\n--- a/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\n\n@@ -18,8 +18,6 @@ import io.airlift.http.client.Response;\n import io.airlift.http.client.testing.TestingHttpClient;\n import org.testng.annotations.Test;\n \n-import java.util.concurrent.atomic.AtomicReference;\n-\n import static com.google.common.net.MediaType.JSON_UTF_8;\n import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n import static org.testng.Assert.assertEquals;\n"}}, {"oid": "9646e7260db88dcc87f0a9d767c514d905556d8e", "url": "https://github.com/trinodb/trino/commit/9646e7260db88dcc87f0a9d767c514d905556d8e", "message": "remove unused variable from test", "committedDate": "2021-06-29T08:54:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MDYyNQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r675560625", "bodyText": "invert the condition, so else block is not needed", "author": "kokosing", "createdAt": "2021-07-23T13:22:51Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -61,13 +65,29 @@ protected void setup(Binder binder)\n \n     private void bindSecurityMapping(Binder binder)\n     {\n-        if (buildConfigObject(S3SecurityMappingConfig.class).getConfigFile().isPresent()) {\n-            checkArgument(!buildConfigObject(HiveConfig.class).isS3SelectPushdownEnabled(), \"S3 security mapping is not compatible with S3 Select pushdown\");\n-            checkArgument(!buildConfigObject(RubixEnabledConfig.class).isCacheEnabled(), \"S3 security mapping is not compatible with Hive caching\");\n-\n-            newSetBinder(binder, DynamicConfigurationProvider.class).addBinding()\n-                    .to(S3SecurityMappingConfigurationProvider.class).in(Scopes.SINGLETON);\n+        S3SecurityMappingConfig configuration = buildConfigObject(S3SecurityMappingConfig.class);\n+        if (configuration.getConfigFilePath().isPresent()) {\n+            if (isHttp(configuration)) {\n+                binder.bind(S3SecurityMappingsProvider.class).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n+                httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n+                        .withConfigDefaults(config -> config\n+                                .setRequestTimeout(Duration.succinctDuration(10, TimeUnit.SECONDS))\n+                                .setSelectorCount(1)\n+                                .setMinThreads(1));\n+            }\n+            else {\n+                binder.bind(S3SecurityMappingsProvider.class).to(FileBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n+            }\n         }\n+        else {\n+            return;", "originalCommit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9e1a6b9f2fdfa7c2cce8eff609c371d3b6e1d59", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java\nindex 8cc633f3d2..30a7fcfb54 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java\n\n@@ -66,21 +66,20 @@ public class HiveS3Module\n     private void bindSecurityMapping(Binder binder)\n     {\n         S3SecurityMappingConfig configuration = buildConfigObject(S3SecurityMappingConfig.class);\n-        if (configuration.getConfigFilePath().isPresent()) {\n-            if (isHttp(configuration)) {\n-                binder.bind(S3SecurityMappingsProvider.class).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n-                httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n-                        .withConfigDefaults(config -> config\n-                                .setRequestTimeout(Duration.succinctDuration(10, TimeUnit.SECONDS))\n-                                .setSelectorCount(1)\n-                                .setMinThreads(1));\n-            }\n-            else {\n-                binder.bind(S3SecurityMappingsProvider.class).to(FileBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n-            }\n+        if (configuration.getConfigFilePath().isEmpty()) {\n+            return;\n+        }\n+\n+        if (isHttp(configuration)) {\n+            binder.bind(S3SecurityMappingsProvider.class).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n+            httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n+                    .withConfigDefaults(config -> config\n+                            .setRequestTimeout(Duration.succinctDuration(10, TimeUnit.SECONDS))\n+                            .setSelectorCount(1)\n+                            .setMinThreads(1));\n         }\n         else {\n-            return;\n+            binder.bind(S3SecurityMappingsProvider.class).to(FileBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n         }\n \n         newSetBinder(binder, DynamicConfigurationProvider.class).addBinding()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MTE0NQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r675561145", "bodyText": "Why removed?", "author": "kokosing", "createdAt": "2021-07-23T13:23:38Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfigurationProvider.java", "diffHunk": "@@ -57,35 +55,33 @@\n     private final Optional<String> colonReplacement;\n \n     @Inject\n-    public S3SecurityMappingConfigurationProvider(S3SecurityMappingConfig config)\n+    public S3SecurityMappingConfigurationProvider(S3SecurityMappingConfig config, S3SecurityMappingsProvider mappingsProvider)\n     {\n-        this(getMappings(config), config.getRoleCredentialName(), config.getKmsKeyIdCredentialName(), config.getColonReplacement());\n+        this(getMappings(config, mappingsProvider), config.getRoleCredentialName(), config.getKmsKeyIdCredentialName(), config.getColonReplacement());\n     }\n \n-    private static Supplier<S3SecurityMappings> getMappings(S3SecurityMappingConfig config)\n+    public S3SecurityMappingConfigurationProvider(Supplier<S3SecurityMappings> mappings, Optional<String> roleCredentialName, Optional<String> kmsKeyIdCredentialName, Optional<String> colonReplacement)\n+    {\n+        this.mappings = requireNonNull(mappings, \"mappings is null\");\n+        this.roleCredentialName = requireNonNull(roleCredentialName, \"roleCredentialName is null\");\n+        this.kmsKeyIdCredentialName = requireNonNull(kmsKeyIdCredentialName, \"kmsKeyIdCredentialName is null\");\n+        this.colonReplacement = requireNonNull(colonReplacement, \"colonReplacement is null\");\n+    }\n+\n+    private static Supplier<S3SecurityMappings> getMappings(S3SecurityMappingConfig config, S3SecurityMappingsProvider supplier)\n     {\n-        File configFile = config.getConfigFile().orElseThrow(() -> new IllegalArgumentException(\"config file not set\"));\n-        Supplier<S3SecurityMappings> supplier = () -> parseJson(configFile.toPath(), S3SecurityMappings.class);\n         if (config.getRefreshPeriod().isEmpty()) {\n             return Suppliers.memoize(supplier::get);\n         }\n         return Suppliers.memoizeWithExpiration(\n                 () -> {\n-                    log.info(\"Refreshing S3 security mapping configuration from %s\", configFile);\n+                    log.info(\"Refreshing S3 security mapping configuration\");", "originalCommit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9e1a6b9f2fdfa7c2cce8eff609c371d3b6e1d59", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfigurationProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfigurationProvider.java\nindex 688d61bcec..43ba6df4a7 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfigurationProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfigurationProvider.java\n\n@@ -70,12 +70,13 @@ public class S3SecurityMappingConfigurationProvider\n \n     private static Supplier<S3SecurityMappings> getMappings(S3SecurityMappingConfig config, S3SecurityMappingsProvider supplier)\n     {\n+        String configFilePath = config.getConfigFilePath().orElseThrow(() -> new IllegalArgumentException(\"config file not set\"));\n         if (config.getRefreshPeriod().isEmpty()) {\n             return Suppliers.memoize(supplier::get);\n         }\n         return Suppliers.memoizeWithExpiration(\n                 () -> {\n-                    log.info(\"Refreshing S3 security mapping configuration\");\n+                    log.info(\"Refreshing S3 security mapping configuration from %s\", configFilePath);\n                     return supplier.get();\n                 },\n                 config.getRefreshPeriod().get().toMillis(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MjQzMQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r675562431", "bodyText": "Can we use composition instead of inheritance here?", "author": "kokosing", "createdAt": "2021-07-23T13:25:33Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider", "originalCommit": "9646e7260db88dcc87f0a9d767c514d905556d8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQxMjkxMw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r676412913", "bodyText": "How exactly would you like that to look? Remove abstract from S3SecurityMappingsProvider and create a new interface for UriBasedS3SecurityMappingsProvider and FileBasedS3SecurityMappingsProvider to implement?", "author": "clemensvonschwerin", "createdAt": "2021-07-26T08:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MjQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQ1NDE2MA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r676454160", "bodyText": "I think it is fine to have an interface for S3SecurityMappingsProvider that is only implements Supplier<S3SecurityMappings>, but then when implementing the other classes we could extract the common code to a separate class that is used from UriBasedS3SecurityMappingsProvider and FileBasedS3SecurityMappingsProvider", "author": "kokosing", "createdAt": "2021-07-26T09:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MjQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjYwMDExNg==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r676600116", "bodyText": "Alright, I will update the PR accordingly", "author": "clemensvonschwerin", "createdAt": "2021-07-26T13:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MjQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9e1a6b9f2fdfa7c2cce8eff609c371d3b6e1d59", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\nindex 48af9a51af..935c55c00d 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java\n\n@@ -13,35 +13,9 @@\n  */\n package io.trino.plugin.hive.s3;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n-import io.trino.plugin.base.util.JsonUtils;\n-\n import java.util.function.Supplier;\n \n-import static java.util.Objects.requireNonNull;\n-\n-public abstract class S3SecurityMappingsProvider\n-        implements Supplier<S3SecurityMappings>\n+public interface S3SecurityMappingsProvider\n+        extends Supplier<S3SecurityMappings>\n {\n-    protected final String jsonPointer;\n-\n-    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n-    {\n-        this.jsonPointer = requireNonNull(config.getJsonPointer());\n-    }\n-\n-    protected S3SecurityMappings parse(String jsonString)\n-    {\n-        JsonNode node = JsonUtils.parseJson(jsonString);\n-        JsonNode mappingsNode = node.at(this.jsonPointer);\n-        return JsonUtils.jsonTreeToValue(mappingsNode, S3SecurityMappings.class);\n-    }\n-\n-    protected abstract String getRawJsonString();\n-\n-    @Override\n-    public S3SecurityMappings get()\n-    {\n-        return parse(getRawJsonString());\n-    }\n }\n"}}, {"oid": "b9e1a6b9f2fdfa7c2cce8eff609c371d3b6e1d59", "url": "https://github.com/trinodb/trino/commit/b9e1a6b9f2fdfa7c2cce8eff609c371d3b6e1d59", "message": "use composition instead of inheritance for S3SecurityMappingsProvider", "committedDate": "2021-07-27T07:59:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MjM2OA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701792368", "bodyText": "static import for format", "author": "kokosing", "createdAt": "2021-09-03T10:45:15Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.google.inject.Inject;\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        implements S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+    private final S3SecurityMappingsParser parser;\n+\n+    @Inject\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));", "originalCommit": "908bfef8076aac93f3200e5f5bf5c8cb3264862f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4NjI0NA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702786244", "bodyText": "Updated", "author": "cvs-mckinsey", "createdAt": "2021-09-06T10:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MjM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "fd68321332c9f2195d775ac5e14497ca93299ee6", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\nindex beece02d50..f84cfc190c 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n\n@@ -21,6 +21,8 @@ import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.nio.file.Files;\n \n+import static java.lang.String.format;\n+\n public class FileBasedS3SecurityMappingsProvider\n         implements S3SecurityMappingsProvider\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MzgxMg==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701793812", "bodyText": "are we going to download and load mapping every single call? It might contribute the query latency. I think we need to have some kind of caching with usage of Suppliers.memoizeWithExpire for this.", "author": "kokosing", "createdAt": "2021-09-03T10:47:48Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.google.inject.Inject;\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        implements S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+    private final S3SecurityMappingsParser parser;\n+\n+    @Inject\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));\n+        }\n+        this.parser = new S3SecurityMappingsParser(config);\n+    }\n+\n+    private String getRawJsonString()\n+    {\n+        log.info(\"Retrieving config from file %s\", configFile);\n+        try {\n+            return Files.readString(configFile.toPath());\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to read file: \" + configFile, e);\n+        }\n+    }\n+\n+    @Override\n+    public S3SecurityMappings get()\n+    {\n+        return parser.parseJSONString(getRawJsonString());", "originalCommit": "908bfef8076aac93f3200e5f5bf5c8cb3264862f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4MzYyMQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702783621", "bodyText": "Isn't that already handled by S3SecurityMappingConfigurationProvider::getMappings(...) ?", "author": "cvs-mckinsey", "createdAt": "2021-09-06T10:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MzgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "fd68321332c9f2195d775ac5e14497ca93299ee6", "chunk": "diff --git a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\nindex beece02d50..f84cfc190c 100644\n--- a/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java\n\n@@ -21,6 +21,8 @@ import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.nio.file.Files;\n \n+import static java.lang.String.format;\n+\n public class FileBasedS3SecurityMappingsProvider\n         implements S3SecurityMappingsProvider\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5NDM2NA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701794364", "bodyText": "Why these are set to 1?", "author": "kokosing", "createdAt": "2021-09-03T10:48:53Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -61,13 +65,28 @@ protected void setup(Binder binder)\n \n     private void bindSecurityMapping(Binder binder)\n     {\n-        if (buildConfigObject(S3SecurityMappingConfig.class).getConfigFile().isPresent()) {\n-            checkArgument(!buildConfigObject(HiveConfig.class).isS3SelectPushdownEnabled(), \"S3 security mapping is not compatible with S3 Select pushdown\");\n-            checkArgument(!buildConfigObject(RubixEnabledConfig.class).isCacheEnabled(), \"S3 security mapping is not compatible with Hive caching\");\n+        S3SecurityMappingConfig configuration = buildConfigObject(S3SecurityMappingConfig.class);\n+        if (configuration.getConfigFilePath().isEmpty()) {\n+            return;\n+        }\n \n-            newSetBinder(binder, DynamicConfigurationProvider.class).addBinding()\n-                    .to(S3SecurityMappingConfigurationProvider.class).in(Scopes.SINGLETON);\n+        if (isHttp(configuration)) {\n+            binder.bind(S3SecurityMappingsProvider.class).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n+            httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n+                    .withConfigDefaults(config -> config\n+                            .setRequestTimeout(Duration.succinctDuration(10, TimeUnit.SECONDS))\n+                            .setSelectorCount(1)\n+                            .setMinThreads(1));", "originalCommit": "908bfef8076aac93f3200e5f5bf5c8cb3264862f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4NDUxNw==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702784517", "bodyText": "Taken from @electrum 's suggestion in #6210 (comment)\nIf you have any other suggestions I can update these values accordingly or just use the defaults.", "author": "cvs-mckinsey", "createdAt": "2021-09-06T10:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5NDM2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5NTQyMQ==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701795421", "bodyText": "No need to wrap lines here.", "author": "kokosing", "createdAt": "2021-09-03T10:50:44Z", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.Response;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestUriBasedS3SecurityMappingsProvider\n+{\n+    private static final String MOCK_MAPPINGS_RESPONSE =\n+            \"{\\\"mappings\\\": [{\\\"iamRole\\\":\\\"arn:aws:iam::test\\\",\\\"user\\\":\\\"test\\\"}]}\";\n+\n+    @Test\n+    public void testGetRawJSON()\n+    {\n+        final Response response = mockResponse(HttpStatus.OK, JSON_UTF_8, MOCK_MAPPINGS_RESPONSE);\n+        S3SecurityMappingConfig conf = new S3SecurityMappingConfig().setConfigFilePath(\"http://test:1234/api/endpoint\");\n+        UriBasedS3SecurityMappingsProvider provider =", "originalCommit": "908bfef8076aac93f3200e5f5bf5c8cb3264862f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4NjE3MA==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702786170", "bodyText": "Updated", "author": "cvs-mckinsey", "createdAt": "2021-09-06T10:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5NTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd68321332c9f2195d775ac5e14497ca93299ee6", "chunk": "diff --git a/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java b/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\nindex 1dfd29f7a6..86253c28af 100644\n--- a/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\n+++ b/plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java\n\n@@ -32,9 +32,7 @@ public class TestUriBasedS3SecurityMappingsProvider\n     {\n         final Response response = mockResponse(HttpStatus.OK, JSON_UTF_8, MOCK_MAPPINGS_RESPONSE);\n         S3SecurityMappingConfig conf = new S3SecurityMappingConfig().setConfigFilePath(\"http://test:1234/api/endpoint\");\n-        UriBasedS3SecurityMappingsProvider provider =\n-                new UriBasedS3SecurityMappingsProvider(conf,\n-                        new TestingHttpClient(request -> response));\n+        UriBasedS3SecurityMappingsProvider provider = new UriBasedS3SecurityMappingsProvider(conf, new TestingHttpClient(request -> response));\n         String result = provider.getRawJsonString();\n         assertEquals(result, MOCK_MAPPINGS_RESPONSE);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzEwOTQzMg==", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r707109432", "bodyText": "Please rename jsonStr to just json", "author": "kokosing", "createdAt": "2021-09-13T08:21:28Z", "path": "lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/util/JsonUtils.java", "diffHunk": "@@ -50,13 +57,30 @@ private JsonUtils() {}\n         }\n     }\n \n+    public static JsonNode parseJson(String jsonStr)", "originalCommit": "908bfef8076aac93f3200e5f5bf5c8cb3264862f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd68321332c9f2195d775ac5e14497ca93299ee6", "chunk": "diff --git a/lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/util/JsonUtils.java b/lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/util/JsonUtils.java\nindex 9229fe1fff..613eaafc0e 100644\n--- a/lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/util/JsonUtils.java\n+++ b/lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/util/JsonUtils.java\n\n@@ -57,10 +57,10 @@ public final class JsonUtils\n         }\n     }\n \n-    public static JsonNode parseJson(String jsonStr)\n+    public static JsonNode parseJson(String json)\n     {\n         try {\n-            return OBJECT_MAPPER.readTree(jsonStr);\n+            return OBJECT_MAPPER.readTree(json);\n         }\n         catch (IOException e) {\n             throw new UncheckedIOException(\"Could not parse JSON node from given byte array\", e);\n"}}, {"oid": "fd68321332c9f2195d775ac5e14497ca93299ee6", "url": "https://github.com/trinodb/trino/commit/fd68321332c9f2195d775ac5e14497ca93299ee6", "message": "Allow to fetch hive s3 mappings via http/s url\n\nSupport loading of s3 mappings via http/s url to be compatible with\nsecret-storage solutions like vault. The hive.s3.security-mapping\n.config-file property can now either point to a local file or a URL.\nFurthermore, add a JSON pointer attribute (hive.s3.security-mapping\n.json-pointer) for specifying a pointer (RFC-6901) inside the JSON file\nor result to get the mappings from.", "committedDate": "2021-09-13T13:43:12Z", "type": "commit"}, {"oid": "fd68321332c9f2195d775ac5e14497ca93299ee6", "url": "https://github.com/trinodb/trino/commit/fd68321332c9f2195d775ac5e14497ca93299ee6", "message": "Allow to fetch hive s3 mappings via http/s url\n\nSupport loading of s3 mappings via http/s url to be compatible with\nsecret-storage solutions like vault. The hive.s3.security-mapping\n.config-file property can now either point to a local file or a URL.\nFurthermore, add a JSON pointer attribute (hive.s3.security-mapping\n.json-pointer) for specifying a pointer (RFC-6901) inside the JSON file\nor result to get the mappings from.", "committedDate": "2021-09-13T13:43:12Z", "type": "forcePushed"}]}