{"pr_number": 5856, "pr_title": "Add data compression property to SQL Server tables", "pr_createdAt": "2020-11-06T12:55:12Z", "pr_url": "https://github.com/trinodb/trino/pull/5856", "timeline": [{"oid": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "url": "https://github.com/trinodb/trino/commit/ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "message": "Add data compression property to SQL Server tables", "committedDate": "2020-11-12T10:46:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDk2Nw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522380967", "bodyText": "testWithDataCompression -> testCreateWithDataCompression", "author": "findepi", "createdAt": "2020-11-12T19:52:30Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)", "originalCommit": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\nindex 7c26b7b8fe..e77620ddde 100644\n--- a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n+++ b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n\n@@ -324,27 +340,6 @@ public class TestSqlServerIntegrationSmokeTest\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n-    @DataProvider\n-    public Object[][] dataCompression()\n-    {\n-        return new Object[][] {\n-                {NONE},\n-                {ROW},\n-                {PAGE}\n-        };\n-    }\n-\n-    @Test(dataProvider = \"dataCompression\")\n-    public void testWithDataCompression(DataCompression dataCompression)\n-    {\n-        String tableName = \"test_create_\" + randomTableSuffix();\n-        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n-        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.\n-        assertQuery(\n-                format(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE t.name = '%s'\", tableName),\n-                format(\"VALUES '%s'\", dataCompression));\n-    }\n-\n     private String getLongInClause(int start, int length)\n     {\n         String longValues = range(start, start + length)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDk4OA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522380988", "bodyText": "test_create_ -> test_create_with_compression", "author": "findepi", "createdAt": "2020-11-12T19:52:31Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();", "originalCommit": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\nindex 7c26b7b8fe..e77620ddde 100644\n--- a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n+++ b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n\n@@ -324,27 +340,6 @@ public class TestSqlServerIntegrationSmokeTest\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n-    @DataProvider\n-    public Object[][] dataCompression()\n-    {\n-        return new Object[][] {\n-                {NONE},\n-                {ROW},\n-                {PAGE}\n-        };\n-    }\n-\n-    @Test(dataProvider = \"dataCompression\")\n-    public void testWithDataCompression(DataCompression dataCompression)\n-    {\n-        String tableName = \"test_create_\" + randomTableSuffix();\n-        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n-        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.\n-        assertQuery(\n-                format(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE t.name = '%s'\", tableName),\n-                format(\"VALUES '%s'\", dataCompression));\n-    }\n-\n     private String getLongInClause(int start, int length)\n     {\n         String longValues = range(start, start + length)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MTM1NQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522381355", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n          \n          \n            \n                    assertUpdate(format(\"CREATE TABLE %s (a bigint, b bigint) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));", "author": "findepi", "createdAt": "2020-11-12T19:53:14Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));", "originalCommit": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\nindex 7c26b7b8fe..e77620ddde 100644\n--- a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n+++ b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n\n@@ -324,27 +340,6 @@ public class TestSqlServerIntegrationSmokeTest\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n-    @DataProvider\n-    public Object[][] dataCompression()\n-    {\n-        return new Object[][] {\n-                {NONE},\n-                {ROW},\n-                {PAGE}\n-        };\n-    }\n-\n-    @Test(dataProvider = \"dataCompression\")\n-    public void testWithDataCompression(DataCompression dataCompression)\n-    {\n-        String tableName = \"test_create_\" + randomTableSuffix();\n-        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n-        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.\n-        assertQuery(\n-                format(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE t.name = '%s'\", tableName),\n-                format(\"VALUES '%s'\", dataCompression));\n-    }\n-\n     private String getLongInClause(int start, int length)\n     {\n         String longValues = range(start, start + length)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MTQ3NA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522381474", "bodyText": "drop the table too", "author": "findepi", "createdAt": "2020-11-12T19:53:29Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n+        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.\n+        assertQuery(\n+                format(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE t.name = '%s'\", tableName),\n+                format(\"VALUES '%s'\", dataCompression));\n+    }", "originalCommit": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\nindex 7c26b7b8fe..e77620ddde 100644\n--- a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n+++ b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n\n@@ -324,27 +340,6 @@ public class TestSqlServerIntegrationSmokeTest\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n-    @DataProvider\n-    public Object[][] dataCompression()\n-    {\n-        return new Object[][] {\n-                {NONE},\n-                {ROW},\n-                {PAGE}\n-        };\n-    }\n-\n-    @Test(dataProvider = \"dataCompression\")\n-    public void testWithDataCompression(DataCompression dataCompression)\n-    {\n-        String tableName = \"test_create_\" + randomTableSuffix();\n-        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n-        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.\n-        assertQuery(\n-                format(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE t.name = '%s'\", tableName),\n-                format(\"VALUES '%s'\", dataCompression));\n-    }\n-\n     private String getLongInClause(int start, int length)\n     {\n         String longValues = range(start, start + length)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3MjkyMQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524172921", "bodyText": "add\ncheckArgument(tableMetadata.getProperties().isEmpty(), \"Unsupported table properties: %s\", tableMetadata.getProperties());", "author": "findepi", "createdAt": "2020-11-16T11:45:23Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -492,7 +492,7 @@ protected JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorT\n         }\n     }\n \n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns)\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns,  ConnectorTableMetadata tableMetadata)", "originalCommit": "5203622f3b35d818be7e72f3e795cb8e6e34a8b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java b/presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java\nindex 6709021543..d8f2ca7499 100644\n--- a/presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java\n+++ b/presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java\n\n@@ -492,8 +505,9 @@ public abstract class BaseJdbcClient\n         }\n     }\n \n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns,  ConnectorTableMetadata tableMetadata)\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n     {\n+        checkArgument(tableMetadata.getProperties().isEmpty(), \"Unsupported table properties: %s\", tableMetadata.getProperties());\n         return format(\"CREATE TABLE %s (%s)\", quoted(remoteTableName), join(\", \", columns));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3OTU4NQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524179585", "bodyText": "This is correct because currently SQL Server does not seem to support enabling table compression by default for a schema or database. However, they can add in the future.\nTherefore today NONE is a good default, but can become a wrong choice without a code change on our part.\nLet's replace NONE with UNSET (or DEFAULT). Then do not add WITH (DATA_COMPRESSION clause when compression is the UNSET.\ncc @kokosing", "author": "findepi", "createdAt": "2020-11-16T11:51:28Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyOTgzMg==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524229832", "bodyText": "Correct me if I am wrong, NONE means no compression.\n\nLet's replace NONE with UNSET (or DEFAULT). Then do not add WITH (DATA_COMPRESSION clause when compression is the UNSET.\n\nLet's implement UNSET by not setting property value, so let's make it nullable and when it is null we should just use sql server system default behaviour.", "author": "kokosing", "createdAt": "2020-11-16T12:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3OTU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMDY2MA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524230660", "bodyText": "But when we run SHOW CREATE TABLE for any table from SQLServer we won't be able to capture the UNSET/DEFAULT rather we get only NONE. How can we handle in that situation ?", "author": "Praveen2112", "createdAt": "2020-11-16T12:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3OTU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\nindex 684da9775a..f01166048d 100644\n--- a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n+++ b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n\n@@ -240,32 +349,6 @@ public class SqlServerClient\n         return true;\n     }\n \n-    @Override\n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n-    {\n-        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n-    }\n-\n-    @Override\n-    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n-    {\n-        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n-\n-        try (Connection connection = connectionFactory.openConnection(identity);\n-                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n-            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n-            try (ResultSet resultSet = statement.executeQuery()) {\n-                if (resultSet.next()) {\n-                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));\n-                }\n-            }\n-        }\n-        catch (SQLException exception) {\n-            throw new PrestoException(JDBC_ERROR, exception);\n-        }\n-        return builder.build();\n-    }\n-\n     private static String singleQuote(String... objects)\n     {\n         return singleQuote(DOT_JOINER.join(objects));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MjkzOQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524182939", "bodyText": "This is not safe. Should SQL Server add new compression mode (say, \"BLOCK\"), we don't want to fail the method here. I'd rather return no property.\nalso, is there a test ensuring SHOW CREATE TABLE doesn't return unnecessary data_compression property for all tables now?", "author": "findepi", "createdAt": "2020-11-16T11:54:32Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {\n+                if (resultSet.next()) {\n+                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNjkxNw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524226917", "bodyText": "is there a test ensuring SHOW CREATE TABLE doesn't return unnecessary data_compression property for all tables now\n\nThat property will now be added. I think we should skip it when it is value is unknown (null), when it differs among paritions.", "author": "kokosing", "createdAt": "2020-11-16T12:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MjkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\nindex 684da9775a..f01166048d 100644\n--- a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n+++ b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n\n@@ -240,32 +349,6 @@ public class SqlServerClient\n         return true;\n     }\n \n-    @Override\n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n-    {\n-        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n-    }\n-\n-    @Override\n-    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n-    {\n-        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n-\n-        try (Connection connection = connectionFactory.openConnection(identity);\n-                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n-            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n-            try (ResultSet resultSet = statement.executeQuery()) {\n-                if (resultSet.next()) {\n-                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));\n-                }\n-            }\n-        }\n-        catch (SQLException exception) {\n-            throw new PrestoException(JDBC_ERROR, exception);\n-        }\n-        return builder.build();\n-    }\n-\n     private static String singleQuote(String... objects)\n     {\n         return singleQuote(DOT_JOINER.join(objects));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MzkwOA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524183908", "bodyText": "what if we get two rows? validate & fail in such a case, this means our query is wrong\nverify(!resultSet.next(), \"Unexpected second result row\");", "author": "findepi", "createdAt": "2020-11-16T11:55:26Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {\n+                if (resultSet.next()) {", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\nindex 684da9775a..f01166048d 100644\n--- a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n+++ b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n\n@@ -240,32 +349,6 @@ public class SqlServerClient\n         return true;\n     }\n \n-    @Override\n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n-    {\n-        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n-    }\n-\n-    @Override\n-    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n-    {\n-        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n-\n-        try (Connection connection = connectionFactory.openConnection(identity);\n-                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n-            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n-            try (ResultSet resultSet = statement.executeQuery()) {\n-                if (resultSet.next()) {\n-                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));\n-                }\n-            }\n-        }\n-        catch (SQLException exception) {\n-            throw new PrestoException(JDBC_ERROR, exception);\n-        }\n-        return builder.build();\n-    }\n-\n     private static String singleQuote(String... objects)\n     {\n         return singleQuote(DOT_JOINER.join(objects));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524185257", "bodyText": "As you explained to me offline, the SQL Server treats table with single partition as an unpartitioned table.\nIs there a guarantee that the only partition will have partition_number=1?\nAlso, in case of a partitioned table, we should not return compression info from the first partition.", "author": "findepi", "createdAt": "2020-11-16T11:56:42Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjk5NQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524232995", "bodyText": "From their documentation it looks like they set partition_number as 1 for non-partitioned tables.\nRef : https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-partitions-transact-sql?view=sql-server-ver15", "author": "Praveen2112", "createdAt": "2020-11-16T12:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MDExNw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524270117", "bodyText": "This answers the first question.", "author": "findepi", "createdAt": "2020-11-16T13:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMDgwMg==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544120802", "bodyText": "From their docs it looks like 1 is used only for non-partitioned tables", "author": "Praveen2112", "createdAt": "2020-12-16T08:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\nindex 684da9775a..f01166048d 100644\n--- a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n+++ b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n\n@@ -240,32 +349,6 @@ public class SqlServerClient\n         return true;\n     }\n \n-    @Override\n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n-    {\n-        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n-    }\n-\n-    @Override\n-    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n-    {\n-        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n-\n-        try (Connection connection = connectionFactory.openConnection(identity);\n-                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n-            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n-            try (ResultSet resultSet = statement.executeQuery()) {\n-                if (resultSet.next()) {\n-                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));\n-                }\n-            }\n-        }\n-        catch (SQLException exception) {\n-            throw new PrestoException(JDBC_ERROR, exception);\n-        }\n-        return builder.build();\n-    }\n-\n     private static String singleQuote(String... objects)\n     {\n         return singleQuote(DOT_JOINER.join(objects));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NjU5OQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524186599", "bodyText": "Wonder why we need to specify the default twice -- above and here.", "author": "findepi", "createdAt": "2020-11-16T11:57:56Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerTableProperties.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.jdbc.TablePropertiesProvider;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.prestosql.plugin.sqlserver.DataCompression.NONE;\n+import static io.prestosql.spi.session.PropertyMetadata.enumProperty;\n+\n+public class SqlServerTableProperties\n+        implements TablePropertiesProvider\n+{\n+    public static final String DATA_COMPRESSION = \"data_compression\";\n+\n+    private final List<PropertyMetadata<?>> tableProperties = ImmutableList.of(\n+            enumProperty(\n+                    DATA_COMPRESSION,\n+                    \"DataCompression type for table\",\n+                    DataCompression.class,\n+                    NONE,\n+                    false));\n+\n+    @Override\n+    public List<PropertyMetadata<?>> getTableProperties()\n+    {\n+        return tableProperties;\n+    }\n+\n+    public static DataCompression getDataCompression(Map<String, Object> tableProperties)\n+    {\n+        return (DataCompression) tableProperties.getOrDefault(DATA_COMPRESSION, NONE);", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerTableProperties.java b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerTableProperties.java\ndeleted file mode 100644\nindex 3a5a3f7350..0000000000\n--- a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerTableProperties.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.prestosql.plugin.sqlserver;\n-\n-import com.google.common.collect.ImmutableList;\n-import io.prestosql.plugin.jdbc.TablePropertiesProvider;\n-import io.prestosql.spi.session.PropertyMetadata;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import static io.prestosql.plugin.sqlserver.DataCompression.NONE;\n-import static io.prestosql.spi.session.PropertyMetadata.enumProperty;\n-\n-public class SqlServerTableProperties\n-        implements TablePropertiesProvider\n-{\n-    public static final String DATA_COMPRESSION = \"data_compression\";\n-\n-    private final List<PropertyMetadata<?>> tableProperties = ImmutableList.of(\n-            enumProperty(\n-                    DATA_COMPRESSION,\n-                    \"DataCompression type for table\",\n-                    DataCompression.class,\n-                    NONE,\n-                    false));\n-\n-    @Override\n-    public List<PropertyMetadata<?>> getTableProperties()\n-    {\n-        return tableProperties;\n-    }\n-\n-    public static DataCompression getDataCompression(Map<String, Object> tableProperties)\n-    {\n-        return (DataCompression) tableProperties.getOrDefault(DATA_COMPRESSION, NONE);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NzM4MQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524187381", "bodyText": "nit: i'd put this below the test method, but up to you", "author": "findepi", "createdAt": "2020-11-16T11:58:43Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +323,36 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\nindex b62e113aca..e77620ddde 100644\n--- a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n+++ b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n\n@@ -323,36 +340,6 @@ public class TestSqlServerIntegrationSmokeTest\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n-    @DataProvider\n-    public Object[][] dataCompression()\n-    {\n-        return new Object[][] {\n-                {NONE},\n-                {ROW},\n-                {PAGE}\n-        };\n-    }\n-\n-    @Test(dataProvider = \"dataCompression\")\n-    public void testCreateWithDataCompression(DataCompression dataCompression)\n-    {\n-        String tableName = \"test_create_with_compression_\" + randomTableSuffix();\n-        String createQuery = format(\"CREATE TABLE sqlserver.dbo.%s (\\n\" +\n-                        \"   a bigint,\\n\" +\n-                        \"   b bigint\\n\" +\n-                        \")\\n\" +\n-                        \"WITH (\\n\" +\n-                        \"   data_compression = '%s'\\n\" +\n-                        \")\",\n-                tableName,\n-                dataCompression);\n-        assertUpdate(createQuery);\n-\n-        assertEquals(getQueryRunner().execute(\"SHOW CREATE TABLE \" + tableName).getOnlyValue(), createQuery);\n-\n-        assertUpdate(\"DROP TABLE \" + tableName);\n-    }\n-\n     private String getLongInClause(int start, int length)\n     {\n         String longValues = range(start, start + length)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyMjI0Mw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524222243", "bodyText": "you might want to replace multiple subsequent white characters in to a single space, then value of createQuery would be easier to maintain.", "author": "kokosing", "createdAt": "2020-11-16T12:31:50Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +323,36 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testCreateWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_with_compression_\" + randomTableSuffix();\n+        String createQuery = format(\"CREATE TABLE sqlserver.dbo.%s (\\n\" +\n+                        \"   a bigint,\\n\" +\n+                        \"   b bigint\\n\" +\n+                        \")\\n\" +\n+                        \"WITH (\\n\" +\n+                        \"   data_compression = '%s'\\n\" +\n+                        \")\",\n+                tableName,\n+                dataCompression);\n+        assertUpdate(createQuery);\n+\n+        assertEquals(getQueryRunner().execute(\"SHOW CREATE TABLE \" + tableName).getOnlyValue(), createQuery);", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\nindex b62e113aca..e77620ddde 100644\n--- a/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n+++ b/presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java\n\n@@ -323,36 +340,6 @@ public class TestSqlServerIntegrationSmokeTest\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n-    @DataProvider\n-    public Object[][] dataCompression()\n-    {\n-        return new Object[][] {\n-                {NONE},\n-                {ROW},\n-                {PAGE}\n-        };\n-    }\n-\n-    @Test(dataProvider = \"dataCompression\")\n-    public void testCreateWithDataCompression(DataCompression dataCompression)\n-    {\n-        String tableName = \"test_create_with_compression_\" + randomTableSuffix();\n-        String createQuery = format(\"CREATE TABLE sqlserver.dbo.%s (\\n\" +\n-                        \"   a bigint,\\n\" +\n-                        \"   b bigint\\n\" +\n-                        \")\\n\" +\n-                        \"WITH (\\n\" +\n-                        \"   data_compression = '%s'\\n\" +\n-                        \")\",\n-                tableName,\n-                dataCompression);\n-        assertUpdate(createQuery);\n-\n-        assertEquals(getQueryRunner().execute(\"SHOW CREATE TABLE \" + tableName).getOnlyValue(), createQuery);\n-\n-        assertUpdate(\"DROP TABLE \" + tableName);\n-    }\n-\n     private String getLongInClause(int start, int length)\n     {\n         String longValues = range(start, start + length)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNTg2NA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524225864", "bodyText": "jdbi3?", "author": "kokosing", "createdAt": "2020-11-16T12:35:16Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0MjU5NA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524242594", "bodyText": "But for using JDBI we might need inject a ConnectionProvider but for fetching a connection we need to JdbcIdentity", "author": "Praveen2112", "createdAt": "2020-11-16T12:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MDgxMA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524270810", "bodyText": "i didn't quite get it. Anyway, you can attach jdbi to an existing connector.", "author": "findepi", "createdAt": "2020-11-16T13:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNTg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "chunk": "diff --git a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\nindex 684da9775a..f01166048d 100644\n--- a/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n+++ b/presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java\n\n@@ -240,32 +349,6 @@ public class SqlServerClient\n         return true;\n     }\n \n-    @Override\n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n-    {\n-        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n-    }\n-\n-    @Override\n-    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n-    {\n-        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n-\n-        try (Connection connection = connectionFactory.openConnection(identity);\n-                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n-            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n-            try (ResultSet resultSet = statement.executeQuery()) {\n-                if (resultSet.next()) {\n-                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));\n-                }\n-            }\n-        }\n-        catch (SQLException exception) {\n-            throw new PrestoException(JDBC_ERROR, exception);\n-        }\n-        return builder.build();\n-    }\n-\n     private static String singleQuote(String... objects)\n     {\n         return singleQuote(DOT_JOINER.join(objects));\n"}}, {"oid": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "url": "https://github.com/trinodb/trino/commit/0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "message": "Allow JDBC connector to set table property", "committedDate": "2020-12-17T09:22:43Z", "type": "commit"}, {"oid": "3ac9eabbfac47a061afc6716f864ce912fe6130f", "url": "https://github.com/trinodb/trino/commit/3ac9eabbfac47a061afc6716f864ce912fe6130f", "message": "Add data compression property to SQL Server tables", "committedDate": "2020-12-17T09:52:52Z", "type": "commit"}, {"oid": "3ac9eabbfac47a061afc6716f864ce912fe6130f", "url": "https://github.com/trinodb/trino/commit/3ac9eabbfac47a061afc6716f864ce912fe6130f", "message": "Add data compression property to SQL Server tables", "committedDate": "2020-12-17T09:52:52Z", "type": "forcePushed"}]}