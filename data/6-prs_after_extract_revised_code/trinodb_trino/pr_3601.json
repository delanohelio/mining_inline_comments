{"pr_number": 3601, "pr_title": "Quote column name in Phoenix CREATE TABLE statement", "pr_createdAt": "2020-05-03T04:27:55Z", "pr_url": "https://github.com/trinodb/trino/pull/3601", "timeline": [{"oid": "acd1cfa40465b9a34f434e822bc0249722d6915c", "url": "https://github.com/trinodb/trino/commit/acd1cfa40465b9a34f434e822bc0249722d6915c", "message": "Quote column name in Phoenix CREATE TABLE statement\n\nAdditionally, enable testColumnName test in Phoenix.", "committedDate": "2020-05-05T12:36:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTgxMQ==", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r447069811", "bodyText": "@vincentpoon should we go thru toMetadataCasing here before calling getEscapedArgument?", "author": "findepi", "createdAt": "2020-06-29T15:43:56Z", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "diffHunk": "@@ -351,7 +351,7 @@ private JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorTab\n                     typeStatement += \" not null\";\n                     pkNames.add(columnName);\n                 }\n-                columnList.add(format(\"%s %s\", columnName, typeStatement));\n+                columnList.add(format(\"%s %s\", getEscapedArgument(columnName), typeStatement));", "originalCommit": "acd1cfa40465b9a34f434e822bc0249722d6915c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3NzQzOA==", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r447177438", "bodyText": "Hmm this code doesn't look right to me (I think it was from another PR I based my original one off of).  Firstly, connection.getMetaData().storesUpperCaseIdentifiers() would always return true, so the method toMetadataCasing isn't really needed.\nPhoenix uppercases identifiers if they aren't quoted.\nIf they are quoted, then it's case sensitive.\nIs there a way for us to tell in Presto whether the user quoted the identifier or not?  Because it seems we should base the uppercase decision off that.", "author": "vincentpoon", "createdAt": "2020-06-29T18:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MjU4NQ==", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r447242585", "bodyText": "Is there a way for us to tell in Presto whether the user quoted the identifier or not? Because it seems we should base the uppercase decision off that.\n\nnot yet,  working on that -- #17", "author": "findepi", "createdAt": "2020-06-29T20:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf8c7e5ee566554703eda2cd768b966233287df1", "chunk": "diff --git a/presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java b/presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java\nindex 6334e9293e..01969f967c 100644\n--- a/presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java\n+++ b/presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java\n\n@@ -304,90 +221,15 @@ public class PhoenixMetadata\n         phoenixClient.dropTable(JdbcIdentity.from(session), (JdbcTableHandle) tableHandle);\n     }\n \n-    private JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorTableMetadata tableMetadata)\n-    {\n-        SchemaTableName schemaTableName = tableMetadata.getTable();\n-        Optional<String> schema = Optional.of(schemaTableName.getSchemaName());\n-        String table = schemaTableName.getTableName();\n-\n-        if (!phoenixClient.getSchemaNames(JdbcIdentity.from(session)).contains(schema.orElse(null))) {\n-            throw new SchemaNotFoundException(schema.orElse(null));\n-        }\n-\n-        try (Connection connection = phoenixClient.getConnection(JdbcIdentity.from(session))) {\n-            boolean uppercase = connection.getMetaData().storesUpperCaseIdentifiers();\n-            if (uppercase) {\n-                schema = schema.map(schemaName -> schemaName.toUpperCase(ENGLISH));\n-                table = table.toUpperCase(ENGLISH);\n-            }\n-            schema = toPhoenixSchemaName(schema);\n-            LinkedList<ColumnMetadata> tableColumns = new LinkedList<>(tableMetadata.getColumns());\n-            Map<String, Object> tableProperties = tableMetadata.getProperties();\n-            Optional<Boolean> immutableRows = PhoenixTableProperties.getImmutableRows(tableProperties);\n-            String immutable = immutableRows.isPresent() && immutableRows.get() ? \"IMMUTABLE\" : \"\";\n-\n-            ImmutableList.Builder<String> columnNames = ImmutableList.builder();\n-            ImmutableList.Builder<Type> columnTypes = ImmutableList.builder();\n-            ImmutableList.Builder<String> columnList = ImmutableList.builder();\n-            Set<ColumnMetadata> rowkeyColumns = tableColumns.stream().filter(col -> isPrimaryKey(col, tableProperties)).collect(toSet());\n-            ImmutableList.Builder<String> pkNames = ImmutableList.builder();\n-            boolean hasUUIDRowkey = false;\n-            if (rowkeyColumns.isEmpty()) {\n-                // Add a rowkey when not specified in DDL\n-                columnList.add(ROWKEY + \" bigint not null\");\n-                pkNames.add(ROWKEY);\n-                phoenixClient.execute(session, format(\"CREATE SEQUENCE %s\", getEscapedTableName(schema, table + \"_sequence\")));\n-                hasUUIDRowkey = true;\n-            }\n-            for (ColumnMetadata column : tableColumns) {\n-                String columnName = column.getName();\n-                if (uppercase) {\n-                    columnName = columnName.toUpperCase(ENGLISH);\n-                }\n-                columnNames.add(columnName);\n-                columnTypes.add(column.getType());\n-                String typeStatement = phoenixClient.toWriteMapping(session, column.getType()).getDataType();\n-                if (rowkeyColumns.contains(column)) {\n-                    typeStatement += \" not null\";\n-                    pkNames.add(columnName);\n-                }\n-                columnList.add(format(\"%s %s\", getEscapedArgument(columnName), typeStatement));\n-            }\n-\n-            ImmutableList.Builder<String> tableOptions = ImmutableList.builder();\n-            PhoenixTableProperties.getSaltBuckets(tableProperties).ifPresent(value -> tableOptions.add(TableProperty.SALT_BUCKETS + \"=\" + value));\n-            PhoenixTableProperties.getSplitOn(tableProperties).ifPresent(value -> tableOptions.add(\"SPLIT ON (\" + value.replace('\"', '\\'') + \")\"));\n-            PhoenixTableProperties.getDisableWal(tableProperties).ifPresent(value -> tableOptions.add(TableProperty.DISABLE_WAL + \"=\" + value));\n-            PhoenixTableProperties.getDefaultColumnFamily(tableProperties).ifPresent(value -> tableOptions.add(TableProperty.DEFAULT_COLUMN_FAMILY + \"=\" + value));\n-            PhoenixTableProperties.getBloomfilter(tableProperties).ifPresent(value -> tableOptions.add(HColumnDescriptor.BLOOMFILTER + \"='\" + value + \"'\"));\n-            PhoenixTableProperties.getVersions(tableProperties).ifPresent(value -> tableOptions.add(HConstants.VERSIONS + \"=\" + value));\n-            PhoenixTableProperties.getMinVersions(tableProperties).ifPresent(value -> tableOptions.add(HColumnDescriptor.MIN_VERSIONS + \"=\" + value));\n-            PhoenixTableProperties.getCompression(tableProperties).ifPresent(value -> tableOptions.add(HColumnDescriptor.COMPRESSION + \"='\" + value + \"'\"));\n-            PhoenixTableProperties.getTimeToLive(tableProperties).ifPresent(value -> tableOptions.add(HColumnDescriptor.TTL + \"=\" + value));\n-\n-            String sql = format(\n-                    \"CREATE %s TABLE %s (%s , CONSTRAINT PK PRIMARY KEY (%s)) %s\",\n-                    immutable,\n-                    getEscapedTableName(schema, table),\n-                    join(\", \", columnList.build()),\n-                    join(\", \", pkNames.build()),\n-                    join(\", \", tableOptions.build()));\n-\n-            phoenixClient.execute(session, sql);\n-\n-            return new PhoenixOutputTableHandle(\n-                    schema,\n-                    table,\n-                    columnNames.build(),\n-                    columnTypes.build(),\n-                    Optional.empty(),\n-                    hasUUIDRowkey);\n-        }\n-        catch (SQLException e) {\n-            if (e.getErrorCode() == SQLExceptionCode.TABLE_ALREADY_EXIST.getErrorCode()) {\n-                throw new PrestoException(ALREADY_EXISTS, \"Phoenix table already exists\", e);\n-            }\n-            throw new PrestoException(PHOENIX_METADATA_ERROR, \"Error creating Phoenix table\", e);\n-        }\n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        // TODO support aggregation pushdown\n+        return Optional.empty();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3Mjg2MA==", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r447072860", "bodyText": "Leave some TODO comment still.\nCurrently the \" in column name leads to SQL injection.\nUse of a\"quote column should produce a reasonable exception message like \"Invalid column name\" or \"Column name cannot contain a quotation sign\".  Then, here you should verify the actual exception message.", "author": "findepi", "createdAt": "2020-06-29T15:48:27Z", "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "diffHunk": "@@ -134,10 +134,9 @@ public void testCreateSchema()\n     }\n \n     @Override\n-    public void testColumnName(String columnName)\n+    protected boolean isColumnNameRejected(Exception exception, String columnName, boolean delimited)\n     {\n-        // TODO (https://github.com/prestosql/presto/issues/3466) Phoenix generally lacks quoting in underlying queries\n-        throw new SkipException(\"TODO\");\n+        return columnName.equals(\"a\\\"quote\");", "originalCommit": "acd1cfa40465b9a34f434e822bc0249722d6915c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf8c7e5ee566554703eda2cd768b966233287df1", "chunk": "diff --git a/presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java b/presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java\nindex 4db5182cfd..9dd2545b8c 100644\n--- a/presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java\n+++ b/presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java\n\n@@ -120,13 +133,6 @@ public class TestPhoenixDistributedQueries\n         assertUpdate(\"DROP TABLE test_insert\");\n     }\n \n-    @Override\n-    public void testCommentTable()\n-    {\n-        // Phoenix connector currently does not support comment on table\n-        assertQueryFails(\"COMMENT ON TABLE orders IS 'hello'\", \"This connector does not support setting table comments\");\n-    }\n-\n     @Override\n     public void testCreateSchema()\n     {\n"}}, {"oid": "cf8c7e5ee566554703eda2cd768b966233287df1", "url": "https://github.com/trinodb/trino/commit/cf8c7e5ee566554703eda2cd768b966233287df1", "message": "Quote column name in Phoenix CREATE TABLE statement\n\nAdditionally, enable testColumnName test in Phoenix.", "committedDate": "2020-10-04T15:46:36Z", "type": "commit"}, {"oid": "cf8c7e5ee566554703eda2cd768b966233287df1", "url": "https://github.com/trinodb/trino/commit/cf8c7e5ee566554703eda2cd768b966233287df1", "message": "Quote column name in Phoenix CREATE TABLE statement\n\nAdditionally, enable testColumnName test in Phoenix.", "committedDate": "2020-10-04T15:46:36Z", "type": "forcePushed"}]}