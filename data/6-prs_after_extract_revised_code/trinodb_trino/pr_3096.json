{"pr_number": 3096, "pr_title": "Use testcontainers for kudu unit tests", "pr_createdAt": "2020-03-14T17:22:07Z", "pr_url": "https://github.com/trinodb/trino/pull/3096", "timeline": [{"oid": "25e05c33f56f2892c313114ed8244129b284ccae", "url": "https://github.com/trinodb/trino/commit/25e05c33f56f2892c313114ed8244129b284ccae", "message": "Use testcontainers for kudu unit tests", "committedDate": "2020-03-14T17:33:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjAzMA==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392606030", "bodyText": "Move this above, to be directly after createQueryRunner", "author": "electrum", "createdAt": "2020-03-14T17:46:32Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java", "diffHunk": "@@ -99,6 +103,13 @@ private void doTestCreateTableWithDecimalColumn(TestDecimal decimal)\n         assertEquals(0, actual, 0.3 * Math.pow(0.1, decimal.scale), \"p=\" + decimal.precision + \",s=\" + decimal.scale + \" => \" + actual + \",insert = \" + insertValue);\n     }\n \n+    @AfterClass(alwaysRun = true)", "originalCommit": "25e05c33f56f2892c313114ed8244129b284ccae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTAxMQ==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393731011", "bodyText": "ping", "author": "kokosing", "createdAt": "2020-03-17T14:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjAzMA=="}], "type": "inlineReview", "revised_code": {"commit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java\nindex 1a9e92cd4e..3a01ae5e93 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java\n\n@@ -103,13 +109,6 @@ public class TestKuduIntegrationDecimalColumns\n         assertEquals(0, actual, 0.3 * Math.pow(0.1, decimal.scale), \"p=\" + decimal.precision + \",s=\" + decimal.scale + \" => \" + actual + \",insert = \" + insertValue);\n     }\n \n-    @AfterClass(alwaysRun = true)\n-    public final void destroy()\n-    {\n-        getQueryRunner().close();\n-        kuduServer.close();\n-    }\n-\n     static class TestDecimal\n     {\n         final int precision;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjA1NA==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392606054", "bodyText": "This isn't needed as AbstractTestQueryFramework will close the returned query runner", "author": "electrum", "createdAt": "2020-03-14T17:47:02Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java", "diffHunk": "@@ -99,6 +103,13 @@ private void doTestCreateTableWithDecimalColumn(TestDecimal decimal)\n         assertEquals(0, actual, 0.3 * Math.pow(0.1, decimal.scale), \"p=\" + decimal.precision + \",s=\" + decimal.scale + \" => \" + actual + \",insert = \" + insertValue);\n     }\n \n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        getQueryRunner().close();", "originalCommit": "25e05c33f56f2892c313114ed8244129b284ccae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTExOQ==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393731119", "bodyText": "ping", "author": "kokosing", "createdAt": "2020-03-17T14:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java\nindex 1a9e92cd4e..3a01ae5e93 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java\n\n@@ -103,13 +109,6 @@ public class TestKuduIntegrationDecimalColumns\n         assertEquals(0, actual, 0.3 * Math.pow(0.1, decimal.scale), \"p=\" + decimal.precision + \",s=\" + decimal.scale + \" => \" + actual + \",insert = \" + insertValue);\n     }\n \n-    @AfterClass(alwaysRun = true)\n-    public final void destroy()\n-    {\n-        getQueryRunner().close();\n-        kuduServer.close();\n-    }\n-\n     static class TestDecimal\n     {\n         final int precision;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjE2OQ==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392606169", "bodyText": "Let's move this method above and fix it by removing the redundant query runner close and the drop table. (no point in dropping since this is a temporary server we are about to destroy)", "author": "electrum", "createdAt": "2020-03-14T17:48:50Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationSmoke.java", "diffHunk": "@@ -136,5 +139,6 @@ public final void destroy()\n     {\n         assertUpdate(\"DROP TABLE \" + ORDERS.getTableName());\n         getQueryRunner().close();\n+        kuduServer.close();", "originalCommit": "25e05c33f56f2892c313114ed8244129b284ccae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationSmoke.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java\nsimilarity index 94%\nrename from presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationSmoke.java\nrename to presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java\nindex f18f0ade9a..c9628b7bd8 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationSmoke.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java\n\n@@ -133,12 +142,4 @@ public class TestKuduIntegrationSmoke\n         assertTrue(Pattern.compile(key + \"\\\\s*=\\\\s*\" + regexValue + \",?\\\\s+\").matcher(tableProperties).find(),\n                 \"Not found: \" + key + \" = \" + regexValue + \" in \" + tableProperties);\n     }\n-\n-    @AfterClass(alwaysRun = true)\n-    public final void destroy()\n-    {\n-        assertUpdate(\"DROP TABLE \" + ORDERS.getTableName());\n-        getQueryRunner().close();\n-        kuduServer.close();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTUyOA==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611528", "bodyText": "Accept HostAndPort instead of String", "author": "kokosing", "createdAt": "2020-03-14T19:06:30Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java", "diffHunk": "@@ -98,20 +98,19 @@ private static String getSchemaEmulationPrefix()\n         return prefix;\n     }\n \n-    private static void installKuduConnector(QueryRunner runner, String schema)\n+    private static void installKuduConnector(String masterAddress, QueryRunner runner, String schema)", "originalCommit": "25e05c33f56f2892c313114ed8244129b284ccae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java\nindex 5475fcfc59..41a4c9bd9c 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java\n\n@@ -81,44 +82,27 @@ public final class KuduQueryRunnerFactory\n         }\n     }\n \n-    private static boolean isSchemaEmulationEnabled()\n-    {\n-        return getSchemaEmulationPrefix() != null;\n-    }\n-\n-    private static String getSchemaEmulationPrefix()\n-    {\n-        String prefix = System.getProperty(\"kudu.schema-emulation.prefix\");\n-        if (prefix == null || prefix.equals(\"null\")) {\n-            return null;\n-        }\n-        if (prefix.isEmpty()) {\n-            return \"\";\n-        }\n-        return prefix;\n-    }\n-\n-    private static void installKuduConnector(String masterAddress, QueryRunner runner, String schema)\n+    private static void installKuduConnector(HostAndPort masterAddress, QueryRunner runner, String kuduSchema, Optional<String> kuduSchemaEmulationPrefix)\n     {\n         Map<String, String> properties;\n-        if (!isSchemaEmulationEnabled()) {\n+        if (kuduSchemaEmulationPrefix.isPresent()) {\n             properties = ImmutableMap.of(\n-                    \"kudu.schema-emulation.enabled\", \"false\",\n-                    \"kudu.client.master-addresses\", masterAddress);\n+                    \"kudu.schema-emulation.enabled\", \"true\",\n+                    \"kudu.schema-emulation.prefix\", kuduSchemaEmulationPrefix.get(),\n+                    \"kudu.client.master-addresses\", masterAddress.toString());\n         }\n         else {\n             properties = ImmutableMap.of(\n-                    \"kudu.schema-emulation.enabled\", \"true\",\n-                    \"kudu.schema-emulation.prefix\", getSchemaEmulationPrefix(),\n-                    \"kudu.client.master-addresses\", masterAddress);\n+                    \"kudu.schema-emulation.enabled\", \"false\",\n+                    \"kudu.client.master-addresses\", masterAddress.toString());\n         }\n \n         runner.installPlugin(new KuduPlugin());\n         runner.createCatalog(\"kudu\", \"kudu\", properties);\n \n-        if (isSchemaEmulationEnabled()) {\n-            runner.execute(\"DROP SCHEMA IF EXISTS \" + schema);\n-            runner.execute(\"CREATE SCHEMA \" + schema);\n+        if (kuduSchemaEmulationPrefix.isPresent()) {\n+            runner.execute(\"DROP SCHEMA IF EXISTS \" + kuduSchema);\n+            runner.execute(\"CREATE SCHEMA \" + kuduSchema);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTU5NA==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611594", "bodyText": "No need for this log.", "author": "kokosing", "createdAt": "2020-03-14T19:07:41Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.net.HostAndPort;\n+import io.airlift.log.Logger;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+\n+import static com.google.common.io.Resources.getResource;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static Logger log = Logger.get(KuduServer.class);\n+\n+    private static final int KUDU_MASTER_PORT = 7051;\n+    private static final int KUDU_TSERVER_PORT = 7050;\n+\n+    private final DockerComposeContainer<?> dockerComposeContainer;\n+\n+    public KuduServer()\n+    {\n+        log.info(\"Starting kudu...\");", "originalCommit": "25e05c33f56f2892c313114ed8244129b284ccae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java\ndeleted file mode 100644\nindex 5d36b33e83..0000000000\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.prestosql.plugin.kudu;\n-\n-import com.google.common.net.HostAndPort;\n-import io.airlift.log.Logger;\n-import org.testcontainers.containers.DockerComposeContainer;\n-\n-import java.io.Closeable;\n-import java.io.File;\n-\n-import static com.google.common.io.Resources.getResource;\n-\n-public class KuduServer\n-        implements Closeable\n-{\n-    private static Logger log = Logger.get(KuduServer.class);\n-\n-    private static final int KUDU_MASTER_PORT = 7051;\n-    private static final int KUDU_TSERVER_PORT = 7050;\n-\n-    private final DockerComposeContainer<?> dockerComposeContainer;\n-\n-    public KuduServer()\n-    {\n-        log.info(\"Starting kudu...\");\n-        dockerComposeContainer = new DockerComposeContainer(new File(getResource(\"docker-compose.yml\").getFile()))\n-                .withExposedService(\"kudu-master_1\", KUDU_MASTER_PORT)\n-                .withExposedService(\"kudu-tserver_1\", KUDU_TSERVER_PORT);\n-        dockerComposeContainer.start();\n-    }\n-\n-    public HostAndPort getMasterAddress()\n-    {\n-        return HostAndPort.fromParts(\n-                dockerComposeContainer.getServiceHost(\"kudu-master_1\", KUDU_MASTER_PORT),\n-                dockerComposeContainer.getServicePort(\"kudu-master_1\", KUDU_MASTER_PORT));\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        dockerComposeContainer.close();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTYzOA==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611638", "bodyText": "I would prefer to have two DockerContainer instances here instead of using docker-compose. See: io.prestosql.tests.product.launcher.env.common.Standard", "author": "kokosing", "createdAt": "2020-03-14T19:08:08Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.net.HostAndPort;\n+import io.airlift.log.Logger;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+\n+import static com.google.common.io.Resources.getResource;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static Logger log = Logger.get(KuduServer.class);\n+\n+    private static final int KUDU_MASTER_PORT = 7051;\n+    private static final int KUDU_TSERVER_PORT = 7050;\n+\n+    private final DockerComposeContainer<?> dockerComposeContainer;\n+\n+    public KuduServer()\n+    {\n+        log.info(\"Starting kudu...\");\n+        dockerComposeContainer = new DockerComposeContainer(new File(getResource(\"docker-compose.yml\").getFile()))", "originalCommit": "25e05c33f56f2892c313114ed8244129b284ccae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java\ndeleted file mode 100644\nindex 5d36b33e83..0000000000\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.prestosql.plugin.kudu;\n-\n-import com.google.common.net.HostAndPort;\n-import io.airlift.log.Logger;\n-import org.testcontainers.containers.DockerComposeContainer;\n-\n-import java.io.Closeable;\n-import java.io.File;\n-\n-import static com.google.common.io.Resources.getResource;\n-\n-public class KuduServer\n-        implements Closeable\n-{\n-    private static Logger log = Logger.get(KuduServer.class);\n-\n-    private static final int KUDU_MASTER_PORT = 7051;\n-    private static final int KUDU_TSERVER_PORT = 7050;\n-\n-    private final DockerComposeContainer<?> dockerComposeContainer;\n-\n-    public KuduServer()\n-    {\n-        log.info(\"Starting kudu...\");\n-        dockerComposeContainer = new DockerComposeContainer(new File(getResource(\"docker-compose.yml\").getFile()))\n-                .withExposedService(\"kudu-master_1\", KUDU_MASTER_PORT)\n-                .withExposedService(\"kudu-tserver_1\", KUDU_TSERVER_PORT);\n-        dockerComposeContainer.start();\n-    }\n-\n-    public HostAndPort getMasterAddress()\n-    {\n-        return HostAndPort.fromParts(\n-                dockerComposeContainer.getServiceHost(\"kudu-master_1\", KUDU_MASTER_PORT),\n-                dockerComposeContainer.getServicePort(\"kudu-master_1\", KUDU_MASTER_PORT));\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        dockerComposeContainer.close();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTY3NQ==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611675", "bodyText": "same comemnts", "author": "kokosing", "createdAt": "2020-03-14T19:08:54Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java", "diffHunk": "@@ -79,4 +83,11 @@ private void doTestCreateTable(String tableName, @Language(\"SQL\") String createT\n         MaterializedResult result = computeActual(\"SELECT id FROM \" + tableName);\n         assertEquals(result.getRowCount(), 1);\n     }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        getQueryRunner().close();", "originalCommit": "25e05c33f56f2892c313114ed8244129b284ccae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java\nindex 172bb30190..427373ecc9 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java\n\n@@ -83,11 +89,4 @@ public class TestKuduIntegrationHashPartitioning\n         MaterializedResult result = computeActual(\"SELECT id FROM \" + tableName);\n         assertEquals(result.getRowCount(), 1);\n     }\n-\n-    @AfterClass(alwaysRun = true)\n-    public final void destroy()\n-    {\n-        getQueryRunner().close();\n-        kuduServer.close();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTY4Nw==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611687", "bodyText": "ditto", "author": "kokosing", "createdAt": "2020-03-14T19:09:02Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationIntegerColumns.java", "diffHunk": "@@ -92,6 +96,13 @@ private void doTestCreateTableWithIntegerColumn(TestInt test)\n         }\n     }\n \n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        getQueryRunner().close();", "originalCommit": "25e05c33f56f2892c313114ed8244129b284ccae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationIntegerColumns.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationIntegerColumns.java\nindex fce9adb9d8..1278105ef8 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationIntegerColumns.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationIntegerColumns.java\n\n@@ -96,13 +102,6 @@ public class TestKuduIntegrationIntegerColumns\n         }\n     }\n \n-    @AfterClass(alwaysRun = true)\n-    public final void destroy()\n-    {\n-        getQueryRunner().close();\n-        kuduServer.close();\n-    }\n-\n     static class TestInt\n     {\n         final String type;\n"}}, {"oid": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "url": "https://github.com/trinodb/trino/commit/2d0fea98b17f0140591a2b221e8805c93c72dcf1", "message": "Use testcontainers for kudu unit tests", "committedDate": "2020-03-18T03:33:02Z", "type": "forcePushed"}, {"oid": "68ced55dfdd21cee7cdcba025793abc0c1bd8c89", "url": "https://github.com/trinodb/trino/commit/68ced55dfdd21cee7cdcba025793abc0c1bd8c89", "message": "Fix listing of tables for default schema in schema emulation by name", "committedDate": "2020-03-18T07:26:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2OTY1Mg==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r394269652", "bodyText": "rename this class to AbstractKuduIntegrationSmokeTest", "author": "kokosing", "createdAt": "2020-03-18T11:13:00Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java", "diffHunk": "@@ -28,14 +29,25 @@\n import static io.prestosql.tpch.TpchTable.ORDERS;\n import static org.testng.Assert.assertTrue;\n \n-public class TestKuduIntegrationSmoke\n+public abstract class AbstractTestKuduIntegrationSmoke", "originalCommit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e45f9b0fe0b476259a26fbc299f80e3ed19d9e3d", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractKuduIntegrationSmokeTest.java\nsimilarity index 99%\nrename from presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java\nrename to presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractKuduIntegrationSmokeTest.java\nindex c9628b7bd8..571c1472dc 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractKuduIntegrationSmokeTest.java\n\n@@ -29,7 +29,7 @@ import static io.prestosql.testing.assertions.Assert.assertEquals;\n import static io.prestosql.tpch.TpchTable.ORDERS;\n import static org.testng.Assert.assertTrue;\n \n-public abstract class AbstractTestKuduIntegrationSmoke\n+public abstract class AbstractKuduIntegrationSmokeTest\n         extends AbstractTestIntegrationSmokeTest\n {\n     private TestingKuduServer kuduServer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4ODQyMA==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r394288420", "bodyText": "TestKuduSmokeTestWithDisabledInferSchema\nPlease same naming pattern for other tests too.", "author": "kokosing", "createdAt": "2020-03-18T11:49:13Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestDisableInferSchemaSmokeTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import java.util.Optional;\n+\n+public class TestDisableInferSchemaSmokeTest", "originalCommit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e45f9b0fe0b476259a26fbc299f80e3ed19d9e3d", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestDisableInferSchemaSmokeTest.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduSmokeTestWithDisabledInferSchema.java\nsimilarity index 72%\nrename from presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestDisableInferSchemaSmokeTest.java\nrename to presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduSmokeTestWithDisabledInferSchema.java\nindex 7eaa77d34c..cf045461b6 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestDisableInferSchemaSmokeTest.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduSmokeTestWithDisabledInferSchema.java\n\n@@ -13,14 +13,22 @@\n  */\n package io.prestosql.plugin.kudu;\n \n+import org.testng.annotations.Test;\n+\n import java.util.Optional;\n \n-public class TestDisableInferSchemaSmokeTest\n-        extends AbstractTestKuduIntegrationSmoke\n+public class TestKuduSmokeTestWithDisabledInferSchema\n+        extends AbstractKuduIntegrationSmokeTest\n {\n     @Override\n     protected Optional<String> getKuduSchemaEmulationPrefix()\n     {\n         return Optional.empty();\n     }\n+\n+    @Test\n+    public void testListingOfTableForDefaultSchema()\n+    {\n+        assertQuery(\"SHOW TABLES FROM default\", \"VALUES 'orders'\");\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4ODc0Nw==", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r394288747", "bodyText": "static imports", "author": "kokosing", "createdAt": "2020-03-18T11:49:50Z", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java", "diffHunk": "@@ -17,18 +17,28 @@\n import io.prestosql.testing.MaterializedResult;\n import io.prestosql.testing.QueryRunner;\n import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.AfterClass;\n import org.testng.annotations.Test;\n \n import static org.testng.Assert.assertEquals;\n \n public class TestKuduIntegrationHashPartitioning\n         extends AbstractTestQueryFramework\n {\n+    private TestingKuduServer kuduServer;\n+\n     @Override\n     protected QueryRunner createQueryRunner()\n             throws Exception\n     {\n-        return KuduQueryRunnerFactory.createKuduQueryRunner(\"hash\");\n+        kuduServer = new TestingKuduServer();\n+        return KuduQueryRunnerFactory.createKuduQueryRunner(kuduServer, \"hash\");", "originalCommit": "2d0fea98b17f0140591a2b221e8805c93c72dcf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e45f9b0fe0b476259a26fbc299f80e3ed19d9e3d", "chunk": "diff --git a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java\nindex 427373ecc9..578d7a1b5c 100644\n--- a/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java\n+++ b/presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java\n\n@@ -20,6 +20,7 @@ import org.intellij.lang.annotations.Language;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.Test;\n \n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n import static org.testng.Assert.assertEquals;\n \n public class TestKuduIntegrationHashPartitioning\n"}}, {"oid": "e45f9b0fe0b476259a26fbc299f80e3ed19d9e3d", "url": "https://github.com/trinodb/trino/commit/e45f9b0fe0b476259a26fbc299f80e3ed19d9e3d", "message": "Use testcontainers for kudu unit tests", "committedDate": "2020-03-19T03:13:45Z", "type": "commit"}, {"oid": "e45f9b0fe0b476259a26fbc299f80e3ed19d9e3d", "url": "https://github.com/trinodb/trino/commit/e45f9b0fe0b476259a26fbc299f80e3ed19d9e3d", "message": "Use testcontainers for kudu unit tests", "committedDate": "2020-03-19T03:13:45Z", "type": "forcePushed"}]}