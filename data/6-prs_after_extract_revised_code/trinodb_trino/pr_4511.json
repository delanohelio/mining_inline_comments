{"pr_number": 4511, "pr_title": "Add remote Host info to PageTransportErrorException", "pr_createdAt": "2020-07-21T08:11:24Z", "pr_url": "https://github.com/trinodb/trino/pull/4511", "timeline": [{"oid": "32f5b6df8a75b0b0fbc20006cb0e3d98fc6f5a52", "url": "https://github.com/trinodb/trino/commit/32f5b6df8a75b0b0fbc20006cb0e3d98fc6f5a52", "message": "Add remote Host info to PageTransportErrorException", "committedDate": "2020-07-21T08:09:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyOTY4OA==", "url": "https://github.com/trinodb/trino/pull/4511#discussion_r457929688", "bodyText": "do we need to pass uri to all those methods? We are catching PageTransportErrorException below anyway and add remote host information there. IMO that should be eough.", "author": "losipiuk", "createdAt": "2020-07-21T08:33:57Z", "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -622,22 +623,22 @@ public PagesResponse handle(Request request, Response response)\n                     catch (RuntimeException | IOException e) {\n                         // Ignored. Just return whatever message we were able to decode\n                     }\n-                    throw new PageTransportErrorException(format(\"Expected response code to be 200, but was %s:%n%s\", response.getStatusCode(), body.toString()));\n+                    throw new PageTransportErrorException(fromUri(uri), format(\"Expected response code to be 200, but was %s:%n%s\", response.getStatusCode(), body.toString()));\n                 }\n \n                 // invalid content type can happen when an error page is returned, but is unlikely given the above 200\n                 String contentType = response.getHeader(CONTENT_TYPE);\n                 if (contentType == null) {\n-                    throw new PageTransportErrorException(format(\"%s header is not set: %s\", CONTENT_TYPE, response));\n+                    throw new PageTransportErrorException(fromUri(uri), format(\"%s header is not set: %s\", CONTENT_TYPE, response));\n                 }\n                 if (!mediaTypeMatches(contentType, PRESTO_PAGES_TYPE)) {\n-                    throw new PageTransportErrorException(format(\"Expected %s response from server but got %s\", PRESTO_PAGES_TYPE, contentType));\n+                    throw new PageTransportErrorException(fromUri(uri), format(\"Expected %s response from server but got %s\", PRESTO_PAGES_TYPE, contentType));\n                 }\n \n-                String taskInstanceId = getTaskInstanceId(response);\n-                long token = getToken(response);\n-                long nextToken = getNextToken(response);\n-                boolean complete = getComplete(response);\n+                String taskInstanceId = getTaskInstanceId(response, uri);", "originalCommit": "32f5b6df8a75b0b0fbc20006cb0e3d98fc6f5a52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0MDc3NA==", "url": "https://github.com/trinodb/trino/pull/4511#discussion_r457940774", "bodyText": "I didn't do it that way, as that would require creating another constructor of PageTransportErrorException and pass remoteHost as null to its parent. I thought we would not want to do this (pass remoteHost as null for transport exceptions). I will change it if that is okay.", "author": "sanchitkashyap", "createdAt": "2020-07-21T08:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyOTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NTYwMQ==", "url": "https://github.com/trinodb/trino/pull/4511#discussion_r457995601", "bodyText": "Yeah... Having remoteHost nullable is kinda ugly. So maybe we can live with this extra parameter passed to those helper methods. @electrum ?\n@sanchitkashyap  Can you also comment on motivation for the change? The only final PTEE which is sent back to user is constructed in the catch clause below.\nAnd we already have whole uri as part of an exception message there. Is that not enough?", "author": "losipiuk", "createdAt": "2020-07-21T10:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyOTY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3NTYwNQ==", "url": "https://github.com/trinodb/trino/pull/4511#discussion_r458675605", "bodyText": "@losipiuk  i have updated the description to explain the motivation.", "author": "sanchitkashyap", "createdAt": "2020-07-22T09:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyOTY4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0OTk4Ng==", "url": "https://github.com/trinodb/trino/pull/4511#discussion_r458049986", "bodyText": "the change here seems not related to Add remote Host info to PageTransportErrorException\nis it intentional?\nmake this into a separate commit\nalso cc @electrum", "author": "findepi", "createdAt": "2020-07-21T12:14:49Z", "path": "presto-main/src/main/java/io/prestosql/operator/PageTransportErrorException.java", "diffHunk": "@@ -13,20 +13,21 @@\n  */\n package io.prestosql.operator;\n \n-import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.HostAddress;\n+import io.prestosql.spi.PrestoTransportException;\n \n import static io.prestosql.spi.StandardErrorCode.PAGE_TRANSPORT_ERROR;\n \n public class PageTransportErrorException\n-        extends PrestoException\n+        extends PrestoTransportException", "originalCommit": "32f5b6df8a75b0b0fbc20006cb0e3d98fc6f5a52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NDQ5NA==", "url": "https://github.com/trinodb/trino/pull/4511#discussion_r460144494", "bodyText": "This is needed and related since PrestoTransportException is the base class that contains the remote host, which is extracted in Failures to include as part of the error info. Given that PageTransportTimeoutException already extends it (and is the only subclass), I'm guessing we intended to do it for PageTransportErrorException originally.", "author": "electrum", "createdAt": "2020-07-24T16:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0OTk4Ng=="}], "type": "inlineReview", "revised_code": null}]}