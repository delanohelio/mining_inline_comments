{"pr_number": 5440, "pr_title": "Remove fallback to interpreter for JoinCompiler", "pr_createdAt": "2020-10-07T03:27:14Z", "pr_url": "https://github.com/trinodb/trino/pull/5440", "timeline": [{"oid": "a7e91f3b6974f32ae8daf750211e4836163d7117", "url": "https://github.com/trinodb/trino/commit/a7e91f3b6974f32ae8daf750211e4836163d7117", "message": "Remove fallback to interpreter for JoinCompiler", "committedDate": "2020-10-07T03:25:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxODEzNg==", "url": "https://github.com/trinodb/trino/pull/5440#discussion_r500818136", "bodyText": "update this too", "author": "findepi", "createdAt": "2020-10-07T08:09:02Z", "path": "presto-main/src/main/java/io/prestosql/operator/PagesIndex.java", "diffHunk": "@@ -493,20 +493,15 @@ public LookupSourceSupplier createLookupSourceSupplier(\n             // This code path will trigger only for OUTER joins. To fix that we need to add support for\n             //        OUTER joins into NestedLoopsJoin and remove \"type == INNER\" condition in LocalExecutionPlanner.visitJoin()\n \n-            try {\n-                LookupSourceSupplierFactory lookupSourceFactory = joinCompiler.compileLookupSourceFactory(types, joinChannels, sortChannel, outputChannels);\n-                return lookupSourceFactory.createLookupSourceSupplier(\n-                        session,\n-                        valueAddresses,\n-                        channels,\n-                        hashChannel,\n-                        filterFunctionFactory,\n-                        sortChannel,\n-                        searchFunctionFactories);\n-            }\n-            catch (Exception e) {\n-                log.error(e, \"Lookup source compile failed for types=%s error=%s\", types, e);\n-            }\n+            LookupSourceSupplierFactory lookupSourceFactory = joinCompiler.compileLookupSourceFactory(types, joinChannels, sortChannel, outputChannels);\n+            return lookupSourceFactory.createLookupSourceSupplier(\n+                    session,\n+                    valueAddresses,\n+                    channels,\n+                    hashChannel,\n+                    filterFunctionFactory,\n+                    sortChannel,\n+                    searchFunctionFactories);\n         }\n \n         // if compilation fails", "originalCommit": "a7e91f3b6974f32ae8daf750211e4836163d7117", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxODQ0Mg==", "url": "https://github.com/trinodb/trino/pull/5440#discussion_r500818442", "bodyText": "same in io.prestosql.operator.PagesIndex#createPagesHashStrategy(java.util.List<java.lang.Integer>, java.util.OptionalInt, java.util.Optional<java.util.List<java.lang.Integer>>)\nhttps://github.com/prestosql/presto/blob/e7199dba8e2551cd6d70cae891c8e2e14200a678/presto-main/src/main/java/io/prestosql/operator/PagesIndex.java#L436-L442\n?", "author": "findepi", "createdAt": "2020-10-07T08:09:30Z", "path": "presto-main/src/main/java/io/prestosql/operator/PagesIndex.java", "diffHunk": "@@ -493,20 +493,15 @@ public LookupSourceSupplier createLookupSourceSupplier(\n             // This code path will trigger only for OUTER joins. To fix that we need to add support for\n             //        OUTER joins into NestedLoopsJoin and remove \"type == INNER\" condition in LocalExecutionPlanner.visitJoin()\n \n-            try {\n-                LookupSourceSupplierFactory lookupSourceFactory = joinCompiler.compileLookupSourceFactory(types, joinChannels, sortChannel, outputChannels);\n-                return lookupSourceFactory.createLookupSourceSupplier(\n-                        session,\n-                        valueAddresses,\n-                        channels,\n-                        hashChannel,\n-                        filterFunctionFactory,\n-                        sortChannel,\n-                        searchFunctionFactories);\n-            }\n-            catch (Exception e) {\n-                log.error(e, \"Lookup source compile failed for types=%s error=%s\", types, e);", "originalCommit": "a7e91f3b6974f32ae8daf750211e4836163d7117", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}