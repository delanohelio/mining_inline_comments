{"pr_number": 4396, "pr_title": "Add SQL syntax for GRANT/REVOKE on schema", "pr_createdAt": "2020-07-09T08:03:22Z", "pr_url": "https://github.com/trinodb/trino/pull/4396", "timeline": [{"oid": "ea236543f08a7450c121672433f87733a9aeee52", "url": "https://github.com/trinodb/trino/commit/ea236543f08a7450c121672433f87733a9aeee52", "message": "Test parsing grant statement with TABLE keyword", "committedDate": "2020-10-29T12:36:42Z", "type": "commit"}, {"oid": "3a56915e3748484d7e654f265a919a782b4ef893", "url": "https://github.com/trinodb/trino/commit/3a56915e3748484d7e654f265a919a782b4ef893", "message": "Create MockPlugin on top of MockConnector\n\n* Remove Tpch usages\n* Add missing handles\n* Extract inner classes", "committedDate": "2020-10-29T12:36:42Z", "type": "commit"}, {"oid": "48bddee257359bbd36605ea29880a84e0a3c4fee", "url": "https://github.com/trinodb/trino/commit/48bddee257359bbd36605ea29880a84e0a3c4fee", "message": "Add SQL syntax for GRANT & REVOKE on schema", "committedDate": "2020-10-29T12:36:42Z", "type": "commit"}, {"oid": "18ed2fb83b738ba8a2e4426a81bba609a20fd8e3", "url": "https://github.com/trinodb/trino/commit/18ed2fb83b738ba8a2e4426a81bba609a20fd8e3", "message": "Add test for grant and revoke on table", "committedDate": "2020-10-29T12:36:42Z", "type": "commit"}, {"oid": "7fee5fab9f78f43ef854ef8fa176d72f638f9351", "url": "https://github.com/trinodb/trino/commit/7fee5fab9f78f43ef854ef8fa176d72f638f9351", "message": "Document semantic of grant and revoke", "committedDate": "2020-10-29T12:36:43Z", "type": "commit"}, {"oid": "7fee5fab9f78f43ef854ef8fa176d72f638f9351", "url": "https://github.com/trinodb/trino/commit/7fee5fab9f78f43ef854ef8fa176d72f638f9351", "message": "Document semantic of grant and revoke", "committedDate": "2020-10-29T12:36:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNDY0Mg==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r515024642", "bodyText": "just session?", "author": "kokosing", "createdAt": "2020-10-30T11:15:42Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrantOnSchema.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.Grants;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableGrants;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DataProviders;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestGrantOnSchema\n+{\n+    private final Session admin = sessionOf(\"admin\");\n+    private final Grants<String> schemaGrants = new MutableGrants<>();\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void initClass()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withListTables((session, schema) ->\n+                        \"default\".equalsIgnoreCase(schema) ? ImmutableList.of(new SchemaTableName(schema, \"table_one\")) : ImmutableList.of())\n+                .withSchemaGrants(schemaGrants)\n+                .build();\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+        assertions = new QueryAssertions(queryRunner);\n+        schemaGrants.grant(new PrestoPrincipal(USER, admin.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test(dataProviderClass = DataProviders.class, dataProvider = \"trueFalse\")\n+    public void testExistingGrants(boolean grantOption)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+        schemaGrants.grant(new PrestoPrincipal(USER, user.getUser()), \"default\", EnumSet.allOf(Privilege.class), grantOption);\n+\n+        assertThat(assertions.query(admin, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(admin, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+        assertThat(assertions.query(user, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testValidGrant(String privilege)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+\n+        queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA default TO %s\", privilege, username));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(admin, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+        assertThat(assertions.query(user, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testValidGrantWithGrantOption(String privilege)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+\n+        queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA default TO %s WITH GRANT OPTION\", privilege, username));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(user, format(\"GRANT %s ON SCHEMA default TO %s\", privilege, randomUsername()))).matches(\"VALUES (BOOLEAN 'TRUE')\");\n+        assertThat(assertions.query(user, format(\"GRANT %s ON SCHEMA default TO %s WITH GRANT OPTION\", privilege, randomUsername()))).matches(\"VALUES (BOOLEAN 'TRUE')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testGrantOnNonExistingCatalog(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA missing_catalog.missing_schema TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Schema 'missing_catalog.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testGrantOnNonExistingSchema(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA missing_schema TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Schema 'local.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testAccessDenied(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(sessionOf(randomUsername()), format(\"GRANT %s ON SCHEMA default TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Access Denied: Cannot grant privilege SELECT on schema default\");\n+    }\n+\n+    @DataProvider(name = \"privileges\")\n+    public static Object[][] privileges()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\"},\n+                {\"ALL PRIVILEGES\"}\n+        };\n+    }\n+\n+    private static Session sessionOf(String username)", "originalCommit": "48bddee257359bbd36605ea29880a84e0a3c4fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNTQyMw==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r515025423", "bodyText": "session?", "author": "kokosing", "createdAt": "2020-10-30T11:17:09Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestRevokeOnSchema.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.Grants;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestRevokeOnSchema\n+{\n+    private static final Session admin = sessionOf(\"admin\");\n+    private static final Session userWithAllPrivileges = sessionOf(randomUsername());\n+    private static final Session userWithSelect = sessionOf(randomUsername());\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void initClass()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner.builder(userWithAllPrivileges).build();\n+        Grants<String> schemaGrants = new MutableGrants<>();\n+        schemaGrants.grant(new PrestoPrincipal(USER, admin.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+        schemaGrants.grant(new PrestoPrincipal(USER, userWithAllPrivileges.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+        schemaGrants.grant(new PrestoPrincipal(USER, userWithSelect.getUser()), \"default\", ImmutableSet.of(Privilege.SELECT), true);\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(schemaGrants)\n+                .build();\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnSchema(String privilege, Session user)\n+    {\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+\n+        queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA default FROM %s\", privilege, user.getUser()));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema')\");\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnNonExistingCatalog(String privilege, Session user)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA missing_catalog.missing_schema FROM %s\", privilege, user.getUser())))\n+                .hasMessageContaining(\"Schema 'missing_catalog.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnNonExistingSchema(String privilege, Session user)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA missing_schema FROM %s\", privilege, user.getUser())))\n+                .hasMessageContaining(\"Schema 'local.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testAccessDenied(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(sessionOf(randomUsername()), format(\"REVOKE %s ON SCHEMA default FROM %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Access Denied: Cannot revoke privilege SELECT on schema default\");\n+    }\n+\n+    @DataProvider(name = \"privilegesAndUsers\")\n+    public static Object[][] privilegesAndUsers()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\", userWithSelect},\n+                {\"ALL PRIVILEGES\", userWithAllPrivileges}\n+        };\n+    }\n+\n+    @DataProvider(name = \"privileges\")\n+    public static Object[][] privileges()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\"},\n+                {\"ALL PRIVILEGES\"}\n+        };\n+    }\n+\n+    private static Session sessionOf(String username)", "originalCommit": "48bddee257359bbd36605ea29880a84e0a3c4fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}