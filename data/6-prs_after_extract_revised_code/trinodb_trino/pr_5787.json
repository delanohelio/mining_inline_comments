{"pr_number": 5787, "pr_title": "Restore null behavior", "pr_createdAt": "2020-11-02T23:38:37Z", "pr_url": "https://github.com/trinodb/trino/pull/5787", "timeline": [{"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f", "url": "https://github.com/trinodb/trino/commit/bceca9b7d87153014d152f6a1e134f4389b5548f", "message": "Restore null behavior for greatest and least", "committedDate": "2020-11-02T23:37:30Z", "type": "commit"}, {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79", "url": "https://github.com/trinodb/trino/commit/3a8c195af01c548d1b02c18b822a4a5382741e79", "message": "Restore null behavior for array_max and array_min", "committedDate": "2020-11-02T23:37:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNjU3Ng==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516336576", "bodyText": "Unrelated to this commit", "author": "martint", "createdAt": "2020-11-02T23:41:22Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1275,8 +1275,10 @@ public void testLeast()\n     public void testGreatestWithNaN()\n     {\n         assertFunction(\"greatest(1.5E0, 0.0E0 / 0.0E0)\", DOUBLE, Double.NaN);\n+        assertFunction(\"greatest(1.5E0, 0.0E0 / 0.0E0, 2.7E0)\", DOUBLE, Double.NaN);\n         assertFunction(\"greatest(1.5E0, REAL '0.0' / REAL '0.0')\", DOUBLE, Double.NaN);\n-        assertFunction(\"greatest(null, REAL '0.0' / REAL '0.0')\", REAL, Float.NaN);\n+        assertFunction(\"greatest(1.5E0, REAL '0.0' / REAL '0.0', 2.7E0)\", DOUBLE, Double.NaN);\n+        assertFunction(\"greatest(null, REAL '0.0' / REAL '0.0')\", REAL, null);", "originalCommit": "3a8c195af01c548d1b02c18b822a4a5382741e79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTQyNA==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516909424", "bodyText": "It's testing that the loop condition handling is correct when there are more than two values.", "author": "electrum", "createdAt": "2020-11-03T19:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNjU3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDU4NQ==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516494585", "bodyText": "You do not even need to add a new test, nice.", "author": "findepi", "createdAt": "2020-11-03T08:32:55Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);", "originalCommit": "bceca9b7d87153014d152f6a1e134f4389b5548f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMTg2NA==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516911864", "bodyText": "I'm not sure what this comment means.", "author": "electrum", "createdAt": "2020-11-03T19:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDU4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDk3OQ==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516494979", "bodyText": "// real", "author": "findepi", "createdAt": "2020-11-03T08:33:42Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float", "originalCommit": "bceca9b7d87153014d152f6a1e134f4389b5548f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NTQ1Mw==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516495453", "bodyText": "This is a test case for DOUBLE.\nMake it into a test case for REAL:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n          \n          \n            \n                    assertFunction(\"greatest(5, REAL '4', CAST(NULL AS real), 3)\", REAL, null);", "author": "findepi", "createdAt": "2020-11-03T08:34:38Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float\n         assertFunction(\"greatest(REAL '1.5', 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(REAL '-1.5', -2.3E0)\", DOUBLE, (double) -1.5f);\n         assertFunction(\"greatest(-1.5E0, REAL '-2.3', -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(REAL '1.5', REAL '-1.0' / 0.0E0, 1.0E0 / REAL '0.0')\", DOUBLE, (double) (1.0f / 0.0f));\n-        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "originalCommit": "bceca9b7d87153014d152f6a1e134f4389b5548f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NzMzNQ==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516497335", "bodyText": "Actually the cases above are also for DOUBLE, not REAL", "author": "findepi", "createdAt": "2020-11-03T08:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NTQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwNTU5Ng==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r518805596", "bodyText": "This remained unanswered, so we don't have a test for NULL with REAL type just yet.", "author": "findepi", "createdAt": "2020-11-06T14:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NTQ1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjE2MQ==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516496161", "bodyText": "Add a greatest and least test cases for DOUBLE and REAL with 1,NaN,3 and 1,NULL,NaN,4", "author": "findepi", "createdAt": "2020-11-03T08:35:54Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "originalCommit": "bceca9b7d87153014d152f6a1e134f4389b5548f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NTczMw==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r517055733", "bodyText": "This PR only covers restoring null behavior.  NaN can be in another PR", "author": "dain", "createdAt": "2020-11-04T01:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjE2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjQ1OA==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516496458", "bodyText": "Duplicate test case?", "author": "findepi", "createdAt": "2020-11-03T08:36:31Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1190,8 +1190,8 @@ public void testGreatest()\n         assertFunction(\"greatest(1.0E0, 2)\", DOUBLE, 2.0);\n         assertFunction(\"greatest(1, 2.0E0)\", DOUBLE, 2.0);\n         assertFunction(\"greatest(1.0E0, 2)\", DOUBLE, 2.0);\n-        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n-        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n+        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, null);", "originalCommit": "bceca9b7d87153014d152f6a1e134f4389b5548f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNzk0OQ==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516907949", "bodyText": "Duplicate with what? They are different input types", "author": "electrum", "createdAt": "2020-11-03T19:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1MjU0Ng==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516952546", "bodyText": "The two lines\nassertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\nassertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, null);\n\nare probably equivalent from greatest function perspective (with and without a coercion, but does that matter?)", "author": "findepi", "createdAt": "2020-11-03T21:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjQ1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjUyNw==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516496527", "bodyText": "// real", "author": "findepi", "createdAt": "2020-11-03T08:36:39Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1214,42 +1214,42 @@ public void testLeast()\n         assertFunction(\"least(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -2);\n         assertFunction(\"least(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 1);\n         assertFunction(\"least(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 3);\n+        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // integer\n         assertFunction(\"least(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -2);\n         assertFunction(\"least(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 3);\n+        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"least(1, 2)\", INTEGER, 1);\n         assertFunction(\"least(-1, -2)\", INTEGER, -2);\n         assertFunction(\"least(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 1);\n         assertFunction(\"least(-1)\", INTEGER, -1);\n-        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 3);\n+        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"least(10000000000, 20000000000)\", BIGINT, 10000000000L);\n         assertFunction(\"least(-10000000000, -20000000000)\", BIGINT, -20000000000L);\n         assertFunction(\"least(50000000000, 40000000000, 30000000000, 20000000000, 50000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"least(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, 300000000L);\n+        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"least(1.5E0, 2.3E0)\", DOUBLE, 1.5);\n         assertFunction(\"least(-1.5E0, -2.3E0)\", DOUBLE, -2.3);\n         assertFunction(\"least(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -2.3);\n         assertFunction(\"least(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.NEGATIVE_INFINITY);\n-        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 3.0);\n+        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float", "originalCommit": "bceca9b7d87153014d152f6a1e134f4389b5548f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjkwNA==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516496904", "bodyText": "This is a test case for DOUBLE.\nMake it into a test case for REAL:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFunction(\"least(REAL '5', 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n          \n          \n            \n                    assertFunction(\"least(REAL '5', 4, CAST(NULL AS real), 3)\", REAL, null);", "author": "findepi", "createdAt": "2020-11-03T08:37:23Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1214,42 +1214,42 @@ public void testLeast()\n         assertFunction(\"least(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -2);\n         assertFunction(\"least(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 1);\n         assertFunction(\"least(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 3);\n+        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // integer\n         assertFunction(\"least(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -2);\n         assertFunction(\"least(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 3);\n+        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"least(1, 2)\", INTEGER, 1);\n         assertFunction(\"least(-1, -2)\", INTEGER, -2);\n         assertFunction(\"least(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 1);\n         assertFunction(\"least(-1)\", INTEGER, -1);\n-        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 3);\n+        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"least(10000000000, 20000000000)\", BIGINT, 10000000000L);\n         assertFunction(\"least(-10000000000, -20000000000)\", BIGINT, -20000000000L);\n         assertFunction(\"least(50000000000, 40000000000, 30000000000, 20000000000, 50000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"least(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, 300000000L);\n+        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"least(1.5E0, 2.3E0)\", DOUBLE, 1.5);\n         assertFunction(\"least(-1.5E0, -2.3E0)\", DOUBLE, -2.3);\n         assertFunction(\"least(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -2.3);\n         assertFunction(\"least(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.NEGATIVE_INFINITY);\n-        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 3.0);\n+        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float\n         assertFunction(\"least(REAL '1.5', 2.3E0)\", DOUBLE, (double) 1.5f);\n         assertFunction(\"least(REAL '-1.5', -2.3E0)\", DOUBLE, -2.3);\n         assertFunction(\"least(-2.3E0, REAL '-0.4', -5/3)\", DOUBLE, -2.3);\n         assertFunction(\"least(1.5E0, REAL '-1.0' / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, (double) (-1.0f / 0.0f));\n-        assertFunction(\"least(REAL '5', 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 3.0);\n+        assertFunction(\"least(REAL '5', 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "originalCommit": "bceca9b7d87153014d152f6a1e134f4389b5548f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NzM2NA==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516497364", "bodyText": "Actually the cases above are also for DOUBLE, not REAL", "author": "findepi", "createdAt": "2020-11-03T08:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjkwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516499043", "bodyText": "Before c95e937 the expected values here were different -- here and in some other places NaN was expected. See\nhttps://github.com/prestosql/presto/blob/f04fa5ca8de1015629a94693740dfbc641e55784/presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java#L608-L612", "author": "findepi", "createdAt": "2020-11-03T08:41:27Z", "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -597,13 +597,13 @@ public void testArrayMin()\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN()])\", DOUBLE, NaN);\n         assertFunction(\"ARRAY_MIN(ARRAY [NULL, NULL, NULL])\", UNKNOWN, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NaN(), NaN()])\", DOUBLE, NaN);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, 2);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), 2, 3])\", DOUBLE, 2.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, 1.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NULL, 3.0])\", DOUBLE, 3.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [1.0E0, NULL, 3])\", DOUBLE, 1.0E0);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, null);", "originalCommit": "3a8c195af01c548d1b02c18b822a4a5382741e79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMTI0NQ==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516911245", "bodyText": "You're right, though that seems like a different issue, and a bug. It's not clear why NaN would be returned over NULL, but non-NaN values would return NULL.", "author": "electrum", "createdAt": "2020-11-03T19:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNDI2Nw==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516914267", "bodyText": "According to the documentation, it is a bug:\n\nLike most other functions in Presto, they return null if any argument is null.", "author": "electrum", "createdAt": "2020-11-03T19:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NDE2OQ==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516944169", "bodyText": "I think the logic can be \"return NaN when any of the compared values is NaN\" and \"NULL means unknown, so return unknown result when any of the compared values is unknown but, unless the result will be NaN regardless of the unknown value\"", "author": "findepi", "createdAt": "2020-11-03T20:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NDU4OQ==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516944589", "bodyText": "Anyway, even if want to change the behavior, I'd strongly prefer to restore pre-344 behavior to clear \"release blocker\" and then fix whatever remains to be fixed on top of that.", "author": "findepi", "createdAt": "2020-11-03T20:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MjIxOA==", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r517472218", "bodyText": "Actually, that quote is from greatest/least. The only documentation for array_min is\n\nReturns the minimum value of input array.", "author": "electrum", "createdAt": "2020-11-04T16:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}], "type": "inlineReview", "revised_code": null}]}