{"pr_number": 3896, "pr_title": "Remove legacy optimizers", "pr_createdAt": "2020-06-01T17:12:26Z", "pr_url": "https://github.com/trinodb/trino/pull/3896", "timeline": [{"oid": "2d467e11104ee6ff0688771868fc5594729ee484", "url": "https://github.com/trinodb/trino/commit/2d467e11104ee6ff0688771868fc5594729ee484", "message": "Remove config and session property to toggle iterative optimizer\n\nThere are not rules that currently depend on it.  Going forward,\nspecific instance of IterativeOptimizer can be turned on or off\nwith dedicated config options for the specific set of rules being\nmigrated:\n\n    new IterativeOptimizer(\n        ...,\n        session -> <predicate to check whether legacy rules should be enabled>,\n        <legacy rules>,\n        <new rules>)", "committedDate": "2020-06-06T00:50:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1MTEzMQ==", "url": "https://github.com/trinodb/trino/pull/3896#discussion_r436251131", "bodyText": "adjust error message", "author": "kasiafi", "createdAt": "2020-06-06T08:36:22Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/IterativeOptimizer.java", "diffHunk": "@@ -57,17 +58,19 @@\n     private final CostCalculator costCalculator;\n     private final List<PlanOptimizer> legacyRules;\n     private final RuleIndex ruleIndex;\n+    private final Predicate<Session> useLegacyRules;\n \n     public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, Set<Rule<?>> rules)\n     {\n-        this(stats, statsCalculator, costCalculator, ImmutableList.of(), rules);\n+        this(stats, statsCalculator, costCalculator, session -> false, ImmutableList.of(), rules);\n     }\n \n-    public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, List<PlanOptimizer> legacyRules, Set<Rule<?>> newRules)\n+    public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, Predicate<Session> useLegacyRules, List<PlanOptimizer> legacyRules, Set<Rule<?>> newRules)\n     {\n         this.stats = requireNonNull(stats, \"stats is null\");\n         this.statsCalculator = requireNonNull(statsCalculator, \"statsCalculator is null\");\n         this.costCalculator = requireNonNull(costCalculator, \"costCalculator is null\");\n+        this.useLegacyRules = requireNonNull(useLegacyRules, \"legacyRulesEnabled is null\");", "originalCommit": "2d467e11104ee6ff0688771868fc5594729ee484", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7bbc71cb79c6fa8b1f1f1a602cc31d435f84479", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/planner/iterative/IterativeOptimizer.java b/presto-main/src/main/java/io/prestosql/sql/planner/iterative/IterativeOptimizer.java\nindex aa5249af52..523f6b43ee 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/planner/iterative/IterativeOptimizer.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/planner/iterative/IterativeOptimizer.java\n\n@@ -58,19 +57,17 @@ public class IterativeOptimizer\n     private final CostCalculator costCalculator;\n     private final List<PlanOptimizer> legacyRules;\n     private final RuleIndex ruleIndex;\n-    private final Predicate<Session> useLegacyRules;\n \n     public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, Set<Rule<?>> rules)\n     {\n-        this(stats, statsCalculator, costCalculator, session -> false, ImmutableList.of(), rules);\n+        this(stats, statsCalculator, costCalculator, ImmutableList.of(), rules);\n     }\n \n-    public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, Predicate<Session> useLegacyRules, List<PlanOptimizer> legacyRules, Set<Rule<?>> newRules)\n+    public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, List<PlanOptimizer> legacyRules, Set<Rule<?>> newRules)\n     {\n         this.stats = requireNonNull(stats, \"stats is null\");\n         this.statsCalculator = requireNonNull(statsCalculator, \"statsCalculator is null\");\n         this.costCalculator = requireNonNull(costCalculator, \"costCalculator is null\");\n-        this.useLegacyRules = requireNonNull(useLegacyRules, \"legacyRulesEnabled is null\");\n         this.legacyRules = ImmutableList.copyOf(legacyRules);\n         this.ruleIndex = RuleIndex.builder()\n                 .register(newRules)\n"}}, {"oid": "c7bbc71cb79c6fa8b1f1f1a602cc31d435f84479", "url": "https://github.com/trinodb/trino/commit/c7bbc71cb79c6fa8b1f1f1a602cc31d435f84479", "message": "Remove legacy ImplementIntersectAndExceptAsUnion\n\nThe new rules have been around for a while and shown to work well.", "committedDate": "2020-06-09T06:31:27Z", "type": "commit"}, {"oid": "0a6bdb24d3677f90defdb560d709bb2e4398fa8d", "url": "https://github.com/trinodb/trino/commit/0a6bdb24d3677f90defdb560d709bb2e4398fa8d", "message": "Remove legacy SetFlatteningOptimizer\n\nThe new rules have been around for a while and show to work well.", "committedDate": "2020-06-09T06:31:27Z", "type": "commit"}, {"oid": "6dac933f9c00a352833683acbb0729a66e6ec2c9", "url": "https://github.com/trinodb/trino/commit/6dac933f9c00a352833683acbb0729a66e6ec2c9", "message": "Rename TestSetFlatteningOptimizer class", "committedDate": "2020-06-09T06:31:27Z", "type": "commit"}, {"oid": "a6e4cd68747aaaa4e5f9ddd44b170ce521945eeb", "url": "https://github.com/trinodb/trino/commit/a6e4cd68747aaaa4e5f9ddd44b170ce521945eeb", "message": "Remove config and session property to toggle iterative optimizer\n\nThere are not rules that currently depend on it.  Going forward,\nspecific instance of IterativeOptimizer can be turned on or off\nwith dedicated config options for the specific set of rules being\nmigrated:\n\n    new IterativeOptimizer(\n        ...,\n        session -> <predicate to check whether legacy rules should be enabled>,\n        <legacy rules>,\n        <new rules>)", "committedDate": "2020-06-09T06:32:32Z", "type": "commit"}, {"oid": "a6e4cd68747aaaa4e5f9ddd44b170ce521945eeb", "url": "https://github.com/trinodb/trino/commit/a6e4cd68747aaaa4e5f9ddd44b170ce521945eeb", "message": "Remove config and session property to toggle iterative optimizer\n\nThere are not rules that currently depend on it.  Going forward,\nspecific instance of IterativeOptimizer can be turned on or off\nwith dedicated config options for the specific set of rules being\nmigrated:\n\n    new IterativeOptimizer(\n        ...,\n        session -> <predicate to check whether legacy rules should be enabled>,\n        <legacy rules>,\n        <new rules>)", "committedDate": "2020-06-09T06:32:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyODg3MQ==", "url": "https://github.com/trinodb/trino/pull/3896#discussion_r445628871", "bodyText": "Is there a way to set this useLegacy session rules and pass the legacy rule ?", "author": "Praveen2112", "createdAt": "2020-06-25T15:05:08Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/IterativeOptimizer.java", "diffHunk": "@@ -57,17 +58,19 @@\n     private final CostCalculator costCalculator;\n     private final List<PlanOptimizer> legacyRules;\n     private final RuleIndex ruleIndex;\n+    private final Predicate<Session> useLegacyRules;\n \n     public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, Set<Rule<?>> rules)\n     {\n-        this(stats, statsCalculator, costCalculator, ImmutableList.of(), rules);\n+        this(stats, statsCalculator, costCalculator, session -> false, ImmutableList.of(), rules);\n     }\n \n-    public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, List<PlanOptimizer> legacyRules, Set<Rule<?>> newRules)\n+    public IterativeOptimizer(RuleStatsRecorder stats, StatsCalculator statsCalculator, CostCalculator costCalculator, Predicate<Session> useLegacyRules, List<PlanOptimizer> legacyRules, Set<Rule<?>> newRules)", "originalCommit": "a6e4cd68747aaaa4e5f9ddd44b170ce521945eeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MzI2MA==", "url": "https://github.com/trinodb/trino/pull/3896#discussion_r445683260", "bodyText": "Not directly. This is callsite specific. For instance, you might create a new set of rules with a new session property to enable/disable the legacy rule just for that optimization, and in the instantiation of the IterativeOptimizer you'd pass a predicate that knows how to check whether that session is set.", "author": "martint", "createdAt": "2020-06-25T16:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyODg3MQ=="}], "type": "inlineReview", "revised_code": null}]}