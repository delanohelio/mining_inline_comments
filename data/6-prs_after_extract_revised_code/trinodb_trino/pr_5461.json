{"pr_number": 5461, "pr_title": "Support for implicit casting of dynamic filters", "pr_createdAt": "2020-10-08T08:23:28Z", "pr_url": "https://github.com/trinodb/trino/pull/5461", "timeline": [{"oid": "9ca1d0322774f9abb07f6076160244f95ce89f42", "url": "https://github.com/trinodb/trino/commit/9ca1d0322774f9abb07f6076160244f95ce89f42", "message": "Allow dynamic filters with implicit coercion cast in planner", "committedDate": "2020-10-20T10:58:03Z", "type": "commit"}, {"oid": "6f8433daa42d9e9ccc9f80ebb2375acb4c763da1", "url": "https://github.com/trinodb/trino/commit/6f8433daa42d9e9ccc9f80ebb2375acb4c763da1", "message": "Implement DomainCoercer", "committedDate": "2020-10-20T10:58:03Z", "type": "commit"}, {"oid": "c77f477e127541c2aa6ee2c2e7184243feb82db0", "url": "https://github.com/trinodb/trino/commit/c77f477e127541c2aa6ee2c2e7184243feb82db0", "message": "Implement dynamic filter coercion in execution", "committedDate": "2020-10-20T11:04:34Z", "type": "commit"}, {"oid": "c77f477e127541c2aa6ee2c2e7184243feb82db0", "url": "https://github.com/trinodb/trino/commit/c77f477e127541c2aa6ee2c2e7184243feb82db0", "message": "Implement dynamic filter coercion in execution", "committedDate": "2020-10-20T11:04:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY0ODkyNA==", "url": "https://github.com/trinodb/trino/pull/5461#discussion_r509648924", "bodyText": "There are two possible approaches: SATURATED_FLOOR_CAST and coerce-coerce (as in UnwrapCastInComparison).\nWhat was the reason to choose the former over the latter?\nCan we capture the reasoning in writing somewhere?\ncc @sopel39 @martint", "author": "findepi", "createdAt": "2020-10-21T20:11:46Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/DomainCoercer.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.OperatorNotFoundException;\n+import io.prestosql.metadata.ResolvedFunction;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.function.InvocationConvention;\n+import io.prestosql.spi.predicate.AllOrNoneValueSet;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Marker;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.Ranges;\n+import io.prestosql.spi.predicate.SortedRangeSet;\n+import io.prestosql.spi.predicate.ValueSet;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeOperators;\n+import io.prestosql.sql.InterpretedFunctionInvoker;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static io.prestosql.spi.function.InvocationConvention.InvocationArgumentConvention.NEVER_NULL;\n+import static io.prestosql.spi.function.InvocationConvention.InvocationReturnConvention.FAIL_ON_NULL;\n+import static io.prestosql.spi.function.OperatorType.SATURATED_FLOOR_CAST;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Apply saturated floor casts for implicit coercions on TupleDomain.\n+ * This class does not handle Float.NaN and Double.NaN because\n+ * currently it is used only in dynamic filtering where NaNs are not part of TupleDomain.\n+ */\n+public final class DomainCoercer\n+{\n+    private DomainCoercer() {}\n+\n+    public static Domain applySaturatedCasts(\n+            Metadata metadata,\n+            TypeOperators typeOperators,\n+            Session session,\n+            Domain domain,\n+            Type coercedValueType)\n+    {\n+        return new ImplicitCoercer(metadata, typeOperators, session, domain, coercedValueType).applySaturatedCasts();\n+    }\n+\n+    private static class ImplicitCoercer\n+    {\n+        private final ConnectorSession connectorSession;\n+        private final InterpretedFunctionInvoker functionInvoker;\n+        private final ResolvedFunction saturatedFloorCastOperator;\n+        private final ResolvedFunction castToOriginalTypeOperator;\n+        private final MethodHandle comparisonOperator;\n+        private final Domain domain;\n+        private final Type coercedValueType;\n+\n+        private ImplicitCoercer(Metadata metadata, TypeOperators typeOperators, Session session, Domain domain, Type coercedValueType)\n+        {\n+            this.connectorSession = requireNonNull(session, \"session is null\").toConnectorSession();\n+            this.functionInvoker = new InterpretedFunctionInvoker(metadata);\n+            this.domain = requireNonNull(domain, \"domain is null\");\n+            this.coercedValueType = requireNonNull(coercedValueType, \"coercedValueType is null\");\n+            Type originalValueType = domain.getType();\n+            try {\n+                this.saturatedFloorCastOperator = metadata.getCoercion(SATURATED_FLOOR_CAST, originalValueType, coercedValueType);", "originalCommit": "c77f477e127541c2aa6ee2c2e7184243feb82db0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg3MTg4Ng==", "url": "https://github.com/trinodb/trino/pull/5461#discussion_r579871886", "bodyText": "ping?", "author": "findepi", "createdAt": "2021-02-21T21:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY0ODkyNA=="}], "type": "inlineReview", "revised_code": null}]}