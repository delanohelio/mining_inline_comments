{"pr_number": 3871, "pr_title": "Implement collection of min/max values in DynamicFilterSourceOperator", "pr_createdAt": "2020-05-28T10:00:34Z", "pr_url": "https://github.com/trinodb/trino/pull/3871", "timeline": [{"oid": "c862d11ff71adb777b0e648fdc06716555199ca3", "url": "https://github.com/trinodb/trino/commit/c862d11ff71adb777b0e648fdc06716555199ca3", "message": "Add SQL annotation to test method", "committedDate": "2020-09-16T15:38:52Z", "type": "commit"}, {"oid": "2e84ee064381d3007b49776e1ebab55385c75a98", "url": "https://github.com/trinodb/trino/commit/2e84ee064381d3007b49776e1ebab55385c75a98", "message": "Add createColorSequenceBlock in BlockAssertions", "committedDate": "2020-09-16T15:38:52Z", "type": "commit"}, {"oid": "32ce86b760180749672ea0b0df579756f02519be", "url": "https://github.com/trinodb/trino/commit/32ce86b760180749672ea0b0df579756f02519be", "message": "Implement collection of min/max values in DynamicFilterSourceOperator\n\nAdded a flag dynamic-filtering-range-row-limit-per-driver to allow collection of\nmin and max values for dynamic filtering upto a given per driver row count\nwhen build side exceeds dynamic-filtering-max-per-driver-row-count or\ndynamic-filtering-max-per-driver-size thresholds", "committedDate": "2020-09-16T15:40:24Z", "type": "commit"}, {"oid": "32ce86b760180749672ea0b0df579756f02519be", "url": "https://github.com/trinodb/trino/commit/32ce86b760180749672ea0b0df579756f02519be", "message": "Implement collection of min/max values in DynamicFilterSourceOperator\n\nAdded a flag dynamic-filtering-range-row-limit-per-driver to allow collection of\nmin and max values for dynamic filtering upto a given per driver row count\nwhen build side exceeds dynamic-filtering-max-per-driver-row-count or\ndynamic-filtering-max-per-driver-size thresholds", "committedDate": "2020-09-16T15:40:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzOTE3OQ==", "url": "https://github.com/trinodb/trino/pull/3871#discussion_r490139179", "bodyText": "put this at method begin", "author": "sopel39", "createdAt": "2020-09-17T10:29:42Z", "path": "presto-main/src/main/java/io/prestosql/operator/DynamicFilterSourceOperator.java", "diffHunk": "@@ -210,13 +252,84 @@ public void addInput(Page page)\n \n     private void handleTooLargePredicate()\n     {\n-        // The resulting predicate is too large, allow all probe-side values to be read.\n-        dynamicPredicateConsumer.accept(TupleDomain.all());\n+        // The resulting predicate is too large\n+        if (minMaxChannels.isEmpty()) {\n+            // allow all probe-side values to be read.\n+            dynamicPredicateConsumer.accept(TupleDomain.all());\n+        }\n+        else {\n+            if (minMaxCollectionLimit < 0) {\n+                handleMinMaxCollectionLimitExceeded();\n+            }\n+            else {\n+                // convert to min/max per column for orderable types\n+                for (Integer channelIndex : minMaxChannels) {\n+                    Block block = blockBuilders[channelIndex].build();\n+                    updateMinMaxValues(block, channelIndex);\n+                }\n+            }\n+        }\n         // Drop references to collected values.", "originalCommit": "32ce86b760180749672ea0b0df579756f02519be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzOTIzMg==", "url": "https://github.com/trinodb/trino/pull/3871#discussion_r490139232", "bodyText": "let's flatten this section:\n// Drop references to collected values.\nvalueSets = null;\nblockBuilders = null;\n\nif (minMaxChannels.isEmpty()) {\n  // allow all probe-side values to be read.\n  dynamicPredicateConsumer.accept(TupleDomain.all());\n  return;\n}\n\nif (minMaxCollectionLimit < 0) {\n  handleMinMaxCollectionLimitExceeded();\n  return;\n}\n\n// convert to min/max per column for orderable types\nfor (Integer channelIndex : minMaxChannels) {\n  Block block = blockBuilders[channelIndex].build();\n  updateMinMaxValues(block, channelIndex);\n}", "author": "sopel39", "createdAt": "2020-09-17T10:29:47Z", "path": "presto-main/src/main/java/io/prestosql/operator/DynamicFilterSourceOperator.java", "diffHunk": "@@ -210,13 +252,84 @@ public void addInput(Page page)\n \n     private void handleTooLargePredicate()\n     {\n-        // The resulting predicate is too large, allow all probe-side values to be read.\n-        dynamicPredicateConsumer.accept(TupleDomain.all());\n+        // The resulting predicate is too large\n+        if (minMaxChannels.isEmpty()) {\n+            // allow all probe-side values to be read.\n+            dynamicPredicateConsumer.accept(TupleDomain.all());", "originalCommit": "32ce86b760180749672ea0b0df579756f02519be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}