{"pr_number": 3418, "pr_title": "Require PrestoException in assertQueryFails", "pr_createdAt": "2020-04-12T22:50:55Z", "pr_url": "https://github.com/trinodb/trino/pull/3418", "timeline": [{"oid": "02d6b3060f7a4f1861dcc1c16dddf2b85c1cd72d", "url": "https://github.com/trinodb/trino/commit/02d6b3060f7a4f1861dcc1c16dddf2b85c1cd72d", "message": "Move parser test to appropriate test class", "committedDate": "2020-04-13T21:31:04Z", "type": "commit"}, {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "url": "https://github.com/trinodb/trino/commit/1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "message": "Require PrestoException in assertQueryFails", "committedDate": "2020-04-14T08:42:39Z", "type": "commit"}, {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "url": "https://github.com/trinodb/trino/commit/1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "message": "Require PrestoException in assertQueryFails", "committedDate": "2020-04-14T08:42:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NTU2Mw==", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411185563", "bodyText": "\u2764\ufe0f", "author": "kokosing", "createdAt": "2020-04-20T08:20:50Z", "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "diffHunk": "@@ -68,9 +69,10 @@ public void assertFails(@Language(\"SQL\") String sql, @Language(\"RegExp\") String\n             fail(format(\"Expected query to fail: %s\", sql));\n         }\n         catch (RuntimeException exception) {\n-            if (!nullToEmpty(exception.getMessage()).matches(expectedMessageRegExp)) {\n-                fail(format(\"Expected exception message '%s' to match '%s' for query: %s\", exception.getMessage(), expectedMessageRegExp, sql), exception);\n-            }\n+            exception.addSuppressed(new Exception(\"Query: \" + sql));\n+            assertThat(exception)\n+                    .isInstanceOf(PrestoException.class)\n+                    .hasMessageMatching(expectedMessageRegExp);", "originalCommit": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NjI4Mg==", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411186282", "bodyText": "Is this needed? Is this going to be printed by assertj? Maybe please add a comment.", "author": "kokosing", "createdAt": "2020-04-20T08:21:54Z", "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "diffHunk": "@@ -68,9 +69,10 @@ public void assertFails(@Language(\"SQL\") String sql, @Language(\"RegExp\") String\n             fail(format(\"Expected query to fail: %s\", sql));\n         }\n         catch (RuntimeException exception) {\n-            if (!nullToEmpty(exception.getMessage()).matches(expectedMessageRegExp)) {\n-                fail(format(\"Expected exception message '%s' to match '%s' for query: %s\", exception.getMessage(), expectedMessageRegExp, sql), exception);\n-            }\n+            exception.addSuppressed(new Exception(\"Query: \" + sql));", "originalCommit": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2OTY1MA==", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411469650", "bodyText": "yes, will be printed\nand yes it is needed (those SQLs are often very important)\nit's intentional, so what else should i contain the comment?", "author": "findepi", "createdAt": "2020-04-20T15:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NjI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MjIwNQ==", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411472205", "bodyText": "Ok. Thanks", "author": "kokosing", "createdAt": "2020-04-20T15:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NjI4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NjU0Nw==", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411186547", "bodyText": "ditto", "author": "kokosing", "createdAt": "2020-04-20T08:22:19Z", "path": "presto-testing/src/main/java/io/prestosql/testing/QueryAssertions.java", "diffHunk": "@@ -286,8 +290,11 @@ protected static void assertQueryFails(QueryRunner queryRunner, Session session,\n             queryRunner.execute(session, sql);\n             fail(format(\"Expected query to fail: %s\", sql));\n         }\n-        catch (RuntimeException ex) {\n-            assertExceptionMessage(sql, ex, expectedMessageRegExp);\n+        catch (RuntimeException exception) {\n+            exception.addSuppressed(new Exception(\"Query: \" + sql));", "originalCommit": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4OTc4OQ==", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411189789", "bodyText": "\ud83d\ude2e", "author": "kokosing", "createdAt": "2020-04-20T08:27:07Z", "path": "presto-testing/src/main/java/io/prestosql/testing/QueryAssertions.java", "diffHunk": "@@ -339,4 +339,36 @@ public static void copyTable(QueryRunner queryRunner, QualifiedObjectName table,\n         long rows = (Long) queryRunner.execute(session, sql).getMaterializedRows().get(0).getField(0);\n         log.info(\"Imported %s rows for %s in %s\", rows, table.getObjectName(), nanosSince(start).convertToMostSuccinctTimeUnit());\n     }\n+\n+    static RuntimeException getPrestoExceptionCause(Throwable e)\n+    {\n+        return Throwables.getCausalChain(e).stream()\n+                .filter(QueryAssertions::isPrestoException)\n+                .findFirst() // TODO .collect(toOptional()) -- should be exactly one in the causal chain\n+                .map(RuntimeException.class::cast)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Exception does not have PrestoException cause\", e));\n+    }\n+\n+    private static boolean isPrestoException(Throwable exception)\n+    {\n+        requireNonNull(exception, \"exception is null\");\n+\n+        if (exception instanceof PrestoException || exception instanceof ParsingException) {\n+            return true;\n+        }\n+\n+        if (exception.getClass().getName().equals(\"io.prestosql.client.FailureInfo$FailureException\")) {\n+            try {\n+                String originalClassName = exception.toString().split(\":\", 2)[0];\n+                Class<? extends Throwable> originalClass = Class.forName(originalClassName).asSubclass(Throwable.class);\n+                return PrestoException.class.isAssignableFrom(originalClass) ||\n+                        ParsingException.class.isAssignableFrom(originalClass);", "originalCommit": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MDQzOA==", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411470438", "bodyText": "yup;\nchanging this is out of scope...", "author": "findepi", "createdAt": "2020-04-20T15:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4OTc4OQ=="}], "type": "inlineReview", "revised_code": null}]}