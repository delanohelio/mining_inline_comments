{"pr_number": 6283, "pr_title": "Improve blocks serde", "pr_createdAt": "2020-12-10T09:57:12Z", "pr_url": "https://github.com/trinodb/trino/pull/6283", "timeline": [{"oid": "512dc432a3237a74d46b66b7fb9b2d2ba9d692ea", "url": "https://github.com/trinodb/trino/commit/512dc432a3237a74d46b66b7fb9b2d2ba9d692ea", "message": "Extract logic to a separate method in EncoderUtil", "committedDate": "2020-12-15T09:42:09Z", "type": "commit"}, {"oid": "bfed9b3d74b916f41f99efcf2127ffbb53581278", "url": "https://github.com/trinodb/trino/commit/bfed9b3d74b916f41f99efcf2127ffbb53581278", "message": "Add test of 8-value blocks to block encoding test", "committedDate": "2020-12-15T09:43:44Z", "type": "commit"}, {"oid": "5e9652d8f2e579045169e6caf52b7a713722712e", "url": "https://github.com/trinodb/trino/commit/5e9652d8f2e579045169e6caf52b7a713722712e", "message": "Improve deserialization performance of long blocks\n\n8 `is null` values are checked at once before null data is converted to boolean[].\nIf the value is 0 or 0xFF then we can either ignore or copy all 8 values at once.\n\nbefore\nBenchmarkBlockSerde.deserializeLong                    0  avgt   60   1,182 \u00b1 0,015  ns/op\nBenchmarkBlockSerde.deserializeLong                  .01  avgt   60   3,091 \u00b1 0,081  ns/op\nBenchmarkBlockSerde.deserializeLong                  .10  avgt   60   3,823 \u00b1 0,076  ns/op\nBenchmarkBlockSerde.deserializeLong                  .50  avgt   60   2,667 \u00b1 0,014  ns/op\nBenchmarkBlockSerde.deserializeLong                  .90  avgt   60   3,435 \u00b1 0,016  ns/op\nBenchmarkBlockSerde.deserializeLong                  .99  avgt   60   2,317 \u00b1 0,039  ns/op\n\nafter\nBenchmarkBlockSerde.deserializeLong                    0  avgt   60  1,140 \u00b1 0,007  ns/op\nBenchmarkBlockSerde.deserializeLong                  .01  avgt   60  2,494 \u00b1 0,011  ns/op\nBenchmarkBlockSerde.deserializeLong                  .10  avgt   60  3,939 \u00b1 0,028  ns/op\nBenchmarkBlockSerde.deserializeLong                  .50  avgt   60  2,723 \u00b1 0,017  ns/op\nBenchmarkBlockSerde.deserializeLong                  .90  avgt   60  3,199 \u00b1 0,017  ns/op\nBenchmarkBlockSerde.deserializeLong                  .99  avgt   60  1,413 \u00b1 0,011  ns/op", "committedDate": "2020-12-15T09:43:45Z", "type": "commit"}, {"oid": "ab6bee94501791d94c91b8a5f4b35858ef6e0d6c", "url": "https://github.com/trinodb/trino/commit/ab6bee94501791d94c91b8a5f4b35858ef6e0d6c", "message": "Improve deserialization performance of int 96 blocks\n\nbefore:\nBenchmarkBlockSerde.deserializeInt96                   0  avgt   60   1,762 \u00b1 0,016  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .01  avgt   60   3,272 \u00b1 0,027  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .10  avgt   60   4,750 \u00b1 0,102  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .50  avgt   60   3,700 \u00b1 0,034  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .90  avgt   60   4,239 \u00b1 0,053  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .99  avgt   60   2,341 \u00b1 0,044  ns/op\n\nafter:\nBenchmarkBlockSerde.deserializeInt96                   0  avgt   60  1,746 \u00b1 0,025  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .01  avgt   60  3,343 \u00b1 0,059  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .10  avgt   60  4,806 \u00b1 0,043  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .50  avgt   60  3,604 \u00b1 0,022  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .90  avgt   60  3,579 \u00b1 0,035  ns/op\nBenchmarkBlockSerde.deserializeInt96                 .99  avgt   60  1,718 \u00b1 0,025  ns/op", "committedDate": "2020-12-15T09:43:45Z", "type": "commit"}, {"oid": "53a15709c50954ff4a19324f231d1f22fe5f8ea9", "url": "https://github.com/trinodb/trino/commit/53a15709c50954ff4a19324f231d1f22fe5f8ea9", "message": "Improve serde performance for byte blocks\n\nBenchmarks before:\n\nBenchmarkBlockSerde.deserializeByte                    0  avgt   60   3,265 \u00b1 0,007  ns/op\nBenchmarkBlockSerde.deserializeByte                  .01  avgt   60   4,765 \u00b1 0,028  ns/op\nBenchmarkBlockSerde.deserializeByte                  .10  avgt   60   5,154 \u00b1 0,010  ns/op\nBenchmarkBlockSerde.deserializeByte                  .50  avgt   60   6,691 \u00b1 0,009  ns/op\nBenchmarkBlockSerde.deserializeByte                  .90  avgt   60   2,387 \u00b1 0,019  ns/op\nBenchmarkBlockSerde.deserializeByte                  .99  avgt   60   1,253 \u00b1 0,006  ns/op\nBenchmarkBlockSerde.serializeByte                      0  avgt   60   9.686 \u00b1 0.861  ns/op\nBenchmarkBlockSerde.serializeByte                    .01  avgt   60   9.372 \u00b1 0.492  ns/op\nBenchmarkBlockSerde.serializeByte                    .10  avgt   60   9.452 \u00b1 0.458  ns/op\nBenchmarkBlockSerde.serializeByte                    .50  avgt   60   9.534 \u00b1 0.385  ns/op\nBenchmarkBlockSerde.serializeByte                    .90  avgt   60   4.660 \u00b1 0.168  ns/op\nBenchmarkBlockSerde.serializeByte                    .99  avgt   60   2.761 \u00b1 0.089  ns/op\n\nafter:\nBenchmarkBlockSerde.deserializeByte                    0  avgt   60  0,132 \u00b1 0,001  ns/op\nBenchmarkBlockSerde.deserializeByte                  .01  avgt   60  1,504 \u00b1 0,005  ns/op\nBenchmarkBlockSerde.deserializeByte                  .10  avgt   60  3,048 \u00b1 0,010  ns/op\nBenchmarkBlockSerde.deserializeByte                  .50  avgt   60  2,105 \u00b1 0,003  ns/op\nBenchmarkBlockSerde.deserializeByte                  .90  avgt   60  2,822 \u00b1 0,012  ns/op\nBenchmarkBlockSerde.deserializeByte                  .99  avgt   60  1,082 \u00b1 0,003  ns/op\nBenchmarkBlockSerde.serializeByte                      0  avgt   60  0.212 \u00b1  0.001  ns/op\nBenchmarkBlockSerde.serializeByte                    .01  avgt   60  2.414 \u00b1  0.176  ns/op\nBenchmarkBlockSerde.serializeByte                    .10  avgt   60  4.187 \u00b1  0.060  ns/op\nBenchmarkBlockSerde.serializeByte                    .50  avgt   60  2.409 \u00b1  0.061  ns/op\nBenchmarkBlockSerde.serializeByte                    .90  avgt   60  2.751 \u00b1  0.051  ns/op\nBenchmarkBlockSerde.serializeByte                    .99  avgt   60  1.353 \u00b1  0.009  ns/op", "committedDate": "2020-12-15T09:43:45Z", "type": "commit"}, {"oid": "b3cf839c57ccab6acbefd31e17f10a2ece3ad308", "url": "https://github.com/trinodb/trino/commit/b3cf839c57ccab6acbefd31e17f10a2ece3ad308", "message": "Improve serde performance for short blocks\n\nBenchmarks before:\nBenchmarkBlockSerde.deserializeShort                   0  avgt   60   5,347 \u00b1 0,012  ns/op\nBenchmarkBlockSerde.deserializeShort                 .01  avgt   60   6,660 \u00b1 0,027  ns/op\nBenchmarkBlockSerde.deserializeShort                 .10  avgt   60   7,090 \u00b1 0,066  ns/op\nBenchmarkBlockSerde.deserializeShort                 .50  avgt   60   8,898 \u00b1 0,044  ns/op\nBenchmarkBlockSerde.deserializeShort                 .90  avgt   60   2,789 \u00b1 0,008  ns/op\nBenchmarkBlockSerde.deserializeShort                 .99  avgt   60   1,422 \u00b1 0,003  ns/op\nBenchmarkBlockSerde.serializeShort                     0  avgt   60   8.873 \u00b1 0.271  ns/op\nBenchmarkBlockSerde.serializeShort                   .01  avgt   60   9.499 \u00b1 0.080  ns/op\nBenchmarkBlockSerde.serializeShort                   .10  avgt   60  10.377 \u00b1 0.135  ns/op\nBenchmarkBlockSerde.serializeShort                   .50  avgt   60  11.053 \u00b1 0.157  ns/op\nBenchmarkBlockSerde.serializeShort                   .90  avgt   60   4.682 \u00b1 0.110  ns/op\nBenchmarkBlockSerde.serializeShort                   .99  avgt   60   2.927 \u00b1 0.102  ns/op\n\nafter:\nBenchmarkBlockSerde.deserializeShort                   0  avgt   60  0,270 \u00b1 0,002  ns/op\nBenchmarkBlockSerde.deserializeShort                 .01  avgt   60  1,762 \u00b1 0,005  ns/op\nBenchmarkBlockSerde.deserializeShort                 .10  avgt   60  3,147 \u00b1 0,018  ns/op\nBenchmarkBlockSerde.deserializeShort                 .50  avgt   60  2,148 \u00b1 0,006  ns/op\nBenchmarkBlockSerde.deserializeShort                 .90  avgt   60  2,837 \u00b1 0,018  ns/op\nBenchmarkBlockSerde.deserializeShort                 .99  avgt   60  1,098 \u00b1 0,002  ns/op\nBenchmarkBlockSerde.serializeShort                     0  avgt   60  0.414 \u00b1  0.001  ns/op\nBenchmarkBlockSerde.serializeShort                   .01  avgt   60  2.282 \u00b1  0.281  ns/op\nBenchmarkBlockSerde.serializeShort                   .10  avgt   60  3.750 \u00b1  0.234  ns/op\nBenchmarkBlockSerde.serializeShort                   .50  avgt   60  2.399 \u00b1  0.022  ns/op\nBenchmarkBlockSerde.serializeShort                   .90  avgt   60  2.807 \u00b1  0.020  ns/op\nBenchmarkBlockSerde.serializeShort                   .99  avgt   60  1.567 \u00b1  0.007  ns/op", "committedDate": "2020-12-15T09:43:45Z", "type": "commit"}, {"oid": "3117d096a8af0a864f297871f390d9291674fb38", "url": "https://github.com/trinodb/trino/commit/3117d096a8af0a864f297871f390d9291674fb38", "message": "Improve serde performance for int block\n\nBenchmarks before:\nBenchmark                                           (nullChance)  Mode  Cnt   Score    Error  Units\nBenchmarkBlockSerde.deserializeInteger                 0  avgt   60   5,517 \u00b1 0,024  ns/op\nBenchmarkBlockSerde.deserializeInteger               .01  avgt   60   6,637 \u00b1 0,036  ns/op\nBenchmarkBlockSerde.deserializeInteger               .10  avgt   60   7,179 \u00b1 0,040  ns/op\nBenchmarkBlockSerde.deserializeInteger               .50  avgt   60   9,003 \u00b1 0,105  ns/op\nBenchmarkBlockSerde.deserializeInteger               .90  avgt   60   2,928 \u00b1 0,011  ns/op\nBenchmarkBlockSerde.deserializeInteger               .99  avgt   60   1,400 \u00b1 0,006  ns/op\nBenchmarkBlockSerde.serializeInteger                   0  avgt   60   9.410 \u00b1 0.304  ns/op\nBenchmarkBlockSerde.serializeInteger                 .01  avgt   60   9.804 \u00b1 0.239  ns/op\nBenchmarkBlockSerde.serializeInteger                 .10  avgt   60  10.770 \u00b1 0.127  ns/op\nBenchmarkBlockSerde.serializeInteger                 .50  avgt   60  10.836 \u00b1 0.108  ns/op\nBenchmarkBlockSerde.serializeInteger                 .90  avgt   60   4.862 \u00b1 0.080  ns/op\nBenchmarkBlockSerde.serializeInteger                 .99  avgt   60   3.426 \u00b1 0.112  ns/op\n\nafter:\nBenchmark                                           (nullChance)  Mode  Cnt   Score    Error  Units\nBenchmarkBlockSerde.deserializeInteger                 0  avgt   60  0,559 \u00b1 0,002  ns/op\nBenchmarkBlockSerde.deserializeInteger               .01  avgt   60  2,094 \u00b1 0,011  ns/op\nBenchmarkBlockSerde.deserializeInteger               .10  avgt   60  3,383 \u00b1 0,009  ns/op\nBenchmarkBlockSerde.deserializeInteger               .50  avgt   60  2,402 \u00b1 0,007  ns/op\nBenchmarkBlockSerde.deserializeInteger               .90  avgt   60  2,960 \u00b1 0,018  ns/op\nBenchmarkBlockSerde.deserializeInteger               .99  avgt   60  1,225 \u00b1 0,004  ns/op\nBenchmarkBlockSerde.serializeInteger                   0  avgt   60  0.820 \u00b1  0.002  ns/op\nBenchmarkBlockSerde.serializeInteger                 .01  avgt   60  2.780 \u00b1  0.186  ns/op\nBenchmarkBlockSerde.serializeInteger                 .10  avgt   60  4.151 \u00b1  0.202  ns/op\nBenchmarkBlockSerde.serializeInteger                 .50  avgt   60  2.656 \u00b1  0.023  ns/op\nBenchmarkBlockSerde.serializeInteger                 .90  avgt   60  3.178 \u00b1  0.016  ns/op\nBenchmarkBlockSerde.serializeInteger                 .99  avgt   60  1.917 \u00b1  0.026  ns/op", "committedDate": "2020-12-15T09:43:45Z", "type": "commit"}, {"oid": "76805ea47f22745f5bf7125d359da68eb9610c05", "url": "https://github.com/trinodb/trino/commit/76805ea47f22745f5bf7125d359da68eb9610c05", "message": "Improve serde performance for int 128 blocks\n\nBenchmarks before:\nBenchmark                                   (nullChance)  Mode  Cnt   Score   Error  Units\nBenchmarkBlockSerde.deserializeLongDecimal             0  avgt   60  11,706 \u00b1 0,098  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .01  avgt   60   6,059 \u00b1 0,043  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .10  avgt   60   6,404 \u00b1 0,062  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .50  avgt   60   7,251 \u00b1 0,051  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .90  avgt   60   3,289 \u00b1 0,018  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .99  avgt   60   2,368 \u00b1 0,013  ns/op\nBenchmarkBlockSerde.serializeLongDecimal               0  avgt   60  13.069 \u00b1 0.034  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .01  avgt   60  12.215 \u00b1 0.033  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .10  avgt   60  12.333 \u00b1 0.032  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .50  avgt   60  10.484 \u00b1 0.033  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .90  avgt   60   5.715 \u00b1 0.060  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .99  avgt   60   2.634 \u00b1 0.006  ns/op\n\nafter:\nBenchmark                                   (nullChance)  Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLongDecimal             0  avgt   60  2,448 \u00b1 0,024  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .01  avgt   60  5,024 \u00b1 0,046  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .10  avgt   60  5,184 \u00b1 0,186  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .50  avgt   60  3,958 \u00b1 0,050  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .90  avgt   60  3,736 \u00b1 0,036  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .99  avgt   60  3,311 \u00b1 0,049  ns/op\nBenchmarkBlockSerde.serializeLongDecimal               0  avgt   60  3.210 \u00b1 0.017  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .01  avgt   60  5.607 \u00b1 0.029  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .10  avgt   60  6.370 \u00b1 0.024  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .50  avgt   60  7.319 \u00b1 0.054  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .90  avgt   60  5.507 \u00b1 0.030  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .99  avgt   60  3.313 \u00b1 0.010  ns/op", "committedDate": "2020-12-15T09:43:45Z", "type": "commit"}, {"oid": "76805ea47f22745f5bf7125d359da68eb9610c05", "url": "https://github.com/trinodb/trino/commit/76805ea47f22745f5bf7125d359da68eb9610c05", "message": "Improve serde performance for int 128 blocks\n\nBenchmarks before:\nBenchmark                                   (nullChance)  Mode  Cnt   Score   Error  Units\nBenchmarkBlockSerde.deserializeLongDecimal             0  avgt   60  11,706 \u00b1 0,098  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .01  avgt   60   6,059 \u00b1 0,043  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .10  avgt   60   6,404 \u00b1 0,062  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .50  avgt   60   7,251 \u00b1 0,051  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .90  avgt   60   3,289 \u00b1 0,018  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .99  avgt   60   2,368 \u00b1 0,013  ns/op\nBenchmarkBlockSerde.serializeLongDecimal               0  avgt   60  13.069 \u00b1 0.034  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .01  avgt   60  12.215 \u00b1 0.033  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .10  avgt   60  12.333 \u00b1 0.032  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .50  avgt   60  10.484 \u00b1 0.033  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .90  avgt   60   5.715 \u00b1 0.060  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .99  avgt   60   2.634 \u00b1 0.006  ns/op\n\nafter:\nBenchmark                                   (nullChance)  Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLongDecimal             0  avgt   60  2,448 \u00b1 0,024  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .01  avgt   60  5,024 \u00b1 0,046  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .10  avgt   60  5,184 \u00b1 0,186  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .50  avgt   60  3,958 \u00b1 0,050  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .90  avgt   60  3,736 \u00b1 0,036  ns/op\nBenchmarkBlockSerde.deserializeLongDecimal           .99  avgt   60  3,311 \u00b1 0,049  ns/op\nBenchmarkBlockSerde.serializeLongDecimal               0  avgt   60  3.210 \u00b1 0.017  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .01  avgt   60  5.607 \u00b1 0.029  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .10  avgt   60  6.370 \u00b1 0.024  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .50  avgt   60  7.319 \u00b1 0.054  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .90  avgt   60  5.507 \u00b1 0.030  ns/op\nBenchmarkBlockSerde.serializeLongDecimal             .99  avgt   60  3.313 \u00b1 0.010  ns/op", "committedDate": "2020-12-15T09:43:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxMDE3NA==", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r544310174", "bodyText": "Why not use similar 8-bits null check as in in other serdes?", "author": "sopel39", "createdAt": "2020-12-16T13:46:39Z", "path": "presto-spi/src/main/java/io/prestosql/spi/block/Int128ArrayBlockEncoding.java", "diffHunk": "@@ -54,13 +67,33 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n         boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n \n         long[] values = new long[positionCount * 2];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position * 2] = sliceInput.readLong();\n-                values[(position * 2) + 1] = sliceInput.readLong();\n+        if (valueIsNull == null) {\n+            sliceInput.readBytes(Slices.wrappedLongArray(values));\n+        }\n+        else {\n+            int nonNullPositionCount = sliceInput.readInt();\n+            sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount * 2));\n+            int position = 2 * (nonNullPositionCount - 1);\n+            for (int i = positionCount - 1; i >= 0 && position >= 0; i--) {", "originalCommit": "76805ea47f22745f5bf7125d359da68eb9610c05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxODU4MQ==", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r544318581", "bodyText": "It turns out to be slower. I guess more data means less time spent on null checking and more on actual memory copying.", "author": "skrzypo987", "createdAt": "2020-12-16T13:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxMDE3NA=="}], "type": "inlineReview", "revised_code": null}]}