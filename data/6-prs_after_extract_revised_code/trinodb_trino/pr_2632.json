{"pr_number": 2632, "pr_title": "Add bogus row to support listing empty catalogs", "pr_createdAt": "2020-01-26T11:33:43Z", "pr_url": "https://github.com/trinodb/trino/pull/2632", "timeline": [{"oid": "2366ba797f335045de1fa6d5df2221ae0fc1a2d1", "url": "https://github.com/trinodb/trino/commit/2366ba797f335045de1fa6d5df2221ae0fc1a2d1", "message": "Add bogus row to support listing empty catalogs", "committedDate": "2020-01-29T16:38:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNzcyMQ==", "url": "https://github.com/trinodb/trino/pull/2632#discussion_r373527721", "bodyText": "This can be structure as follows. It's simpler and clearer what's going on:\nList<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream();\n\nOptional<Expression> predicate = Optional.empty();\nif (rows.isEmpty()) {\n    rows = ImmutableList.of(\"\");\n    predicate = Optional.of(BooleanLiteral.FALSE_LITERAL);\n}\nelse if (node.getLikePattern().isPresent()) {\n    predicate = Optional.of(new LikePredicate(...));\n}\n\nreturn simpleQuery(...)", "author": "martint", "createdAt": "2020-01-31T15:09:10Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -341,24 +342,29 @@ protected Node visitShowSchemas(ShowSchemas node, Void context)\n         @Override\n         protected Node visitShowCatalogs(ShowCatalogs node, Void context)\n         {\n-            List<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream()\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();", "originalCommit": "2366ba797f335045de1fa6d5df2221ae0fc1a2d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16c00972603625843a18959fa511fcc14e6fd9bc", "chunk": "diff --git a/presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java b/presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java\nindex 6b1612e24b..e2c79a72ef 100644\n--- a/presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java\n+++ b/presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java\n\n@@ -342,29 +341,27 @@ final class ShowQueriesRewrite\n         @Override\n         protected Node visitShowCatalogs(ShowCatalogs node, Void context)\n         {\n-            ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n-\n-            listCatalogs(session, metadata, accessControl).keySet().stream()\n+            List<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream()\n                     .map(name -> row(new StringLiteral(name)))\n-                    .forEach(rows::add);\n-\n-            // add bogus row so we can support empty catalogs\n-            rows.add(row(new StringLiteral(\"\")));\n+                    .collect(toImmutableList());\n \n-            Expression predicate = sqlParser.createExpression(\"length(catalog) > 0\", new ParsingOptions());\n-            Optional<String> likePattern = node.getLikePattern();\n-            if (likePattern.isPresent()) {\n-                predicate = and(predicate, new LikePredicate(\n+            Optional<Expression> predicate = Optional.empty();\n+            if (rows.isEmpty()) {\n+                rows = ImmutableList.of(new StringLiteral(\"\"));\n+                predicate = Optional.of(BooleanLiteral.FALSE_LITERAL);\n+            }\n+            else if (node.getLikePattern().isPresent()) {\n+                predicate = Optional.of(new LikePredicate(\n                         identifier(\"catalog\"),\n-                        new StringLiteral(likePattern.get()),\n+                        new StringLiteral(node.getLikePattern().get()),\n                         node.getEscape().map(StringLiteral::new)));\n             }\n \n             return simpleQuery(\n-                    selectList(aliasedName(\"Catalog\", \"catalog\")),\n-                    aliased(new Values(rows.build()), \"catalogs\", ImmutableList.of(\"catalog\")),\n+                    selectList(new AllColumns()),\n+                    aliased(new Values(rows), \"catalogs\", ImmutableList.of(\"Catalog\")),\n                     predicate,\n-                    ordering(ascending(\"catalog\")));\n+                    Optional.of(ordering(ascending(\"Catalog\"))));\n         }\n \n         @Override\n"}}, {"oid": "16c00972603625843a18959fa511fcc14e6fd9bc", "url": "https://github.com/trinodb/trino/commit/16c00972603625843a18959fa511fcc14e6fd9bc", "message": "Add bogus row to support listing empty catalogs", "committedDate": "2020-02-02T05:20:21Z", "type": "commit"}, {"oid": "16c00972603625843a18959fa511fcc14e6fd9bc", "url": "https://github.com/trinodb/trino/commit/16c00972603625843a18959fa511fcc14e6fd9bc", "message": "Add bogus row to support listing empty catalogs", "committedDate": "2020-02-02T05:20:21Z", "type": "forcePushed"}]}