{"pr_number": 4431, "pr_title": "[WFCORE-5232] Use a new process to delete the install directory. JBos\u2026", "pr_createdAt": "2020-12-16T22:26:36Z", "pr_url": "https://github.com/wildfly/wildfly-core/pull/4431", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE1NDUwOA==", "url": "https://github.com/wildfly/wildfly-core/pull/4431#discussion_r545154508", "bodyText": "Should it be java.exe for Windows?", "author": "jfdenise", "createdAt": "2020-12-17T14:58:13Z", "path": "bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/InstallationCleaner.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ *\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wildfly.core.jar.runtime;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.wildfly.core.jar.runtime._private.BootableJarLogger;\n+\n+/**\n+ * Allows for cleanup of a bootable JAR installation. The {@link #run()} method blocks until the\n+ * {@linkplain BootableEnvironment#getPidFile() PID file} is deleted or a\n+ * {@linkplain BootableEnvironment#getTimeout() timeout} is reached. Then there is an attempt to delete the install\n+ * directory.\n+ * <p>\n+ * If the {@code org.wildfly.core.jar.cleanup.newProcess} system property is set to {@code true}, the default for Windows,\n+ * a new process will be launched to delete the install directory.\n+ * </p>\n+ *\n+ * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>\n+ */\n+class InstallationCleaner implements Runnable {\n+    private final BootableEnvironment environment;\n+    private final Path cleanupMarker;\n+    private final BootableJarLogger logger;\n+    private final boolean newProcess;\n+    private final int retries;\n+\n+    InstallationCleaner(final BootableEnvironment environment, final BootableJarLogger logger) {\n+        this.environment = environment;\n+        cleanupMarker = environment.getJBossHome().resolve(\"wildfly-cleanup-marker\");\n+        this.logger = logger;\n+        newProcess = getProperty(\"org.wildfly.core.jar.cleanup.newProcess\", environment.isWindows());\n+        retries = getProperty(\"org.wildfly.core.jar.cleanup.retries\", 3);\n+    }\n+\n+    @Override\n+    public void run() {\n+        // Clean up is not already in progress\n+        if (Files.notExists(cleanupMarker)) {\n+            try {\n+                Files.createFile(cleanupMarker);\n+                long timeout = environment.getTimeout() * 1000;\n+                final Path pidFile = environment.getPidFile();\n+                final long wait = 500L;\n+                while (Files.exists(pidFile)) {\n+                    try {\n+                        TimeUnit.MILLISECONDS.sleep(wait);\n+                    } catch (InterruptedException ignore) {\n+                        break;\n+                    }\n+                    timeout -= wait;\n+                    if (timeout <= 0) {\n+                        logger.cleanupTimeout(environment.getTimeout(), pidFile);\n+                        break;\n+                    }\n+                }\n+                cleanup();\n+            } catch (IOException e) {\n+                logger.failedToStartCleanupProcess(e, environment.getJBossHome());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Either starts a new process to delete the install directory or deletes the install directory in the current\n+     * process.\n+     * <p>\n+     * By default Windows will launch a new cleanup process. This can be controlled by setting the\n+     * {@code org.wildfly.core.jar.cleanup.newProcess} to {@code true} to launch or a new process or {@code false} to\n+     * delete the install directory in the current process.\n+     * </p>\n+     *\n+     * @throws IOException if an error occurs deleting the directory\n+     */\n+    void cleanup() throws IOException {\n+        if (newProcess) {\n+            try {\n+                newProcess();\n+            } catch (IOException e) {\n+                deleteDirectory();\n+                throw e;\n+            }\n+        } else {\n+            deleteDirectory();\n+        }\n+    }\n+\n+    private void deleteDirectory() throws IOException {\n+        final Path installDir = environment.getJBossHome();\n+        Files.walkFileTree(installDir, new SimpleFileVisitor<Path>() {\n+            @Override\n+            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) {\n+                try {\n+                    // Don't delete the cleanup marker until we're ready to delete the directory\n+                    if (!file.equals(cleanupMarker)) {\n+                        Files.delete(file);\n+                    }\n+                } catch (IOException e) {\n+                    logger.cantDelete(file.toString(), e);\n+                }\n+                return FileVisitResult.CONTINUE;\n+            }\n+\n+            @Override\n+            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) {\n+                try {\n+                    if (dir.equals(installDir)) {\n+                        // We have to delete the marker before we can delete the directory\n+                        Files.deleteIfExists(cleanupMarker);\n+                    }\n+                    Files.delete(dir);\n+                } catch (IOException e) {\n+                    logger.cantDelete(dir.toString(), e);\n+                }\n+                return FileVisitResult.CONTINUE;\n+            }\n+        });\n+    }\n+\n+    private void newProcess() throws IOException {\n+        // Start a new process which will clean up the install directory. This is done in a new process in cases where\n+        // this process may hold locks on to resources that need to be cleaned up.\n+        final String[] cmd = {\n+                getJavaCommand(),\n+                \"-cp\",\n+                // Use the current class path as it should just have the bootable JAR on it and this is where the\n+                // CleanupProcess is located.\n+                System.getProperty(\"java.class.path\"),\n+                \"org.wildfly.core.jar.boot.CleanupProcessor\",\n+                environment.getJBossHome().toString(),\n+                Integer.toString(retries)\n+        };\n+        final ProcessBuilder builder = new ProcessBuilder(cmd)\n+                .redirectError(ProcessBuilder.Redirect.INHERIT)\n+                .redirectOutput(ProcessBuilder.Redirect.INHERIT)\n+                .directory(new File(System.getProperty(\"user.dir\")));\n+        builder.start();\n+    }\n+\n+    private String getJavaCommand() {\n+        final Path javaHome = Paths.get(System.getProperty(\"java.home\"));\n+        final Path java;\n+        if (environment.isWindows()) {\n+            java = javaHome.resolve(\"bin\").resolve(\"java.exe\");\n+        } else {\n+            java = javaHome.resolve(\"bin\").resolve(\"java\");\n+        }\n+        if (Files.exists(java)) {\n+            return java.toString();\n+        }\n+        return \"java\";", "originalCommit": "6d5880c1e9e66436af22ea0a041801a3dd34a13c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwODUzNw==", "url": "https://github.com/wildfly/wildfly-core/pull/4431#discussion_r545208537", "bodyText": "I thought about that, but I know on Windows from CMD java works. That said java.home should never be a missing property and this is a fallback that should never happen.", "author": "jamezp", "createdAt": "2020-12-17T16:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE1NDUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "bfe5c7e0da53d4e19324a98ad3f7bc1adc66a3b8", "chunk": "diff --git a/bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/InstallationCleaner.java b/bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/InstallationCleaner.java\nindex 37b58eae95..b2b441af48 100644\n--- a/bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/InstallationCleaner.java\n+++ b/bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/InstallationCleaner.java\n\n@@ -102,7 +102,15 @@ class InstallationCleaner implements Runnable {\n             try {\n                 newProcess();\n             } catch (IOException e) {\n-                deleteDirectory();\n+                IOException suppressed = null;\n+                try {\n+                    deleteDirectory();\n+                } catch (IOException ex) {\n+                    suppressed = ex;\n+                }\n+                if (suppressed != null) {\n+                    e.addSuppressed(suppressed);\n+                }\n                 throw e;\n             }\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NDM2NQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4431#discussion_r545264365", "bodyText": "Maybe instead of just logging this should throw an exception. What do you think @jfdenise?", "author": "jamezp", "createdAt": "2020-12-17T17:22:27Z", "path": "bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/BootableJar.java", "diffHunk": "@@ -233,21 +230,15 @@ private LogContext configureLogContext() throws IOException {\n     }\n \n     public void run() throws Exception {\n-        try {\n-            server = buildServer(startServerArgs);\n-        } catch (RuntimeException ex) {\n-            cleanup();\n-            throw ex;\n-        }\n-\n         Runtime.getRuntime().addShutdownHook(new ShutdownHook());\n-        server.start();\n-    }\n-\n-    private void cleanup() {\n-        log.deletingHome(environment.getJBossHome());\n-        deleteDir(environment.getJBossHome());\n+        server = buildServer(startServerArgs);\n \n+        if (Files.notExists(pidFile)) {\n+            Files.write(pidFile, Collections.singleton(Long.toString(org.wildfly.common.os.Process.getProcessId())), StandardCharsets.UTF_8, StandardOpenOption.CREATE_NEW);\n+        } else {\n+            log.pidFileAlreadyExists(pidFile, environment.getJBossHome());", "originalCommit": "6d5880c1e9e66436af22ea0a041801a3dd34a13c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDEzMA==", "url": "https://github.com/wildfly/wildfly-core/pull/4431#discussion_r545320130", "bodyText": "I agree, that seems an invalid state. We should start from an empty directory.", "author": "jfdenise", "createdAt": "2020-12-17T18:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NDM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bfe5c7e0da53d4e19324a98ad3f7bc1adc66a3b8", "chunk": "diff --git a/bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/BootableJar.java b/bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/BootableJar.java\nindex 6b9e82132a..96c558e88e 100644\n--- a/bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/BootableJar.java\n+++ b/bootable-jar/runtime/src/main/java/org/wildfly/core/jar/runtime/BootableJar.java\n\n@@ -236,7 +236,7 @@ public final class BootableJar implements ShutdownHandler {\n         if (Files.notExists(pidFile)) {\n             Files.write(pidFile, Collections.singleton(Long.toString(org.wildfly.common.os.Process.getProcessId())), StandardCharsets.UTF_8, StandardOpenOption.CREATE_NEW);\n         } else {\n-            log.pidFileAlreadyExists(pidFile, environment.getJBossHome());\n+            throw log.pidFileAlreadyExists(pidFile, environment.getJBossHome());\n         }\n         server.start();\n     }\n"}}, {"oid": "bfe5c7e0da53d4e19324a98ad3f7bc1adc66a3b8", "url": "https://github.com/wildfly/wildfly-core/commit/bfe5c7e0da53d4e19324a98ad3f7bc1adc66a3b8", "message": "[WFCORE-5232] Use a new process to delete the install directory. JBoss Modules holds locks on the JAR's which results in a failure to delete the install directory on Windows. By using a new process we wait until the main process has died and we delete the files in the new process avoiding the files being locked.\n\nhttps://issues.redhat.com/browse/WFCORE-5232", "committedDate": "2020-12-17T23:18:33Z", "type": "forcePushed"}, {"oid": "fbdfa68da87e2f725b820b3b12f5738cdcb4562e", "url": "https://github.com/wildfly/wildfly-core/commit/fbdfa68da87e2f725b820b3b12f5738cdcb4562e", "message": "[WFCORE-5232] Use a new process to delete the install directory. JBoss Modules holds locks on the JAR's which results in a failure to delete the install directory on Windows. By using a new process we wait until the main process has died and we delete the files in the new process avoiding the files being locked.\n\nhttps://issues.redhat.com/browse/WFCORE-5232", "committedDate": "2020-12-22T17:25:17Z", "type": "forcePushed"}, {"oid": "33c668d06334b5d7cb2f28b34002debf75a1776e", "url": "https://github.com/wildfly/wildfly-core/commit/33c668d06334b5d7cb2f28b34002debf75a1776e", "message": "[WFCORE-5232] Use a new process to delete the install directory. JBoss Modules holds locks on the JAR's which results in a failure to delete the install directory on Windows. By using a new process we wait until the main process has died and we delete the files in the new process avoiding the files being locked.\n\nhttps://issues.redhat.com/browse/WFCORE-5232", "committedDate": "2021-01-07T02:34:08Z", "type": "forcePushed"}, {"oid": "8462bd1d944384692934ae5cc63b1a8123ac5eba", "url": "https://github.com/wildfly/wildfly-core/commit/8462bd1d944384692934ae5cc63b1a8123ac5eba", "message": "[WFCORE-5232] Use a new process to delete the install directory. JBoss Modules holds locks on the JAR's which results in a failure to delete the install directory on Windows. By using a new process we wait until the main process has died and we delete the files in the new process avoiding the files being locked.\n\nhttps://issues.redhat.com/browse/WFCORE-5232", "committedDate": "2021-01-07T20:42:50Z", "type": "forcePushed"}, {"oid": "40b364aaad33316cc9983084664a6cf35af86743", "url": "https://github.com/wildfly/wildfly-core/commit/40b364aaad33316cc9983084664a6cf35af86743", "message": "[WFCORE-5232] Use a new process to delete the install directory. JBoss Modules holds locks on the JAR's which results in a failure to delete the install directory on Windows. By using a new process we wait until the main process has died and we delete the files in the new process avoiding the files being locked.\n\nhttps://issues.redhat.com/browse/WFCORE-5232", "committedDate": "2021-01-07T20:49:05Z", "type": "commit"}, {"oid": "40b364aaad33316cc9983084664a6cf35af86743", "url": "https://github.com/wildfly/wildfly-core/commit/40b364aaad33316cc9983084664a6cf35af86743", "message": "[WFCORE-5232] Use a new process to delete the install directory. JBoss Modules holds locks on the JAR's which results in a failure to delete the install directory on Windows. By using a new process we wait until the main process has died and we delete the files in the new process avoiding the files being locked.\n\nhttps://issues.redhat.com/browse/WFCORE-5232", "committedDate": "2021-01-07T20:49:05Z", "type": "forcePushed"}]}