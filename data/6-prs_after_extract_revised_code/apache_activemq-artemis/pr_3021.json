{"pr_number": 3021, "pr_title": "ARTEMIS-2662 Using previously stored encodeSize on page record offset", "pr_createdAt": "2020-03-17T01:33:00Z", "pr_url": "https://github.com/apache/activemq-artemis/pull/3021", "timeline": [{"oid": "655b317919fc3b005ab00db630820132f8bc46be", "url": "https://github.com/apache/activemq-artemis/commit/655b317919fc3b005ab00db630820132f8bc46be", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded.", "committedDate": "2020-03-17T01:33:09Z", "type": "forcePushed"}, {"oid": "aea657573ab46b8097f18ceb5178b088b1ffa16b", "url": "https://github.com/apache/activemq-artemis/commit/aea657573ab46b8097f18ceb5178b088b1ffa16b", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded.", "committedDate": "2020-03-17T02:10:48Z", "type": "forcePushed"}, {"oid": "15758fec5d9d9eb7c046c37c8843e8f23a096ac6", "url": "https://github.com/apache/activemq-artemis/commit/15758fec5d9d9eb7c046c37c8843e8f23a096ac6", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded.", "committedDate": "2020-03-17T02:45:22Z", "type": "forcePushed"}, {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "url": "https://github.com/apache/activemq-artemis/commit/6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThere is no guarantee that the encodeSize size is the same in AMQP right after read.\nAs the protocol may add additional bytes right after decoded such as header, extra properties.. etc.", "committedDate": "2020-03-17T02:49:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzAzMw==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393527033", "bodyText": "This test class should be cleaned up a bit", "author": "franz1981", "createdAt": "2020-03-17T08:57:14Z", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.activemq.artemis.tests.integration.amqp.paging;\n+\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffers;\n+import org.apache.activemq.artemis.api.core.Message;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.paging.cursor.impl.PageReaderTest;\n+import org.apache.activemq.artemis.protocol.amqp.broker.AMQPStandardMessage;\n+import org.apache.activemq.artemis.spi.core.protocol.MessagePersister;\n+import org.apache.activemq.artemis.tests.integration.amqp.AmqpTestSupport;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class AmqpPageReaderTest extends PageReaderTest {\n+\n+   public MessageImpl createProtonMessage(String address) {\n+      AmqpMessage message = new AmqpMessage();\n+      final StringBuilder builder = new StringBuilder();\n+      for (int i = 0; i < 1000; i++) {\n+         builder.append('0');\n+      }\n+      final String data = builder.toString();\n+      message.setText(data);\n+      message.setAddress(address);\n+      message.setDurable(true);\n+\n+      MessageImpl protonMessage = (MessageImpl) message.getWrappedMessage();\n+\n+      return protonMessage;\n+   }\n+\n+   @Override\n+   protected Message createMessage(SimpleString address, int msgId, byte[] content) {\n+      MessageImpl protonMessage = createProtonMessage(address.toString());\n+      AMQPStandardMessage amqpStandardMessage =  AmqpTestSupport.encodeAndDecodeMessage(0, protonMessage, 2 * 1024);\n+      amqpStandardMessage.setMessageID(msgId);\n+\n+      return amqpStandardMessage;\n+   }\n+\n+\n+   @Test\n+   public void testEncodeSize() throws Exception {\n+\n+      Message message = createMessage(SimpleString.toSimpleString(\"Test\"), 1, new byte[10]);\n+\n+      MessagePersister persister = (MessagePersister)message.getPersister();\n+\n+      ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(1024);\n+      persister.encode(buffer, message);\n+\n+      Assert.assertEquals(persister.getEncodeSize(message), buffer.writerIndex());\n+\n+      // the very first byte is the persisterID, we skip that since we are calling the Persister directly\n+      buffer.readerIndex(1);\n+      Message messageRead = persister.decode(buffer, null, null);\n+\n+      // The current persister does not guarantee the same encode size after loading\n+      // and it does not need to\n+      // Assert.assertEquals(persister.getEncodeSize(message), persister.getEncodeSize(messageRead));", "originalCommit": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NDI3OQ==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393554279", "bodyText": "I intended to keep it commented out, as it would fail if commented out.. nothing to be cleaned.", "author": "clebertsuconic", "createdAt": "2020-03-17T09:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "c801c00e335272e71c8b659efdf4067da644e637", "chunk": "diff --git a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java\nindex 32ab400248..2afb74518d 100644\n--- a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java\n+++ b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java\n\n@@ -75,7 +75,7 @@ public class AmqpPageReaderTest extends PageReaderTest {\n       Message messageRead = persister.decode(buffer, null, null);\n \n       // The current persister does not guarantee the same encode size after loading\n-      // and it does not need to\n+      /// if this ever changes we can uncomment the next line.\n       // Assert.assertEquals(persister.getEncodeSize(message), persister.getEncodeSize(messageRead));\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MjQ1OA==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393542458", "bodyText": "I would encapsulate this computation as part of PagedMessage or PagePosition , possibly adding a test", "author": "franz1981", "createdAt": "2020-03-17T09:24:46Z", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageSubscriptionImpl.java", "diffHunk": "@@ -1357,7 +1357,7 @@ private PagedReference moveNext() {\n                   break;\n                }\n \n-               int nextFileOffset = message.getPosition().getFileOffset() == -1 ? -1 : message.getPosition().getFileOffset() + message.getPagedMessage().getEncodeSize() + Page.SIZE_RECORD;\n+               int nextFileOffset = message.getPosition().getFileOffset() == -1 ? -1 : message.getPosition().getFileOffset() + message.getPagedMessage().getStoredSize() + Page.SIZE_RECORD;", "originalCommit": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NjkzNA==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393556934", "bodyText": "I agree, and I raised that with you. but this is not part of my change here though. this could be a different PR.", "author": "clebertsuconic", "createdAt": "2020-03-17T09:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MjQ1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDAwMg==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393544002", "bodyText": "Instead of using this logic, woudn't simpler to correctly initialize storedSize for both protocols: for core == encodeSize, for AMQP, using a different value?", "author": "franz1981", "createdAt": "2020-03-17T09:27:15Z", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -59,8 +61,19 @@ public PagedMessageImpl(final Message message, final long[] queueIDs) {\n       this.message = message;\n    }\n \n-   public PagedMessageImpl(StorageManager storageManager) {\n+   public PagedMessageImpl(int storedSize, StorageManager storageManager) {\n       this.storageManager = storageManager;\n+      this.storedSize = storedSize;\n+   }\n+\n+\n+   @Override\n+   public int getStoredSize() {\n+      if (storedSize <= 0) {", "originalCommit": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NzE4Mg==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393557182", "bodyText": "I am not sure it's safe to do that in case the encodeSize changed between the contruction and when getStoredSize is used.\nWe can change this If you're sure it's safe. I wasn't bold enough.", "author": "clebertsuconic", "createdAt": "2020-03-17T09:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjE3OQ==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393566179", "bodyText": "We can change this If you're sure it's safe. I wasn't bold enough.\n\nAgree, I'm not sure of it as well (let me check around on the code)", "author": "franz1981", "createdAt": "2020-03-17T10:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c801c00e335272e71c8b659efdf4067da644e637", "chunk": "diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java\nindex 846da6e5fc..67d902f449 100644\n--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java\n+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java\n\n@@ -59,6 +59,7 @@ public class PagedMessageImpl implements PagedMessage {\n    public PagedMessageImpl(final Message message, final long[] queueIDs) {\n       this.queueIDs = queueIDs;\n       this.message = message;\n+      this.storedSize = 0;\n    }\n \n    public PagedMessageImpl(int storedSize, StorageManager storageManager) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDQ1NA==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393544454", "bodyText": "If it cannot change anymore, I would make it final instead", "author": "franz1981", "createdAt": "2020-03-17T09:27:59Z", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -47,6 +47,8 @@\n \n    private long transactionID = 0;\n \n+   private int storedSize = 0;", "originalCommit": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NjA2NA==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393556064", "bodyText": "I didn't think it was final.. I thought I was going to have a setter when I wrote this.. changing it.", "author": "clebertsuconic", "createdAt": "2020-03-17T09:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDQ1NA=="}], "type": "inlineReview", "revised_code": {"commit": "c801c00e335272e71c8b659efdf4067da644e637", "chunk": "diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java\nindex 846da6e5fc..67d902f449 100644\n--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java\n+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java\n\n@@ -47,7 +47,7 @@ public class PagedMessageImpl implements PagedMessage {\n \n    private long transactionID = 0;\n \n-   private int storedSize = 0;\n+   private final int storedSize;\n \n    private volatile StorageManager storageManager;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393545064", "bodyText": "I don't know why, but my IDEA isn't happy with this test, see\n\nAlthough I can run it and it compiles correctly...:(", "author": "franz1981", "createdAt": "2020-03-17T09:28:59Z", "path": "artemis-server/src/test/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageReaderTest.java", "diffHunk": "@@ -58,7 +58,7 @@ public void testPageReadMessage() throws Exception {\n             PagePosition pagePosition = new PagePositionImpl(10, i);\n             pagedMessage = pageReader.getMessage(pagePosition);\n          } else {\n-            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getEncodeSize() + Page.SIZE_RECORD;\n+            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getStoredSize() + Page.SIZE_RECORD;", "originalCommit": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NzUyNQ==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393557525", "bodyText": "PageReaderTest is from a different testsuite. IDEA may not like it.", "author": "clebertsuconic", "createdAt": "2020-03-17T09:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2Mjc5OQ==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393562799", "bodyText": "It's not that simple to move this test. it uses a lot of package private methods.. moving would need to make them public or a bigger refactoring.\nI had a version where I did this at some point. I would go for the simpler version now in case we ever need to cherry-pick to a point release.", "author": "clebertsuconic", "createdAt": "2020-03-17T09:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2Njg5MA==", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393566890", "bodyText": "PageReaderTest is from a different testsuite. IDEA may not like it.\n\nWhat's strange is that I rememeber while doing it the same (basically same code) IDEA wasn't complaining that much, but is really a minor eh, can be ignored", "author": "franz1981", "createdAt": "2020-03-17T10:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c801c00e335272e71c8b659efdf4067da644e637", "url": "https://github.com/apache/activemq-artemis/commit/c801c00e335272e71c8b659efdf4067da644e637", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThere is no guarantee that the encodeSize size is the same in AMQP right after read.\nAs the protocol may add additional bytes right after decoded such as header, extra properties.. etc.", "committedDate": "2020-03-17T09:55:25Z", "type": "commit"}, {"oid": "c801c00e335272e71c8b659efdf4067da644e637", "url": "https://github.com/apache/activemq-artemis/commit/c801c00e335272e71c8b659efdf4067da644e637", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThere is no guarantee that the encodeSize size is the same in AMQP right after read.\nAs the protocol may add additional bytes right after decoded such as header, extra properties.. etc.", "committedDate": "2020-03-17T09:55:25Z", "type": "forcePushed"}]}