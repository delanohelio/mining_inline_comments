{"pr_number": 3129, "pr_title": "ARTEMIS-2372 / ARTEMIS-2740 Improving Message Annotations support in AMQP", "pr_createdAt": "2020-05-12T21:36:34Z", "pr_url": "https://github.com/apache/activemq-artemis/pull/3129", "timeline": [{"oid": "526c78d44a762d8daf8cf111385d65dd3a5fd087", "url": "https://github.com/apache/activemq-artemis/commit/526c78d44a762d8daf8cf111385d65dd3a5fd087", "message": "ARTEMIS-2372 / ARTEMIS-2740 Improving Message Annotations support in AMQP\n\n- when sending messages to DLQ or Expiry we now use x-opt legal names\n- we now support filtering thorugh annotations if using m. as a prefix.\n- enabling hyphenated_props: to allow m. as a prefix", "committedDate": "2020-05-12T21:38:48Z", "type": "forcePushed"}, {"oid": "db533fd92da437e449c1731e167b4de420205eca", "url": "https://github.com/apache/activemq-artemis/commit/db533fd92da437e449c1731e167b4de420205eca", "message": "ARTEMIS-2372 / ARTEMIS-2740 Improving Message Annotations support in AMQP\n\n- when sending messages to DLQ or Expiry we now use x-opt legal names\n- we now support filtering thorugh annotations if using m. as a prefix.\n- enabling hyphenated_props: to allow m. as a prefix", "committedDate": "2020-05-12T21:39:02Z", "type": "forcePushed"}, {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba", "url": "https://github.com/apache/activemq-artemis/commit/8925b3760a56c37745ab39ee7da1d97610dffcba", "message": "ARTEMIS-2372 / ARTEMIS-2740 Improving Message Annotations support in AMQP\n\n- when sending messages to DLQ or Expiry we now use x-opt legal names\n- we now support filtering thorugh annotations if using m. as a prefix.\n- enabling hyphenated_props: to allow m. as a prefix", "committedDate": "2020-05-12T21:54:00Z", "type": "forcePushed"}, {"oid": "2cc4342e4f21c458c82f937839343c93ed0cdc25", "url": "https://github.com/apache/activemq-artemis/commit/2cc4342e4f21c458c82f937839343c93ed0cdc25", "message": "ARTEMIS-2372 / ARTEMIS-2740 Improving Message Annotations support in AMQP\n\n- when sending messages to DLQ or Expiry we now use x-opt legal names\n- we now support filtering thorugh annotations if using m. as a prefix.\n- enabling hyphenated_props: to allow m. as a prefix", "committedDate": "2020-05-13T11:12:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1ODA2OQ==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424358069", "bodyText": "@gemmellr I saw an email from you asking about Strings defined here but I can't see the comment. (was it deleted?)\nI see your point ... I needed this as SimpleString at some point, and my code changes along the way in a way I don't need it any more.. thanks... ammended.", "author": "clebertsuconic", "createdAt": "2020-05-13T11:14:48Z", "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "diffHunk": "@@ -178,6 +182,9 @@\n    public static final Binary EMPTY_BINARY = new Binary(new byte[0]);\n    public static final Data EMPTY_BODY = new Data(EMPTY_BINARY);\n \n+   public static final String X_OPT_PREFIX = \"x-opt-\";", "originalCommit": "2cc4342e4f21c458c82f937839343c93ed0cdc25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2MDA2Mg==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424360062", "bodyText": "I did delete it yes, I hit the wrong button, was starting a review and instead hit the comment button. I've just finished the review so its sort of back now.", "author": "gemmellr", "createdAt": "2020-05-13T11:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1ODA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "chunk": "diff --git a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\nindex 35d5bcb80c..dd81c4c34c 100644\n--- a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\n+++ b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\n\n@@ -182,9 +178,6 @@ public final class AMQPMessageSupport {\n    public static final Binary EMPTY_BINARY = new Binary(new byte[0]);\n    public static final Data EMPTY_BODY = new Data(EMPTY_BINARY);\n \n-   public static final String X_OPT_PREFIX = \"x-opt-\";\n-   public static final String AMQ_PROPERTY_PREFIX = \"_AMQ_\";\n-\n    public static final short AMQP_UNKNOWN = 0;\n    public static final short AMQP_NULL = 1;\n    public static final short AMQP_DATA = 2;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5OTgyOQ==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424299829", "bodyText": "Couldn't we just define the String to begin with instead?\nPerhaps over-eager optimisation, but would some sort of fixed mapping/lookup for the already-known/'popular' cases (or just recently-seen ones) be preferable to calling this and concat'ing and substring'ing and replacing the same things repeatedly for each applicable message?", "author": "gemmellr", "createdAt": "2020-05-13T09:27:08Z", "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "diffHunk": "@@ -285,6 +292,18 @@ public static Charset getCharsetForTextualContent(String contentType) {\n       }\n    }\n \n+   public static String toAnnotationName(String key) {\n+      if (!key.startsWith(X_OPT_PREFIX.toString())) {\n+         if (key.startsWith(AMQ_PROPERTY_PREFIX.toString())) {\n+            return X_OPT_PREFIX.toString().concat(key.substring(AMQ_PROPERTY_PREFIX.toString().length()).replace('_', '-'));\n+         }", "originalCommit": "8925b3760a56c37745ab39ee7da1d97610dffcba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2cc4342e4f21c458c82f937839343c93ed0cdc25", "chunk": "diff --git a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\nindex a96c77c54a..35d5bcb80c 100644\n--- a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\n+++ b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\n\n@@ -294,8 +294,8 @@ public final class AMQPMessageSupport {\n \n    public static String toAnnotationName(String key) {\n       if (!key.startsWith(X_OPT_PREFIX.toString())) {\n-         if (key.startsWith(AMQ_PROPERTY_PREFIX.toString())) {\n-            return X_OPT_PREFIX.toString().concat(key.substring(AMQ_PROPERTY_PREFIX.toString().length()).replace('_', '-'));\n+         if (key.startsWith(AMQ_PROPERTY_PREFIX)) {\n+            return X_OPT_PREFIX.toString().concat(key.substring(AMQ_PROPERTY_PREFIX.length()).replace('_', '-'));\n          }\n \n          return key;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMTExOQ==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424321119", "bodyText": "The test clients receiveNoWait is entirely local, so this is very likely to return null even if the broker does somehow send the consumer a message, likely making this branch and most of the potential loops never happen.\nThe test already has a proxy for the expiry queue, so perhaps just use a wait check that it goes to 0 after rejecting instead of the loops?", "author": "gemmellr", "createdAt": "2020-05-13T10:02:16Z", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;\n+\n+         HashMap<String, Object> annotations = new HashMap<>();\n+\n+         for (int i = 0; i < 10; i++) {\n+            AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"hyphenated_props:m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"='\" + getQueueName() + \"'\");\n+            receiverDLQ.flow(1);\n+            if (i == 0) {\n+               received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n+               Assert.assertNotNull(received);\n+               Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n+               for (Symbol an : avAnnotations.keySet()) {\n+                  annotations.put(an.toString(), avAnnotations.get(an));\n+               }\n+               received.reject();\n+            } else {\n+               received = receiverDLQ.receiveNoWait();", "originalCommit": "8925b3760a56c37745ab39ee7da1d97610dffcba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e1d0ce16749b4abe31721a96d1ff094c027d4c", "chunk": "diff --git a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\nindex 3b9bb2c4fc..36b3f51b81 100644\n--- a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\n+++ b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\n\n@@ -133,7 +133,7 @@ public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n          HashMap<String, Object> annotations = new HashMap<>();\n \n          for (int i = 0; i < 10; i++) {\n-            AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"hyphenated_props:m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"='\" + getQueueName() + \"'\");\n+            AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"\\\"\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n             receiverDLQ.flow(1);\n             if (i == 0) {\n                received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMzAxNg==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424323016", "bodyText": "Comment looks to be about the commented out code, c&p error? There isn't selection at this point in the actual test.", "author": "gemmellr", "createdAt": "2020-05-13T10:05:40Z", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;\n+\n+         HashMap<String, Object> annotations = new HashMap<>();\n+\n+         for (int i = 0; i < 10; i++) {\n+            AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"hyphenated_props:m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"='\" + getQueueName() + \"'\");\n+            receiverDLQ.flow(1);\n+            if (i == 0) {\n+               received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n+               Assert.assertNotNull(received);\n+               Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n+               for (Symbol an : avAnnotations.keySet()) {\n+                  annotations.put(an.toString(), avAnnotations.get(an));\n+               }\n+               received.reject();\n+            } else {\n+               received = receiverDLQ.receiveNoWait();\n+               if (received == null) {\n+                  dlqed = true;\n+                  break;\n+               }\n+            }\n+            receiverDLQ.close();\n+         }\n+\n+         Assert.assertTrue(dlqed);\n+\n+         // Redo the selection, however now using the extra-properties, since the broker will store these as extra properties on AMQP Messages\n+         //receiverDLQ = session.createReceiver(getDeadLetterAddress(), \"_AMQ_ORIG_ADDRESS='\" + getQueueName() + \"'\");", "originalCommit": "8925b3760a56c37745ab39ee7da1d97610dffcba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e1d0ce16749b4abe31721a96d1ff094c027d4c", "chunk": "diff --git a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\nindex 3b9bb2c4fc..36b3f51b81 100644\n--- a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\n+++ b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\n\n@@ -133,7 +133,7 @@ public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n          HashMap<String, Object> annotations = new HashMap<>();\n \n          for (int i = 0; i < 10; i++) {\n-            AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"hyphenated_props:m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"='\" + getQueueName() + \"'\");\n+            AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"\\\"\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n             receiverDLQ.flow(1);\n             if (i == 0) {\n                received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n"}}, {"oid": "f7e1d0ce16749b4abe31721a96d1ff094c027d4c", "url": "https://github.com/apache/activemq-artemis/commit/f7e1d0ce16749b4abe31721a96d1ff094c027d4c", "message": "fix", "committedDate": "2020-05-13T12:32:17Z", "type": "forcePushed"}, {"oid": "ab6374cffb7b95288fe4c2e901c0cb816f7f6f84", "url": "https://github.com/apache/activemq-artemis/commit/ab6374cffb7b95288fe4c2e901c0cb816f7f6f84", "message": "ARTEMIS-2372 / ARTEMIS-2740 Improving Message Annotations support in AMQP\n\n- when sending messages to DLQ or Expiry we now use x-opt legal names\n- we now support filtering thorugh annotations if using m. as a prefix.\n- enabling hyphenated_props: to allow m. as a prefix", "committedDate": "2020-05-13T12:32:17Z", "type": "forcePushed"}, {"oid": "f3c647d77cceeec17e44be957499a230759f0d70", "url": "https://github.com/apache/activemq-artemis/commit/f3c647d77cceeec17e44be957499a230759f0d70", "message": "ARTEMIS-2740 Addressing comments from PR #3129", "committedDate": "2020-05-13T13:11:46Z", "type": "forcePushed"}, {"oid": "179dbb516cadc3b8e42eb34c4c516e5ee3e5b10d", "url": "https://github.com/apache/activemq-artemis/commit/179dbb516cadc3b8e42eb34c4c516e5ee3e5b10d", "message": "ARTEMIS-2740 Addressing comments from PR #3129", "committedDate": "2020-05-13T13:13:08Z", "type": "forcePushed"}, {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c", "url": "https://github.com/apache/activemq-artemis/commit/6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c", "message": "ARTEMIS-2740 Addressing comments from PR #3129", "committedDate": "2020-05-13T13:14:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDEzNg==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424424136", "bodyText": "Though the constant changed to a String, this is still calling toString() on it.", "author": "gemmellr", "createdAt": "2020-05-13T13:10:45Z", "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "diffHunk": "@@ -285,6 +292,18 @@ public static Charset getCharsetForTextualContent(String contentType) {\n       }\n    }\n \n+   public static String toAnnotationName(String key) {\n+      if (!key.startsWith(X_OPT_PREFIX.toString())) {\n+         if (key.startsWith(AMQ_PROPERTY_PREFIX)) {\n+            return X_OPT_PREFIX.toString().concat(key.substring(AMQ_PROPERTY_PREFIX.length()).replace('_', '-'));\n+         }", "originalCommit": "41a3a2a947e0f48e99e35a8dd761559e5f98f3ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTAyNw==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424481027", "bodyText": "thx", "author": "clebertsuconic", "createdAt": "2020-05-13T14:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "chunk": "diff --git a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\nindex 35d5bcb80c..dd81c4c34c 100644\n--- a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\n+++ b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java\n\n@@ -292,18 +285,6 @@ public final class AMQPMessageSupport {\n       }\n    }\n \n-   public static String toAnnotationName(String key) {\n-      if (!key.startsWith(X_OPT_PREFIX.toString())) {\n-         if (key.startsWith(AMQ_PROPERTY_PREFIX)) {\n-            return X_OPT_PREFIX.toString().concat(key.substring(AMQ_PROPERTY_PREFIX.length()).replace('_', '-'));\n-         }\n-\n-         return key;\n-      }\n-      return  key;\n-   }\n-\n-\n    public static String toAddress(Destination destination) {\n       try {\n          if (destination instanceof ActiveMQDestination) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDc1Nw==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424424757", "bodyText": "Can we change it to use an x-opt- prefixed annotation.", "author": "gemmellr", "createdAt": "2020-05-13T13:11:41Z", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java", "diffHunk": "@@ -408,7 +408,7 @@ public void testSendFilterAnnotation() throws Exception {\n       sender.close();\n \n       LOG.debug(\"Attempting to read message with receiver\");\n-      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"serialNo=2\");\n+      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"\\\"m.serialNo\\\"=2\");", "originalCommit": "41a3a2a947e0f48e99e35a8dd761559e5f98f3ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTI3OA==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424481278", "bodyText": "sure.. will be on my next commit", "author": "clebertsuconic", "createdAt": "2020-05-13T14:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "chunk": "diff --git a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java\nindex a3f8c985b1..85c304c02f 100644\n--- a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java\n+++ b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java\n\n@@ -408,7 +408,7 @@ public class AmqpSendReceiveTest extends AmqpClientTestSupport {\n       sender.close();\n \n       LOG.debug(\"Attempting to read message with receiver\");\n-      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"\\\"m.serialNo\\\"=2\");\n+      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"serialNo=2\");\n       receiver.flow(2);\n       AmqpMessage received = receiver.receive(10, TimeUnit.SECONDS);\n       assertNotNull(\"Should have read message\", received);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNjYwNg==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424426606", "bodyText": "Seems like this might be unused now that the loop it was in before is gone?", "author": "gemmellr", "createdAt": "2020-05-13T13:14:20Z", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;", "originalCommit": "179dbb516cadc3b8e42eb34c4c516e5ee3e5b10d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTM3NA==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424481374", "bodyText": "thx", "author": "clebertsuconic", "createdAt": "2020-05-13T14:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNjYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "chunk": "diff --git a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\ndeleted file mode 100644\nindex d679de49d3..0000000000\n--- a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\n+++ /dev/null\n\n@@ -1,170 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.artemis.tests.integration.amqp;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.apache.activemq.artemis.api.core.QueueConfiguration;\n-import org.apache.activemq.artemis.api.core.RoutingType;\n-import org.apache.activemq.artemis.api.core.SimpleString;\n-import org.apache.activemq.artemis.core.server.ActiveMQServer;\n-import org.apache.activemq.artemis.core.server.Queue;\n-import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n-import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n-import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n-import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n-import org.apache.activemq.artemis.tests.util.Wait;\n-import org.apache.activemq.transport.amqp.client.AmqpClient;\n-import org.apache.activemq.transport.amqp.client.AmqpConnection;\n-import org.apache.activemq.transport.amqp.client.AmqpMessage;\n-import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n-import org.apache.activemq.transport.amqp.client.AmqpSender;\n-import org.apache.activemq.transport.amqp.client.AmqpSession;\n-import org.apache.qpid.proton.amqp.Symbol;\n-import org.jboss.logging.Logger;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-/**\n- * This is testing a double transfer (copy).\n- * First messages will expire, then DLQ.\n- * This will validate the data added to the queues.\n- */\n-public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n-   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n-\n-   protected String getExpiryQueue() {\n-      return \"ActiveMQ.Expiry\";\n-   }\n-\n-   @Override\n-   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n-      // Default Queue\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Default DLQ\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Expiry\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Default Topic\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n-      server.createQueue(new QueueConfiguration(getTopicName()));\n-\n-      // Additional Test Queues\n-      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n-         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n-         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n-      }\n-   }\n-\n-   @Override\n-   protected void configureAddressPolicy(ActiveMQServer server) {\n-      // Address configuration\n-      AddressSettings addressSettings = new AddressSettings();\n-\n-      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n-      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n-      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n-      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n-      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n-      addressSettings.setMaxDeliveryAttempts(1);\n-      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n-      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n-   }\n-\n-   @Test\n-   public void testDoubleTransfer() throws Throwable {\n-\n-      AmqpClient client = createAmqpClient();\n-      AmqpConnection connection = addConnection(client.connect());\n-      try {\n-         AmqpSession session = connection.createSession();\n-\n-         AmqpSender sender = session.createSender(getQueueName());\n-\n-         // Get the Queue View early to avoid racing the delivery.\n-         final Queue queueView = getProxyToQueue(getQueueName());\n-         assertNotNull(queueView);\n-\n-         AmqpMessage message = new AmqpMessage();\n-         message.setTimeToLive(1);\n-         message.setText(\"Test-Message\");\n-         message.setDurable(true);\n-         message.setApplicationProperty(\"key1\", \"Value1\");\n-         sender.send(message);\n-         sender.close();\n-\n-         Wait.assertEquals(1, queueView::getMessagesExpired);\n-\n-         // Now try and get the message\n-         AmqpReceiver receiver = session.createReceiver(getQueueName());\n-         receiver.flow(1);\n-         AmqpMessage received = receiver.receiveNoWait();\n-         assertNull(received);\n-\n-\n-         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n-         assertNotNull(expiryView);\n-         Wait.assertEquals(1, expiryView::getMessageCount);\n-\n-         boolean dlqed = false;\n-\n-         HashMap<String, Object> annotations = new HashMap<>();\n-\n-         AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n-         receiverDLQ.flow(1);\n-         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n-         Assert.assertNotNull(received);\n-         Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n-         for (Symbol an : avAnnotations.keySet()) {\n-            annotations.put(an.toString(), avAnnotations.get(an));\n-         }\n-         received.reject();\n-         receiverDLQ.close();\n-\n-\n-         // Redo the selection\n-         receiverDLQ = session.createReceiver(getDeadLetterAddress(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n-         receiverDLQ.flow(1);\n-         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n-         Assert.assertNotNull(received);\n-         received.accept();\n-\n-         /** When moving to DLQ, the original headers shoudln't be touched. */\n-         for (Map.Entry<String, Object> entry : annotations.entrySet()) {\n-            log.debug(\"Checking \" + entry.getKey() + \" = \" + entry.getValue());\n-            Assert.assertEquals(entry.getKey() + \" should be = \" + entry.getValue(), entry.getValue(), received.getMessageAnnotation(entry.getKey()));\n-         }\n-\n-         assertEquals(0, received.getTimeToLive());\n-         assertNotNull(received);\n-         assertEquals(\"Value1\", received.getApplicationProperty(\"key1\"));\n-      } catch (Throwable e) {\n-         e.printStackTrace();\n-         throw e;\n-      } finally {\n-         connection.close();\n-      }\n-   }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyOTE4Nw==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424429187", "bodyText": "This is likely to return null even if the broker somehow sends a message, given it operates local to the test client and so can easily return before anything put in flight after the flow(1) arrives at the broker. Need to either wait on the receive a bit or do something else, to get a proper validation nothing arrives.\nPerhaps just check the count goes to 0 using the proxy already being used just above?", "author": "gemmellr", "createdAt": "2020-05-13T13:17:59Z", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();", "originalCommit": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3NzY0Ng==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424477646", "bodyText": "It would eventually fail if there's a message.\nI have been using as a rule, if the expected is no delievery, it should asserNull(receiveNoWait());\nThere's already an assertion before on the number of expires.", "author": "clebertsuconic", "createdAt": "2020-05-13T14:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyOTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MDQ2Mg==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424480462", "bodyText": "I don't need that here... I'm already asserting before.\nI was just explaining why I prefer using receiveNoWait();\nI had some major cleanup on the testsuite weeks ago where I fixed a lot of receive(1000); that was intended to noWait.", "author": "clebertsuconic", "createdAt": "2020-05-13T14:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyOTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "chunk": "diff --git a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\ndeleted file mode 100644\nindex d679de49d3..0000000000\n--- a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\n+++ /dev/null\n\n@@ -1,170 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.artemis.tests.integration.amqp;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.apache.activemq.artemis.api.core.QueueConfiguration;\n-import org.apache.activemq.artemis.api.core.RoutingType;\n-import org.apache.activemq.artemis.api.core.SimpleString;\n-import org.apache.activemq.artemis.core.server.ActiveMQServer;\n-import org.apache.activemq.artemis.core.server.Queue;\n-import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n-import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n-import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n-import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n-import org.apache.activemq.artemis.tests.util.Wait;\n-import org.apache.activemq.transport.amqp.client.AmqpClient;\n-import org.apache.activemq.transport.amqp.client.AmqpConnection;\n-import org.apache.activemq.transport.amqp.client.AmqpMessage;\n-import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n-import org.apache.activemq.transport.amqp.client.AmqpSender;\n-import org.apache.activemq.transport.amqp.client.AmqpSession;\n-import org.apache.qpid.proton.amqp.Symbol;\n-import org.jboss.logging.Logger;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-/**\n- * This is testing a double transfer (copy).\n- * First messages will expire, then DLQ.\n- * This will validate the data added to the queues.\n- */\n-public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n-   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n-\n-   protected String getExpiryQueue() {\n-      return \"ActiveMQ.Expiry\";\n-   }\n-\n-   @Override\n-   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n-      // Default Queue\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Default DLQ\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Expiry\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Default Topic\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n-      server.createQueue(new QueueConfiguration(getTopicName()));\n-\n-      // Additional Test Queues\n-      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n-         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n-         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n-      }\n-   }\n-\n-   @Override\n-   protected void configureAddressPolicy(ActiveMQServer server) {\n-      // Address configuration\n-      AddressSettings addressSettings = new AddressSettings();\n-\n-      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n-      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n-      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n-      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n-      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n-      addressSettings.setMaxDeliveryAttempts(1);\n-      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n-      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n-   }\n-\n-   @Test\n-   public void testDoubleTransfer() throws Throwable {\n-\n-      AmqpClient client = createAmqpClient();\n-      AmqpConnection connection = addConnection(client.connect());\n-      try {\n-         AmqpSession session = connection.createSession();\n-\n-         AmqpSender sender = session.createSender(getQueueName());\n-\n-         // Get the Queue View early to avoid racing the delivery.\n-         final Queue queueView = getProxyToQueue(getQueueName());\n-         assertNotNull(queueView);\n-\n-         AmqpMessage message = new AmqpMessage();\n-         message.setTimeToLive(1);\n-         message.setText(\"Test-Message\");\n-         message.setDurable(true);\n-         message.setApplicationProperty(\"key1\", \"Value1\");\n-         sender.send(message);\n-         sender.close();\n-\n-         Wait.assertEquals(1, queueView::getMessagesExpired);\n-\n-         // Now try and get the message\n-         AmqpReceiver receiver = session.createReceiver(getQueueName());\n-         receiver.flow(1);\n-         AmqpMessage received = receiver.receiveNoWait();\n-         assertNull(received);\n-\n-\n-         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n-         assertNotNull(expiryView);\n-         Wait.assertEquals(1, expiryView::getMessageCount);\n-\n-         boolean dlqed = false;\n-\n-         HashMap<String, Object> annotations = new HashMap<>();\n-\n-         AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n-         receiverDLQ.flow(1);\n-         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n-         Assert.assertNotNull(received);\n-         Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n-         for (Symbol an : avAnnotations.keySet()) {\n-            annotations.put(an.toString(), avAnnotations.get(an));\n-         }\n-         received.reject();\n-         receiverDLQ.close();\n-\n-\n-         // Redo the selection\n-         receiverDLQ = session.createReceiver(getDeadLetterAddress(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n-         receiverDLQ.flow(1);\n-         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n-         Assert.assertNotNull(received);\n-         received.accept();\n-\n-         /** When moving to DLQ, the original headers shoudln't be touched. */\n-         for (Map.Entry<String, Object> entry : annotations.entrySet()) {\n-            log.debug(\"Checking \" + entry.getKey() + \" = \" + entry.getValue());\n-            Assert.assertEquals(entry.getKey() + \" should be = \" + entry.getValue(), entry.getValue(), received.getMessageAnnotation(entry.getKey()));\n-         }\n-\n-         assertEquals(0, received.getTimeToLive());\n-         assertNotNull(received);\n-         assertEquals(\"Value1\", received.getApplicationProperty(\"key1\"));\n-      } catch (Throwable e) {\n-         e.printStackTrace();\n-         throw e;\n-      } finally {\n-         connection.close();\n-      }\n-   }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDc3MA==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424440770", "bodyText": "Nothing wrong with this, but just noting some newer syntactic sugar here (/below) might be nicer:\navAnnotations.forEach((key, value) -> {\n    annotations.put(key.toString(), value);\n});", "author": "gemmellr", "createdAt": "2020-05-13T13:33:36Z", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;\n+\n+         HashMap<String, Object> annotations = new HashMap<>();\n+\n+         AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n+         receiverDLQ.flow(1);\n+         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n+         Assert.assertNotNull(received);\n+         Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n+         for (Symbol an : avAnnotations.keySet()) {\n+            annotations.put(an.toString(), avAnnotations.get(an));\n+         }", "originalCommit": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3OTUyNQ==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424479525", "bodyText": "thx :)", "author": "clebertsuconic", "createdAt": "2020-05-13T14:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "chunk": "diff --git a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\ndeleted file mode 100644\nindex d679de49d3..0000000000\n--- a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java\n+++ /dev/null\n\n@@ -1,170 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.artemis.tests.integration.amqp;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.apache.activemq.artemis.api.core.QueueConfiguration;\n-import org.apache.activemq.artemis.api.core.RoutingType;\n-import org.apache.activemq.artemis.api.core.SimpleString;\n-import org.apache.activemq.artemis.core.server.ActiveMQServer;\n-import org.apache.activemq.artemis.core.server.Queue;\n-import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n-import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n-import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n-import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n-import org.apache.activemq.artemis.tests.util.Wait;\n-import org.apache.activemq.transport.amqp.client.AmqpClient;\n-import org.apache.activemq.transport.amqp.client.AmqpConnection;\n-import org.apache.activemq.transport.amqp.client.AmqpMessage;\n-import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n-import org.apache.activemq.transport.amqp.client.AmqpSender;\n-import org.apache.activemq.transport.amqp.client.AmqpSession;\n-import org.apache.qpid.proton.amqp.Symbol;\n-import org.jboss.logging.Logger;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-/**\n- * This is testing a double transfer (copy).\n- * First messages will expire, then DLQ.\n- * This will validate the data added to the queues.\n- */\n-public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n-   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n-\n-   protected String getExpiryQueue() {\n-      return \"ActiveMQ.Expiry\";\n-   }\n-\n-   @Override\n-   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n-      // Default Queue\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Default DLQ\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Expiry\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n-      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n-\n-      // Default Topic\n-      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n-      server.createQueue(new QueueConfiguration(getTopicName()));\n-\n-      // Additional Test Queues\n-      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n-         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n-         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n-      }\n-   }\n-\n-   @Override\n-   protected void configureAddressPolicy(ActiveMQServer server) {\n-      // Address configuration\n-      AddressSettings addressSettings = new AddressSettings();\n-\n-      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n-      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n-      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n-      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n-      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n-      addressSettings.setMaxDeliveryAttempts(1);\n-      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n-      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n-   }\n-\n-   @Test\n-   public void testDoubleTransfer() throws Throwable {\n-\n-      AmqpClient client = createAmqpClient();\n-      AmqpConnection connection = addConnection(client.connect());\n-      try {\n-         AmqpSession session = connection.createSession();\n-\n-         AmqpSender sender = session.createSender(getQueueName());\n-\n-         // Get the Queue View early to avoid racing the delivery.\n-         final Queue queueView = getProxyToQueue(getQueueName());\n-         assertNotNull(queueView);\n-\n-         AmqpMessage message = new AmqpMessage();\n-         message.setTimeToLive(1);\n-         message.setText(\"Test-Message\");\n-         message.setDurable(true);\n-         message.setApplicationProperty(\"key1\", \"Value1\");\n-         sender.send(message);\n-         sender.close();\n-\n-         Wait.assertEquals(1, queueView::getMessagesExpired);\n-\n-         // Now try and get the message\n-         AmqpReceiver receiver = session.createReceiver(getQueueName());\n-         receiver.flow(1);\n-         AmqpMessage received = receiver.receiveNoWait();\n-         assertNull(received);\n-\n-\n-         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n-         assertNotNull(expiryView);\n-         Wait.assertEquals(1, expiryView::getMessageCount);\n-\n-         boolean dlqed = false;\n-\n-         HashMap<String, Object> annotations = new HashMap<>();\n-\n-         AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n-         receiverDLQ.flow(1);\n-         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n-         Assert.assertNotNull(received);\n-         Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n-         for (Symbol an : avAnnotations.keySet()) {\n-            annotations.put(an.toString(), avAnnotations.get(an));\n-         }\n-         received.reject();\n-         receiverDLQ.close();\n-\n-\n-         // Redo the selection\n-         receiverDLQ = session.createReceiver(getDeadLetterAddress(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n-         receiverDLQ.flow(1);\n-         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n-         Assert.assertNotNull(received);\n-         received.accept();\n-\n-         /** When moving to DLQ, the original headers shoudln't be touched. */\n-         for (Map.Entry<String, Object> entry : annotations.entrySet()) {\n-            log.debug(\"Checking \" + entry.getKey() + \" = \" + entry.getValue());\n-            Assert.assertEquals(entry.getKey() + \" should be = \" + entry.getValue(), entry.getValue(), received.getMessageAnnotation(entry.getKey()));\n-         }\n-\n-         assertEquals(0, received.getTimeToLive());\n-         assertNotNull(received);\n-         assertEquals(\"Value1\", received.getApplicationProperty(\"key1\"));\n-      } catch (Throwable e) {\n-         e.printStackTrace();\n-         throw e;\n-      } finally {\n-         connection.close();\n-      }\n-   }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjI0MQ==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424446241", "bodyText": "Stale / c&p comment? There is no second filter here.", "author": "gemmellr", "createdAt": "2020-05-13T13:40:55Z", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpExpiredMessageTest.java", "diffHunk": "@@ -182,6 +200,45 @@ public void testExpiryThroughTTLValidateAnnotation() throws Exception {\n       connection.close();\n    }\n \n+   /** This test is validating a broker feature where the message copy through the DLQ will receive an annotation.\n+    *  It is also testing filter on that annotation. */\n+   @Test(timeout = 60000)\n+   public void testExpiryQpidJMS() throws Exception {\n+      ConnectionFactory factory = CFUtil.createConnectionFactory(\"AMQP\", getBrokerAmqpConnectionURI().toString());\n+      Connection connection = factory.createConnection();\n+      try {\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         javax.jms.Queue queue = session.createQueue(getQueueName());\n+         MessageProducer sender = session.createProducer(queue);\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         sender.setTimeToLive(1);\n+         TextMessage message = session.createTextMessage(\"Test-Message\");\n+         message.setStringProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+         final Queue dlqView = getProxyToQueue(getDeadLetterAddress());\n+         assertNotNull(dlqView);\n+         Wait.assertEquals(1, dlqView::getMessageCount);\n+\n+         connection.start();\n+         javax.jms.Queue queueDLQ = session.createQueue(getDeadLetterAddress());\n+         MessageConsumer receiverDLQ = session.createConsumer(queueDLQ, \"\\\"m.x-opt-ORIG-ADDRESS\\\"='\" + getQueueName() + \"'\");\n+         Message received = receiverDLQ.receive(5000);\n+         Assert.assertNotNull(received);\n+         // close without accepting on purpose, it will issue a redelivery on the second filter", "originalCommit": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3OTQ1MA==", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424479450", "bodyText": "thx", "author": "clebertsuconic", "createdAt": "2020-05-13T14:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "chunk": "diff --git a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpExpiredMessageTest.java b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpExpiredMessageTest.java\nindex 6d5f9ee7bb..121137f431 100644\n--- a/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpExpiredMessageTest.java\n+++ b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpExpiredMessageTest.java\n\n@@ -200,45 +182,6 @@ public class AmqpExpiredMessageTest extends AmqpClientTestSupport {\n       connection.close();\n    }\n \n-   /** This test is validating a broker feature where the message copy through the DLQ will receive an annotation.\n-    *  It is also testing filter on that annotation. */\n-   @Test(timeout = 60000)\n-   public void testExpiryQpidJMS() throws Exception {\n-      ConnectionFactory factory = CFUtil.createConnectionFactory(\"AMQP\", getBrokerAmqpConnectionURI().toString());\n-      Connection connection = factory.createConnection();\n-      try {\n-         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n-         javax.jms.Queue queue = session.createQueue(getQueueName());\n-         MessageProducer sender = session.createProducer(queue);\n-\n-         // Get the Queue View early to avoid racing the delivery.\n-         final Queue queueView = getProxyToQueue(getQueueName());\n-         assertNotNull(queueView);\n-\n-         sender.setTimeToLive(1);\n-         TextMessage message = session.createTextMessage(\"Test-Message\");\n-         message.setStringProperty(\"key1\", \"Value1\");\n-         sender.send(message);\n-         sender.close();\n-\n-         Wait.assertEquals(1, queueView::getMessagesExpired);\n-         final Queue dlqView = getProxyToQueue(getDeadLetterAddress());\n-         assertNotNull(dlqView);\n-         Wait.assertEquals(1, dlqView::getMessageCount);\n-\n-         connection.start();\n-         javax.jms.Queue queueDLQ = session.createQueue(getDeadLetterAddress());\n-         MessageConsumer receiverDLQ = session.createConsumer(queueDLQ, \"\\\"m.x-opt-ORIG-ADDRESS\\\"='\" + getQueueName() + \"'\");\n-         Message received = receiverDLQ.receive(5000);\n-         Assert.assertNotNull(received);\n-         // close without accepting on purpose, it will issue a redelivery on the second filter\n-         receiverDLQ.close();\n-      } finally {\n-         connection.close();\n-      }\n-\n-   }\n-\n    @Test(timeout = 60000)\n    public void testSendMessageThatIsNotExpiredUsingAbsoluteTime() throws Exception {\n       AmqpClient client = createAmqpClient();\n"}}, {"oid": "88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "url": "https://github.com/apache/activemq-artemis/commit/88b7ee36a3f25d95ecbc111306aab3c5d11d2c9a", "message": "ARTEMIS-2761 Supporting Quoted IDs to allow complex names in AMQP\n\ncopied/borrowed from https://github.com/apache/qpid-jms/commit/fd2139c27d96126f0cef9a6b55701f439b21f6dc", "committedDate": "2020-05-13T14:46:11Z", "type": "commit"}, {"oid": "dbcf5b8aba9ae91b4366bdb1e2df24bd821886c0", "url": "https://github.com/apache/activemq-artemis/commit/dbcf5b8aba9ae91b4366bdb1e2df24bd821886c0", "message": "ARTEMIS-2740 Addressing comments from PR #3129 (2)", "committedDate": "2020-05-13T14:46:32Z", "type": "forcePushed"}, {"oid": "4fe4220ff004e3c279dc9c68a839d7a7b5fd88b6", "url": "https://github.com/apache/activemq-artemis/commit/4fe4220ff004e3c279dc9c68a839d7a7b5fd88b6", "message": "ARTEMIS-2372 / ARTEMIS-2740 Improving Message Annotations support in AMQP\n\n- when sending messages to DLQ or Expiry we now use x-opt legal names\n- we now support filtering thorugh annotations if using m. as a prefix.\n- enabling hyphenated_props: to allow m. as a prefix", "committedDate": "2020-05-13T14:55:36Z", "type": "commit"}, {"oid": "4fe4220ff004e3c279dc9c68a839d7a7b5fd88b6", "url": "https://github.com/apache/activemq-artemis/commit/4fe4220ff004e3c279dc9c68a839d7a7b5fd88b6", "message": "ARTEMIS-2372 / ARTEMIS-2740 Improving Message Annotations support in AMQP\n\n- when sending messages to DLQ or Expiry we now use x-opt legal names\n- we now support filtering thorugh annotations if using m. as a prefix.\n- enabling hyphenated_props: to allow m. as a prefix", "committedDate": "2020-05-13T14:55:36Z", "type": "forcePushed"}]}