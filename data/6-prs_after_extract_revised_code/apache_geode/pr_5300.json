{"pr_number": 5300, "pr_title": "GEODE-8095: Changes to make GEODE Respond to Restore Redundancy REST Command", "pr_createdAt": "2020-06-24T22:45:22Z", "pr_url": "https://github.com/apache/geode/pull/5300", "timeline": [{"oid": "7acaa334be4b1b7e1a720e55679795c50f7dd528", "url": "https://github.com/apache/geode/commit/7acaa334be4b1b7e1a720e55679795c50f7dd528", "message": "GEODE-8095: Changes to make GEODE Respond to Restore Redundancy\n\nREST Command", "committedDate": "2020-06-24T21:32:51Z", "type": "commit"}, {"oid": "e6680d13ec4df02a5ad7492fcf1e2fb83d60e87a", "url": "https://github.com/apache/geode/commit/e6680d13ec4df02a5ad7492fcf1e2fb83d60e87a", "message": "Spotless", "committedDate": "2020-06-24T23:03:23Z", "type": "commit"}, {"oid": "0491780611d6c55e57fa6cd2d4241784db4773af", "url": "https://github.com/apache/geode/commit/0491780611d6c55e57fa6cd2d4241784db4773af", "message": "GEODE-8095: removing a log message.", "committedDate": "2020-06-25T16:48:46Z", "type": "commit"}, {"oid": "106b3e4bf28f80f6413c424a6b3d190f03638818", "url": "https://github.com/apache/geode/commit/106b3e4bf28f80f6413c424a6b3d190f03638818", "message": "GEODE-8095: removing a log include", "committedDate": "2020-06-25T18:45:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTYxMg==", "url": "https://github.com/apache/geode/pull/5300#discussion_r445775612", "bodyText": "Is this the right authorization code we need to  use?", "author": "jinmeiliao", "createdAt": "2020-06-25T19:01:19Z", "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.rest.controllers;\n+\n+import static org.apache.geode.management.configuration.Links.URI_VERSION;\n+import static org.apache.geode.management.operation.RestoreRedundancyRequest.RESTORE_REDUNDANCY_ENDPOINT;\n+\n+import java.util.Optional;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import org.apache.geode.internal.security.SecurityService;\n+import org.apache.geode.management.api.ClusterManagementListOperationsResult;\n+import org.apache.geode.management.api.ClusterManagementOperationResult;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+@RestController(\"restoreRedundancyOperation\")\n+@RequestMapping(URI_VERSION)\n+public class RestoreRedundancyOperationController extends AbstractManagementController {\n+  @ApiOperation(value = \"start restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @PostMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ResponseEntity<ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults>> startRestoreRedundancy(\n+      @RequestBody RestoreRedundancyRequest operation) {\n+    operation.setOperator(\n+        Optional.ofNullable(securityService).map(SecurityService::getSubject).map(Object::toString)\n+            .orElse(null));\n+    ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults> result =\n+        clusterManagementService\n+            .start(operation);\n+    return new ResponseEntity<>(result, HttpStatus.ACCEPTED);\n+  }\n+\n+  @ApiOperation(value = \"list restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")", "originalCommit": "106b3e4bf28f80f6413c424a6b3d190f03638818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwOTM5OQ==", "url": "https://github.com/apache/geode/pull/5300#discussion_r446309399", "bodyText": "How do I check it?", "author": "mhansonp", "createdAt": "2020-06-26T17:14:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMDkxOQ==", "url": "https://github.com/apache/geode/pull/5300#discussion_r447120919", "bodyText": "We are agreed that this is correct.", "author": "mhansonp", "createdAt": "2020-06-29T17:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTYxMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTY4NQ==", "url": "https://github.com/apache/geode/pull/5300#discussion_r445775685", "bodyText": "check this as well", "author": "jinmeiliao", "createdAt": "2020-06-25T19:01:27Z", "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.rest.controllers;\n+\n+import static org.apache.geode.management.configuration.Links.URI_VERSION;\n+import static org.apache.geode.management.operation.RestoreRedundancyRequest.RESTORE_REDUNDANCY_ENDPOINT;\n+\n+import java.util.Optional;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import org.apache.geode.internal.security.SecurityService;\n+import org.apache.geode.management.api.ClusterManagementListOperationsResult;\n+import org.apache.geode.management.api.ClusterManagementOperationResult;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+@RestController(\"restoreRedundancyOperation\")\n+@RequestMapping(URI_VERSION)\n+public class RestoreRedundancyOperationController extends AbstractManagementController {\n+  @ApiOperation(value = \"start restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @PostMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ResponseEntity<ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults>> startRestoreRedundancy(\n+      @RequestBody RestoreRedundancyRequest operation) {\n+    operation.setOperator(\n+        Optional.ofNullable(securityService).map(SecurityService::getSubject).map(Object::toString)\n+            .orElse(null));\n+    ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults> result =\n+        clusterManagementService\n+            .start(operation);\n+    return new ResponseEntity<>(result, HttpStatus.ACCEPTED);\n+  }\n+\n+  @ApiOperation(value = \"list restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @GetMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ClusterManagementListOperationsResult<RestoreRedundancyRequest, RestoreRedundancyResults> listRestoreRedundancies() {\n+    return clusterManagementService.list(new RestoreRedundancyRequest());\n+  }\n+\n+  @ApiOperation(value = \"get restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")", "originalCommit": "106b3e4bf28f80f6413c424a6b3d190f03638818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMDk3OA==", "url": "https://github.com/apache/geode/pull/5300#discussion_r447120978", "bodyText": "We are agreed that this is correct.", "author": "mhansonp", "createdAt": "2020-06-29T17:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTY4NQ=="}], "type": "inlineReview", "revised_code": null}]}