{"pr_number": 5344, "pr_title": "GEODE-8330: Structural Improvements to Versioning", "pr_createdAt": "2020-07-02T19:06:53Z", "pr_url": "https://github.com/apache/geode/pull/5344", "timeline": [{"oid": "53cf5f0238b80f72be4b1f0f0eec2e350de86291", "url": "https://github.com/apache/geode/commit/53cf5f0238b80f72be4b1f0f0eec2e350de86291", "message": "versioning cleanup structural changes", "committedDate": "2020-07-02T17:08:38Z", "type": "commit"}, {"oid": "ce44217a735e04def8738ada8a6128d1d047b8ba", "url": "https://github.com/apache/geode/commit/ce44217a735e04def8738ada8a6128d1d047b8ba", "message": "factor IO code into VersioningIO; inlined some redundant methods", "committedDate": "2020-07-02T18:57:44Z", "type": "commit"}, {"oid": "26f49ad202dc4a533031d917cd9cbf6b993f9c32", "url": "https://github.com/apache/geode/commit/26f49ad202dc4a533031d917cd9cbf6b993f9c32", "message": "correct over-ambitious overloading", "committedDate": "2020-07-02T19:02:50Z", "type": "commit"}, {"oid": "95415b884bbf997aca1a2ed2993f2391de080868", "url": "https://github.com/apache/geode/commit/95415b884bbf997aca1a2ed2993f2391de080868", "message": "analyze core serializables fix", "committedDate": "2020-07-02T19:34:11Z", "type": "commit"}, {"oid": "d95afe64c98bef09f0be43e7c3ebfe43a35f87ad", "url": "https://github.com/apache/geode/commit/d95afe64c98bef09f0be43e7c3ebfe43a35f87ad", "message": "fix Lucene rolling upgrade test", "committedDate": "2020-07-02T20:50:14Z", "type": "commit"}, {"oid": "508c0fe36304af69b0422fc896fcd6fb8fd94348", "url": "https://github.com/apache/geode/commit/508c0fe36304af69b0422fc896fcd6fb8fd94348", "message": "spA", "committedDate": "2020-07-02T21:24:34Z", "type": "commit"}, {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079", "url": "https://github.com/apache/geode/commit/a7d6a5daee7cabd1e8b70d432e0612d25c55f079", "message": "eliminate search in Versioning factory; add test cases", "committedDate": "2020-07-06T18:42:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTMzNQ==", "url": "https://github.com/apache/geode/pull/5344#discussion_r450421335", "bodyText": "I think this should be pulled out of the loop.  It's invariant, so we don't need to be doing this calculation every time we invoke fillInValue().", "author": "bschuchardt", "createdAt": "2020-07-06T19:00:36Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "diffHunk": "@@ -2038,7 +2039,8 @@ protected boolean chunkEntries(DistributedRegion rgn, int chunkSizeInBytes,\n                     entry.key = key;\n                     entry.setVersionTag(stamp.asVersionTag());\n                     fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                        sender.getVersionObject());\n+                        Versioning", "originalCommit": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTU0Mw==", "url": "https://github.com/apache/geode/pull/5344#discussion_r450505543", "bodyText": "pulled \u2713", "author": "Bill", "createdAt": "2020-07-06T22:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "442b71ec6b82d0ada188e59aa00672a12644804b", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java b/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java\nindex b37fd9e889..873e937b82 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java\n\n@@ -2039,8 +2043,7 @@ public class InitialImageOperation {\n                     entry.key = key;\n                     entry.setVersionTag(stamp.asVersionTag());\n                     fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                        Versioning\n-                            .getKnownVersion(sender.getVersionOrdinalObject(), Version.CURRENT));\n+                        knownVersion);\n                     if (versionVector != null) {\n                       if (logger.isTraceEnabled(LogMarker.INITIAL_IMAGE_VERBOSE)) {\n                         logger.trace(LogMarker.INITIAL_IMAGE_VERBOSE,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTUyMA==", "url": "https://github.com/apache/geode/pull/5344#discussion_r450421520", "bodyText": "same here - pull it out of the loop", "author": "bschuchardt", "createdAt": "2020-07-06T19:00:56Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "diffHunk": "@@ -2050,7 +2052,8 @@ protected boolean chunkEntries(DistributedRegion rgn, int chunkSizeInBytes,\n                   entry = new InitialImageOperation.Entry();\n                   entry.key = key;\n                   fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                      sender.getVersionObject());\n+                      Versioning", "originalCommit": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTYwMQ==", "url": "https://github.com/apache/geode/pull/5344#discussion_r450505601", "bodyText": "pulled \u2713", "author": "Bill", "createdAt": "2020-07-06T22:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "442b71ec6b82d0ada188e59aa00672a12644804b", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java b/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java\nindex b37fd9e889..873e937b82 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java\n\n@@ -2052,8 +2055,7 @@ public class InitialImageOperation {\n                   entry = new InitialImageOperation.Entry();\n                   entry.key = key;\n                   fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                      Versioning\n-                          .getKnownVersion(sender.getVersionOrdinalObject(), Version.CURRENT));\n+                      knownVersion);\n                 }\n               } catch (DiskAccessException dae) {\n                 rgn.handleDiskAccessException(dae);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNDEyNw==", "url": "https://github.com/apache/geode/pull/5344#discussion_r450424127", "bodyText": "It seems like it would be more efficient to have an isKnownVersion() method than to be using instanceof.", "author": "bschuchardt", "createdAt": "2020-07-06T19:06:30Z", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java", "diffHunk": "@@ -26,11 +26,40 @@\n public class Versioning {\n   private Versioning() {}\n \n+  /**\n+   * Make a VersionOrdinal for the short ordinal value.\n+   *\n+   * If the short ordinal represents a known version (Version) then return\n+   * that instead of constructing a new VersionOrdinal.\n+   *\n+   * @return a known version (Version) if possible, otherwise a VersionOrdinal.\n+   */\n   public static VersionOrdinal getVersionOrdinal(final short ordinal) {\n-    try {\n-      return Version.fromOrdinal(ordinal);\n-    } catch (final UnsupportedSerializationVersionException e) {\n-      return new VersionOrdinalImpl(ordinal);\n+    final Version knownVersion = Version.getKnownVersion(ordinal, null);\n+    if (knownVersion == null) {\n+      return new UnknownVersion(ordinal);\n+    } else {\n+      return knownVersion;\n+    }\n+  }\n+\n+  /**\n+   * Return the known version (Version) for the VersionOrdinal, if possible.\n+   * Otherwise return the returnWhenUnknown Version. This method essentially\n+   * downcasts a {@link VersionOrdinal} to a known version {@link Version}\n+   *\n+   * @param anyVersion came from a call to {@link #getVersionOrdinal(short)} or this\n+   *        method\n+   * @param returnWhenUnknown will be returned if anyVersion does not represent\n+   *        a known version\n+   * @return a known version\n+   */\n+  public static Version getKnownVersion(final VersionOrdinal anyVersion,\n+      Version returnWhenUnknown) {\n+    if (anyVersion instanceof Version) {", "originalCommit": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNDk4NA==", "url": "https://github.com/apache/geode/pull/5344#discussion_r450504984", "bodyText": "It might be more efficient. Or it might not be. What is certain, is that it would add a method to the VersionOrdinal interface.\nMy thinking is that if we write our deserialization code correctly then we need to do this version determination at most once when establishing a network connection (to detect the serialization version of the counterparty) or once when reading from a serialized file on disk (to detect the serialization version of the content in the file). Establishing a network connection or opening a file for reading take on the order of a millisecond whereas instanceof will take on the order of nanoseconds.\nIf you find my reasoning sound, I'd like to leave the instanceof call here instead of adding a predicate to VersionOrdinal.", "author": "Bill", "createdAt": "2020-07-06T22:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNDEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "f57b62283701f763c2428acb3e4b2d0950395a68", "chunk": "diff --git a/geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java b/geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java\nindex 33d3d48f15..971ed9be5a 100644\n--- a/geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java\n+++ b/geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java\n\n@@ -45,21 +45,21 @@ public class Versioning {\n \n   /**\n    * Return the known version (Version) for the VersionOrdinal, if possible.\n-   * Otherwise return the returnWhenUnknown Version. This method essentially\n+   * Otherwise return the defaultKnownVersion Version. This method essentially\n    * downcasts a {@link VersionOrdinal} to a known version {@link Version}\n    *\n    * @param anyVersion came from a call to {@link #getVersionOrdinal(short)} or this\n    *        method\n-   * @param returnWhenUnknown will be returned if anyVersion does not represent\n+   * @param defaultKnownVersion will be returned if anyVersion does not represent\n    *        a known version\n    * @return a known version\n    */\n-  public static Version getKnownVersion(final VersionOrdinal anyVersion,\n-      Version returnWhenUnknown) {\n+  public static Version getKnownVersionOrDefault(final VersionOrdinal anyVersion,\n+      Version defaultKnownVersion) {\n     if (anyVersion instanceof Version) {\n       return (Version) anyVersion;\n     } else {\n-      return returnWhenUnknown;\n+      return defaultKnownVersion;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNjQ2Nw==", "url": "https://github.com/apache/geode/pull/5344#discussion_r450426467", "bodyText": "You're using this pattern a lot.  Versioning.getVersionOrdinal() is going to possibly create an unknown version object and then getKnownVersion() is going to throw it away.  Is there a way to do this w/o creating an object?  Maybe Versioning.getKnownVersion(short, default)?", "author": "bschuchardt", "createdAt": "2020-07-06T19:11:09Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -2077,13 +2078,13 @@ private void readGemfireVersionRecord(DataInput dis, File f) throws IOException\n   }\n \n   private Version readProductVersionRecord(DataInput dis, File f) throws IOException {\n-    Version recoveredGFVersion;\n-    short ver = Version.readOrdinal(dis);\n-    try {\n-      recoveredGFVersion = Version.fromOrdinal(ver);\n-    } catch (UnsupportedSerializationVersionException e) {\n+    short ver = VersioningIO.readOrdinal(dis);\n+    final Version recoveredGFVersion =\n+        Versioning.getKnownVersion(\n+            Versioning.getVersionOrdinal(ver), null);", "originalCommit": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5NzUyOQ==", "url": "https://github.com/apache/geode/pull/5344#discussion_r450497529", "bodyText": "getVersionOrdinal(short) only constructs an UnknownVersion instance if the short does not map to a known version (Version). If the short maps to a known version (Version) then that object is returned. In that case, the subsequent call to getKnownVersion(VersionOrdinal,Version) is a merely a downcast (instanceof call followed by return.) No UnknownVersion becomes garbage prematurely in this scenario.\nIf we introduce getKnownVersion(short,default) we'd save one instanceof call in this case, but we'd then have two methods for converting short into a version. I think there is value in the orthogonality we currently have in the Versioning API: one way to convert a short to a VersionOrdinal and one way to convert a VersionOrdinal into a known version (Version.) Two methods in the Versioning API instead of three.\nI feel this pattern is plenty fast (nanoseconds) relative to the number of times we need to call these methods.", "author": "Bill", "createdAt": "2020-07-06T21:48:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNjQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f57b62283701f763c2428acb3e4b2d0950395a68", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java b/geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java\nindex f09f156afd..41b499aae1 100755\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java\n\n@@ -2080,7 +2080,7 @@ public class Oplog implements CompactableOplog, Flushable {\n   private Version readProductVersionRecord(DataInput dis, File f) throws IOException {\n     short ver = VersioningIO.readOrdinal(dis);\n     final Version recoveredGFVersion =\n-        Versioning.getKnownVersion(\n+        Versioning.getKnownVersionOrDefault(\n             Versioning.getVersionOrdinal(ver), null);\n     if (recoveredGFVersion == null) {\n       throw new DiskAccessException(\n"}}, {"oid": "442b71ec6b82d0ada188e59aa00672a12644804b", "url": "https://github.com/apache/geode/commit/442b71ec6b82d0ada188e59aa00672a12644804b", "message": "hoist version detecton out of loops", "committedDate": "2020-07-06T22:09:31Z", "type": "commit"}, {"oid": "f57b62283701f763c2428acb3e4b2d0950395a68", "url": "https://github.com/apache/geode/commit/f57b62283701f763c2428acb3e4b2d0950395a68", "message": "improved naming in Versioning: getKnownVersionOrDefault", "committedDate": "2020-07-07T16:34:30Z", "type": "commit"}]}