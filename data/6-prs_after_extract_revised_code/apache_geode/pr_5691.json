{"pr_number": 5691, "pr_title": "GEODE-8672: No need in token mode if concurrencyChecksEnabled", "pr_createdAt": "2020-10-29T23:59:43Z", "pr_url": "https://github.com/apache/geode/pull/5691", "timeline": [{"oid": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43", "url": "https://github.com/apache/geode/commit/f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43", "message": "GEODE-8672: No need in token mode if concurrencyChecksEnabled\n\n  * The DESTROYED token is only needed to prevent concurrent destroy op\n    is lost in GII. If concurrency checks are enabled, the version tag\n    should be able to prevent the destroy op being lost.", "committedDate": "2020-10-29T23:50:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNDQ2OQ==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515224469", "bodyText": "This method might be better named \"isInTokenModeNeeded.\" This will also require that test names in LocalRegionTest be changed.", "author": "DonalEvans", "createdAt": "2020-10-30T16:31:02Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java", "diffHunk": "@@ -6847,6 +6847,10 @@ public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event\n     }\n   }\n \n+  boolean isNeedInTokenMode(boolean needTokensForGII, boolean needRIDestroyToken) {", "originalCommit": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed42965f69de46c9c95980ed3d276d874e3d9813", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java b/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java\nindex 910d399a77..7e52d4c192 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java\n\n@@ -6847,7 +6847,7 @@ public class LocalRegion extends AbstractRegion implements LoaderHelperFactory,\n     }\n   }\n \n-  boolean isNeedInTokenMode(boolean needTokensForGII, boolean needRIDestroyToken) {\n+  boolean isInTokenModeNeeded(boolean needTokensForGII, boolean needRIDestroyToken) {\n     return (needTokensForGII || needRIDestroyToken) && !getConcurrencyChecksEnabled();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjEwMg==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515232102", "bodyText": "This test name seems not to match with what the test is doing. The call to isNeedInTokenMode() has needTokensForGII as true and needRIDestroyToken as false, but the name seems to imply that needRIDestroyToken is true.\nAlso, would it be worth adding a test for the case where needTokensForGII is false and needRIDestroyToken is true, for completeness?", "author": "DonalEvans", "createdAt": "2020-10-30T16:43:54Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java", "diffHunk": "@@ -277,4 +277,35 @@ public void generateLocalFilterRoutingIsNotNeededIfChangeNotAppliedToCacheYet()\n \n     assertThat(region.isGenerateLocalFilterRoutingNeeded(event)).isFalse();\n   }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsFalseIfConcurrencyChecksEnabled() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+    doReturn(true).when(region).getConcurrencyChecksEnabled();\n+\n+    assertThat(region.isNeedInTokenMode(true, true)).isFalse();\n+  }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsFalseIfBothNeedTokensForGIIAndNeedRIDestroyTokenAreFalse() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+\n+    assertThat(region.isNeedInTokenMode(false, false)).isFalse();\n+  }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsTrueIfConcurrencyChecksNotEnabledAndNeedDestroyToken() {", "originalCommit": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NzY0NA==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515347644", "bodyText": "Actually both setting is used to determine if Destroyed token is needed. But you are right, it is a little confusing. I have changed the test name and added another test case.", "author": "pivotal-eshu", "createdAt": "2020-10-30T20:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "ed42965f69de46c9c95980ed3d276d874e3d9813", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java\nindex 14286a68ca..60e8454904 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java\n\n@@ -279,33 +279,43 @@ public class LocalRegionTest {\n   }\n \n   @Test\n-  public void isNeedInTokenModeReturnsFalseIfConcurrencyChecksEnabled() {\n+  public void isInTokenModeNeededReturnsFalseIfConcurrencyChecksEnabled() {\n     LocalRegion region =\n         spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n             internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n             poolFinder, regionPerfStatsFactory, disabledClock()));\n     doReturn(true).when(region).getConcurrencyChecksEnabled();\n \n-    assertThat(region.isNeedInTokenMode(true, true)).isFalse();\n+    assertThat(region.isInTokenModeNeeded(true, true)).isFalse();\n   }\n \n   @Test\n-  public void isNeedInTokenModeReturnsFalseIfBothNeedTokensForGIIAndNeedRIDestroyTokenAreFalse() {\n+  public void isInTokenModeNeededReturnsFalseIfBothNeedTokensForGIIAndNeedRIDestroyTokenAreFalse() {\n     LocalRegion region =\n         spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n             internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n             poolFinder, regionPerfStatsFactory, disabledClock()));\n \n-    assertThat(region.isNeedInTokenMode(false, false)).isFalse();\n+    assertThat(region.isInTokenModeNeeded(false, false)).isFalse();\n   }\n \n   @Test\n-  public void isNeedInTokenModeReturnsTrueIfConcurrencyChecksNotEnabledAndNeedDestroyToken() {\n+  public void isInTokenModeNeededReturnsTrueIfConcurrencyChecksNotEnabledAndNeedTokensForGII() {\n     LocalRegion region =\n         spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n             internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n             poolFinder, regionPerfStatsFactory, disabledClock()));\n \n-    assertThat(region.isNeedInTokenMode(true, false)).isTrue();\n+    assertThat(region.isInTokenModeNeeded(true, false)).isTrue();\n+  }\n+\n+  @Test\n+  public void isInTokenModeNeededReturnsTrueIfConcurrencyChecksNotEnabledAndNeedRIDestroyToken() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+\n+    assertThat(region.isInTokenModeNeeded(false, true)).isTrue();\n   }\n }\n"}}, {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813", "url": "https://github.com/apache/geode/commit/ed42965f69de46c9c95980ed3d276d874e3d9813", "message": "fix a review comment.", "committedDate": "2020-10-30T19:58:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMjYzNg==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515422636", "bodyText": "Can this not be a ConcurrentLinkedQueue or possibly use Collections.synchronizedList()?", "author": "kohlmu-pivotal", "createdAt": "2020-10-30T23:28:33Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();", "originalCommit": "ed42965f69de46c9c95980ed3d276d874e3d9813", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\nindex 8503005bea..598d58c1f2 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n\n@@ -2782,7 +2785,7 @@ public class RebalanceOperationDistributedTest extends CacheTestCase {\n   private String regionName = \"region\";\n   private int numOfEntry = 2500;\n   private int totalNumberOfBuckets = 31;\n-  private final ArrayList<Integer> list = new ArrayList<>();\n+  private final ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();\n \n   @Test\n   public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzI3Mw==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423273", "bodyText": "This synchronization block should be replaced with a collection that handles concurrency, like ConcurrencyLinkedQueue or Collections.synchronizedList()", "author": "kohlmu-pivotal", "createdAt": "2020-10-30T23:31:46Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {", "originalCommit": "ed42965f69de46c9c95980ed3d276d874e3d9813", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\nindex 8503005bea..598d58c1f2 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n\n@@ -2782,7 +2785,7 @@ public class RebalanceOperationDistributedTest extends CacheTestCase {\n   private String regionName = \"region\";\n   private int numOfEntry = 2500;\n   private int totalNumberOfBuckets = 31;\n-  private final ArrayList<Integer> list = new ArrayList<>();\n+  private final ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();\n \n   @Test\n   public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzgzMg==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423832", "bodyText": "All of this can be replaced with an ExecutorService", "author": "kohlmu-pivotal", "createdAt": "2020-10-30T23:35:02Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }", "originalCommit": "ed42965f69de46c9c95980ed3d276d874e3d9813", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTYxNA==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515425614", "bodyText": "Can ExecutorService be used in a server vm? I tried using the ExecutorService but was failed as the rule not applied in a server vm.", "author": "pivotal-eshu", "createdAt": "2020-10-30T23:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyODU2Mw==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515428563", "bodyText": "Never heard of a reason why it should not be able to.", "author": "kohlmu-pivotal", "createdAt": "2020-10-31T00:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\nindex 8503005bea..598d58c1f2 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n\n@@ -2782,7 +2785,7 @@ public class RebalanceOperationDistributedTest extends CacheTestCase {\n   private String regionName = \"region\";\n   private int numOfEntry = 2500;\n   private int totalNumberOfBuckets = 31;\n-  private final ArrayList<Integer> list = new ArrayList<>();\n+  private final ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();\n \n   @Test\n   public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzg4Nw==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423887", "bodyText": "All of this can be replaced with an ExecutorService", "author": "kohlmu-pivotal", "createdAt": "2020-10-30T23:35:16Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }\n+\n+  private void doConcurrentDestroyInTx() throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(this::doDestroyOpInTx);\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }", "originalCommit": "ed42965f69de46c9c95980ed3d276d874e3d9813", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\nindex 8503005bea..598d58c1f2 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n\n@@ -2782,7 +2785,7 @@ public class RebalanceOperationDistributedTest extends CacheTestCase {\n   private String regionName = \"region\";\n   private int numOfEntry = 2500;\n   private int totalNumberOfBuckets = 31;\n-  private final ArrayList<Integer> list = new ArrayList<>();\n+  private final ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();\n \n   @Test\n   public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzkyOQ==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423929", "bodyText": "Can this not be a ConcurrentLinkedQueue or possibly use Collections.synchronizedList()?", "author": "kohlmu-pivotal", "createdAt": "2020-10-30T23:35:33Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }\n+\n+  private void doConcurrentDestroyInTx() throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }", "originalCommit": "ed42965f69de46c9c95980ed3d276d874e3d9813", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\nindex 8503005bea..598d58c1f2 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n\n@@ -2782,7 +2785,7 @@ public class RebalanceOperationDistributedTest extends CacheTestCase {\n   private String regionName = \"region\";\n   private int numOfEntry = 2500;\n   private int totalNumberOfBuckets = 31;\n-  private final ArrayList<Integer> list = new ArrayList<>();\n+  private final ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();\n \n   @Test\n   public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTA3MQ==", "url": "https://github.com/apache/geode/pull/5691#discussion_r515425071", "bodyText": "Small change, but can you swap the check around? First evaluate the ConcurrencyCheck. As this check has a greater chance to short circuit the conditional sooner.", "author": "kohlmu-pivotal", "createdAt": "2020-10-30T23:41:38Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java", "diffHunk": "@@ -6847,6 +6847,10 @@ public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event\n     }\n   }\n \n+  boolean isInTokenModeNeeded(boolean needTokensForGII, boolean needRIDestroyToken) {\n+    return (needTokensForGII || needRIDestroyToken) && !getConcurrencyChecksEnabled();", "originalCommit": "ed42965f69de46c9c95980ed3d276d874e3d9813", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java b/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java\nindex 7e52d4c192..017329ce70 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java\n\n@@ -6848,7 +6848,7 @@ public class LocalRegion extends AbstractRegion implements LoaderHelperFactory,\n   }\n \n   boolean isInTokenModeNeeded(boolean needTokensForGII, boolean needRIDestroyToken) {\n-    return (needTokensForGII || needRIDestroyToken) && !getConcurrencyChecksEnabled();\n+    return !getConcurrencyChecksEnabled() && (needTokensForGII || needRIDestroyToken);\n   }\n \n   /**\n"}}, {"oid": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "url": "https://github.com/apache/geode/commit/cb91d851be4d0d91ed67e4715cbfea815169e2ae", "message": "fix review comments.", "committedDate": "2020-11-02T18:41:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwNjE0OA==", "url": "https://github.com/apache/geode/pull/5691#discussion_r516206148", "bodyText": "I was more thinking in the line of using the invokeAll rather than the single submit. With invokeAll you can create all the operations up front and then invoke all of them at the same time.\nAre we not concerned that if we do it this way, that there is a possibility that the concurrency issue is possibly not ever hit?", "author": "kohlmu-pivotal", "createdAt": "2020-11-02T19:30:13Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2820,68 +2823,58 @@ private void doRebalance() throws TimeoutException, InterruptedException {\n \n   private void doConcurrentPutInTx(String s) throws Exception {\n     for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      synchronized (list) {\n-        list.add(i);\n-      }\n-    }\n-\n-    Thread[] threads = new Thread[totalNumberOfBuckets];\n-    for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      threads[i] = new Thread(() -> doPutOpInTx(s));\n+      queue.add(i);\n     }\n \n+    ExecutorService pool = Executors.newCachedThreadPool();\n+    Future<?>[] futures = new Future<?>[totalNumberOfBuckets];\n     for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      threads[i].start();\n+      futures[i] = pool.submit(() -> doPutOpInTx(s));", "originalCommit": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21a081bdeaf764f223410323ecd149e966c8b00c", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\nindex 598d58c1f2..605547b3ba 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java\n\n@@ -2827,13 +2829,18 @@ public class RebalanceOperationDistributedTest extends CacheTestCase {\n     }\n \n     ExecutorService pool = Executors.newCachedThreadPool();\n-    Future<?>[] futures = new Future<?>[totalNumberOfBuckets];\n+    Collection<Callable<Object>> tasks = new ArrayList<>();\n+    Callable<Object> task = () -> {\n+      doPutOpInTx(s);\n+      return null;\n+    };\n     for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      futures[i] = pool.submit(() -> doPutOpInTx(s));\n+      tasks.add(task);\n     }\n \n-    for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      futures[i].get();\n+    List<Future<Object>> futures = pool.invokeAll(tasks);\n+    for (Future future : futures) {\n+      future.get();\n     }\n   }\n \n"}}, {"oid": "21a081bdeaf764f223410323ecd149e966c8b00c", "url": "https://github.com/apache/geode/commit/21a081bdeaf764f223410323ecd149e966c8b00c", "message": "Fix a review comment.", "committedDate": "2020-11-02T22:01:50Z", "type": "commit"}]}