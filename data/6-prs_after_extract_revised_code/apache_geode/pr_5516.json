{"pr_number": 5516, "pr_title": "GEODE-7679 Partitioned Region clear is successful while region is being altered", "pr_createdAt": "2020-09-16T00:17:52Z", "pr_url": "https://github.com/apache/geode/pull/5516", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTI3MQ==", "url": "https://github.com/apache/geode/pull/5516#discussion_r493631271", "bodyText": "do you need to add some verification code to verify that region is cleared and altered?", "author": "jinmeiliao", "createdAt": "2020-09-23T14:18:50Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }", "originalCommit": "3c57ae5da6b76b1ba053f44ca946369880b39429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1ODM2MQ==", "url": "https://github.com/apache/geode/pull/5516#discussion_r493858361", "bodyText": "It is verified at line 104 and line 322.", "author": "jchen21", "createdAt": "2020-09-23T19:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "27724ecd4cc173e3549ae9235b84bdac6e07cb5c", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\ndeleted file mode 100644\nindex f88aa57946..0000000000\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\n+++ /dev/null\n\n@@ -1,424 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.geode.internal.cache;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatThrownBy;\n-\n-import java.io.Serializable;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Future;\n-import java.util.stream.IntStream;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-import org.apache.geode.cache.AttributesMutator;\n-import org.apache.geode.cache.CacheListener;\n-import org.apache.geode.cache.CacheLoader;\n-import org.apache.geode.cache.CacheLoaderException;\n-import org.apache.geode.cache.CacheWriter;\n-import org.apache.geode.cache.CacheWriterException;\n-import org.apache.geode.cache.EntryEvent;\n-import org.apache.geode.cache.ExpirationAction;\n-import org.apache.geode.cache.ExpirationAttributes;\n-import org.apache.geode.cache.LoaderHelper;\n-import org.apache.geode.cache.PartitionedRegionPartialClearException;\n-import org.apache.geode.cache.Region;\n-import org.apache.geode.cache.RegionEvent;\n-import org.apache.geode.cache.RegionShortcut;\n-import org.apache.geode.distributed.internal.DistributionMessageObserver;\n-import org.apache.geode.test.dunit.AsyncInvocation;\n-import org.apache.geode.test.dunit.VM;\n-import org.apache.geode.test.dunit.rules.CacheRule;\n-import org.apache.geode.test.dunit.rules.DistributedRule;\n-import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n-\n-public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n-\n-  @Rule\n-  public DistributedRule distributedRule = new DistributedRule();\n-\n-  @Rule\n-  public CacheRule cacheRule = new CacheRule();\n-\n-  @Rule\n-  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n-\n-  private VM server1;\n-\n-  private VM server2;\n-\n-  private VM server3;\n-\n-  private static final String REGION_NAME = \"testRegion\";\n-\n-  private static final int NUM_ENTRIES = 1000000;\n-\n-  private void initialize() {\n-    server1 = VM.getVM(0);\n-    server2 = VM.getVM(1);\n-\n-    server1.invoke(() -> {\n-      cacheRule.createCache();\n-      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n-          .create(REGION_NAME);\n-    });\n-\n-    server2.invoke(() -> {\n-      cacheRule.createCache();\n-      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n-          .create(REGION_NAME);\n-    });\n-\n-    server1.invoke(() -> {\n-      populateRegion();\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n-    });\n-\n-    server2.invoke(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n-    });\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      alterRegionSetCacheLoader();\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-\n-\n-  @Test\n-  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      alterRegionSetCacheWriter();\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileAddingCacheListener() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      alterRegionSetCacheListener();\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingEviction() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      attributesMutator.getEvictionAttributesMutator().setMaximum(1);\n-      assertThat(region.getAttributes().getEvictionAttributes().getMaximum()).isEqualTo(1);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingRegionTTLExpiration() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      ExpirationAttributes expirationAttributes = new ExpirationAttributes();\n-      attributesMutator.setRegionTimeToLive(expirationAttributes);\n-      assertThat(region.getAttributes().getRegionTimeToLive()).isEqualTo(expirationAttributes);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingEntryTTLExpiration() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      ExpirationAttributes expirationAttributes = new ExpirationAttributes();\n-      attributesMutator.setEntryTimeToLive(expirationAttributes);\n-      assertThat(region.getAttributes().getEntryTimeToLive()).isEqualTo(expirationAttributes);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingRegionIdleExpiration() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      ExpirationAttributes expirationAttributes = new ExpirationAttributes();\n-      attributesMutator.setRegionIdleTimeout(expirationAttributes);\n-      assertThat(region.getAttributes().getRegionIdleTimeout()).isEqualTo(expirationAttributes);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingEntryIdleExpiration() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      ExpirationAttributes expirationAttributes =\n-          new ExpirationAttributes(1, ExpirationAction.DESTROY);\n-      attributesMutator.setEntryIdleTimeout(expirationAttributes);\n-      assertThat(region.getAttributes().getEntryIdleTimeout()).isEqualTo(expirationAttributes);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testMemberLeave() throws InterruptedException {\n-    initialize();\n-\n-    server3 = VM.getVM(2);\n-\n-    server3.invoke(() -> {\n-      cacheRule.createCache();\n-      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n-          .create(REGION_NAME);\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n-    });\n-\n-    server2.invoke(() -> {\n-      DistributionMessageObserver\n-          .setInstance(\n-              new PartitionedRegionClearWithConcurrentOperationsDUnitTest.MemberKiller(false));\n-    });\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      assertThatThrownBy(() -> cacheRule.getCache().getRegion(REGION_NAME).clear())\n-          .isInstanceOf(PartitionedRegionPartialClearException.class);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server3.invokeAsync(() -> {\n-      alterRegionSetCacheWriter();\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testSingleServer() throws ExecutionException, InterruptedException {\n-    cacheRule.createCache();\n-    cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n-        .create(REGION_NAME);\n-    populateRegion();\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n-\n-\n-    Future future1 = executorServiceRule.runAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    Future future2 = executorServiceRule.runAsync(() -> {\n-      alterRegionSetCacheLoader();\n-    });\n-\n-    future1.get();\n-    future2.get();\n-  }\n-\n-  private void populateRegion() {\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    IntStream.range(0, NUM_ENTRIES).forEach(i -> region.put(i, i));\n-  }\n-\n-  private void alterRegionSetCacheLoader() {\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    AttributesMutator attributesMutator = region.getAttributesMutator();\n-    TestCacheLoader testCacheLoader = new TestCacheLoader();\n-    attributesMutator.setCacheLoader(testCacheLoader);\n-    assertThat(region.getAttributes().getCacheLoader()).isEqualTo(testCacheLoader);\n-  }\n-\n-  private void alterRegionSetCacheWriter() {\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    AttributesMutator attributesMutator = region.getAttributesMutator();\n-    TestCacheWriter testCacheWriter = new TestCacheWriter();\n-    attributesMutator.setCacheWriter(testCacheWriter);\n-    assertThat(region.getAttributes().getCacheWriter()).isEqualTo(testCacheWriter);\n-  }\n-\n-  private void alterRegionSetCacheListener() {\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    AttributesMutator attributesMutator = region.getAttributesMutator();\n-    TestCacheListener testCacheListener = new TestCacheListener();\n-    attributesMutator.addCacheListener(testCacheListener);\n-    assertThat(region.getAttributes().getCacheListeners()).contains(testCacheListener);\n-  }\n-\n-  private class TestCacheLoader implements CacheLoader {\n-\n-    @Override\n-    public Object load(LoaderHelper helper) throws CacheLoaderException {\n-      return new Integer(NUM_ENTRIES);\n-    }\n-  }\n-\n-  private class TestCacheWriter implements CacheWriter {\n-\n-    @Override\n-    public void beforeUpdate(EntryEvent event) throws CacheWriterException {\n-\n-    }\n-\n-    @Override\n-    public void beforeCreate(EntryEvent event) throws CacheWriterException {\n-\n-    }\n-\n-    @Override\n-    public void beforeDestroy(EntryEvent event) throws CacheWriterException {\n-\n-    }\n-\n-    @Override\n-    public void beforeRegionDestroy(RegionEvent event) throws CacheWriterException {\n-\n-    }\n-\n-    @Override\n-    public void beforeRegionClear(RegionEvent event) throws CacheWriterException {\n-      System.out.println(\"beforeRegionClear\");\n-    }\n-  }\n-\n-  private class TestCacheListener implements CacheListener {\n-\n-    @Override\n-    public void afterCreate(EntryEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterUpdate(EntryEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterInvalidate(EntryEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterDestroy(EntryEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterRegionInvalidate(RegionEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterRegionDestroy(RegionEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterRegionClear(RegionEvent event) {\n-      System.out.println(\"afterRegionClear\");\n-    }\n-\n-    @Override\n-    public void afterRegionCreate(RegionEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterRegionLive(RegionEvent event) {\n-\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTY5Ng==", "url": "https://github.com/apache/geode/pull/5516#discussion_r493631696", "bodyText": "same thing, probably some verification code here and in other tests", "author": "jinmeiliao", "createdAt": "2020-09-23T14:19:22Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }", "originalCommit": "3c57ae5da6b76b1ba053f44ca946369880b39429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1ODkwMA==", "url": "https://github.com/apache/geode/pull/5516#discussion_r493858900", "bodyText": "It is verified at line 123 and line 330.", "author": "jchen21", "createdAt": "2020-09-23T19:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "27724ecd4cc173e3549ae9235b84bdac6e07cb5c", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\ndeleted file mode 100644\nindex f88aa57946..0000000000\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\n+++ /dev/null\n\n@@ -1,424 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.geode.internal.cache;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatThrownBy;\n-\n-import java.io.Serializable;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Future;\n-import java.util.stream.IntStream;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-import org.apache.geode.cache.AttributesMutator;\n-import org.apache.geode.cache.CacheListener;\n-import org.apache.geode.cache.CacheLoader;\n-import org.apache.geode.cache.CacheLoaderException;\n-import org.apache.geode.cache.CacheWriter;\n-import org.apache.geode.cache.CacheWriterException;\n-import org.apache.geode.cache.EntryEvent;\n-import org.apache.geode.cache.ExpirationAction;\n-import org.apache.geode.cache.ExpirationAttributes;\n-import org.apache.geode.cache.LoaderHelper;\n-import org.apache.geode.cache.PartitionedRegionPartialClearException;\n-import org.apache.geode.cache.Region;\n-import org.apache.geode.cache.RegionEvent;\n-import org.apache.geode.cache.RegionShortcut;\n-import org.apache.geode.distributed.internal.DistributionMessageObserver;\n-import org.apache.geode.test.dunit.AsyncInvocation;\n-import org.apache.geode.test.dunit.VM;\n-import org.apache.geode.test.dunit.rules.CacheRule;\n-import org.apache.geode.test.dunit.rules.DistributedRule;\n-import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n-\n-public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n-\n-  @Rule\n-  public DistributedRule distributedRule = new DistributedRule();\n-\n-  @Rule\n-  public CacheRule cacheRule = new CacheRule();\n-\n-  @Rule\n-  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n-\n-  private VM server1;\n-\n-  private VM server2;\n-\n-  private VM server3;\n-\n-  private static final String REGION_NAME = \"testRegion\";\n-\n-  private static final int NUM_ENTRIES = 1000000;\n-\n-  private void initialize() {\n-    server1 = VM.getVM(0);\n-    server2 = VM.getVM(1);\n-\n-    server1.invoke(() -> {\n-      cacheRule.createCache();\n-      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n-          .create(REGION_NAME);\n-    });\n-\n-    server2.invoke(() -> {\n-      cacheRule.createCache();\n-      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n-          .create(REGION_NAME);\n-    });\n-\n-    server1.invoke(() -> {\n-      populateRegion();\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n-    });\n-\n-    server2.invoke(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n-    });\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      alterRegionSetCacheLoader();\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-\n-\n-  @Test\n-  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      alterRegionSetCacheWriter();\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileAddingCacheListener() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      alterRegionSetCacheListener();\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingEviction() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      attributesMutator.getEvictionAttributesMutator().setMaximum(1);\n-      assertThat(region.getAttributes().getEvictionAttributes().getMaximum()).isEqualTo(1);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingRegionTTLExpiration() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      ExpirationAttributes expirationAttributes = new ExpirationAttributes();\n-      attributesMutator.setRegionTimeToLive(expirationAttributes);\n-      assertThat(region.getAttributes().getRegionTimeToLive()).isEqualTo(expirationAttributes);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingEntryTTLExpiration() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      ExpirationAttributes expirationAttributes = new ExpirationAttributes();\n-      attributesMutator.setEntryTimeToLive(expirationAttributes);\n-      assertThat(region.getAttributes().getEntryTimeToLive()).isEqualTo(expirationAttributes);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingRegionIdleExpiration() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      ExpirationAttributes expirationAttributes = new ExpirationAttributes();\n-      attributesMutator.setRegionIdleTimeout(expirationAttributes);\n-      assertThat(region.getAttributes().getRegionIdleTimeout()).isEqualTo(expirationAttributes);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testClearRegionWhileChangingEntryIdleExpiration() throws InterruptedException {\n-    initialize();\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      AttributesMutator attributesMutator = region.getAttributesMutator();\n-      ExpirationAttributes expirationAttributes =\n-          new ExpirationAttributes(1, ExpirationAction.DESTROY);\n-      attributesMutator.setEntryIdleTimeout(expirationAttributes);\n-      assertThat(region.getAttributes().getEntryIdleTimeout()).isEqualTo(expirationAttributes);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testMemberLeave() throws InterruptedException {\n-    initialize();\n-\n-    server3 = VM.getVM(2);\n-\n-    server3.invoke(() -> {\n-      cacheRule.createCache();\n-      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n-          .create(REGION_NAME);\n-      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n-    });\n-\n-    server2.invoke(() -> {\n-      DistributionMessageObserver\n-          .setInstance(\n-              new PartitionedRegionClearWithConcurrentOperationsDUnitTest.MemberKiller(false));\n-    });\n-\n-    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      assertThatThrownBy(() -> cacheRule.getCache().getRegion(REGION_NAME).clear())\n-          .isInstanceOf(PartitionedRegionPartialClearException.class);\n-    });\n-\n-    AsyncInvocation asyncInvocation2 = server3.invokeAsync(() -> {\n-      alterRegionSetCacheWriter();\n-    });\n-\n-    asyncInvocation1.await();\n-    asyncInvocation2.await();\n-  }\n-\n-  @Test\n-  public void testSingleServer() throws ExecutionException, InterruptedException {\n-    cacheRule.createCache();\n-    cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n-        .create(REGION_NAME);\n-    populateRegion();\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n-\n-\n-    Future future1 = executorServiceRule.runAsync(() -> {\n-      cacheRule.getCache().getRegion(REGION_NAME).clear();\n-      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n-    });\n-\n-    Future future2 = executorServiceRule.runAsync(() -> {\n-      alterRegionSetCacheLoader();\n-    });\n-\n-    future1.get();\n-    future2.get();\n-  }\n-\n-  private void populateRegion() {\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    IntStream.range(0, NUM_ENTRIES).forEach(i -> region.put(i, i));\n-  }\n-\n-  private void alterRegionSetCacheLoader() {\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    AttributesMutator attributesMutator = region.getAttributesMutator();\n-    TestCacheLoader testCacheLoader = new TestCacheLoader();\n-    attributesMutator.setCacheLoader(testCacheLoader);\n-    assertThat(region.getAttributes().getCacheLoader()).isEqualTo(testCacheLoader);\n-  }\n-\n-  private void alterRegionSetCacheWriter() {\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    AttributesMutator attributesMutator = region.getAttributesMutator();\n-    TestCacheWriter testCacheWriter = new TestCacheWriter();\n-    attributesMutator.setCacheWriter(testCacheWriter);\n-    assertThat(region.getAttributes().getCacheWriter()).isEqualTo(testCacheWriter);\n-  }\n-\n-  private void alterRegionSetCacheListener() {\n-    Region region = cacheRule.getCache().getRegion(REGION_NAME);\n-    AttributesMutator attributesMutator = region.getAttributesMutator();\n-    TestCacheListener testCacheListener = new TestCacheListener();\n-    attributesMutator.addCacheListener(testCacheListener);\n-    assertThat(region.getAttributes().getCacheListeners()).contains(testCacheListener);\n-  }\n-\n-  private class TestCacheLoader implements CacheLoader {\n-\n-    @Override\n-    public Object load(LoaderHelper helper) throws CacheLoaderException {\n-      return new Integer(NUM_ENTRIES);\n-    }\n-  }\n-\n-  private class TestCacheWriter implements CacheWriter {\n-\n-    @Override\n-    public void beforeUpdate(EntryEvent event) throws CacheWriterException {\n-\n-    }\n-\n-    @Override\n-    public void beforeCreate(EntryEvent event) throws CacheWriterException {\n-\n-    }\n-\n-    @Override\n-    public void beforeDestroy(EntryEvent event) throws CacheWriterException {\n-\n-    }\n-\n-    @Override\n-    public void beforeRegionDestroy(RegionEvent event) throws CacheWriterException {\n-\n-    }\n-\n-    @Override\n-    public void beforeRegionClear(RegionEvent event) throws CacheWriterException {\n-      System.out.println(\"beforeRegionClear\");\n-    }\n-  }\n-\n-  private class TestCacheListener implements CacheListener {\n-\n-    @Override\n-    public void afterCreate(EntryEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterUpdate(EntryEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterInvalidate(EntryEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterDestroy(EntryEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterRegionInvalidate(RegionEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterRegionDestroy(RegionEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterRegionClear(RegionEvent event) {\n-      System.out.println(\"afterRegionClear\");\n-    }\n-\n-    @Override\n-    public void afterRegionCreate(RegionEvent event) {\n-\n-    }\n-\n-    @Override\n-    public void afterRegionLive(RegionEvent event) {\n-\n-    }\n-  }\n-}\n"}}, {"oid": "7fb4b3c9a9ab58b8aee9b7fc86809924db7198e4", "url": "https://github.com/apache/geode/commit/7fb4b3c9a9ab58b8aee9b7fc86809924db7198e4", "message": "Add missing test", "committedDate": "2020-10-26T20:43:34Z", "type": "forcePushed"}, {"oid": "27724ecd4cc173e3549ae9235b84bdac6e07cb5c", "url": "https://github.com/apache/geode/commit/27724ecd4cc173e3549ae9235b84bdac6e07cb5c", "message": "GEODE-7683: introduce BR.cmnClearRegion\n\nCo-authored-by: Xiaojian Zhou <gzhou@pivotal.io>\n\nGEODE-7684: Create messaging class for PR Clear (#4689)\n\n* Added new message class and test\n\nCo-authored-by: Benjamin Ross <bross@pivotal.io>\nCo-authored-by: Donal Evans <doevans@pivotal.io>", "committedDate": "2020-10-30T19:00:43Z", "type": "commit"}, {"oid": "fed1487889d1edd88d63c3d659d0799ba7743f8f", "url": "https://github.com/apache/geode/commit/fed1487889d1edd88d63c3d659d0799ba7743f8f", "message": "Init commit\n\n[]\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>", "committedDate": "2020-10-30T19:00:44Z", "type": "commit"}, {"oid": "814850f134830204ec9d86329868bd30641e3dee", "url": "https://github.com/apache/geode/commit/814850f134830204ec9d86329868bd30641e3dee", "message": "Second commit\n\n[]\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>", "committedDate": "2020-10-30T19:00:44Z", "type": "commit"}, {"oid": "58d0470a47aa91f6ef2cb51e843e7b31d5b92a1e", "url": "https://github.com/apache/geode/commit/58d0470a47aa91f6ef2cb51e843e7b31d5b92a1e", "message": "Third commit", "committedDate": "2020-10-30T19:00:44Z", "type": "commit"}, {"oid": "a0ebc5a54432ae2de49dfdf848bf70b1aa1c4fd8", "url": "https://github.com/apache/geode/commit/a0ebc5a54432ae2de49dfdf848bf70b1aa1c4fd8", "message": "WIP", "committedDate": "2020-10-30T19:00:44Z", "type": "commit"}, {"oid": "34997bfa66a355ced829deb03bcfc567db9ac2fd", "url": "https://github.com/apache/geode/commit/34997bfa66a355ced829deb03bcfc567db9ac2fd", "message": "Add more tests", "committedDate": "2020-10-30T19:00:44Z", "type": "commit"}, {"oid": "c525b2fb345e471c6a16282a28edfc616b3b0ee8", "url": "https://github.com/apache/geode/commit/c525b2fb345e471c6a16282a28edfc616b3b0ee8", "message": "Add more tests\n\nadd remove server\nsingle server", "committedDate": "2020-10-30T19:00:44Z", "type": "commit"}, {"oid": "a4eed652b412eee54164962caad3595a22534c35", "url": "https://github.com/apache/geode/commit/a4eed652b412eee54164962caad3595a22534c35", "message": "Remove ignored test", "committedDate": "2020-10-30T19:00:44Z", "type": "commit"}, {"oid": "eb7663abb0a0247291d7bd2bc93fd1f95666d613", "url": "https://github.com/apache/geode/commit/eb7663abb0a0247291d7bd2bc93fd1f95666d613", "message": "spotlessApply", "committedDate": "2020-10-30T19:00:45Z", "type": "commit"}, {"oid": "a7cd2b362e636cba7e3bd78a378ab1017bc35cfc", "url": "https://github.com/apache/geode/commit/a7cd2b362e636cba7e3bd78a378ab1017bc35cfc", "message": "Add missing test", "committedDate": "2020-10-30T19:00:45Z", "type": "commit"}, {"oid": "b29b980f915e9e336ce6d6775d2ba79fcb9d86af", "url": "https://github.com/apache/geode/commit/b29b980f915e9e336ce6d6775d2ba79fcb9d86af", "message": "Remove the code added during conflict resolution", "committedDate": "2020-10-30T19:00:45Z", "type": "commit"}, {"oid": "b29b980f915e9e336ce6d6775d2ba79fcb9d86af", "url": "https://github.com/apache/geode/commit/b29b980f915e9e336ce6d6775d2ba79fcb9d86af", "message": "Remove the code added during conflict resolution", "committedDate": "2020-10-30T19:00:45Z", "type": "forcePushed"}, {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470", "url": "https://github.com/apache/geode/commit/a95185b4e5f14e5b93845482ddc40cd47fbb4470", "message": "Make sure clear and alter region are concurrent\n\nAdding DistributionMessageObserver and DUnitBlackboard", "committedDate": "2020-10-30T22:43:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNzAwNQ==", "url": "https://github.com/apache/geode/pull/5516#discussion_r515417005", "bodyText": "this should be splited into 2 different call.\nsetInstance should be called in invoke(), alterRegionSetCacheLoader() should be called in async.", "author": "gesterzhou", "createdAt": "2020-10-30T23:01:25Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {", "originalCommit": "a95185b4e5f14e5b93845482ddc40cd47fbb4470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNDE4NQ==", "url": "https://github.com/apache/geode/pull/5516#discussion_r515424185", "bodyText": "Very good point!", "author": "jchen21", "createdAt": "2020-10-30T23:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNzAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNjA1Ng==", "url": "https://github.com/apache/geode/pull/5516#discussion_r515426056", "bodyText": "Fixed.", "author": "jchen21", "createdAt": "2020-10-30T23:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNzAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e56050050549075e50c636269aaebb8c2d94ad8c", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\nindex e85a4541c2..b878d6fd1f 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\n\n@@ -110,8 +110,9 @@ public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializa\n   public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n     initialize();\n \n+    server1.invoke(() -> DistributionMessageObserver.setInstance(getDistributionMessageObserver()));\n+\n     AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n       alterRegionSetCacheLoader();\n     });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxODk0Nw==", "url": "https://github.com/apache/geode/pull/5516#discussion_r515418947", "bodyText": "(1) why in loader and writer test, you did not use waitForGate?\n(2) you can define singalGate in afterProcessedMessage, afterReceivedMessage respectively to test in different cases", "author": "gesterzhou", "createdAt": "2020-10-30T23:10:03Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheListener() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheListener();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileChangingEviction() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      AttributesMutator attributesMutator = region.getAttributesMutator();\n+      getBlackboard().waitForGate(GATE_NAME);", "originalCommit": "a95185b4e5f14e5b93845482ddc40cd47fbb4470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTY3Mg==", "url": "https://github.com/apache/geode/pull/5516#discussion_r515425672", "bodyText": "(1) The waitForGate is called in alterRegionSetCacheLoader and alterRegionSetCacheWriter.\n(2) I don't see significant difference between afterProcessedMessage and afterReceivedMessage. It's true their timings are different. But is the difference significant enough to make the concurrent alter region behavior different? For example, causing some error or failure etc.? Can you elaborate a bit? Maybe we can talk about it.", "author": "jchen21", "createdAt": "2020-10-30T23:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxODk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNzU4OQ==", "url": "https://github.com/apache/geode/pull/5516#discussion_r516337589", "bodyText": "There is no afterReceivedMessasge in the DistributionMessgeObserver API.\nI have added additional tests with test hook that uses beforeProcessMessage.", "author": "jchen21", "createdAt": "2020-11-02T23:43:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxODk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e56050050549075e50c636269aaebb8c2d94ad8c", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\nindex e85a4541c2..b878d6fd1f 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java\n\n@@ -110,8 +110,9 @@ public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializa\n   public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n     initialize();\n \n+    server1.invoke(() -> DistributionMessageObserver.setInstance(getDistributionMessageObserver()));\n+\n     AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n-      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n       alterRegionSetCacheLoader();\n     });\n \n"}}, {"oid": "e56050050549075e50c636269aaebb8c2d94ad8c", "url": "https://github.com/apache/geode/commit/e56050050549075e50c636269aaebb8c2d94ad8c", "message": "Fix a bug.", "committedDate": "2020-10-30T23:46:16Z", "type": "commit"}, {"oid": "dd607a40f13e7fabed6651c310d7850cbbb5c0d8", "url": "https://github.com/apache/geode/commit/dd607a40f13e7fabed6651c310d7850cbbb5c0d8", "message": "Add more tests with different test hook\n\nHad tried to add DistributionMessageObserver as parameter of test methods.\nHowever, it ends up with NoSerializableException, even with static methods\nthat returns the observer.\n\nTherefore, it ends up with some code duplication. Because parameterization\nof the observer does not work.", "committedDate": "2020-11-02T23:36:57Z", "type": "commit"}, {"oid": "80b8548421a6de61b4bd57175ff6f682eaf379ae", "url": "https://github.com/apache/geode/commit/80b8548421a6de61b4bd57175ff6f682eaf379ae", "message": "Ignore failing tests for now\n\nThe failing tests are tracked by GEODE-8680", "committedDate": "2020-11-03T02:45:51Z", "type": "commit"}]}