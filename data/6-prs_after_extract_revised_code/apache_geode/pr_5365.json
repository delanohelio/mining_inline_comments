{"pr_number": 5365, "pr_title": "GEODE-8334: PR.clear should sync with putAll or removeAll on rvvLock", "pr_createdAt": "2020-07-09T22:59:04Z", "pr_url": "https://github.com/apache/geode/pull/5365", "timeline": [{"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50", "url": "https://github.com/apache/geode/commit/43cb2781e34b0b24f2628236256e13027f4b4e50", "message": "GEODE-8334: PR.clear should sync with putAll or removeAll on rvvLock\n\n    Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>\n    Co-authored-by: Anil <agingade@pivotal.io>", "committedDate": "2020-07-09T22:55:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzODY0NQ==", "url": "https://github.com/apache/geode/pull/5365#discussion_r452538645", "bodyText": "This can be replaced with assertThatThrownBy(() -> message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1)).isInstanceOf(PrimaryBucketException.class); to make things a bit neater.", "author": "DonalEvans", "createdAt": "2020-07-09T23:12:27Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "diffHunk": "@@ -119,4 +122,34 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n         eq(regionDestroyedException));\n   }\n \n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }", "originalCommit": "43cb2781e34b0b24f2628236256e13027f4b4e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0Mjc5MA==", "url": "https://github.com/apache/geode/pull/5365#discussion_r452542790", "bodyText": "+1", "author": "agingade", "createdAt": "2020-07-09T23:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzODY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9462fd0e4897d5887cf245a14698752a95d032b1", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java\nindex c5dd140b19..f5480a5b28 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java\n\n@@ -138,12 +137,9 @@ public class PutAllPRMessageTest {\n     when(cache.getDistributedSystem()).thenReturn(ids);\n     when(ids.getOffHeapStore()).thenReturn(null);\n \n-    try {\n-      message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);\n-      fail(\"Expect PrimaryBucketException\");\n-    } catch (Exception e) {\n-      assertThat(e instanceof PrimaryBucketException);\n-    }\n+    assertThatThrownBy(\n+        () -> message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1))\n+            .isInstanceOf(PrimaryBucketException.class);\n \n     InOrder inOrder = inOrder(bucketRegion);\n     inOrder.verify(bucketRegion).waitUntilLocked(keys);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzODg4MA==", "url": "https://github.com/apache/geode/pull/5365#discussion_r452538880", "bodyText": "This can be replaced with assertThatThrownBy(() -> message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true)).isInstanceOf(PrimaryBucketException.class); to make things a bit neater.", "author": "DonalEvans", "createdAt": "2020-07-09T23:13:17Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "diffHunk": "@@ -131,4 +134,35 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n     verify(dataStore).checkRegionDestroyedOnBucket(eq(bucketRegion), eq(true),\n         eq(regionDestroyedException));\n   }\n+\n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    RemoveAllPRMessage message =\n+        spy(new RemoveAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }", "originalCommit": "43cb2781e34b0b24f2628236256e13027f4b4e50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9462fd0e4897d5887cf245a14698752a95d032b1", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java\nindex 19d508e79b..a3ee31b8e9 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java\n\n@@ -152,12 +151,8 @@ public class RemoveAllPRMessageTest {\n     when(cache.getDistributedSystem()).thenReturn(ids);\n     when(ids.getOffHeapStore()).thenReturn(null);\n \n-    try {\n-      message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true);\n-      fail(\"Expect PrimaryBucketException\");\n-    } catch (Exception e) {\n-      assertThat(e instanceof PrimaryBucketException);\n-    }\n+    assertThatThrownBy(() -> message.doLocalRemoveAll(partitionedRegion,\n+        mock(InternalDistributedMember.class), true)).isInstanceOf(PrimaryBucketException.class);\n \n     InOrder inOrder = inOrder(bucketRegion);\n     inOrder.verify(bucketRegion).waitUntilLocked(keys);\n"}}, {"oid": "9462fd0e4897d5887cf245a14698752a95d032b1", "url": "https://github.com/apache/geode/commit/9462fd0e4897d5887cf245a14698752a95d032b1", "message": "fix the test case", "committedDate": "2020-07-09T23:24:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzM2MA==", "url": "https://github.com/apache/geode/pull/5365#discussion_r452543360", "bodyText": "Having the actual operation \"put\" in between the lock and unlock makes sure the operation is operated under expected locking.", "author": "agingade", "createdAt": "2020-07-09T23:27:45Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "diffHunk": "@@ -119,4 +122,34 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n         eq(regionDestroyedException));\n   }\n \n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }\n+\n+    InOrder inOrder = inOrder(bucketRegion);\n+    inOrder.verify(bucketRegion).waitUntilLocked(keys);\n+    inOrder.verify(bucketRegion).lockRVVForBulkOp();\n+    inOrder.verify(bucketRegion).unlockRVVForBulkOp();", "originalCommit": "43cb2781e34b0b24f2628236256e13027f4b4e50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzQ4Mg==", "url": "https://github.com/apache/geode/pull/5365#discussion_r452543482", "bodyText": "Having the actual operation \"remove\" in between the lock and unlock makes sure the operation is operated under expected locking.", "author": "agingade", "createdAt": "2020-07-09T23:28:05Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "diffHunk": "@@ -131,4 +134,35 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n     verify(dataStore).checkRegionDestroyedOnBucket(eq(bucketRegion), eq(true),\n         eq(regionDestroyedException));\n   }\n+\n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    RemoveAllPRMessage message =\n+        spy(new RemoveAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }\n+\n+    InOrder inOrder = inOrder(bucketRegion);\n+    inOrder.verify(bucketRegion).waitUntilLocked(keys);\n+    inOrder.verify(bucketRegion).lockRVVForBulkOp();\n+    inOrder.verify(bucketRegion).unlockRVVForBulkOp();", "originalCommit": "43cb2781e34b0b24f2628236256e13027f4b4e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NzY5MQ==", "url": "https://github.com/apache/geode/pull/5365#discussion_r452547691", "bodyText": "doLockForPrimary acts as the operation to save a lot of trouble of mocking. The test expects this exception to happen.", "author": "gesterzhou", "createdAt": "2020-07-09T23:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzQ4Mg=="}], "type": "inlineReview", "revised_code": null}]}