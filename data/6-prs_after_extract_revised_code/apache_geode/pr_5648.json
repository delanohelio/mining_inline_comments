{"pr_number": 5648, "pr_title": "GEODE-5782: Try to improve memory reporting stats for Windows", "pr_createdAt": "2020-10-21T16:52:01Z", "pr_url": "https://github.com/apache/geode/pull/5648", "timeline": [{"oid": "c7669962cfc52cf77cec4c37c73e4723062b446f", "url": "https://github.com/apache/geode/commit/c7669962cfc52cf77cec4c37c73e4723062b446f", "message": "GEODE-8752: Try to improve memory reporting stats for Windows\n\n- This change is specifically to see if things improve on Windows\n\nAuthored-by: Jens Deppe <jdeppe@vmware.com>", "committedDate": "2020-10-21T16:50:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0MTkwOQ==", "url": "https://github.com/apache/geode/pull/5648#discussion_r511141909", "bodyText": "I'm really reluctant to add gc() or runFinalization(). Why do you think these will fix flakiness in this test?", "author": "kirklund", "createdAt": "2020-10-23T20:32:12Z", "path": "geode-core/src/integrationTest/java/org/apache/geode/distributed/LauncherMemberMXBeanIntegrationTest.java", "diffHunk": "@@ -227,6 +227,8 @@ public void showJVMMetrics_returnsOJVMMetricsType()\n         if (cdsValue.equals(osMetricValue)) {\n           break;\n         }\n+        System.gc();\n+        System.runFinalization();", "originalCommit": "c7669962cfc52cf77cec4c37c73e4723062b446f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMTMwMw==", "url": "https://github.com/apache/geode/pull/5648#discussion_r512001303", "bodyText": "Yes, I'm probably on the wrong track here. The test flakiness is around reporting memory stats. Since the underlying (volatile) values are retrieved from VMStatsMonitor would it then be better to reduce the stat sampling period so that values are updated more frequently?", "author": "jdeppe-pivotal", "createdAt": "2020-10-26T14:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0MTkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0OTAxOQ==", "url": "https://github.com/apache/geode/pull/5648#discussion_r512149019", "bodyText": "or can you change the test to be more patient to see an expected value? Do you know how often these values are currently being updated?", "author": "dschneider-pivotal", "createdAt": "2020-10-26T17:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0MTkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0OTM1Ng==", "url": "https://github.com/apache/geode/pull/5648#discussion_r512349356", "bodyText": "If I understand the code correctly, I believe they are being updated via a StatsMonitor, so I presume no more frequently than statistic-sample-rate. The test could retrieve that setting and try for at least that amount of time.", "author": "jdeppe-pivotal", "createdAt": "2020-10-27T00:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0MTkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5886b5cdc3c480a8ea7ef682099bdafe18cde9e3", "chunk": "diff --git a/geode-core/src/integrationTest/java/org/apache/geode/distributed/LauncherMemberMXBeanIntegrationTest.java b/geode-core/src/integrationTest/java/org/apache/geode/distributed/LauncherMemberMXBeanIntegrationTest.java\nindex c8a2a041e9..5f68a14fd1 100755\n--- a/geode-core/src/integrationTest/java/org/apache/geode/distributed/LauncherMemberMXBeanIntegrationTest.java\n+++ b/geode-core/src/integrationTest/java/org/apache/geode/distributed/LauncherMemberMXBeanIntegrationTest.java\n\n@@ -168,72 +165,43 @@ public class LauncherMemberMXBeanIntegrationTest extends LauncherIntegrationTest\n     assertThat(jvmMetrics.getInitMemory()).isEqualTo(cds.get(\"initMemory\"));\n     assertThat(jvmMetrics.getMaxMemory()).isEqualTo(cds.get(\"maxMemory\"));\n \n-    assertThat(tryConvergeVolatileJVMMetrics(\"committedMemory\",\n-        m -> m.getCommittedMemory()))\n-            .matches(pair -> pair.getLeft().equals(pair.getRight()), \"committed memory\");\n-\n-    assertThat(tryConvergeVolatileJVMMetrics(\"gcCount\",\n-        m -> m.getGcCount()))\n-            .matches(pair -> pair.getLeft().equals(pair.getRight()), \"gc count\");\n+    tryConvergeVolatileJVMMetrics(\"committedMemory\", JVMMetrics::getCommittedMemory);\n \n-    assertThat(tryConvergeVolatileJVMMetrics(\"gcTimeMillis\",\n-        m -> m.getGcTimeMillis()))\n-            .matches(pair -> pair.getLeft().equals(pair.getRight()), \"gc time millis\");\n+    tryConvergeVolatileJVMMetrics(\"gcCount\", JVMMetrics::getGcCount);\n \n+    tryConvergeVolatileJVMMetrics(\"gcTimeMillis\", JVMMetrics::getGcTimeMillis);\n \n-    assertThat(tryConvergeVolatileJVMMetrics(\"totalThreads\",\n-        m -> m.getTotalThreads()))\n-            .matches(pair -> pair.getLeft().equals(pair.getRight()), \"total threads\");\n+    tryConvergeVolatileJVMMetrics(\"totalThreads\", JVMMetrics::getTotalThreads);\n \n-    assertThat(tryConvergeVolatileJVMMetrics(\"usedMemory\",\n-        m -> m.getUsedMemory()))\n-            .matches(pair -> pair.getLeft().equals(pair.getRight()), \"used memory\");\n+    tryConvergeVolatileJVMMetrics(\"usedMemory\", JVMMetrics::getUsedMemory);\n   }\n \n   /*\n    * Sometimes there is a change in metric value between getting the MBean proxy and retrieving\n    * the composite data structure. Try at most 5 times otherwise return the last values retrieved.\n    */\n-  private Pair<Number, Number> tryConvergeVolatileJVMMetrics(String attribute,\n-      Function<JVMMetrics, Number> func) {\n-    try {\n-      Number cdsValue = 0;\n-      Number jvmMetricValue = -1;\n-      for (int i = 0; i < 5; i++) {\n-        CompositeDataSupport cds = (CompositeDataSupport) getPlatformMBeanServer()\n-            .invoke(mbeanObjectName, \"showJVMMetrics\", null, null);\n-        cdsValue = (Number) cds.get(attribute);\n-        jvmMetricValue = func.apply(getMXBeanProxy().showJVMMetrics());\n-        if (cdsValue.equals(jvmMetricValue)) {\n-          break;\n-        }\n-      }\n-      return Pair.of(cdsValue, jvmMetricValue);\n-    } catch (Exception ex) {\n-      return null;\n-    }\n-  }\n-\n-  private Pair<Number, Number> tryConvergeVolatileOSMetrics(String attribute,\n-      Function<OSMetrics, Number> func) {\n-    try {\n-      Number cdsValue = 0;\n-      Number osMetricValue = -1;\n-      for (int i = 0; i < 5; i++) {\n-        CompositeDataSupport cds = (CompositeDataSupport) getPlatformMBeanServer()\n-            .invoke(mbeanObjectName, \"showOSMetrics\", null, null);\n-        cdsValue = (Number) cds.get(attribute);\n-        osMetricValue = func.apply(getMXBeanProxy().showOSMetrics());\n-        if (cdsValue.equals(osMetricValue)) {\n-          break;\n-        }\n-        System.gc();\n-        System.runFinalization();\n-      }\n-      return Pair.of(cdsValue, osMetricValue);\n-    } catch (Exception ex) {\n-      return null;\n-    }\n+  private void tryConvergeVolatileJVMMetrics(String attribute, Function<JVMMetrics, Number> func) {\n+    GeodeAwaitility.await(attribute).atMost(SAMPLE_RATE * 5, TimeUnit.MILLISECONDS)\n+        .untilAsserted(() -> {\n+          CompositeDataSupport cds = (CompositeDataSupport) getPlatformMBeanServer()\n+              .invoke(mbeanObjectName, \"showJVMMetrics\", null, null);\n+          Number cdsValue = (Number) cds.get(attribute);\n+          Number jvmMetricValue = func.apply(getMXBeanProxy().showJVMMetrics());\n+\n+          assertThat(cdsValue).isEqualTo(jvmMetricValue);\n+        });\n+  }\n+\n+  private void tryConvergeVolatileOSMetrics(String attribute, Function<OSMetrics, Number> func) {\n+    GeodeAwaitility.await(attribute).atMost(SAMPLE_RATE * 5, TimeUnit.MILLISECONDS)\n+        .untilAsserted(() -> {\n+          CompositeDataSupport cds = (CompositeDataSupport) getPlatformMBeanServer()\n+              .invoke(mbeanObjectName, \"showOSMetrics\", null, null);\n+          Number cdsValue = (Number) cds.get(attribute);\n+          Number osMetricValue = func.apply(getMXBeanProxy().showOSMetrics());\n+\n+          assertThat(cdsValue).isEqualTo(osMetricValue);\n+        });\n   }\n \n   private MemberMXBean getMXBeanProxy() {\n"}}, {"oid": "5886b5cdc3c480a8ea7ef682099bdafe18cde9e3", "url": "https://github.com/apache/geode/commit/5886b5cdc3c480a8ea7ef682099bdafe18cde9e3", "message": "Improve converging methods\n\n- In order to have a better chance to converge on values, reduce the\n  sample rate and await for at most 5 sample periods before failing.\n\nAuthored-by: Jens Deppe <jdeppe@vmware.com>", "committedDate": "2020-11-07T03:36:08Z", "type": "commit"}]}