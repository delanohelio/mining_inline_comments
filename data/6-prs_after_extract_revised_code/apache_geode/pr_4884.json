{"pr_number": 4884, "pr_title": "GEODE-7925: Add concurrency test to PubSubDUnitTest", "pr_createdAt": "2020-03-30T17:32:07Z", "pr_url": "https://github.com/apache/geode/pull/4884", "timeline": [{"oid": "0b79b7f18be5c8c340606395088c02b9e2f3b96c", "url": "https://github.com/apache/geode/commit/0b79b7f18be5c8c340606395088c02b9e2f3b96c", "message": "GEODE-7925: Add concurrency test to PubSubDUnitTest", "committedDate": "2020-03-30T17:31:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NzYwMA==", "url": "https://github.com/apache/geode/pull/4884#discussion_r400547600", "bodyText": "Are these truly internal properties? Maybe there Redis module has it's own set of public properties.", "author": "kohlmu-pivotal", "createdAt": "2020-03-30T23:07:37Z", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java", "diffHunk": "@@ -46,13 +49,13 @@\n   public static void beforeClass() {\n     ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n     Properties redisProps = new Properties();\n-    redisProps.put(\"redis-bind-address\", \"localhost\");\n+    redisProps.put(DistributionConfig.REDIS_BIND_ADDRESS_NAME, \"localhost\");", "originalCommit": "0b79b7f18be5c8c340606395088c02b9e2f3b96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkxODYwMw==", "url": "https://github.com/apache/geode/pull/4884#discussion_r400918603", "bodyText": "Well, they exist... There is currently no way, I'm aware of, for a module to expose its own set of parameters. It would be nice to add that.", "author": "jdeppe-pivotal", "createdAt": "2020-03-31T13:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NzYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MTQ4MA==", "url": "https://github.com/apache/geode/pull/4884#discussion_r401161480", "bodyText": "Firstly... the publicly accessible GemFire properties are under ConfigurationProperties... So adding them to an internal class is not really the answer.\nSecondly, maybe as a Geode \"extension\" we need to add the ability to be able to extend our public properties list dependent on the extension. If that model does not exist, maybe it is safer to possibly not add the properties to an internal class (which the extension arguably should not have access to)..", "author": "kohlmu-pivotal", "createdAt": "2020-03-31T19:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NzYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MTIyMw==", "url": "https://github.com/apache/geode/pull/4884#discussion_r401341223", "bodyText": "Switched to ConfiguratonProperties", "author": "jdeppe-pivotal", "createdAt": "2020-04-01T03:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NzYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "3375a95418632a4ec2369f43f1b31e411269ce71", "chunk": "diff --git a/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java b/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\nindex 76bc54547d..c55a96b107 100644\n--- a/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\n+++ b/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\n\n@@ -49,13 +56,13 @@ public class PubSubDUnitTest {\n   public static void beforeClass() {\n     ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n     Properties redisProps = new Properties();\n-    redisProps.put(DistributionConfig.REDIS_BIND_ADDRESS_NAME, \"localhost\");\n+    redisProps.put(ConfigurationProperties.REDIS_BIND_ADDRESS, \"localhost\");\n \n     MemberVM locator = cluster.startLocatorVM(0);\n \n-    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[0]));\n+    redisProps.put(ConfigurationProperties.REDIS_PORT, Integer.toString(ports[0]));\n     server1 = cluster.startServerVM(1, redisProps, locator.getPort());\n-    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[1]));\n+    redisProps.put(ConfigurationProperties.REDIS_PORT, Integer.toString(ports[1]));\n     server2 = cluster.startServerVM(2, redisProps, locator.getPort());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTQyMQ==", "url": "https://github.com/apache/geode/pull/4884#discussion_r400549421", "bodyText": "Why not have an ExecutorPool rather than a specific list of Threads...", "author": "kohlmu-pivotal", "createdAt": "2020-03-30T23:12:58Z", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java", "diffHunk": "@@ -88,4 +91,60 @@ public void testSubscribePublishUsingDifferentServers() throws Exception {\n     GeodeAwaitility.await().untilAsserted(subscriberThread2::join);\n   }\n \n+  @Test\n+  public void testConcurrentPubSub() throws Exception {\n+    Jedis subscriber1 = new Jedis(\"localhost\", ports[0]);\n+    Jedis subscriber2 = new Jedis(\"localhost\", ports[1]);\n+\n+    CountDownLatch latch = new CountDownLatch(2);\n+    MockSubscriber mockSubscriber1 = new MockSubscriber(latch);\n+    MockSubscriber mockSubscriber2 = new MockSubscriber(latch);\n+\n+    Runnable runnable1 = () -> subscriber1.subscribe(mockSubscriber1, CHANNEL_NAME);\n+    Thread subscriberThread1 = new Thread(runnable1);\n+    subscriberThread1.start();\n+\n+    Runnable runnable2 = () -> subscriber2.subscribe(mockSubscriber2, CHANNEL_NAME);\n+    Thread subscriberThread2 = new Thread(runnable2);\n+    subscriberThread2.start();\n+\n+    assertThat(latch.await(2, TimeUnit.SECONDS))\n+        .as(\"channel subscription was not received\")\n+        .isTrue();\n+\n+    int CLIENT_COUNT = 10;\n+    int ITERATIONS = 1000;\n+\n+    List<Jedis> clients = new ArrayList<>();\n+    List<Thread> threads = new ArrayList<>();", "originalCommit": "0b79b7f18be5c8c340606395088c02b9e2f3b96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkyMTQ4MQ==", "url": "https://github.com/apache/geode/pull/4884#discussion_r400921481", "bodyText": "No particular reason. Is there any advantage of one over the other in such a simple situation? I can change it.", "author": "jdeppe-pivotal", "createdAt": "2020-03-31T13:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NzI1MA==", "url": "https://github.com/apache/geode/pull/4884#discussion_r401167250", "bodyText": "So, in short, seeing such a raw implementation of thread management is not something that I think we need to have. ExecutorPools are geared at managing threads and their lifecycles. Whilst I agree that this is a \"simple\" situation, I also agree that it is far easier to just have a payload(s) assigned to the an ExecutorPool.\nMaybe not a gating factor.", "author": "kohlmu-pivotal", "createdAt": "2020-03-31T19:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MTMxOQ==", "url": "https://github.com/apache/geode/pull/4884#discussion_r401341319", "bodyText": "Switched to using ExecutorServiceRule", "author": "jdeppe-pivotal", "createdAt": "2020-04-01T03:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3375a95418632a4ec2369f43f1b31e411269ce71", "chunk": "diff --git a/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java b/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\nindex 76bc54547d..c55a96b107 100644\n--- a/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\n+++ b/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\n\n@@ -87,12 +91,15 @@ public class PubSubDUnitTest {\n     mockSubscriber1.unsubscribe(CHANNEL_NAME);\n     mockSubscriber2.unsubscribe(CHANNEL_NAME);\n \n-    GeodeAwaitility.await().untilAsserted(subscriberThread1::join);\n-    GeodeAwaitility.await().untilAsserted(subscriberThread2::join);\n+    GeodeAwaitility.await().untilAsserted(subscriber1Future::get);\n+    GeodeAwaitility.await().untilAsserted(subscriber2Future::get);\n   }\n \n   @Test\n   public void testConcurrentPubSub() throws Exception {\n+    int CLIENT_COUNT = 10;\n+    int ITERATIONS = 1000;\n+\n     Jedis subscriber1 = new Jedis(\"localhost\", ports[0]);\n     Jedis subscriber2 = new Jedis(\"localhost\", ports[1]);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MTE2Ng==", "url": "https://github.com/apache/geode/pull/4884#discussion_r400551166", "bodyText": "Are these truly internal properties? Maybe there Redis module has it's own set of public properties.", "author": "kohlmu-pivotal", "createdAt": "2020-03-30T23:18:07Z", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java", "diffHunk": "@@ -46,13 +49,13 @@\n   public static void beforeClass() {\n     ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n     Properties redisProps = new Properties();\n-    redisProps.put(\"redis-bind-address\", \"localhost\");\n+    redisProps.put(DistributionConfig.REDIS_BIND_ADDRESS_NAME, \"localhost\");\n \n     MemberVM locator = cluster.startLocatorVM(0);\n \n-    redisProps.put(\"redis-port\", Integer.toString(ports[0]));\n+    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[0]));", "originalCommit": "0b79b7f18be5c8c340606395088c02b9e2f3b96c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3375a95418632a4ec2369f43f1b31e411269ce71", "chunk": "diff --git a/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java b/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\nindex 76bc54547d..c55a96b107 100644\n--- a/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\n+++ b/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\n\n@@ -49,13 +56,13 @@ public class PubSubDUnitTest {\n   public static void beforeClass() {\n     ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n     Properties redisProps = new Properties();\n-    redisProps.put(DistributionConfig.REDIS_BIND_ADDRESS_NAME, \"localhost\");\n+    redisProps.put(ConfigurationProperties.REDIS_BIND_ADDRESS, \"localhost\");\n \n     MemberVM locator = cluster.startLocatorVM(0);\n \n-    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[0]));\n+    redisProps.put(ConfigurationProperties.REDIS_PORT, Integer.toString(ports[0]));\n     server1 = cluster.startServerVM(1, redisProps, locator.getPort());\n-    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[1]));\n+    redisProps.put(ConfigurationProperties.REDIS_PORT, Integer.toString(ports[1]));\n     server2 = cluster.startServerVM(2, redisProps, locator.getPort());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MTE3Mg==", "url": "https://github.com/apache/geode/pull/4884#discussion_r400551172", "bodyText": "Are these truly internal properties? Maybe there Redis module has it's own set of public properties.", "author": "kohlmu-pivotal", "createdAt": "2020-03-30T23:18:08Z", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java", "diffHunk": "@@ -46,13 +49,13 @@\n   public static void beforeClass() {\n     ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n     Properties redisProps = new Properties();\n-    redisProps.put(\"redis-bind-address\", \"localhost\");\n+    redisProps.put(DistributionConfig.REDIS_BIND_ADDRESS_NAME, \"localhost\");\n \n     MemberVM locator = cluster.startLocatorVM(0);\n \n-    redisProps.put(\"redis-port\", Integer.toString(ports[0]));\n+    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[0]));\n     server1 = cluster.startServerVM(1, redisProps, locator.getPort());\n-    redisProps.put(\"redis-port\", Integer.toString(ports[1]));\n+    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[1]));", "originalCommit": "0b79b7f18be5c8c340606395088c02b9e2f3b96c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3375a95418632a4ec2369f43f1b31e411269ce71", "chunk": "diff --git a/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java b/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\nindex 76bc54547d..c55a96b107 100644\n--- a/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\n+++ b/geode-redis/src/distributedTest/java/org/apache/geode/redis/PubSubDUnitTest.java\n\n@@ -49,13 +56,13 @@ public class PubSubDUnitTest {\n   public static void beforeClass() {\n     ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n     Properties redisProps = new Properties();\n-    redisProps.put(DistributionConfig.REDIS_BIND_ADDRESS_NAME, \"localhost\");\n+    redisProps.put(ConfigurationProperties.REDIS_BIND_ADDRESS, \"localhost\");\n \n     MemberVM locator = cluster.startLocatorVM(0);\n \n-    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[0]));\n+    redisProps.put(ConfigurationProperties.REDIS_PORT, Integer.toString(ports[0]));\n     server1 = cluster.startServerVM(1, redisProps, locator.getPort());\n-    redisProps.put(DistributionConfig.REDIS_PORT_NAME, Integer.toString(ports[1]));\n+    redisProps.put(ConfigurationProperties.REDIS_PORT, Integer.toString(ports[1]));\n     server2 = cluster.startServerVM(2, redisProps, locator.getPort());\n   }\n \n"}}, {"oid": "3375a95418632a4ec2369f43f1b31e411269ce71", "url": "https://github.com/apache/geode/commit/3375a95418632a4ec2369f43f1b31e411269ce71", "message": "Addressing review comments\n\n- Use ConfigurationProperties instead of DistributionConfig constants\n- Switch to using an ExecutorServiceRule instead of raw threads\n\nAuthored-by: Jens Deppe <jdeppe@vmware.com>", "committedDate": "2020-04-01T03:49:42Z", "type": "commit"}]}