{"pr_number": 5722, "pr_title": "GEODE-8692: ArrayIndexOutOfBoundsException may be thrown in RegionAdvisor.processProfilesQueuedDuringInitialization", "pr_createdAt": "2020-11-09T18:38:19Z", "pr_url": "https://github.com/apache/geode/pull/5722", "timeline": [{"oid": "0cbea139a1d6f1e532b9cb31c6ff73ff34fe8c53", "url": "https://github.com/apache/geode/commit/0cbea139a1d6f1e532b9cb31c6ff73ff34fe8c53", "message": "GEODE-8692: ArrayIndexOutOfBoundsException may be thrown in RegionAdvisor.processProfilesQueuedDuringInitialization", "committedDate": "2020-11-09T17:10:02Z", "type": "commit"}, {"oid": "318605fce1a7e71791ecedcce7aa7b87dd727f83", "url": "https://github.com/apache/geode/commit/318605fce1a7e71791ecedcce7aa7b87dd727f83", "message": "Add unit tests", "committedDate": "2020-11-10T16:07:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjIyNw==", "url": "https://github.com/apache/geode/pull/5722#discussion_r520736227", "bodyText": "Could this hardcoded 3 be replaced with serials.length to ensure that the test doesn't fail if someone modifies the size of serials?", "author": "DonalEvans", "createdAt": "2020-11-10T17:21:28Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.partitioned;\n+\n+import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.PartitionAttributes;\n+import org.apache.geode.cache.RegionAttributes;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.BucketAdvisor;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.ProxyBucketRegion;\n+\n+public class RegionAdvisorJUnitTest {\n+\n+  private PartitionedRegion partitionedRegion;\n+  private RegionAdvisor regionAdvisor;\n+  private final int[] serials = new int[] {ILLEGAL_SERIAL, ILLEGAL_SERIAL, ILLEGAL_SERIAL};\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    partitionedRegion = mock(PartitionedRegion.class);\n+    regionAdvisor = new RegionAdvisor(partitionedRegion);\n+  }\n+\n+  @Test\n+  public void getBucketSerials_shouldReturnAnArrayOfIllegalSerials_whenBucketsAreNull() {\n+    RegionAttributes regionAttributes = mock(RegionAttributes.class);\n+    PartitionAttributes partitionAttributes = mock(PartitionAttributes.class);\n+    when(partitionedRegion.getAttributes()).thenReturn(regionAttributes);\n+    when(regionAttributes.getPartitionAttributes()).thenReturn(partitionAttributes);\n+    when(partitionAttributes.getTotalNumBuckets()).thenReturn(3);", "originalCommit": "318605fce1a7e71791ecedcce7aa7b87dd727f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNjM3Ng==", "url": "https://github.com/apache/geode/pull/5722#discussion_r520816376", "bodyText": "Definitely. Good call!", "author": "sabbey37", "createdAt": "2020-11-10T19:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a66e08e7325856410796c3032b68a2c04e23b5c5", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\nindex b9adbf6a54..fa8d004c61 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\n\n@@ -17,7 +17,11 @@ package org.apache.geode.internal.cache.partitioned;\n import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import org.junit.Before;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0MjE4Ng==", "url": "https://github.com/apache/geode/pull/5722#discussion_r520742186", "bodyText": "Two of the variable names in this test, qbp and pbr could be a bit more descriptive. I don't think there's anything wrong with long variable names, providing it's providing extra clarity.", "author": "DonalEvans", "createdAt": "2020-11-10T17:30:03Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.partitioned;\n+\n+import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.PartitionAttributes;\n+import org.apache.geode.cache.RegionAttributes;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.BucketAdvisor;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.ProxyBucketRegion;\n+\n+public class RegionAdvisorJUnitTest {\n+\n+  private PartitionedRegion partitionedRegion;\n+  private RegionAdvisor regionAdvisor;\n+  private final int[] serials = new int[] {ILLEGAL_SERIAL, ILLEGAL_SERIAL, ILLEGAL_SERIAL};\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    partitionedRegion = mock(PartitionedRegion.class);\n+    regionAdvisor = new RegionAdvisor(partitionedRegion);\n+  }\n+\n+  @Test\n+  public void getBucketSerials_shouldReturnAnArrayOfIllegalSerials_whenBucketsAreNull() {\n+    RegionAttributes regionAttributes = mock(RegionAttributes.class);\n+    PartitionAttributes partitionAttributes = mock(PartitionAttributes.class);\n+    when(partitionedRegion.getAttributes()).thenReturn(regionAttributes);\n+    when(regionAttributes.getPartitionAttributes()).thenReturn(partitionAttributes);\n+    when(partitionAttributes.getTotalNumBuckets()).thenReturn(3);\n+\n+    assertThat(regionAdvisor.getBucketSerials()).containsExactly(serials);\n+  }\n+\n+  @Test\n+  public void processProfilesQueuedDuringInitialization_shouldNotThrowIndexOutOfBoundsException() {", "originalCommit": "318605fce1a7e71791ecedcce7aa7b87dd727f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNjk2MA==", "url": "https://github.com/apache/geode/pull/5722#discussion_r520816960", "bodyText": "Sounds good!", "author": "sabbey37", "createdAt": "2020-11-10T19:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0MjE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a66e08e7325856410796c3032b68a2c04e23b5c5", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\nindex b9adbf6a54..fa8d004c61 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\n\n@@ -17,7 +17,11 @@ package org.apache.geode.internal.cache.partitioned;\n import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import org.junit.Before;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTczNQ==", "url": "https://github.com/apache/geode/pull/5722#discussion_r520769735", "bodyText": "Might it be worth adding a check to verify that ProxyBucketRegion.removeIdWithSerial() is never called for the contents of regionAdvisor.buckets since the serial is always ILLEGAL_SERIAL? Or would that be outside the scope of this test?", "author": "DonalEvans", "createdAt": "2020-11-10T18:13:24Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.partitioned;\n+\n+import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.PartitionAttributes;\n+import org.apache.geode.cache.RegionAttributes;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.BucketAdvisor;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.ProxyBucketRegion;\n+\n+public class RegionAdvisorJUnitTest {\n+\n+  private PartitionedRegion partitionedRegion;\n+  private RegionAdvisor regionAdvisor;\n+  private final int[] serials = new int[] {ILLEGAL_SERIAL, ILLEGAL_SERIAL, ILLEGAL_SERIAL};\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    partitionedRegion = mock(PartitionedRegion.class);\n+    regionAdvisor = new RegionAdvisor(partitionedRegion);\n+  }\n+\n+  @Test\n+  public void getBucketSerials_shouldReturnAnArrayOfIllegalSerials_whenBucketsAreNull() {\n+    RegionAttributes regionAttributes = mock(RegionAttributes.class);\n+    PartitionAttributes partitionAttributes = mock(PartitionAttributes.class);\n+    when(partitionedRegion.getAttributes()).thenReturn(regionAttributes);\n+    when(regionAttributes.getPartitionAttributes()).thenReturn(partitionAttributes);\n+    when(partitionAttributes.getTotalNumBuckets()).thenReturn(3);\n+\n+    assertThat(regionAdvisor.getBucketSerials()).containsExactly(serials);\n+  }\n+\n+  @Test\n+  public void processProfilesQueuedDuringInitialization_shouldNotThrowIndexOutOfBoundsException() {\n+    RegionAdvisor.QueuedBucketProfile qbp =\n+        new RegionAdvisor.QueuedBucketProfile(mock(InternalDistributedMember.class), serials, true);\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(regionAdvisor.getDistributionManager()).thenReturn(distributionManager);\n+    when(distributionManager.isCurrentMember(any())).thenReturn(true);\n+    regionAdvisor.preInitQueue.add(qbp);\n+\n+    ProxyBucketRegion pbr = mock(ProxyBucketRegion.class);\n+    when(pbr.getBucketAdvisor()).thenReturn(mock(BucketAdvisor.class));\n+    regionAdvisor.buckets = new ProxyBucketRegion[] {pbr, pbr, pbr};\n+\n+    regionAdvisor.processProfilesQueuedDuringInitialization();", "originalCommit": "318605fce1a7e71791ecedcce7aa7b87dd727f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3NjgwNg==", "url": "https://github.com/apache/geode/pull/5722#discussion_r520876806", "bodyText": "It definitely couldn't hurt to add it.  I feel like this test needs something more, but I'm not sure what.  The intent was mainly to show that processProfilesQueuedDuringInitialization() wouldn't result in an ArrayIndexOutOfBoundsException when given the serials that would be returned if buckets were null when getBucketSerials() is called.  What do you think?", "author": "sabbey37", "createdAt": "2020-11-10T21:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODE0Mg==", "url": "https://github.com/apache/geode/pull/5722#discussion_r520928142", "bodyText": "I think that just showing there's no ArrayIndexOutOfBoundsException is probably a bit weak, since we're explicitly setting the contents of both arrays in the test, so we know that exception isn't possible here. Asserting that the method is behaving as expected for the given conditions (not calling removeIdWithSerial() for buckets that correspond to an ILLEGAL_SERIAL value) would make for a more meaningful test.", "author": "DonalEvans", "createdAt": "2020-11-10T22:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0OTEzMw==", "url": "https://github.com/apache/geode/pull/5722#discussion_r521449133", "bodyText": "I just added that verification!", "author": "sabbey37", "createdAt": "2020-11-11T15:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a66e08e7325856410796c3032b68a2c04e23b5c5", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\nindex b9adbf6a54..fa8d004c61 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java\n\n@@ -17,7 +17,11 @@ package org.apache.geode.internal.cache.partitioned;\n import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import org.junit.Before;\n"}}, {"oid": "a66e08e7325856410796c3032b68a2c04e23b5c5", "url": "https://github.com/apache/geode/commit/a66e08e7325856410796c3032b68a2c04e23b5c5", "message": "PR review changes", "committedDate": "2020-11-11T15:43:33Z", "type": "commit"}]}