{"pr_number": 4618, "pr_title": "GEODE-7663: Fix delta update inconsistency in client cache.", "pr_createdAt": "2020-01-22T19:12:10Z", "pr_url": "https://github.com/apache/geode/pull/4618", "timeline": [{"oid": "0f60172ddcb427af471a062a560631e9110b6069", "url": "https://github.com/apache/geode/commit/0f60172ddcb427af471a062a560631e9110b6069", "message": "GEODE-7663: Fix delta update inconsistency in client cache.\n\n * When performing delta update on client, there is a possibility that\n   some delta update is not yet applied on client cache.\n * If apply delta update, some queued delta update would be lost -- as\n   entry versioning will discard these delta updates when received later.\n * Now it will check if there is a versioning mismatch, if it happened,\n   the full value from server will be applied instead of just the delta.", "committedDate": "2020-01-22T19:02:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NTcxNQ==", "url": "https://github.com/apache/geode/pull/4618#discussion_r370265715", "bodyText": "I think this method can be entirely removed now that there is an event field in the test, and calls to it can be replaced with usages of the field.", "author": "DonalEvans", "createdAt": "2020-01-23T17:51:16Z", "path": "geode-core/src/test/java/org/apache/geode/cache/client/internal/PutOpJUnitTest.java", "diffHunk": "@@ -16,19 +16,38 @@\n \n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n+import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.Mockito;\n \n import org.apache.geode.cache.Operation;\n import org.apache.geode.internal.cache.EntryEventImpl;\n import org.apache.geode.internal.cache.EventID;\n+import org.apache.geode.internal.cache.RegionEntry;\n+import org.apache.geode.internal.cache.versions.VersionStamp;\n+import org.apache.geode.internal.cache.versions.VersionTag;\n \n public class PutOpJUnitTest {\n+  private final EntryEventImpl event = mock(EntryEventImpl.class);\n+  private final VersionTag versionTag = mock(VersionTag.class);\n+  private final RegionEntry entry = mock(RegionEntry.class);\n+  private final VersionStamp versionStamp = mock(VersionStamp.class);\n+  private final Connection connection = mock(Connection.class);\n+\n+  @Before\n+  public void setup() {\n+    when(event.getEventId()).thenReturn(new EventID());\n+    when(entry.getVersionStamp()).thenReturn(versionStamp);\n+  }\n \n   private EntryEventImpl getEntryEvent() {\n-    EntryEventImpl entryEvent = Mockito.mock(EntryEventImpl.class);\n-    Mockito.when(entryEvent.getEventId()).thenReturn(new EventID());\n+    EntryEventImpl entryEvent = mock(EntryEventImpl.class);\n+    when(entryEvent.getEventId()).thenReturn(new EventID());\n     return entryEvent;\n   }", "originalCommit": "0f60172ddcb427af471a062a560631e9110b6069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzNDkzNA==", "url": "https://github.com/apache/geode/pull/4618#discussion_r370434934", "bodyText": "Done", "author": "pivotal-eshu", "createdAt": "2020-01-24T01:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "eedf5edaef9e8bc6e4f5224091979501e40acd52", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/cache/client/internal/PutOpJUnitTest.java b/geode-core/src/test/java/org/apache/geode/cache/client/internal/PutOpJUnitTest.java\nindex 92c28fd251..50f7b520e3 100644\n--- a/geode-core/src/test/java/org/apache/geode/cache/client/internal/PutOpJUnitTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/cache/client/internal/PutOpJUnitTest.java\n\n@@ -45,17 +45,10 @@ public class PutOpJUnitTest {\n     when(entry.getVersionStamp()).thenReturn(versionStamp);\n   }\n \n-  private EntryEventImpl getEntryEvent() {\n-    EntryEventImpl entryEvent = mock(EntryEventImpl.class);\n-    when(entryEvent.getEventId()).thenReturn(new EventID());\n-    return entryEvent;\n-  }\n-\n   @Test\n   public void regularDeltaPutShouldNotRetryFlagInMessage() {\n     PutOp.PutOpImpl putOp = new PutOp.PutOpImpl(\"testRegion\", \"testKey\", \"testValue\", new byte[10],\n-        getEntryEvent(), Operation.UPDATE,\n-        false, false, null, false, false);\n+        event, Operation.UPDATE, false, false, null, false, false);\n     assertFalse(putOp.getMessage().isRetry());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyODU1Mw==", "url": "https://github.com/apache/geode/pull/4618#discussion_r370428553", "bodyText": "It should be \">\" not \"!=\", in the case of \"<\", you should not call the get.", "author": "gesterzhou", "createdAt": "2020-01-24T00:45:28Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/PutOp.java", "diffHunk": "@@ -299,13 +300,39 @@ protected Object processResponse(Message msg, Connection con) throws Exception {\n           VersionTag tag = (VersionTag) msg.getPart(partIdx).getObject();\n           // we use the client's ID since we apparently don't track the server's ID in connections\n           tag.replaceNullIDs((InternalDistributedMember) con.getEndpoint().getMemberId());\n-          event.setVersionTag(tag);\n+          checkForDeltaConflictAndSetVersionTag(tag, con);\n         }\n         return oldValue;\n       }\n       return null;\n     }\n \n+    void checkForDeltaConflictAndSetVersionTag(VersionTag versionTag, Connection connection)\n+        throws Exception {\n+      RegionEntry regionEntry = ((EntryEventImpl) event).getRegionEntry();\n+      if (regionEntry == null) {\n+        event.setVersionTag(versionTag);\n+        return;\n+      }\n+      VersionStamp versionStamp = regionEntry.getVersionStamp();\n+      if (deltaSent && versionTag.getEntryVersion() != versionStamp.getEntryVersion() + 1) {", "originalCommit": "0f60172ddcb427af471a062a560631e9110b6069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMDc2MA==", "url": "https://github.com/apache/geode/pull/4618#discussion_r370430760", "bodyText": "I am not sure if client delta put will generate region version less than current local cache version. However, use \">\" might be more clear in this case.", "author": "pivotal-eshu", "createdAt": "2020-01-24T00:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyODU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "eedf5edaef9e8bc6e4f5224091979501e40acd52", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/cache/client/internal/PutOp.java b/geode-core/src/main/java/org/apache/geode/cache/client/internal/PutOp.java\nindex baf59f4440..6d8ba97091 100644\n--- a/geode-core/src/main/java/org/apache/geode/cache/client/internal/PutOp.java\n+++ b/geode-core/src/main/java/org/apache/geode/cache/client/internal/PutOp.java\n\n@@ -315,7 +315,7 @@ public class PutOp {\n         return;\n       }\n       VersionStamp versionStamp = regionEntry.getVersionStamp();\n-      if (deltaSent && versionTag.getEntryVersion() != versionStamp.getEntryVersion() + 1) {\n+      if (deltaSent && versionTag.getEntryVersion() > versionStamp.getEntryVersion() + 1) {\n         // Delta can't be applied, need to get full value.\n         if (logger.isDebugEnabled()) {\n           logger.debug(\"Version is out of order. Need to get from server to perform delta update.\");\n"}}, {"oid": "eedf5edaef9e8bc6e4f5224091979501e40acd52", "url": "https://github.com/apache/geode/commit/eedf5edaef9e8bc6e4f5224091979501e40acd52", "message": "fix review comments.", "committedDate": "2020-01-24T01:11:50Z", "type": "commit"}]}