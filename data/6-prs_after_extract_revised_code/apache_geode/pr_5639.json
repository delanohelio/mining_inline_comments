{"pr_number": 5639, "pr_title": "GEODE-8627: Redis not unsubscribing and punsubscribing correctly when no channel/pattern provided", "pr_createdAt": "2020-10-19T05:26:07Z", "pr_url": "https://github.com/apache/geode/pull/5639", "timeline": [{"oid": "0381f7e165a8fd0de2d25b5ad7e2780be10c9408", "url": "https://github.com/apache/geode/commit/0381f7e165a8fd0de2d25b5ad7e2780be10c9408", "message": "GEODE-8627: Redis not unsubscribing and punsubscribing correctly when no channel/pattern provided", "committedDate": "2020-10-19T05:24:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ3NDUxNg==", "url": "https://github.com/apache/geode/pull/5639#discussion_r507474516", "bodyText": "It might make sense to move these tests to AbstractPubSubIntegrationTest.java once 8577 is resolved.", "author": "sabbey37", "createdAt": "2020-10-19T05:28:13Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractSubscriptionsIntegrationTest.java", "diffHunk": "@@ -88,18 +111,91 @@ public void multiSubscribe() {\n         .untilAsserted(() -> assertThat(mockSubscriber.getReceivedPMessages()).hasSize(1));\n     assertThat(mockSubscriber.getReceivedEvents()).containsExactly(\"message\", \"pmessage\");\n     mockSubscriber.unsubscribe();\n-    client.close();\n   }\n \n   @Test\n-  public void unallowedCommandsWhileSubscribed() {\n-    Jedis client = new Jedis(\"localhost\", getPort());\n+  public void unsubscribingImplicitlyFromAllChannels_doesNotUnsubscribeFromPatterns() {", "originalCommit": "0381f7e165a8fd0de2d25b5ad7e2780be10c9408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5MzA3Mw==", "url": "https://github.com/apache/geode/pull/5639#discussion_r507793073", "bodyText": "Do we not already have similar tests in AbstractPubSubIntegrationTest? Perhaps testUnsubscribingImplicitlyFromAllChannels and testPunsubscribingImplicitlyFromAllChannels", "author": "jdeppe-pivotal", "createdAt": "2020-10-19T14:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ3NDUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NDk4Ng==", "url": "https://github.com/apache/geode/pull/5639#discussion_r507884986", "bodyText": "We do have a test that only subscribes to channels and then unsubscribes without an argument. We did not have a test that subscribes to channels and psubscribes to patterns, then unsubscribes without an argument (or punsubscribes without an argument).  We were incorrectly unsubscribing from everything (channels and patterns) when punsubscribe or unsubscribe were called without an argument.  Native Redis will only unsubscribe from channels (not patterns) if unsubscribe is called without an argument or punsubscribe only from patterns (not channels) if punsubscribe is called without an argument.", "author": "sabbey37", "createdAt": "2020-10-19T16:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ3NDUxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4ODM0OQ==", "url": "https://github.com/apache/geode/pull/5639#discussion_r507788349", "bodyText": "I can see that you want the method name to be more expressive, but I don't think it's good practice to have an API where some methods return null depending on what type of object you're using. That opens the door for a dev to easily make a mistake. I'd prefer to keep a single method but give it a more descriptive name. Perhaps getSubscriptionName() or getChannelOrPattern().", "author": "jdeppe-pivotal", "createdAt": "2020-10-19T14:20:03Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/Subscription.java", "diffHunk": "@@ -53,11 +53,15 @@ void publishMessage(byte[] channel, byte[] message,\n   List<Object> createResponse(byte[] channel, byte[] message);\n \n   /**\n-   * Return the subscription name. In the case of a pattern the string representation of the\n-   * pattern is returned.\n+   * Return the channel name. In the case of a pattern null is returned.\n    */\n   byte[] getChannelName();\n \n+  /**\n+   * Return the pattern name. In the case of a channel null is returned.\n+   */\n+  byte[] getPatternName();", "originalCommit": "0381f7e165a8fd0de2d25b5ad7e2780be10c9408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NjA1OA==", "url": "https://github.com/apache/geode/pull/5639#discussion_r507886058", "bodyText": "I'm definitely open to suggestions on this.  The main reason this method was created and the getChannelName() method was changed was to unsubscribe from only channels or only patterns as appropriate.  We could always distinguish a channel from a pattern in other ways.  What do you think is best?", "author": "sabbey37", "createdAt": "2020-10-19T16:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4ODM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3NzU4MQ==", "url": "https://github.com/apache/geode/pull/5639#discussion_r507977581", "bodyText": "I see what the problem is now. I think it would be better to provide a Type enum into the Subscription interface:\n  enum Type {\n    CHANNEL,\n    PATTERN;\n  }\n\n  Type getType();\n\nAnd then you should be able to filter by that when you need to have methods distinguish the type of subscription.\nIn the PubSub interface you can add:\nList<byte[]> findSubscribedChannels(Client client, Subscription.Type type);", "author": "jdeppe-pivotal", "createdAt": "2020-10-19T18:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4ODM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyMjkyOA==", "url": "https://github.com/apache/geode/pull/5639#discussion_r508522928", "bodyText": "Good idea, I just pushed a change. Let me know what you think!", "author": "sabbey37", "createdAt": "2020-10-20T13:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4ODM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d6fef77e15efddc367d333d1aeac2be4aee2749d", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/Subscription.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/Subscription.java\nindex 0c9831a352..14d38c8a9d 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/Subscription.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/Subscription.java\n\n@@ -53,14 +60,9 @@ public interface Subscription {\n   List<Object> createResponse(byte[] channel, byte[] message);\n \n   /**\n-   * Return the channel name. In the case of a pattern null is returned.\n-   */\n-  byte[] getChannelName();\n-\n-  /**\n-   * Return the pattern name. In the case of a channel null is returned.\n+   * Return the channel or pattern name.\n    */\n-  byte[] getPatternName();\n+  byte[] getSubscriptionName();\n \n   /**\n    * Called once this subscriber is ready to have publishMessage called\n"}}, {"oid": "d6fef77e15efddc367d333d1aeac2be4aee2749d", "url": "https://github.com/apache/geode/commit/d6fef77e15efddc367d333d1aeac2be4aee2749d", "message": "review changes", "committedDate": "2020-10-20T13:51:34Z", "type": "commit"}, {"oid": "4f1aa9b8fa0dd92890f8ce0d43a32f66f13da18e", "url": "https://github.com/apache/geode/commit/4f1aa9b8fa0dd92890f8ce0d43a32f66f13da18e", "message": "Correct serializables", "committedDate": "2020-10-20T14:34:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MDc3Mw==", "url": "https://github.com/apache/geode/pull/5639#discussion_r508840773", "bodyText": "Only if you need to push another change: I think this should be findSubscriptionNames and the double ; at the end of the line. No biggy.", "author": "jdeppe-pivotal", "createdAt": "2020-10-20T21:08:45Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSub.java", "diffHunk": "@@ -81,19 +81,19 @@ long publish(\n   long punsubscribe(GlobPattern pattern, Client client);\n \n   /**\n-   * Return a list of channel names that a client has subscribed to\n+   * Return a list of channel names or patterns that a client has subscribed to\n    *\n    * @param client the Client which is to be queried\n-   * @return the list of channels\n+   * @return the list of channels or patterns\n    */\n-  List<byte[]> findSubscribedChannels(Client client);\n+  List<byte[]> findSubscriptionsNames(Client client, Subscription.Type type);\n \n   /**\n-   * Return a list of pattern names that a client has subscribed to\n+   * Return a list of channel names and patterns that a client has subscribed to\n    *\n    * @param client the Client which is to be queried\n-   * @return the list of patterns\n+   * @return the list of channels and patterns\n    */\n-  List<byte[]> findSubscribedPatterns(Client client);\n+  List<byte[]> findSubscriptionsNames(Client client);;", "originalCommit": "d6fef77e15efddc367d333d1aeac2be4aee2749d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4ODQxNQ==", "url": "https://github.com/apache/geode/pull/5639#discussion_r509288415", "bodyText": "Yes!  Thank you for pointing this out!", "author": "sabbey37", "createdAt": "2020-10-21T13:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MDc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1fddadabea7fd2e56901e2f0354973fc1e1921ea", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSub.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSub.java\nindex 066a805b2c..86f1532b73 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSub.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSub.java\n\n@@ -86,7 +86,7 @@ public interface PubSub {\n    * @param client the Client which is to be queried\n    * @return the list of channels or patterns\n    */\n-  List<byte[]> findSubscriptionsNames(Client client, Subscription.Type type);\n+  List<byte[]> findSubscriptionNames(Client client, Subscription.Type type);\n \n   /**\n    * Return a list of channel names and patterns that a client has subscribed to\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MTkyOA==", "url": "https://github.com/apache/geode/pull/5639#discussion_r508841928", "bodyText": "Also no biggy, but for enum equality it's slightly better to use == since it's also null safe. Under the covers the JDK ends up doing == in any case.", "author": "jdeppe-pivotal", "createdAt": "2020-10-20T21:10:58Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSubImpl.java", "diffHunk": "@@ -140,18 +139,17 @@ public long punsubscribe(GlobPattern pattern, Client client) {\n   }\n \n   @Override\n-  public List<byte[]> findSubscribedChannels(Client client) {\n+  public List<byte[]> findSubscriptionsNames(Client client) {\n     return subscriptions.findSubscriptions(client).stream()\n-        .map(Subscription::getChannelName)\n-        .filter(Objects::nonNull)\n+        .map(Subscription::getSubscriptionName)\n         .collect(Collectors.toList());\n   }\n \n   @Override\n-  public List<byte[]> findSubscribedPatterns(Client client) {\n+  public List<byte[]> findSubscriptionsNames(Client client, Subscription.Type type) {\n     return subscriptions.findSubscriptions(client).stream()\n-        .map(Subscription::getPatternName)\n-        .filter(Objects::nonNull)\n+        .filter(s -> s.getType().equals(type))", "originalCommit": "d6fef77e15efddc367d333d1aeac2be4aee2749d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4ODk4Mw==", "url": "https://github.com/apache/geode/pull/5639#discussion_r509288983", "bodyText": "Good to know! I'll update it.", "author": "sabbey37", "createdAt": "2020-10-21T13:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MTkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "1fddadabea7fd2e56901e2f0354973fc1e1921ea", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSubImpl.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSubImpl.java\nindex b5e4a8807c..0ce538b9b0 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSubImpl.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/pubsub/PubSubImpl.java\n\n@@ -139,16 +139,16 @@ public class PubSubImpl implements PubSub {\n   }\n \n   @Override\n-  public List<byte[]> findSubscriptionsNames(Client client) {\n+  public List<byte[]> findSubscriptionNames(Client client) {\n     return subscriptions.findSubscriptions(client).stream()\n         .map(Subscription::getSubscriptionName)\n         .collect(Collectors.toList());\n   }\n \n   @Override\n-  public List<byte[]> findSubscriptionsNames(Client client, Subscription.Type type) {\n+  public List<byte[]> findSubscriptionNames(Client client, Subscription.Type type) {\n     return subscriptions.findSubscriptions(client).stream()\n-        .filter(s -> s.getType().equals(type))\n+        .filter(s -> s.getType() == (type))\n         .map(Subscription::getSubscriptionName)\n         .collect(Collectors.toList());\n   }\n"}}, {"oid": "1fddadabea7fd2e56901e2f0354973fc1e1921ea", "url": "https://github.com/apache/geode/commit/1fddadabea7fd2e56901e2f0354973fc1e1921ea", "message": "Review edits", "committedDate": "2020-10-21T13:38:22Z", "type": "commit"}]}