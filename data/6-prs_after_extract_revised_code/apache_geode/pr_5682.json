{"pr_number": 5682, "pr_title": "GEODE-8668: Implement Redis SELECT command", "pr_createdAt": "2020-10-28T15:20:26Z", "pr_url": "https://github.com/apache/geode/pull/5682", "timeline": [{"oid": "d691af73f93f201de5280dd880915fbb11d19dc8", "url": "https://github.com/apache/geode/commit/d691af73f93f201de5280dd880915fbb11d19dc8", "message": "GEODE-8668: Implement cluster mode version of Redis SELECT command", "committedDate": "2020-10-28T15:10:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI1OTAyNQ==", "url": "https://github.com/apache/geode/pull/5682#discussion_r514259025", "bodyText": "No need to do this here since the super class handles the client setup.", "author": "jdeppe-pivotal", "createdAt": "2020-10-29T13:30:53Z", "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/internal/executor/connection/SelectNativeRedisAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.executor.connection;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.rules.TestRule;\n+import org.testcontainers.containers.GenericContainer;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class SelectNativeRedisAcceptanceTest extends AbstractSelectIntegrationTest {\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  private GenericContainer<?> redisContainer;\n+\n+  @Before\n+  public void setUp() {\n+    // starting redis in cluster mode\n+    redisContainer =\n+        new GenericContainer<>(\"grokzen/redis-cluster:5.0.9\")\n+            .withExposedPorts(7000)\n+            .withEnv(\"IP\", \"0.0.0.0\");\n+\n+    redisContainer.start();\n+    jedis = new Jedis(\"localhost\", getPort(), REDIS_CLIENT_TIMEOUT);", "originalCommit": "d691af73f93f201de5280dd880915fbb11d19dc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4ODI2NA==", "url": "https://github.com/apache/geode/pull/5682#discussion_r514288264", "bodyText": "Good point. I just changed it to a class level method for setup and teardown of the Redis container so it didn't start a new container before each test.", "author": "sabbey37", "createdAt": "2020-10-29T14:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI1OTAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd58a8287fada51013a14c8669471ec348d8c3c9", "chunk": "diff --git a/geode-redis/src/acceptanceTest/java/org/apache/geode/redis/internal/executor/connection/SelectNativeRedisAcceptanceTest.java b/geode-redis/src/acceptanceTest/java/org/apache/geode/redis/internal/executor/connection/SelectNativeRedisAcceptanceTest.java\nindex bf921f6180..d7ec76909b 100644\n--- a/geode-redis/src/acceptanceTest/java/org/apache/geode/redis/internal/executor/connection/SelectNativeRedisAcceptanceTest.java\n+++ b/geode-redis/src/acceptanceTest/java/org/apache/geode/redis/internal/executor/connection/SelectNativeRedisAcceptanceTest.java\n\n@@ -16,12 +16,11 @@\n \n package org.apache.geode.redis.internal.executor.connection;\n \n-import org.junit.After;\n-import org.junit.Before;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.ClassRule;\n import org.junit.rules.TestRule;\n import org.testcontainers.containers.GenericContainer;\n-import redis.clients.jedis.Jedis;\n \n import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MjMxMQ==", "url": "https://github.com/apache/geode/pull/5682#discussion_r514262311", "bodyText": "I'm afraid that this error will be a bit misleading since it mentions cluster mode. I think the invalid DB index is better and we should document the limitation of only supporting DB 0. I do realize that this is a bit inconsistent with how native redis reports things.", "author": "jdeppe-pivotal", "createdAt": "2020-10-29T13:35:37Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisConstants.java", "diffHunk": "@@ -30,6 +30,8 @@\n   public static final String SERVER_ERROR_MESSAGE =\n       \"The server had an internal error please try again\";\n   public static final String SERVER_ERROR_SHUTDOWN = \"The server is shutting down\";\n+  public static final String ERROR_SELECT_CLUSTER_MODE = \"SELECT is not allowed in cluster mode\";", "originalCommit": "d691af73f93f201de5280dd880915fbb11d19dc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5MDAyMA==", "url": "https://github.com/apache/geode/pull/5682#discussion_r514290020", "bodyText": "I definitely understand what you mean.  I think it would be good for us to discuss this.  There is also an ERR DB index is out of range message Redis returns if the user tries to select a DB that is not 0-15, but is still a long.  We could potentially return that instead.", "author": "sabbey37", "createdAt": "2020-10-29T14:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MjMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3NTYzNQ==", "url": "https://github.com/apache/geode/pull/5682#discussion_r514475635", "bodyText": "After some discussion, we decided to return ERR Only DB 0 supported if anything other than 0 is passed in as a DB index argument.", "author": "sabbey37", "createdAt": "2020-10-29T18:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MjMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "10fca8c7bd7d29a1ebc8ab43c23777addbe924d2", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/RedisConstants.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/RedisConstants.java\nindex d95b607e27..acfeefe538 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/RedisConstants.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/RedisConstants.java\n\n@@ -30,8 +30,7 @@ public class RedisConstants {\n   public static final String SERVER_ERROR_MESSAGE =\n       \"The server had an internal error please try again\";\n   public static final String SERVER_ERROR_SHUTDOWN = \"The server is shutting down\";\n-  public static final String ERROR_SELECT_CLUSTER_MODE = \"SELECT is not allowed in cluster mode\";\n-  public static final String ERROR_INVALID_DB_INDEX = \"invalid DB index\";\n+  public static final String ERROR_SELECT = \"Only DB 0 supported\";\n   public static final String ERROR_CURSOR = \"invalid cursor\";\n   public static final String ERROR_UNKNOWN_COMMAND =\n       \"unknown command `%s`, with args beginning with: %s\";\n"}}, {"oid": "fd58a8287fada51013a14c8669471ec348d8c3c9", "url": "https://github.com/apache/geode/commit/fd58a8287fada51013a14c8669471ec348d8c3c9", "message": "Change redisContainer setup and teardown to class level methods in selectnative test", "committedDate": "2020-10-29T14:09:36Z", "type": "commit"}, {"oid": "10fca8c7bd7d29a1ebc8ab43c23777addbe924d2", "url": "https://github.com/apache/geode/commit/10fca8c7bd7d29a1ebc8ab43c23777addbe924d2", "message": "Change error returned by SELECT", "committedDate": "2020-10-29T18:13:45Z", "type": "commit"}, {"oid": "1198ec4980f1e6006cff2bf81b3bd6d60eb19380", "url": "https://github.com/apache/geode/commit/1198ec4980f1e6006cff2bf81b3bd6d60eb19380", "message": "Simplify select executor, remove unnecessary tests", "committedDate": "2020-10-29T18:24:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3OTIwNQ==", "url": "https://github.com/apache/geode/pull/5682#discussion_r514479205", "bodyText": "I changed this so we are no longer parsing the long and just comparing the string value.  Let me know if you think this is the right approach.", "author": "sabbey37", "createdAt": "2020-10-29T18:30:49Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/connection/SelectExecutor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+package org.apache.geode.redis.internal.executor.connection;\n+\n+import static org.apache.geode.redis.internal.RedisConstants.ERROR_SELECT;\n+\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+import org.apache.geode.redis.internal.executor.RedisResponse;\n+import org.apache.geode.redis.internal.netty.Command;\n+import org.apache.geode.redis.internal.netty.ExecutionHandlerContext;\n+\n+public class SelectExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public RedisResponse executeCommand(Command command, ExecutionHandlerContext context) {\n+    String dbIndexString = command.getStringKey();\n+\n+    if (!dbIndexString.equals(\"0\")) {\n+      return RedisResponse.error(ERROR_SELECT);\n+    }\n+\n+    return RedisResponse.ok();", "originalCommit": "1198ec4980f1e6006cff2bf81b3bd6d60eb19380", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}