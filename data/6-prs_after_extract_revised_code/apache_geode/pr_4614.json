{"pr_number": 4614, "pr_title": "GEODE-7652: MembershipBuilder lets you set the local locator", "pr_createdAt": "2020-01-22T01:35:17Z", "pr_url": "https://github.com/apache/geode/pull/4614", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4NzQ2OA==", "url": "https://github.com/apache/geode/pull/4614#discussion_r369887468", "bodyText": "removing this method was important! see MembershipBuilder.setMembershipLocator()", "author": "Bill", "createdAt": "2020-01-23T01:04:37Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/LifecycleListener.java", "diffHunk": "@@ -32,13 +32,6 @@\n   void start(\n       final ID memberID);\n \n-  /**\n-   * Invoked when the Membership is starting. All membership services will have been\n-   * initialized and had their \"started\" methods invoked but we will not yet have joined\n-   * the cluster.\n-   */\n-  void started();\n-", "originalCommit": "ea048ff97fecd4640ee1a396e73f8586c5c457f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2c1079d099887a8baebfcc769c341103efc36b7", "chunk": "diff --git a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/LifecycleListener.java b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/LifecycleListener.java\nindex 68118ff383..32f5c49c70 100644\n--- a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/LifecycleListener.java\n+++ b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/LifecycleListener.java\n\n@@ -32,6 +32,13 @@ public interface LifecycleListener<ID extends MemberIdentifier> {\n   void start(\n       final ID memberID);\n \n+  /**\n+   * Invoked when the Membership is starting. All membership services will have been\n+   * initialized and had their \"started\" methods invoked but we will not yet have joined\n+   * the cluster.\n+   */\n+  void started();\n+\n   /**\n    * Invoked when the Membership has successfully joined the cluster. At this point the\n    * membership address is stable.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4NzY4Ng==", "url": "https://github.com/apache/geode/pull/4614#discussion_r369887686", "bodyText": "this method on the builder is the replacement for the eliminated started() method on LifecycleListener", "author": "Bill", "createdAt": "2020-01-23T01:05:35Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/MembershipBuilder.java", "diffHunk": "@@ -32,6 +32,8 @@\n \n   MembershipBuilder<ID> setMembershipListener(MembershipListener<ID> membershipListener);\n \n+  MembershipBuilder<ID> setMembershipLocator(MembershipLocator<ID> membershipLocator);\n+", "originalCommit": "ea048ff97fecd4640ee1a396e73f8586c5c457f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODExOA==", "url": "https://github.com/apache/geode/pull/4614#discussion_r369888118", "bodyText": "important addition here: if a membership locator was specified, then tell the services about it", "author": "Bill", "createdAt": "2020-01-23T01:07:19Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipBuilderImpl.java", "diffHunk": "@@ -99,9 +108,12 @@ public MembershipBuilderImpl(\n   public Membership<ID> create() throws MembershipConfigurationException {\n     GMSMembership<ID> gmsMembership =\n         new GMSMembership<>(membershipListener, messageListener, lifecycleListener);\n-    Services<ID> services =\n+    final Services<ID> services =\n         new Services<>(gmsMembership.getGMSManager(), statistics, authenticator,\n             membershipConfig, serializer, memberFactory, locatorClient, socketCreator);\n+    if (membershipLocator != null) {\n+      services.setLocators(membershipLocator.getLocator(), membershipLocator);", "originalCommit": "ea048ff97fecd4640ee1a396e73f8586c5c457f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTM5NQ==", "url": "https://github.com/apache/geode/pull/4614#discussion_r370759395", "bodyText": "When would there not be a membershipLocator specified?", "author": "echobravopapa", "createdAt": "2020-01-24T17:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNzE1Ng==", "url": "https://github.com/apache/geode/pull/4614#discussion_r372107156", "bodyText": "when running in a regular member that is not a locator", "author": "Bill", "createdAt": "2020-01-28T23:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODExOA=="}], "type": "inlineReview", "revised_code": {"commit": "8f37c224bb4df70b5f18c46f3c208a4733f98a8d", "chunk": "diff --git a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipBuilderImpl.java b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipBuilderImpl.java\nindex 2e10c52231..742c046b0e 100644\n--- a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipBuilderImpl.java\n+++ b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipBuilderImpl.java\n\n@@ -112,7 +114,7 @@ public class MembershipBuilderImpl<ID extends MemberIdentifier> implements Membe\n         new Services<>(gmsMembership.getGMSManager(), statistics, authenticator,\n             membershipConfig, serializer, memberFactory, locatorClient, socketCreator);\n     if (membershipLocator != null) {\n-      services.setLocators(membershipLocator.getLocator(), membershipLocator);\n+      services.setLocators(membershipLocator.getGMSLocator(), membershipLocator);\n     }\n     services.init();\n     return gmsMembership;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODYzNw==", "url": "https://github.com/apache/geode/pull/4614#discussion_r369888637", "bodyText": "This logic here replaces what used to be implemented by callers in their LifecycleListener.started() (overridden) methods. Nice thing about this is it's implemented in one place so clients of the membership subsystem can't screw it up", "author": "Bill", "createdAt": "2020-01-23T01:09:33Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java", "diffHunk": "@@ -206,6 +209,18 @@ public void start() throws MemberStartupException {\n       this.joinLeave.started();\n       this.healthMon.started();\n       this.manager.started();\n+\n+      if (membershipLocator != null) {\n+        /*\n+         * Now that all the services have started we can let the membership locator know\n+         * about them. We must do this before telling the manager to joinDistributedSystem()\n+         * later in this method\n+         */\n+        final MembershipLocatorImpl locatorImpl =\n+            (MembershipLocatorImpl) this.membershipLocator;\n+        locatorImpl.setServices(this);", "originalCommit": "ea048ff97fecd4640ee1a396e73f8586c5c457f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2c1079d099887a8baebfcc769c341103efc36b7", "chunk": "diff --git a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java\nindex 753d7c85dc..87ec1afd53 100644\n--- a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java\n+++ b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java\n\n@@ -212,13 +214,11 @@ public class Services<ID extends MemberIdentifier> {\n \n       if (membershipLocator != null) {\n         /*\n-         * Now that all the services have started we can let the membership locator know\n-         * about them. We must do this before telling the manager to joinDistributedSystem()\n-         * later in this method\n+         Now that all the services have started we can let the membership locator know\n+         about them. We must do this before telling the manager to joinDistributedSystem()\n+         later in this method\n          */\n-        final MembershipLocatorImpl locatorImpl =\n-            (MembershipLocatorImpl) this.membershipLocator;\n-        locatorImpl.setServices(this);\n+        membershipLocator.setServices(this);\n       }\n \n       logger.debug(\"All membership services have been started\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4OTAwMA==", "url": "https://github.com/apache/geode/pull/4614#discussion_r369889000", "bodyText": "what was a setLocator() method is now a setLocators() one. do you hate me for this?\nby way of justification, these two objects are 1-1 in the design. I think it's a Good Thing\u2122 that there are two (smaller) interfaces instead of one (bigger one)", "author": "Bill", "createdAt": "2020-01-23T01:10:45Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java", "diffHunk": "@@ -327,12 +342,14 @@ public void memberSuspected(ID initiator,\n     return this.manager;\n   }\n \n-  public Locator<ID> getLocator() {\n-    return this.locator;\n+  public void setLocators(final Locator<ID> locator,\n+      final MembershipLocator<ID> membershipLocator) {\n+    this.locator = locator;\n+    this.membershipLocator = membershipLocator;", "originalCommit": "ea048ff97fecd4640ee1a396e73f8586c5c457f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjQyMA==", "url": "https://github.com/apache/geode/pull/4614#discussion_r370742420", "bodyText": "William, I like the positively pre-emptive persuasion here... at first glance I was certainly questioning this methods signature...", "author": "echobravopapa", "createdAt": "2020-01-24T17:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4OTAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "a2c1079d099887a8baebfcc769c341103efc36b7", "chunk": "diff --git a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java\nindex 753d7c85dc..87ec1afd53 100644\n--- a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java\n+++ b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java\n\n@@ -343,7 +343,7 @@ public class Services<ID extends MemberIdentifier> {\n   }\n \n   public void setLocators(final Locator<ID> locator,\n-      final MembershipLocator<ID> membershipLocator) {\n+                          final MembershipLocator<ID> membershipLocator) {\n     this.locator = locator;\n     this.membershipLocator = membershipLocator;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4OTQwOA==", "url": "https://github.com/apache/geode/pull/4614#discussion_r369889408", "bodyText": "This method had and has important initialization logic (see new block comment above). This is the code that needs to be invoked after services are _start_ed but before the distributed system is joined.", "author": "Bill", "createdAt": "2020-01-23T01:12:19Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/GMSLocator.java", "diffHunk": "@@ -132,15 +130,20 @@ public GMSLocator(InetAddress bindAddress, String locatorString, boolean usePref\n     this.objectDeserializer = objectDeserializer;\n   }\n \n-  public synchronized boolean setMembership(Membership<ID> membership) {\n-    if (services == null || services.isStopped()) {\n-      services = ((GMSMembership<ID>) membership).getServices();\n-      localAddress = services.getMessenger().getMemberID();\n+  /**\n+   * Called initially and after each auto-reconnect. See restart handlers in InternalLocator\n+   * up in geode-core. Services must be started before this call.\n+   *\n+   */\n+  public synchronized boolean setServices(", "originalCommit": "ea048ff97fecd4640ee1a396e73f8586c5c457f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2c1079d099887a8baebfcc769c341103efc36b7", "chunk": "diff --git a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/GMSLocator.java b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/GMSLocator.java\nindex 815b28e6fd..8efd3f547b 100644\n--- a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/GMSLocator.java\n+++ b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/GMSLocator.java\n\n@@ -134,9 +135,13 @@ public class GMSLocator<ID extends MemberIdentifier> implements Locator<ID>, Tcp\n    * Called initially and after each auto-reconnect. See restart handlers in InternalLocator\n    * up in geode-core. Services must be started before this call.\n    *\n+   * @param services\n+   * @param membershipLocator\n+   * @return\n    */\n   public synchronized boolean setServices(\n-      final Services<ID> services) {\n+      final Services<ID> services,\n+      final MembershipLocator<ID> membershipLocator) {\n     if (this.services == null || this.services.isStopped()) {\n       this.services = services;\n       localAddress = this.services.getMessenger().getMemberID();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MTM4Ng==", "url": "https://github.com/apache/geode/pull/4614#discussion_r370261386", "bodyText": "Reviewers: I'm looking for your critique of this exception. If somebody passed in a locator, and also specified config parameters to cause this routine to start a locator, it seems to me we want to stop and inform them of the conflict.", "author": "Bill", "createdAt": "2020-01-23T17:41:55Z", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java", "diffHunk": "@@ -853,12 +876,35 @@ private void startSampler() {\n   }\n \n   /**\n+   * Starts a locator in this JVM iff the distribution config wants one started.\n+   *\n+   * @return the membershipLocatorArg if the distribution config has no locator specified;\n+   *         otherwise starts a new InternalLocator and returns its associated MembershipLocator\n+   *\n    * @since GemFire 5.7\n+   * @param membershipLocatorArg an already-running MembershipLocator, or null if none is known\n    */\n-  private void startInitLocator() throws InterruptedException {\n-    String locatorString = originalConfig.getStartLocator();\n-    if (locatorString.length() == 0) {\n-      return;\n+  private MembershipLocator startInitLocator(\n+      final MembershipLocator<InternalDistributedMember> membershipLocatorArg)\n+      throws InterruptedException {\n+\n+    final String locatorString = originalConfig.getStartLocator();\n+    final boolean shouldStartLocator = locatorString.length() > 0;\n+\n+    if (!shouldStartLocator) {\n+      return membershipLocatorArg;\n+    }\n+\n+    /*\n+     * Defensive coding here. InternalLocator's constructor is keeping track of a singleton instance\n+     * and that constructor will throw an exception if we try to have more than one\n+     * InternalLocator in existence at the same time. So in that sense we shouldn't need this check.\n+     * Nevertheless, we'd like the code over here to not rely on that singleton bookkeeping over\n+     * there. So if that singleton logic goes away, this code here might save us.\n+     */\n+    if (membershipLocatorArg != null && shouldStartLocator) {\n+      throw new IllegalStateException(\"Internal error: trying to start a second locator \"\n+          + \"in this JVM\");", "originalCommit": "ea048ff97fecd4640ee1a396e73f8586c5c457f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwMDI2Nw==", "url": "https://github.com/apache/geode/pull/4614#discussion_r370400267", "bodyText": "I'm not sure I would describe this as an \"Internal error\" since it seems like it results from a user's misconfiguration?\nCould we be more specific here - like \"Setting the start-locator property is not supported in dedicated locators launched through gfsh or the Java Locator class?\"", "author": "upthewaterspout", "createdAt": "2020-01-23T23:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MTM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNzQ1Nw==", "url": "https://github.com/apache/geode/pull/4614#discussion_r372107457", "bodyText": "fixed", "author": "Bill", "createdAt": "2020-01-28T23:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MTM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e45ba56fae6db091f9456a552e6c7e469d43c27c", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java b/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java\nindex d8b69e17f3..68118538cf 100644\n--- a/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java\n+++ b/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java\n\n@@ -903,8 +908,8 @@ public class InternalDistributedSystem extends DistributedSystem\n      * there. So if that singleton logic goes away, this code here might save us.\n      */\n     if (membershipLocatorArg != null && shouldStartLocator) {\n-      throw new IllegalStateException(\"Internal error: trying to start a second locator \"\n-          + \"in this JVM\");\n+      throw new IllegalStateException(\"Setting the start-locator property is not supported in \"\n+          + \"dedicated locators launched through gfsh or the Java Locator class\");\n     }\n \n     // when reconnecting we don't want to join with a colocated locator unless\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTM1NQ==", "url": "https://github.com/apache/geode/pull/4614#discussion_r370795355", "bodyText": "completely aside... is this a TODO for an old bug or what follows was the fix for it? anyone, bueller...", "author": "echobravopapa", "createdAt": "2020-01-24T19:08:43Z", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java", "diffHunk": "@@ -751,12 +771,12 @@ private void initialize(SecurityManager securityManager, PostProcessor postProce\n \n       if (!isLoner) {\n         try {\n-          dm = ClusterDistributionManager.create(this);\n+          dm = ClusterDistributionManager.create(this, membershipLocator);\n           // fix bug #46324", "originalCommit": "ae594b183f693519a78c1cf853088b4cdffec36f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwMjYzOA==", "url": "https://github.com/apache/geode/pull/4614#discussion_r372102638", "bodyText": "my impression when I see a comment like that is that it denotes a fix for that bug\u2014not a TODO", "author": "Bill", "createdAt": "2020-01-28T22:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNDg5NQ==", "url": "https://github.com/apache/geode/pull/4614#discussion_r372104895", "bodyText": "On your other comment, re: when would there not be a membershipLocator specified (to MembershipBuilderImpl?)\nI'd say when building membership in a JVM that is not a locator\u2014it's just a member.", "author": "Bill", "createdAt": "2020-01-28T22:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e45ba56fae6db091f9456a552e6c7e469d43c27c", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java b/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java\nindex 75a124b2c8..68118538cf 100644\n--- a/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java\n+++ b/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java\n\n@@ -776,7 +783,8 @@ public class InternalDistributedSystem extends DistributedSystem\n           if (InternalLocator.hasLocator()) {\n             InternalLocator internalLocator = InternalLocator.getLocator();\n             getDistributionManager().addHostedLocators(getDistributedMember(),\n-                InternalLocator.getLocatorStrings(), internalLocator.isSharedConfigurationEnabled());\n+                InternalLocator.getLocatorStrings(),\n+                internalLocator.isSharedConfigurationEnabled());\n           }\n         } finally {\n           if (dm == null && quorumChecker != null) {\n"}}, {"oid": "e45ba56fae6db091f9456a552e6c7e469d43c27c", "url": "https://github.com/apache/geode/commit/e45ba56fae6db091f9456a552e6c7e469d43c27c", "message": "GEODE-7652: cleaned up imperative mess and clarified error msg", "committedDate": "2020-01-28T23:11:26Z", "type": "forcePushed"}, {"oid": "8f37c224bb4df70b5f18c46f3c208a4733f98a8d", "url": "https://github.com/apache/geode/commit/8f37c224bb4df70b5f18c46f3c208a4733f98a8d", "message": "GEODE-7652: fix failing restart tests", "committedDate": "2020-01-29T22:37:58Z", "type": "forcePushed"}, {"oid": "a2c1079d099887a8baebfcc769c341103efc36b7", "url": "https://github.com/apache/geode/commit/a2c1079d099887a8baebfcc769c341103efc36b7", "message": "GEODE-7652: MembershipBuilder lets you set the local locator", "committedDate": "2020-01-30T00:45:42Z", "type": "commit"}, {"oid": "6c4fda5688dde63a920608b13863fcf3b1355eb4", "url": "https://github.com/apache/geode/commit/6c4fda5688dde63a920608b13863fcf3b1355eb4", "message": "GEODE-7652: spotless", "committedDate": "2020-01-30T00:45:44Z", "type": "commit"}, {"oid": "fb387be156940912a6225ef606c4e1601b359c37", "url": "https://github.com/apache/geode/commit/fb387be156940912a6225ef606c4e1601b359c37", "message": "GEODE-7652: re-break dependency from core to membership internals", "committedDate": "2020-01-30T00:45:44Z", "type": "commit"}, {"oid": "2498fee09f2e1787c1d7f934fbc0909941f061c4", "url": "https://github.com/apache/geode/commit/2498fee09f2e1787c1d7f934fbc0909941f061c4", "message": "GEODE-7652: eliminate membership LifecycleListener.started callback entirely", "committedDate": "2020-01-30T00:50:37Z", "type": "commit"}, {"oid": "624fd60ba977a2aead36cccce87ca95f2485f846", "url": "https://github.com/apache/geode/commit/624fd60ba977a2aead36cccce87ca95f2485f846", "message": "GEODE-7652: make IDS.startInitLocator work when no locator arg is passed", "committedDate": "2020-01-30T00:50:37Z", "type": "commit"}, {"oid": "bc2d7c8fa4e2f9396e90bada840c3d9eee246e39", "url": "https://github.com/apache/geode/commit/bc2d7c8fa4e2f9396e90bada840c3d9eee246e39", "message": "GEODE_7652: provisional fix to remember locator for recovery", "committedDate": "2020-01-30T00:50:37Z", "type": "commit"}, {"oid": "8ca005e83f44b7a645975e2e1272fc9942177f16", "url": "https://github.com/apache/geode/commit/8ca005e83f44b7a645975e2e1272fc9942177f16", "message": "GEODE-7652: cleaned up imperative mess and clarified error msg", "committedDate": "2020-01-30T00:50:37Z", "type": "commit"}, {"oid": "139f3865562fa94b09e954db1b4251cc4a453413", "url": "https://github.com/apache/geode/commit/139f3865562fa94b09e954db1b4251cc4a453413", "message": "GEODE-7652: remove archunit violation: was exposing memberships internal Locator interface", "committedDate": "2020-01-30T00:50:37Z", "type": "commit"}, {"oid": "d86ebb00d17a0ba03effea8a2e232b882a3686b4", "url": "https://github.com/apache/geode/commit/d86ebb00d17a0ba03effea8a2e232b882a3686b4", "message": "GEODE-7652: fix failing restart tests", "committedDate": "2020-01-30T00:50:37Z", "type": "commit"}, {"oid": "d86ebb00d17a0ba03effea8a2e232b882a3686b4", "url": "https://github.com/apache/geode/commit/d86ebb00d17a0ba03effea8a2e232b882a3686b4", "message": "GEODE-7652: fix failing restart tests", "committedDate": "2020-01-30T00:50:37Z", "type": "forcePushed"}]}