{"pr_number": 5140, "pr_title": "GEODE-8151: Convert hash commands to return RedisResponse", "pr_createdAt": "2020-05-20T14:36:32Z", "pr_url": "https://github.com/apache/geode/pull/5140", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNDcxNw==", "url": "https://github.com/apache/geode/pull/5140#discussion_r428424717", "bodyText": "What do you think of supporting a flavor of \"integer(boolean)\" that would respond with 1 if true and 0 if false? I've seen a large number of redis commands that do this", "author": "dschneider-pivotal", "createdAt": "2020-05-21T03:25:21Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HExistsExecutor.java", "diffHunk": "@@ -53,12 +54,7 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n     RedisHash map = getRedisHash(context, key);\n     boolean hasField = map.containsKey(field);\n \n-    if (hasField) {\n-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), EXISTS));\n-    } else {\n-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_EXISTS));\n-    }\n-\n+    return RedisResponse.integer(hasField ? EXISTS : NOT_EXISTS);", "originalCommit": "2a174b344c5295f8b77c4d9a8048245321025e68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NTQyMA==", "url": "https://github.com/apache/geode/pull/5140#discussion_r429265420", "bodyText": "Yes, good idea.", "author": "jdeppe-pivotal", "createdAt": "2020-05-22T14:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNDcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "56f7b6499a52327e39d9b218f9089e2d497d8b00", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HExistsExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HExistsExecutor.java\nindex 2c37aab598..239a87517e 100755\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HExistsExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HExistsExecutor.java\n\n@@ -51,10 +47,9 @@ public class HExistsExecutor extends HashExecutor {\n     byte[] byteField = commandElems.get(FIELD_INDEX);\n     ByteArrayWrapper field = new ByteArrayWrapper(byteField);\n     ByteArrayWrapper key = command.getKey();\n-    RedisHash map = getRedisHash(context, key);\n-    boolean hasField = map.containsKey(field);\n+    RedisHashCommands redisHashCommands = createRedisHashCommands(context);\n \n-    return RedisResponse.integer(hasField ? EXISTS : NOT_EXISTS);\n+    return RedisResponse.integer(redisHashCommands.hexists(key, field));\n   }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNTIxMw==", "url": "https://github.com/apache/geode/pull/5140#discussion_r428425213", "bodyText": "a static import of ERROR_ILLEGAL_GLOB would be nice", "author": "dschneider-pivotal", "createdAt": "2020-05-21T03:27:27Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HScanExecutor.java", "diffHunk": "@@ -95,28 +94,24 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n           count = Coder.bytesToInt(bytes);\n         }\n       } catch (NumberFormatException e) {\n-        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_COUNT));\n-        return;\n+        return RedisResponse.error(ERROR_COUNT);\n       }\n     }\n \n     if (count < 0) {\n-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_COUNT));\n-      return;\n+      return RedisResponse.error(ERROR_COUNT);\n     }\n \n     try {\n       matchPattern = convertGlobToRegex(globMatchPattern);\n     } catch (PatternSyntaxException e) {\n-      command.setResponse(\n-          Coder.getErrorResponse(context.getByteBufAllocator(), RedisConstants.ERROR_ILLEGAL_GLOB));\n-      return;\n+      return RedisResponse.error(RedisConstants.ERROR_ILLEGAL_GLOB);", "originalCommit": "2a174b344c5295f8b77c4d9a8048245321025e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56f7b6499a52327e39d9b218f9089e2d497d8b00", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HScanExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HScanExecutor.java\nindex 6eaed6b67d..c295eb353c 100755\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HScanExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HScanExecutor.java\n\n@@ -108,51 +98,14 @@ public class HScanExecutor extends AbstractScanExecutor {\n       return RedisResponse.error(RedisConstants.ERROR_ILLEGAL_GLOB);\n     }\n \n-    List<Object> returnList =\n-        getIteration(hash.entries(), matchPattern, count, cursor);\n+    RedisHashCommands redisHashCommands =\n+        new RedisHashCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());\n+    List<Object> returnList = redisHashCommands.hscan(key, matchPattern, count, cursor);\n \n-    return RedisResponse.scan(returnList);\n-  }\n-\n-  @SuppressWarnings(\"unchecked\")\n-  protected List<Object> getIteration(\n-      Collection<Map.Entry<ByteArrayWrapper, ByteArrayWrapper>> list, Pattern matchPattern,\n-      int count, int cursor) {\n-    List<Object> returnList = new ArrayList<Object>();\n-    int size = list.size();\n-    int beforeCursor = 0;\n-    int numElements = 0;\n-    int i = -1;\n-    for (Entry<ByteArrayWrapper, ByteArrayWrapper> entry : list) {\n-      ByteArrayWrapper key = entry.getKey();\n-      ByteArrayWrapper value = entry.getValue();\n-      i++;\n-      if (beforeCursor < cursor) {\n-        beforeCursor++;\n-        continue;\n-      } else if (numElements < count) {\n-        if (matchPattern != null) {\n-          if (matchPattern.matcher(key.toString()).matches()) {\n-            returnList.add(key);\n-            returnList.add(value);\n-            numElements++;\n-          }\n-        } else {\n-          returnList.add(key);\n-          returnList.add(value);\n-          numElements++;\n-        }\n-      } else {\n-        break;\n-      }\n-    }\n-\n-    if (i == size - 1) {\n-      returnList.add(0, String.valueOf(0));\n+    if (returnList.isEmpty()) {\n+      return RedisResponse.error(ERROR_CURSOR);\n     } else {\n-      returnList.add(0, String.valueOf(i));\n+      return RedisResponse.scan(returnList);\n     }\n-    return returnList;\n   }\n-\n }\n"}}, {"oid": "56f7b6499a52327e39d9b218f9089e2d497d8b00", "url": "https://github.com/apache/geode/commit/56f7b6499a52327e39d9b218f9089e2d497d8b00", "message": "GEODE-8151: Convert hash commands to return RedisResponse\n\n- Convert hash tests to use assertj", "committedDate": "2020-05-22T13:48:37Z", "type": "commit"}, {"oid": "c528e7fe68de24de1a020c8bd94acf62d84e9f08", "url": "https://github.com/apache/geode/commit/c528e7fe68de24de1a020c8bd94acf62d84e9f08", "message": "Review updates", "committedDate": "2020-05-22T13:53:30Z", "type": "commit"}, {"oid": "4d9f67a7576124754931d866c489647c955c5a97", "url": "https://github.com/apache/geode/commit/4d9f67a7576124754931d866c489647c955c5a97", "message": "Merge changes", "committedDate": "2020-05-22T14:02:39Z", "type": "commit"}, {"oid": "4d9f67a7576124754931d866c489647c955c5a97", "url": "https://github.com/apache/geode/commit/4d9f67a7576124754931d866c489647c955c5a97", "message": "Merge changes", "committedDate": "2020-05-22T14:02:39Z", "type": "forcePushed"}]}