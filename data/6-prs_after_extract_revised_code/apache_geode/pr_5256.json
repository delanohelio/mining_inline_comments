{"pr_number": 5256, "pr_title": "GEODE-8217: Deserialize attribute before update and remove.", "pr_createdAt": "2020-06-16T17:19:30Z", "pr_url": "https://github.com/apache/geode/pull/5256", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MzY2Nw==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444393667", "bodyText": "I think the method name does not reflect PreferDeserializedForm. It might be better to be explicit instead of using Deprecated.", "author": "pivotal-eshu", "createdAt": "2020-06-23T17:35:44Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java", "diffHunk": "@@ -231,6 +236,11 @@ public void setOwner(Object manager) {\n     }\n   }\n \n+  @SuppressWarnings(\"deprecation\")\n+  private void setOwnerDeprecated(DeltaSessionManager sessionManager) {", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\nindex b50d27faba..4e5e96969f 100644\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\n+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\n\n@@ -236,11 +231,6 @@ public class DeltaSession extends StandardSession\n     }\n   }\n \n-  @SuppressWarnings(\"deprecation\")\n-  private void setOwnerDeprecated(DeltaSessionManager sessionManager) {\n-    preferDeserializedForm = sessionManager.getPreferDeserializedForm();\n-  }\n-\n   private void checkBackingCacheAvailable() {\n     if (!((SessionManager) getManager()).isBackingCacheAvailable()) {\n       throw new IllegalStateException(\"No backing cache server is available.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNDIxNQ==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444434215", "bodyText": "Couple of typos here. Should be \"Always prefer deserialized form.\"", "author": "DonalEvans", "createdAt": "2020-06-23T18:46:35Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManagerConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.modules.session.catalina;\n+\n+/**\n+ * Method used by Catalina XML configuration.\n+ */\n+@SuppressWarnings(\"unused\")\n+interface DeltaSessionManagerConfiguration {\n+\n+  void setRegionName(String regionName);\n+\n+  String getRegionName();\n+\n+  void setEnableLocalCache(boolean enableLocalCache);\n+\n+  boolean getEnableLocalCache();\n+\n+  void setMaxActiveSessions(int maxActiveSessions);\n+\n+  int getMaxActiveSessions();\n+\n+  void setRegionAttributesId(String regionType);\n+\n+  String getRegionAttributesId();\n+\n+  void setEnableGatewayDeltaReplication(boolean enableGatewayDeltaReplication);\n+\n+  boolean getEnableGatewayDeltaReplication();\n+\n+  void setEnableGatewayReplication(boolean enableGatewayReplication);\n+\n+  boolean getEnableGatewayReplication();\n+\n+  void setEnableDebugListener(boolean enableDebugListener);\n+\n+  boolean getEnableDebugListener();\n+\n+  boolean isCommitValveEnabled();\n+\n+  void setEnableCommitValve(boolean enable);\n+\n+  boolean isCommitValveFailfastEnabled();\n+\n+  void setEnableCommitValveFailfast(boolean enable);\n+\n+  boolean isBackingCacheAvailable();\n+\n+  /**\n+   * @deprecated No replacement. Always refer deserialized form.\n+   */\n+  @Deprecated\n+  void setPreferDeserializedForm(boolean enable);\n+\n+  /**\n+   * @deprecated No replacement. Always refer deserialized form.", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManagerConfiguration.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManagerConfiguration.java\ndeleted file mode 100644\nindex f69da3e86c..0000000000\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManagerConfiguration.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.geode.modules.session.catalina;\n-\n-/**\n- * Method used by Catalina XML configuration.\n- */\n-@SuppressWarnings(\"unused\")\n-interface DeltaSessionManagerConfiguration {\n-\n-  void setRegionName(String regionName);\n-\n-  String getRegionName();\n-\n-  void setEnableLocalCache(boolean enableLocalCache);\n-\n-  boolean getEnableLocalCache();\n-\n-  void setMaxActiveSessions(int maxActiveSessions);\n-\n-  int getMaxActiveSessions();\n-\n-  void setRegionAttributesId(String regionType);\n-\n-  String getRegionAttributesId();\n-\n-  void setEnableGatewayDeltaReplication(boolean enableGatewayDeltaReplication);\n-\n-  boolean getEnableGatewayDeltaReplication();\n-\n-  void setEnableGatewayReplication(boolean enableGatewayReplication);\n-\n-  boolean getEnableGatewayReplication();\n-\n-  void setEnableDebugListener(boolean enableDebugListener);\n-\n-  boolean getEnableDebugListener();\n-\n-  boolean isCommitValveEnabled();\n-\n-  void setEnableCommitValve(boolean enable);\n-\n-  boolean isCommitValveFailfastEnabled();\n-\n-  void setEnableCommitValveFailfast(boolean enable);\n-\n-  boolean isBackingCacheAvailable();\n-\n-  /**\n-   * @deprecated No replacement. Always refer deserialized form.\n-   */\n-  @Deprecated\n-  void setPreferDeserializedForm(boolean enable);\n-\n-  /**\n-   * @deprecated No replacement. Always refer deserialized form.\n-   */\n-  @Deprecated\n-  boolean getPreferDeserializedForm();\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NTg2NA==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444445864", "bodyText": "Typo here, should be \"setPreferDeserializedForm\". Also, tests using this method should probably be renamed, since they state the condition \"WhenPreferSerializedFormFalse\" rather than \"WhenPreferDeserializedFormFalse\". It's also a little misleading as a method name, since setPreferDeserializedForm() with no argument would tend to imply setting the value to true rather than false.", "author": "DonalEvans", "createdAt": "2020-06-23T19:07:21Z", "path": "extensions/geode-modules-tomcat7/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession7Test.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.modules.session.catalina;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.http.HttpSessionAttributeListener;\n+import javax.servlet.http.HttpSessionBindingEvent;\n+\n+import org.apache.catalina.Context;\n+import org.apache.juli.logging.Log;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.internal.util.BlobHelper;\n+\n+public class DeltaSession7Test extends AbstractDeltaSessionTest {\n+  final HttpSessionAttributeListener listener = mock(HttpSessionAttributeListener.class);\n+\n+  @Before\n+  @Override\n+  public void setup() {\n+    super.setup();\n+\n+    final Context context = mock(Context.class);\n+    when(manager.getContainer()).thenReturn(context);\n+    when(context.getApplicationEventListeners()).thenReturn(new Object[] {listener});\n+    when(context.getLogger()).thenReturn(mock(Log.class));\n+  }\n+\n+  @Test\n+  public void serializedAttributesNotLeakedInAttributeReplaceEvent() throws IOException {\n+    final DeltaSession7 session = spy(new DeltaSession7(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    final Object value2 = \"value2\";\n+    session.setAttribute(name, value2);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeReplaced(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isEqualTo(value1);\n+  }\n+\n+  @Test\n+  public void serializedAttributesNotLeakedInAttributeRemovedEvent() throws IOException {\n+    final DeltaSession7 session = spy(new DeltaSession7(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    session.removeAttribute(name);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeRemoved(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isEqualTo(value1);\n+  }\n+\n+  @Test\n+  public void serializedAttributesLeakedInAttributeReplaceEventWhenPreferSerializedFormFalse()\n+      throws IOException {\n+    setPreferSeserializedForm();\n+\n+    final DeltaSession7 session = spy(new DeltaSession7(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    final Object value2 = \"value2\";\n+    session.setAttribute(name, value2);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeReplaced(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n+  }\n+\n+  @Test\n+  public void serializedAttributesLeakedInAttributeRemovedEventWhenPreferSerializedFormFalse()\n+      throws IOException {\n+    setPreferSeserializedForm();\n+\n+    final DeltaSession7 session = spy(new DeltaSession7(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    session.removeAttribute(name);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeRemoved(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")\n+  protected void setPreferSeserializedForm() {", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules-tomcat7/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession7Test.java b/extensions/geode-modules-tomcat7/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession7Test.java\ndeleted file mode 100644\nindex bddea01b57..0000000000\n--- a/extensions/geode-modules-tomcat7/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession7Test.java\n+++ /dev/null\n\n@@ -1,141 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.geode.modules.session.catalina;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n-import static org.mockito.Mockito.when;\n-\n-import java.io.IOException;\n-\n-import javax.servlet.http.HttpSessionAttributeListener;\n-import javax.servlet.http.HttpSessionBindingEvent;\n-\n-import org.apache.catalina.Context;\n-import org.apache.juli.logging.Log;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.ArgumentCaptor;\n-\n-import org.apache.geode.internal.util.BlobHelper;\n-\n-public class DeltaSession7Test extends AbstractDeltaSessionTest {\n-  final HttpSessionAttributeListener listener = mock(HttpSessionAttributeListener.class);\n-\n-  @Before\n-  @Override\n-  public void setup() {\n-    super.setup();\n-\n-    final Context context = mock(Context.class);\n-    when(manager.getContainer()).thenReturn(context);\n-    when(context.getApplicationEventListeners()).thenReturn(new Object[] {listener});\n-    when(context.getLogger()).thenReturn(mock(Log.class));\n-  }\n-\n-  @Test\n-  public void serializedAttributesNotLeakedInAttributeReplaceEvent() throws IOException {\n-    final DeltaSession7 session = spy(new DeltaSession7(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    final Object value2 = \"value2\";\n-    session.setAttribute(name, value2);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeReplaced(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isEqualTo(value1);\n-  }\n-\n-  @Test\n-  public void serializedAttributesNotLeakedInAttributeRemovedEvent() throws IOException {\n-    final DeltaSession7 session = spy(new DeltaSession7(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    session.removeAttribute(name);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeRemoved(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isEqualTo(value1);\n-  }\n-\n-  @Test\n-  public void serializedAttributesLeakedInAttributeReplaceEventWhenPreferSerializedFormFalse()\n-      throws IOException {\n-    setPreferSeserializedForm();\n-\n-    final DeltaSession7 session = spy(new DeltaSession7(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    final Object value2 = \"value2\";\n-    session.setAttribute(name, value2);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeReplaced(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n-  }\n-\n-  @Test\n-  public void serializedAttributesLeakedInAttributeRemovedEventWhenPreferSerializedFormFalse()\n-      throws IOException {\n-    setPreferSeserializedForm();\n-\n-    final DeltaSession7 session = spy(new DeltaSession7(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    session.removeAttribute(name);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeRemoved(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n-  }\n-\n-  @SuppressWarnings(\"deprecation\")\n-  protected void setPreferSeserializedForm() {\n-    when(manager.getPreferDeserializedForm()).thenReturn(false);\n-  }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NjI2Ng==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444446266", "bodyText": "See comment on DeltaSession7Test.java regarding this typo and method names.", "author": "DonalEvans", "createdAt": "2020-06-23T19:08:09Z", "path": "extensions/geode-modules-tomcat8/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession8Test.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.modules.session.catalina;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.http.HttpSessionAttributeListener;\n+import javax.servlet.http.HttpSessionBindingEvent;\n+\n+import org.apache.catalina.Context;\n+import org.apache.juli.logging.Log;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.internal.util.BlobHelper;\n+\n+public class DeltaSession8Test extends AbstractDeltaSessionTest {\n+  final HttpSessionAttributeListener listener = mock(HttpSessionAttributeListener.class);\n+\n+  @Before\n+  @Override\n+  public void setup() {\n+    super.setup();\n+\n+    final Context context = mock(Context.class);\n+    when(manager.getContext()).thenReturn(context);\n+    when(context.getApplicationEventListeners()).thenReturn(new Object[] {listener});\n+    when(context.getLogger()).thenReturn(mock(Log.class));\n+  }\n+\n+  @Test\n+  public void serializedAttributesNotLeakedInAttributeReplaceEvent() throws IOException {\n+    final DeltaSession8 session = spy(new DeltaSession8(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    final Object value2 = \"value2\";\n+    session.setAttribute(name, value2);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeReplaced(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isEqualTo(value1);\n+  }\n+\n+  @Test\n+  public void serializedAttributesNotLeakedInAttributeRemovedEvent() throws IOException {\n+    final DeltaSession8 session = spy(new DeltaSession8(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    session.removeAttribute(name);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeRemoved(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isEqualTo(value1);\n+  }\n+\n+  @Test\n+  public void serializedAttributesLeakedInAttributeReplaceEventWhenPreferSerializedFormFalse()\n+      throws IOException {\n+    setPreferSeserializedForm();\n+\n+    final DeltaSession8 session = spy(new DeltaSession8(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    final Object value2 = \"value2\";\n+    session.setAttribute(name, value2);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeReplaced(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n+  }\n+\n+  @Test\n+  public void serializedAttributesLeakedInAttributeRemovedEventWhenPreferSerializedFormFalse()\n+      throws IOException {\n+    setPreferSeserializedForm();\n+\n+    final DeltaSession8 session = spy(new DeltaSession8(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    session.removeAttribute(name);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeRemoved(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")\n+  protected void setPreferSeserializedForm() {", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules-tomcat8/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession8Test.java b/extensions/geode-modules-tomcat8/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession8Test.java\ndeleted file mode 100644\nindex 795e9c21f1..0000000000\n--- a/extensions/geode-modules-tomcat8/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession8Test.java\n+++ /dev/null\n\n@@ -1,141 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.geode.modules.session.catalina;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n-import static org.mockito.Mockito.when;\n-\n-import java.io.IOException;\n-\n-import javax.servlet.http.HttpSessionAttributeListener;\n-import javax.servlet.http.HttpSessionBindingEvent;\n-\n-import org.apache.catalina.Context;\n-import org.apache.juli.logging.Log;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.ArgumentCaptor;\n-\n-import org.apache.geode.internal.util.BlobHelper;\n-\n-public class DeltaSession8Test extends AbstractDeltaSessionTest {\n-  final HttpSessionAttributeListener listener = mock(HttpSessionAttributeListener.class);\n-\n-  @Before\n-  @Override\n-  public void setup() {\n-    super.setup();\n-\n-    final Context context = mock(Context.class);\n-    when(manager.getContext()).thenReturn(context);\n-    when(context.getApplicationEventListeners()).thenReturn(new Object[] {listener});\n-    when(context.getLogger()).thenReturn(mock(Log.class));\n-  }\n-\n-  @Test\n-  public void serializedAttributesNotLeakedInAttributeReplaceEvent() throws IOException {\n-    final DeltaSession8 session = spy(new DeltaSession8(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    final Object value2 = \"value2\";\n-    session.setAttribute(name, value2);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeReplaced(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isEqualTo(value1);\n-  }\n-\n-  @Test\n-  public void serializedAttributesNotLeakedInAttributeRemovedEvent() throws IOException {\n-    final DeltaSession8 session = spy(new DeltaSession8(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    session.removeAttribute(name);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeRemoved(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isEqualTo(value1);\n-  }\n-\n-  @Test\n-  public void serializedAttributesLeakedInAttributeReplaceEventWhenPreferSerializedFormFalse()\n-      throws IOException {\n-    setPreferSeserializedForm();\n-\n-    final DeltaSession8 session = spy(new DeltaSession8(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    final Object value2 = \"value2\";\n-    session.setAttribute(name, value2);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeReplaced(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n-  }\n-\n-  @Test\n-  public void serializedAttributesLeakedInAttributeRemovedEventWhenPreferSerializedFormFalse()\n-      throws IOException {\n-    setPreferSeserializedForm();\n-\n-    final DeltaSession8 session = spy(new DeltaSession8(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    session.removeAttribute(name);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeRemoved(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n-  }\n-\n-  @SuppressWarnings(\"deprecation\")\n-  protected void setPreferSeserializedForm() {\n-    when(manager.getPreferDeserializedForm()).thenReturn(false);\n-  }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NjQyOA==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444446428", "bodyText": "See comment on DeltaSession7Test.java regarding this typo and method names.", "author": "DonalEvans", "createdAt": "2020-06-23T19:08:25Z", "path": "extensions/geode-modules-tomcat9/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession9Test.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.modules.session.catalina;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.http.HttpSessionAttributeListener;\n+import javax.servlet.http.HttpSessionBindingEvent;\n+\n+import org.apache.catalina.Context;\n+import org.apache.juli.logging.Log;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.internal.util.BlobHelper;\n+\n+public class DeltaSession9Test extends AbstractDeltaSessionTest {\n+  final HttpSessionAttributeListener listener = mock(HttpSessionAttributeListener.class);\n+\n+  @Before\n+  @Override\n+  public void setup() {\n+    super.setup();\n+\n+    final Context context = mock(Context.class);\n+    when(manager.getContext()).thenReturn(context);\n+    when(context.getApplicationEventListeners()).thenReturn(new Object[] {listener});\n+    when(context.getLogger()).thenReturn(mock(Log.class));\n+  }\n+\n+  @Test\n+  public void serializedAttributesNotLeakedInAttributeReplaceEvent() throws IOException {\n+    final DeltaSession9 session = spy(new DeltaSession9(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    final Object value2 = \"value2\";\n+    session.setAttribute(name, value2);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeReplaced(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isEqualTo(value1);\n+  }\n+\n+  @Test\n+  public void serializedAttributesNotLeakedInAttributeRemovedEvent() throws IOException {\n+    final DeltaSession9 session = spy(new DeltaSession9(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    session.removeAttribute(name);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeRemoved(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isEqualTo(value1);\n+  }\n+\n+  @Test\n+  public void serializedAttributesLeakedInAttributeReplaceEventWhenPreferSerializedFormFalse()\n+      throws IOException {\n+    setPreferSeserializedForm();\n+\n+    final DeltaSession9 session = spy(new DeltaSession9(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    final Object value2 = \"value2\";\n+    session.setAttribute(name, value2);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeReplaced(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n+  }\n+\n+  @Test\n+  public void serializedAttributesLeakedInAttributeRemovedEventWhenPreferSerializedFormFalse()\n+      throws IOException {\n+    setPreferSeserializedForm();\n+\n+    final DeltaSession9 session = spy(new DeltaSession9(manager));\n+    session.setValid(true);\n+    final String name = \"attribute\";\n+    final Object value1 = \"value1\";\n+    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n+    // simulates initial deserialized state with serialized attribute values.\n+    session.getAttributes().put(name, serializedValue1);\n+\n+    session.removeAttribute(name);\n+\n+    final ArgumentCaptor<HttpSessionBindingEvent> event =\n+        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n+    verify(listener).attributeRemoved(event.capture());\n+    verifyNoMoreInteractions(listener);\n+    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")\n+  protected void setPreferSeserializedForm() {", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules-tomcat9/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession9Test.java b/extensions/geode-modules-tomcat9/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession9Test.java\ndeleted file mode 100644\nindex d9416c177c..0000000000\n--- a/extensions/geode-modules-tomcat9/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession9Test.java\n+++ /dev/null\n\n@@ -1,141 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.geode.modules.session.catalina;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n-import static org.mockito.Mockito.when;\n-\n-import java.io.IOException;\n-\n-import javax.servlet.http.HttpSessionAttributeListener;\n-import javax.servlet.http.HttpSessionBindingEvent;\n-\n-import org.apache.catalina.Context;\n-import org.apache.juli.logging.Log;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.ArgumentCaptor;\n-\n-import org.apache.geode.internal.util.BlobHelper;\n-\n-public class DeltaSession9Test extends AbstractDeltaSessionTest {\n-  final HttpSessionAttributeListener listener = mock(HttpSessionAttributeListener.class);\n-\n-  @Before\n-  @Override\n-  public void setup() {\n-    super.setup();\n-\n-    final Context context = mock(Context.class);\n-    when(manager.getContext()).thenReturn(context);\n-    when(context.getApplicationEventListeners()).thenReturn(new Object[] {listener});\n-    when(context.getLogger()).thenReturn(mock(Log.class));\n-  }\n-\n-  @Test\n-  public void serializedAttributesNotLeakedInAttributeReplaceEvent() throws IOException {\n-    final DeltaSession9 session = spy(new DeltaSession9(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    final Object value2 = \"value2\";\n-    session.setAttribute(name, value2);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeReplaced(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isEqualTo(value1);\n-  }\n-\n-  @Test\n-  public void serializedAttributesNotLeakedInAttributeRemovedEvent() throws IOException {\n-    final DeltaSession9 session = spy(new DeltaSession9(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    session.removeAttribute(name);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeRemoved(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isEqualTo(value1);\n-  }\n-\n-  @Test\n-  public void serializedAttributesLeakedInAttributeReplaceEventWhenPreferSerializedFormFalse()\n-      throws IOException {\n-    setPreferSeserializedForm();\n-\n-    final DeltaSession9 session = spy(new DeltaSession9(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    final Object value2 = \"value2\";\n-    session.setAttribute(name, value2);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeReplaced(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n-  }\n-\n-  @Test\n-  public void serializedAttributesLeakedInAttributeRemovedEventWhenPreferSerializedFormFalse()\n-      throws IOException {\n-    setPreferSeserializedForm();\n-\n-    final DeltaSession9 session = spy(new DeltaSession9(manager));\n-    session.setValid(true);\n-    final String name = \"attribute\";\n-    final Object value1 = \"value1\";\n-    final byte[] serializedValue1 = BlobHelper.serializeToBlob(value1);\n-    // simulates initial deserialized state with serialized attribute values.\n-    session.getAttributes().put(name, serializedValue1);\n-\n-    session.removeAttribute(name);\n-\n-    final ArgumentCaptor<HttpSessionBindingEvent> event =\n-        ArgumentCaptor.forClass(HttpSessionBindingEvent.class);\n-    verify(listener).attributeRemoved(event.capture());\n-    verifyNoMoreInteractions(listener);\n-    assertThat(event.getValue().getValue()).isInstanceOf(byte[].class);\n-  }\n-\n-  @SuppressWarnings(\"deprecation\")\n-  protected void setPreferSeserializedForm() {\n-    when(manager.getPreferDeserializedForm()).thenReturn(false);\n-  }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NzQ5OQ==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444447499", "bodyText": "Typo here, should be \"Always prefer deserialized form.\"", "author": "DonalEvans", "createdAt": "2020-06-23T19:10:25Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java", "diffHunk": "@@ -69,17 +71,21 @@\n \n   private final transient Object changeLock = new Object();\n \n-  private final List<DeltaSessionAttributeEvent> eventQueue = new ArrayList<>();\n+  private final ArrayList<DeltaSessionAttributeEvent> eventQueue = new ArrayList<>();\n \n   private transient GatewayDeltaEvent currentGatewayDeltaEvent;\n \n   private transient boolean expired = false;\n \n+  /**\n+   * @deprecated No replacement. Always refer deserialized form.", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\nindex b50d27faba..4e5e96969f 100644\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\n+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\n\n@@ -71,21 +69,17 @@ public class DeltaSession extends StandardSession\n \n   private final transient Object changeLock = new Object();\n \n-  private final ArrayList<DeltaSessionAttributeEvent> eventQueue = new ArrayList<>();\n+  private final List<DeltaSessionAttributeEvent> eventQueue = new ArrayList<>();\n \n   private transient GatewayDeltaEvent currentGatewayDeltaEvent;\n \n   private transient boolean expired = false;\n \n-  /**\n-   * @deprecated No replacement. Always refer deserialized form.\n-   */\n-  @Deprecated\n   private transient boolean preferDeserializedForm = true;\n \n   private byte[] serializedPrincipal;\n \n-  private static final Field cachedField;\n+  private static Field cachedField;\n \n   static {\n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0ODg3Ng==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444448876", "bodyText": "Can this commented code be removed?", "author": "DonalEvans", "createdAt": "2020-06-23T19:12:51Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java", "diffHunk": "@@ -328,14 +353,14 @@ Object getAttributeWithoutDeserialize(String name) {\n   public void invalidate() {\n     super.invalidate();\n     // getOperatingRegion().destroy(this.id, true); // already done in super (remove)", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\nindex b50d27faba..4e5e96969f 100644\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\n+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\n\n@@ -353,14 +328,14 @@ public class DeltaSession extends StandardSession\n   public void invalidate() {\n     super.invalidate();\n     // getOperatingRegion().destroy(this.id, true); // already done in super (remove)\n-    getDeltaSessionManager().getStatistics().incSessionsInvalidated();\n+    ((DeltaSessionManager) getManager()).getStatistics().incSessionsInvalidated();\n   }\n \n   @Override\n   public void processExpired() {\n-    DeltaSessionManager manager = getDeltaSessionManager();\n+    DeltaSessionManager manager = (DeltaSessionManager) getManager();\n     if (manager != null && manager.getLogger() != null && manager.getLogger().isDebugEnabled()) {\n-      getDeltaSessionManager().getLogger().debug(this + \": Expired\");\n+      ((DeltaSessionManager) getManager()).getLogger().debug(this + \": Expired\");\n     }\n \n     // Set expired (so region.destroy is not called again)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1Mzk4Ng==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444453986", "bodyText": "While we're here, it might be worth cleaning up uses of this warning suppression using the uncheckedCast() method, as used elsewhere in this change set. There is one cast in this method (line 651) and one on line 633 of getSizeInBytes().", "author": "DonalEvans", "createdAt": "2020-06-23T19:22:49Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java", "diffHunk": "@@ -616,7 +642,7 @@ public int getSizeInBytes() {\n     return size;\n   }\n \n-  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  @SuppressWarnings({\"unchecked\"})", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\nindex b50d27faba..4e5e96969f 100644\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\n+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSession.java\n\n@@ -642,7 +638,7 @@ public class DeltaSession extends StandardSession\n     return size;\n   }\n \n-  @SuppressWarnings({\"unchecked\"})\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   private Map<String, byte[]> getSerializedAttributes() {\n     // Iterate the values and serialize them if necessary before sending them to the server. This\n     // makes the application classes unnecessary on the server.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDM3Mg==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444454372", "bodyText": "Typo here, should be \"Always prefer deserialized form.\"", "author": "DonalEvans", "createdAt": "2020-06-23T19:23:35Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java", "diffHunk": "@@ -107,6 +110,10 @@\n \n   private static final boolean DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST = false;\n \n+  /**\n+   * @deprecated No replacement. Always refer deserialized form.", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\nindex d29d6de4d5..c1dddc68a2 100644\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\n+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\n\n@@ -110,10 +108,6 @@ public abstract class DeltaSessionManager extends ManagerBase\n \n   private static final boolean DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST = false;\n \n-  /**\n-   * @deprecated No replacement. Always refer deserialized form.\n-   */\n-  @Deprecated\n   private static final boolean DEFAULT_PREFER_DESERIALIZED_FORM = true;\n \n   /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDUxMg==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444454512", "bodyText": "Typo here, should be \"Always prefer deserialized form.\"", "author": "DonalEvans", "createdAt": "2020-06-23T19:23:50Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java", "diffHunk": "@@ -130,6 +137,10 @@\n \n   private boolean enableDebugListener = DEFAULT_ENABLE_DEBUG_LISTENER;\n \n+  /**\n+   * @deprecated No replacement. Always refer deserialized form.", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\nindex d29d6de4d5..c1dddc68a2 100644\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\n+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\n\n@@ -137,10 +131,6 @@ public abstract class DeltaSessionManager extends ManagerBase\n \n   private boolean enableDebugListener = DEFAULT_ENABLE_DEBUG_LISTENER;\n \n-  /**\n-   * @deprecated No replacement. Always refer deserialized form.\n-   */\n-  @Deprecated\n   private boolean preferDeserializedForm = DEFAULT_PREFER_DESERIALIZED_FORM;\n \n   private Timer timer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NTUxMw==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444455513", "bodyText": "Typo here, should be \"Always prefer deserialized form.\"", "author": "DonalEvans", "createdAt": "2020-06-23T19:25:43Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java", "diffHunk": "@@ -213,64 +225,78 @@ public boolean getEnableGatewayDeltaReplication() {\n     return false; // disabled\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  @Override\n   public void setEnableGatewayDeltaReplication(boolean enableGatewayDeltaReplication) {\n     // this.enableGatewayDeltaReplication = enableGatewayDeltaReplication;\n     // Disabled. Keeping the method for backward compatibility.\n   }\n \n   @Override\n   public boolean getEnableGatewayReplication() {\n-    return this.enableGatewayReplication;\n+    return enableGatewayReplication;\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  @Override\n   public void setEnableGatewayReplication(boolean enableGatewayReplication) {\n     this.enableGatewayReplication = enableGatewayReplication;\n   }\n \n   @Override\n   public boolean getEnableDebugListener() {\n-    return this.enableDebugListener;\n+    return enableDebugListener;\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  @Override\n   public void setEnableDebugListener(boolean enableDebugListener) {\n     this.enableDebugListener = enableDebugListener;\n   }\n \n   @Override\n   public boolean isCommitValveEnabled() {\n-    return this.enableCommitValve;\n+    return enableCommitValve;\n   }\n \n+  @Override\n   public void setEnableCommitValve(boolean enable) {\n-    this.enableCommitValve = enable;\n+    enableCommitValve = enable;\n   }\n \n   @Override\n   public boolean isCommitValveFailfastEnabled() {\n-    return this.enableCommitValveFailfast;\n+    return enableCommitValveFailfast;\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  @Override\n   public void setEnableCommitValveFailfast(boolean enable) {\n-    this.enableCommitValveFailfast = enable;\n+    enableCommitValveFailfast = enable;\n   }\n \n   @Override\n   public boolean isBackingCacheAvailable() {\n     return sessionCache.isBackingCacheAvailable();\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  /**\n+   * @deprecated No replacement. Always refer deserialized form.", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\nindex d29d6de4d5..c1dddc68a2 100644\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\n+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\n\n@@ -225,7 +214,7 @@ public abstract class DeltaSessionManager extends ManagerBase\n     return false; // disabled\n   }\n \n-  @Override\n+  @SuppressWarnings(\"unused\")\n   public void setEnableGatewayDeltaReplication(boolean enableGatewayDeltaReplication) {\n     // this.enableGatewayDeltaReplication = enableGatewayDeltaReplication;\n     // Disabled. Keeping the method for backward compatibility.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NTgwMQ==", "url": "https://github.com/apache/geode/pull/5256#discussion_r444455801", "bodyText": "Typo here, should be \"Always prefer deserialized form.\"", "author": "DonalEvans", "createdAt": "2020-06-23T19:26:18Z", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java", "diffHunk": "@@ -213,64 +225,78 @@ public boolean getEnableGatewayDeltaReplication() {\n     return false; // disabled\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  @Override\n   public void setEnableGatewayDeltaReplication(boolean enableGatewayDeltaReplication) {\n     // this.enableGatewayDeltaReplication = enableGatewayDeltaReplication;\n     // Disabled. Keeping the method for backward compatibility.\n   }\n \n   @Override\n   public boolean getEnableGatewayReplication() {\n-    return this.enableGatewayReplication;\n+    return enableGatewayReplication;\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  @Override\n   public void setEnableGatewayReplication(boolean enableGatewayReplication) {\n     this.enableGatewayReplication = enableGatewayReplication;\n   }\n \n   @Override\n   public boolean getEnableDebugListener() {\n-    return this.enableDebugListener;\n+    return enableDebugListener;\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  @Override\n   public void setEnableDebugListener(boolean enableDebugListener) {\n     this.enableDebugListener = enableDebugListener;\n   }\n \n   @Override\n   public boolean isCommitValveEnabled() {\n-    return this.enableCommitValve;\n+    return enableCommitValve;\n   }\n \n+  @Override\n   public void setEnableCommitValve(boolean enable) {\n-    this.enableCommitValve = enable;\n+    enableCommitValve = enable;\n   }\n \n   @Override\n   public boolean isCommitValveFailfastEnabled() {\n-    return this.enableCommitValveFailfast;\n+    return enableCommitValveFailfast;\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  @Override\n   public void setEnableCommitValveFailfast(boolean enable) {\n-    this.enableCommitValveFailfast = enable;\n+    enableCommitValveFailfast = enable;\n   }\n \n   @Override\n   public boolean isBackingCacheAvailable() {\n     return sessionCache.isBackingCacheAvailable();\n   }\n \n-  @SuppressWarnings(\"unused\")\n+  /**\n+   * @deprecated No replacement. Always refer deserialized form.\n+   */\n+  @Deprecated\n+  @Override\n   public void setPreferDeserializedForm(boolean enable) {\n-    this.preferDeserializedForm = enable;\n+    log.warn(\"Use of deprecated preferDeserializedForm property to be removed in future release.\");\n+    if (!enable) {\n+      log.warn(\n+          \"Use of HttpSessionAttributeListener may result in serialized form in HttpSessionBindingEvent.\");\n+    }\n+    preferDeserializedForm = enable;\n   }\n \n+  /**\n+   * @deprecated No replacement. Always refer deserialized form.", "originalCommit": "5e2b66b338ac7013658ee6fc64728f940808cae3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "chunk": "diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\nindex d29d6de4d5..c1dddc68a2 100644\n--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\n+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/DeltaSessionManager.java\n\n@@ -225,7 +214,7 @@ public abstract class DeltaSessionManager extends ManagerBase\n     return false; // disabled\n   }\n \n-  @Override\n+  @SuppressWarnings(\"unused\")\n   public void setEnableGatewayDeltaReplication(boolean enableGatewayDeltaReplication) {\n     // this.enableGatewayDeltaReplication = enableGatewayDeltaReplication;\n     // Disabled. Keeping the method for backward compatibility.\n"}}, {"oid": "a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "url": "https://github.com/apache/geode/commit/a8f23deefdf4497e6d7b4d20350fab444ab3dddd", "message": "GEODE-8217: Extracts common test.", "committedDate": "2020-06-25T17:56:58Z", "type": "commit"}, {"oid": "9f9088b8f59003cf3a23aa1f0135b8591e78d011", "url": "https://github.com/apache/geode/commit/9f9088b8f59003cf3a23aa1f0135b8591e78d011", "message": "GEODE-8217: Deserialize attribute before update and remove.", "committedDate": "2020-06-25T17:56:58Z", "type": "commit"}, {"oid": "00c4c8932ebbc9e2bf389303ba7594a941bd72cc", "url": "https://github.com/apache/geode/commit/00c4c8932ebbc9e2bf389303ba7594a941bd72cc", "message": "Test for preferring serialized form.", "committedDate": "2020-06-25T17:58:46Z", "type": "commit"}, {"oid": "32af6c40cafcbf5f5629431dc59d9a8350bda3d4", "url": "https://github.com/apache/geode/commit/32af6c40cafcbf5f5629431dc59d9a8350bda3d4", "message": "Cleanup\n\nCleanup\n\nCleanup\n\nCleanup", "committedDate": "2020-06-25T17:59:25Z", "type": "commit"}, {"oid": "1e644b29eb538bb023e07433eb2f1967d75e4e96", "url": "https://github.com/apache/geode/commit/1e644b29eb538bb023e07433eb2f1967d75e4e96", "message": "Deprecate preferDeserializedForm.", "committedDate": "2020-06-25T17:59:25Z", "type": "commit"}, {"oid": "80d10488ec710d5d09e48a68b03017b6cd756ba1", "url": "https://github.com/apache/geode/commit/80d10488ec710d5d09e48a68b03017b6cd756ba1", "message": "Extends tests to Tomcat 7, 8 and 9.", "committedDate": "2020-06-25T17:59:25Z", "type": "commit"}, {"oid": "35881788795d19f9b14bd5a8f01235394d049230", "url": "https://github.com/apache/geode/commit/35881788795d19f9b14bd5a8f01235394d049230", "message": "Fixes spelling error.", "committedDate": "2020-06-25T17:59:25Z", "type": "commit"}, {"oid": "f89c0bf1fe7b39b3806787aaf1a5553aa05392d1", "url": "https://github.com/apache/geode/commit/f89c0bf1fe7b39b3806787aaf1a5553aa05392d1", "message": "Correct confusing mix of terms.", "committedDate": "2020-06-25T17:59:25Z", "type": "commit"}, {"oid": "87259d6d71a148aba54bcbbca2a82b498f78048f", "url": "https://github.com/apache/geode/commit/87259d6d71a148aba54bcbbca2a82b498f78048f", "message": "Cleanup", "committedDate": "2020-06-25T17:59:25Z", "type": "commit"}, {"oid": "611e73f538ad77bfa20f4e0edd570f8cf9108d20", "url": "https://github.com/apache/geode/commit/611e73f538ad77bfa20f4e0edd570f8cf9108d20", "message": "Fixes leak on invalidate/expire.", "committedDate": "2020-06-25T17:59:25Z", "type": "commit"}, {"oid": "98f8884520e51aee5c0039a8fb364a6f83453eaf", "url": "https://github.com/apache/geode/commit/98f8884520e51aee5c0039a8fb364a6f83453eaf", "message": "Adds Eric's system test.", "committedDate": "2020-06-25T17:59:25Z", "type": "commit"}, {"oid": "98f8884520e51aee5c0039a8fb364a6f83453eaf", "url": "https://github.com/apache/geode/commit/98f8884520e51aee5c0039a8fb364a6f83453eaf", "message": "Adds Eric's system test.", "committedDate": "2020-06-25T17:59:25Z", "type": "forcePushed"}, {"oid": "374d4d2302b06ee6fd811f528aa2854aa94bdfe7", "url": "https://github.com/apache/geode/commit/374d4d2302b06ee6fd811f528aa2854aa94bdfe7", "message": "Rat!", "committedDate": "2020-06-25T18:22:57Z", "type": "commit"}]}