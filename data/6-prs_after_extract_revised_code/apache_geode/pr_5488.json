{"pr_number": 5488, "pr_title": "GEODE-8333: Change Redis adapter threading model - fixes pubsub issues", "pr_createdAt": "2020-08-31T00:52:38Z", "pr_url": "https://github.com/apache/geode/pull/5488", "timeline": [{"oid": "dd2e3b010ef574f98773913ad8a512956a116159", "url": "https://github.com/apache/geode/commit/dd2e3b010ef574f98773913ad8a512956a116159", "message": "GEODE-8333: Change Redis adapter threading model - fixes pubsub issues\n\n- Do not use Netty threads for the entire request lifecycle. Each\n  instance of ExecutionHandlerContext (essentially each client\n  connection) uses a command queue which is actioned by a single thread\n  taken from the Geode 'waiting pool'.\n- Every SUBSCRIBEed client is moved to a separate EventGroupLoop so that\n  PUBLISHed messages are not sent back using the 'normal' Worker\n  EventLoopGroup. This avoids a deadlock issue where PUBLISHed messages\n  need to be sent using the same thread that the PUBLISH response needs\n  to happen on.\n- Fix issues with PubSub where switching the EventLoopGroup may fail\n  (because a client has already closed the connection) thus resulting in\n  hanging PUBLISHers waiting for a Subscription to be marked as\n  'readyForPublish'.\n- Consolidate various MockSubscriber classes", "committedDate": "2020-08-31T00:43:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyOTUyOA==", "url": "https://github.com/apache/geode/pull/5488#discussion_r480229528", "bodyText": "Instead of \"100\" should this be \"MAX_QUEUED_COMMANDS\"?", "author": "dschneider-pivotal", "createdAt": "2020-08-31T16:01:35Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java", "diffHunk": "@@ -61,17 +64,22 @@\n public class ExecutionHandlerContext extends ChannelInboundHandlerAdapter {\n \n   private static final Logger logger = LogService.getLogger();\n+  private static final Command TERMINATE_COMMAND = new Command();\n \n   private final Client client;\n   private final Channel channel;\n   private final RegionProvider regionProvider;\n   private final PubSub pubsub;\n-  private final EventLoopGroup subscriberGroup;\n   private final ByteBufAllocator byteBufAllocator;\n   private final byte[] authPassword;\n   private final Supplier<Boolean> allowUnsupportedSupplier;\n   private final Runnable shutdownInvoker;\n   private final RedisStats redisStats;\n+  private final EventLoopGroup subscriberGroup;\n+  private final int MAX_QUEUED_COMMANDS =\n+      Integer.getInteger(\"geode.redis.commandQueueSize\", 1000);\n+  private final LinkedBlockingQueue<Command> commandQueue =\n+      new LinkedBlockingQueue<>(100);", "originalCommit": "dd2e3b010ef574f98773913ad8a512956a116159", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e40903cbc7083523f65f7c8f92d97ee25dc2ae2f", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\nindex 2216ec6093..70ae54d869 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\n\n@@ -79,7 +79,7 @@ public class ExecutionHandlerContext extends ChannelInboundHandlerAdapter {\n   private final int MAX_QUEUED_COMMANDS =\n       Integer.getInteger(\"geode.redis.commandQueueSize\", 1000);\n   private final LinkedBlockingQueue<Command> commandQueue =\n-      new LinkedBlockingQueue<>(100);\n+      new LinkedBlockingQueue<>(MAX_QUEUED_COMMANDS);\n \n   private boolean isAuthenticated;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMTkxNw==", "url": "https://github.com/apache/geode/pull/5488#discussion_r480231917", "bodyText": "I'd like to discuss what this should synchronize on. The method syncs on this (ExecutionHandlerContext) but the future it creates syncs on the channel. I think it would be better to sync on \"channel\" on this method instead of \"this\"", "author": "dschneider-pivotal", "createdAt": "2020-08-31T16:05:45Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java", "diffHunk": "@@ -139,6 +164,33 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n     }\n   }\n \n+  public EventLoopGroup getSubscriberGroup() {\n+    return subscriberGroup;\n+  }\n+\n+  public synchronized void changeChannelEventLoopGroup(EventLoopGroup newGroup,", "originalCommit": "dd2e3b010ef574f98773913ad8a512956a116159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NDY3NQ==", "url": "https://github.com/apache/geode/pull/5488#discussion_r480284675", "bodyText": "Switched method synchronization to synchronize on channel", "author": "jdeppe-pivotal", "createdAt": "2020-08-31T17:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMTkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "e40903cbc7083523f65f7c8f92d97ee25dc2ae2f", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\nindex 2216ec6093..70ae54d869 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\n\n@@ -168,27 +168,28 @@ public class ExecutionHandlerContext extends ChannelInboundHandlerAdapter {\n     return subscriberGroup;\n   }\n \n-  public synchronized void changeChannelEventLoopGroup(EventLoopGroup newGroup,\n-      Consumer<Boolean> callback) {\n-    if (newGroup.equals(channel.eventLoop())) {\n-      // already registered with newGroup\n-      callback.accept(true);\n-      return;\n-    }\n-    channel.deregister().addListener((ChannelFutureListener) future -> {\n-      boolean registerSuccess = true;\n-      synchronized (channel) {\n-        if (!channel.isRegistered()) {\n-          try {\n-            newGroup.register(channel).sync();\n-          } catch (Exception e) {\n-            logger.warn(\"Unable to register new EventLoopGroup: {}\", e.getMessage());\n-            registerSuccess = false;\n+  public void changeChannelEventLoopGroup(EventLoopGroup newGroup, Consumer<Boolean> callback) {\n+    synchronized (channel) {\n+      if (newGroup.equals(channel.eventLoop())) {\n+        // already registered with newGroup\n+        callback.accept(true);\n+        return;\n+      }\n+      channel.deregister().addListener((ChannelFutureListener) future -> {\n+        boolean registerSuccess = true;\n+        synchronized (channel) {\n+          if (!channel.isRegistered()) {\n+            try {\n+              newGroup.register(channel).sync();\n+            } catch (Exception e) {\n+              logger.warn(\"Unable to register new EventLoopGroup: {}\", e.getMessage());\n+              registerSuccess = false;\n+            }\n           }\n         }\n-      }\n-      callback.accept(registerSuccess);\n-    });\n+        callback.accept(registerSuccess);\n+      });\n+    }\n   }\n \n   private RedisResponse getExceptionResponse(ChannelHandlerContext ctx, Throwable cause) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNDM3Ng==", "url": "https://github.com/apache/geode/pull/5488#discussion_r480234376", "bodyText": "Does this warning message make sense? It might but I thought it would just say it FAILED I'm not sure about \"to return\"", "author": "dschneider-pivotal", "createdAt": "2020-08-31T16:10:11Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java", "diffHunk": "@@ -247,25 +306,16 @@ private RedisResponse handleUnAuthenticatedCommand(Command command) {\n     return response;\n   }\n \n-  public EventLoopGroup getSubscriberGroup() {\n-    return subscriberGroup;\n-  }\n-\n-  public void changeChannelEventLoopGroup(EventLoopGroup newGroup) {\n-    if (newGroup.equals(channel.eventLoop())) {\n-      // already registered with newGroup\n-      return;\n-    }\n-    channel.deregister().addListener((ChannelFutureListener) future -> {\n-      newGroup.register(channel).sync();\n-    });\n-  }\n-\n-  private void logResponse(RedisResponse response) {\n+  private void logResponse(RedisResponse response, String extraMessage, Throwable cause) {\n     if (logger.isDebugEnabled() && response != null) {\n       ByteBuf buf = response.encode(new UnpooledByteBufAllocator(false));\n-      logger.debug(\"Redis command returned: {}\",\n-          Command.getHexEncodedString(buf.array(), buf.readableBytes()));\n+      if (cause == null) {\n+        logger.debug(\"Redis command returned: {} - {}\",\n+            Command.getHexEncodedString(buf.array(), buf.readableBytes()), extraMessage);\n+      } else {\n+        logger.warn(\"Redis command FAILED to return: {} - {}\",", "originalCommit": "dd2e3b010ef574f98773913ad8a512956a116159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NDg4Nw==", "url": "https://github.com/apache/geode/pull/5488#discussion_r480284887", "bodyText": "Changed to debug", "author": "jdeppe-pivotal", "createdAt": "2020-08-31T17:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNDM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e40903cbc7083523f65f7c8f92d97ee25dc2ae2f", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\nindex 2216ec6093..70ae54d869 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java\n\n@@ -313,7 +314,7 @@ public class ExecutionHandlerContext extends ChannelInboundHandlerAdapter {\n         logger.debug(\"Redis command returned: {} - {}\",\n             Command.getHexEncodedString(buf.array(), buf.readableBytes()), extraMessage);\n       } else {\n-        logger.warn(\"Redis command FAILED to return: {} - {}\",\n+        logger.debug(\"Redis command FAILED to return: {} - {}\",\n             Command.getHexEncodedString(buf.array(), buf.readableBytes()), extraMessage, cause);\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNzQzOQ==", "url": "https://github.com/apache/geode/pull/5488#discussion_r480237439", "bodyText": "I think we should review the commandQueue code and see if we might continue to process commands in the queue after this happens. For example this code adds TERMINATE_COMMAND to the end of the queue so do we end up still processing any commands already queued? We should also check that the \"quit\" command does not allow commands queued after it to still be processed on the server", "author": "dschneider-pivotal", "createdAt": "2020-08-31T16:15:34Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java", "diffHunk": "@@ -192,43 +244,50 @@ public void channelInactive(ChannelHandlerContext ctx) {\n     if (logger.isDebugEnabled()) {\n       logger.debug(\"GeodeRedisServer-Connection closing with \" + ctx.channel().remoteAddress());\n     }\n+    commandQueue.offer(TERMINATE_COMMAND);", "originalCommit": "dd2e3b010ef574f98773913ad8a512956a116159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NTIxNw==", "url": "https://github.com/apache/geode/pull/5488#discussion_r480285217", "bodyText": "This will be addressed in a separate PR.", "author": "jdeppe-pivotal", "createdAt": "2020-08-31T17:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNzQzOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e40903cbc7083523f65f7c8f92d97ee25dc2ae2f", "url": "https://github.com/apache/geode/commit/e40903cbc7083523f65f7c8f92d97ee25dc2ae2f", "message": "Review updates", "committedDate": "2020-08-31T17:24:21Z", "type": "commit"}, {"oid": "f2c3ef922254deb0da971a66ae9745ebaf9aca5e", "url": "https://github.com/apache/geode/commit/f2c3ef922254deb0da971a66ae9745ebaf9aca5e", "message": "Here we go again", "committedDate": "2020-08-31T19:48:01Z", "type": "commit"}, {"oid": "235cf83059049aaef648c9c00b38cf1c6d00490f", "url": "https://github.com/apache/geode/commit/235cf83059049aaef648c9c00b38cf1c6d00490f", "message": "Move synchronize back to the method level", "committedDate": "2020-08-31T20:38:41Z", "type": "commit"}]}