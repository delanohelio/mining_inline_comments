{"pr_number": 5829, "pr_title": "GEODE-8765: Fix NullPointerException when group-transaction-events an\u2026", "pr_createdAt": "2020-12-09T13:47:17Z", "pr_url": "https://github.com/apache/geode/pull/5829", "timeline": [{"oid": "45a3d789a86fc9526446bff9d9f760f258c90187", "url": "https://github.com/apache/geode/commit/45a3d789a86fc9526446bff9d9f760f258c90187", "message": "GEODE-8765: Fix NullPointerException when group-transaction-events and events in and not in transactions are sent.\n\nA NullPointerException (caught later in the code) was\ngenerated when events without a transactionId in\ngateway sender queues were retrieved to complete\ntransactions.\nThe problem was that equals was invoked on a\npossibly null object (the transactionId).\nThe call has been rewritten to avoid the\nNullPointer exception.\n\nThe NullPointerException had different undesired effects\nin the Parallel and in the Serial Gateway senders.\n\nIn Parallel Gateway Senders it can provoke that events\nare left in the queue without ever being drained\nalthough all events are replicated.\nIn Serial Gateway Senders, the effect is much\nmore severe as once the NullPointerException is\nreached, no events from the queue are replicated.", "committedDate": "2020-12-09T15:21:29Z", "type": "commit"}, {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187", "url": "https://github.com/apache/geode/commit/45a3d789a86fc9526446bff9d9f760f258c90187", "message": "GEODE-8765: Fix NullPointerException when group-transaction-events and events in and not in transactions are sent.\n\nA NullPointerException (caught later in the code) was\ngenerated when events without a transactionId in\ngateway sender queues were retrieved to complete\ntransactions.\nThe problem was that equals was invoked on a\npossibly null object (the transactionId).\nThe call has been rewritten to avoid the\nNullPointer exception.\n\nThe NullPointerException had different undesired effects\nin the Parallel and in the Serial Gateway senders.\n\nIn Parallel Gateway Senders it can provoke that events\nare left in the queue without ever being drained\nalthough all events are replicated.\nIn Serial Gateway Senders, the effect is much\nmore severe as once the NullPointerException is\nreached, no events from the queue are replicated.", "committedDate": "2020-12-09T15:21:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NDk4OA==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540364988", "bodyText": "The compiler warning here can be fixed if List<GatewaySenderEventImpl> is used as the method argument. This also means that the for loop below can be replaced with\nfor (GatewaySenderEventImpl event : batch) {\n\nand the cast to GatewaySenderEventImpl can be removed.", "author": "DonalEvans", "createdAt": "2020-12-10T17:37:26Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -1389,6 +1383,21 @@ private void peekEventsFromIncompleteTransactions(List<GatewaySenderEventImpl> b\n     }\n   }\n \n+  private Map<TransactionId, Integer> getIncompleteTransactionsInBatch(List batch) {", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java b/geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java\nindex 97191b04df..2100d54785 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java\n\n@@ -1383,10 +1383,10 @@ public class ParallelGatewaySenderQueue implements RegionQueue {\n     }\n   }\n \n-  private Map<TransactionId, Integer> getIncompleteTransactionsInBatch(List batch) {\n+  private Map<TransactionId, Integer> getIncompleteTransactionsInBatch(\n+      List<GatewaySenderEventImpl> batch) {\n     Map<TransactionId, Integer> incompleteTransactionsInBatch = new HashMap<>();\n-    for (Object object : batch) {\n-      GatewaySenderEventImpl event = (GatewaySenderEventImpl) object;\n+    for (GatewaySenderEventImpl event : batch) {\n       if (event.getTransactionId() != null) {\n         if (event.isLastEventInTransaction()) {\n           incompleteTransactionsInBatch.remove(event.getTransactionId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4OTU5Ng==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540389596", "bodyText": "While not part of the changes in this PR, this method could be inlined, since it's used in only one place and is only one line.", "author": "DonalEvans", "createdAt": "2020-12-10T18:11:56Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -1389,6 +1383,21 @@ private void peekEventsFromIncompleteTransactions(List<GatewaySenderEventImpl> b\n     }\n   }\n \n+  private Map<TransactionId, Integer> getIncompleteTransactionsInBatch(List batch) {\n+    Map<TransactionId, Integer> incompleteTransactionsInBatch = new HashMap<>();\n+    for (Object object : batch) {\n+      GatewaySenderEventImpl event = (GatewaySenderEventImpl) object;\n+      if (event.getTransactionId() != null) {\n+        if (event.isLastEventInTransaction()) {\n+          incompleteTransactionsInBatch.remove(event.getTransactionId());\n+        } else {\n+          incompleteTransactionsInBatch.put(event.getTransactionId(), event.getBucketId());\n+        }\n+      }\n+    }\n+    return incompleteTransactionsInBatch;\n+  }\n+\n   private boolean areAllTransactionsCompleteInBatch(Map incompleteTransactions) {", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java b/geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java\nindex 97191b04df..2100d54785 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java\n\n@@ -1383,10 +1383,10 @@ public class ParallelGatewaySenderQueue implements RegionQueue {\n     }\n   }\n \n-  private Map<TransactionId, Integer> getIncompleteTransactionsInBatch(List batch) {\n+  private Map<TransactionId, Integer> getIncompleteTransactionsInBatch(\n+      List<GatewaySenderEventImpl> batch) {\n     Map<TransactionId, Integer> incompleteTransactionsInBatch = new HashMap<>();\n-    for (Object object : batch) {\n-      GatewaySenderEventImpl event = (GatewaySenderEventImpl) object;\n+    for (GatewaySenderEventImpl event : batch) {\n       if (event.getTransactionId() != null) {\n         if (event.isLastEventInTransaction()) {\n           incompleteTransactionsInBatch.remove(event.getTransactionId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5OTA2Ng==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540399066", "bodyText": "As with the similar method in ParallelGatewaySenderQueue, this method could also be inlined.", "author": "DonalEvans", "createdAt": "2020-12-10T18:26:36Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java", "diffHunk": "@@ -534,6 +523,23 @@ private boolean areAllTransactionsCompleteInBatch(Set incompleteTransactions) {\n     return (incompleteTransactions.size() == 0);", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java b/geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java\nindex d12a32f22a..192af19bce 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java\n\n@@ -519,11 +519,7 @@ public class SerialGatewaySenderQueue implements RegionQueue {\n     return sender.mustGroupTransactionEvents();\n   }\n \n-  private boolean areAllTransactionsCompleteInBatch(Set incompleteTransactions) {\n-    return (incompleteTransactions.size() == 0);\n-  }\n-\n-  private Set<TransactionId> getIncompleteTransactionsInBatch(List batch) {\n+  private Set<TransactionId> getIncompleteTransactionsInBatch(List<AsyncEvent<?, ?>> batch) {\n     Set<TransactionId> incompleteTransactionsInBatch = new HashSet<>();\n     for (Object object : batch) {\n       if (object instanceof GatewaySenderEventImpl) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTUyMQ==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540401521", "bodyText": "The compiler warning on this line and several others can be resolved by making batch a List<AsyncEvent<?,?>> here and the other places it's used. The lines requiring this change are 416, 421, 431-432, 438, 479 and 526.", "author": "DonalEvans", "createdAt": "2020-12-10T18:30:14Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java", "diffHunk": "@@ -487,12 +476,12 @@ public Object peek() throws CacheException {\n     // so no need to worry about off-heap refCount.\n   }\n \n-  private void peekEventsFromIncompleteTransactions(List<AsyncEvent> batch,\n-      Set<TransactionId> incompleteTransactionIdsInBatch, long lastKey) {\n+  private void peekEventsFromIncompleteTransactions(List<AsyncEvent> batch, long lastKey) {", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java b/geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java\nindex d12a32f22a..192af19bce 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java\n\n@@ -476,13 +476,13 @@ public class SerialGatewaySenderQueue implements RegionQueue {\n     // so no need to worry about off-heap refCount.\n   }\n \n-  private void peekEventsFromIncompleteTransactions(List<AsyncEvent> batch, long lastKey) {\n+  private void peekEventsFromIncompleteTransactions(List<AsyncEvent<?, ?>> batch, long lastKey) {\n     if (!mustGroupTransactionEvents()) {\n       return;\n     }\n \n     Set<TransactionId> incompleteTransactionIdsInBatch = getIncompleteTransactionsInBatch(batch);\n-    if (areAllTransactionsCompleteInBatch(incompleteTransactionIdsInBatch)) {\n+    if (incompleteTransactionIdsInBatch.size() == 0) {\n       return;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxMjAwOA==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540412008", "bodyText": "To make the numbering a little more consistent, could this event's key be 2, and the subsequent events have their key values increased by 1? That way the calls to bucketRegionQueue.addToQueue() will have matching keys with the keys here.", "author": "DonalEvans", "createdAt": "2020-12-10T18:46:45Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java", "diffHunk": "@@ -148,6 +149,7 @@ public void testGetElementsMatchingWithHasTransactionIdPredicateAndIsLastEventIn\n     TransactionId tx3 = new TXId(null, 3);\n \n     GatewaySenderEventImpl event1 = createMockGatewaySenderEvent(1, tx1, false);\n+    GatewaySenderEventImpl eventNotInTransaction1 = createMockGatewaySenderEvent(8, null, false);", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\nindex a3da34ddcd..427983217c 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\n\n@@ -141,33 +140,32 @@ public class BucketRegionQueueJUnitTest {\n   @Test\n   public void testGetElementsMatchingWithParallelGatewaySenderQueuePredicatesAndSomeEventsNotInTransactions()\n       throws ForceReattemptException {\n-    ParallelGatewaySenderEventProcessor processor =\n-        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n+    ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n \n     TransactionId tx1 = new TXId(null, 1);\n     TransactionId tx2 = new TXId(null, 2);\n     TransactionId tx3 = new TXId(null, 3);\n \n     GatewaySenderEventImpl event1 = createMockGatewaySenderEvent(1, tx1, false);\n-    GatewaySenderEventImpl eventNotInTransaction1 = createMockGatewaySenderEvent(8, null, false);\n-    GatewaySenderEventImpl event2 = createMockGatewaySenderEvent(2, tx2, false);\n-    GatewaySenderEventImpl event3 = createMockGatewaySenderEvent(3, tx1, true);\n-    GatewaySenderEventImpl event4 = createMockGatewaySenderEvent(4, tx2, true);\n-    GatewaySenderEventImpl event5 = createMockGatewaySenderEvent(5, tx3, false);\n-    GatewaySenderEventImpl event6 = createMockGatewaySenderEvent(6, tx3, false);\n-    GatewaySenderEventImpl event7 = createMockGatewaySenderEvent(7, tx1, true);\n+    GatewaySenderEventImpl eventNotInTransaction1 = createMockGatewaySenderEvent(2, null, false);\n+    GatewaySenderEventImpl event2 = createMockGatewaySenderEvent(3, tx2, false);\n+    GatewaySenderEventImpl event3 = createMockGatewaySenderEvent(4, tx1, true);\n+    GatewaySenderEventImpl event4 = createMockGatewaySenderEvent(5, tx2, true);\n+    GatewaySenderEventImpl event5 = createMockGatewaySenderEvent(6, tx3, false);\n+    GatewaySenderEventImpl event6 = createMockGatewaySenderEvent(7, tx3, false);\n+    GatewaySenderEventImpl event7 = createMockGatewaySenderEvent(8, tx1, true);\n \n     this.bucketRegionQueue\n         .cleanUpDestroyedTokensAndMarkGIIComplete(InitialImageOperation.GIIStatus.NO_GII);\n \n-    this.bucketRegionQueue.addToQueue(Long.valueOf(1), event1);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(2), eventNotInTransaction1);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(3), event2);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(4), event3);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(5), event4);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(6), event5);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(7), event6);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(8), event7);\n+    this.bucketRegionQueue.addToQueue(1L, event1);\n+    this.bucketRegionQueue.addToQueue(2L, eventNotInTransaction1);\n+    this.bucketRegionQueue.addToQueue(3L, event2);\n+    this.bucketRegionQueue.addToQueue(4L, event3);\n+    this.bucketRegionQueue.addToQueue(5L, event4);\n+    this.bucketRegionQueue.addToQueue(6L, event5);\n+    this.bucketRegionQueue.addToQueue(7L, event6);\n+    this.bucketRegionQueue.addToQueue(8L, event7);\n \n     Predicate<GatewaySenderEventImpl> hasTransactionIdPredicate =\n         ParallelGatewaySenderQueue.getHasTransactionIdPredicate(tx1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxMjM4OQ==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540412389", "bodyText": "These calls to Long.valueOf() can be replaced with just 1L, 2L etc.", "author": "DonalEvans", "createdAt": "2020-12-10T18:47:19Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java", "diffHunk": "@@ -159,17 +161,18 @@ public void testGetElementsMatchingWithHasTransactionIdPredicateAndIsLastEventIn\n         .cleanUpDestroyedTokensAndMarkGIIComplete(InitialImageOperation.GIIStatus.NO_GII);\n \n     this.bucketRegionQueue.addToQueue(Long.valueOf(1), event1);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(2), event2);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(3), event3);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(4), event4);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(5), event5);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(6), event6);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(7), event7);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(2), eventNotInTransaction1);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(3), event2);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(4), event3);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(5), event4);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(6), event5);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(7), event6);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(8), event7);", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\nindex a3da34ddcd..427983217c 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\n\n@@ -141,33 +140,32 @@ public class BucketRegionQueueJUnitTest {\n   @Test\n   public void testGetElementsMatchingWithParallelGatewaySenderQueuePredicatesAndSomeEventsNotInTransactions()\n       throws ForceReattemptException {\n-    ParallelGatewaySenderEventProcessor processor =\n-        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n+    ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n \n     TransactionId tx1 = new TXId(null, 1);\n     TransactionId tx2 = new TXId(null, 2);\n     TransactionId tx3 = new TXId(null, 3);\n \n     GatewaySenderEventImpl event1 = createMockGatewaySenderEvent(1, tx1, false);\n-    GatewaySenderEventImpl eventNotInTransaction1 = createMockGatewaySenderEvent(8, null, false);\n-    GatewaySenderEventImpl event2 = createMockGatewaySenderEvent(2, tx2, false);\n-    GatewaySenderEventImpl event3 = createMockGatewaySenderEvent(3, tx1, true);\n-    GatewaySenderEventImpl event4 = createMockGatewaySenderEvent(4, tx2, true);\n-    GatewaySenderEventImpl event5 = createMockGatewaySenderEvent(5, tx3, false);\n-    GatewaySenderEventImpl event6 = createMockGatewaySenderEvent(6, tx3, false);\n-    GatewaySenderEventImpl event7 = createMockGatewaySenderEvent(7, tx1, true);\n+    GatewaySenderEventImpl eventNotInTransaction1 = createMockGatewaySenderEvent(2, null, false);\n+    GatewaySenderEventImpl event2 = createMockGatewaySenderEvent(3, tx2, false);\n+    GatewaySenderEventImpl event3 = createMockGatewaySenderEvent(4, tx1, true);\n+    GatewaySenderEventImpl event4 = createMockGatewaySenderEvent(5, tx2, true);\n+    GatewaySenderEventImpl event5 = createMockGatewaySenderEvent(6, tx3, false);\n+    GatewaySenderEventImpl event6 = createMockGatewaySenderEvent(7, tx3, false);\n+    GatewaySenderEventImpl event7 = createMockGatewaySenderEvent(8, tx1, true);\n \n     this.bucketRegionQueue\n         .cleanUpDestroyedTokensAndMarkGIIComplete(InitialImageOperation.GIIStatus.NO_GII);\n \n-    this.bucketRegionQueue.addToQueue(Long.valueOf(1), event1);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(2), eventNotInTransaction1);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(3), event2);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(4), event3);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(5), event4);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(6), event5);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(7), event6);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(8), event7);\n+    this.bucketRegionQueue.addToQueue(1L, event1);\n+    this.bucketRegionQueue.addToQueue(2L, eventNotInTransaction1);\n+    this.bucketRegionQueue.addToQueue(3L, event2);\n+    this.bucketRegionQueue.addToQueue(4L, event3);\n+    this.bucketRegionQueue.addToQueue(5L, event4);\n+    this.bucketRegionQueue.addToQueue(6L, event5);\n+    this.bucketRegionQueue.addToQueue(7L, event6);\n+    this.bucketRegionQueue.addToQueue(8L, event7);\n \n     Predicate<GatewaySenderEventImpl> hasTransactionIdPredicate =\n         ParallelGatewaySenderQueue.getHasTransactionIdPredicate(tx1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxOTE5NQ==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540419195", "bodyText": "Is it necessary to create a new overloaded method here? There is already a method setNumDispatcherThreadsForTheRun() in WANTestBase that allows this value to be set to whatever is desired.", "author": "DonalEvans", "createdAt": "2020-12-10T18:57:59Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -1737,26 +1737,37 @@ public static GatewaySenderFactory configureGateway(DiskStoreFactory dsf, File[]\n     return gateway;\n   }\n \n+  public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n+      Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n+      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents) {\n+    createSender(dsName, remoteDsId, isParallel, maxMemory, batchSize, isConflation, isPersistent,\n+        filter, isManualStart, groupTransactionEvents, 0);\n+  }\n+\n   public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n       Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n       GatewayEventFilter filter, boolean isManualStart) {\n     createSender(dsName, remoteDsId, isParallel, maxMemory, batchSize, isConflation, isPersistent,\n-        filter, isManualStart, false);\n+        filter, isManualStart, false, 0);\n   }\n \n   public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n       Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n-      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents) {\n+      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents,\n+      int dispatcherThreads) {", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\nindex 679e5b104b..b75e068867 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n\n@@ -1737,24 +1737,16 @@ public class WANTestBase extends DistributedTestCase {\n     return gateway;\n   }\n \n-  public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n-      Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n-      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents) {\n-    createSender(dsName, remoteDsId, isParallel, maxMemory, batchSize, isConflation, isPersistent,\n-        filter, isManualStart, groupTransactionEvents, 0);\n-  }\n-\n   public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n       Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n       GatewayEventFilter filter, boolean isManualStart) {\n     createSender(dsName, remoteDsId, isParallel, maxMemory, batchSize, isConflation, isPersistent,\n-        filter, isManualStart, false, 0);\n+        filter, isManualStart, false);\n   }\n \n   public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n       Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n-      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents,\n-      int dispatcherThreads) {\n+      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents) {\n     final IgnoredException exln = IgnoredException.addIgnoredException(\"Could not connect\");\n     try {\n       File persistentDirectory =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyMzIxNQ==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540423215", "bodyText": "Compiler warnings on this line can be fixed by using\nfinal Map<Object, Object> keyValuesInTransactions = new HashMap<>();", "author": "DonalEvans", "createdAt": "2020-12-10T19:04:33Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1235,6 +1242,107 @@ public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenA\n     vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n   }\n \n+  @Test\n+  public void testPartitionedParallelPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+    createReceiverInVMs(vm2, vm3);\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm5.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm6.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm7.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm5.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm6.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm7.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm2.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+    vm3.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+\n+    int customers = 4;\n+\n+    int transactionsPerCustomer = 1000;\n+    final Map keyValuesInTransactions = new HashMap();", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex 2fa88be05c..67ef206c69 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -1252,14 +1252,19 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n     createReceiverInVMs(vm2, vm3);\n     createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n \n+    vm4.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm5.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm6.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm7.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+\n     vm4.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm5.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm6.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm7.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n \n     vm4.invoke(\n         () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNTI0MA==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540425240", "bodyText": "Compiler warnings on this line can be fixed by using\nfinal Map<Object, Object> keyValuesNotInTransactions = new HashMap<>();", "author": "DonalEvans", "createdAt": "2020-12-10T19:07:28Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1235,6 +1242,107 @@ public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenA\n     vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n   }\n \n+  @Test\n+  public void testPartitionedParallelPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+    createReceiverInVMs(vm2, vm3);\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm5.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm6.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm7.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm5.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm6.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm7.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm2.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+    vm3.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+\n+    int customers = 4;\n+\n+    int transactionsPerCustomer = 1000;\n+    final Map keyValuesInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < transactionsPerCustomer; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i, custIdObject);\n+        ShipmentId shipmentId1 = new ShipmentId(i, orderId);\n+        ShipmentId shipmentId2 = new ShipmentId(i + 1, orderId);\n+        ShipmentId shipmentId3 = new ShipmentId(i + 2, orderId);\n+        keyValuesInTransactions.put(orderId, new Order());\n+        keyValuesInTransactions.put(shipmentId1, new Shipment());\n+        keyValuesInTransactions.put(shipmentId2, new Shipment());\n+        keyValuesInTransactions.put(shipmentId3, new Shipment());\n+      }\n+    }\n+\n+    int ordersPerCustomerNotInTransactions = 1000;\n+\n+    final Map keyValuesNotInTransactions = new HashMap();", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex 2fa88be05c..67ef206c69 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -1252,14 +1252,19 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n     createReceiverInVMs(vm2, vm3);\n     createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n \n+    vm4.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm5.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm6.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm7.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+\n     vm4.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm5.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm6.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm7.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n \n     vm4.invoke(\n         () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNjA0MA==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540426040", "bodyText": "The compiler warning here can be removed by using AsyncInvocation<Void>.", "author": "DonalEvans", "createdAt": "2020-12-10T19:08:58Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1235,6 +1242,107 @@ public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenA\n     vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n   }\n \n+  @Test\n+  public void testPartitionedParallelPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+    createReceiverInVMs(vm2, vm3);\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm5.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm6.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm7.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm5.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm6.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm7.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm2.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+    vm3.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+\n+    int customers = 4;\n+\n+    int transactionsPerCustomer = 1000;\n+    final Map keyValuesInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < transactionsPerCustomer; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i, custIdObject);\n+        ShipmentId shipmentId1 = new ShipmentId(i, orderId);\n+        ShipmentId shipmentId2 = new ShipmentId(i + 1, orderId);\n+        ShipmentId shipmentId3 = new ShipmentId(i + 2, orderId);\n+        keyValuesInTransactions.put(orderId, new Order());\n+        keyValuesInTransactions.put(shipmentId1, new Shipment());\n+        keyValuesInTransactions.put(shipmentId2, new Shipment());\n+        keyValuesInTransactions.put(shipmentId3, new Shipment());\n+      }\n+    }\n+\n+    int ordersPerCustomerNotInTransactions = 1000;\n+\n+    final Map keyValuesNotInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < ordersPerCustomerNotInTransactions; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i + transactionsPerCustomer * customers, custIdObject);\n+        keyValuesNotInTransactions.put(orderId, new Order());\n+      }\n+    }\n+\n+    // eventsPerTransaction is 1 (orders) + 3 (shipments)\n+    int eventsPerTransaction = 4;\n+    AsyncInvocation inv1 =", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex 2fa88be05c..67ef206c69 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -1252,14 +1252,19 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n     createReceiverInVMs(vm2, vm3);\n     createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n \n+    vm4.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm5.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm6.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm7.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+\n     vm4.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm5.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm6.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm7.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n \n     vm4.invoke(\n         () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNjA2Ng==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540426066", "bodyText": "The compiler warning here can be removed by using AsyncInvocation<Void>.", "author": "DonalEvans", "createdAt": "2020-12-10T19:09:02Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1235,6 +1242,107 @@ public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenA\n     vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n   }\n \n+  @Test\n+  public void testPartitionedParallelPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+    createReceiverInVMs(vm2, vm3);\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm5.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm6.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm7.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm5.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm6.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm7.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm2.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+    vm3.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+\n+    int customers = 4;\n+\n+    int transactionsPerCustomer = 1000;\n+    final Map keyValuesInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < transactionsPerCustomer; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i, custIdObject);\n+        ShipmentId shipmentId1 = new ShipmentId(i, orderId);\n+        ShipmentId shipmentId2 = new ShipmentId(i + 1, orderId);\n+        ShipmentId shipmentId3 = new ShipmentId(i + 2, orderId);\n+        keyValuesInTransactions.put(orderId, new Order());\n+        keyValuesInTransactions.put(shipmentId1, new Shipment());\n+        keyValuesInTransactions.put(shipmentId2, new Shipment());\n+        keyValuesInTransactions.put(shipmentId3, new Shipment());\n+      }\n+    }\n+\n+    int ordersPerCustomerNotInTransactions = 1000;\n+\n+    final Map keyValuesNotInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < ordersPerCustomerNotInTransactions; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i + transactionsPerCustomer * customers, custIdObject);\n+        keyValuesNotInTransactions.put(orderId, new Order());\n+      }\n+    }\n+\n+    // eventsPerTransaction is 1 (orders) + 3 (shipments)\n+    int eventsPerTransaction = 4;\n+    AsyncInvocation inv1 =\n+        vm7.invokeAsync(\n+            () -> WANTestBase.doOrderAndShipmentPutsInsideTransactions(keyValuesInTransactions,\n+                eventsPerTransaction));\n+\n+    AsyncInvocation inv2 =", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex 2fa88be05c..67ef206c69 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -1252,14 +1252,19 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n     createReceiverInVMs(vm2, vm3);\n     createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n \n+    vm4.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm5.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm6.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+    vm7.invoke(() -> setNumDispatcherThreadsForTheRun(2));\n+\n     vm4.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm5.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm6.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n     vm7.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true));\n \n     vm4.invoke(\n         () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNjkxMA==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540426910", "bodyText": "All comments that apply to ParallelWANPropagationDUnitTest also apply to this test method, since the code in both tests is largely identical.", "author": "DonalEvans", "createdAt": "2020-12-10T19:10:25Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagation_PartitionedRegionDUnitTest.java", "diffHunk": "@@ -371,4 +379,107 @@ public void testPartitionedSerialPropagationWithParallelThreads() throws Excepti\n     vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 1000));\n     vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 1000));\n   }\n+\n+  @Test\n+  public void testPartitionedSerialPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagation_PartitionedRegionDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagation_PartitionedRegionDUnitTest.java\nindex 346e72b3ec..5604a96a10 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagation_PartitionedRegionDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagation_PartitionedRegionDUnitTest.java\n\n@@ -390,14 +390,19 @@ public class SerialWANPropagation_PartitionedRegionDUnitTest extends WANTestBase\n     createReceiverInVMs(vm2, vm3);\n     createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n \n+    vm4.invoke(() -> setNumDispatcherThreadsForTheRun(1));\n+    vm5.invoke(() -> setNumDispatcherThreadsForTheRun(1));\n+    vm6.invoke(() -> setNumDispatcherThreadsForTheRun(1));\n+    vm7.invoke(() -> setNumDispatcherThreadsForTheRun(1));\n+\n     vm4.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true, true, 1));\n+        () -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true, true));\n     vm5.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true, true, 1));\n+        () -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true, true));\n     vm6.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true, true, 1));\n+        () -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true, true));\n     vm7.invoke(\n-        () -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true, true, 1));\n+        () -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true, true));\n \n \n     vm4.invoke(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzMjUzNA==", "url": "https://github.com/apache/geode/pull/5829#discussion_r540432534", "bodyText": "This variable is never used, so these lines could be just\nParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);", "author": "DonalEvans", "createdAt": "2020-12-10T19:19:31Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java", "diffHunk": "@@ -138,7 +139,7 @@ public void testBasicDestroyConflationEnabledAndValueNotInRegion() {\n   }\n \n   @Test\n-  public void testGetElementsMatchingWithHasTransactionIdPredicateAndIsLastEventInTransactionPredicate()\n+  public void testGetElementsMatchingWithParallelGatewaySenderQueuePredicatesAndSomeEventsNotInTransactions()\n       throws ForceReattemptException {\n     ParallelGatewaySenderEventProcessor processor =\n         ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);", "originalCommit": "45a3d789a86fc9526446bff9d9f760f258c90187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246d30dc1a6c21cc343e464c923dd28564227bcf", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java b/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\nindex a3da34ddcd..427983217c 100644\n--- a/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java\n\n@@ -141,33 +140,32 @@ public class BucketRegionQueueJUnitTest {\n   @Test\n   public void testGetElementsMatchingWithParallelGatewaySenderQueuePredicatesAndSomeEventsNotInTransactions()\n       throws ForceReattemptException {\n-    ParallelGatewaySenderEventProcessor processor =\n-        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n+    ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n \n     TransactionId tx1 = new TXId(null, 1);\n     TransactionId tx2 = new TXId(null, 2);\n     TransactionId tx3 = new TXId(null, 3);\n \n     GatewaySenderEventImpl event1 = createMockGatewaySenderEvent(1, tx1, false);\n-    GatewaySenderEventImpl eventNotInTransaction1 = createMockGatewaySenderEvent(8, null, false);\n-    GatewaySenderEventImpl event2 = createMockGatewaySenderEvent(2, tx2, false);\n-    GatewaySenderEventImpl event3 = createMockGatewaySenderEvent(3, tx1, true);\n-    GatewaySenderEventImpl event4 = createMockGatewaySenderEvent(4, tx2, true);\n-    GatewaySenderEventImpl event5 = createMockGatewaySenderEvent(5, tx3, false);\n-    GatewaySenderEventImpl event6 = createMockGatewaySenderEvent(6, tx3, false);\n-    GatewaySenderEventImpl event7 = createMockGatewaySenderEvent(7, tx1, true);\n+    GatewaySenderEventImpl eventNotInTransaction1 = createMockGatewaySenderEvent(2, null, false);\n+    GatewaySenderEventImpl event2 = createMockGatewaySenderEvent(3, tx2, false);\n+    GatewaySenderEventImpl event3 = createMockGatewaySenderEvent(4, tx1, true);\n+    GatewaySenderEventImpl event4 = createMockGatewaySenderEvent(5, tx2, true);\n+    GatewaySenderEventImpl event5 = createMockGatewaySenderEvent(6, tx3, false);\n+    GatewaySenderEventImpl event6 = createMockGatewaySenderEvent(7, tx3, false);\n+    GatewaySenderEventImpl event7 = createMockGatewaySenderEvent(8, tx1, true);\n \n     this.bucketRegionQueue\n         .cleanUpDestroyedTokensAndMarkGIIComplete(InitialImageOperation.GIIStatus.NO_GII);\n \n-    this.bucketRegionQueue.addToQueue(Long.valueOf(1), event1);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(2), eventNotInTransaction1);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(3), event2);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(4), event3);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(5), event4);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(6), event5);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(7), event6);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(8), event7);\n+    this.bucketRegionQueue.addToQueue(1L, event1);\n+    this.bucketRegionQueue.addToQueue(2L, eventNotInTransaction1);\n+    this.bucketRegionQueue.addToQueue(3L, event2);\n+    this.bucketRegionQueue.addToQueue(4L, event3);\n+    this.bucketRegionQueue.addToQueue(5L, event4);\n+    this.bucketRegionQueue.addToQueue(6L, event5);\n+    this.bucketRegionQueue.addToQueue(7L, event6);\n+    this.bucketRegionQueue.addToQueue(8L, event7);\n \n     Predicate<GatewaySenderEventImpl> hasTransactionIdPredicate =\n         ParallelGatewaySenderQueue.getHasTransactionIdPredicate(tx1);\n"}}, {"oid": "246d30dc1a6c21cc343e464c923dd28564227bcf", "url": "https://github.com/apache/geode/commit/246d30dc1a6c21cc343e464c923dd28564227bcf", "message": "GEODE-8765: Code clean up after review", "committedDate": "2020-12-11T11:16:43Z", "type": "commit"}]}