{"pr_number": 4904, "pr_title": "GEODE-7947 Implement tests for EXPIRE-related functionality", "pr_createdAt": "2020-04-03T19:29:03Z", "pr_url": "https://github.com/apache/geode/pull/4904", "timeline": [{"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "url": "https://github.com/apache/geode/commit/ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "message": "GEODE-7947 Implement tests for EXPIRE-related functionality", "committedDate": "2020-04-03T19:24:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NTEzNA==", "url": "https://github.com/apache/geode/pull/4904#discussion_r403365134", "bodyText": "I noticed a warning raw use of paramtrized 'GenericContainer'.  Above on the line declaring redisContainer it might be nice to actually declare as GenericContainer<WHATEVER THE TYPE IS> redisContainer.  At the very least, you use empty angle brackers in the initialization new GenericContainer<>(\"redis:5.0.6\")\nSame comment for ExpireDockerAcceptanceTest and PexpireDockerAcceptanceTest", "author": "moleske", "createdAt": "2020-04-03T22:25:10Z", "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/ExpireAtDockerAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.experimental.categories.Category;\n+import org.testcontainers.containers.GenericContainer;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.redis.general.ExpireAtIntegrationTest;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class ExpireAtDockerAcceptanceTest extends ExpireAtIntegrationTest {\n+\n+  private static GenericContainer redisContainer;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    redisContainer = new GenericContainer(\"redis:5.0.6\").withExposedPorts(6379);", "originalCommit": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExNDU2NQ==", "url": "https://github.com/apache/geode/pull/4904#discussion_r404114565", "bodyText": "We added the \"<>\" operator as the simplest way to resolve it. I fully grasp why \"tests extending tests\" are generally a bad idea. In this case, though, we're trying to run the exact same tests against both Redis and Geode Redis, so this seems like the simplest way to get there.", "author": "ringles", "createdAt": "2020-04-06T14:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NTEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "c00b623d73658e8035483c40bd851952902da70b", "chunk": "diff --git a/geode-redis/src/acceptanceTest/java/org/apache/geode/redis/ExpireAtDockerAcceptanceTest.java b/geode-redis/src/acceptanceTest/java/org/apache/geode/redis/ExpireAtDockerAcceptanceTest.java\nindex abefee679c..017239d5f0 100644\n--- a/geode-redis/src/acceptanceTest/java/org/apache/geode/redis/ExpireAtDockerAcceptanceTest.java\n+++ b/geode-redis/src/acceptanceTest/java/org/apache/geode/redis/ExpireAtDockerAcceptanceTest.java\n\n@@ -27,11 +27,9 @@ import org.apache.geode.test.junit.categories.RedisTest;\n @Category({RedisTest.class})\n public class ExpireAtDockerAcceptanceTest extends ExpireAtIntegrationTest {\n \n-  private static GenericContainer redisContainer;\n-\n   @BeforeClass\n   public static void setUp() {\n-    redisContainer = new GenericContainer(\"redis:5.0.6\").withExposedPorts(6379);\n+    GenericContainer redisContainer = new GenericContainer<>(\"redis:5.0.6\").withExposedPorts(6379);\n     redisContainer.start();\n     jedis = new Jedis(\"localhost\", redisContainer.getFirstMappedPort(), REDIS_CLIENT_TIMEOUT);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NTk0OA==", "url": "https://github.com/apache/geode/pull/4904#discussion_r403365948", "bodyText": "Since you were already in this file, might be worth making the line below use a capital \"L\"\nlong millisecondsToLive = 20000L", "author": "moleske", "createdAt": "2020-04-03T22:27:48Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PexpireIntegrationTest.java", "diffHunk": "@@ -27,27 +27,27 @@\n \n public class PexpireIntegrationTest {\n \n-  private static Jedis jedis;\n+  public static Jedis jedis;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n   private static GeodeRedisServer server;\n \n   @BeforeClass\n   public static void setUp() {\n     int port = AvailablePortHelper.getRandomAvailableTCPPort();\n-    int TIMEOUT = 10000000;\n \n     server = new GeodeRedisServer(\"localhost\", port);\n     server.start();\n-    jedis = new Jedis(\"localhost\", port, TIMEOUT);\n+    jedis = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n   }\n \n   @AfterClass\n-  public static void tearDown() {\n+  public static void classLevelTearDown() {\n     jedis.close();\n     server.shutdown();\n   }\n \n   @Test\n-  public void Should_SetExpiration_givenKeyTo_StringValueInMilliSeconds() {\n+  public void should_SetExpiration_givenKeyTo_StringValueInMilliSeconds() {\n \n     String key = \"key\";\n     String value = \"value\";", "originalCommit": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExNDcxMQ==", "url": "https://github.com/apache/geode/pull/4904#discussion_r404114711", "bodyText": "Done!", "author": "ringles", "createdAt": "2020-04-06T14:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NTk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c00b623d73658e8035483c40bd851952902da70b", "chunk": "diff --git a/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PexpireIntegrationTest.java b/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PexpireIntegrationTest.java\nindex a99c0a2aee..e16a086d88 100644\n--- a/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PexpireIntegrationTest.java\n+++ b/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PexpireIntegrationTest.java\n\n@@ -51,7 +51,7 @@ public class PexpireIntegrationTest {\n \n     String key = \"key\";\n     String value = \"value\";\n-    long millisecondsToLive = 20000l;\n+    long millisecondsToLive = 20000L;\n \n     jedis.set(key, value);\n     Long timeToLive = jedis.ttl(key);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NzEwMQ==", "url": "https://github.com/apache/geode/pull/4904#discussion_r403367101", "bodyText": "rand is unused in the file.  And port below could be local to the setUp method", "author": "moleske", "createdAt": "2020-04-03T22:31:17Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireIntegrationTest.java", "diffHunk": "@@ -37,7 +37,8 @@\n \n public class ExpireIntegrationTest {\n \n-  private static Jedis jedis;\n+  public static Jedis jedis;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n   private static GeodeRedisServer server;\n   private static GemFireCache cache;\n   private static Random rand;", "originalCommit": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExNzA0Nw==", "url": "https://github.com/apache/geode/pull/4904#discussion_r404117047", "bodyText": "Good catch, \"rand\" was leftover from earlier tests.", "author": "ringles", "createdAt": "2020-04-06T14:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NzEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c00b623d73658e8035483c40bd851952902da70b", "chunk": "diff --git a/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireIntegrationTest.java b/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireIntegrationTest.java\nindex 43f2f56e80..b6efa04fe3 100644\n--- a/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireIntegrationTest.java\n+++ b/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireIntegrationTest.java\n\n@@ -41,18 +41,15 @@ public class ExpireIntegrationTest {\n   public static int REDIS_CLIENT_TIMEOUT = 10000000;\n   private static GeodeRedisServer server;\n   private static GemFireCache cache;\n-  private static Random rand;\n-  private static int port = 6379;\n \n   @BeforeClass\n   public static void setUp() {\n-    rand = new Random();\n     CacheFactory cf = new CacheFactory();\n     cf.set(LOG_LEVEL, \"error\");\n     cf.set(MCAST_PORT, \"0\");\n     cf.set(LOCATORS, \"\");\n     cache = cf.create();\n-    port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    int port = AvailablePortHelper.getRandomAvailableTCPPort();\n     server = new GeodeRedisServer(\"localhost\", port);\n \n     server.start();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2ODQ5Nw==", "url": "https://github.com/apache/geode/pull/4904#discussion_r403368497", "bodyText": "0L would be good here instead of 0l.", "author": "moleske", "createdAt": "2020-04-03T22:36:09Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireAtIntegrationTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+\n+public class ExpireAtIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private long unixTimeStampInTheFutureInSeconds;\n+  private long unixTimeStampFromThePast = 0l;", "originalCommit": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExNzE4Nw==", "url": "https://github.com/apache/geode/pull/4904#discussion_r404117187", "bodyText": "Done!", "author": "ringles", "createdAt": "2020-04-06T14:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2ODQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c00b623d73658e8035483c40bd851952902da70b", "chunk": "diff --git a/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireAtIntegrationTest.java b/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireAtIntegrationTest.java\nindex d3af91b7c3..5d80d319fe 100644\n--- a/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireAtIntegrationTest.java\n+++ b/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireAtIntegrationTest.java\n\n@@ -34,7 +34,7 @@ public class ExpireAtIntegrationTest {\n   public static int REDIS_CLIENT_TIMEOUT = 10000000;\n   private static GeodeRedisServer server;\n   private long unixTimeStampInTheFutureInSeconds;\n-  private long unixTimeStampFromThePast = 0l;\n+  private long unixTimeStampFromThePast = 0L;\n   String key = \"key\";\n   String value = \"value\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2OTA0OA==", "url": "https://github.com/apache/geode/pull/4904#discussion_r403369048", "bodyText": "The private final fields can all be local, except for ERROR_TIMESTAMP_NOT_USABLE which is unused", "author": "moleske", "createdAt": "2020-04-03T22:38:01Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java", "diffHunk": "@@ -22,6 +24,7 @@\n import org.apache.geode.redis.internal.ExecutionHandlerContext;\n import org.apache.geode.redis.internal.Extendable;\n import org.apache.geode.redis.internal.RedisConstants.ArityDef;\n+import org.apache.geode.redis.internal.RedisDataType;\n import org.apache.geode.redis.internal.RegionProvider;\n \n public class ExpireAtExecutor extends AbstractExecutor implements Extendable {", "originalCommit": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExODY1Nw==", "url": "https://github.com/apache/geode/pull/4904#discussion_r404118657", "bodyText": "I remember killing \"ERROR_TIMESTAMP_NOT_USABLE\", darn it!", "author": "ringles", "createdAt": "2020-04-06T14:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2OTA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c00b623d73658e8035483c40bd851952902da70b", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java\nindex 5730ffe342..a83c0ce4f1 100755\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java\n\n@@ -29,17 +29,12 @@ import org.apache.geode.redis.internal.RegionProvider;\n \n public class ExpireAtExecutor extends AbstractExecutor implements Extendable {\n \n-  private final String ERROR_TIMESTAMP_NOT_USABLE = \"The timestamp specified must be numeric\";\n-\n-  private final int TIMESTAMP_INDEX = 2;\n-\n-  private final int SET = 1;\n-\n-  private final int NOT_SET = 0;\n-\n   @Override\n   public void executeCommand(Command command, ExecutionHandlerContext context) {\n     List<byte[]> commandElems = command.getProcessedCommand();\n+    int SET = 1;\n+    int NOT_SET = 0;\n+    int TIMESTAMP_INDEX = 2;\n \n     if (commandElems.size() != 3) {\n       command.setResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2OTg1MA==", "url": "https://github.com/apache/geode/pull/4904#discussion_r403369850", "bodyText": "You could remove the initialization if you want since it is redundant", "author": "moleske", "createdAt": "2020-04-03T22:40:43Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java", "diffHunk": "@@ -62,18 +68,29 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n     long currentTimeMillis = System.currentTimeMillis();\n \n     if (timestamp <= currentTimeMillis) {\n-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_SET));\n+      int result = NOT_SET;\n+      RedisDataType redisDataType = context.getKeyRegistrar().getType(wKey);\n+\n+      if (redisDataType != null) {\n+        regionProvider.getRegionForType(redisDataType).remove(wKey);\n+        result = SET;\n+      }\n+\n+      command.setResponse(\n+          Coder.getIntegerResponse(\n+              context.getByteBufAllocator(),\n+              result));\n       return;\n     }\n \n     long delayMillis = timestamp - currentTimeMillis;\n \n     boolean expirationSet = false;", "originalCommit": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExODg4Nw==", "url": "https://github.com/apache/geode/pull/4904#discussion_r404118887", "bodyText": "Finito.", "author": "ringles", "createdAt": "2020-04-06T14:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2OTg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c00b623d73658e8035483c40bd851952902da70b", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java\nindex 5730ffe342..a83c0ce4f1 100755\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java\n\n@@ -85,7 +80,7 @@ public class ExpireAtExecutor extends AbstractExecutor implements Extendable {\n \n     long delayMillis = timestamp - currentTimeMillis;\n \n-    boolean expirationSet = false;\n+    boolean expirationSet;\n \n     if (regionProvider.hasExpiration(wKey)) {\n       expirationSet = regionProvider.modifyExpiration(wKey, delayMillis);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MTY2OA==", "url": "https://github.com/apache/geode/pull/4904#discussion_r403371668", "bodyText": "private finals could be local.  Though maybe since these are the same as ExpireAtExecutor they should be abstracted?  Though I would also wait for rule of three duplications...", "author": "moleske", "createdAt": "2020-04-03T22:46:46Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireExecutor.java", "diffHunk": "@@ -26,8 +28,6 @@\n \n public class ExpireExecutor extends AbstractExecutor implements Extendable {\n \n-  private final String ERROR_SECONDS_NOT_USABLE = \"The number of seconds specified must be numeric\";\n-\n   private final int SECONDS_INDEX = 2;", "originalCommit": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExOTA0NQ==", "url": "https://github.com/apache/geode/pull/4904#discussion_r404119045", "bodyText": "Localified.", "author": "ringles", "createdAt": "2020-04-06T14:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "c00b623d73658e8035483c40bd851952902da70b", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireExecutor.java\nindex ba4dc696e8..86d85c066b 100755\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireExecutor.java\n\n@@ -28,15 +28,12 @@ import org.apache.geode.redis.internal.RegionProvider;\n \n public class ExpireExecutor extends AbstractExecutor implements Extendable {\n \n-  private final int SECONDS_INDEX = 2;\n-\n-  private final int SET = 1;\n-\n-  private final int NOT_SET = 0;\n-\n   @Override\n   public void executeCommand(Command command, ExecutionHandlerContext context) {\n     List<byte[]> commandElems = command.getProcessedCommand();\n+    int NOT_SET = 0;\n+    int SET = 1;\n+    int SECONDS_INDEX = 2;\n \n     if (commandElems.size() != 3) {\n       command.setResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjMyOQ==", "url": "https://github.com/apache/geode/pull/4904#discussion_r403372329", "bodyText": "I see who's influence is here \ud83d\ude09", "author": "moleske", "createdAt": "2020-04-03T22:48:49Z", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireAtExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.assertj.core.api.AssertionsForClassTypes;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.ExpireAtExecutor;\n+\n+public class ExpireAtExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+  Executor subject;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);\n+    byteBuf = new UnpooledByteBufAllocator(false);\n+    subject = new ExpireAtExecutor();\n+  }\n+\n+  @Test\n+  public void calledWithTooFewCommandArguments_returnsError() {\n+    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n+    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n+    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+\n+    ArgumentCaptor<ByteBuf> argsErrorCaptor = ArgumentCaptor.forClass(ByteBuf.class);\n+\n+    when(context.getByteBufAllocator()).thenReturn(byteBuf);\n+    when(command.getProcessedCommand()).thenReturn(commandsAsBytesWithTooFewArguments);\n+\n+    subject.executeCommand(command, context);\n+    verify(command, times(1)).setResponse(argsErrorCaptor.capture());", "originalCommit": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c00b623d73658e8035483c40bd851952902da70b", "url": "https://github.com/apache/geode/commit/c00b623d73658e8035483c40bd851952902da70b", "message": "Fixes from PR review", "committedDate": "2020-04-06T14:22:45Z", "type": "commit"}, {"oid": "bc22a9a12cffbbe55bb8b2391ad299f4ce0501e2", "url": "https://github.com/apache/geode/commit/bc22a9a12cffbbe55bb8b2391ad299f4ce0501e2", "message": "Runs spA", "committedDate": "2020-04-06T16:36:24Z", "type": "commit"}]}