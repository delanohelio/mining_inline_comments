{"pr_number": 5370, "pr_title": "GEODE-8298: Member version comparison sense inconsistent when deciding on multicast", "pr_createdAt": "2020-07-14T21:31:09Z", "pr_url": "https://github.com/apache/geode/pull/5370", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4NDI3NQ==", "url": "https://github.com/apache/geode/pull/5370#discussion_r454684275", "bodyText": "Please put private members after all public ones.", "author": "Bill", "createdAt": "2020-07-14T22:35:34Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +330,58 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  private void addSurpriseMemberWithVersion(Version version) {\n+    MemberIdentifier surpriseMember = myMemberId;\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(version);\n+    manager.addSurpriseMember(surpriseMember);\n+  }", "originalCommit": "fe8392accfc75ba05993ee6311e345ac313488b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9085d3a43902741c63c612bd693847e6a3749b6", "chunk": "diff --git a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\nindex dc8ad63439..03c32d453f 100644\n--- a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n+++ b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n\n@@ -330,58 +330,63 @@ public class GMSMembershipJUnitTest {\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n-  private void addSurpriseMemberWithVersion(Version version) {\n-    MemberIdentifier surpriseMember = myMemberId;\n-    surpriseMember.setVmViewId(3);\n-    surpriseMember.setVersionObjectForTest(version);\n-    manager.addSurpriseMember(surpriseMember);\n-  }\n-\n   @Test\n-  public void testMulticastWithOldVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.GEODE_1_1_0);\n+  public void testMulticastWithOldVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testMulticastWithCurrentVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.CURRENT);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.GEODE_1_1_0);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithHigherVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.CURRENT);\n+  public void testMulticastWithCurrentVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testMulticastWithOldVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.CURRENT);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithCurrentVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.CURRENT);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+  public void testMulticastWithOldVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n+\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithHigherVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.CURRENT);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+  public void testMulticastWithCurrentVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n+\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.CURRENT);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4NzMwMQ==", "url": "https://github.com/apache/geode/pull/5370#discussion_r454687301", "bodyText": "It is not clear from looking at this method that it is ok to mutate the object referenced by myMemberId. Off-hand it seems like that field refers to a member id representing the \"local\" member. So either way it seems wrong to modify it here to be the surprise member.\nI recommend you construct a new member id here for one-time use.", "author": "Bill", "createdAt": "2020-07-14T22:44:10Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +330,58 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  private void addSurpriseMemberWithVersion(Version version) {\n+    MemberIdentifier surpriseMember = myMemberId;\n+    surpriseMember.setVmViewId(3);", "originalCommit": "fe8392accfc75ba05993ee6311e345ac313488b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9085d3a43902741c63c612bd693847e6a3749b6", "chunk": "diff --git a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\nindex dc8ad63439..03c32d453f 100644\n--- a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n+++ b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n\n@@ -330,58 +330,63 @@ public class GMSMembershipJUnitTest {\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n-  private void addSurpriseMemberWithVersion(Version version) {\n-    MemberIdentifier surpriseMember = myMemberId;\n-    surpriseMember.setVmViewId(3);\n-    surpriseMember.setVersionObjectForTest(version);\n-    manager.addSurpriseMember(surpriseMember);\n-  }\n-\n   @Test\n-  public void testMulticastWithOldVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.GEODE_1_1_0);\n+  public void testMulticastWithOldVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testMulticastWithCurrentVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.CURRENT);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.GEODE_1_1_0);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithHigherVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.CURRENT);\n+  public void testMulticastWithCurrentVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testMulticastWithOldVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.CURRENT);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithCurrentVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.CURRENT);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+  public void testMulticastWithOldVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n+\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithHigherVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.CURRENT);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+  public void testMulticastWithCurrentVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n+\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.CURRENT);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MDgzMw==", "url": "https://github.com/apache/geode/pull/5370#discussion_r454690833", "bodyText": "This test and the next two all follow the same pattern. Can you refactor out the commonality?", "author": "Bill", "createdAt": "2020-07-14T22:53:45Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +330,58 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  private void addSurpriseMemberWithVersion(Version version) {\n+    MemberIdentifier surpriseMember = myMemberId;\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(version);\n+    manager.addSurpriseMember(surpriseMember);\n+  }\n+\n+  @Test\n+  public void testMulticastWithOldVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    addSurpriseMemberWithVersion(Version.GEODE_1_1_0);\n+\n+    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n+  }\n+\n+  @Test\n+  public void testMulticastWithCurrentVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    addSurpriseMemberWithVersion(Version.CURRENT);\n+\n+    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+  }\n+\n+  @Test\n+  public void testMulticastWithHigherVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    addSurpriseMemberWithVersion(Version.CURRENT);\n+\n+    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n+  }\n+\n+  @Test\n+  public void testMulticastWithOldVersionViewMember() {\n+    members.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);", "originalCommit": "fe8392accfc75ba05993ee6311e345ac313488b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9085d3a43902741c63c612bd693847e6a3749b6", "chunk": "diff --git a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\nindex dc8ad63439..03c32d453f 100644\n--- a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n+++ b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n\n@@ -330,58 +330,63 @@ public class GMSMembershipJUnitTest {\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n-  private void addSurpriseMemberWithVersion(Version version) {\n-    MemberIdentifier surpriseMember = myMemberId;\n-    surpriseMember.setVmViewId(3);\n-    surpriseMember.setVersionObjectForTest(version);\n-    manager.addSurpriseMember(surpriseMember);\n-  }\n-\n   @Test\n-  public void testMulticastWithOldVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.GEODE_1_1_0);\n+  public void testMulticastWithOldVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testMulticastWithCurrentVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.CURRENT);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.GEODE_1_1_0);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithHigherVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.CURRENT);\n+  public void testMulticastWithCurrentVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testMulticastWithOldVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.CURRENT);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithCurrentVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.CURRENT);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+  public void testMulticastWithOldVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n+\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithHigherVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.CURRENT);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+  public void testMulticastWithCurrentVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n+\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.CURRENT);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MDk5Mg==", "url": "https://github.com/apache/geode/pull/5370#discussion_r454690992", "bodyText": "This test and the next two follow the same pattern. Can you factor out the common code?", "author": "Bill", "createdAt": "2020-07-14T22:54:14Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +330,58 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  private void addSurpriseMemberWithVersion(Version version) {\n+    MemberIdentifier surpriseMember = myMemberId;\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(version);\n+    manager.addSurpriseMember(surpriseMember);\n+  }\n+\n+  @Test\n+  public void testMulticastWithOldVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    addSurpriseMemberWithVersion(Version.GEODE_1_1_0);", "originalCommit": "fe8392accfc75ba05993ee6311e345ac313488b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9085d3a43902741c63c612bd693847e6a3749b6", "chunk": "diff --git a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\nindex dc8ad63439..03c32d453f 100644\n--- a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n+++ b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n\n@@ -330,58 +330,63 @@ public class GMSMembershipJUnitTest {\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n-  private void addSurpriseMemberWithVersion(Version version) {\n-    MemberIdentifier surpriseMember = myMemberId;\n-    surpriseMember.setVmViewId(3);\n-    surpriseMember.setVersionObjectForTest(version);\n-    manager.addSurpriseMember(surpriseMember);\n-  }\n-\n   @Test\n-  public void testMulticastWithOldVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.GEODE_1_1_0);\n+  public void testMulticastWithOldVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testMulticastWithCurrentVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.CURRENT);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.GEODE_1_1_0);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithHigherVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n-    addSurpriseMemberWithVersion(Version.CURRENT);\n+  public void testMulticastWithCurrentVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testMulticastWithOldVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.CURRENT);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithCurrentVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.CURRENT);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+  public void testMulticastWithOldVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n+\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastWithHigherVersionViewMember() {\n-    members.get(0).setVersionObjectForTest(Version.CURRENT);\n-    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+  public void testMulticastWithCurrentVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n+\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.CURRENT);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MTEwMA==", "url": "https://github.com/apache/geode/pull/5370#discussion_r454691100", "bodyText": "great to get rid of the superfluous parameter!", "author": "Bill", "createdAt": "2020-07-14T22:54:34Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java", "diffHunk": "@@ -359,7 +360,7 @@ boolean isDistributionMessage() {\n   /**\n    * Analyze a given view object, generate events as appropriate\n    */\n-  public void processView(long newViewId, MembershipView<ID> newView) {\n+  public void processView(MembershipView<ID> newView) {", "originalCommit": "fe8392accfc75ba05993ee6311e345ac313488b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9085d3a43902741c63c612bd693847e6a3749b6", "chunk": "diff --git a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java\nindex 51ad223c7c..c3ecf42317 100644\n--- a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java\n+++ b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java\n\n@@ -360,7 +360,7 @@ public class GMSMembership<ID extends MemberIdentifier> implements Membership<ID\n   /**\n    * Analyze a given view object, generate events as appropriate\n    */\n-  public void processView(MembershipView<ID> newView) {\n+  public void processView(long newViewId, MembershipView<ID> newView) {\n     // Sanity check...\n     if (logger.isDebugEnabled()) {\n       StringBuilder msg = new StringBuilder(200);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MTM0MQ==", "url": "https://github.com/apache/geode/pull/5370#discussion_r454691341", "bodyText": "yess", "author": "Bill", "createdAt": "2020-07-14T22:55:18Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java", "diffHunk": "@@ -531,6 +515,12 @@ public void processView(long newViewId, MembershipView<ID> newView) {\n     }\n   }\n \n+  protected boolean containsOldVersionMember(MembershipView<ID> newView,\n+      VersionOrdinal referenceVersion) {\n+    return Stream.concat(surpriseMembers.keySet().stream(), newView.getMembers().stream())\n+        .anyMatch(member -> referenceVersion.isNewerThan(member.getVersionOrdinalObject()));\n+  }", "originalCommit": "fe8392accfc75ba05993ee6311e345ac313488b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9085d3a43902741c63c612bd693847e6a3749b6", "chunk": "diff --git a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java\nindex 51ad223c7c..c3ecf42317 100644\n--- a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java\n+++ b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java\n\n@@ -515,10 +516,14 @@ public class GMSMembership<ID extends MemberIdentifier> implements Membership<ID\n     }\n   }\n \n-  protected boolean containsOldVersionMember(MembershipView<ID> newView,\n-      VersionOrdinal referenceVersion) {\n-    return Stream.concat(surpriseMembers.keySet().stream(), newView.getMembers().stream())\n-        .anyMatch(member -> referenceVersion.isNewerThan(member.getVersionOrdinalObject()));\n+  boolean isDisableMulticastForRollingUpgrade(MembershipView<ID> newView) {\n+    return Stream.concat(surpriseMembers.entrySet().stream().map(entry -> entry.getKey()),\n+        newView.getMembers().stream())\n+        .anyMatch(member -> {\n+          final VersionOrdinal memberVersionOrdinal = member.getVersionOrdinalObject();\n+          return memberVersionOrdinal != null\n+              && memberVersionOrdinal.compareTo(Version.CURRENT) < 0;\n+        });\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NzIwMw==", "url": "https://github.com/apache/geode/pull/5370#discussion_r455147203", "bodyText": "A small point: this routine will set every member's version to memberVersion. I think it would be a better test if only one member's version was set to memberVersion and the rest were set to Version.CURRENT.", "author": "Bill", "createdAt": "2020-07-15T15:37:42Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +332,63 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  @Test\n+  public void testIsMulticastAllowedWithOldVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n+    manager.addSurpriseMember(createSurpriseMember(OLDER_THAN_CURRENT_VERSION));\n+\n+    manager.processView(view);\n+\n+    assertThat(manager.getGMSManager().isMulticastAllowed()).isFalse();\n+  }\n+\n+  @Test\n+  public void testIsMulticastAllowedWithCurrentVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n+    manager.addSurpriseMember(createSurpriseMember(Version.CURRENT));\n+\n+    manager.processView(view);\n+\n+    assertThat(manager.getGMSManager().isMulticastAllowed()).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsMulticastAllowedWithOldVersionViewMember() {\n+    MembershipView<MemberIdentifier> view = createMembershipView(OLDER_THAN_CURRENT_VERSION);\n+\n+    manager.processView(view);\n+\n+    assertThat(manager.getGMSManager().isMulticastAllowed()).isFalse();\n+  }\n+\n+  @Test\n+  public void testMulticastAllowedWithCurrentVersionViewMember() {\n+    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n+\n+    manager.processView(view);\n+\n+    assertThat(manager.getGMSManager().isMulticastAllowed()).isTrue();\n+  }\n+\n+  private MemberIdentifier createSurpriseMember(Version version) {\n+    MemberIdentifier surpriseMember = createMemberID(DEFAULT_PORT + 5);\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(version);\n+    return surpriseMember;\n+  }\n+\n+  private MembershipView<MemberIdentifier> createMembershipView(Version version) {\n+    List<MemberIdentifier> viewMembers = createMemberIdentifiers(version);\n+    return new MembershipView<>(myMemberId, 2, viewMembers);\n+  }\n+\n+  private List<MemberIdentifier> createMemberIdentifiers(Version memberVersion) {\n+    List<MemberIdentifier> viewMembers = new ArrayList<>();\n+    for (int i = 0; i < 2; ++i) {\n+      MemberIdentifier memberIdentifier = createMemberID(DEFAULT_PORT + 6 + i);\n+      memberIdentifier.setVersionObjectForTest(memberVersion);", "originalCommit": "1882966b93cbc9227945cb35c906b5763e47456b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9085d3a43902741c63c612bd693847e6a3749b6", "chunk": "diff --git a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\nindex f290bd170f..03c32d453f 100644\n--- a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n+++ b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java\n\n@@ -333,62 +331,62 @@ public class GMSMembershipJUnitTest {\n   }\n \n   @Test\n-  public void testIsMulticastAllowedWithOldVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n-    manager.addSurpriseMember(createSurpriseMember(OLDER_THAN_CURRENT_VERSION));\n-\n-    manager.processView(view);\n+  public void testMulticastWithOldVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    assertThat(manager.getGMSManager().isMulticastAllowed()).isFalse();\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  @Test\n-  public void testIsMulticastAllowedWithCurrentVersionSurpriseMember() {\n-    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n-    manager.addSurpriseMember(createSurpriseMember(Version.CURRENT));\n-\n-    manager.processView(view);\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.GEODE_1_1_0);\n+    manager.addSurpriseMember(surpriseMember);\n \n-    assertThat(manager.getGMSManager().isMulticastAllowed()).isTrue();\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testIsMulticastAllowedWithOldVersionViewMember() {\n-    MembershipView<MemberIdentifier> view = createMembershipView(OLDER_THAN_CURRENT_VERSION);\n+  public void testMulticastWithCurrentVersionSurpriseMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    manager.processView(view);\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertThat(manager.getGMSManager().isMulticastAllowed()).isFalse();\n+    MemberIdentifier surpriseMember = mockMembers[0];\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(Version.CURRENT);\n+    manager.addSurpriseMember(surpriseMember);\n+\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n   @Test\n-  public void testMulticastAllowedWithCurrentVersionViewMember() {\n-    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n+  public void testMulticastWithOldVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-    manager.processView(view);\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-    assertThat(manager.getGMSManager().isMulticastAllowed()).isTrue();\n+    assertTrue(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n \n-  private MemberIdentifier createSurpriseMember(Version version) {\n-    MemberIdentifier surpriseMember = createMemberID(DEFAULT_PORT + 5);\n-    surpriseMember.setVmViewId(3);\n-    surpriseMember.setVersionObjectForTest(version);\n-    return surpriseMember;\n-  }\n+  @Test\n+  public void testMulticastWithCurrentVersionViewMember() throws Exception {\n+    manager.getGMSManager().start();\n+    manager.getGMSManager().started();\n+    manager.isJoining = true;\n \n-  private MembershipView<MemberIdentifier> createMembershipView(Version version) {\n-    List<MemberIdentifier> viewMembers = createMemberIdentifiers(version);\n-    return new MembershipView<>(myMemberId, 2, viewMembers);\n-  }\n+    List<MemberIdentifier> viewmembers = Arrays.asList(mockMembers[0], mockMembers[1], myMemberId);\n+    viewmembers.get(0).setVersionObjectForTest(Version.CURRENT);\n+    MembershipView view = new MembershipView(myMemberId, 2, viewmembers);\n \n-  private List<MemberIdentifier> createMemberIdentifiers(Version memberVersion) {\n-    List<MemberIdentifier> viewMembers = new ArrayList<>();\n-    for (int i = 0; i < 2; ++i) {\n-      MemberIdentifier memberIdentifier = createMemberID(DEFAULT_PORT + 6 + i);\n-      memberIdentifier.setVersionObjectForTest(memberVersion);\n-      viewMembers.add(memberIdentifier);\n-    }\n-    return viewMembers;\n+    assertFalse(manager.isDisableMulticastForRollingUpgrade(view));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MTkxNA==", "url": "https://github.com/apache/geode/pull/5370#discussion_r455891914", "bodyText": "Let's set versionOrdinal (object reference) directly here and eliminate MemberData.setVersionOrdinal(short) entirely. The method shouldn't exist at all. We should not be passing a short ordinal to a MemberData.\nThere are three places MemberData.setVersionOrdinal(short) is called:\n\nhere: just set the field directly\nreadEssentialData(): replace setVersionOrdinal(VersioningIO.readOrdinal(in)); with setVersion(Versioning. getVersionOrdinal(VersioningIO.readOrdinal(in)))\nGMSMemberDataVersionJUnitTest.testSetVersionOrdinal(): delete this test method", "author": "Bill", "createdAt": "2020-07-16T15:53:12Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMemberData.java", "diffHunk": "@@ -507,8 +507,8 @@ public void setVmKind(int vmKind) {\n \n \n   @Override\n-  public void setVersion(Version v) {\n-    setVersionOrdinal(v.ordinal());\n+  public void setVersion(VersionOrdinal versionOrdinal) {\n+    setVersionOrdinal(versionOrdinal.ordinal());", "originalCommit": "12991bc5ae47d92e5f2b2bf4b8fd2560a3b70517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9085d3a43902741c63c612bd693847e6a3749b6", "chunk": "diff --git a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMemberData.java b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMemberData.java\nindex 13a310f743..9e349fbcb9 100644\n--- a/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMemberData.java\n+++ b/geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMemberData.java\n\n@@ -507,8 +507,8 @@ public class GMSMemberData implements MemberData, Comparable<GMSMemberData> {\n \n \n   @Override\n-  public void setVersion(VersionOrdinal versionOrdinal) {\n-    setVersionOrdinal(versionOrdinal.ordinal());\n+  public void setVersion(KnownVersion v) {\n+    setVersionOrdinal(v.ordinal());\n   }\n \n   @Override\n"}}, {"oid": "f9085d3a43902741c63c612bd693847e6a3749b6", "url": "https://github.com/apache/geode/commit/f9085d3a43902741c63c612bd693847e6a3749b6", "message": "Fixed version comparison", "committedDate": "2020-07-18T00:10:30Z", "type": "commit"}, {"oid": "68188d93752ae42d92b2447ab7841313ab443257", "url": "https://github.com/apache/geode/commit/68188d93752ae42d92b2447ab7841313ab443257", "message": "Remove unused argument", "committedDate": "2020-07-18T00:10:31Z", "type": "commit"}, {"oid": "25084897b22a74e7248ead0e89364b1e7c001d6b", "url": "https://github.com/apache/geode/commit/25084897b22a74e7248ead0e89364b1e7c001d6b", "message": "Tests with version higher than the current", "committedDate": "2020-07-18T00:10:31Z", "type": "commit"}, {"oid": "47717d0d4b0501f1f63035bd94b83efbe54af818", "url": "https://github.com/apache/geode/commit/47717d0d4b0501f1f63035bd94b83efbe54af818", "message": "Refactoring", "committedDate": "2020-07-18T00:10:31Z", "type": "commit"}, {"oid": "09b95fb96ef3f3740f3c34037e95463a00cd076f", "url": "https://github.com/apache/geode/commit/09b95fb96ef3f3740f3c34037e95463a00cd076f", "message": "Fixes after the code review", "committedDate": "2020-07-18T00:10:32Z", "type": "commit"}, {"oid": "175b9a8616fe769979ae862112818d9d064575ac", "url": "https://github.com/apache/geode/commit/175b9a8616fe769979ae862112818d9d064575ac", "message": "Changes after the code review", "committedDate": "2020-07-18T00:14:57Z", "type": "commit"}, {"oid": "903fa5a102769f3915a0ea4b9637b698d81c83ea", "url": "https://github.com/apache/geode/commit/903fa5a102769f3915a0ea4b9637b698d81c83ea", "message": "Get rid of MemberData.setVersionOrdinal", "committedDate": "2020-07-18T00:21:40Z", "type": "commit"}, {"oid": "903fa5a102769f3915a0ea4b9637b698d81c83ea", "url": "https://github.com/apache/geode/commit/903fa5a102769f3915a0ea4b9637b698d81c83ea", "message": "Get rid of MemberData.setVersionOrdinal", "committedDate": "2020-07-18T00:21:40Z", "type": "forcePushed"}, {"oid": "9ff10fa309a7c7295e7e5410a4ec809e74700e31", "url": "https://github.com/apache/geode/commit/9ff10fa309a7c7295e7e5410a4ec809e74700e31", "message": "GEODE-8298: rebased on develop", "committedDate": "2020-07-18T00:39:12Z", "type": "commit"}]}