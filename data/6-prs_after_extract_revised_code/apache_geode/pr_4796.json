{"pr_number": 4796, "pr_title": "GEODE-7867 Add more unit tests to geode-tcp-server", "pr_createdAt": "2020-03-11T21:56:18Z", "pr_url": "https://github.com/apache/geode/pull/4796", "timeline": [{"oid": "3746afcb623e6072211591be35f69834c3ed1a63", "url": "https://github.com/apache/geode/commit/3746afcb623e6072211591be35f69834c3ed1a63", "message": "GEODE-7867 Add more unit tests to geode-tcp-server\n\nCleaned up a distributedTest that no longer needs to reference\ngeode-core 7 moved it to the unit test source set.\n\nAdded additional tests.", "committedDate": "2020-03-11T21:52:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NDAxMQ==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392374011", "bodyText": "since the server socket has to be bound before it has an address, it makes sense not to refer to this as the \"bind address\" \u2713", "author": "Bill", "createdAt": "2020-03-13T17:34:56Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/MembershipLocator.java", "diffHunk": "@@ -38,7 +38,7 @@\n \n   void restarting() throws IOException;\n \n-  SocketAddress getBindAddress();\n+  SocketAddress getSocketAddress();", "originalCommit": "3746afcb623e6072211591be35f69834c3ed1a63", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NDQ3NA==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392374474", "bodyText": "better!", "author": "Bill", "createdAt": "2020-03-13T17:35:47Z", "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/TcpServer.java", "diffHunk": "@@ -224,7 +224,7 @@ private void initializeServerSocket() throws IOException {\n    * @param millis how long to wait\n    */\n   public void join(long millis) throws InterruptedException {\n-    if (serverThread != null) {\n+    if (isAlive()) {", "originalCommit": "3746afcb623e6072211591be35f69834c3ed1a63", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NDc2NQ==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392374765", "bodyText": "there seems to be a misspelling here: \"Inent\"", "author": "Bill", "createdAt": "2020-03-13T17:36:19Z", "path": "geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/HostAndPortTest.java", "diffHunk": "@@ -14,19 +14,30 @@\n  */\n package org.apache.geode.distributed.internal.tcpserver;\n \n+import static org.apache.geode.internal.serialization.DataSerializableFixedID.HOST_AND_PORT;\n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.io.IOException;\n import java.net.InetSocketAddress;\n \n import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n \n+import org.apache.geode.internal.serialization.BufferDataOutputStream;\n+import org.apache.geode.internal.serialization.ByteArrayDataInput;\n+import org.apache.geode.internal.serialization.DSFIDSerializer;\n+import org.apache.geode.internal.serialization.DSFIDSerializerFactory;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.test.junit.categories.MembershipTest;\n+\n+@Category({MembershipTest.class})\n public class HostAndPortTest {\n \n   /**\n    * Test that getSocketInentAddress returns resolved InetSocketAddress\n    */\n   @Test\n-  public void Test_getSocketInentAddress_returns_resolved_SocketAddress() {\n+  public void getSocketInentAddress_returns_resolved_SocketAddress() {", "originalCommit": "3746afcb623e6072211591be35f69834c3ed1a63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NTU3Mw==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392385573", "bodyText": "fixed", "author": "bschuchardt", "createdAt": "2020-03-13T17:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NDc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc357a442a60f579cd8df98e3b5b89f296d9e973", "chunk": "diff --git a/geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/HostAndPortTest.java b/geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/HostAndPortTest.java\nindex 55a01afe08..dbad9062c5 100644\n--- a/geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/HostAndPortTest.java\n+++ b/geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/HostAndPortTest.java\n\n@@ -37,7 +37,7 @@ public class HostAndPortTest {\n    * Test that getSocketInentAddress returns resolved InetSocketAddress\n    */\n   @Test\n-  public void getSocketInentAddress_returns_resolved_SocketAddress() {\n+  public void getSocketInetAddress_returns_resolved_SocketAddress() {\n     HostAndPort locator1 = new HostAndPort(\"localhost\", 8080);\n \n     InetSocketAddress actual = locator1.getSocketInetAddress();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NzUwMg==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392377502", "bodyText": "why would HostAndPort allow no hostname? is that only allowed during deserialization?", "author": "Bill", "createdAt": "2020-03-13T17:41:29Z", "path": "geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/HostAndPortTest.java", "diffHunk": "@@ -62,28 +73,97 @@ public void Test_equals_LocatorAddress_from_resolved_and_unresolved_SocketAddres\n   }\n \n   @Test\n-  public void Test_getPort_returns_port() {\n+  public void getPort_returns_port() {\n     HostAndPort locator1 = new HostAndPort(\"localhost\", 8090);\n     assertThat(locator1.getPort()).isEqualTo(8090);\n   }\n \n   @Test\n-  public void Test_getHostName_returns_hostname() {\n+  public void getHostName_returns_hostname() {\n     HostAndPort locator1 = new HostAndPort(\"fakelocalhost\", 8091);\n     assertThat(locator1.getHostName()).isEqualTo(\"fakelocalhost\");\n   }\n \n   @Test\n-  public void Test_hashCode_of_SocketAddress() {\n+  public void hashCode_of_SocketAddress() {\n     InetSocketAddress host1address = InetSocketAddress.createUnresolved(\"fakelocalhost\", 8091);\n     HostAndPort locator1 = new HostAndPort(\"fakelocalhost\", 8091);\n     assertThat(locator1.hashCode()).isEqualTo(host1address.hashCode());\n   }\n \n   @Test\n-  public void Test_toString_LocatorAddress() {\n+  public void toString_LocatorAddress() {\n     HostAndPort locator1 = new HostAndPort(\"fakelocalhost\", 8091);\n     assertThat(locator1.toString()).contains(\"socketInetAddress\");\n   }\n \n+  @Test\n+  public void constructorWithNoHostName() {\n+    HostAndPort hostAndPort = new HostAndPort(null, 8091);\n+    assertThat(hostAndPort.getAddress()).isNotNull();\n+    assertThat(hostAndPort.getHostName()).isEqualTo(\"0.0.0.0\");\n+    assertThat(hostAndPort.getPort()).isEqualTo(8091);\n+    assertThat(hostAndPort.getSocketInetAddress()).isNotNull();\n+  }\n+\n+  @Test\n+  public void testEquality() {\n+    HostAndPort hostAndPort1 = new HostAndPort(\"127.0.0.1\", 8091);\n+    HostAndPort hostAndPort2 = new HostAndPort(\"127.0.0.1\", 8091);\n+    HostAndPort hostAndPort3 = new HostAndPort(\"127.0.0.1\", 8092);\n+    assertThat(hostAndPort1.getSocketInetAddress()).isSameAs(hostAndPort1.getSocketInetAddress());\n+    assertThat(hostAndPort1).isEqualTo(hostAndPort1);\n+    assertThat(hostAndPort1).isEqualTo(hostAndPort2);\n+    assertThat(hostAndPort1).isNotEqualTo(hostAndPort3);\n+    assertThat(hostAndPort1.equals(null)).isFalse();\n+  }\n+\n+  @Test\n+  public void testSerializationWithNumericAddress() throws IOException, ClassNotFoundException {\n+    DSFIDSerializer dsfidSerializer = new DSFIDSerializerFactory().create();\n+    dsfidSerializer.registerDSFID(HOST_AND_PORT, HostAndPort.class);\n+    HostAndPort hostAndPort1 = new HostAndPort(\"127.0.0.1\", 8091);\n+    BufferDataOutputStream out = new BufferDataOutputStream(100, Version.CURRENT);\n+    dsfidSerializer.getObjectSerializer().writeObject(hostAndPort1, out);\n+    HostAndPort hostAndPort2 = dsfidSerializer.getObjectDeserializer()\n+        .readObject(new ByteArrayDataInput(out.toByteArray()));\n+    assertThat(hostAndPort1).isEqualTo(hostAndPort2);\n+    assertThat(hostAndPort2).isEqualTo(hostAndPort1);\n+  }\n+\n+  @Test\n+  public void testSerializationWithUnresolvableHostName()\n+      throws IOException, ClassNotFoundException {\n+    DSFIDSerializer dsfidSerializer = new DSFIDSerializerFactory().create();\n+    dsfidSerializer.registerDSFID(HOST_AND_PORT, HostAndPort.class);\n+    HostAndPort hostAndPort1 = new HostAndPort(\"unresolvable host name\", 8091);\n+    BufferDataOutputStream out = new BufferDataOutputStream(100, Version.CURRENT);\n+    dsfidSerializer.getObjectSerializer().writeObject(hostAndPort1, out);\n+    HostAndPort hostAndPort2 = dsfidSerializer.getObjectDeserializer()\n+        .readObject(new ByteArrayDataInput(out.toByteArray()));\n+    assertThat(hostAndPort1).isEqualTo(hostAndPort2);\n+    assertThat(hostAndPort2).isEqualTo(hostAndPort1);\n+    assertThat(hostAndPort1.getAddress()).isNull();\n+    assertThat(hostAndPort2.getAddress()).isNull();\n+    assertThat(hostAndPort2.getSocketInetAddress()).isNotNull();\n+    assertThat(hostAndPort1.getSocketInetAddress().isUnresolved()).isTrue();\n+    assertThat(hostAndPort2.getSocketInetAddress().isUnresolved()).isTrue();\n+  }\n+\n+  @Test\n+  public void testSerializationWithNoHostName() throws IOException, ClassNotFoundException {", "originalCommit": "3746afcb623e6072211591be35f69834c3ed1a63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MjAxMQ==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392382011", "bodyText": "I think it was for a local address.  That surprised me as well.", "author": "bschuchardt", "createdAt": "2020-03-13T17:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NzUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NzE0Ng==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392387146", "bodyText": "oy ok", "author": "Bill", "createdAt": "2020-03-13T18:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NzUwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MDY3MA==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392380670", "bodyText": "why was org.apache.geode.distributed.internal.InfoRequestHandler no longer suitable?", "author": "Bill", "createdAt": "2020-03-13T17:47:46Z", "path": "geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/TcpServerJUnitTest.java", "diffHunk": "@@ -344,19 +267,29 @@ public void endRequest(Object request, long startTime) {}\n     public void endResponse(Object request, long startTime) {}\n   }\n \n-  private/* GemStoneAddition */ static class SimpleStats implements PoolStatHelper {\n-    AtomicInteger ended = new AtomicInteger();\n-    AtomicInteger started = new AtomicInteger();\n \n+  public class InfoRequestHandler implements TcpHandler {", "originalCommit": "3746afcb623e6072211591be35f69834c3ed1a63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MjQ0Mw==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392382443", "bodyText": "That's a geode-core class.  It gets information from GemFireVersion, also in geode-core.", "author": "bschuchardt", "createdAt": "2020-03-13T17:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MDY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NjUzNw==", "url": "https://github.com/apache/geode/pull/4796#discussion_r392386537", "bodyText": "bravo!", "author": "Bill", "createdAt": "2020-03-13T17:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MDY3MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fc357a442a60f579cd8df98e3b5b89f296d9e973", "url": "https://github.com/apache/geode/commit/fc357a442a60f579cd8df98e3b5b89f296d9e973", "message": "fixed spelling error", "committedDate": "2020-03-13T17:53:20Z", "type": "commit"}]}