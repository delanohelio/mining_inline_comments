{"pr_number": 5004, "pr_title": "GEODE-7954: restore redundancy and status redundancy gfsh commands", "pr_createdAt": "2020-04-27T18:15:51Z", "pr_url": "https://github.com/apache/geode/pull/5004", "timeline": [{"oid": "af73331714d1622e9897690a18be3224965a57de", "url": "https://github.com/apache/geode/commit/af73331714d1622e9897690a18be3224965a57de", "message": "GEODE-7954: restore redundancy and status redundancy gfsh commands\n\n- Add redundancyStatus method to RestoreRedundancyOperation interface\n- Add RestoreRedundancyCommand\n- Add StatusRedundancyCommand\n- Add RedundancyCommandFunction for use by the new commands\n- Create RedundancyCommandUtils to hold shared code used by both\ncommands\n- Unit and DUnit tests for all the above\n\nAuthored-by: Donal Evans <doevans@pivotal.io>", "committedDate": "2020-04-27T18:10:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5MDY3OA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r416090678", "bodyText": "consider get rid of the try/catch block, the CliFunction already handles any exception thrown by the child in a uniform way.", "author": "jinmeiliao", "createdAt": "2020-04-27T19:31:19Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.functions;\n+\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.ERROR;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.management.cli.CliFunction;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+\n+public class RedundancyCommandFunction extends CliFunction<Object[]> {\n+  private static final long serialVersionUID = 5633636343813884996L;\n+\n+  @Override\n+  public CliFunctionResult executeFunction(FunctionContext<Object[]> context) {\n+    Object[] arguments = context.getArguments();\n+    String[] includeRegions = (String[]) arguments[0];\n+    Set<String> includeRegionsSet = null;\n+    if (includeRegions != null) {\n+      includeRegionsSet = new HashSet<>(Arrays.asList(includeRegions));\n+    }\n+\n+    String[] excludeRegions = (String[]) arguments[1];\n+    Set<String> excludeRegionsSet = null;\n+    if (excludeRegions != null) {\n+      excludeRegionsSet = new HashSet<>(Arrays.asList(excludeRegions));\n+    }\n+\n+    boolean shouldReassignPrimaries = (boolean) arguments[2];\n+\n+    boolean isStatusCommand = false;\n+    if (arguments.length > 3) {\n+      isStatusCommand = (boolean) arguments[3];\n+    }\n+\n+    RestoreRedundancyResults results;\n+    try {\n+      RestoreRedundancyOperation redundancyOperation =\n+          context.getCache().getResourceManager().createRestoreRedundancyOperation();\n+      redundancyOperation.includeRegions(includeRegionsSet);\n+      redundancyOperation.excludeRegions(excludeRegionsSet);\n+      if (isStatusCommand) {\n+        results = redundancyOperation.redundancyStatus();\n+      } else {\n+        redundancyOperation.shouldReassignPrimaries(shouldReassignPrimaries);\n+        results = redundancyOperation.start().get();\n+      }\n+    } catch (Exception ex) {", "originalCommit": "af73331714d1622e9897690a18be3224965a57de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzMzMyMw==", "url": "https://github.com/apache/geode/pull/5004#discussion_r416133323", "bodyText": "Will do", "author": "DonalEvans", "createdAt": "2020-04-27T20:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5MDY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "4426e0621a2f3a3778fe0ec5432f13dd89614ac1", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunction.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunction.java\nindex 783f8d4024..1ba7755530 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunction.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunction.java\n\n@@ -52,20 +52,15 @@ public class RedundancyCommandFunction extends CliFunction<Object[]> {\n     }\n \n     RestoreRedundancyResults results;\n-    try {\n-      RestoreRedundancyOperation redundancyOperation =\n-          context.getCache().getResourceManager().createRestoreRedundancyOperation();\n-      redundancyOperation.includeRegions(includeRegionsSet);\n-      redundancyOperation.excludeRegions(excludeRegionsSet);\n-      if (isStatusCommand) {\n-        results = redundancyOperation.redundancyStatus();\n-      } else {\n-        redundancyOperation.shouldReassignPrimaries(shouldReassignPrimaries);\n-        results = redundancyOperation.start().get();\n-      }\n-    } catch (Exception ex) {\n-      return new CliFunctionResult(context.getMemberName(), CliFunctionResult.StatusState.ERROR,\n-          ex.toString());\n+    RestoreRedundancyOperation redundancyOperation =\n+        context.getCache().getResourceManager().createRestoreRedundancyOperation();\n+    redundancyOperation.includeRegions(includeRegionsSet);\n+    redundancyOperation.excludeRegions(excludeRegionsSet);\n+    if (isStatusCommand) {\n+      results = redundancyOperation.redundancyStatus();\n+    } else {\n+      redundancyOperation.shouldReassignPrimaries(shouldReassignPrimaries);\n+      results = redundancyOperation.start().join();\n     }\n \n     if (results.getStatus().equals(ERROR)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5Nzc3NA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r416097774", "bodyText": "since this command doesn't affect cluster configuration at all. I would just have this command extend GfshCommand. SingleGfshCommand is used by command that needs to change the cluster configuration.", "author": "jinmeiliao", "createdAt": "2020-04-27T19:42:55Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.shell.core.annotation.CliOption;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.cli.CliMetaData;\n+import org.apache.geode.management.cli.SingleGfshCommand;\n+import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n+import org.apache.geode.management.internal.cli.result.model.ResultModel;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.i18n.CliStrings;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+import org.apache.geode.management.internal.security.ResourceOperation;\n+import org.apache.geode.security.ResourcePermission;\n+\n+public class RestoreRedundancyCommand extends SingleGfshCommand {", "originalCommit": "af73331714d1622e9897690a18be3224965a57de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzMzI0OA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r416133248", "bodyText": "Thanks for catching this.", "author": "DonalEvans", "createdAt": "2020-04-27T20:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5Nzc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "4426e0621a2f3a3778fe0ec5432f13dd89614ac1", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\nindex 86119dc8e4..20dac4d121 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\n\n@@ -27,7 +27,7 @@ import org.springframework.shell.core.annotation.CliOption;\n import org.apache.geode.distributed.DistributedMember;\n import org.apache.geode.internal.cache.InternalCache;\n import org.apache.geode.management.cli.CliMetaData;\n-import org.apache.geode.management.cli.SingleGfshCommand;\n+import org.apache.geode.management.cli.GfshCommand;\n import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n import org.apache.geode.management.internal.cli.result.model.ResultModel;\n import org.apache.geode.management.internal.functions.CliFunctionResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5ODEwMw==", "url": "https://github.com/apache/geode/pull/5004#discussion_r416098103", "bodyText": "same here, extends GfshCommand should be enough here.", "author": "jinmeiliao", "createdAt": "2020-04-27T19:43:27Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.shell.core.annotation.CliOption;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.cli.CliMetaData;\n+import org.apache.geode.management.cli.SingleGfshCommand;\n+import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n+import org.apache.geode.management.internal.cli.result.model.ResultModel;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.i18n.CliStrings;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+import org.apache.geode.management.internal.security.ResourceOperation;\n+import org.apache.geode.security.ResourcePermission;\n+\n+public class StatusRedundancyCommand extends SingleGfshCommand {", "originalCommit": "af73331714d1622e9897690a18be3224965a57de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4426e0621a2f3a3778fe0ec5432f13dd89614ac1", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\nindex 3e935a3c53..ac91479d30 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\n\n@@ -27,7 +27,7 @@ import org.springframework.shell.core.annotation.CliOption;\n import org.apache.geode.distributed.DistributedMember;\n import org.apache.geode.internal.cache.InternalCache;\n import org.apache.geode.management.cli.CliMetaData;\n-import org.apache.geode.management.cli.SingleGfshCommand;\n+import org.apache.geode.management.cli.GfshCommand;\n import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n import org.apache.geode.management.internal.cli.result.model.ResultModel;\n import org.apache.geode.management.internal.functions.CliFunctionResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwNTY3Nw==", "url": "https://github.com/apache/geode/pull/5004#discussion_r416105677", "bodyText": "If you want to truly test the command like how it's invoked using the gfsh command and examine the result, you can use the GfshParserRule and create a spy of the command class to interact with it. See CreateRegionCommandTest as an example.", "author": "jinmeiliao", "createdAt": "2020-04-27T19:56:22Z", "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.cli.Result.Status.ERROR;\n+import static org.apache.geode.management.cli.Result.Status.OK;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.hamcrest.CoreMatchers.everyItem;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+\n+public class RestoreRedundancyCommandTest {", "originalCommit": "af73331714d1622e9897690a18be3224965a57de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzMzAyMg==", "url": "https://github.com/apache/geode/pull/5004#discussion_r416133022", "bodyText": "The results should be being examined in the DUnit tests for these commands, so the unit tests are just intended to confirm that the methods in the class are providing the expected behaviour.", "author": "DonalEvans", "createdAt": "2020-04-27T20:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwNTY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandTest.java b/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandTest.java\ndeleted file mode 100644\nindex e484030946..0000000000\n--- a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandTest.java\n+++ /dev/null\n\n@@ -1,256 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.geode.management.internal.cli.commands;\n-\n-import static org.apache.geode.management.cli.Result.Status.ERROR;\n-import static org.apache.geode.management.cli.Result.Status.OK;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.hamcrest.CoreMatchers.everyItem;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyBoolean;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import org.apache.geode.cache.Cache;\n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n-\n-public class RestoreRedundancyCommandTest {\n-\n-  private RestoreRedundancyCommand command;\n-  private final String includeRegion1 = \"include1\";\n-  private final String includeRegion2 = \"include2\";\n-  private String[] includeRegions = {includeRegion1, includeRegion2};\n-  private final String excludeRegion1 = \"exclude1\";\n-  private final String excludeRegion2 = \"exclude2\";\n-  private String[] excludeRegions = {excludeRegion1, excludeRegion2};\n-  private final boolean shouldReassignPrimaries = true;\n-  private DistributedMember mockMember1;\n-  private DistributedMember mockMember2;\n-  private CliFunctionResult successFunctionResult;\n-  private CliFunctionResult errorFunctionResult;\n-  private RedundancyCommandUtils mockUtils;\n-  private Object[] expectedArguments;\n-\n-  @Before\n-  public void setUp() {\n-    mockMember1 = mock(DistributedMember.class);\n-    mockMember2 = mock(DistributedMember.class);\n-    expectedArguments = new Object[] {includeRegions, excludeRegions, shouldReassignPrimaries};\n-\n-    successFunctionResult = mock(CliFunctionResult.class);\n-    when(successFunctionResult.getStatus()).thenReturn(OK.name());\n-\n-    errorFunctionResult = mock(CliFunctionResult.class);\n-    when(errorFunctionResult.getStatus()).thenReturn(ERROR.name());\n-\n-    mockUtils = mock(RedundancyCommandUtils.class);\n-    Cache mockCache = mock(InternalCache.class);\n-\n-    command = spy(new RestoreRedundancyCommand());\n-    doReturn(mockUtils).when(command).getUtils();\n-    doReturn(mockCache).when(command).getCache();\n-  }\n-\n-  @Test\n-  public void executeCallsGetNoViableMembersResultWhenNoViableMembersAreFoundForAtLeastOneRegion() {\n-    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    String region1 = \"region1\";\n-    firstMemberPRInfo.region = region1;\n-    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    String region2 = \"region2\";\n-    secondMemberPRInfo.region = region2;\n-\n-    // Put something in the members list when we call populateLists\n-    doAnswer(invocation -> {\n-      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n-      memberPRInfoList.add(firstMemberPRInfo);\n-      memberPRInfoList.add(secondMemberPRInfo);\n-      return null;\n-    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n-\n-    List<DistributedMember> viableMembers = new ArrayList<>();\n-    viableMembers.add(mock(DistributedMember.class));\n-\n-    when(mockUtils.filterViableMembersForVersion(eq(firstMemberPRInfo), any()))\n-        .thenReturn(viableMembers);\n-    when(mockUtils.filterViableMembersForVersion(eq(secondMemberPRInfo), any()))\n-        .thenReturn(Collections.emptyList());\n-\n-    command.execute(includeRegions, excludeRegions, shouldReassignPrimaries);\n-\n-    verify(mockUtils, times(1)).getNoViableMembersResult(any(), eq(region2));\n-    verify(mockUtils, times(0)).getNoViableMembersResult(any(), eq(region1));\n-  }\n-\n-  @Test\n-  public void executeCallsMethodsWithCorrectArgumentsWhenViableMembersAreFoundForAllRegions() {\n-    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n-        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n-    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n-        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstMemberPRInfo);\n-    membersForEachRegion.add(secondMemberPRInfo);\n-\n-    // Put something in the members list when we call populateLists\n-    doAnswer(invocation -> {\n-      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n-      memberPRInfoList.add(firstMemberPRInfo);\n-      memberPRInfoList.add(secondMemberPRInfo);\n-      return null;\n-    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n-\n-    // Allow us to get past the filter viable members step\n-    List<DistributedMember> viableMembers = new ArrayList<>();\n-    viableMembers.add(mock(DistributedMember.class));\n-    when(mockUtils.filterViableMembersForVersion(any(), any())).thenReturn(viableMembers);\n-\n-    // Prevent the executeFunctionOnMembers method from doing anything\n-    List<CliFunctionResult> returnedList = new ArrayList<>();\n-    doReturn(returnedList).when(command).executeFunctionOnMembers(any(), any(), anyBoolean(),\n-        any());\n-\n-    command.execute(includeRegions, excludeRegions, shouldReassignPrimaries);\n-\n-    // Confirm we set the correct viable members on the memberPRInfos\n-    verify(mockUtils, times(1)).filterViableMembersForVersion(firstMemberPRInfo,\n-        REDUNDANCY_COMMAND_ADDED_VERSION);\n-    verify(mockUtils, times(1)).filterViableMembersForVersion(secondMemberPRInfo,\n-        REDUNDANCY_COMMAND_ADDED_VERSION);\n-    assertThat(firstMemberPRInfo.dsMemberList, is(viableMembers));\n-    assertThat(secondMemberPRInfo.dsMemberList, is(viableMembers));\n-\n-    // Confirm we called executeFunctionOnMembers and buildResultModelFromFunctionResults with the\n-    // correct arguments\n-    verify(command, times(1)).executeFunctionOnMembers(includeRegions, excludeRegions,\n-        shouldReassignPrimaries, membersForEachRegion);\n-    boolean isStatusCommand = false;\n-    verify(mockUtils, times(1)).buildResultModelFromFunctionResults(eq(returnedList), any(),\n-        eq(isStatusCommand));\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersDoesNotExecuteFunctionForRegionsThatHaveHadRedundancyRestoredAlready() {\n-    // Since both regions exist on both members, restoring redundancy for either of the regions will\n-    // also cause the other region to have redundancy restored, since the function restores\n-    // redundancy for all non-excluded regions on the target member\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(includeRegion1, mockMember1, mockMember2);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(includeRegion2, mockMember1, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        any());\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, shouldReassignPrimaries,\n-            membersForEachRegion);\n-    assertThat(functionResults, is(Collections.singletonList(successFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        any());\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersExecutesFunctionForAllRegionsWithNoMembersInCommon() {\n-    // Region1 exists on member1 only, region2 exists on member 2 only. Two function executions are\n-    // necessary.\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(excludeRegion1, mockMember1);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(excludeRegion2, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        eq(mockMember1));\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        eq(mockMember2));\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, shouldReassignPrimaries,\n-            membersForEachRegion);\n-    assertThat(functionResults.size(), is(2));\n-    assertThat(functionResults, everyItem(is(successFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        eq(mockMember1));\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        eq(mockMember2));\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersReturnsEarlyIfFunctionResultIsError() {\n-    // Region1 exists on member1 only, region2 exists on member 2 only. Two function executions are\n-    // necessary.\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(excludeRegion1, mockMember1);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(excludeRegion2, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    // Return error result first, then success result on subsequent calls\n-    doReturn(errorFunctionResult).doReturn(successFunctionResult).when(command)\n-        .executeFunctionAndGetFunctionResult(any(), any(), any());\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, shouldReassignPrimaries,\n-            membersForEachRegion);\n-    assertThat(functionResults.size(), is(1));\n-    assertThat(functionResults, is(Collections.singletonList(errorFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        any());\n-  }\n-\n-  private RebalanceOperationPerformer.MemberPRInfo createMemberPRInfo(String region,\n-      DistributedMember... members) {\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    firstRegionInfo.region = region;\n-    firstRegionInfo.dsMemberList.addAll(Arrays.asList(members));\n-    return firstRegionInfo;\n-  }\n-}\n"}}, {"oid": "4426e0621a2f3a3778fe0ec5432f13dd89614ac1", "url": "https://github.com/apache/geode/commit/4426e0621a2f3a3778fe0ec5432f13dd89614ac1", "message": "Addressing review comments\n\n- Have the gfsh commands extend GfshCommand instead of SingleGfshCommand\n- Remove unnecessary try/catch from RedundancyCommandFunction\n\nAuthored-by: Donal Evans <doevans@pivotal.io>", "committedDate": "2020-04-28T00:17:05Z", "type": "commit"}, {"oid": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "url": "https://github.com/apache/geode/commit/5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "message": "Fix LGTM alerts\n\nAuthored-by: Donal Evans <doevans@pivotal.io>", "committedDate": "2020-04-28T16:00:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MTc2Nw==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417251767", "bodyText": "These attributes can all be made final.", "author": "jujoramos", "createdAt": "2020-04-29T11:42:42Z", "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunctionTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.functions;\n+\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.OK;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+\n+public class RedundancyCommandFunctionTest {\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private FunctionContext<Object[]> mockContext = mock(FunctionContext.class);\n+  private Cache mockCache = mock(Cache.class, RETURNS_DEEP_STUBS);\n+  private RestoreRedundancyOperation mockOperation =\n+      mock(RestoreRedundancyOperation.class, RETURNS_DEEP_STUBS);\n+  private RestoreRedundancyResults mockResults = mock(RestoreRedundancyResults.class);\n+  private String message = \"expected message\";", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunctionTest.java b/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunctionTest.java\nindex dcd44eda85..2f7c579522 100644\n--- a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunctionTest.java\n+++ b/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/functions/RedundancyCommandFunctionTest.java\n\n@@ -42,19 +42,19 @@ import org.apache.geode.management.internal.functions.CliFunctionResult;\n public class RedundancyCommandFunctionTest {\n \n   @SuppressWarnings(\"unchecked\")\n-  private FunctionContext<Object[]> mockContext = mock(FunctionContext.class);\n-  private Cache mockCache = mock(Cache.class, RETURNS_DEEP_STUBS);\n-  private RestoreRedundancyOperation mockOperation =\n+  private final FunctionContext<Object[]> mockContext = mock(FunctionContext.class);\n+  private final Cache mockCache = mock(Cache.class, RETURNS_DEEP_STUBS);\n+  private final RestoreRedundancyOperation mockOperation =\n       mock(RestoreRedundancyOperation.class, RETURNS_DEEP_STUBS);\n-  private RestoreRedundancyResults mockResults = mock(RestoreRedundancyResults.class);\n-  private String message = \"expected message\";\n+  private final RestoreRedundancyResults mockResults = mock(RestoreRedundancyResults.class);\n+  private final String message = \"expected message\";\n   private RedundancyCommandFunction function;\n \n   @Before\n   public void setUp() throws InterruptedException, ExecutionException {\n     function = new RedundancyCommandFunction();\n     when(mockContext.getCache()).thenReturn(mockCache);\n-    when(mockContext.getArguments()).thenReturn(new Object[] {null, null, true});\n+    when(mockContext.getArguments()).thenReturn(new Object[] {null, null, true, false});\n     when(mockCache.getResourceManager().createRestoreRedundancyOperation())\n         .thenReturn(mockOperation);\n     CompletableFuture<RestoreRedundancyResults> future =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MjUzNQ==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417252535", "bodyText": "This field can be made final.", "author": "jujoramos", "createdAt": "2020-04-29T11:44:16Z", "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandTest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.cli.Result.Status.ERROR;\n+import static org.apache.geode.management.cli.Result.Status.OK;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.hamcrest.CoreMatchers.everyItem;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+\n+public class StatusRedundancyCommandTest {\n+\n+  private StatusRedundancyCommand command;\n+  private final String includeRegion1 = \"include1\";\n+  private final String includeRegion2 = \"include2\";\n+  private String[] includeRegions = {includeRegion1, includeRegion2};", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandTest.java b/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandTest.java\ndeleted file mode 100644\nindex e7a49b55f2..0000000000\n--- a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandTest.java\n+++ /dev/null\n\n@@ -1,253 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.geode.management.internal.cli.commands;\n-\n-import static org.apache.geode.management.cli.Result.Status.ERROR;\n-import static org.apache.geode.management.cli.Result.Status.OK;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.hamcrest.CoreMatchers.everyItem;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import org.apache.geode.cache.Cache;\n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n-\n-public class StatusRedundancyCommandTest {\n-\n-  private StatusRedundancyCommand command;\n-  private final String includeRegion1 = \"include1\";\n-  private final String includeRegion2 = \"include2\";\n-  private String[] includeRegions = {includeRegion1, includeRegion2};\n-  private final String excludeRegion1 = \"exclude1\";\n-  private final String excludeRegion2 = \"exclude2\";\n-  private String[] excludeRegions = {excludeRegion1, excludeRegion2};\n-  private DistributedMember mockMember1;\n-  private DistributedMember mockMember2;\n-  private CliFunctionResult successFunctionResult;\n-  private CliFunctionResult errorFunctionResult;\n-  private RedundancyCommandUtils mockUtils;\n-  private Object[] expectedArguments;\n-\n-  @Before\n-  public void setUp() {\n-    mockMember1 = mock(DistributedMember.class);\n-    mockMember2 = mock(DistributedMember.class);\n-    boolean shouldNotReassignPrimaries = false;\n-    boolean isStatusCommand = true;\n-    expectedArguments = new Object[] {includeRegions, excludeRegions, shouldNotReassignPrimaries,\n-        isStatusCommand};\n-\n-    successFunctionResult = mock(CliFunctionResult.class);\n-    when(successFunctionResult.getStatus()).thenReturn(OK.name());\n-\n-    errorFunctionResult = mock(CliFunctionResult.class);\n-    when(errorFunctionResult.getStatus()).thenReturn(ERROR.name());\n-\n-    mockUtils = mock(RedundancyCommandUtils.class);\n-    Cache mockCache = mock(InternalCache.class);\n-\n-    command = spy(new StatusRedundancyCommand());\n-    doReturn(mockUtils).when(command).getUtils();\n-    doReturn(mockCache).when(command).getCache();\n-  }\n-\n-  @Test\n-  public void executeCallsGetNoViableMembersResultWhenNoViableMembersAreFoundForAtLeastOneRegion() {\n-    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    String region1 = \"region1\";\n-    firstMemberPRInfo.region = region1;\n-    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    String region2 = \"region2\";\n-    secondMemberPRInfo.region = region2;\n-\n-    // Put something in the members list when we call populateLists\n-    doAnswer(invocation -> {\n-      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n-      memberPRInfoList.add(firstMemberPRInfo);\n-      memberPRInfoList.add(secondMemberPRInfo);\n-      return null;\n-    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n-\n-    List<DistributedMember> viableMembers = new ArrayList<>();\n-    viableMembers.add(mock(DistributedMember.class));\n-\n-    when(mockUtils.filterViableMembersForVersion(eq(firstMemberPRInfo), any()))\n-        .thenReturn(viableMembers);\n-    when(mockUtils.filterViableMembersForVersion(eq(secondMemberPRInfo), any()))\n-        .thenReturn(Collections.emptyList());\n-\n-    command.execute(includeRegions, excludeRegions);\n-\n-    verify(mockUtils, times(1)).getNoViableMembersResult(any(), eq(region2));\n-    verify(mockUtils, times(0)).getNoViableMembersResult(any(), eq(region1));\n-  }\n-\n-  @Test\n-  public void executeCallsMethodsWithCorrectArgumentsWhenViableMembersAreFoundForAllRegions() {\n-    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n-        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n-    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n-        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstMemberPRInfo);\n-    membersForEachRegion.add(secondMemberPRInfo);\n-\n-    // Put something in the members list when we call populateLists\n-    doAnswer(invocation -> {\n-      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n-      memberPRInfoList.add(firstMemberPRInfo);\n-      memberPRInfoList.add(secondMemberPRInfo);\n-      return null;\n-    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n-\n-    // Allow us to get past the filter viable members step\n-    List<DistributedMember> viableMembers = new ArrayList<>();\n-    viableMembers.add(mock(DistributedMember.class));\n-    when(mockUtils.filterViableMembersForVersion(any(), any())).thenReturn(viableMembers);\n-\n-    // Prevent the executeFunctionOnMembers method from doing anything\n-    List<CliFunctionResult> returnedList = new ArrayList<>();\n-    doReturn(returnedList).when(command).executeFunctionOnMembers(any(), any(), any());\n-\n-    command.execute(includeRegions, excludeRegions);\n-\n-    // Confirm we set the correct viable members on the memberPRInfos\n-    verify(mockUtils, times(1)).filterViableMembersForVersion(firstMemberPRInfo,\n-        REDUNDANCY_COMMAND_ADDED_VERSION);\n-    verify(mockUtils, times(1)).filterViableMembersForVersion(secondMemberPRInfo,\n-        REDUNDANCY_COMMAND_ADDED_VERSION);\n-    assertThat(firstMemberPRInfo.dsMemberList, is(viableMembers));\n-    assertThat(secondMemberPRInfo.dsMemberList, is(viableMembers));\n-\n-    // Confirm we called executeFunctionOnMembers and buildResultModelFromFunctionResults with the\n-    // correct arguments\n-    verify(command, times(1)).executeFunctionOnMembers(includeRegions, excludeRegions,\n-        membersForEachRegion);\n-    boolean isStatusCommand = true;\n-    verify(mockUtils, times(1)).buildResultModelFromFunctionResults(eq(returnedList), any(),\n-        eq(isStatusCommand));\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersDoesNotExecuteFunctionForRegionsThatHaveHadRedundancyRestoredAlready() {\n-    // Since both regions exist on both members, restoring redundancy for either of the regions will\n-    // also cause the other region to have redundancy restored, since the function restores\n-    // redundancy for all non-excluded regions on the target member\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(includeRegion1, mockMember1, mockMember2);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(includeRegion2, mockMember1, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        any());\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-    assertThat(functionResults, is(Collections.singletonList(successFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        any());\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersExecutesFunctionForAllRegionsWithNoMembersInCommon() {\n-    // Region1 exists on member1 only, region2 exists on member 2 only. Two function executions are\n-    // necessary.\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(excludeRegion1, mockMember1);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(excludeRegion2, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        eq(mockMember1));\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        eq(mockMember2));\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-    assertThat(functionResults.size(), is(2));\n-    assertThat(functionResults, everyItem(is(successFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        eq(mockMember1));\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        eq(mockMember2));\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersReturnsEarlyIfFunctionResultIsError() {\n-    // Region1 exists on member1 only, region2 exists on member 2 only. Two function executions are\n-    // necessary.\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(excludeRegion1, mockMember1);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(excludeRegion2, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    // Return error result first, then success result on subsequent calls\n-    doReturn(errorFunctionResult).doReturn(successFunctionResult).when(command)\n-        .executeFunctionAndGetFunctionResult(any(), any(), any());\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-    assertThat(functionResults.size(), is(1));\n-    assertThat(functionResults, is(Collections.singletonList(errorFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        any());\n-  }\n-\n-  private RebalanceOperationPerformer.MemberPRInfo createMemberPRInfo(String region,\n-      DistributedMember... members) {\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    firstRegionInfo.region = region;\n-    firstRegionInfo.dsMemberList.addAll(Arrays.asList(members));\n-    return firstRegionInfo;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MjU2Ng==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417252566", "bodyText": "This field can be made final.", "author": "jujoramos", "createdAt": "2020-04-29T11:44:21Z", "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandTest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.cli.Result.Status.ERROR;\n+import static org.apache.geode.management.cli.Result.Status.OK;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.hamcrest.CoreMatchers.everyItem;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+\n+public class StatusRedundancyCommandTest {\n+\n+  private StatusRedundancyCommand command;\n+  private final String includeRegion1 = \"include1\";\n+  private final String includeRegion2 = \"include2\";\n+  private String[] includeRegions = {includeRegion1, includeRegion2};\n+  private final String excludeRegion1 = \"exclude1\";\n+  private final String excludeRegion2 = \"exclude2\";\n+  private String[] excludeRegions = {excludeRegion1, excludeRegion2};", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandTest.java b/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandTest.java\ndeleted file mode 100644\nindex e7a49b55f2..0000000000\n--- a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandTest.java\n+++ /dev/null\n\n@@ -1,253 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.geode.management.internal.cli.commands;\n-\n-import static org.apache.geode.management.cli.Result.Status.ERROR;\n-import static org.apache.geode.management.cli.Result.Status.OK;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.hamcrest.CoreMatchers.everyItem;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import org.apache.geode.cache.Cache;\n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n-\n-public class StatusRedundancyCommandTest {\n-\n-  private StatusRedundancyCommand command;\n-  private final String includeRegion1 = \"include1\";\n-  private final String includeRegion2 = \"include2\";\n-  private String[] includeRegions = {includeRegion1, includeRegion2};\n-  private final String excludeRegion1 = \"exclude1\";\n-  private final String excludeRegion2 = \"exclude2\";\n-  private String[] excludeRegions = {excludeRegion1, excludeRegion2};\n-  private DistributedMember mockMember1;\n-  private DistributedMember mockMember2;\n-  private CliFunctionResult successFunctionResult;\n-  private CliFunctionResult errorFunctionResult;\n-  private RedundancyCommandUtils mockUtils;\n-  private Object[] expectedArguments;\n-\n-  @Before\n-  public void setUp() {\n-    mockMember1 = mock(DistributedMember.class);\n-    mockMember2 = mock(DistributedMember.class);\n-    boolean shouldNotReassignPrimaries = false;\n-    boolean isStatusCommand = true;\n-    expectedArguments = new Object[] {includeRegions, excludeRegions, shouldNotReassignPrimaries,\n-        isStatusCommand};\n-\n-    successFunctionResult = mock(CliFunctionResult.class);\n-    when(successFunctionResult.getStatus()).thenReturn(OK.name());\n-\n-    errorFunctionResult = mock(CliFunctionResult.class);\n-    when(errorFunctionResult.getStatus()).thenReturn(ERROR.name());\n-\n-    mockUtils = mock(RedundancyCommandUtils.class);\n-    Cache mockCache = mock(InternalCache.class);\n-\n-    command = spy(new StatusRedundancyCommand());\n-    doReturn(mockUtils).when(command).getUtils();\n-    doReturn(mockCache).when(command).getCache();\n-  }\n-\n-  @Test\n-  public void executeCallsGetNoViableMembersResultWhenNoViableMembersAreFoundForAtLeastOneRegion() {\n-    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    String region1 = \"region1\";\n-    firstMemberPRInfo.region = region1;\n-    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    String region2 = \"region2\";\n-    secondMemberPRInfo.region = region2;\n-\n-    // Put something in the members list when we call populateLists\n-    doAnswer(invocation -> {\n-      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n-      memberPRInfoList.add(firstMemberPRInfo);\n-      memberPRInfoList.add(secondMemberPRInfo);\n-      return null;\n-    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n-\n-    List<DistributedMember> viableMembers = new ArrayList<>();\n-    viableMembers.add(mock(DistributedMember.class));\n-\n-    when(mockUtils.filterViableMembersForVersion(eq(firstMemberPRInfo), any()))\n-        .thenReturn(viableMembers);\n-    when(mockUtils.filterViableMembersForVersion(eq(secondMemberPRInfo), any()))\n-        .thenReturn(Collections.emptyList());\n-\n-    command.execute(includeRegions, excludeRegions);\n-\n-    verify(mockUtils, times(1)).getNoViableMembersResult(any(), eq(region2));\n-    verify(mockUtils, times(0)).getNoViableMembersResult(any(), eq(region1));\n-  }\n-\n-  @Test\n-  public void executeCallsMethodsWithCorrectArgumentsWhenViableMembersAreFoundForAllRegions() {\n-    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n-        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n-    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n-        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstMemberPRInfo);\n-    membersForEachRegion.add(secondMemberPRInfo);\n-\n-    // Put something in the members list when we call populateLists\n-    doAnswer(invocation -> {\n-      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n-      memberPRInfoList.add(firstMemberPRInfo);\n-      memberPRInfoList.add(secondMemberPRInfo);\n-      return null;\n-    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n-\n-    // Allow us to get past the filter viable members step\n-    List<DistributedMember> viableMembers = new ArrayList<>();\n-    viableMembers.add(mock(DistributedMember.class));\n-    when(mockUtils.filterViableMembersForVersion(any(), any())).thenReturn(viableMembers);\n-\n-    // Prevent the executeFunctionOnMembers method from doing anything\n-    List<CliFunctionResult> returnedList = new ArrayList<>();\n-    doReturn(returnedList).when(command).executeFunctionOnMembers(any(), any(), any());\n-\n-    command.execute(includeRegions, excludeRegions);\n-\n-    // Confirm we set the correct viable members on the memberPRInfos\n-    verify(mockUtils, times(1)).filterViableMembersForVersion(firstMemberPRInfo,\n-        REDUNDANCY_COMMAND_ADDED_VERSION);\n-    verify(mockUtils, times(1)).filterViableMembersForVersion(secondMemberPRInfo,\n-        REDUNDANCY_COMMAND_ADDED_VERSION);\n-    assertThat(firstMemberPRInfo.dsMemberList, is(viableMembers));\n-    assertThat(secondMemberPRInfo.dsMemberList, is(viableMembers));\n-\n-    // Confirm we called executeFunctionOnMembers and buildResultModelFromFunctionResults with the\n-    // correct arguments\n-    verify(command, times(1)).executeFunctionOnMembers(includeRegions, excludeRegions,\n-        membersForEachRegion);\n-    boolean isStatusCommand = true;\n-    verify(mockUtils, times(1)).buildResultModelFromFunctionResults(eq(returnedList), any(),\n-        eq(isStatusCommand));\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersDoesNotExecuteFunctionForRegionsThatHaveHadRedundancyRestoredAlready() {\n-    // Since both regions exist on both members, restoring redundancy for either of the regions will\n-    // also cause the other region to have redundancy restored, since the function restores\n-    // redundancy for all non-excluded regions on the target member\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(includeRegion1, mockMember1, mockMember2);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(includeRegion2, mockMember1, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        any());\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-    assertThat(functionResults, is(Collections.singletonList(successFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        any());\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersExecutesFunctionForAllRegionsWithNoMembersInCommon() {\n-    // Region1 exists on member1 only, region2 exists on member 2 only. Two function executions are\n-    // necessary.\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(excludeRegion1, mockMember1);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(excludeRegion2, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        eq(mockMember1));\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        eq(mockMember2));\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-    assertThat(functionResults.size(), is(2));\n-    assertThat(functionResults, everyItem(is(successFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        eq(mockMember1));\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        eq(mockMember2));\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersReturnsEarlyIfFunctionResultIsError() {\n-    // Region1 exists on member1 only, region2 exists on member 2 only. Two function executions are\n-    // necessary.\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(excludeRegion1, mockMember1);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(excludeRegion2, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    // Return error result first, then success result on subsequent calls\n-    doReturn(errorFunctionResult).doReturn(successFunctionResult).when(command)\n-        .executeFunctionAndGetFunctionResult(any(), any(), any());\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-    assertThat(functionResults.size(), is(1));\n-    assertThat(functionResults, is(Collections.singletonList(errorFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        any());\n-  }\n-\n-  private RebalanceOperationPerformer.MemberPRInfo createMemberPRInfo(String region,\n-      DistributedMember... members) {\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    firstRegionInfo.region = region;\n-    firstRegionInfo.dsMemberList.addAll(Arrays.asList(members));\n-    return firstRegionInfo;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MzIyMA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417253220", "bodyText": "Maybe use regions instead of region?.", "author": "jujoramos", "createdAt": "2020-04-29T11:45:42Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.shell.core.annotation.CliOption;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.cli.CliMetaData;\n+import org.apache.geode.management.cli.GfshCommand;\n+import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n+import org.apache.geode.management.internal.cli.result.model.ResultModel;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.i18n.CliStrings;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+import org.apache.geode.management.internal.security.ResourceOperation;\n+import org.apache.geode.security.ResourcePermission;\n+\n+public class RestoreRedundancyCommand extends GfshCommand {\n+  static final String COMMAND_NAME = \"restore redundancy\";\n+  private static final String COMMAND_HELP =\n+      \"Restore redundancy and optionally reassign primary bucket hosting for partitioned regions in connected members. The default is for all regions to have redundancy restored and for primary buckets to be reassigned for better load balance.\";\n+  static final String INCLUDE_REGION = \"include-region\";", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3MjY3Mw==", "url": "https://github.com/apache/geode/pull/5004#discussion_r418172673", "bodyText": "The existing rebalance command uses --include-region and --exclude-region, so that naming was kept here for consistency, and also in the StatusRedundancyCommand class.", "author": "DonalEvans", "createdAt": "2020-04-30T17:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MzIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\nindex 8f2b80f859..9c03bc59bd 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\n\n@@ -14,115 +14,37 @@\n  */\n package org.apache.geode.management.internal.cli.commands;\n \n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY;\n+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY_HELP;\n \n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n \n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n import org.apache.geode.management.cli.CliMetaData;\n-import org.apache.geode.management.cli.GfshCommand;\n-import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n import org.apache.geode.management.internal.cli.result.model.ResultModel;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n import org.apache.geode.management.internal.i18n.CliStrings;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n import org.apache.geode.management.internal.security.ResourceOperation;\n import org.apache.geode.security.ResourcePermission;\n \n-public class RestoreRedundancyCommand extends GfshCommand {\n-  static final String COMMAND_NAME = \"restore redundancy\";\n-  private static final String COMMAND_HELP =\n-      \"Restore redundancy and optionally reassign primary bucket hosting for partitioned regions in connected members. The default is for all regions to have redundancy restored and for primary buckets to be reassigned for better load balance.\";\n-  static final String INCLUDE_REGION = \"include-region\";\n-  private static final String INCLUDE_REGION_HELP =\n-      \"Partitioned regions to be included when restoring redundancy. If a colocated region is included, all regions colocated with that region will also be included automatically. Includes take precedence over excludes.\";\n-  static final String EXCLUDE_REGION = \"exclude-region\";\n-  private static final String EXCLUDE_REGION_HELP =\n-      \"Partitioned regions to be excluded when restoring redundancy.\";\n-  static final String REASSIGN_PRIMARIES = \"reassign-primaries\";\n-  private static final String REASSIGN_PRIMARIES_HELP =\n-      \"If false, this operation will not attempt to reassign which members host primary buckets.\";\n-\n-  @CliCommand(value = COMMAND_NAME, help = COMMAND_HELP)\n+public class RestoreRedundancyCommand extends RedundancyCommand {\n+  @CliCommand(value = RESTORE_REDUNDANCY, help = RESTORE_REDUNDANCY_HELP)\n   @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})\n   @ResourceOperation(resource = ResourcePermission.Resource.DATA,\n       operation = ResourcePermission.Operation.MANAGE)\n-  public ResultModel execute(\n-      @CliOption(key = INCLUDE_REGION, help = INCLUDE_REGION_HELP) String[] includeRegions,\n-      @CliOption(key = EXCLUDE_REGION, help = EXCLUDE_REGION_HELP) String[] excludeRegions,\n-      @CliOption(key = REASSIGN_PRIMARIES, help = REASSIGN_PRIMARIES_HELP,\n+  public ResultModel executeRestoreRedundancy(\n+      @CliOption(key = REDUNDANCY_INCLUDE_REGION,\n+          help = REDUNDANCY_INCLUDE_REGION_HELP) String[] includeRegions,\n+      @CliOption(key = REDUNDANCY_EXCLUDE_REGION,\n+          help = REDUNDANCY_EXCLUDE_REGION_HELP) String[] excludeRegions,\n+      @CliOption(key = REDUNDANCY_REASSIGN_PRIMARIES, help = REDUNDANCY_REASSIGN_PRIMARIES_HELP,\n           specifiedDefaultValue = \"true\",\n           unspecifiedDefaultValue = \"true\") boolean reassignPrimaries) {\n-\n-    RedundancyCommandUtils utils = getUtils();\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n-\n-    utils.populateLists(membersForEachRegion, includedRegionsWithNoMembers, includeRegions,\n-        excludeRegions, (InternalCache) getCache());\n-\n-    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n-      // Filter out any members using older versions of Geode\n-      List<DistributedMember> viableMembers =\n-          utils.filterViableMembersForVersion(prInfo, REDUNDANCY_COMMAND_ADDED_VERSION);\n-\n-      if (viableMembers.size() == 0) {\n-        // If no viable members were found, return with error status\n-        return utils.getNoViableMembersResult(REDUNDANCY_COMMAND_ADDED_VERSION, prInfo.region);\n-      } else {\n-        // Update the MemberPRInfo with the viable members\n-        prInfo.dsMemberList = viableMembers;\n-      }\n-    }\n-\n-    List<CliFunctionResult> functionResults = executeFunctionOnMembers(includeRegions,\n-        excludeRegions, reassignPrimaries, membersForEachRegion);\n-\n-    return utils.buildResultModelFromFunctionResults(functionResults, includedRegionsWithNoMembers,\n-        false);\n-  }\n-\n-  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,\n-      boolean shouldReassignPrimaries,\n-      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {\n-    List<CliFunctionResult> functionResults = new ArrayList<>();\n-    Object[] functionArgs =\n-        new Object[] {includeRegions, excludeRegions, shouldReassignPrimaries};\n-    List<DistributedMember> completedMembers = new ArrayList<>();\n-\n-    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n-\n-      // Check to see if an earlier function execution has already targeted a member hosting this\n-      // region. If one has, there is no point sending a function for this region as it has already\n-      // had redundancy restored\n-      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n-        continue;\n-      }\n-      // Try the function on the first member for this region\n-      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n-      CliFunctionResult functionResult = executeFunctionAndGetFunctionResult(\n-          new RedundancyCommandFunction(), functionArgs, targetMember);\n-      if (functionResult.getStatus().equals(ERROR.name())) {\n-        // Record the error and then give up\n-        functionResults.add(functionResult);\n-        break;\n-      }\n-      functionResults.add(functionResult);\n-      completedMembers.add(targetMember);\n-    }\n-    return functionResults;\n-  }\n-\n-  // Extracted for testing\n-  RedundancyCommandUtils getUtils() {\n-    return new RedundancyCommandUtils();\n+    return super.execute(includeRegions, excludeRegions, reassignPrimaries);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MzI3NA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417253274", "bodyText": "Maybe use regions instead of region?.", "author": "jujoramos", "createdAt": "2020-04-29T11:45:48Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.shell.core.annotation.CliOption;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.cli.CliMetaData;\n+import org.apache.geode.management.cli.GfshCommand;\n+import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n+import org.apache.geode.management.internal.cli.result.model.ResultModel;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.i18n.CliStrings;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+import org.apache.geode.management.internal.security.ResourceOperation;\n+import org.apache.geode.security.ResourcePermission;\n+\n+public class RestoreRedundancyCommand extends GfshCommand {\n+  static final String COMMAND_NAME = \"restore redundancy\";\n+  private static final String COMMAND_HELP =\n+      \"Restore redundancy and optionally reassign primary bucket hosting for partitioned regions in connected members. The default is for all regions to have redundancy restored and for primary buckets to be reassigned for better load balance.\";\n+  static final String INCLUDE_REGION = \"include-region\";\n+  private static final String INCLUDE_REGION_HELP =\n+      \"Partitioned regions to be included when restoring redundancy. If a colocated region is included, all regions colocated with that region will also be included automatically. Includes take precedence over excludes.\";\n+  static final String EXCLUDE_REGION = \"exclude-region\";", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\nindex 8f2b80f859..9c03bc59bd 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommand.java\n\n@@ -14,115 +14,37 @@\n  */\n package org.apache.geode.management.internal.cli.commands;\n \n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY;\n+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY_HELP;\n \n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n \n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n import org.apache.geode.management.cli.CliMetaData;\n-import org.apache.geode.management.cli.GfshCommand;\n-import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n import org.apache.geode.management.internal.cli.result.model.ResultModel;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n import org.apache.geode.management.internal.i18n.CliStrings;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n import org.apache.geode.management.internal.security.ResourceOperation;\n import org.apache.geode.security.ResourcePermission;\n \n-public class RestoreRedundancyCommand extends GfshCommand {\n-  static final String COMMAND_NAME = \"restore redundancy\";\n-  private static final String COMMAND_HELP =\n-      \"Restore redundancy and optionally reassign primary bucket hosting for partitioned regions in connected members. The default is for all regions to have redundancy restored and for primary buckets to be reassigned for better load balance.\";\n-  static final String INCLUDE_REGION = \"include-region\";\n-  private static final String INCLUDE_REGION_HELP =\n-      \"Partitioned regions to be included when restoring redundancy. If a colocated region is included, all regions colocated with that region will also be included automatically. Includes take precedence over excludes.\";\n-  static final String EXCLUDE_REGION = \"exclude-region\";\n-  private static final String EXCLUDE_REGION_HELP =\n-      \"Partitioned regions to be excluded when restoring redundancy.\";\n-  static final String REASSIGN_PRIMARIES = \"reassign-primaries\";\n-  private static final String REASSIGN_PRIMARIES_HELP =\n-      \"If false, this operation will not attempt to reassign which members host primary buckets.\";\n-\n-  @CliCommand(value = COMMAND_NAME, help = COMMAND_HELP)\n+public class RestoreRedundancyCommand extends RedundancyCommand {\n+  @CliCommand(value = RESTORE_REDUNDANCY, help = RESTORE_REDUNDANCY_HELP)\n   @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})\n   @ResourceOperation(resource = ResourcePermission.Resource.DATA,\n       operation = ResourcePermission.Operation.MANAGE)\n-  public ResultModel execute(\n-      @CliOption(key = INCLUDE_REGION, help = INCLUDE_REGION_HELP) String[] includeRegions,\n-      @CliOption(key = EXCLUDE_REGION, help = EXCLUDE_REGION_HELP) String[] excludeRegions,\n-      @CliOption(key = REASSIGN_PRIMARIES, help = REASSIGN_PRIMARIES_HELP,\n+  public ResultModel executeRestoreRedundancy(\n+      @CliOption(key = REDUNDANCY_INCLUDE_REGION,\n+          help = REDUNDANCY_INCLUDE_REGION_HELP) String[] includeRegions,\n+      @CliOption(key = REDUNDANCY_EXCLUDE_REGION,\n+          help = REDUNDANCY_EXCLUDE_REGION_HELP) String[] excludeRegions,\n+      @CliOption(key = REDUNDANCY_REASSIGN_PRIMARIES, help = REDUNDANCY_REASSIGN_PRIMARIES_HELP,\n           specifiedDefaultValue = \"true\",\n           unspecifiedDefaultValue = \"true\") boolean reassignPrimaries) {\n-\n-    RedundancyCommandUtils utils = getUtils();\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n-\n-    utils.populateLists(membersForEachRegion, includedRegionsWithNoMembers, includeRegions,\n-        excludeRegions, (InternalCache) getCache());\n-\n-    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n-      // Filter out any members using older versions of Geode\n-      List<DistributedMember> viableMembers =\n-          utils.filterViableMembersForVersion(prInfo, REDUNDANCY_COMMAND_ADDED_VERSION);\n-\n-      if (viableMembers.size() == 0) {\n-        // If no viable members were found, return with error status\n-        return utils.getNoViableMembersResult(REDUNDANCY_COMMAND_ADDED_VERSION, prInfo.region);\n-      } else {\n-        // Update the MemberPRInfo with the viable members\n-        prInfo.dsMemberList = viableMembers;\n-      }\n-    }\n-\n-    List<CliFunctionResult> functionResults = executeFunctionOnMembers(includeRegions,\n-        excludeRegions, reassignPrimaries, membersForEachRegion);\n-\n-    return utils.buildResultModelFromFunctionResults(functionResults, includedRegionsWithNoMembers,\n-        false);\n-  }\n-\n-  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,\n-      boolean shouldReassignPrimaries,\n-      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {\n-    List<CliFunctionResult> functionResults = new ArrayList<>();\n-    Object[] functionArgs =\n-        new Object[] {includeRegions, excludeRegions, shouldReassignPrimaries};\n-    List<DistributedMember> completedMembers = new ArrayList<>();\n-\n-    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n-\n-      // Check to see if an earlier function execution has already targeted a member hosting this\n-      // region. If one has, there is no point sending a function for this region as it has already\n-      // had redundancy restored\n-      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n-        continue;\n-      }\n-      // Try the function on the first member for this region\n-      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n-      CliFunctionResult functionResult = executeFunctionAndGetFunctionResult(\n-          new RedundancyCommandFunction(), functionArgs, targetMember);\n-      if (functionResult.getStatus().equals(ERROR.name())) {\n-        // Record the error and then give up\n-        functionResults.add(functionResult);\n-        break;\n-      }\n-      functionResults.add(functionResult);\n-      completedMembers.add(targetMember);\n-    }\n-    return functionResults;\n-  }\n-\n-  // Extracted for testing\n-  RedundancyCommandUtils getUtils() {\n-    return new RedundancyCommandUtils();\n+    return super.execute(includeRegions, excludeRegions, reassignPrimaries);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4MDQzMA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417280430", "bodyText": "This code block is duplicated within the test, it can be extracted to a separate method.", "author": "jujoramos", "createdAt": "2020-04-29T12:36:25Z", "path": "geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFERS_COMPLETED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PRIMARIES_INFO_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.COMMAND_NAME;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.INCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.REASSIGN_PRIMARIES;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.assertions.CommandResultAssert;\n+import org.apache.geode.test.junit.assertions.InfoResultModelAssert;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+public class RestoreRedundancyCommandDUnitTest {\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  private int locatorPort;\n+  private MemberVM locator;\n+  private List<MemberVM> servers;\n+  private static final int SERVERS_TO_START = 3;\n+  private static final String HIGH_REDUNDANCY_REGION_NAME = \"highRedundancy\";\n+  private static final int HIGH_REDUNDANCY_COPIES = SERVERS_TO_START - 1;\n+  private static final String LOW_REDUNDANCY_REGION_NAME = \"lowRedundancy\";\n+  private static final String PARENT_REGION_NAME = \"colocatedParent\";\n+  private static final String CHILD_REGION_NAME = \"colocatedChild\";\n+  private static final int SINGLE_REDUNDANT_COPY = 1;\n+  private static final String ZERO_REDUNDANCY_REGION_NAME = \"zeroRedundancy\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    servers = new ArrayList<>();\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    IntStream.range(0, SERVERS_TO_START)\n+        .forEach(i -> servers.add(cluster.startServerVM(i + 1, locatorPort)));\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void restoreRedundancyWithNoArgumentsRestoresRedundancyForAllRegions() {\n+    List<String> regionNames = getAllRegionNames();\n+    createAndPopulateRegions(regionNames);\n+\n+    int numberOfServers = servers.size();\n+    regionNames.forEach(region -> locator\n+        .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + region, numberOfServers));\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME).getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command).statusIsSuccess()\n+        .hasNoSection(ZERO_REDUNDANCY_SECTION)\n+        .hasNoSection(UNDER_REDUNDANCY_SECTION);\n+\n+    InfoResultModelAssert summary = commandResult.hasInfoSection(SUMMARY_SECTION);\n+    summary.hasOutput().contains(ZERO_REDUNDANT_COPIES + 0);\n+    summary.hasOutput().contains(PARTIALLY_SATISFIED_REDUNDANCY + 0);\n+    summary.hasOutput().contains(FULLY_SATISFIED_REDUNDANCY + regionNames.size());\n+\n+    InfoResultModelAssert satisfiedSection =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedSection.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedSection.hasOutput().contains(regionNames);", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\nindex 3d3d2e9e5f..fdff4147a4 100644\n--- a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\n+++ b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\n\n@@ -21,28 +21,29 @@ import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsIm\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PRIMARIES_INFO_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.COMMAND_NAME;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.EXCLUDE_REGION;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.INCLUDE_REGION;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.REASSIGN_PRIMARIES;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PRIMARIES_INFO_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n import static org.hamcrest.Matchers.not;\n import static org.junit.Assert.assertThat;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.IntStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4MDk3MA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417280970", "bodyText": "This code block is duplicated within the test, it can be extracted to a separate method.", "author": "jujoramos", "createdAt": "2020-04-29T12:37:18Z", "path": "geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFERS_COMPLETED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PRIMARIES_INFO_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.COMMAND_NAME;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.INCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.REASSIGN_PRIMARIES;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.assertions.CommandResultAssert;\n+import org.apache.geode.test.junit.assertions.InfoResultModelAssert;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+public class RestoreRedundancyCommandDUnitTest {\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  private int locatorPort;\n+  private MemberVM locator;\n+  private List<MemberVM> servers;\n+  private static final int SERVERS_TO_START = 3;\n+  private static final String HIGH_REDUNDANCY_REGION_NAME = \"highRedundancy\";\n+  private static final int HIGH_REDUNDANCY_COPIES = SERVERS_TO_START - 1;\n+  private static final String LOW_REDUNDANCY_REGION_NAME = \"lowRedundancy\";\n+  private static final String PARENT_REGION_NAME = \"colocatedParent\";\n+  private static final String CHILD_REGION_NAME = \"colocatedChild\";\n+  private static final int SINGLE_REDUNDANT_COPY = 1;\n+  private static final String ZERO_REDUNDANCY_REGION_NAME = \"zeroRedundancy\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    servers = new ArrayList<>();\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    IntStream.range(0, SERVERS_TO_START)\n+        .forEach(i -> servers.add(cluster.startServerVM(i + 1, locatorPort)));\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void restoreRedundancyWithNoArgumentsRestoresRedundancyForAllRegions() {\n+    List<String> regionNames = getAllRegionNames();\n+    createAndPopulateRegions(regionNames);\n+\n+    int numberOfServers = servers.size();\n+    regionNames.forEach(region -> locator\n+        .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + region, numberOfServers));\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME).getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command).statusIsSuccess()\n+        .hasNoSection(ZERO_REDUNDANCY_SECTION)\n+        .hasNoSection(UNDER_REDUNDANCY_SECTION);\n+\n+    InfoResultModelAssert summary = commandResult.hasInfoSection(SUMMARY_SECTION);\n+    summary.hasOutput().contains(ZERO_REDUNDANT_COPIES + 0);\n+    summary.hasOutput().contains(PARTIALLY_SATISFIED_REDUNDANCY + 0);\n+    summary.hasOutput().contains(FULLY_SATISFIED_REDUNDANCY + regionNames.size());\n+\n+    InfoResultModelAssert satisfiedSection =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedSection.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedSection.hasOutput().contains(regionNames);\n+\n+    InfoResultModelAssert primariesSection = commandResult.hasInfoSection(PRIMARIES_INFO_SECTION);\n+    primariesSection.hasOutput().contains(PRIMARY_TRANSFERS_COMPLETED, PRIMARY_TRANSFER_TIME);\n+\n+    // Confirm all regions have their configured redundancy and that primaries were balanced\n+    int numberOfActiveServers = servers.size();\n+    servers.get(0).invoke(() -> {\n+      for (String regionName : regionNames) {\n+        assertRedundancyStatusForRegion(regionName, true);\n+        assertPrimariesBalanced(regionName, numberOfActiveServers, true);\n+      }\n+    });\n+  }\n+\n+  @Test\n+  public void restoreRedundancyWithIncludeRegionArgumentRestoresOnlyThoseRegions() {\n+    List<String> regionNames = getAllRegionNames();\n+    createAndPopulateRegions(regionNames);\n+\n+    int numberOfServers = servers.size();\n+    regionNames.forEach(region -> locator\n+        .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + region, numberOfServers));\n+\n+    String regionToInclude = HIGH_REDUNDANCY_REGION_NAME;\n+    List<String> nonIncludedRegions = new ArrayList<>(regionNames);\n+    nonIncludedRegions.remove(regionToInclude);\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME)\n+        .addOption(INCLUDE_REGION, regionToInclude).getCommandString();", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\nindex 3d3d2e9e5f..fdff4147a4 100644\n--- a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\n+++ b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\n\n@@ -21,28 +21,29 @@ import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsIm\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PRIMARIES_INFO_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.COMMAND_NAME;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.EXCLUDE_REGION;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.INCLUDE_REGION;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.REASSIGN_PRIMARIES;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PRIMARIES_INFO_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n import static org.hamcrest.Matchers.not;\n import static org.junit.Assert.assertThat;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.IntStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4MTA1Mg==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417281052", "bodyText": "This code block is duplicated within the test, it can be extracted to a separate method.", "author": "jujoramos", "createdAt": "2020-04-29T12:37:28Z", "path": "geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFERS_COMPLETED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PRIMARIES_INFO_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.COMMAND_NAME;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.INCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.REASSIGN_PRIMARIES;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.assertions.CommandResultAssert;\n+import org.apache.geode.test.junit.assertions.InfoResultModelAssert;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+public class RestoreRedundancyCommandDUnitTest {\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  private int locatorPort;\n+  private MemberVM locator;\n+  private List<MemberVM> servers;\n+  private static final int SERVERS_TO_START = 3;\n+  private static final String HIGH_REDUNDANCY_REGION_NAME = \"highRedundancy\";\n+  private static final int HIGH_REDUNDANCY_COPIES = SERVERS_TO_START - 1;\n+  private static final String LOW_REDUNDANCY_REGION_NAME = \"lowRedundancy\";\n+  private static final String PARENT_REGION_NAME = \"colocatedParent\";\n+  private static final String CHILD_REGION_NAME = \"colocatedChild\";\n+  private static final int SINGLE_REDUNDANT_COPY = 1;\n+  private static final String ZERO_REDUNDANCY_REGION_NAME = \"zeroRedundancy\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    servers = new ArrayList<>();\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    IntStream.range(0, SERVERS_TO_START)\n+        .forEach(i -> servers.add(cluster.startServerVM(i + 1, locatorPort)));\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void restoreRedundancyWithNoArgumentsRestoresRedundancyForAllRegions() {\n+    List<String> regionNames = getAllRegionNames();\n+    createAndPopulateRegions(regionNames);\n+\n+    int numberOfServers = servers.size();\n+    regionNames.forEach(region -> locator\n+        .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + region, numberOfServers));\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME).getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command).statusIsSuccess()\n+        .hasNoSection(ZERO_REDUNDANCY_SECTION)\n+        .hasNoSection(UNDER_REDUNDANCY_SECTION);\n+\n+    InfoResultModelAssert summary = commandResult.hasInfoSection(SUMMARY_SECTION);\n+    summary.hasOutput().contains(ZERO_REDUNDANT_COPIES + 0);\n+    summary.hasOutput().contains(PARTIALLY_SATISFIED_REDUNDANCY + 0);\n+    summary.hasOutput().contains(FULLY_SATISFIED_REDUNDANCY + regionNames.size());\n+\n+    InfoResultModelAssert satisfiedSection =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedSection.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedSection.hasOutput().contains(regionNames);\n+\n+    InfoResultModelAssert primariesSection = commandResult.hasInfoSection(PRIMARIES_INFO_SECTION);\n+    primariesSection.hasOutput().contains(PRIMARY_TRANSFERS_COMPLETED, PRIMARY_TRANSFER_TIME);\n+\n+    // Confirm all regions have their configured redundancy and that primaries were balanced\n+    int numberOfActiveServers = servers.size();\n+    servers.get(0).invoke(() -> {\n+      for (String regionName : regionNames) {\n+        assertRedundancyStatusForRegion(regionName, true);\n+        assertPrimariesBalanced(regionName, numberOfActiveServers, true);\n+      }\n+    });\n+  }\n+\n+  @Test\n+  public void restoreRedundancyWithIncludeRegionArgumentRestoresOnlyThoseRegions() {\n+    List<String> regionNames = getAllRegionNames();\n+    createAndPopulateRegions(regionNames);\n+\n+    int numberOfServers = servers.size();\n+    regionNames.forEach(region -> locator\n+        .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + region, numberOfServers));\n+\n+    String regionToInclude = HIGH_REDUNDANCY_REGION_NAME;\n+    List<String> nonIncludedRegions = new ArrayList<>(regionNames);\n+    nonIncludedRegions.remove(regionToInclude);\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME)\n+        .addOption(INCLUDE_REGION, regionToInclude).getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command).statusIsSuccess()\n+        .hasNoSection(ZERO_REDUNDANCY_SECTION)\n+        .hasNoSection(UNDER_REDUNDANCY_SECTION)\n+        .doesNotContainOutput(nonIncludedRegions.toArray(new String[0]));\n+\n+    InfoResultModelAssert summary = commandResult.hasInfoSection(SUMMARY_SECTION);\n+    summary.hasOutput().contains(ZERO_REDUNDANT_COPIES + 0);\n+    summary.hasOutput().contains(PARTIALLY_SATISFIED_REDUNDANCY + 0);\n+    summary.hasOutput().contains(FULLY_SATISFIED_REDUNDANCY + 1);\n+\n+    InfoResultModelAssert satisfiedSection =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedSection.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedSection.hasOutput().contains(regionToInclude);", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\nindex 3d3d2e9e5f..fdff4147a4 100644\n--- a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\n+++ b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandDUnitTest.java\n\n@@ -21,28 +21,29 @@ import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsIm\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PRIMARIES_INFO_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.COMMAND_NAME;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.EXCLUDE_REGION;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.INCLUDE_REGION;\n-import static org.apache.geode.management.internal.cli.commands.RestoreRedundancyCommand.REASSIGN_PRIMARIES;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PRIMARIES_INFO_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n import static org.hamcrest.Matchers.not;\n import static org.junit.Assert.assertThat;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.IntStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4MjAzNA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417282034", "bodyText": "This code block is duplicated within the test, it can be extracted to a separate method.", "author": "jujoramos", "createdAt": "2020-04-29T12:39:09Z", "path": "geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.COMMAND_NAME;\n+import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.INCLUDE_REGION;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.assertions.CommandResultAssert;\n+import org.apache.geode.test.junit.assertions.InfoResultModelAssert;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+public class StatusRedundancyCommandDUnitTest {\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  private int locatorPort;\n+  private MemberVM locator;\n+  private List<MemberVM> servers;\n+  private static final int SERVERS_TO_START = 2;\n+  private static final String SATISFIED_REGION = \"satisfiedRedundancy\";\n+  private static final int SATISFIABLE_COPIES = SERVERS_TO_START - 1;\n+  private static final String UNSATISFIED_REGION = \"unsatisfiedRedundancy\";\n+  private static final int UNSATISFIABLE_COPIES = SERVERS_TO_START;\n+  private static final String NO_CONFIGURED_REDUNDANCY_REGION = \"noConfiguredRedundancy\";\n+  private static final String ZERO_COPIES_REGION = \"zeroRedundantCopies\";\n+  private static final List<String> regionNames = Arrays.asList(SATISFIED_REGION,\n+      UNSATISFIED_REGION, NO_CONFIGURED_REDUNDANCY_REGION, ZERO_COPIES_REGION);\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    servers = new ArrayList<>();\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    IntStream.range(0, SERVERS_TO_START)\n+        .forEach(i -> servers.add(cluster.startServerVM(i + 1, locatorPort)));\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void statusRedundancyWithNoArgumentsReturnsStatusForAllRegions() {\n+    createAndPopulateRegions();\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME).getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command);\n+    commandResult.statusIsSuccess();\n+\n+    verifySummarySection(commandResult, 1, 1, 2);\n+\n+    InfoResultModelAssert zeroRedundancy = commandResult.hasInfoSection(ZERO_REDUNDANCY_SECTION);\n+    zeroRedundancy.hasHeader().isEqualTo(NO_REDUNDANT_COPIES_FOR_REGIONS);\n+    zeroRedundancy.hasOutput().contains(ZERO_COPIES_REGION);\n+\n+    InfoResultModelAssert underRedundancy = commandResult.hasInfoSection(UNDER_REDUNDANCY_SECTION);\n+    underRedundancy.hasHeader().isEqualTo(REDUNDANCY_NOT_SATISFIED_FOR_REGIONS);\n+    underRedundancy.hasOutput().contains(UNSATISFIED_REGION);\n+\n+    InfoResultModelAssert satisfiedRedundancy =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedRedundancy.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedRedundancy.hasOutput().contains(SATISFIED_REGION,\n+        NO_CONFIGURED_REDUNDANCY_REGION);\n+  }\n+\n+  @Test\n+  public void statusRedundancyWithIncludeRegionArgumentReturnsStatusForOnlyThatRegion() {\n+    createAndPopulateRegions();\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME)\n+        .addOption(INCLUDE_REGION, SATISFIED_REGION)\n+        .getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command);\n+    commandResult.statusIsSuccess()\n+        .hasNoSection(ZERO_REDUNDANCY_SECTION)\n+        .hasNoSection(UNDER_REDUNDANCY_SECTION)\n+        .doesNotContainOutput(UNSATISFIED_REGION)\n+        .doesNotContainOutput(ZERO_COPIES_REGION)\n+        .doesNotContainOutput(NO_CONFIGURED_REDUNDANCY_REGION);\n+\n+    verifySummarySection(commandResult, 0, 0, 1);\n+\n+    InfoResultModelAssert satisfiedRedundancy =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedRedundancy.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedRedundancy.hasOutput().contains(SATISFIED_REGION);", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java\nindex abd34872d9..ba66f30ea0 100644\n--- a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java\n+++ b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java\n\n@@ -19,23 +19,25 @@ import static org.apache.geode.cache.Region.SEPARATOR;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n-import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.COMMAND_NAME;\n-import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.EXCLUDE_REGION;\n-import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.INCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PRIMARIES_INFO_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.STATUS_REDUNDANCY;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.IntStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4MjIxOA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417282218", "bodyText": "This code block is duplicated within the test, it can be extracted to a separate method.", "author": "jujoramos", "createdAt": "2020-04-29T12:39:30Z", "path": "geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.COMMAND_NAME;\n+import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.INCLUDE_REGION;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.assertions.CommandResultAssert;\n+import org.apache.geode.test.junit.assertions.InfoResultModelAssert;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+public class StatusRedundancyCommandDUnitTest {\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  private int locatorPort;\n+  private MemberVM locator;\n+  private List<MemberVM> servers;\n+  private static final int SERVERS_TO_START = 2;\n+  private static final String SATISFIED_REGION = \"satisfiedRedundancy\";\n+  private static final int SATISFIABLE_COPIES = SERVERS_TO_START - 1;\n+  private static final String UNSATISFIED_REGION = \"unsatisfiedRedundancy\";\n+  private static final int UNSATISFIABLE_COPIES = SERVERS_TO_START;\n+  private static final String NO_CONFIGURED_REDUNDANCY_REGION = \"noConfiguredRedundancy\";\n+  private static final String ZERO_COPIES_REGION = \"zeroRedundantCopies\";\n+  private static final List<String> regionNames = Arrays.asList(SATISFIED_REGION,\n+      UNSATISFIED_REGION, NO_CONFIGURED_REDUNDANCY_REGION, ZERO_COPIES_REGION);\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    servers = new ArrayList<>();\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    IntStream.range(0, SERVERS_TO_START)\n+        .forEach(i -> servers.add(cluster.startServerVM(i + 1, locatorPort)));\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void statusRedundancyWithNoArgumentsReturnsStatusForAllRegions() {\n+    createAndPopulateRegions();\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME).getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command);\n+    commandResult.statusIsSuccess();\n+\n+    verifySummarySection(commandResult, 1, 1, 2);\n+\n+    InfoResultModelAssert zeroRedundancy = commandResult.hasInfoSection(ZERO_REDUNDANCY_SECTION);\n+    zeroRedundancy.hasHeader().isEqualTo(NO_REDUNDANT_COPIES_FOR_REGIONS);\n+    zeroRedundancy.hasOutput().contains(ZERO_COPIES_REGION);\n+\n+    InfoResultModelAssert underRedundancy = commandResult.hasInfoSection(UNDER_REDUNDANCY_SECTION);\n+    underRedundancy.hasHeader().isEqualTo(REDUNDANCY_NOT_SATISFIED_FOR_REGIONS);\n+    underRedundancy.hasOutput().contains(UNSATISFIED_REGION);\n+\n+    InfoResultModelAssert satisfiedRedundancy =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedRedundancy.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedRedundancy.hasOutput().contains(SATISFIED_REGION,\n+        NO_CONFIGURED_REDUNDANCY_REGION);\n+  }\n+\n+  @Test\n+  public void statusRedundancyWithIncludeRegionArgumentReturnsStatusForOnlyThatRegion() {\n+    createAndPopulateRegions();\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME)\n+        .addOption(INCLUDE_REGION, SATISFIED_REGION)\n+        .getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command);\n+    commandResult.statusIsSuccess()\n+        .hasNoSection(ZERO_REDUNDANCY_SECTION)\n+        .hasNoSection(UNDER_REDUNDANCY_SECTION)\n+        .doesNotContainOutput(UNSATISFIED_REGION)\n+        .doesNotContainOutput(ZERO_COPIES_REGION)\n+        .doesNotContainOutput(NO_CONFIGURED_REDUNDANCY_REGION);\n+\n+    verifySummarySection(commandResult, 0, 0, 1);\n+\n+    InfoResultModelAssert satisfiedRedundancy =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedRedundancy.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedRedundancy.hasOutput().contains(SATISFIED_REGION);\n+  }\n+\n+  @Test\n+  public void statusRedundancyWithExcludeRegionArgumentReturnsStatusForAllExceptThatRegion() {\n+    createAndPopulateRegions();\n+\n+    String command = new CommandStringBuilder(COMMAND_NAME)\n+        .addOption(EXCLUDE_REGION, ZERO_COPIES_REGION)\n+        .getCommandString();\n+\n+    CommandResultAssert commandResult = gfsh.executeAndAssertThat(command);\n+    commandResult.statusIsSuccess()\n+        .hasNoSection(ZERO_REDUNDANCY_SECTION)\n+        .doesNotContainOutput(ZERO_COPIES_REGION);\n+\n+    verifySummarySection(commandResult, 0, 1, 2);\n+\n+    InfoResultModelAssert underRedundancy = commandResult.hasInfoSection(UNDER_REDUNDANCY_SECTION);\n+    underRedundancy.hasHeader().isEqualTo(REDUNDANCY_NOT_SATISFIED_FOR_REGIONS);\n+    underRedundancy.hasOutput().contains(UNSATISFIED_REGION);\n+\n+    InfoResultModelAssert satisfiedRedundancy =\n+        commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);\n+    satisfiedRedundancy.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);\n+    satisfiedRedundancy.hasOutput().contains(SATISFIED_REGION,\n+        NO_CONFIGURED_REDUNDANCY_REGION);", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java\nindex abd34872d9..ba66f30ea0 100644\n--- a/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java\n+++ b/geode-gfsh/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommandDUnitTest.java\n\n@@ -19,23 +19,25 @@ import static org.apache.geode.cache.Region.SEPARATOR;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.FULLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_FOR_REGION_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_HEADER;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.NO_MEMBERS_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.PARTIALLY_SATISFIED_REDUNDANCY;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SATISFIED_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.SUMMARY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.UNDER_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANCY_SECTION;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.ZERO_REDUNDANT_COPIES;\n-import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.COMMAND_NAME;\n-import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.EXCLUDE_REGION;\n-import static org.apache.geode.management.internal.cli.commands.StatusRedundancyCommand.INCLUDE_REGION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.FULLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_FOR_REGION_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_HEADER;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.NO_MEMBERS_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PARTIALLY_SATISFIED_REDUNDANCY;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.PRIMARIES_INFO_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SATISFIED_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.SUMMARY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.UNDER_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANCY_SECTION;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommand.ZERO_REDUNDANT_COPIES;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.STATUS_REDUNDANCY;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.IntStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NDAzMw==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417284033", "bodyText": "Maybe use CacheConfig.SEPARATOR instead of hardcoding the character? (I know we don't it consistently across the code, but...).", "author": "jujoramos", "createdAt": "2020-04-29T12:42:32Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommandUtils.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFERS_COMPLETED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.cli.Result;\n+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;\n+import org.apache.geode.management.internal.cli.result.model.ResultModel;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+\n+public class RedundancyCommandUtils {\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String NO_MEMBERS_SECTION = \"no-members\";\n+  public static final String NO_MEMBERS_HEADER =\n+      \"No partitioned regions were found.\";\n+  public static final String NO_MEMBERS_FOR_REGION_SECTION = \"no-members-for-region\";\n+  public static final String NO_MEMBERS_FOR_REGION_HEADER =\n+      \"No members hosting the following regions were found: \";\n+  public static final String ERROR_SECTION = \"errors\";\n+  public static final String ERROR_SECTION_HEADER =\n+      \"The following errors or exceptions were encountered: \";\n+  public static final String SUMMARY_SECTION = \"summary-section\";\n+  public static final String ZERO_REDUNDANT_COPIES =\n+      \"Number of regions with zero redundant copies = \";\n+  public static final String PARTIALLY_SATISFIED_REDUNDANCY =\n+      \"Number of regions with partially satisfied redundancy = \";\n+  public static final String FULLY_SATISFIED_REDUNDANCY =\n+      \"Number of regions with fully satisfied redundancy = \";\n+  public static final String ZERO_REDUNDANCY_SECTION = \"zero-redundancy\";\n+  public static final String UNDER_REDUNDANCY_SECTION = \"under-redundancy\";\n+  public static final String SATISFIED_REDUNDANCY_SECTION = \"satisfied-redundancy\";\n+  public static final String PRIMARIES_INFO_SECTION = \"primaries-info\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+  public static final Version REDUNDANCY_COMMAND_ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String INDENT = \"  \";\n+\n+  void populateLists(List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion,\n+      List<String> noMemberRegions, String[] includeRegions, String[] excludeRegions,\n+      InternalCache cache) {\n+    // Include all regions\n+    if (includeRegions == null) {\n+      // Exclude these regions\n+      List<String> excludedRegionList =\n+          excludeRegions != null ? Arrays.asList(excludeRegions) : new ArrayList<>();\n+\n+      List<RebalanceOperationPerformer.MemberPRInfo> memberRegionList =\n+          getMembersForEachRegion(excludedRegionList, cache);\n+      membersForEachRegion.addAll(memberRegionList);\n+    } else {\n+      for (String regionName : includeRegions) {\n+        DistributedMember memberForRegion = getOneMemberForRegion(regionName, cache);\n+\n+        // If we did not find a member for this region name, add it to the list of regions with no\n+        // members\n+        if (memberForRegion == null) {\n+          noMemberRegions.add(regionName);\n+        } else {\n+          RebalanceOperationPerformer.MemberPRInfo memberPRInfo =\n+              new RebalanceOperationPerformer.MemberPRInfo();\n+          memberPRInfo.region = regionName;\n+          memberPRInfo.dsMemberList.add(memberForRegion);\n+          membersForEachRegion.add(memberPRInfo);\n+        }\n+      }\n+    }\n+  }\n+\n+  // Extracted for testing\n+  List<RebalanceOperationPerformer.MemberPRInfo> getMembersForEachRegion(\n+      List<String> excludedRegionList, InternalCache cache) {\n+    return RebalanceOperationPerformer.getMemberRegionList(\n+        ManagementService.getManagementService(cache), cache, excludedRegionList);\n+  }\n+\n+  // Extracted for testing\n+  DistributedMember getOneMemberForRegion(String regionName, InternalCache cache) {\n+    String regionNameWithSeparator = regionName;\n+    // The getAssociatedMembers method requires region names start with '/'\n+    if (!regionName.startsWith(\"/\")) {\n+      regionNameWithSeparator = \"/\" + regionName;", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzI2Mg==", "url": "https://github.com/apache/geode/pull/5004#discussion_r418223262", "bodyText": "Good call", "author": "DonalEvans", "createdAt": "2020-04-30T18:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NDAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommandUtils.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommand.java\nsimilarity index 69%\nrename from geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommandUtils.java\nrename to geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommand.java\nindex 313dac4e57..01ec43c67f 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommandUtils.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommand.java\n\n@@ -19,13 +19,16 @@ import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsIm\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+import org.apache.geode.cache.configuration.CacheConfig;\n import org.apache.geode.cache.control.RegionRedundancyStatus;\n import org.apache.geode.cache.control.RestoreRedundancyResults;\n import org.apache.geode.distributed.DistributedMember;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4Njc1OA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417286758", "bodyText": "Maybe use regions instead of region?.", "author": "jujoramos", "createdAt": "2020-04-29T12:47:07Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.shell.core.annotation.CliOption;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.cli.CliMetaData;\n+import org.apache.geode.management.cli.GfshCommand;\n+import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n+import org.apache.geode.management.internal.cli.result.model.ResultModel;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.i18n.CliStrings;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+import org.apache.geode.management.internal.security.ResourceOperation;\n+import org.apache.geode.security.ResourcePermission;\n+\n+public class StatusRedundancyCommand extends GfshCommand {\n+  static final String COMMAND_NAME = \"status redundancy\";\n+  private static final String COMMAND_HELP =\n+      \"Report the redundancy status for partitioned regions in connected members. The default is to report status for all regions.\";\n+  static final String INCLUDE_REGION = \"include-region\";", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\nindex 709ca72ac9..c1624ba0c6 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\n\n@@ -14,108 +14,33 @@\n  */\n package org.apache.geode.management.internal.cli.commands;\n \n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.STATUS_REDUNDANCY;\n+import static org.apache.geode.management.internal.i18n.CliStrings.STATUS_REDUNDANCY_HELP;\n \n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n \n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n import org.apache.geode.management.cli.CliMetaData;\n-import org.apache.geode.management.cli.GfshCommand;\n-import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n import org.apache.geode.management.internal.cli.result.model.ResultModel;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n import org.apache.geode.management.internal.i18n.CliStrings;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n import org.apache.geode.management.internal.security.ResourceOperation;\n import org.apache.geode.security.ResourcePermission;\n \n-public class StatusRedundancyCommand extends GfshCommand {\n-  static final String COMMAND_NAME = \"status redundancy\";\n-  private static final String COMMAND_HELP =\n-      \"Report the redundancy status for partitioned regions in connected members. The default is to report status for all regions.\";\n-  static final String INCLUDE_REGION = \"include-region\";\n-  private static final String INCLUDE_REGION_HELP =\n-      \"Partitioned regions to be included when reporting redundancy status. Includes take precedence over excludes.\";\n-  static final String EXCLUDE_REGION = \"exclude-region\";\n-  private static final String EXCLUDE_REGION_HELP =\n-      \"Partitioned regions to be excluded when reporting redundancy status.\";\n-\n-  @CliCommand(value = COMMAND_NAME, help = COMMAND_HELP)\n+public class StatusRedundancyCommand extends RedundancyCommand {\n+  @CliCommand(value = STATUS_REDUNDANCY, help = STATUS_REDUNDANCY_HELP)\n   @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})\n   @ResourceOperation(resource = ResourcePermission.Resource.DATA,\n       operation = ResourcePermission.Operation.READ)\n-  public ResultModel execute(\n-      @CliOption(key = INCLUDE_REGION, help = INCLUDE_REGION_HELP) String[] includeRegions,\n-      @CliOption(key = EXCLUDE_REGION, help = EXCLUDE_REGION_HELP) String[] excludeRegions) {\n-    RedundancyCommandUtils utils = getUtils();\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n-\n-    utils.populateLists(membersForEachRegion, includedRegionsWithNoMembers, includeRegions,\n-        excludeRegions, (InternalCache) getCache());\n-\n-    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n-      // Filter out any members using older versions of Geode\n-      List<DistributedMember> viableMembers =\n-          utils.filterViableMembersForVersion(prInfo, REDUNDANCY_COMMAND_ADDED_VERSION);\n-\n-      if (viableMembers.size() == 0) {\n-        // If no viable members were found, return with error status\n-        return utils.getNoViableMembersResult(REDUNDANCY_COMMAND_ADDED_VERSION, prInfo.region);\n-      } else {\n-        // Update the MemberPRInfo with the viable members\n-        prInfo.dsMemberList = viableMembers;\n-      }\n-    }\n-\n-    List<CliFunctionResult> functionResults =\n-        executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-\n-    return utils.buildResultModelFromFunctionResults(functionResults, includedRegionsWithNoMembers,\n-        true);\n-  }\n-\n-  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,\n-      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {\n-\n-    List<CliFunctionResult> functionResults = new ArrayList<>();\n-    boolean shouldNotReassignPrimaries = false;\n-    boolean isStatusCommand = true;\n-    Object[] functionArgs =\n-        new Object[] {includeRegions, excludeRegions, shouldNotReassignPrimaries, isStatusCommand};\n-    List<DistributedMember> completedMembers = new ArrayList<>();\n-    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n-      // Check to see if an earlier function execution has already targeted a member hosting this\n-      // region. If one has, there is no point sending a function for this region as it has already\n-      // had redundancy restored\n-      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n-        continue;\n-      }\n-      // Try the function on the first member for this region\n-      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n-      CliFunctionResult functionResult = executeFunctionAndGetFunctionResult(\n-          new RedundancyCommandFunction(), functionArgs, targetMember);\n-      if (functionResult.getStatus().equals(ERROR.name())) {\n-        // Record the error and then give up\n-        functionResults.add(functionResult);\n-        break;\n-      }\n-      functionResults.add(functionResult);\n-      completedMembers.add(targetMember);\n-    }\n-    return functionResults;\n-  }\n+  public ResultModel executeStatusRedundancy(\n+      @CliOption(key = REDUNDANCY_INCLUDE_REGION,\n+          help = REDUNDANCY_INCLUDE_REGION_HELP) String[] includeRegions,\n+      @CliOption(key = REDUNDANCY_EXCLUDE_REGION,\n+          help = REDUNDANCY_EXCLUDE_REGION_HELP) String[] excludeRegions) {\n \n-  // Extracted for testing\n-  RedundancyCommandUtils getUtils() {\n-    return new RedundancyCommandUtils();\n+    return super.execute(includeRegions, excludeRegions, false, true);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NjgxMw==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417286813", "bodyText": "Maybe use regions instead of region?.", "author": "jujoramos", "createdAt": "2020-04-29T12:47:12Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.shell.core.annotation.CliOption;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.cli.CliMetaData;\n+import org.apache.geode.management.cli.GfshCommand;\n+import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n+import org.apache.geode.management.internal.cli.result.model.ResultModel;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.i18n.CliStrings;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+import org.apache.geode.management.internal.security.ResourceOperation;\n+import org.apache.geode.security.ResourcePermission;\n+\n+public class StatusRedundancyCommand extends GfshCommand {\n+  static final String COMMAND_NAME = \"status redundancy\";\n+  private static final String COMMAND_HELP =\n+      \"Report the redundancy status for partitioned regions in connected members. The default is to report status for all regions.\";\n+  static final String INCLUDE_REGION = \"include-region\";\n+  private static final String INCLUDE_REGION_HELP =\n+      \"Partitioned regions to be included when reporting redundancy status. Includes take precedence over excludes.\";\n+  static final String EXCLUDE_REGION = \"exclude-region\";", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\nindex 709ca72ac9..c1624ba0c6 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\n\n@@ -14,108 +14,33 @@\n  */\n package org.apache.geode.management.internal.cli.commands;\n \n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.STATUS_REDUNDANCY;\n+import static org.apache.geode.management.internal.i18n.CliStrings.STATUS_REDUNDANCY_HELP;\n \n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n \n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n import org.apache.geode.management.cli.CliMetaData;\n-import org.apache.geode.management.cli.GfshCommand;\n-import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n import org.apache.geode.management.internal.cli.result.model.ResultModel;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n import org.apache.geode.management.internal.i18n.CliStrings;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n import org.apache.geode.management.internal.security.ResourceOperation;\n import org.apache.geode.security.ResourcePermission;\n \n-public class StatusRedundancyCommand extends GfshCommand {\n-  static final String COMMAND_NAME = \"status redundancy\";\n-  private static final String COMMAND_HELP =\n-      \"Report the redundancy status for partitioned regions in connected members. The default is to report status for all regions.\";\n-  static final String INCLUDE_REGION = \"include-region\";\n-  private static final String INCLUDE_REGION_HELP =\n-      \"Partitioned regions to be included when reporting redundancy status. Includes take precedence over excludes.\";\n-  static final String EXCLUDE_REGION = \"exclude-region\";\n-  private static final String EXCLUDE_REGION_HELP =\n-      \"Partitioned regions to be excluded when reporting redundancy status.\";\n-\n-  @CliCommand(value = COMMAND_NAME, help = COMMAND_HELP)\n+public class StatusRedundancyCommand extends RedundancyCommand {\n+  @CliCommand(value = STATUS_REDUNDANCY, help = STATUS_REDUNDANCY_HELP)\n   @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})\n   @ResourceOperation(resource = ResourcePermission.Resource.DATA,\n       operation = ResourcePermission.Operation.READ)\n-  public ResultModel execute(\n-      @CliOption(key = INCLUDE_REGION, help = INCLUDE_REGION_HELP) String[] includeRegions,\n-      @CliOption(key = EXCLUDE_REGION, help = EXCLUDE_REGION_HELP) String[] excludeRegions) {\n-    RedundancyCommandUtils utils = getUtils();\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n-\n-    utils.populateLists(membersForEachRegion, includedRegionsWithNoMembers, includeRegions,\n-        excludeRegions, (InternalCache) getCache());\n-\n-    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n-      // Filter out any members using older versions of Geode\n-      List<DistributedMember> viableMembers =\n-          utils.filterViableMembersForVersion(prInfo, REDUNDANCY_COMMAND_ADDED_VERSION);\n-\n-      if (viableMembers.size() == 0) {\n-        // If no viable members were found, return with error status\n-        return utils.getNoViableMembersResult(REDUNDANCY_COMMAND_ADDED_VERSION, prInfo.region);\n-      } else {\n-        // Update the MemberPRInfo with the viable members\n-        prInfo.dsMemberList = viableMembers;\n-      }\n-    }\n-\n-    List<CliFunctionResult> functionResults =\n-        executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-\n-    return utils.buildResultModelFromFunctionResults(functionResults, includedRegionsWithNoMembers,\n-        true);\n-  }\n-\n-  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,\n-      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {\n-\n-    List<CliFunctionResult> functionResults = new ArrayList<>();\n-    boolean shouldNotReassignPrimaries = false;\n-    boolean isStatusCommand = true;\n-    Object[] functionArgs =\n-        new Object[] {includeRegions, excludeRegions, shouldNotReassignPrimaries, isStatusCommand};\n-    List<DistributedMember> completedMembers = new ArrayList<>();\n-    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n-      // Check to see if an earlier function execution has already targeted a member hosting this\n-      // region. If one has, there is no point sending a function for this region as it has already\n-      // had redundancy restored\n-      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n-        continue;\n-      }\n-      // Try the function on the first member for this region\n-      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n-      CliFunctionResult functionResult = executeFunctionAndGetFunctionResult(\n-          new RedundancyCommandFunction(), functionArgs, targetMember);\n-      if (functionResult.getStatus().equals(ERROR.name())) {\n-        // Record the error and then give up\n-        functionResults.add(functionResult);\n-        break;\n-      }\n-      functionResults.add(functionResult);\n-      completedMembers.add(targetMember);\n-    }\n-    return functionResults;\n-  }\n+  public ResultModel executeStatusRedundancy(\n+      @CliOption(key = REDUNDANCY_INCLUDE_REGION,\n+          help = REDUNDANCY_INCLUDE_REGION_HELP) String[] includeRegions,\n+      @CliOption(key = REDUNDANCY_EXCLUDE_REGION,\n+          help = REDUNDANCY_EXCLUDE_REGION_HELP) String[] excludeRegions) {\n \n-  // Extracted for testing\n-  RedundancyCommandUtils getUtils() {\n-    return new RedundancyCommandUtils();\n+    return super.execute(includeRegions, excludeRegions, false, true);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NzkxMA==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417287910", "bodyText": "Unneeded variable.", "author": "jujoramos", "createdAt": "2020-04-29T12:48:58Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.shell.core.annotation.CliCommand;\n+import org.springframework.shell.core.annotation.CliOption;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.cli.CliMetaData;\n+import org.apache.geode.management.cli.GfshCommand;\n+import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n+import org.apache.geode.management.internal.cli.result.model.ResultModel;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.i18n.CliStrings;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+import org.apache.geode.management.internal.security.ResourceOperation;\n+import org.apache.geode.security.ResourcePermission;\n+\n+public class StatusRedundancyCommand extends GfshCommand {\n+  static final String COMMAND_NAME = \"status redundancy\";\n+  private static final String COMMAND_HELP =\n+      \"Report the redundancy status for partitioned regions in connected members. The default is to report status for all regions.\";\n+  static final String INCLUDE_REGION = \"include-region\";\n+  private static final String INCLUDE_REGION_HELP =\n+      \"Partitioned regions to be included when reporting redundancy status. Includes take precedence over excludes.\";\n+  static final String EXCLUDE_REGION = \"exclude-region\";\n+  private static final String EXCLUDE_REGION_HELP =\n+      \"Partitioned regions to be excluded when reporting redundancy status.\";\n+\n+  @CliCommand(value = COMMAND_NAME, help = COMMAND_HELP)\n+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})\n+  @ResourceOperation(resource = ResourcePermission.Resource.DATA,\n+      operation = ResourcePermission.Operation.READ)\n+  public ResultModel execute(\n+      @CliOption(key = INCLUDE_REGION, help = INCLUDE_REGION_HELP) String[] includeRegions,\n+      @CliOption(key = EXCLUDE_REGION, help = EXCLUDE_REGION_HELP) String[] excludeRegions) {\n+    RedundancyCommandUtils utils = getUtils();\n+\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    utils.populateLists(membersForEachRegion, includedRegionsWithNoMembers, includeRegions,\n+        excludeRegions, (InternalCache) getCache());\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers =\n+          utils.filterViableMembersForVersion(prInfo, REDUNDANCY_COMMAND_ADDED_VERSION);\n+\n+      if (viableMembers.size() == 0) {\n+        // If no viable members were found, return with error status\n+        return utils.getNoViableMembersResult(REDUNDANCY_COMMAND_ADDED_VERSION, prInfo.region);\n+      } else {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      }\n+    }\n+\n+    List<CliFunctionResult> functionResults =\n+        executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n+\n+    return utils.buildResultModelFromFunctionResults(functionResults, includedRegionsWithNoMembers,\n+        true);\n+  }\n+\n+  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,\n+      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {\n+\n+    List<CliFunctionResult> functionResults = new ArrayList<>();\n+    boolean shouldNotReassignPrimaries = false;", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMjYyMg==", "url": "https://github.com/apache/geode/pull/5004#discussion_r418222622", "bodyText": "Agreed. I've removed the redundant variables and introduced a comment to clarify the meaning of each of the function arguments instead.", "author": "DonalEvans", "createdAt": "2020-04-30T18:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NzkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\nindex 709ca72ac9..c1624ba0c6 100644\n--- a/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\n+++ b/geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/StatusRedundancyCommand.java\n\n@@ -14,108 +14,33 @@\n  */\n package org.apache.geode.management.internal.cli.commands;\n \n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;\n+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION_HELP;\n+import static org.apache.geode.management.internal.i18n.CliStrings.STATUS_REDUNDANCY;\n+import static org.apache.geode.management.internal.i18n.CliStrings.STATUS_REDUNDANCY_HELP;\n \n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n \n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n import org.apache.geode.management.cli.CliMetaData;\n-import org.apache.geode.management.cli.GfshCommand;\n-import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n import org.apache.geode.management.internal.cli.result.model.ResultModel;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n import org.apache.geode.management.internal.i18n.CliStrings;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n import org.apache.geode.management.internal.security.ResourceOperation;\n import org.apache.geode.security.ResourcePermission;\n \n-public class StatusRedundancyCommand extends GfshCommand {\n-  static final String COMMAND_NAME = \"status redundancy\";\n-  private static final String COMMAND_HELP =\n-      \"Report the redundancy status for partitioned regions in connected members. The default is to report status for all regions.\";\n-  static final String INCLUDE_REGION = \"include-region\";\n-  private static final String INCLUDE_REGION_HELP =\n-      \"Partitioned regions to be included when reporting redundancy status. Includes take precedence over excludes.\";\n-  static final String EXCLUDE_REGION = \"exclude-region\";\n-  private static final String EXCLUDE_REGION_HELP =\n-      \"Partitioned regions to be excluded when reporting redundancy status.\";\n-\n-  @CliCommand(value = COMMAND_NAME, help = COMMAND_HELP)\n+public class StatusRedundancyCommand extends RedundancyCommand {\n+  @CliCommand(value = STATUS_REDUNDANCY, help = STATUS_REDUNDANCY_HELP)\n   @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})\n   @ResourceOperation(resource = ResourcePermission.Resource.DATA,\n       operation = ResourcePermission.Operation.READ)\n-  public ResultModel execute(\n-      @CliOption(key = INCLUDE_REGION, help = INCLUDE_REGION_HELP) String[] includeRegions,\n-      @CliOption(key = EXCLUDE_REGION, help = EXCLUDE_REGION_HELP) String[] excludeRegions) {\n-    RedundancyCommandUtils utils = getUtils();\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n-\n-    utils.populateLists(membersForEachRegion, includedRegionsWithNoMembers, includeRegions,\n-        excludeRegions, (InternalCache) getCache());\n-\n-    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n-      // Filter out any members using older versions of Geode\n-      List<DistributedMember> viableMembers =\n-          utils.filterViableMembersForVersion(prInfo, REDUNDANCY_COMMAND_ADDED_VERSION);\n-\n-      if (viableMembers.size() == 0) {\n-        // If no viable members were found, return with error status\n-        return utils.getNoViableMembersResult(REDUNDANCY_COMMAND_ADDED_VERSION, prInfo.region);\n-      } else {\n-        // Update the MemberPRInfo with the viable members\n-        prInfo.dsMemberList = viableMembers;\n-      }\n-    }\n-\n-    List<CliFunctionResult> functionResults =\n-        executeFunctionOnMembers(includeRegions, excludeRegions, membersForEachRegion);\n-\n-    return utils.buildResultModelFromFunctionResults(functionResults, includedRegionsWithNoMembers,\n-        true);\n-  }\n-\n-  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,\n-      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {\n-\n-    List<CliFunctionResult> functionResults = new ArrayList<>();\n-    boolean shouldNotReassignPrimaries = false;\n-    boolean isStatusCommand = true;\n-    Object[] functionArgs =\n-        new Object[] {includeRegions, excludeRegions, shouldNotReassignPrimaries, isStatusCommand};\n-    List<DistributedMember> completedMembers = new ArrayList<>();\n-    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n-      // Check to see if an earlier function execution has already targeted a member hosting this\n-      // region. If one has, there is no point sending a function for this region as it has already\n-      // had redundancy restored\n-      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n-        continue;\n-      }\n-      // Try the function on the first member for this region\n-      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n-      CliFunctionResult functionResult = executeFunctionAndGetFunctionResult(\n-          new RedundancyCommandFunction(), functionArgs, targetMember);\n-      if (functionResult.getStatus().equals(ERROR.name())) {\n-        // Record the error and then give up\n-        functionResults.add(functionResult);\n-        break;\n-      }\n-      functionResults.add(functionResult);\n-      completedMembers.add(targetMember);\n-    }\n-    return functionResults;\n-  }\n+  public ResultModel executeStatusRedundancy(\n+      @CliOption(key = REDUNDANCY_INCLUDE_REGION,\n+          help = REDUNDANCY_INCLUDE_REGION_HELP) String[] includeRegions,\n+      @CliOption(key = REDUNDANCY_EXCLUDE_REGION,\n+          help = REDUNDANCY_EXCLUDE_REGION_HELP) String[] excludeRegions) {\n \n-  // Extracted for testing\n-  RedundancyCommandUtils getUtils() {\n-    return new RedundancyCommandUtils();\n+    return super.execute(includeRegions, excludeRegions, false, true);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5MDI1MQ==", "url": "https://github.com/apache/geode/pull/5004#discussion_r417290251", "bodyText": "No need for this variable.", "author": "jujoramos", "createdAt": "2020-04-29T12:52:47Z", "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.management.cli.Result.Status.ERROR;\n+import static org.apache.geode.management.cli.Result.Status.OK;\n+import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n+import static org.hamcrest.CoreMatchers.everyItem;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+\n+public class RestoreRedundancyCommandTest {\n+\n+  private RestoreRedundancyCommand command;\n+  private final String includeRegion1 = \"include1\";\n+  private final String includeRegion2 = \"include2\";\n+  private String[] includeRegions = {includeRegion1, includeRegion2};\n+  private final String excludeRegion1 = \"exclude1\";\n+  private final String excludeRegion2 = \"exclude2\";\n+  private String[] excludeRegions = {excludeRegion1, excludeRegion2};\n+  private final boolean shouldReassignPrimaries = true;\n+  private DistributedMember mockMember1;\n+  private DistributedMember mockMember2;\n+  private CliFunctionResult successFunctionResult;\n+  private CliFunctionResult errorFunctionResult;\n+  private RedundancyCommandUtils mockUtils;\n+  private Object[] expectedArguments;\n+\n+  @Before\n+  public void setUp() {\n+    mockMember1 = mock(DistributedMember.class);\n+    mockMember2 = mock(DistributedMember.class);\n+    expectedArguments = new Object[] {includeRegions, excludeRegions, shouldReassignPrimaries};\n+\n+    successFunctionResult = mock(CliFunctionResult.class);\n+    when(successFunctionResult.getStatus()).thenReturn(OK.name());\n+\n+    errorFunctionResult = mock(CliFunctionResult.class);\n+    when(errorFunctionResult.getStatus()).thenReturn(ERROR.name());\n+\n+    mockUtils = mock(RedundancyCommandUtils.class);\n+    Cache mockCache = mock(InternalCache.class);\n+\n+    command = spy(new RestoreRedundancyCommand());\n+    doReturn(mockUtils).when(command).getUtils();\n+    doReturn(mockCache).when(command).getCache();\n+  }\n+\n+  @Test\n+  public void executeCallsGetNoViableMembersResultWhenNoViableMembersAreFoundForAtLeastOneRegion() {\n+    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n+        new RebalanceOperationPerformer.MemberPRInfo();\n+    String region1 = \"region1\";\n+    firstMemberPRInfo.region = region1;\n+    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n+        new RebalanceOperationPerformer.MemberPRInfo();\n+    String region2 = \"region2\";\n+    secondMemberPRInfo.region = region2;\n+\n+    // Put something in the members list when we call populateLists\n+    doAnswer(invocation -> {\n+      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n+      memberPRInfoList.add(firstMemberPRInfo);\n+      memberPRInfoList.add(secondMemberPRInfo);\n+      return null;\n+    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n+\n+    List<DistributedMember> viableMembers = new ArrayList<>();\n+    viableMembers.add(mock(DistributedMember.class));\n+\n+    when(mockUtils.filterViableMembersForVersion(eq(firstMemberPRInfo), any()))\n+        .thenReturn(viableMembers);\n+    when(mockUtils.filterViableMembersForVersion(eq(secondMemberPRInfo), any()))\n+        .thenReturn(Collections.emptyList());\n+\n+    command.execute(includeRegions, excludeRegions, shouldReassignPrimaries);\n+\n+    verify(mockUtils, times(1)).getNoViableMembersResult(any(), eq(region2));\n+    verify(mockUtils, times(0)).getNoViableMembersResult(any(), eq(region1));\n+  }\n+\n+  @Test\n+  public void executeCallsMethodsWithCorrectArgumentsWhenViableMembersAreFoundForAllRegions() {\n+    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n+        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n+    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n+        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    membersForEachRegion.add(firstMemberPRInfo);\n+    membersForEachRegion.add(secondMemberPRInfo);\n+\n+    // Put something in the members list when we call populateLists\n+    doAnswer(invocation -> {\n+      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n+      memberPRInfoList.add(firstMemberPRInfo);\n+      memberPRInfoList.add(secondMemberPRInfo);\n+      return null;\n+    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n+\n+    // Allow us to get past the filter viable members step\n+    List<DistributedMember> viableMembers = new ArrayList<>();\n+    viableMembers.add(mock(DistributedMember.class));\n+    when(mockUtils.filterViableMembersForVersion(any(), any())).thenReturn(viableMembers);\n+\n+    // Prevent the executeFunctionOnMembers method from doing anything\n+    List<CliFunctionResult> returnedList = new ArrayList<>();\n+    doReturn(returnedList).when(command).executeFunctionOnMembers(any(), any(), anyBoolean(),\n+        any());\n+\n+    command.execute(includeRegions, excludeRegions, shouldReassignPrimaries);\n+\n+    // Confirm we set the correct viable members on the memberPRInfos\n+    verify(mockUtils, times(1)).filterViableMembersForVersion(firstMemberPRInfo,\n+        REDUNDANCY_COMMAND_ADDED_VERSION);\n+    verify(mockUtils, times(1)).filterViableMembersForVersion(secondMemberPRInfo,\n+        REDUNDANCY_COMMAND_ADDED_VERSION);\n+    assertThat(firstMemberPRInfo.dsMemberList, is(viableMembers));\n+    assertThat(secondMemberPRInfo.dsMemberList, is(viableMembers));\n+\n+    // Confirm we called executeFunctionOnMembers and buildResultModelFromFunctionResults with the\n+    // correct arguments\n+    verify(command, times(1)).executeFunctionOnMembers(includeRegions, excludeRegions,\n+        shouldReassignPrimaries, membersForEachRegion);\n+    boolean isStatusCommand = false;", "originalCommit": "5627cfd16c4ff07f4ca1028038d7e8b25b16abf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0732fefcadf1485b3d818df28efce36967227e50", "chunk": "diff --git a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandTest.java b/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandTest.java\ndeleted file mode 100644\nindex e484030946..0000000000\n--- a/geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/RestoreRedundancyCommandTest.java\n+++ /dev/null\n\n@@ -1,256 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.geode.management.internal.cli.commands;\n-\n-import static org.apache.geode.management.cli.Result.Status.ERROR;\n-import static org.apache.geode.management.cli.Result.Status.OK;\n-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;\n-import static org.hamcrest.CoreMatchers.everyItem;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyBoolean;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import org.apache.geode.cache.Cache;\n-import org.apache.geode.distributed.DistributedMember;\n-import org.apache.geode.internal.cache.InternalCache;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n-\n-public class RestoreRedundancyCommandTest {\n-\n-  private RestoreRedundancyCommand command;\n-  private final String includeRegion1 = \"include1\";\n-  private final String includeRegion2 = \"include2\";\n-  private String[] includeRegions = {includeRegion1, includeRegion2};\n-  private final String excludeRegion1 = \"exclude1\";\n-  private final String excludeRegion2 = \"exclude2\";\n-  private String[] excludeRegions = {excludeRegion1, excludeRegion2};\n-  private final boolean shouldReassignPrimaries = true;\n-  private DistributedMember mockMember1;\n-  private DistributedMember mockMember2;\n-  private CliFunctionResult successFunctionResult;\n-  private CliFunctionResult errorFunctionResult;\n-  private RedundancyCommandUtils mockUtils;\n-  private Object[] expectedArguments;\n-\n-  @Before\n-  public void setUp() {\n-    mockMember1 = mock(DistributedMember.class);\n-    mockMember2 = mock(DistributedMember.class);\n-    expectedArguments = new Object[] {includeRegions, excludeRegions, shouldReassignPrimaries};\n-\n-    successFunctionResult = mock(CliFunctionResult.class);\n-    when(successFunctionResult.getStatus()).thenReturn(OK.name());\n-\n-    errorFunctionResult = mock(CliFunctionResult.class);\n-    when(errorFunctionResult.getStatus()).thenReturn(ERROR.name());\n-\n-    mockUtils = mock(RedundancyCommandUtils.class);\n-    Cache mockCache = mock(InternalCache.class);\n-\n-    command = spy(new RestoreRedundancyCommand());\n-    doReturn(mockUtils).when(command).getUtils();\n-    doReturn(mockCache).when(command).getCache();\n-  }\n-\n-  @Test\n-  public void executeCallsGetNoViableMembersResultWhenNoViableMembersAreFoundForAtLeastOneRegion() {\n-    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    String region1 = \"region1\";\n-    firstMemberPRInfo.region = region1;\n-    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    String region2 = \"region2\";\n-    secondMemberPRInfo.region = region2;\n-\n-    // Put something in the members list when we call populateLists\n-    doAnswer(invocation -> {\n-      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n-      memberPRInfoList.add(firstMemberPRInfo);\n-      memberPRInfoList.add(secondMemberPRInfo);\n-      return null;\n-    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n-\n-    List<DistributedMember> viableMembers = new ArrayList<>();\n-    viableMembers.add(mock(DistributedMember.class));\n-\n-    when(mockUtils.filterViableMembersForVersion(eq(firstMemberPRInfo), any()))\n-        .thenReturn(viableMembers);\n-    when(mockUtils.filterViableMembersForVersion(eq(secondMemberPRInfo), any()))\n-        .thenReturn(Collections.emptyList());\n-\n-    command.execute(includeRegions, excludeRegions, shouldReassignPrimaries);\n-\n-    verify(mockUtils, times(1)).getNoViableMembersResult(any(), eq(region2));\n-    verify(mockUtils, times(0)).getNoViableMembersResult(any(), eq(region1));\n-  }\n-\n-  @Test\n-  public void executeCallsMethodsWithCorrectArgumentsWhenViableMembersAreFoundForAllRegions() {\n-    RebalanceOperationPerformer.MemberPRInfo firstMemberPRInfo =\n-        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n-    RebalanceOperationPerformer.MemberPRInfo secondMemberPRInfo =\n-        mock(RebalanceOperationPerformer.MemberPRInfo.class);\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstMemberPRInfo);\n-    membersForEachRegion.add(secondMemberPRInfo);\n-\n-    // Put something in the members list when we call populateLists\n-    doAnswer(invocation -> {\n-      List<RebalanceOperationPerformer.MemberPRInfo> memberPRInfoList = invocation.getArgument(0);\n-      memberPRInfoList.add(firstMemberPRInfo);\n-      memberPRInfoList.add(secondMemberPRInfo);\n-      return null;\n-    }).when(mockUtils).populateLists(any(), any(), any(), any(), any());\n-\n-    // Allow us to get past the filter viable members step\n-    List<DistributedMember> viableMembers = new ArrayList<>();\n-    viableMembers.add(mock(DistributedMember.class));\n-    when(mockUtils.filterViableMembersForVersion(any(), any())).thenReturn(viableMembers);\n-\n-    // Prevent the executeFunctionOnMembers method from doing anything\n-    List<CliFunctionResult> returnedList = new ArrayList<>();\n-    doReturn(returnedList).when(command).executeFunctionOnMembers(any(), any(), anyBoolean(),\n-        any());\n-\n-    command.execute(includeRegions, excludeRegions, shouldReassignPrimaries);\n-\n-    // Confirm we set the correct viable members on the memberPRInfos\n-    verify(mockUtils, times(1)).filterViableMembersForVersion(firstMemberPRInfo,\n-        REDUNDANCY_COMMAND_ADDED_VERSION);\n-    verify(mockUtils, times(1)).filterViableMembersForVersion(secondMemberPRInfo,\n-        REDUNDANCY_COMMAND_ADDED_VERSION);\n-    assertThat(firstMemberPRInfo.dsMemberList, is(viableMembers));\n-    assertThat(secondMemberPRInfo.dsMemberList, is(viableMembers));\n-\n-    // Confirm we called executeFunctionOnMembers and buildResultModelFromFunctionResults with the\n-    // correct arguments\n-    verify(command, times(1)).executeFunctionOnMembers(includeRegions, excludeRegions,\n-        shouldReassignPrimaries, membersForEachRegion);\n-    boolean isStatusCommand = false;\n-    verify(mockUtils, times(1)).buildResultModelFromFunctionResults(eq(returnedList), any(),\n-        eq(isStatusCommand));\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersDoesNotExecuteFunctionForRegionsThatHaveHadRedundancyRestoredAlready() {\n-    // Since both regions exist on both members, restoring redundancy for either of the regions will\n-    // also cause the other region to have redundancy restored, since the function restores\n-    // redundancy for all non-excluded regions on the target member\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(includeRegion1, mockMember1, mockMember2);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(includeRegion2, mockMember1, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        any());\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, shouldReassignPrimaries,\n-            membersForEachRegion);\n-    assertThat(functionResults, is(Collections.singletonList(successFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        any());\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersExecutesFunctionForAllRegionsWithNoMembersInCommon() {\n-    // Region1 exists on member1 only, region2 exists on member 2 only. Two function executions are\n-    // necessary.\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(excludeRegion1, mockMember1);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(excludeRegion2, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        eq(mockMember1));\n-    doReturn(successFunctionResult).when(command).executeFunctionAndGetFunctionResult(any(), any(),\n-        eq(mockMember2));\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, shouldReassignPrimaries,\n-            membersForEachRegion);\n-    assertThat(functionResults.size(), is(2));\n-    assertThat(functionResults, everyItem(is(successFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        eq(mockMember1));\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        eq(mockMember2));\n-  }\n-\n-  @Test\n-  public void executeFunctionOnMembersReturnsEarlyIfFunctionResultIsError() {\n-    // Region1 exists on member1 only, region2 exists on member 2 only. Two function executions are\n-    // necessary.\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        createMemberPRInfo(excludeRegion1, mockMember1);\n-    RebalanceOperationPerformer.MemberPRInfo secondRegionInfo =\n-        createMemberPRInfo(excludeRegion2, mockMember2);\n-\n-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n-    membersForEachRegion.add(firstRegionInfo);\n-    membersForEachRegion.add(secondRegionInfo);\n-\n-    // Return error result first, then success result on subsequent calls\n-    doReturn(errorFunctionResult).doReturn(successFunctionResult).when(command)\n-        .executeFunctionAndGetFunctionResult(any(), any(), any());\n-\n-    List<CliFunctionResult> functionResults =\n-        command.executeFunctionOnMembers(includeRegions, excludeRegions, shouldReassignPrimaries,\n-            membersForEachRegion);\n-    assertThat(functionResults.size(), is(1));\n-    assertThat(functionResults, is(Collections.singletonList(errorFunctionResult)));\n-\n-    verify(command, times(1)).executeFunctionAndGetFunctionResult(any(), eq(expectedArguments),\n-        any());\n-  }\n-\n-  private RebalanceOperationPerformer.MemberPRInfo createMemberPRInfo(String region,\n-      DistributedMember... members) {\n-    RebalanceOperationPerformer.MemberPRInfo firstRegionInfo =\n-        new RebalanceOperationPerformer.MemberPRInfo();\n-    firstRegionInfo.region = region;\n-    firstRegionInfo.dsMemberList.addAll(Arrays.asList(members));\n-    return firstRegionInfo;\n-  }\n-}\n"}}, {"oid": "0732fefcadf1485b3d818df28efce36967227e50", "url": "https://github.com/apache/geode/commit/0732fefcadf1485b3d818df28efce36967227e50", "message": "Applying review feedback\n\n- Refactored tests to reduce code duplication\n- Refactored to condense duplicated Restore and Status command code into\none class\n- Refactored to condense unit tests for the above classes into one class\n\nAuthored-by: Donal Evans <doevans@pivotal.io>", "committedDate": "2020-05-01T02:39:29Z", "type": "commit"}]}