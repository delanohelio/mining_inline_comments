{"pr_number": 5622, "pr_title": "GEODE-7845: Adding a cleaner simpler test.", "pr_createdAt": "2020-10-13T21:29:49Z", "pr_url": "https://github.com/apache/geode/pull/5622", "timeline": [{"oid": "0d4665a2afe150e45d0fd793e8db8913f964b67f", "url": "https://github.com/apache/geode/commit/0d4665a2afe150e45d0fd793e8db8913f964b67f", "message": "GEODE-7845: Adding a cleaner simpler test.", "committedDate": "2020-10-13T21:27:15Z", "type": "commit"}, {"oid": "42450e79326abd5226f796162abbaaf999a785e7", "url": "https://github.com/apache/geode/commit/42450e79326abd5226f796162abbaaf999a785e7", "message": "GEODE-7854: Spotless", "committedDate": "2020-10-13T21:49:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5MDIyMA==", "url": "https://github.com/apache/geode/pull/5622#discussion_r504290220", "bodyText": "every test will shut down all the locator/servers and restart them again, making the tests taking longer. If you would like make the tests run faster, you can lump these two tests into one. first do region.clear in a client vm and then in a server vm. And would be nice to verify that after these two clears, the region still has those 2 records in them (clear didn't go through on any servers).", "author": "jinmeiliao", "createdAt": "2020-10-13T22:16:46Z", "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradePartitionRegionClearServerVersionMismatch.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+import static org.apache.geode.test.dunit.rules.ClusterStartupRule.getCache;\n+import static org.apache.geode.test.dunit.rules.ClusterStartupRule.getClientCache;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.ServerVersionMismatchException;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.ServerOperationException;\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.test.dunit.IgnoredException;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.runners.CategoryWithParameterizedRunnerFactory;\n+import org.apache.geode.test.version.VersionManager;\n+\n+/**\n+ * This test class exists to test the ServerVersionMismatchException\n+ * A ServerVersionMismatchException is thrown when a cluster has a server that is previous to\n+ * version 1.14.0 which doesn't support the Partitioned Region Clear feature.\n+ *\n+ * When the exception is thrown it is expected to contain the members that have the bad version,\n+ * the version number necessary, and the feature that is not supported.\n+ */\n+\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(CategoryWithParameterizedRunnerFactory.class)\n+public class RollingUpgradePartitionRegionClearServerVersionMismatch {\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Parameterized.Parameter\n+  public String oldVersion;\n+\n+  @Parameterized.Parameters(name = \"from_v{0}\")\n+  public static Collection<String> data() {\n+    List<String> result = VersionManager.getInstance().getVersionsWithoutCurrent();\n+    if (result.size() < 1) {\n+      throw new RuntimeException(\"No older versions of Geode were found to test against\");\n+    } else {\n+      System.out.println(\"running against these versions: \" + result);\n+    }\n+    return result;\n+  }\n+\n+  // This is the message that we are expected to be in the exception in both tests below.\n+  private static final String expectedMessage =\n+      \"A server's [server-2] version was too old (< GEODE 1.14.0) for : Partitioned Region Clear\";\n+\n+  private MemberVM locator;\n+  private MemberVM serverNew;\n+\n+  @Before\n+  public void before() {\n+    locator = cluster.startLocatorVM(0,\n+        l -> l.withSystemProperty(\"gemfire.allow_old_members_to_join_for_testing\", \"true\")\n+            .withProperty(DistributionConfig.ENABLE_CLUSTER_CONFIGURATION_NAME, \"false\"));\n+    final int locatorPort = locator.getPort();\n+\n+    serverNew = cluster.startServerVM(1, locatorPort);\n+    MemberVM serverOld =\n+        cluster.startServerVM(2, oldVersion, s -> s.withConnectionToLocator(locatorPort));\n+\n+    MemberVM.invokeInEveryMember(() -> {\n+      Cache cache = getCache();\n+      assertThat(cache).isNotNull();\n+      getCache().createRegionFactory(RegionShortcut.PARTITION).create(\"regionA\");\n+    }, serverNew, serverOld);\n+\n+    // Put in some boiler plate data for region clear\n+    serverNew.invoke(() -> {\n+      Cache cache = getCache();\n+      assertThat(cache).isNotNull();\n+\n+      Region<Object, Object> region = cache.getRegion(\"regionA\");\n+      region.put(\"A\", \"ValueA\");\n+      region.put(\"B\", \"ValueB\");\n+    });\n+\n+  }\n+\n+  /**\n+   * testClient_ServerVersionMismatchException - validates that when a client invokes a partitioned\n+   * region clear on a cluster where one server is running an unsupported version for this feature\n+   * we return a ServerVersionMismatchException\n+   */\n+  @Test\n+  public void testClient_ServerVersionMismatchException() throws Exception {\n+    IgnoredException.addIgnoredException(ServerOperationException.class);\n+    final int locatorPort = locator.getPort();\n+    // Get a client VM\n+    ClientVM clientVM = cluster.startClientVM(3, c -> c.withLocatorConnection(locatorPort));\n+\n+    clientVM.invoke(() -> {\n+      // Validate we have a cache and region\n+      ClientCache clientCache = getClientCache();\n+      assertThat(clientCache).isNotNull();\n+\n+      ClientRegionFactory<Object, Object> clientRegionFactory =\n+          clientCache.createClientRegionFactory(ClientRegionShortcut.PROXY);\n+      Region<Object, Object> region = clientRegionFactory.create(\"regionA\");\n+      assertThat(region).isNotNull();\n+\n+      // Validate that we get a ServerVersionMismatchException wrapped in a ServerOperationException\n+      Throwable thrown = catchThrowable(region::clear);\n+      assertThat(thrown).isInstanceOf(ServerOperationException.class);\n+      assertThat(thrown).hasCauseInstanceOf(ServerVersionMismatchException.class);\n+\n+      // Validate that the message is exactly as we expect it.\n+      ServerVersionMismatchException serverVersionMismatchException =\n+          (ServerVersionMismatchException) thrown.getCause();\n+      assertThat(serverVersionMismatchException.getMessage()).isEqualTo(expectedMessage);\n+    });\n+  }\n+\n+  /**\n+   * testServer_ServerVersionMismatchException - validates that when a partitioned region clear is\n+   * invoked on a cluster where one server is running an unsupported version for this feature we\n+   * return a ServerVersionMismatchException\n+   */\n+  @Test\n+  public void testServer_ServerVersionMismatchException() {\n+    IgnoredException.addIgnoredException(ServerOperationException.class);", "originalCommit": "42450e79326abd5226f796162abbaaf999a785e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNjQwOQ==", "url": "https://github.com/apache/geode/pull/5622#discussion_r504306409", "bodyText": "Sure, I agree with the record check, but I prefer to have my tests test one thing at time. I realize there is speed efficiency to be had, but I understand that depends on the type of efficiency you are looking for. I am looking at what the test tells me. It certainly feels weird to me though.", "author": "mhansonp", "createdAt": "2020-10-13T23:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5MDIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c514bba1e6eece93f037ca779e4f44c4f8ac3211", "chunk": "diff --git a/geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradePartitionRegionClearServerVersionMismatch.java b/geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradePartitionRegionClearServerVersionMismatch.java\nindex 2d4ff41e42..144ea3824b 100644\n--- a/geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradePartitionRegionClearServerVersionMismatch.java\n+++ b/geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradePartitionRegionClearServerVersionMismatch.java\n\n@@ -105,7 +105,7 @@ public class RollingUpgradePartitionRegionClearServerVersionMismatch {\n       Cache cache = getCache();\n       assertThat(cache).isNotNull();\n \n-      Region<Object, Object> region = cache.getRegion(\"regionA\");\n+      Region<String, String> region = cache.getRegion(\"regionA\");\n       region.put(\"A\", \"ValueA\");\n       region.put(\"B\", \"ValueB\");\n     });\n"}}, {"oid": "c514bba1e6eece93f037ca779e4f44c4f8ac3211", "url": "https://github.com/apache/geode/commit/c514bba1e6eece93f037ca779e4f44c4f8ac3211", "message": "GEODE-7845: better typing and another check added", "committedDate": "2020-10-13T22:56:46Z", "type": "commit"}]}