{"pr_number": 4862, "pr_title": "GEODE-7919: Moving membership integration test to geode-membership", "pr_createdAt": "2020-03-27T22:18:20Z", "pr_url": "https://github.com/apache/geode/pull/4862", "timeline": [{"oid": "3feec6680bc6e6a85cd42c0671504455d567a809", "url": "https://github.com/apache/geode/commit/3feec6680bc6e6a85cd42c0671504455d567a809", "message": "GEODE-7919: Moving membership integration test to geode-membership\n\nMoving MembershipOnlyTest to MembershipIntegrationTest in the geode-membership\nmodule and adding some more tests.", "committedDate": "2020-03-27T22:17:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NTY3NQ==", "url": "https://github.com/apache/geode/pull/4862#discussion_r399565675", "bodyText": "do we want to say twoMembershhipsCanStart\u2026 to be consistent w/ other test names?", "author": "Bill", "createdAt": "2020-03-27T22:26:06Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.apache.geode.distributed.internal.membership.gms;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifierFactoryImpl;\n+import org.apache.geode.distributed.internal.membership.api.MemberStartupException;\n+import org.apache.geode.distributed.internal.membership.api.Membership;\n+import org.apache.geode.distributed.internal.membership.api.MembershipBuilder;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorBuilder;\n+import org.apache.geode.distributed.internal.tcpserver.TcpClient;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketFactory;\n+import org.apache.geode.internal.serialization.DSFIDSerializer;\n+import org.apache.geode.internal.serialization.internal.DSFIDSerializerImpl;\n+import org.apache.geode.logging.internal.executors.LoggingExecutors;\n+\n+/**\n+ * Tests of using the membership APIs to make multiple Membership systems that communicate\n+ * with each other and form a group\n+ */\n+public class MembershipIntegrationTest {\n+  private InetAddress localHost;\n+  private DSFIDSerializer dsfidSerializer;\n+  private TcpSocketCreator socketCreator;\n+\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void before() throws IOException, MembershipConfigurationException {\n+    localHost = InetAddress.getLocalHost();\n+    dsfidSerializer = new DSFIDSerializerImpl();\n+    socketCreator = new TcpSocketCreatorImpl();\n+  }\n+\n+  @Test\n+  public void oneMembershipCanStartWithALocator()\n+      throws IOException, MemberStartupException {\n+    final MembershipLocator<MemberIdentifier> locator = createLocator(0);\n+    locator.start();\n+\n+    final Membership<MemberIdentifier> membership = createMembership(locator,\n+        locator.getPort());\n+    start(membership);\n+\n+    assertThat(membership.getView().getMembers()).hasSize(1);\n+  }\n+\n+  @Test\n+  public void twoMembersCanStartWithOneLocator()", "originalCommit": "3feec6680bc6e6a85cd42c0671504455d567a809", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dfb3a8b1575c79799396c93b1ffffb95fe02aea", "chunk": "diff --git a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\nindex 41ed3d2acc..0e823bdd16 100644\n--- a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\n+++ b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\n\n@@ -1,3 +1,17 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n package org.apache.geode.distributed.internal.membership.gms;\n \n import static org.assertj.core.api.Assertions.assertThat;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NzQxNw==", "url": "https://github.com/apache/geode/pull/4862#discussion_r399567417", "bodyText": "would it be better to send in the VM kind instead of the boolean isALocator? doing that would eliminate the conditional here.", "author": "Bill", "createdAt": "2020-03-27T22:31:52Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.apache.geode.distributed.internal.membership.gms;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifierFactoryImpl;\n+import org.apache.geode.distributed.internal.membership.api.MemberStartupException;\n+import org.apache.geode.distributed.internal.membership.api.Membership;\n+import org.apache.geode.distributed.internal.membership.api.MembershipBuilder;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorBuilder;\n+import org.apache.geode.distributed.internal.tcpserver.TcpClient;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketFactory;\n+import org.apache.geode.internal.serialization.DSFIDSerializer;\n+import org.apache.geode.internal.serialization.internal.DSFIDSerializerImpl;\n+import org.apache.geode.logging.internal.executors.LoggingExecutors;\n+\n+/**\n+ * Tests of using the membership APIs to make multiple Membership systems that communicate\n+ * with each other and form a group\n+ */\n+public class MembershipIntegrationTest {\n+  private InetAddress localHost;\n+  private DSFIDSerializer dsfidSerializer;\n+  private TcpSocketCreator socketCreator;\n+\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void before() throws IOException, MembershipConfigurationException {\n+    localHost = InetAddress.getLocalHost();\n+    dsfidSerializer = new DSFIDSerializerImpl();\n+    socketCreator = new TcpSocketCreatorImpl();\n+  }\n+\n+  @Test\n+  public void oneMembershipCanStartWithALocator()\n+      throws IOException, MemberStartupException {\n+    final MembershipLocator<MemberIdentifier> locator = createLocator(0);\n+    locator.start();\n+\n+    final Membership<MemberIdentifier> membership = createMembership(locator,\n+        locator.getPort());\n+    start(membership);\n+\n+    assertThat(membership.getView().getMembers()).hasSize(1);\n+  }\n+\n+  @Test\n+  public void twoMembersCanStartWithOneLocator()\n+      throws IOException, MemberStartupException {\n+    final MembershipLocator<MemberIdentifier> locator = createLocator(0);\n+    locator.start();\n+    final int locatorPort = locator.getPort();\n+\n+    final Membership<MemberIdentifier> membership1 = createMembership(locator, locatorPort);\n+    start(membership1);\n+\n+    final Membership<MemberIdentifier> membership2 = createMembership(null, locatorPort);\n+    start(membership2);\n+\n+    assertThat(membership1.getView().getMembers()).hasSize(2);\n+    assertThat(membership2.getView().getMembers()).hasSize(2);\n+  }\n+\n+  @Test\n+  public void twoLocatorsCanStartSequentially()\n+      throws IOException, MemberStartupException {\n+\n+    final MembershipLocator<MemberIdentifier> locator1 = createLocator(0);\n+    locator1.start();\n+    final int locatorPort1 = locator1.getPort();\n+\n+    Membership<MemberIdentifier> membership1 = createMembership(locator1, locatorPort1);\n+    start(membership1);\n+\n+    final MembershipLocator<MemberIdentifier> locator2 = createLocator(0, locatorPort1);\n+    locator2.start();\n+    final int locatorPort2 = locator2.getPort();\n+\n+    Membership<MemberIdentifier> membership2 =\n+        createMembership(locator2, locatorPort1, locatorPort2);\n+    start(membership2);\n+\n+    assertThat(membership1.getView().getMembers()).hasSize(2);\n+    assertThat(membership2.getView().getMembers()).hasSize(2);\n+  }\n+\n+  @Test\n+  public void secondMembershipCanJoinUsingTheSecondLocatorToStart()\n+      throws IOException, MemberStartupException {\n+\n+    final MembershipLocator<MemberIdentifier> locator1 = createLocator(0);\n+    locator1.start();\n+    final int locatorPort1 = locator1.getPort();\n+\n+    final Membership<MemberIdentifier> membership1 = createMembership(locator1, locatorPort1);\n+    start(membership1);\n+\n+    final MembershipLocator<MemberIdentifier> locator2 = createLocator(0, locatorPort1);\n+    locator2.start();\n+    int locatorPort2 = locator2.getPort();\n+\n+    // Force the next membership to use locator2 by stopping locator1\n+    locator1.stop();\n+\n+    Membership<MemberIdentifier> membership2 =\n+        createMembership(locator2, locatorPort1, locatorPort2);\n+    start(membership2);\n+\n+    assertThat(membership1.getView().getMembers()).hasSize(2);\n+    assertThat(membership2.getView().getMembers()).hasSize(2);\n+  }\n+\n+  private void start(final Membership<MemberIdentifier> membership)\n+      throws MemberStartupException {\n+    membership.start();\n+    membership.startEventProcessing();\n+  }\n+\n+  private Membership<MemberIdentifier> createMembership(\n+      final MembershipLocator<MemberIdentifier> embeddedLocator,\n+      final int... locatorPorts)\n+      throws MembershipConfigurationException {\n+    final boolean isALocator = embeddedLocator != null;\n+    final MembershipConfig config = createMembershipConfig(isALocator, locatorPorts);\n+\n+    final MemberIdentifierFactoryImpl memberIdFactory = new MemberIdentifierFactoryImpl();\n+\n+    final TcpClient locatorClient =\n+        new TcpClient(socketCreator, dsfidSerializer.getObjectSerializer(),\n+            dsfidSerializer.getObjectDeserializer(), TcpSocketFactory.DEFAULT);\n+\n+    return MembershipBuilder.<MemberIdentifier>newMembershipBuilder(\n+        socketCreator, locatorClient, dsfidSerializer, memberIdFactory)\n+        .setMembershipLocator(embeddedLocator)\n+        .setConfig(config)\n+        .create();\n+  }\n+\n+  private MembershipConfig createMembershipConfig(\n+      final boolean isALocator,\n+      final int[] locatorPorts) {\n+    return new MembershipConfig() {\n+      public String getLocators() {\n+        return getLocatorString(locatorPorts);\n+      }\n+\n+      // TODO - the Membership system starting in the locator *MUST* be told that is\n+      // is a locator through this flag. Ideally it should be able to infer this from\n+      // being associated with a locator\n+      @Override\n+      public int getVmKind() {\n+        return isALocator ? MemberIdentifier.LOCATOR_DM_TYPE : MemberIdentifier.NORMAL_DM_TYPE;", "originalCommit": "3feec6680bc6e6a85cd42c0671504455d567a809", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMzY1Nw==", "url": "https://github.com/apache/geode/pull/4862#discussion_r400303657", "bodyText": "Seems like that would just shift the conditional? I think I'll leave it the way it is for now since we want to get rid of this flag entirely when we fix the membership code.", "author": "upthewaterspout", "createdAt": "2020-03-30T15:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NzQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2dfb3a8b1575c79799396c93b1ffffb95fe02aea", "chunk": "diff --git a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\nindex 41ed3d2acc..0e823bdd16 100644\n--- a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\n+++ b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\n\n@@ -1,3 +1,17 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n package org.apache.geode.distributed.internal.membership.gms;\n \n import static org.assertj.core.api.Assertions.assertThat;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5MDc0Ng==", "url": "https://github.com/apache/geode/pull/4862#discussion_r400290746", "bodyText": "This should use LocalHostUtil.getLocalHost()", "author": "bschuchardt", "createdAt": "2020-03-30T15:37:25Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.apache.geode.distributed.internal.membership.gms;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifierFactoryImpl;\n+import org.apache.geode.distributed.internal.membership.api.MemberStartupException;\n+import org.apache.geode.distributed.internal.membership.api.Membership;\n+import org.apache.geode.distributed.internal.membership.api.MembershipBuilder;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorBuilder;\n+import org.apache.geode.distributed.internal.tcpserver.TcpClient;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketFactory;\n+import org.apache.geode.internal.serialization.DSFIDSerializer;\n+import org.apache.geode.internal.serialization.internal.DSFIDSerializerImpl;\n+import org.apache.geode.logging.internal.executors.LoggingExecutors;\n+\n+/**\n+ * Tests of using the membership APIs to make multiple Membership systems that communicate\n+ * with each other and form a group\n+ */\n+public class MembershipIntegrationTest {\n+  private InetAddress localHost;\n+  private DSFIDSerializer dsfidSerializer;\n+  private TcpSocketCreator socketCreator;\n+\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void before() throws IOException, MembershipConfigurationException {\n+    localHost = InetAddress.getLocalHost();", "originalCommit": "3feec6680bc6e6a85cd42c0671504455d567a809", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwOTQyNQ==", "url": "https://github.com/apache/geode/pull/4862#discussion_r400309425", "bodyText": "Done", "author": "upthewaterspout", "createdAt": "2020-03-30T16:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5MDc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2dfb3a8b1575c79799396c93b1ffffb95fe02aea", "chunk": "diff --git a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\nindex 41ed3d2acc..0e823bdd16 100644\n--- a/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\n+++ b/geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java\n\n@@ -1,3 +1,17 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n package org.apache.geode.distributed.internal.membership.gms;\n \n import static org.assertj.core.api.Assertions.assertThat;\n"}}, {"oid": "2dfb3a8b1575c79799396c93b1ffffb95fe02aea", "url": "https://github.com/apache/geode/commit/2dfb3a8b1575c79799396c93b1ffffb95fe02aea", "message": "Review comments and missing license header", "committedDate": "2020-03-30T15:57:40Z", "type": "commit"}]}