{"pr_number": 4852, "pr_title": "GEODE-7914: create missing unit test for Redis Module Expire Command", "pr_createdAt": "2020-03-26T21:20:44Z", "pr_url": "https://github.com/apache/geode/pull/4852", "timeline": [{"oid": "6ebb889f1da13d97e80101dbed553eb21337c916", "url": "https://github.com/apache/geode/commit/6ebb889f1da13d97e80101dbed553eb21337c916", "message": "GEODE-7914: create missing unit test for Redis Module Expire Command", "committedDate": "2020-03-26T21:17:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMDYyMw==", "url": "https://github.com/apache/geode/pull/4852#discussion_r399400623", "bodyText": "This and import org.apache.geode.redis.internal.executor.string.GetRangeExecutor are unused according to spotless", "author": "moleske", "createdAt": "2020-03-27T16:45:18Z", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;", "originalCommit": "6ebb889f1da13d97e80101dbed553eb21337c916", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNTkzMw==", "url": "https://github.com/apache/geode/pull/4852#discussion_r399425933", "bodyText": "yeah, I confess I was soling on this at the end of the day and couldn't remember how to run spotless.  We'll catch it next commit!", "author": "jhutchison", "createdAt": "2020-03-27T17:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMDYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMTU2OQ==", "url": "https://github.com/apache/geode/pull/4852#discussion_r399431569", "bodyText": "./gradlew spotlessApply will auto apply the fixes it can (like removing imports)", "author": "moleske", "createdAt": "2020-03-27T17:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMDYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "59c4b0cd0adb75f19176a15cbff81f8b0ae6ed01", "chunk": "diff --git a/geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java b/geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java\nindex 7bc36905fd..b1603dbf42 100644\n--- a/geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java\n+++ b/geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java\n\n@@ -22,7 +22,6 @@ import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n-import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzYxMg==", "url": "https://github.com/apache/geode/pull/4852#discussion_r399403612", "bodyText": "The default for verify is times(1), so you can remove the explicit times(1) (same for the tests below)", "author": "moleske", "createdAt": "2020-03-27T16:49:55Z", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.ExpireExecutor;\n+import org.apache.geode.redis.internal.executor.string.GetRangeExecutor;\n+\n+public class ExpireExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);\n+    byteBuf = new UnpooledByteBufAllocator(false);\n+  }\n+\n+  @Test\n+  public void calledWithTooFewCommandArguments_returnsError() {\n+    Executor executor = new ExpireExecutor();\n+    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n+    commandsAsBytesWithTooFewArguments.add(\"EXPIRE\".getBytes());\n+    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+\n+    ArgumentCaptor<ByteBuf> argsErrorCaptor = ArgumentCaptor.forClass(ByteBuf.class);\n+\n+    when(context.getByteBufAllocator()).thenReturn(byteBuf);\n+    when(command.getProcessedCommand()).thenReturn(commandsAsBytesWithTooFewArguments);\n+\n+    executor.executeCommand(command, context);\n+    verify(command, times(1)).setResponse(argsErrorCaptor.capture());", "originalCommit": "6ebb889f1da13d97e80101dbed553eb21337c916", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzMzNQ==", "url": "https://github.com/apache/geode/pull/4852#discussion_r399427335", "bodyText": "In the past I've adopted a sort of informal convention of leaving  the (unneeded) times(1) in there to  make it really obvious what's going on (in case a reader is not familiar with the default value), but not sure if that actually improves readability or not?  thoughts....?", "author": "jhutchison", "createdAt": "2020-03-27T17:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDMwMA==", "url": "https://github.com/apache/geode/pull/4852#discussion_r399434300", "bodyText": "Oh that's interesting.  I haven't run into that, mostly because I rarely want a test to verify something happens multiple times.  I will say when I looked through the test, I was like \"Well that's interesting, there's a times, wonder why\" and then saw \"oh its one, that's boring.\"  So I guess seeing verify with a times is a trigger for me to look closer since it is not doing the normal just one time.  I'm not that strong against it which is why I marked the PR as approved.  Don't want to block good tests on something minor.  I think in the Geode code base we've only put times(someNumber) when that number is not one if you were to go looking in Geode for prior art.", "author": "moleske", "createdAt": "2020-03-27T17:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NDk5MA==", "url": "https://github.com/apache/geode/pull/4852#discussion_r399454990", "bodyText": "yeah, makes sense.  Will take into consideration in future verifies :)   thanks for the feedback", "author": "jhutchison", "createdAt": "2020-03-27T18:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "59c4b0cd0adb75f19176a15cbff81f8b0ae6ed01", "chunk": "diff --git a/geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java b/geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java\nindex 7bc36905fd..b1603dbf42 100644\n--- a/geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java\n+++ b/geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java\n\n@@ -22,7 +22,6 @@ import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n-import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.List;\n \n"}}, {"oid": "c4cb7f09d871448e14039790301ada94d59b2bf8", "url": "https://github.com/apache/geode/commit/c4cb7f09d871448e14039790301ada94d59b2bf8", "message": "empty commit to trigger CI build", "committedDate": "2020-03-27T17:46:18Z", "type": "commit"}, {"oid": "59c4b0cd0adb75f19176a15cbff81f8b0ae6ed01", "url": "https://github.com/apache/geode/commit/59c4b0cd0adb75f19176a15cbff81f8b0ae6ed01", "message": "Spotless", "committedDate": "2020-03-30T15:42:26Z", "type": "commit"}]}