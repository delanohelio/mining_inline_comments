{"pr_number": 5318, "pr_title": "GEODE-8313: Improve RedisData synchronization for toData", "pr_createdAt": "2020-06-26T22:45:41Z", "pr_url": "https://github.com/apache/geode/pull/5318", "timeline": [{"oid": "01d526275c8ea3a6f384e0f8c0c0641393fc6da2", "url": "https://github.com/apache/geode/commit/01d526275c8ea3a6f384e0f8c0c0641393fc6da2", "message": "GEODE-8313: Improve RedisData synchronization for toData", "committedDate": "2020-06-26T22:44:15Z", "type": "commit"}, {"oid": "822952c8a258260b9cf6e5f533e427abaaddbcf0", "url": "https://github.com/apache/geode/commit/822952c8a258260b9cf6e5f533e427abaaddbcf0", "message": "added connection cleanup to test to see if it will pass in StressNewTest", "committedDate": "2020-06-29T19:00:33Z", "type": "commit"}, {"oid": "564599d453bc23733772df27e747d502527e6005", "url": "https://github.com/apache/geode/commit/564599d453bc23733772df27e747d502527e6005", "message": "removed some unneeded synchronization and fixed LGTM warnings", "committedDate": "2020-06-29T20:30:27Z", "type": "commit"}, {"oid": "59bff81e6399c28cad7fd612aa90ccefa3402de2", "url": "https://github.com/apache/geode/commit/59bff81e6399c28cad7fd612aa90ccefa3402de2", "message": "changed test to only connect to server1 and only restart\nserver2 and 3. Hopefully this will fix StressNewTest", "committedDate": "2020-06-29T20:45:39Z", "type": "commit"}, {"oid": "0b8d3f14680cfa1804aa3116eb5f441fe25c9981", "url": "https://github.com/apache/geode/commit/0b8d3f14680cfa1804aa3116eb5f441fe25c9981", "message": "disabled retry since server1 is never restarted", "committedDate": "2020-06-29T21:19:21Z", "type": "commit"}, {"oid": "81426c16f687c220aa4a365f5e24c572c3ae6032", "url": "https://github.com/apache/geode/commit/81426c16f687c220aa4a365f5e24c572c3ae6032", "message": "Clean up unused code", "committedDate": "2020-07-02T16:53:55Z", "type": "commit"}, {"oid": "0d023d59b30e8a817d6cf8278da4e139bcd25ff7", "url": "https://github.com/apache/geode/commit/0d023d59b30e8a817d6cf8278da4e139bcd25ff7", "message": "added tests for SADD and APPEND", "committedDate": "2020-07-02T22:01:28Z", "type": "commit"}, {"oid": "b64e1094712ceef8f441eb76ce34ee5343409265", "url": "https://github.com/apache/geode/commit/b64e1094712ceef8f441eb76ce34ee5343409265", "message": "redis functions no longer HA since that can cause operations to be done more than once", "committedDate": "2020-07-06T21:52:55Z", "type": "commit"}, {"oid": "9d8c4a6972fc3dad63183350e4c039d6c981c88f", "url": "https://github.com/apache/geode/commit/9d8c4a6972fc3dad63183350e4c039d6c981c88f", "message": "Replace APPEND with SET and still have functions be HA", "committedDate": "2020-07-06T22:36:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyMTY4Ng==", "url": "https://github.com/apache/geode/pull/5318#discussion_r450521686", "bodyText": "The HashesAndCrashes test now tests hashes, sets, and strings. Do we still need SetsAndCrashesDUnitTest?\nOr should we change HashesAndCrashes to only test hashes and add another test for strings?\nI'm okay either way but we should probably do one or the other instead of both", "author": "dschneider-pivotal", "createdAt": "2020-07-06T23:00:05Z", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/set/SetsAndCrashesDUnitTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.apache.geode.distributed.ConfigurationProperties.REDIS_BIND_ADDRESS;\n+import static org.apache.geode.distributed.ConfigurationProperties.REDIS_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.REDIS_PORT;\n+import static org.apache.geode.redis.internal.GeodeRedisServer.ENABLE_REDIS_UNSUPPORTED_COMMANDS_PARAM;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+\n+import io.lettuce.core.ClientOptions;\n+import io.lettuce.core.RedisClient;\n+import io.lettuce.core.api.sync.RedisCommands;\n+import io.lettuce.core.resource.ClientResources;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.control.RebalanceFactory;\n+import org.apache.geode.cache.control.RebalanceResults;\n+import org.apache.geode.cache.control.ResourceManager;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.redis.session.springRedisTestApplication.config.DUnitSocketAddressResolver;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+public class SetsAndCrashesDUnitTest {", "originalCommit": "9d8c4a6972fc3dad63183350e4c039d6c981c88f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ceab786d41d158cb3c0b5dd910e21153d657bf3", "chunk": "diff --git a/geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/set/SetsAndCrashesDUnitTest.java b/geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/set/SetsAndCrashesDUnitTest.java\ndeleted file mode 100644\nindex d19a4293e4..0000000000\n--- a/geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/set/SetsAndCrashesDUnitTest.java\n+++ /dev/null\n\n@@ -1,231 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- *\n- */\n-\n-package org.apache.geode.redis.internal.executor.set;\n-\n-import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n-import static org.apache.geode.distributed.ConfigurationProperties.REDIS_BIND_ADDRESS;\n-import static org.apache.geode.distributed.ConfigurationProperties.REDIS_ENABLED;\n-import static org.apache.geode.distributed.ConfigurationProperties.REDIS_PORT;\n-import static org.apache.geode.redis.internal.GeodeRedisServer.ENABLE_REDIS_UNSUPPORTED_COMMANDS_PARAM;\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Properties;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.function.Consumer;\n-\n-import io.lettuce.core.ClientOptions;\n-import io.lettuce.core.RedisClient;\n-import io.lettuce.core.api.sync.RedisCommands;\n-import io.lettuce.core.resource.ClientResources;\n-import org.apache.logging.log4j.Logger;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-import org.apache.geode.cache.control.RebalanceFactory;\n-import org.apache.geode.cache.control.RebalanceResults;\n-import org.apache.geode.cache.control.ResourceManager;\n-import org.apache.geode.internal.AvailablePortHelper;\n-import org.apache.geode.logging.internal.log4j.api.LogService;\n-import org.apache.geode.redis.session.springRedisTestApplication.config.DUnitSocketAddressResolver;\n-import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n-import org.apache.geode.test.dunit.rules.MemberVM;\n-import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n-import org.apache.geode.test.junit.rules.GfshCommandRule;\n-\n-public class SetsAndCrashesDUnitTest {\n-\n-  private static final Logger logger = LogService.getLogger();\n-\n-  @ClassRule\n-  public static ClusterStartupRule clusterStartUp = new ClusterStartupRule(4);\n-\n-  @ClassRule\n-  public static GfshCommandRule gfsh = new GfshCommandRule();\n-\n-  private static Properties locatorProperties;\n-\n-  private static MemberVM locator;\n-  private static MemberVM server1;\n-  private static MemberVM server2;\n-  private static MemberVM server3;\n-\n-  private static int[] redisPorts;\n-\n-  private RedisCommands<String, String> commands;\n-  private static RedisClient redisClient;\n-\n-  @Rule\n-  public ExecutorServiceRule executor = new ExecutorServiceRule();\n-\n-  @BeforeClass\n-  public static void classSetup() throws Exception {\n-    redisPorts = AvailablePortHelper.getRandomAvailableTCPPorts(3);\n-    locatorProperties = new Properties();\n-    locatorProperties.setProperty(MAX_WAIT_TIME_RECONNECT, \"15000\");\n-\n-    locator = clusterStartUp.startLocatorVM(0, locatorProperties);\n-\n-    int locatorPort = locator.getPort();\n-\n-    String redisPort1 = redisPorts[0] + \"\";\n-    server1 = clusterStartUp.startServerVM(1,\n-        x -> x.withProperty(REDIS_PORT, redisPort1)\n-            .withProperty(REDIS_ENABLED, \"true\")\n-            .withProperty(REDIS_BIND_ADDRESS, \"localhost\")\n-            .withSystemProperty(ENABLE_REDIS_UNSUPPORTED_COMMANDS_PARAM, \"true\")\n-            .withConnectionToLocator(locatorPort));\n-\n-    String redisPort2 = redisPorts[1] + \"\";\n-    server2 = clusterStartUp.startServerVM(2,\n-        x -> x.withProperty(REDIS_PORT, redisPort2)\n-            .withProperty(REDIS_ENABLED, \"true\")\n-            .withProperty(REDIS_BIND_ADDRESS, \"localhost\")\n-            .withSystemProperty(ENABLE_REDIS_UNSUPPORTED_COMMANDS_PARAM, \"true\")\n-            .withConnectionToLocator(locatorPort));\n-\n-    String redisPort3 = redisPorts[2] + \"\";\n-    server3 = clusterStartUp.startServerVM(3,\n-        x -> x.withProperty(REDIS_PORT, redisPort3)\n-            .withProperty(REDIS_ENABLED, \"true\")\n-            .withProperty(REDIS_BIND_ADDRESS, \"localhost\")\n-            .withSystemProperty(ENABLE_REDIS_UNSUPPORTED_COMMANDS_PARAM, \"true\")\n-            .withConnectionToLocator(locatorPort));\n-\n-    DUnitSocketAddressResolver dnsResolver =\n-        new DUnitSocketAddressResolver(new String[] {redisPort2, redisPort3});\n-\n-    ClientResources resources = ClientResources.builder()\n-        .socketAddressResolver(dnsResolver)\n-        .build();\n-\n-    redisClient = RedisClient.create(resources, \"redis://localhost\");\n-    redisClient.setOptions(ClientOptions.builder()\n-        .autoReconnect(true)\n-        .build());\n-\n-    gfsh.connectAndVerify(locator);\n-  }\n-\n-  private MemberVM startRedisVM(int vmID, int redisPort) {\n-    int locatorPort = locator.getPort();\n-    return clusterStartUp.startServerVM(vmID,\n-        x -> x.withProperty(REDIS_PORT, redisPort + \"\")\n-            .withProperty(REDIS_ENABLED, \"true\")\n-            .withProperty(REDIS_BIND_ADDRESS, \"localhost\")\n-            .withSystemProperty(ENABLE_REDIS_UNSUPPORTED_COMMANDS_PARAM, \"true\")\n-            .withConnectionToLocator(locatorPort));\n-  }\n-\n-  @Test\n-  public void givenServerCrashesDuringSadd_thenDataIsNotLost() throws Exception {\n-    commands = redisClient.connect().sync();\n-\n-    AtomicBoolean running1 = new AtomicBoolean(true);\n-    AtomicBoolean running2 = new AtomicBoolean(true);\n-    AtomicBoolean running3 = new AtomicBoolean(true);\n-    AtomicBoolean running4 = new AtomicBoolean(false);\n-\n-    Future<List<String>> future1 = executor.submit(() -> performAndVerify(0, 20000, running1));\n-    Future<List<String>> future2 = executor.submit(() -> performAndVerify(1, 20000, running2));\n-    Future<List<String>> future3 = executor.submit(() -> performAndVerify(3, 20000, running3));\n-    Future<List<String>> future4 = executor.submit(() -> performAndVerify(4, 1000, running4));\n-\n-    future4.get();\n-    clusterStartUp.crashVM(2);\n-    server2 = startRedisVM(2, redisPorts[1]);\n-    rebalanceAllRegions(server2);\n-\n-    clusterStartUp.crashVM(3);\n-    server3 = startRedisVM(3, redisPorts[2]);\n-    rebalanceAllRegions(server3);\n-\n-    clusterStartUp.crashVM(2);\n-    server2 = startRedisVM(2, redisPorts[1]);\n-    rebalanceAllRegions(server2);\n-\n-    clusterStartUp.crashVM(3);\n-    server3 = startRedisVM(3, redisPorts[2]);\n-    rebalanceAllRegions(server3);\n-\n-    running1.set(false);\n-    running2.set(false);\n-    running3.set(false);\n-\n-    assertThat(future1.get()).isEmpty();\n-    assertThat(future2.get()).isEmpty();\n-    assertThat(future3.get()).isEmpty();\n-  }\n-\n-  private List<String> performAndVerify(int index, int minimumIterations, AtomicBoolean isRunning) {\n-    String key = \"key-\" + index;\n-    int iterationCount = 0;\n-\n-    while (iterationCount < minimumIterations || isRunning.get()) {\n-      int localI = iterationCount;\n-      retryableCommand(c -> c.sadd(key, \"value-\" + localI));\n-      iterationCount += 1;\n-    }\n-\n-    List<String> missingValues = new ArrayList<>();\n-    int retries = 0;\n-    for (int i = 0; i < iterationCount; i++) {\n-      String value = \"value-\" + i;\n-      retries += retryableCommand(c -> {\n-        if (!c.sismember(key, value)) {\n-          missingValues.add(value);\n-        }\n-      });\n-    }\n-\n-    logger.info(\"--->>> SADD test ran {} iterations, retrying {} times\", iterationCount, retries);\n-\n-    return missingValues;\n-  }\n-\n-  private int retryableCommand(Consumer<RedisCommands<String, String>> exe) {\n-    int retries = 0;\n-    do {\n-      try {\n-        exe.accept(commands);\n-        return retries;\n-      } catch (Exception e) {\n-        logger.info(\"--->>> Handling retryable error {}\", e.getMessage());\n-        commands = redisClient.connect().sync();\n-        retries += 1;\n-      }\n-    } while (true);\n-  }\n-\n-  private static void rebalanceAllRegions(MemberVM vm) {\n-    vm.invoke(() -> {\n-      ResourceManager manager = ClusterStartupRule.getCache().getResourceManager();\n-\n-      RebalanceFactory factory = manager.createRebalanceFactory();\n-\n-      try {\n-        RebalanceResults result = factory.start().getResults();\n-      } catch (InterruptedException e) {\n-        throw new RuntimeException(e);\n-      }\n-    });\n-  }\n-}\n"}}, {"oid": "6ceab786d41d158cb3c0b5dd910e21153d657bf3", "url": "https://github.com/apache/geode/commit/6ceab786d41d158cb3c0b5dd910e21153d657bf3", "message": "Remove redundant SetsAndCrashesDUnitTest", "committedDate": "2020-07-07T06:08:02Z", "type": "commit"}]}