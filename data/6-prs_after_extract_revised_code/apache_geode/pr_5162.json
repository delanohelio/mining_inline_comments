{"pr_number": 5162, "pr_title": "GEODE-6070: Fix ShutdownCommandOverHttpDUnitTest flakiness", "pr_createdAt": "2020-05-26T18:33:01Z", "pr_url": "https://github.com/apache/geode/pull/5162", "timeline": [{"oid": "028c1e806092f5ad2f7479e6925e2627e83f1040", "url": "https://github.com/apache/geode/commit/028c1e806092f5ad2f7479e6925e2627e83f1040", "message": "GEODE-6070: Fix ShutdownCommandOverHttpDUnitTest flakiness\n\nUse IgnoredException for DistributedSystemDisconnectedException.", "committedDate": "2020-05-26T18:26:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NzA3NQ==", "url": "https://github.com/apache/geode/pull/5162#discussion_r431997075", "bodyText": "Is it preferable to use withFailMessage than as for this case?", "author": "jchen21", "createdAt": "2020-05-28T17:16:31Z", "path": "geode-web/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/ShutdownCommandOverHttpDUnitTest.java", "diffHunk": "@@ -96,48 +93,61 @@ public void setup() throws Exception {\n \n     locatorString = \"localhost[\" + locatorPort + \"]\";\n \n-    locator.invoke(\n-        () -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));\n+    locator.invoke(() -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));\n     server1.invoke(() -> startServer(SERVER1_NAME, server1Dir, locatorString));\n     server2.invoke(() -> startServer(SERVER2_NAME, server2Dir, locatorString));\n \n     gfsh.connectAndVerify(locatorHttpPort, PortType.http);\n+\n+    addIgnoredException(DistributedSystemDisconnectedException.class);\n   }\n \n   @Test\n   public void testShutdownServers() {\n     String command = \"shutdown\";\n \n-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput(\"Shutdown is triggered\");\n+    gfsh.executeAndAssertThat(command)\n+        .statusIsSuccess()\n+        .containsOutput(\"Shutdown is triggered\");\n \n     for (VM vm : toArray(server1, server2)) {\n       vm.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));\n     }\n \n-    gfsh.executeAndAssertThat(\"list members\").statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"list members\")\n+        .statusIsSuccess();\n+\n     assertThat(gfsh.getGfshOutput()).contains(\"locator\");\n   }\n \n   @Test\n   public void testShutdownAll() {\n     String command = \"shutdown --include-locators=true\";\n \n-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput(\"Shutdown is triggered\");\n+    gfsh.executeAndAssertThat(command)\n+        .statusIsSuccess()\n+        .containsOutput(\"Shutdown is triggered\");\n+\n     server1.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));\n     server2.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));\n     locator.invoke(() -> verifyNotConnected(LOCATOR_LAUNCHER.get().getCache()));\n   }\n \n   private void verifyNotConnected(Cache cache) {\n-    await().untilAsserted(() -> assertThat(cache.getDistributedSystem().isConnected()).isFalse());\n+    await().untilAsserted(() -> {\n+      assertThat(cache.getDistributedSystem().isConnected())\n+          .as(\"cache.getDistributedSystem().isConnected()\")", "originalCommit": "028c1e806092f5ad2f7479e6925e2627e83f1040", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NDE4OA==", "url": "https://github.com/apache/geode/pull/5162#discussion_r432154188", "bodyText": "I use as to indicate an alias for the subject of the assertion, and withFailMessage as a full replacement of the failure message.\ndistributed system isConnected is probably a better example of English for an as in this case. It's kind of interesting to compare the output when using as vs withFailMessage.\nUsing as:\norg.junit.ComparisonFailure: [cache.getDistributedSystem().isConnected()] \nExpected :false\nActual   :true\n <Click to see difference>\n\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat org.apache.geode.test.awaitility.WithFailMessageTest.foo(WithFailMessageTest.java:79)\n\nUsing withFailMessage:\njava.lang.AssertionError: cache.getDistributedSystem().isConnected()\n\n\tat org.apache.geode.test.awaitility.WithFailMessageTest.foo(WithFailMessageTest.java:79)\n\nSo I only use withFailMessage if I want to actually suppress and replace the native assertion failure message.", "author": "kirklund", "createdAt": "2020-05-28T22:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NzA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NDkzMQ==", "url": "https://github.com/apache/geode/pull/5162#discussion_r432154931", "bodyText": "And this is the same assertion failure without as or withFailMessage:\norg.junit.ComparisonFailure: \nExpected :false\nActual   :true\n <Click to see difference>\n\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat org.apache.geode.test.awaitility.WithFailMessageTest.foo(WithFailMessageTest.java:78)", "author": "kirklund", "createdAt": "2020-05-28T22:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NzA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1Nzg4OA==", "url": "https://github.com/apache/geode/pull/5162#discussion_r432157888", "bodyText": "Thank you for the explanation and examples!", "author": "jchen21", "createdAt": "2020-05-28T22:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NzA3NQ=="}], "type": "inlineReview", "revised_code": null}]}