{"pr_number": 4924, "pr_title": "GEODE-7964: Upgrade Mockito to 3.3.3", "pr_createdAt": "2020-04-07T23:41:40Z", "pr_url": "https://github.com/apache/geode/pull/4924", "timeline": [{"oid": "8578a253816d2a7955e7b5f9c545d465db950f37", "url": "https://github.com/apache/geode/commit/8578a253816d2a7955e7b5f9c545d465db950f37", "message": "GEODE-7964: Upgrade Mockito to 2.25.0", "committedDate": "2020-04-10T21:22:53Z", "type": "forcePushed"}, {"oid": "bdbc6d847843818efa79cce07cf7455d396ec42d", "url": "https://github.com/apache/geode/commit/bdbc6d847843818efa79cce07cf7455d396ec42d", "message": "Disable all concurrent tests", "committedDate": "2020-04-15T17:09:03Z", "type": "forcePushed"}, {"oid": "4ce4cac256904577b9f8cf9d79898552e3f4093e", "url": "https://github.com/apache/geode/commit/4ce4cac256904577b9f8cf9d79898552e3f4093e", "message": "GEODE-7964: Upgrade Mockito 2.25.0", "committedDate": "2020-04-17T16:14:51Z", "type": "forcePushed"}, {"oid": "ec5d696b1d4857629b562648613a197c29eb1e47", "url": "https://github.com/apache/geode/commit/ec5d696b1d4857629b562648613a197c29eb1e47", "message": "Upgrade to Mockito 2.25.0 and fix HARegionQueueIntegrationTest", "committedDate": "2020-04-17T17:10:40Z", "type": "forcePushed"}, {"oid": "c0aaef2cd41686acd2b3fbda0e6770b269fa7d08", "url": "https://github.com/apache/geode/commit/c0aaef2cd41686acd2b3fbda0e6770b269fa7d08", "message": "GEODE-7964: Fixup all tests touched for Mockito upgrade", "committedDate": "2020-04-20T21:58:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMTcyMg==", "url": "https://github.com/apache/geode/pull/4924#discussion_r413111722", "bodyText": "Clean up these TODO:KIRK parts.", "author": "upthewaterspout", "createdAt": "2020-04-22T16:03:15Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionImpl.java", "diffHunk": "@@ -223,6 +223,16 @@ public Socket getSocket() {\n     return theSocket;\n   }\n \n+  @Override\n+  public long getBirthDate() {\n+    return 0; // TODO:KIRK", "originalCommit": "b2dd4579bb67e1604cb3245ea244beb8e12faa2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE0NTI0NQ==", "url": "https://github.com/apache/geode/pull/4924#discussion_r413145245", "bodyText": "Thanks for catching those!", "author": "kirklund", "createdAt": "2020-04-22T16:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMTcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2NjI5NQ==", "url": "https://github.com/apache/geode/pull/4924#discussion_r413166295", "bodyText": "Removed", "author": "kirklund", "createdAt": "2020-04-22T17:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMTcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "8dfa89c3811899a32133b06e2ac719b2d66d344b", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionImpl.java b/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionImpl.java\nindex e4b3c94f42..bb98f2ab0e 100644\n--- a/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionImpl.java\n+++ b/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionImpl.java\n\n@@ -225,12 +225,12 @@ public class ConnectionImpl implements Connection {\n \n   @Override\n   public long getBirthDate() {\n-    return 0; // TODO:KIRK\n+    return 0;\n   }\n \n   @Override\n   public void setBirthDate(long ts) {\n-    // TODO:KIRK\n+    // nothing\n   }\n \n   @Override\n"}}, {"oid": "c67aec72348133cb7128fd272b1e60f88afddfee", "url": "https://github.com/apache/geode/commit/c67aec72348133cb7128fd272b1e60f88afddfee", "message": "GEODE-7964: Fixup all tests touched for Mockito upgrade", "committedDate": "2020-04-22T16:58:56Z", "type": "forcePushed"}, {"oid": "8274d9b113c05169f8cc341210c7a3e9390ab534", "url": "https://github.com/apache/geode/commit/8274d9b113c05169f8cc341210c7a3e9390ab534", "message": "GEODE-7964: Update usage of Mockito deprecated APIs", "committedDate": "2020-04-22T16:58:56Z", "type": "forcePushed"}, {"oid": "fb084947c864a71f4a925b4616892aa4b572bba5", "url": "https://github.com/apache/geode/commit/fb084947c864a71f4a925b4616892aa4b572bba5", "message": "GEODE-7964: Upgrade Mockito to 3.3.3", "committedDate": "2020-04-22T17:05:32Z", "type": "commit"}, {"oid": "fb084947c864a71f4a925b4616892aa4b572bba5", "url": "https://github.com/apache/geode/commit/fb084947c864a71f4a925b4616892aa4b572bba5", "message": "GEODE-7964: Upgrade Mockito to 3.3.3", "committedDate": "2020-04-22T17:05:32Z", "type": "forcePushed"}, {"oid": "8dfa89c3811899a32133b06e2ac719b2d66d344b", "url": "https://github.com/apache/geode/commit/8dfa89c3811899a32133b06e2ac719b2d66d344b", "message": "Remove TODO comments", "committedDate": "2020-04-22T17:14:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEzODYzMw==", "url": "https://github.com/apache/geode/pull/4924#discussion_r413138633", "bodyText": "This does not look like it is asserting the same thing about timeouts any more..", "author": "mhansonp", "createdAt": "2020-04-22T16:38:48Z", "path": "geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java", "diffHunk": "@@ -122,278 +138,271 @@ public void tearDown() throws InterruptedException {\n \n   @Test\n   public void testAddVarianceToInterval() {\n-    assertThat(ConnectionManagerImpl.addVarianceToInterval(0)).as(\"Zero gets zero variance\")\n+    assertThat(ConnectionManagerImpl.addVarianceToInterval(0))\n+        .as(\"Zero gets zero variance\")\n         .isEqualTo(0);\n+\n     assertThat(ConnectionManagerImpl.addVarianceToInterval(300000))\n-        .as(\"Large value gets +/-10% variance\").isNotEqualTo(300000).isGreaterThanOrEqualTo(270000)\n+        .as(\"Large value gets +/-10% variance\")\n+        .isNotEqualTo(300000)\n+        .isGreaterThanOrEqualTo(270000)\n         .isLessThanOrEqualTo(330000);\n-    assertThat(ConnectionManagerImpl.addVarianceToInterval(9)).as(\"Small value gets +/-1 variance\")\n-        .isNotEqualTo(9).isGreaterThanOrEqualTo(8).isLessThanOrEqualTo(10);\n+\n+    assertThat(ConnectionManagerImpl.addVarianceToInterval(9))\n+        .as(\"Small value gets +/-1 variance\")\n+        .isNotEqualTo(9)\n+        .isGreaterThanOrEqualTo(8)\n+        .isLessThanOrEqualTo(10);\n   }\n \n   @Test\n-  public void testGet()\n-      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+  public void testGet() {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 3, 0, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    Connection conn[] = new Connection[4];\n-\n-    conn[0] = manager.borrowConnection(0);\n-    Assert.assertEquals(1, factory.creates);\n-\n-    manager.returnConnection(conn[0]);\n-    conn[0] = manager.borrowConnection(0);\n-    Assert.assertEquals(1, factory.creates);\n-    conn[1] = manager.borrowConnection(0);\n-    manager.returnConnection(conn[0]);\n-    manager.returnConnection(conn[1]);\n-    Assert.assertEquals(2, factory.creates);\n-\n-    conn[0] = manager.borrowConnection(0);\n-    conn[1] = manager.borrowConnection(0);\n-    conn[2] = manager.borrowConnection(0);\n-    Assert.assertEquals(3, factory.creates);\n-\n-    try {\n-      conn[4] = manager.borrowConnection(10);\n-      fail(\"Should have received an all connections in use exception\");\n-    } catch (AllConnectionsInUseException e) {\n-      // expected exception\n-    }\n+    Connection connection1 = manager.borrowConnection(0);\n+    assertThat(factory.creates.get()).isEqualTo(1);\n+\n+    manager.returnConnection(connection1);\n+    connection1 = manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(1);\n+\n+    Connection connection2 = manager.borrowConnection(0);\n+    manager.returnConnection(connection1);\n+    manager.returnConnection(connection2);\n+\n+    assertThat(factory.creates.get()).isEqualTo(2);\n+\n+    manager.borrowConnection(0);\n+    manager.borrowConnection(0);\n+    manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(3);\n+\n+    Throwable thrown = catchThrowable(() -> {\n+      manager.borrowConnection(10);\n+    });\n+    assertThat(thrown).isInstanceOf(AllConnectionsInUseException.class);\n   }\n \n   @Test\n-  public void testPrefill() throws InterruptedException {\n+  public void testPrefill() {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 2, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n-    final String descrip = manager.toString();\n-    WaitCriterion ev = new WaitCriterion() {\n-      @Override\n-      public boolean done() {\n-        return factory.creates == 2 && factory.destroys == 0;\n-      }\n \n-      @Override\n-      public String description() {\n-        return \"waiting for manager \" + descrip;\n-      }\n-    };\n-    GeodeAwaitility.await().untilAsserted(ev);\n+    await(\"waiting for manager \" + manager).untilAsserted(() -> {\n+      assertThat(factory.creates.get()).isEqualTo(2);\n+      assertThat(factory.destroys.get()).isEqualTo(0);\n+    });\n   }\n \n   @Test\n-  public void testInvalidateConnection()\n-      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+  public void testInvalidateConnection() {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 0, 0L, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    Connection conn = manager.borrowConnection(0);\n-    Assert.assertEquals(1, factory.creates);\n-    Assert.assertEquals(0, factory.destroys);\n-    conn.destroy();\n-    manager.returnConnection(conn);\n-    Assert.assertEquals(1, factory.creates);\n-    Assert.assertEquals(1, factory.destroys);\n-    conn = manager.borrowConnection(0);\n-    Assert.assertEquals(2, factory.creates);\n-    Assert.assertEquals(1, factory.destroys);\n+    Connection connection = manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(1);\n+    assertThat(factory.destroys.get()).isEqualTo(0);\n+\n+    connection.destroy();\n+    manager.returnConnection(connection);\n+\n+    assertThat(factory.creates.get()).isEqualTo(1);\n+    assertThat(factory.destroys.get()).isEqualTo(1);\n+\n+    manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(2);\n+    assertThat(factory.destroys.get()).isEqualTo(1);\n   }\n \n   @Test\n-  public void testInvalidateServer()\n-      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+  public void testInvalidateServer() {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 0, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n     ServerLocation server1 = new ServerLocation(\"localhost\", 1);\n     ServerLocation server2 = new ServerLocation(\"localhost\", 2);\n-    factory.nextServer = server1;\n-    Connection conn1 = manager.borrowConnection(0);\n-    Connection conn2 = manager.borrowConnection(0);\n-    Connection conn3 = manager.borrowConnection(0);\n-    factory.nextServer = server2;\n-    Connection conn4 = manager.borrowConnection(0);\n-\n-    Assert.assertEquals(4, factory.creates);\n-    Assert.assertEquals(0, factory.destroys);\n-\n-    manager.returnConnection(conn2);\n-    endpointManager.serverCrashed(conn2.getEndpoint());\n-    Assert.assertEquals(3, factory.destroys);\n-    conn1.destroy();\n-    manager.returnConnection(conn1);\n-    Assert.assertEquals(3, factory.destroys);\n-    manager.returnConnection(conn3);\n-    manager.returnConnection(conn4);\n-    Assert.assertEquals(3, factory.destroys);\n+    factory.nextServer.set(server1);\n+    Connection connection1 = manager.borrowConnection(0);\n+    Connection connection2 = manager.borrowConnection(0);\n+    Connection connection3 = manager.borrowConnection(0);\n+    factory.nextServer.set(server2);\n+    Connection connection4 = manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(4);\n+    assertThat(factory.destroys.get()).isEqualTo(0);\n+\n+    manager.returnConnection(connection2);\n+    endpointManager.serverCrashed(connection2.getEndpoint());\n+\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n+\n+    connection1.destroy();\n+    manager.returnConnection(connection1);\n+\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n+\n+    manager.returnConnection(connection3);\n+    manager.returnConnection(connection4);\n+\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n \n     manager.borrowConnection(0);\n-    Assert.assertEquals(4, factory.creates);\n-    Assert.assertEquals(3, factory.destroys);\n+    assertThat(factory.creates.get()).isEqualTo(4);\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n   }\n \n   @Test\n-  public void testIdleExpiration()\n-      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n-    final long idleTimeoutMillis = 300;\n+  public void testIdleExpiration() throws Exception {\n+    long idleTimeoutMillis = 300;\n     manager =\n         new ConnectionManagerImpl(\"pool\", factory, endpointManager, 5, 2, idleTimeoutMillis, -1,\n             logger, 60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    {\n-      factory.waitWhile(() -> factory.creates < 2);\n-      Assert.assertEquals(2, factory.creates);\n-      Assert.assertEquals(0, factory.destroys);\n-      Assert.assertEquals(0, factory.closes);\n-      Assert.assertEquals(0, poolStats.getIdleExpire());\n-      // no need to wait; dangerous because it gives connections a chance to expire\n-      // //wait for prefill task to finish.\n-      // Thread.sleep(100);\n-    }\n+    await().untilAsserted(() -> {\n+      assertThat(factory.creates.get()).isEqualTo(2);\n+      assertThat(factory.destroys.get()).isEqualTo(0);\n+      assertThat(factory.closes.get()).isEqualTo(0);\n+      assertThat(poolStats.getIdleExpire()).isEqualTo(0);\n+    });\n+\n+    // no need to wait; dangerous because it gives connections a chance to expire\n \n-    Connection conn1 = manager.borrowConnection(500);\n-    Connection conn2 = manager.borrowConnection(500);\n-    Connection conn3 = manager.borrowConnection(500);\n-    Connection conn4 = manager.borrowConnection(500);\n-    Connection conn5 = manager.borrowConnection(500);\n+    Connection connection1 = manager.borrowConnection(500);\n+    Connection connection2 = manager.borrowConnection(500);\n+    Connection connection3 = manager.borrowConnection(500);\n+    Connection connection4 = manager.borrowConnection(500);\n+    Connection connection5 = manager.borrowConnection(500);\n \n     // wait to make sure checked out connections aren't timed out\n     Thread.sleep(idleTimeoutMillis * 2);\n-    Assert.assertEquals(5, factory.creates);\n-    Assert.assertEquals(0, factory.destroys);\n-    Assert.assertEquals(0, factory.closes);\n-    Assert.assertEquals(0, poolStats.getIdleExpire());\n-\n-    {\n-      // make sure a connection that has been passivated can idle-expire\n-      conn1.passivate(true);\n-\n-      long elapsedMillis = factory.waitWhile(() -> factory.destroys < 1);\n-      Assert.assertEquals(5, factory.creates);\n-      Assert.assertEquals(1, factory.destroys);\n-      Assert.assertEquals(1, factory.closes);\n-      Assert.assertEquals(1, poolStats.getIdleExpire());\n-      checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n-    }\n+    assertThat(factory.creates.get()).isEqualTo(5);\n+    assertThat(factory.destroys.get()).isEqualTo(0);\n+    assertThat(factory.closes.get()).isEqualTo(0);\n+    assertThat(poolStats.getIdleExpire()).isEqualTo(0);\n+\n+    // make sure a connection that has been passivated can idle-expire\n+    connection1.passivate(true);\n+\n+    long elapsedMillis = Timer.measure(() -> {\n+      await().untilAsserted(() -> {\n+        assertThat(factory.creates.get()).isEqualTo(5);\n+        assertThat(factory.destroys.get()).isEqualTo(1);\n+        assertThat(factory.closes.get()).isEqualTo(1);\n+        assertThat(poolStats.getIdleExpire()).isEqualTo(1);\n+      });\n+    });\n+    checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n \n     // now return all other connections to pool and verify that just 2 expire\n-    manager.returnConnection(conn2);\n-    manager.returnConnection(conn3);\n-    manager.returnConnection(conn4);\n-    manager.returnConnection(conn5);\n-\n-    {\n-      long elapsedMillis = factory.waitWhile(() -> factory.destroys < 3);\n-      Assert.assertEquals(5, factory.creates);\n-      Assert.assertEquals(3, factory.destroys);\n-      Assert.assertEquals(3, factory.closes);\n-      Assert.assertEquals(3, poolStats.getIdleExpire());\n-      checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n-    }\n+    manager.returnConnection(connection2);\n+    manager.returnConnection(connection3);\n+    manager.returnConnection(connection4);\n+    manager.returnConnection(connection5);\n+\n+    elapsedMillis = Timer.measure(() -> {\n+      await().untilAsserted(() -> {\n+        assertThat(factory.creates.get()).isEqualTo(5);\n+        assertThat(factory.destroys.get()).isEqualTo(3);\n+        assertThat(factory.closes.get()).isEqualTo(3);\n+        assertThat(poolStats.getIdleExpire()).isEqualTo(3);\n+      });\n+    });\n+    checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n \n     // wait to make sure min-connections don't time out\n     Thread.sleep(idleTimeoutMillis * 2);\n-    Assert.assertEquals(5, factory.creates);\n-    Assert.assertEquals(3, factory.destroys);\n-    Assert.assertEquals(3, factory.closes);\n-    Assert.assertEquals(3, poolStats.getIdleExpire());\n-  }\n-\n-  private void checkIdleTimeout(final long idleTimeoutMillis, long elapsedMillis) {\n-    Assert.assertTrue(\n-        \"Elapsed \" + elapsedMillis + \" is less than idle timeout \" + idleTimeoutMillis,\n-        elapsedMillis >= (idleTimeoutMillis - ALLOWABLE_ERROR_IN_MILLIS));\n-    Assert.assertTrue(\n-        \"Elapsed \" + elapsedMillis + \" is greater than idle timeout \" + idleTimeoutMillis,\n-        elapsedMillis <= (idleTimeoutMillis + ALLOWABLE_ERROR_IN_MILLIS));\n+    assertThat(factory.creates.get()).isEqualTo(5);\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n+    assertThat(factory.closes.get()).isEqualTo(3);\n+    assertThat(poolStats.getIdleExpire()).isEqualTo(3);\n   }", "originalCommit": "b2dd4579bb67e1604cb3245ea244beb8e12faa2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8274d9b113c05169f8cc341210c7a3e9390ab534", "chunk": "diff --git a/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java b/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java\nindex a673371d0b..87eda4629e 100644\n--- a/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java\n+++ b/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java\n\n@@ -138,271 +122,278 @@ public class ConnectionManagerJUnitTest {\n \n   @Test\n   public void testAddVarianceToInterval() {\n-    assertThat(ConnectionManagerImpl.addVarianceToInterval(0))\n-        .as(\"Zero gets zero variance\")\n+    assertThat(ConnectionManagerImpl.addVarianceToInterval(0)).as(\"Zero gets zero variance\")\n         .isEqualTo(0);\n-\n     assertThat(ConnectionManagerImpl.addVarianceToInterval(300000))\n-        .as(\"Large value gets +/-10% variance\")\n-        .isNotEqualTo(300000)\n-        .isGreaterThanOrEqualTo(270000)\n+        .as(\"Large value gets +/-10% variance\").isNotEqualTo(300000).isGreaterThanOrEqualTo(270000)\n         .isLessThanOrEqualTo(330000);\n-\n-    assertThat(ConnectionManagerImpl.addVarianceToInterval(9))\n-        .as(\"Small value gets +/-1 variance\")\n-        .isNotEqualTo(9)\n-        .isGreaterThanOrEqualTo(8)\n-        .isLessThanOrEqualTo(10);\n+    assertThat(ConnectionManagerImpl.addVarianceToInterval(9)).as(\"Small value gets +/-1 variance\")\n+        .isNotEqualTo(9).isGreaterThanOrEqualTo(8).isLessThanOrEqualTo(10);\n   }\n \n   @Test\n-  public void testGet() {\n+  public void testGet()\n+      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 3, 0, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    Connection connection1 = manager.borrowConnection(0);\n-    assertThat(factory.creates.get()).isEqualTo(1);\n-\n-    manager.returnConnection(connection1);\n-    connection1 = manager.borrowConnection(0);\n-\n-    assertThat(factory.creates.get()).isEqualTo(1);\n-\n-    Connection connection2 = manager.borrowConnection(0);\n-    manager.returnConnection(connection1);\n-    manager.returnConnection(connection2);\n-\n-    assertThat(factory.creates.get()).isEqualTo(2);\n-\n-    manager.borrowConnection(0);\n-    manager.borrowConnection(0);\n-    manager.borrowConnection(0);\n-\n-    assertThat(factory.creates.get()).isEqualTo(3);\n-\n-    Throwable thrown = catchThrowable(() -> {\n-      manager.borrowConnection(10);\n-    });\n-    assertThat(thrown).isInstanceOf(AllConnectionsInUseException.class);\n+    Connection conn[] = new Connection[4];\n+\n+    conn[0] = manager.borrowConnection(0);\n+    Assert.assertEquals(1, factory.creates);\n+\n+    manager.returnConnection(conn[0]);\n+    conn[0] = manager.borrowConnection(0);\n+    Assert.assertEquals(1, factory.creates);\n+    conn[1] = manager.borrowConnection(0);\n+    manager.returnConnection(conn[0]);\n+    manager.returnConnection(conn[1]);\n+    Assert.assertEquals(2, factory.creates);\n+\n+    conn[0] = manager.borrowConnection(0);\n+    conn[1] = manager.borrowConnection(0);\n+    conn[2] = manager.borrowConnection(0);\n+    Assert.assertEquals(3, factory.creates);\n+\n+    try {\n+      conn[4] = manager.borrowConnection(10);\n+      fail(\"Should have received an all connections in use exception\");\n+    } catch (AllConnectionsInUseException e) {\n+      // expected exception\n+    }\n   }\n \n   @Test\n-  public void testPrefill() {\n+  public void testPrefill() throws InterruptedException {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 2, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n+    final String descrip = manager.toString();\n+    WaitCriterion ev = new WaitCriterion() {\n+      @Override\n+      public boolean done() {\n+        return factory.creates == 2 && factory.destroys == 0;\n+      }\n \n-    await(\"waiting for manager \" + manager).untilAsserted(() -> {\n-      assertThat(factory.creates.get()).isEqualTo(2);\n-      assertThat(factory.destroys.get()).isEqualTo(0);\n-    });\n+      @Override\n+      public String description() {\n+        return \"waiting for manager \" + descrip;\n+      }\n+    };\n+    GeodeAwaitility.await().untilAsserted(ev);\n   }\n \n   @Test\n-  public void testInvalidateConnection() {\n+  public void testInvalidateConnection()\n+      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 0, 0L, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    Connection connection = manager.borrowConnection(0);\n-\n-    assertThat(factory.creates.get()).isEqualTo(1);\n-    assertThat(factory.destroys.get()).isEqualTo(0);\n-\n-    connection.destroy();\n-    manager.returnConnection(connection);\n-\n-    assertThat(factory.creates.get()).isEqualTo(1);\n-    assertThat(factory.destroys.get()).isEqualTo(1);\n-\n-    manager.borrowConnection(0);\n-\n-    assertThat(factory.creates.get()).isEqualTo(2);\n-    assertThat(factory.destroys.get()).isEqualTo(1);\n+    Connection conn = manager.borrowConnection(0);\n+    Assert.assertEquals(1, factory.creates);\n+    Assert.assertEquals(0, factory.destroys);\n+    conn.destroy();\n+    manager.returnConnection(conn);\n+    Assert.assertEquals(1, factory.creates);\n+    Assert.assertEquals(1, factory.destroys);\n+    conn = manager.borrowConnection(0);\n+    Assert.assertEquals(2, factory.creates);\n+    Assert.assertEquals(1, factory.destroys);\n   }\n \n   @Test\n-  public void testInvalidateServer() {\n+  public void testInvalidateServer()\n+      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 0, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n     ServerLocation server1 = new ServerLocation(\"localhost\", 1);\n     ServerLocation server2 = new ServerLocation(\"localhost\", 2);\n-    factory.nextServer.set(server1);\n-    Connection connection1 = manager.borrowConnection(0);\n-    Connection connection2 = manager.borrowConnection(0);\n-    Connection connection3 = manager.borrowConnection(0);\n-    factory.nextServer.set(server2);\n-    Connection connection4 = manager.borrowConnection(0);\n-\n-    assertThat(factory.creates.get()).isEqualTo(4);\n-    assertThat(factory.destroys.get()).isEqualTo(0);\n-\n-    manager.returnConnection(connection2);\n-    endpointManager.serverCrashed(connection2.getEndpoint());\n-\n-    assertThat(factory.destroys.get()).isEqualTo(3);\n-\n-    connection1.destroy();\n-    manager.returnConnection(connection1);\n-\n-    assertThat(factory.destroys.get()).isEqualTo(3);\n-\n-    manager.returnConnection(connection3);\n-    manager.returnConnection(connection4);\n-\n-    assertThat(factory.destroys.get()).isEqualTo(3);\n+    factory.nextServer = server1;\n+    Connection conn1 = manager.borrowConnection(0);\n+    Connection conn2 = manager.borrowConnection(0);\n+    Connection conn3 = manager.borrowConnection(0);\n+    factory.nextServer = server2;\n+    Connection conn4 = manager.borrowConnection(0);\n+\n+    Assert.assertEquals(4, factory.creates);\n+    Assert.assertEquals(0, factory.destroys);\n+\n+    manager.returnConnection(conn2);\n+    endpointManager.serverCrashed(conn2.getEndpoint());\n+    Assert.assertEquals(3, factory.destroys);\n+    conn1.destroy();\n+    manager.returnConnection(conn1);\n+    Assert.assertEquals(3, factory.destroys);\n+    manager.returnConnection(conn3);\n+    manager.returnConnection(conn4);\n+    Assert.assertEquals(3, factory.destroys);\n \n     manager.borrowConnection(0);\n-    assertThat(factory.creates.get()).isEqualTo(4);\n-    assertThat(factory.destroys.get()).isEqualTo(3);\n+    Assert.assertEquals(4, factory.creates);\n+    Assert.assertEquals(3, factory.destroys);\n   }\n \n   @Test\n-  public void testIdleExpiration() throws Exception {\n-    long idleTimeoutMillis = 300;\n+  public void testIdleExpiration()\n+      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+    final long idleTimeoutMillis = 300;\n     manager =\n         new ConnectionManagerImpl(\"pool\", factory, endpointManager, 5, 2, idleTimeoutMillis, -1,\n             logger, 60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    await().untilAsserted(() -> {\n-      assertThat(factory.creates.get()).isEqualTo(2);\n-      assertThat(factory.destroys.get()).isEqualTo(0);\n-      assertThat(factory.closes.get()).isEqualTo(0);\n-      assertThat(poolStats.getIdleExpire()).isEqualTo(0);\n-    });\n-\n-    // no need to wait; dangerous because it gives connections a chance to expire\n+    {\n+      factory.waitWhile(() -> factory.creates < 2);\n+      Assert.assertEquals(2, factory.creates);\n+      Assert.assertEquals(0, factory.destroys);\n+      Assert.assertEquals(0, factory.closes);\n+      Assert.assertEquals(0, poolStats.getIdleExpire());\n+      // no need to wait; dangerous because it gives connections a chance to expire\n+      // //wait for prefill task to finish.\n+      // Thread.sleep(100);\n+    }\n \n-    Connection connection1 = manager.borrowConnection(500);\n-    Connection connection2 = manager.borrowConnection(500);\n-    Connection connection3 = manager.borrowConnection(500);\n-    Connection connection4 = manager.borrowConnection(500);\n-    Connection connection5 = manager.borrowConnection(500);\n+    Connection conn1 = manager.borrowConnection(500);\n+    Connection conn2 = manager.borrowConnection(500);\n+    Connection conn3 = manager.borrowConnection(500);\n+    Connection conn4 = manager.borrowConnection(500);\n+    Connection conn5 = manager.borrowConnection(500);\n \n     // wait to make sure checked out connections aren't timed out\n     Thread.sleep(idleTimeoutMillis * 2);\n-    assertThat(factory.creates.get()).isEqualTo(5);\n-    assertThat(factory.destroys.get()).isEqualTo(0);\n-    assertThat(factory.closes.get()).isEqualTo(0);\n-    assertThat(poolStats.getIdleExpire()).isEqualTo(0);\n-\n-    // make sure a connection that has been passivated can idle-expire\n-    connection1.passivate(true);\n-\n-    long elapsedMillis = Timer.measure(() -> {\n-      await().untilAsserted(() -> {\n-        assertThat(factory.creates.get()).isEqualTo(5);\n-        assertThat(factory.destroys.get()).isEqualTo(1);\n-        assertThat(factory.closes.get()).isEqualTo(1);\n-        assertThat(poolStats.getIdleExpire()).isEqualTo(1);\n-      });\n-    });\n-    checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n+    Assert.assertEquals(5, factory.creates);\n+    Assert.assertEquals(0, factory.destroys);\n+    Assert.assertEquals(0, factory.closes);\n+    Assert.assertEquals(0, poolStats.getIdleExpire());\n+\n+    {\n+      // make sure a connection that has been passivated can idle-expire\n+      conn1.passivate(true);\n+\n+      long elapsedMillis = factory.waitWhile(() -> factory.destroys < 1);\n+      Assert.assertEquals(5, factory.creates);\n+      Assert.assertEquals(1, factory.destroys);\n+      Assert.assertEquals(1, factory.closes);\n+      Assert.assertEquals(1, poolStats.getIdleExpire());\n+      checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n+    }\n \n     // now return all other connections to pool and verify that just 2 expire\n-    manager.returnConnection(connection2);\n-    manager.returnConnection(connection3);\n-    manager.returnConnection(connection4);\n-    manager.returnConnection(connection5);\n-\n-    elapsedMillis = Timer.measure(() -> {\n-      await().untilAsserted(() -> {\n-        assertThat(factory.creates.get()).isEqualTo(5);\n-        assertThat(factory.destroys.get()).isEqualTo(3);\n-        assertThat(factory.closes.get()).isEqualTo(3);\n-        assertThat(poolStats.getIdleExpire()).isEqualTo(3);\n-      });\n-    });\n-    checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n+    manager.returnConnection(conn2);\n+    manager.returnConnection(conn3);\n+    manager.returnConnection(conn4);\n+    manager.returnConnection(conn5);\n+\n+    {\n+      long elapsedMillis = factory.waitWhile(() -> factory.destroys < 3);\n+      Assert.assertEquals(5, factory.creates);\n+      Assert.assertEquals(3, factory.destroys);\n+      Assert.assertEquals(3, factory.closes);\n+      Assert.assertEquals(3, poolStats.getIdleExpire());\n+      checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n+    }\n \n     // wait to make sure min-connections don't time out\n     Thread.sleep(idleTimeoutMillis * 2);\n-    assertThat(factory.creates.get()).isEqualTo(5);\n-    assertThat(factory.destroys.get()).isEqualTo(3);\n-    assertThat(factory.closes.get()).isEqualTo(3);\n-    assertThat(poolStats.getIdleExpire()).isEqualTo(3);\n+    Assert.assertEquals(5, factory.creates);\n+    Assert.assertEquals(3, factory.destroys);\n+    Assert.assertEquals(3, factory.closes);\n+    Assert.assertEquals(3, poolStats.getIdleExpire());\n+  }\n+\n+  private void checkIdleTimeout(final long idleTimeoutMillis, long elapsedMillis) {\n+    Assert.assertTrue(\n+        \"Elapsed \" + elapsedMillis + \" is less than idle timeout \" + idleTimeoutMillis,\n+        elapsedMillis >= (idleTimeoutMillis - ALLOWABLE_ERROR_IN_MILLIS));\n+    Assert.assertTrue(\n+        \"Elapsed \" + elapsedMillis + \" is greater than idle timeout \" + idleTimeoutMillis,\n+        elapsedMillis <= (idleTimeoutMillis + ALLOWABLE_ERROR_IN_MILLIS));\n   }\n \n   @Test\n-  public void testBug41516() throws Exception {\n-    long idleTimeoutMillis = 300;\n+  public void testBug41516()\n+      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+    final long idleTimeoutMillis = 300;\n+    final long BORROW_TIMEOUT_MILLIS = 500;\n     manager =\n         new ConnectionManagerImpl(\"pool\", factory, endpointManager, 2, 1, idleTimeoutMillis, -1,\n             logger, 60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    long borrowTimeoutMillis = 500;\n-\n-    Connection connection1 = manager.borrowConnection(borrowTimeoutMillis);\n-    Connection connection2 = manager.borrowConnection(borrowTimeoutMillis);\n+    Connection conn1 = manager.borrowConnection(BORROW_TIMEOUT_MILLIS);\n+    Connection conn2 = manager.borrowConnection(BORROW_TIMEOUT_MILLIS);\n \n     // Return some connections, let them idle expire\n-    manager.returnConnection(connection1);\n-    manager.returnConnection(connection2);\n-\n-    long elapsedMillis = Timer.measure(() -> {\n-      await().untilAsserted(() -> {\n-        assertThat(factory.destroys.get()).isEqualTo(1);\n-        assertThat(factory.closes.get()).isEqualTo(1);\n-        assertThat(poolStats.getIdleExpire()).isEqualTo(1);\n-      });\n-    });\n-    assertThat(elapsedMillis)\n-        .as(\"elapsedMillis \" + elapsedMillis + \" + ALLOWABLE_ERROR_IN_MILLIS \"\n-            + ALLOWABLE_ERROR_IN_MILLIS)\n-        .isGreaterThanOrEqualTo(idleTimeoutMillis - ALLOWABLE_ERROR_IN_MILLIS);\n+    manager.returnConnection(conn1);\n+    manager.returnConnection(conn2);\n+\n+    {\n+      long elapsedMillis = factory.waitWhile(() -> factory.destroys < 1);\n+      Assert.assertEquals(1, factory.destroys);\n+      Assert.assertEquals(1, factory.closes);\n+      Assert.assertEquals(1, poolStats.getIdleExpire());\n+      Assert.assertTrue(\n+          \"Elapsed \" + elapsedMillis + \" is less than idle timeout \" + idleTimeoutMillis,\n+          elapsedMillis + ALLOWABLE_ERROR_IN_MILLIS >= idleTimeoutMillis);\n+    }\n \n     // Ok, now get some connections that fill our queue\n     Connection ping1 =\n-        manager.borrowConnection(new ServerLocation(\"localhost\", 5), borrowTimeoutMillis, false);\n+        manager.borrowConnection(new ServerLocation(\"localhost\", 5), BORROW_TIMEOUT_MILLIS, false);\n     Connection ping2 =\n-        manager.borrowConnection(new ServerLocation(\"localhost\", 5), borrowTimeoutMillis, false);\n+        manager.borrowConnection(new ServerLocation(\"localhost\", 5), BORROW_TIMEOUT_MILLIS, false);\n     manager.returnConnection(ping1);\n     manager.returnConnection(ping2);\n \n-    manager.borrowConnection(borrowTimeoutMillis);\n-    manager.borrowConnection(borrowTimeoutMillis);\n-\n-    elapsedMillis = Timer.measure(() -> {\n-      Throwable thrown = catchThrowable(() -> {\n-        manager.borrowConnection(borrowTimeoutMillis);\n-      });\n-      assertThat(thrown).isInstanceOf(AllConnectionsInUseException.class);\n-    });\n-    assertThat(elapsedMillis)\n-        .isGreaterThanOrEqualTo(borrowTimeoutMillis - ALLOWABLE_ERROR_IN_MILLIS);\n+    manager.borrowConnection(BORROW_TIMEOUT_MILLIS);\n+    manager.borrowConnection(BORROW_TIMEOUT_MILLIS);\n+    long startNanos = nowNanos();\n+    try {\n+      manager.borrowConnection(BORROW_TIMEOUT_MILLIS);\n+      fail(\"Didn't get an exception\");\n+    } catch (AllConnectionsInUseException e) {\n+      // expected\n+    }\n+    long elapsedMillis = elapsedMillis(startNanos);\n+    Assert.assertTrue(\"Elapsed = \" + elapsedMillis,\n+        elapsedMillis >= BORROW_TIMEOUT_MILLIS - ALLOWABLE_ERROR_IN_MILLIS);\n   }\n \n-  /**\n+  /*\n    * Test borrow connection toward specific server. Max connection is 5, and there are free\n    * connections in pool.\n    */\n   @Test\n-  public void test_borrow_connection_toward_specific_server_freeConnections() {\n-    long idleTimeoutMillis = 300;\n+  public void test_borrow_connection_toward_specific_server_freeConnections()\n+      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+    final long idleTimeoutMillis = 300;\n+    final long BORROW_TIMEOUT_MILLIS = 500;\n     manager =\n         new ConnectionManagerImpl(\"pool\", factory, endpointManager, 5, 1, idleTimeoutMillis, -1,\n             logger, 60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    await().untilAsserted(() -> assertThat(manager.getConnectionCount()).isOne());\n-\n-    long borrowTimeoutMillis = 500;\n+    await().until(() -> manager.getConnectionCount() == 1);\n \n     // seize connection toward any server\n-    manager.borrowConnection(borrowTimeoutMillis);\n-    manager.borrowConnection(borrowTimeoutMillis);\n+    Connection conn1 = manager.borrowConnection(BORROW_TIMEOUT_MILLIS);\n+    Connection conn2 = manager.borrowConnection(BORROW_TIMEOUT_MILLIS);\n+\n+    long startNanos = nowNanos();\n+    try {\n+      manager.borrowConnection(new ServerLocation(\"localhost\", 5), BORROW_TIMEOUT_MILLIS, false);\n+    } catch (AllConnectionsInUseException e) {\n+      fail(\"Didn't get connection\");\n+    }\n \n-    assertThatCode(() -> {\n-      manager.borrowConnection(new ServerLocation(\"localhost\", 5), borrowTimeoutMillis, false);\n-    }).doesNotThrowAnyException();\n   }\n \n-  /**\n+\n+  /*\n    * Test borrow connection toward specific server. Max connection is 5, and there is no free\n    * connections in pool.\n    * After connection is returned to pool, since is not toward this specific server, wait for\n"}}, {"oid": "3c7dde4cf0d3fa9da58d8e981df599e053eafc88", "url": "https://github.com/apache/geode/commit/3c7dde4cf0d3fa9da58d8e981df599e053eafc88", "message": "Revert geode-concurrency-test build changes", "committedDate": "2020-04-22T17:23:56Z", "type": "commit"}]}