{"pr_number": 4639, "pr_title": "GEODE-7728: Fix Assertion Failures in OQL", "pr_createdAt": "2020-01-28T11:53:02Z", "pr_url": "https://github.com/apache/geode/pull/4639", "timeline": [{"oid": "f23cea62bd2cd49f42fc4c8ffae190cb47bba384", "url": "https://github.com/apache/geode/commit/f23cea62bd2cd49f42fc4c8ffae190cb47bba384", "message": "GEODE-7728: Fix Assertion Failures in OQL\n\n- Added unit and integration tests.\n- Back off from the single index optimisation during join queries if\n  we can't find the (single) best filter, allowing the regular\n  execution to continue and use multiple indexes.\n- If there are multiple indexes, add the filter evaluable operand at\n  the beginning of the internal list to evaluate it first in the chain.", "committedDate": "2020-01-28T11:45:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjgwNQ==", "url": "https://github.com/apache/geode/pull/4639#discussion_r371956805", "bodyText": "Just a question, should this condition be on it's own and does it make sense to give it a score of 0?  Should these types of conditions be waited more heavily or considered \"better?\"  I'm ok with 0 just curious if you tried different cases out :-)", "author": "jhuynh1", "createdAt": "2020-01-28T17:44:29Z", "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "diffHunk": "@@ -296,7 +296,7 @@ public boolean isRangeEvaluatable() {\n   public int getSizeEstimate(ExecutionContext context) throws FunctionDomainException,\n       TypeMismatchException, NameResolutionException, QueryInvocationTargetException {\n     IndexInfo[] idxInfo = getIndexInfo(context);\n-    if (idxInfo == null) {\n+    if ((idxInfo == null) || (idxInfo.length > 1)) {", "originalCommit": "f23cea62bd2cd49f42fc4c8ffae190cb47bba384", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4MjA1MQ==", "url": "https://github.com/apache/geode/pull/4639#discussion_r372382051", "bodyText": "Good point, and I think you're right... having more than one index available for a CompiledComparison implies that both the left and right operands are indexed, so that case should have more \"weight\" when compared to an independent operator that would imply scanning the full region.\nWill make the changes and add some more tests, thanks for finding this!.", "author": "jujoramos", "createdAt": "2020-01-29T13:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNzkyOA==", "url": "https://github.com/apache/geode/pull/4639#discussion_r372427928", "bodyText": "Done!", "author": "jujoramos", "createdAt": "2020-01-29T14:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "97dfc084f47f278094d9be73abe0ef3d863cc751", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java b/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java\nindex 1d51764235..b76d7975dc 100644\n--- a/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java\n+++ b/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java\n\n@@ -296,15 +296,23 @@ public class CompiledComparison extends AbstractCompiledValue\n   public int getSizeEstimate(ExecutionContext context) throws FunctionDomainException,\n       TypeMismatchException, NameResolutionException, QueryInvocationTargetException {\n     IndexInfo[] idxInfo = getIndexInfo(context);\n-    if ((idxInfo == null) || (idxInfo.length > 1)) {\n-      // Asif: This implies it is an independent condition. So evaluate it first\n-      // in filter operand\n+\n+    // Both operands are indexed, evaluate it first in the filter operand.\n+    if (idxInfo != null && idxInfo.length > 1) {\n       return 0;\n     }\n+\n+    // Asif: This implies it is an independent condition. So evaluate it second in filter operand.\n+    if (idxInfo == null) {\n+      return 1;\n+    }\n+\n     assert idxInfo.length == 1;\n     Object key = idxInfo[0].evaluateIndexKey(context);\n+\n+    // Evaluate it second as we do with the independent condition if key was not found.\n     if (key != null && key.equals(QueryService.UNDEFINED)) {\n-      return 0;\n+      return 1;\n     }\n \n     if (context instanceof QueryExecutionContext) {\n"}}, {"oid": "97dfc084f47f278094d9be73abe0ef3d863cc751", "url": "https://github.com/apache/geode/commit/97dfc084f47f278094d9be73abe0ef3d863cc751", "message": "GEODE-7728: Improve weight calculation.", "committedDate": "2020-01-29T14:50:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNTYyOQ==", "url": "https://github.com/apache/geode/pull/4639#discussion_r375005629", "bodyText": "I think if the key is UNDEFINED and we have indexes present, the index actually has a mapping for UNDEFINED so the lookup should itself be really fast so 0 might be ok", "author": "jhuynh1", "createdAt": "2020-02-05T00:49:25Z", "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "diffHunk": "@@ -296,15 +296,23 @@ public boolean isRangeEvaluatable() {\n   public int getSizeEstimate(ExecutionContext context) throws FunctionDomainException,\n       TypeMismatchException, NameResolutionException, QueryInvocationTargetException {\n     IndexInfo[] idxInfo = getIndexInfo(context);\n-    if (idxInfo == null) {\n-      // Asif: This implies it is an independent condition. So evaluate it first\n-      // in filter operand\n+\n+    // Both operands are indexed, evaluate it first in the filter operand.\n+    if (idxInfo != null && idxInfo.length > 1) {\n       return 0;\n     }\n+\n+    // Asif: This implies it is an independent condition. So evaluate it second in filter operand.\n+    if (idxInfo == null) {\n+      return 1;\n+    }\n+\n     assert idxInfo.length == 1;\n     Object key = idxInfo[0].evaluateIndexKey(context);\n+\n+    // Evaluate it second as we do with the independent condition if key was not found.\n     if (key != null && key.equals(QueryService.UNDEFINED)) {\n-      return 0;\n+      return 1;", "originalCommit": "97dfc084f47f278094d9be73abe0ef3d863cc751", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0NjQwMw==", "url": "https://github.com/apache/geode/pull/4639#discussion_r375146403", "bodyText": "Changed! \ud83d\udc4d", "author": "jujoramos", "createdAt": "2020-02-05T09:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNTYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7130a4e081e9d860245fca98c7c897317af636ce", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java b/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java\nindex b76d7975dc..5c15366776 100644\n--- a/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java\n+++ b/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java\n\n@@ -310,9 +310,9 @@ public class CompiledComparison extends AbstractCompiledValue\n     assert idxInfo.length == 1;\n     Object key = idxInfo[0].evaluateIndexKey(context);\n \n-    // Evaluate it second as we do with the independent condition if key was not found.\n+    // Key not found (indexes have mapping for UNDEFINED), evaluation is fast so do it first.\n     if (key != null && key.equals(QueryService.UNDEFINED)) {\n-      return 1;\n+      return 0;\n     }\n \n     if (context instanceof QueryExecutionContext) {\n"}}, {"oid": "7130a4e081e9d860245fca98c7c897317af636ce", "url": "https://github.com/apache/geode/commit/7130a4e081e9d860245fca98c7c897317af636ce", "message": "GEODE-7728: Better weighting for UNDEFINED", "committedDate": "2020-02-05T09:34:18Z", "type": "commit"}, {"oid": "da8b66f7ef17f07a289ce714da8c75f53cb0a736", "url": "https://github.com/apache/geode/commit/da8b66f7ef17f07a289ce714da8c75f53cb0a736", "message": "GEODE-7728: Fix test.", "committedDate": "2020-02-05T09:52:43Z", "type": "commit"}]}