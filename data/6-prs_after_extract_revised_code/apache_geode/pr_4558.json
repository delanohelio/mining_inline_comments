{"pr_number": 4558, "pr_title": "GEODE-7585: Creating API for starting a locator in the membership package", "pr_createdAt": "2020-01-03T00:25:06Z", "pr_url": "https://github.com/apache/geode/pull/4558", "timeline": [{"oid": "be69850ef0534705574bf44050e4cb36927af056", "url": "https://github.com/apache/geode/commit/be69850ef0534705574bf44050e4cb36927af056", "message": "GEODE-7585: Creating an API for starting a locator in the membership package\n\nCreating a new MembershipLocator and MembershipLocatorBuilder that are used to\ncreate the membership locator. These classes encapsulate the TcpServer,\nPrimaryHandler, and GMSLocator that were previously held by InternalLocator.\n\nGetting rid of some intermdiate classes that wrapped the GMSLocator -\nNetLocator and GMSLocatorAdapter.\n\nRefactoring the restart logic out of PrimaryHandler. There is now a separate\nRestartHandler, and a separate collection that tracks RestartHandlers. Removing\nRestartableTcpHandler.", "committedDate": "2020-01-03T00:20:38Z", "type": "commit"}, {"oid": "faa5f2f5c9981953166f4d2835f8609480663f88", "url": "https://github.com/apache/geode/commit/faa5f2f5c9981953166f4d2835f8609480663f88", "message": "Removing TcpServerFactory.", "committedDate": "2020-01-03T00:41:56Z", "type": "commit"}, {"oid": "5e3ea6194f669893f10d75cb542fedb0b273212b", "url": "https://github.com/apache/geode/commit/5e3ea6194f669893f10d75cb542fedb0b273212b", "message": "Fixing integration test failures\n\nI moved the logic where the static Locator.hasLocator method is called. Some of\nthe tests were relying on this logic being in membership to realize that the\nmember was itself a locator. I changed those tests to specify that that are\nusing the LOCATOR_DM_TYPE.\n\nRemoving a call to restarting with a bunch of null fields. That call used to be\nthere and have no effect, but with the new RestartHandlers it was actually\npassing the nulls down.", "committedDate": "2020-01-03T18:40:42Z", "type": "commit"}, {"oid": "ee0ea118cd07c2b11cc22623d16ea9ba21822b24", "url": "https://github.com/apache/geode/commit/ee0ea118cd07c2b11cc22623d16ea9ba21822b24", "message": "Fixing more integration test failures\n\nRestoring the original location of the Locator.hasLocators check, but\necapsulating it in MembershipConfig.\n\nChanging the vm kind if Locator.hasLocator was true lead to additional\nintegration test failures.", "committedDate": "2020-01-03T23:41:25Z", "type": "commit"}, {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6", "url": "https://github.com/apache/geode/commit/52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6", "message": "Merge remote-tracking branch 'origin/develop' into feature/api-for-locator-GEODE-7585", "committedDate": "2020-01-04T00:00:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1MDg0NQ==", "url": "https://github.com/apache/geode/pull/4558#discussion_r363450845", "bodyText": "this looks a lot cleaner!", "author": "echobravopapa", "createdAt": "2020-01-06T19:41:47Z", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "diffHunk": "@@ -913,41 +944,7 @@ public void stop(boolean forcedDisconnect, boolean stopForReconnect, boolean wai\n       locatorDiscoverer = null;\n     }\n \n-    if (server.isAlive()) {\n-      logger.info(\"Stopping {}\", this);\n-      try {\n-        new TcpClient(\n-            asTcpSocketCreator(\n-                SocketCreatorFactory\n-                    .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n-            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n-            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n-                .stop(bindAddress, getPort());\n-      } catch (ConnectException ignore) {\n-        // must not be running\n-      }\n-\n-      boolean interrupted = Thread.interrupted();\n-      try {\n-        // TcpServer up to SHUTDOWN_WAIT_TIME for its executor pool to shut down.\n-        // We wait 2 * SHUTDOWN_WAIT_TIME here to account for that shutdown, and then our own.\n-        server.join(TcpServer.SHUTDOWN_WAIT_TIME * 2);\n-\n-      } catch (InterruptedException ex) {\n-        interrupted = true;\n-        logger.warn(\"Interrupted while stopping {}\", this, ex);\n-\n-        // Continue running -- doing our best to stop everything...\n-      } finally {\n-        if (interrupted) {\n-          Thread.currentThread().interrupt();\n-        }\n-      }\n-\n-      if (server.isAlive()) {\n-        logger.fatal(\"Could not stop {} in 60 seconds\", this);\n-      }\n-    }\n+    membershipLocator.stop();", "originalCommit": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1MTE5Mg==", "url": "https://github.com/apache/geode/pull/4558#discussion_r363451192", "bodyText": "How did this signal all the handlers before...?", "author": "echobravopapa", "createdAt": "2020-01-06T19:42:43Z", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "diffHunk": "@@ -1197,8 +1193,9 @@ private void restartWithSystem(InternalDistributedSystem newSystem, InternalCach\n     logger.info(\"Locator restart: initializing TcpServer\");\n \n     try {\n-      handler.restarting(newSystem, newCache, configurationPersistenceService);\n-      server.restarting();\n+      restartHandlers.forEach(", "originalCommit": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1NDYzNA==", "url": "https://github.com/apache/geode/pull/4558#discussion_r363454634", "bodyText": "The old handler variable was a PrimaryHandler, which broadcast the handler.restarting() call.", "author": "upthewaterspout", "createdAt": "2020-01-06T19:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1MTE5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1MzA5Mg==", "url": "https://github.com/apache/geode/pull/4558#discussion_r363453092", "bodyText": "inlining FTW!", "author": "echobravopapa", "createdAt": "2020-01-06T19:47:26Z", "path": "geode-tcp-server/src/distributedTest/java/org/apache/geode/distributed/internal/tcpserver/TcpServerJUnitTest.java", "diffHunk": "@@ -83,8 +89,20 @@ private void start(TcpHandler handler) throws IOException {\n     port = getNeverUsedPort();\n \n     stats = new SimpleStats();\n-    server = new TcpServerFactory().makeTcpServer(port, localhost, handler,\n-        stats, \"server thread\", null);\n+", "originalCommit": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8141fd3bdce2a4718eee637c3532f20e314decc0", "url": "https://github.com/apache/geode/commit/8141fd3bdce2a4718eee637c3532f20e314decc0", "message": "Merge remote-tracking branch 'origin/develop' into feature/api-for-locator-GEODE-7585", "committedDate": "2020-01-06T21:10:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4MzE4Mw==", "url": "https://github.com/apache/geode/pull/4558#discussion_r363483183", "bodyText": "What attributes are optional with this builder?   It looks like MembershipLocatorImpl will throw an NPE if a MembershipConfig isn't supplied.", "author": "bschuchardt", "createdAt": "2020-01-06T21:07:04Z", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipLocatorBuilderImpl.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.membership.gms;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Path;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorBuilder;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorStatistics;\n+import org.apache.geode.distributed.internal.membership.gms.locator.MembershipLocatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ProtocolChecker;\n+import org.apache.geode.distributed.internal.tcpserver.TcpHandler;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.internal.serialization.ObjectDeserializer;\n+import org.apache.geode.internal.serialization.ObjectSerializer;\n+\n+public final class MembershipLocatorBuilderImpl<ID extends MemberIdentifier> implements\n+    MembershipLocatorBuilder<ID> {\n+  private int port = 0;\n+  private InetAddress bindAddress = null;\n+  private ProtocolChecker protocolChecker = (socket, input, firstByte) -> false;\n+  private TcpHandler fallbackHandler = new TcpHandlerNoOp();\n+  private MembershipLocatorStatistics locatorStats = new MembershipLocatorStatisticsNoOp();\n+  private boolean locatorsAreCoordinators = true;\n+  private TcpSocketCreator socketCreator;\n+  private ObjectSerializer objectSerializer;\n+  private ObjectDeserializer objectDeserializer;\n+  private Path workingDirectory;\n+  private MembershipConfig config;\n+  private Supplier<ExecutorService> executorServiceSupplier;\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setPort(int port) {\n+    this.port = port;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setBindAddress(InetAddress bindAddress) {\n+    this.bindAddress = bindAddress;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setProtocolChecker(ProtocolChecker protocolChecker) {\n+    this.protocolChecker = protocolChecker;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setExecutorServiceSupplier(\n+      Supplier<ExecutorService> executorServiceSupplier) {\n+    this.executorServiceSupplier = executorServiceSupplier;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setSocketCreator(TcpSocketCreator socketCreator) {\n+    this.socketCreator = socketCreator;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setObjectSerializer(ObjectSerializer objectSerializer) {\n+    this.objectSerializer = objectSerializer;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setObjectDeserializer(ObjectDeserializer objectDeserializer) {\n+    this.objectDeserializer = objectDeserializer;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setFallbackHandler(TcpHandler fallbackHandler) {\n+    this.fallbackHandler = fallbackHandler;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setLocatorsAreCoordinators(boolean locatorsAreCoordinators) {\n+    this.locatorsAreCoordinators = locatorsAreCoordinators;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setLocatorStats(MembershipLocatorStatistics locatorStats) {\n+    this.locatorStats = locatorStats;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setWorkingDirectory(Path workingDirectory) {\n+    this.workingDirectory = workingDirectory;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setConfig(MembershipConfig config) {", "originalCommit": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4OTA1Mw==", "url": "https://github.com/apache/geode/pull/4558#discussion_r363489053", "bodyText": "Anything that doesn't have a default is required. Are you suggesting some additional documentation or other way of indicating what attributes are optional?", "author": "upthewaterspout", "createdAt": "2020-01-06T21:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4MzE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUxNjE5OA==", "url": "https://github.com/apache/geode/pull/4558#discussion_r363516198", "bodyText": "I guess it would be less error prone if the builder constructor took all of the required settings and then you could set the optional ones with setXYZ() methods.", "author": "bschuchardt", "createdAt": "2020-01-06T22:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4MzE4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NTAzMg==", "url": "https://github.com/apache/geode/pull/4558#discussion_r363485032", "bodyText": "NPE here if no config is supplied.", "author": "bschuchardt", "createdAt": "2020-01-06T21:11:58Z", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/MembershipLocatorImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.membership.gms.locator;\n+\n+\n+import java.io.IOException;\n+import java.net.ConnectException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Path;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.Membership;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorStatistics;\n+import org.apache.geode.distributed.internal.tcpserver.ProtocolChecker;\n+import org.apache.geode.distributed.internal.tcpserver.TcpClient;\n+import org.apache.geode.distributed.internal.tcpserver.TcpHandler;\n+import org.apache.geode.distributed.internal.tcpserver.TcpServer;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.internal.inet.LocalHostUtil;\n+import org.apache.geode.internal.serialization.ObjectDeserializer;\n+import org.apache.geode.internal.serialization.ObjectSerializer;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.util.internal.GeodeGlossary;\n+\n+public class MembershipLocatorImpl<ID extends MemberIdentifier> implements MembershipLocator<ID> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  private final TcpServer server;\n+  /**\n+   * the TcpHandler used for peer location\n+   */\n+  private final PrimaryHandler handler;\n+  private final GMSLocator<ID> gmsLocator;\n+  private final TcpClient locatorClient;\n+\n+  public MembershipLocatorImpl(int port, InetAddress bindAddress,\n+      ProtocolChecker protocolChecker,\n+      Supplier<ExecutorService> executorServiceSupplier,\n+      TcpSocketCreator socketCreator, ObjectSerializer objectSerializer,\n+      ObjectDeserializer objectDeserializer,\n+      TcpHandler fallbackHandler,\n+      boolean locatorsAreCoordinators,\n+      MembershipLocatorStatistics locatorStats, Path workingDirectory,\n+      MembershipConfig config)\n+      throws MembershipConfigurationException, UnknownHostException {\n+    handler = new PrimaryHandler(fallbackHandler, config.getLocatorWaitTime());\n+    String host = bindAddress == null ? LocalHostUtil.getLocalHost().getHostName()\n+        : bindAddress.getHostName();\n+    String threadName = \"Distribution Locator on \" + host + \": \" + port;\n+\n+    this.server = new TcpServer(port, bindAddress, handler,\n+        threadName, protocolChecker,\n+        locatorStats::getStatTime,\n+        executorServiceSupplier,\n+        socketCreator,\n+        objectSerializer,\n+        objectDeserializer,\n+        GeodeGlossary.GEMFIRE_PREFIX + \"TcpServer.READ_TIMEOUT\",\n+        GeodeGlossary.GEMFIRE_PREFIX + \"TcpServer.BACKLOG\");\n+\n+    locatorClient = new TcpClient(socketCreator,\n+        objectSerializer,\n+        objectDeserializer);\n+    gmsLocator =\n+        new GMSLocator<>(bindAddress, config.getLocators(), locatorsAreCoordinators,\n+            config.isNetworkPartitionDetectionEnabled(),", "originalCommit": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}