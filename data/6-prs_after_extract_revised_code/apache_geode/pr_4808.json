{"pr_number": 4808, "pr_title": "GEODE-7710: Fix race condition in sending JMX notifications", "pr_createdAt": "2020-03-13T20:38:02Z", "pr_url": "https://github.com/apache/geode/pull/4808", "timeline": [{"oid": "5d4c047e622a5f9c1fea078a117829e46585ba7e", "url": "https://github.com/apache/geode/commit/5d4c047e622a5f9c1fea078a117829e46585ba7e", "message": "GEODE-7710: Fix race condition in sending JMX notifications\n\nJMX Manager may fail to broadcast one or more JMX notifications\nduring startup because of a race condition involving FederatingManager\nand NotificationCacheListener.\n\nChange NotificationCacheListener to be ready upon construction.", "committedDate": "2020-03-13T20:38:14Z", "type": "forcePushed"}, {"oid": "2040d05c79495b38855e167fcf7ae0486ba77e1b", "url": "https://github.com/apache/geode/commit/2040d05c79495b38855e167fcf7ae0486ba77e1b", "message": "GEODE-7710: Fix race condition in sending JMX notifications\n\nJMX Manager may fail to broadcast one or more JMX notifications\nduring startup because of a race condition involving FederatingManager\nand NotificationCacheListener.\n\nChange NotificationCacheListener to be ready upon construction.", "committedDate": "2020-03-13T22:57:02Z", "type": "forcePushed"}, {"oid": "6d6b036b1ae0574835c1a1a248c4b55b1029a338", "url": "https://github.com/apache/geode/commit/6d6b036b1ae0574835c1a1a248c4b55b1029a338", "message": "GEODE-7710: Fix race condition in sending JMX notifications\n\nJMX Manager may fail to broadcast one or more JMX notifications\nduring startup because of a race condition involving FederatingManager\nand NotificationCacheListener.\n\nChange NotificationCacheListener to be ready upon construction.", "committedDate": "2020-03-16T16:17:36Z", "type": "forcePushed"}, {"oid": "ca21b9c5806c2f3459c670843c8242a72a5e220a", "url": "https://github.com/apache/geode/commit/ca21b9c5806c2f3459c670843c8242a72a5e220a", "message": "GEODE-7710: Fix race condition in sending JMX notifications\n\nJMX Manager may fail to broadcast one or more JMX notifications\nduring startup because of a race condition involving FederatingManager\nand NotificationCacheListener.\n\nChange NotificationCacheListener to be ready upon construction.", "committedDate": "2020-03-16T16:38:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyODQwNg==", "url": "https://github.com/apache/geode/pull/4808#discussion_r393228406", "bodyText": "I would like to see a description of the purpose and the approach of these tests.", "author": "mhansonp", "createdAt": "2020-03-16T18:24:38Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MultipleManagersRegressionTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.geode.management;\n+\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static java.util.Arrays.asList;\n+import static javax.management.ObjectName.getInstance;\n+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_PORT;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_START;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.apache.geode.distributed.ConfigurationProperties.MEMBER_TIMEOUT;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPorts;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.apache.geode.test.dunit.VM.getVMId;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.distributed.LocatorLauncher;\n+import org.apache.geode.distributed.internal.InternalLocator;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.dunit.rules.SharedErrorCollector;\n+import org.apache.geode.test.junit.categories.JMXTest;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;\n+", "originalCommit": "ca21b9c5806c2f3459c670843c8242a72a5e220a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NTMzNA==", "url": "https://github.com/apache/geode/pull/4808#discussion_r393295334", "bodyText": "I've deleted MultipleManagersRegressionTest because it's redundant with coverage in JMXMBeanReconnectDUnitTest", "author": "kirklund", "createdAt": "2020-03-16T20:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyODQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "fd4159d8dc7db5a1700f2130dd017e2debf26e6e", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/management/MultipleManagersRegressionTest.java b/geode-core/src/distributedTest/java/org/apache/geode/management/MultipleManagersRegressionTest.java\ndeleted file mode 100644\nindex 97652d0210..0000000000\n--- a/geode-core/src/distributedTest/java/org/apache/geode/management/MultipleManagersRegressionTest.java\n+++ /dev/null\n\n@@ -1,191 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.geode.management;\n-\n-import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n-import static java.util.Arrays.asList;\n-import static javax.management.ObjectName.getInstance;\n-import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_PORT;\n-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER;\n-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;\n-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_START;\n-import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n-import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;\n-import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n-import static org.apache.geode.distributed.ConfigurationProperties.MEMBER_TIMEOUT;\n-import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPorts;\n-import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n-import static org.apache.geode.test.dunit.VM.getVM;\n-import static org.apache.geode.test.dunit.VM.getVMId;\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n-\n-import java.io.File;\n-import java.io.Serializable;\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import javax.management.MalformedObjectNameException;\n-import javax.management.ObjectName;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.experimental.categories.Category;\n-\n-import org.apache.geode.distributed.LocatorLauncher;\n-import org.apache.geode.distributed.internal.InternalLocator;\n-import org.apache.geode.test.dunit.VM;\n-import org.apache.geode.test.dunit.rules.DistributedRule;\n-import org.apache.geode.test.dunit.rules.SharedErrorCollector;\n-import org.apache.geode.test.junit.categories.JMXTest;\n-import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;\n-\n-@Category(JMXTest.class)\n-@SuppressWarnings(\"serial\")\n-public class MultipleManagersRegressionTest implements Serializable {\n-\n-  private static final LocatorLauncher DUMMY_LOCATOR = mock(LocatorLauncher.class);\n-\n-  private static final AtomicReference<LocatorLauncher> LOCATOR =\n-      new AtomicReference<>(DUMMY_LOCATOR);\n-\n-  private VM locator1VM;\n-  private VM locator2VM;\n-\n-  private String locator1Name;\n-  private String locator2Name;\n-  private String locators;\n-  private int locator1Port;\n-  private int locator2Port;\n-  private int locator1JmxPort;\n-  private int locator2JmxPort;\n-\n-  @Rule\n-  public DistributedRule distributedRule = new DistributedRule();\n-  @Rule\n-  public SerializableTemporaryFolder temporaryFolder = new SerializableTemporaryFolder();\n-  @Rule\n-  public SharedErrorCollector errorCollector = new SharedErrorCollector();\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    locator1VM = getVM(1);\n-    locator2VM = getVM(-1);\n-\n-    locator1Name = \"locator1\";\n-    locator2Name = \"locator2\";\n-    File locator1Dir = temporaryFolder.newFolder(locator1Name);\n-    File locator2Dir = temporaryFolder.newFolder(locator2Name);\n-\n-    int[] port = getRandomAvailableTCPPorts(4);\n-    locator1Port = port[0];\n-    locator2Port = port[1];\n-    locator1JmxPort = port[2];\n-    locator2JmxPort = port[3];\n-    locators = \"localhost[\" + locator1Port + \"],localhost[\" + locator2Port + \"]\";\n-\n-    locator1VM.invoke(() -> {\n-      startLocator(locator1Name, locator1Dir, locator1Port, locator1JmxPort, locators);\n-    });\n-    locator2VM.invoke(() -> {\n-      startLocator(locator2Name, locator2Dir, locator2Port, locator2JmxPort, locators);\n-    });\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    for (VM vm : asList(locator2VM, locator1VM)) {\n-      vm.invoke(() -> {\n-        LOCATOR.getAndSet(DUMMY_LOCATOR).stop();\n-      });\n-    }\n-  }\n-\n-  @Test\n-  public void locatorHasMemberTypeMXBeansForBothLocators() {\n-    locator1VM.invoke(() -> {\n-      await().untilAsserted(() -> {\n-        assertThat(getPlatformMBeanServer().queryNames(getInstance(\"GemFire:*\"), null))\n-            .as(\"GemFire mbeans on locator-\" + getVMId())\n-            .containsAll(expectedLocatorMXBeans(locator1Name))\n-            .containsAll(expectedLocatorMXBeans(locator2Name))\n-            .containsAll(expectedDistributedMXBeans());\n-      });\n-    });\n-\n-    locator2VM.invoke(() -> {\n-      await().untilAsserted(() -> {\n-        assertThat(getPlatformMBeanServer().queryNames(getInstance(\"GemFire:*\"), null))\n-            .as(\"GemFire mbeans on locator-\" + getVMId())\n-            .containsAll(expectedLocatorMXBeans(locator2Name))\n-            .containsAll(expectedLocatorMXBeans(locator1Name))\n-            .containsAll(expectedDistributedMXBeans());\n-      });\n-    });\n-  }\n-\n-  private static void startLocator(String name, File workingDirectory, int locatorPort, int jmxPort,\n-      String locators) {\n-    LOCATOR.set(new LocatorLauncher.Builder()\n-        .setDeletePidFileOnStop(true)\n-        .setMemberName(name)\n-        .setPort(locatorPort)\n-        .setWorkingDirectory(workingDirectory.getAbsolutePath())\n-        .set(HTTP_SERVICE_PORT, \"0\")\n-        .set(JMX_MANAGER, \"true\")\n-        .set(JMX_MANAGER_PORT, String.valueOf(jmxPort))\n-        .set(JMX_MANAGER_START, \"true\")\n-        .set(LOCATORS, locators)\n-        .set(LOG_FILE, new File(workingDirectory, name + \".log\").getAbsolutePath())\n-        .set(MAX_WAIT_TIME_RECONNECT, \"1000\")\n-        .set(MEMBER_TIMEOUT, \"2000\")\n-        .build());\n-\n-    LOCATOR.get().start();\n-\n-    await().untilAsserted(() -> {\n-      InternalLocator locator = (InternalLocator) LOCATOR.get().getLocator();\n-      assertThat(locator.isSharedConfigurationRunning())\n-          .as(\"Locator shared configuration is running on locator-\" + getVMId())\n-          .isTrue();\n-    });\n-  }\n-\n-  private static Set<ObjectName> expectedLocatorMXBeans(String memberName)\n-      throws MalformedObjectNameException {\n-    return new HashSet<>(asList(\n-        getInstance(\"GemFire:service=DiskStore,name=cluster_config,type=Member,member=\" +\n-            memberName),\n-        getInstance(\"GemFire:service=Locator,type=Member,member=\" + memberName),\n-        getInstance(\"GemFire:service=LockService,name=__CLUSTER_CONFIG_LS,type=Member,member=\" +\n-            memberName),\n-        getInstance(\"GemFire:type=Member,member=\" + memberName),\n-        getInstance(\"GemFire:service=Manager,type=Member,member=\" + memberName)));\n-  }\n-\n-  private static Set<ObjectName> expectedDistributedMXBeans()\n-      throws MalformedObjectNameException {\n-    return new HashSet<>(asList(\n-        getInstance(\"GemFire:service=AccessControl,type=Distributed\"),\n-        getInstance(\"GemFire:service=FileUploader,type=Distributed\"),\n-        getInstance(\"GemFire:service=LockService,name=__CLUSTER_CONFIG_LS,type=Distributed\"),\n-        getInstance(\"GemFire:service=System,type=Distributed\")));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyOTYxMQ==", "url": "https://github.com/apache/geode/pull/4808#discussion_r393229611", "bodyText": "I would like to see a description of the purpose and the approach of these tests.", "author": "mhansonp", "createdAt": "2020-03-16T18:26:46Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/ManagementCacheListenerTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal;\n+\n+import static org.apache.geode.internal.cache.util.UncheckedUtils.cast;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.same;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.mockito.quality.Strictness;\n+\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.distributed.DistributedMember;\n+", "originalCommit": "ca21b9c5806c2f3459c670843c8242a72a5e220a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODUxOQ==", "url": "https://github.com/apache/geode/pull/4808#discussion_r393298519", "bodyText": "ManagementCacheListenerTest is part of #4807. It's duplicated in this PR only because #4808 builds upon #4807 and because Geode dev community no longer wants to allow a PR to have multiple commits.", "author": "kirklund", "createdAt": "2020-03-16T20:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyOTYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd4159d8dc7db5a1700f2130dd017e2debf26e6e", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/management/internal/ManagementCacheListenerTest.java b/geode-core/src/test/java/org/apache/geode/management/internal/ManagementCacheListenerTest.java\nindex a3e54e6d62..1564331c32 100644\n--- a/geode-core/src/test/java/org/apache/geode/management/internal/ManagementCacheListenerTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/management/internal/ManagementCacheListenerTest.java\n\n@@ -37,6 +37,11 @@ import org.apache.geode.cache.EntryEvent;\n import org.apache.geode.cache.Region;\n import org.apache.geode.distributed.DistributedMember;\n \n+/**\n+ * Unit tests for {@link ManagementCacheListener} (ie the SUT). These are characterization tests\n+ * that define behavior for an existing class. Test method names specify the SUT method, the result\n+ * of invoking that method, and whether or not there are any specific preconditions.\n+ */\n public class ManagementCacheListenerTest {\n \n   private static final String OBJECT_NAME_KEY =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMDAwNg==", "url": "https://github.com/apache/geode/pull/4808#discussion_r393230006", "bodyText": "I would like to see a description of the purpose and the approach of these tests.", "author": "mhansonp", "createdAt": "2020-03-16T18:27:31Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/NotificationCacheListenerTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal;\n+\n+import static org.apache.geode.internal.cache.util.UncheckedUtils.cast;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+import javax.management.Notification;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.mockito.quality.Strictness;\n+\n+import org.apache.geode.cache.EntryEvent;\n+", "originalCommit": "ca21b9c5806c2f3459c670843c8242a72a5e220a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNDIzNA==", "url": "https://github.com/apache/geode/pull/4808#discussion_r393304234", "bodyText": "Java description has been added to each unit test class.", "author": "kirklund", "createdAt": "2020-03-16T20:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMDAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "fd4159d8dc7db5a1700f2130dd017e2debf26e6e", "chunk": "diff --git a/geode-core/src/test/java/org/apache/geode/management/internal/NotificationCacheListenerTest.java b/geode-core/src/test/java/org/apache/geode/management/internal/NotificationCacheListenerTest.java\nindex 8dce3b1902..151f5fe605 100644\n--- a/geode-core/src/test/java/org/apache/geode/management/internal/NotificationCacheListenerTest.java\n+++ b/geode-core/src/test/java/org/apache/geode/management/internal/NotificationCacheListenerTest.java\n\n@@ -29,6 +29,11 @@ import org.mockito.quality.Strictness;\n \n import org.apache.geode.cache.EntryEvent;\n \n+/**\n+ * Unit tests for {@link NotificationCacheListener} (ie the SUT). These are characterization tests\n+ * that define behavior for an existing class. Test method names specify the SUT method and the\n+ * result of invoking that method.\n+ */\n public class NotificationCacheListenerTest {\n \n   private NotificationHubClient notificationHubClient;\n"}}, {"oid": "fd4159d8dc7db5a1700f2130dd017e2debf26e6e", "url": "https://github.com/apache/geode/commit/fd4159d8dc7db5a1700f2130dd017e2debf26e6e", "message": "Add javadoc description to NotificationCacheListenerTest", "committedDate": "2020-03-16T20:49:48Z", "type": "forcePushed"}, {"oid": "ac254296355e5f67f5b3e27d52a4f533c07c8d32", "url": "https://github.com/apache/geode/commit/ac254296355e5f67f5b3e27d52a4f533c07c8d32", "message": "GEODE-7710: Fix race condition in sending JMX notifications\n\nJMX Manager may fail to broadcast one or more JMX notifications\nduring startup because of a race condition involving FederatingManager\nand NotificationCacheListener.\n\nChange NotificationCacheListener to be ready upon construction.", "committedDate": "2020-03-17T16:13:02Z", "type": "commit"}, {"oid": "ac254296355e5f67f5b3e27d52a4f533c07c8d32", "url": "https://github.com/apache/geode/commit/ac254296355e5f67f5b3e27d52a4f533c07c8d32", "message": "GEODE-7710: Fix race condition in sending JMX notifications\n\nJMX Manager may fail to broadcast one or more JMX notifications\nduring startup because of a race condition involving FederatingManager\nand NotificationCacheListener.\n\nChange NotificationCacheListener to be ready upon construction.", "committedDate": "2020-03-17T16:13:02Z", "type": "forcePushed"}]}