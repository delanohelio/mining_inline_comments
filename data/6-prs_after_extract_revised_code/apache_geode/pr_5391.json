{"pr_number": 5391, "pr_title": "GEODE-7846: Adding Stats for Partitioned Region Clear", "pr_createdAt": "2020-07-21T21:17:34Z", "pr_url": "https://github.com/apache/geode/pull/5391", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwMTA2NQ==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459601065", "bodyText": "I feel like the calls to incClearCount() and incClearDuration() should be made at the same time, since there should be a consistent approach to when a clear is \"done.\"", "author": "DonalEvans", "createdAt": "2020-07-23T17:10:01Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -162,6 +162,7 @@ protected void waitForPrimary(PartitionedRegion.RetryTimeKeeper retryTimer) {\n         doAfterClear(regionEvent);\n       }\n     }\n+    incClearCount();", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxODYzMg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461218632", "bodyText": "This is part of a larger discussion about what we're actually trying to record with the duration. It's something Gester and I have touched on in the operations standup and I'll probably put something up regarding it in the slack channel but basically the duration in the initial version (the one you commented on) was measuring the total duration of the entire clear operation from the perspective of the coordinator. The way it's been changed to (in line with your suggestion) is to move it into the actual local clear. This makes the stat present on all members which have the region (as long as they have data) but it means that this value ONLY captures the actual process of clearing the region and not any of the stuff that happens in between (messaging, any work done on the coordinator other than the local clear, etc). For now it's been changed to something that matches with your thought process here, but if you have ideas on this I would love to hear them.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwMTA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\nindex bdf5d43f0e..ccd8dab759 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n\n@@ -156,13 +157,17 @@ public class PartitionedRegionClear {\n           doAfterClear(regionEvent);\n         } finally {\n           partitionedRegion.getDataStore().unlockBucketCreationForRegionClear();\n+          if (clearedBuckets.size() != 0) {\n+            partitionedRegion.getCachePerfStats().incRegionClearCount();\n+            partitionedRegion.getCachePerfStats()\n+                .incPartitionedRegionClearLocalDuration(System.nanoTime() - clearStartTime);\n+          }\n         }\n       } else {\n         // Non data-store with client queue and listener\n         doAfterClear(regionEvent);\n       }\n     }\n-    incClearCount();\n     return clearedBuckets;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwMjk1NA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459602954", "bodyText": "If the name of this statistic is changed, then geode-docs/reference/statistics_list.html.md.erb should be updated to reflect the new name. Also, it might be good to document the newly added statistics too.", "author": "DonalEvans", "createdAt": "2020-07-23T17:13:12Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java", "diffHunk": "@@ -442,7 +451,10 @@\n             f.createIntCounter(\"retries\",\n                 \"Number of times a concurrent destroy followed by a create has caused an entry operation to need to retry.\",\n                 \"operations\"),\n-            f.createLongCounter(\"clears\", clearsDesc, \"operations\"),\n+            f.createLongCounter(\"regionClears\", regionClearsDesc, \"operations\"),", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxODg2NA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461218864", "bodyText": "Agreed. I recall there was a documentation story for PR clear, but I'm not sure what happened to it. I'll hunt it down and if this documentation isn't covered by it I'll make sure to add it to this PR.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwMjk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java b/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java\nindex 94fcfeb438..5851b3fbe0 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java\n\n@@ -453,8 +455,10 @@ public class CachePerfStats {\n                 \"operations\"),\n             f.createLongCounter(\"regionClears\", regionClearsDesc, \"operations\"),\n             f.createLongCounter(\"bucketClears\", bucketClearsDesc, \"operations\"),\n-            f.createLongCounter(\"partitionedRegionClearDuration\",\n-                partitionedRegionClearDurationDesc, \"nanoseconds\"),\n+            f.createLongCounter(\"partitionedRegionClearLocalDuration\",\n+                partitionedRegionClearLocalDurationDesc, \"nanoseconds\"),\n+            f.createLongCounter(\"partitionedRegionClearTotalDuration\",\n+                partitionedRegionClearTotalDurationDesc, \"nanoseconds\"),\n             f.createIntGauge(\"diskTasksWaiting\",\n                 \"Current number of disk tasks (oplog compactions, asynchronous recoveries, etc) that are waiting for a thread to run the operation\",\n                 \"operations\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNTQ4OA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459605488", "bodyText": "Remove this logging.", "author": "DonalEvans", "createdAt": "2020-07-23T17:17:26Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -367,12 +370,38 @@ void doClear(RegionEventImpl regionEvent, boolean cacheWrite) {\n           releaseLockForClear(regionEvent);\n         }\n       }\n-\n     } finally {\n       releaseDistributedClearLock(lockName);\n+      incClearDuration(System.nanoTime() - clearStartTime);\n+    }\n+  }\n+\n+  void incClearCount() {\n+    if (partitionedRegion != null && partitionedRegion.getDataStore() != null\n+        && partitionedRegion.getDataStore().getAllLocalBucketRegions() != null\n+        && partitionedRegion.getDataStore().getAllLocalBucketRegions().size() != 0) {\n+      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n+      if (stats != null) {\n+        logger.info(\"BR inc PR Region count:\" + stats.getClass().getName() + \":\"", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxODkxOA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461218918", "bodyText": "Done", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNTQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\nindex bdf5d43f0e..ccd8dab759 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n\n@@ -372,36 +377,13 @@ public class PartitionedRegionClear {\n       }\n     } finally {\n       releaseDistributedClearLock(lockName);\n-      incClearDuration(System.nanoTime() - clearStartTime);\n-    }\n-  }\n-\n-  void incClearCount() {\n-    if (partitionedRegion != null && partitionedRegion.getDataStore() != null\n-        && partitionedRegion.getDataStore().getAllLocalBucketRegions() != null\n-        && partitionedRegion.getDataStore().getAllLocalBucketRegions().size() != 0) {\n-      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n-      if (stats != null) {\n-        logger.info(\"BR inc PR Region count:\" + stats.getClass().getName() + \":\"\n-            + partitionedRegion.getFullPath(), new Exception());\n-        stats.incClearCount();\n-      }\n-    }\n-  }\n-\n-  void incClearDuration(long durationNanos) {\n-    if (partitionedRegion != null && partitionedRegion.getTotalNumberOfBuckets() != 0) {\n-      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n-      if (stats != null) {\n-        logger.info(\"BR inc PR Duration by + \" + durationNanos + \" ns:\" + stats.getClass().getName()\n-            + \":\" + partitionedRegion.getFullPath(), new Exception());\n-        stats.incPartitionedRegionClearDuration(durationNanos);\n+      if (partitionedRegion != null) {\n+        partitionedRegion.getCachePerfStats()\n+            .incPartitionedRegionClearTotalDuration(System.nanoTime() - clearStartTime);\n       }\n     }\n   }\n \n-\n-\n   protected void invokeCacheWriter(RegionEventImpl regionEvent) {\n     try {\n       partitionedRegion.cacheWriteBeforeRegionClear(regionEvent);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNTYwMg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459605602", "bodyText": "Remove this logging.", "author": "DonalEvans", "createdAt": "2020-07-23T17:17:37Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -367,12 +370,38 @@ void doClear(RegionEventImpl regionEvent, boolean cacheWrite) {\n           releaseLockForClear(regionEvent);\n         }\n       }\n-\n     } finally {\n       releaseDistributedClearLock(lockName);\n+      incClearDuration(System.nanoTime() - clearStartTime);\n+    }\n+  }\n+\n+  void incClearCount() {\n+    if (partitionedRegion != null && partitionedRegion.getDataStore() != null\n+        && partitionedRegion.getDataStore().getAllLocalBucketRegions() != null\n+        && partitionedRegion.getDataStore().getAllLocalBucketRegions().size() != 0) {\n+      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n+      if (stats != null) {\n+        logger.info(\"BR inc PR Region count:\" + stats.getClass().getName() + \":\"\n+            + partitionedRegion.getFullPath(), new Exception());\n+        stats.incClearCount();\n+      }\n     }\n   }\n \n+  void incClearDuration(long durationNanos) {\n+    if (partitionedRegion != null && partitionedRegion.getTotalNumberOfBuckets() != 0) {\n+      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n+      if (stats != null) {\n+        logger.info(\"BR inc PR Duration by + \" + durationNanos + \" ns:\" + stats.getClass().getName()", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxODk3OQ==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461218979", "bodyText": "Done.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\nindex bdf5d43f0e..ccd8dab759 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n\n@@ -372,36 +377,13 @@ public class PartitionedRegionClear {\n       }\n     } finally {\n       releaseDistributedClearLock(lockName);\n-      incClearDuration(System.nanoTime() - clearStartTime);\n-    }\n-  }\n-\n-  void incClearCount() {\n-    if (partitionedRegion != null && partitionedRegion.getDataStore() != null\n-        && partitionedRegion.getDataStore().getAllLocalBucketRegions() != null\n-        && partitionedRegion.getDataStore().getAllLocalBucketRegions().size() != 0) {\n-      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n-      if (stats != null) {\n-        logger.info(\"BR inc PR Region count:\" + stats.getClass().getName() + \":\"\n-            + partitionedRegion.getFullPath(), new Exception());\n-        stats.incClearCount();\n-      }\n-    }\n-  }\n-\n-  void incClearDuration(long durationNanos) {\n-    if (partitionedRegion != null && partitionedRegion.getTotalNumberOfBuckets() != 0) {\n-      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n-      if (stats != null) {\n-        logger.info(\"BR inc PR Duration by + \" + durationNanos + \" ns:\" + stats.getClass().getName()\n-            + \":\" + partitionedRegion.getFullPath(), new Exception());\n-        stats.incPartitionedRegionClearDuration(durationNanos);\n+      if (partitionedRegion != null) {\n+        partitionedRegion.getCachePerfStats()\n+            .incPartitionedRegionClearTotalDuration(System.nanoTime() - clearStartTime);\n       }\n     }\n   }\n \n-\n-\n   protected void invokeCacheWriter(RegionEventImpl regionEvent) {\n     try {\n       partitionedRegion.cacheWriteBeforeRegionClear(regionEvent);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwOTI0OA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459609248", "bodyText": "I'm not sure that all these null checks are required. I would think that if the region is null at this point, then we would expect that something has gone wrong and that we should throw an exception rather than just silently not incrementing the stats. Also, I'm not sure I understand why we only increment the stats if getAllLocalBucketRegions() returns a non-empty set. Are there scenarios where we could call clear, it could complete without an exception, bringing us to this method, and then getAllLocalBucketRegions() returns empty?", "author": "DonalEvans", "createdAt": "2020-07-23T17:24:08Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -367,12 +370,38 @@ void doClear(RegionEventImpl regionEvent, boolean cacheWrite) {\n           releaseLockForClear(regionEvent);\n         }\n       }\n-\n     } finally {\n       releaseDistributedClearLock(lockName);\n+      incClearDuration(System.nanoTime() - clearStartTime);\n+    }\n+  }\n+\n+  void incClearCount() {\n+    if (partitionedRegion != null && partitionedRegion.getDataStore() != null\n+        && partitionedRegion.getDataStore().getAllLocalBucketRegions() != null\n+        && partitionedRegion.getDataStore().getAllLocalBucketRegions().size() != 0) {", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDUwNg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461220506", "bodyText": "Checking that the partitioned region is non null might be overkill, but the others are needed to determine whether or not this member has data. If there's no data on the member then no clear is actually taking place and we don't want to log a count. I added this many checks because I saw inconsistent behavior in my tests where sometimes the PR would have a list which was empty, sometimes it would have a list which was null for my Accessor. I don't think it's necessary to throw an exception in this case.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNDMyNA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461234324", "bodyText": "Might it be possible to instead move the call to this method (and incClearDuration(), if it ends up staying where it currently is) inside the if (partitionedRegion.getDataStore() != null) block in clearRegionLocal(), just after the doAfterClear(), and guarded with a check on the size of clearedBuckets? i.e. if no buckets are cleared, do not increment the stats? That should avoid having to do quite so much checking in the method itself and instead place the focus on calling it in the appropriate place, where it will always increment the stats.", "author": "DonalEvans", "createdAt": "2020-07-27T23:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzODc2Mw==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461238763", "bodyText": "It could, but that pattern would have to be followed if this clear count was ever incremented from anywhere else in the code base, as it would be reliant upon being called within a conditional. Is that preferable? Personally, I feel like having the conditions - while a little messy - communicates the requirements of the method pretty clearly and while I wouldn't necessarily promote that approach for a more complex method which is already very busy with functionality, this method is simple enough to read even with the conditions. Aside from that I think what you're suggesting is certainly possible.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-28T00:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxMjYzNg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461712636", "bodyText": "If all the checks were removed from the method, then it would turn into just 'partitionedRegion.getCachePerfStats().incRegionClearCount()` which could be called inline rather than having a separate method, especially considering that it's only called once. Looking at how other stats are incremented, this pattern of directly calling the method on the stats class inline when it's appropriate to do so seems to be used almost everywhere, and using it here would simplify the class a fair bit.", "author": "DonalEvans", "createdAt": "2020-07-28T16:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwOTI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\nindex bdf5d43f0e..ccd8dab759 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n\n@@ -372,36 +377,13 @@ public class PartitionedRegionClear {\n       }\n     } finally {\n       releaseDistributedClearLock(lockName);\n-      incClearDuration(System.nanoTime() - clearStartTime);\n-    }\n-  }\n-\n-  void incClearCount() {\n-    if (partitionedRegion != null && partitionedRegion.getDataStore() != null\n-        && partitionedRegion.getDataStore().getAllLocalBucketRegions() != null\n-        && partitionedRegion.getDataStore().getAllLocalBucketRegions().size() != 0) {\n-      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n-      if (stats != null) {\n-        logger.info(\"BR inc PR Region count:\" + stats.getClass().getName() + \":\"\n-            + partitionedRegion.getFullPath(), new Exception());\n-        stats.incClearCount();\n-      }\n-    }\n-  }\n-\n-  void incClearDuration(long durationNanos) {\n-    if (partitionedRegion != null && partitionedRegion.getTotalNumberOfBuckets() != 0) {\n-      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n-      if (stats != null) {\n-        logger.info(\"BR inc PR Duration by + \" + durationNanos + \" ns:\" + stats.getClass().getName()\n-            + \":\" + partitionedRegion.getFullPath(), new Exception());\n-        stats.incPartitionedRegionClearDuration(durationNanos);\n+      if (partitionedRegion != null) {\n+        partitionedRegion.getCachePerfStats()\n+            .incPartitionedRegionClearTotalDuration(System.nanoTime() - clearStartTime);\n       }\n     }\n   }\n \n-\n-\n   protected void invokeCacheWriter(RegionEventImpl regionEvent) {\n     try {\n       partitionedRegion.cacheWriteBeforeRegionClear(regionEvent);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMDQwMw==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459610403", "bodyText": "See my other comment about the possibility of hitting the scenario being checked for. Is it actually possible that we get to where this method is called and getTotalNumberOfBuckets() is zero? If it is, do we want to throw an exception instead of just quietly not incrementing the stats?", "author": "DonalEvans", "createdAt": "2020-07-23T17:26:02Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -367,12 +370,38 @@ void doClear(RegionEventImpl regionEvent, boolean cacheWrite) {\n           releaseLockForClear(regionEvent);\n         }\n       }\n-\n     } finally {\n       releaseDistributedClearLock(lockName);\n+      incClearDuration(System.nanoTime() - clearStartTime);\n+    }\n+  }\n+\n+  void incClearCount() {\n+    if (partitionedRegion != null && partitionedRegion.getDataStore() != null\n+        && partitionedRegion.getDataStore().getAllLocalBucketRegions() != null\n+        && partitionedRegion.getDataStore().getAllLocalBucketRegions().size() != 0) {\n+      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n+      if (stats != null) {\n+        logger.info(\"BR inc PR Region count:\" + stats.getClass().getName() + \":\"\n+            + partitionedRegion.getFullPath(), new Exception());\n+        stats.incClearCount();\n+      }\n     }\n   }\n \n+  void incClearDuration(long durationNanos) {\n+    if (partitionedRegion != null && partitionedRegion.getTotalNumberOfBuckets() != 0) {", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDIxMg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461224212", "bodyText": "Same reason as above, but I wanted to add that this was simpler because in the original PR this call was only happening on the coordinator. Now this can happen on any member so I've changed it to check everything that was being checked for the clear count.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMDQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\nindex bdf5d43f0e..ccd8dab759 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n\n@@ -372,36 +377,13 @@ public class PartitionedRegionClear {\n       }\n     } finally {\n       releaseDistributedClearLock(lockName);\n-      incClearDuration(System.nanoTime() - clearStartTime);\n-    }\n-  }\n-\n-  void incClearCount() {\n-    if (partitionedRegion != null && partitionedRegion.getDataStore() != null\n-        && partitionedRegion.getDataStore().getAllLocalBucketRegions() != null\n-        && partitionedRegion.getDataStore().getAllLocalBucketRegions().size() != 0) {\n-      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n-      if (stats != null) {\n-        logger.info(\"BR inc PR Region count:\" + stats.getClass().getName() + \":\"\n-            + partitionedRegion.getFullPath(), new Exception());\n-        stats.incClearCount();\n-      }\n-    }\n-  }\n-\n-  void incClearDuration(long durationNanos) {\n-    if (partitionedRegion != null && partitionedRegion.getTotalNumberOfBuckets() != 0) {\n-      CachePerfStats stats = partitionedRegion.getCachePerfStats();\n-      if (stats != null) {\n-        logger.info(\"BR inc PR Duration by + \" + durationNanos + \" ns:\" + stats.getClass().getName()\n-            + \":\" + partitionedRegion.getFullPath(), new Exception());\n-        stats.incPartitionedRegionClearDuration(durationNanos);\n+      if (partitionedRegion != null) {\n+        partitionedRegion.getCachePerfStats()\n+            .incPartitionedRegionClearTotalDuration(System.nanoTime() - clearStartTime);\n       }\n     }\n   }\n \n-\n-\n   protected void invokeCacheWriter(RegionEventImpl regionEvent) {\n     try {\n       partitionedRegion.cacheWriteBeforeRegionClear(regionEvent);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjIyOQ==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459616229", "bodyText": "I think this may possibly be incorrect. incRegionClearCount() is being overridden from RegionStats but every other method in this class is overriding methods from CachePerfStats. I think the correct methods might be incClearCount() which calls cachePerfStats.incClearCount() and incBucketClearCount() which calls cachePerfStats.incBucketClearCount().", "author": "DonalEvans", "createdAt": "2020-07-23T17:36:10Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/RegionPerfStats.java", "diffHunk": "@@ -519,9 +519,15 @@ public void incEvictWorkTime(long delta) {\n     cachePerfStats.incEvictWorkTime(delta);\n   }\n \n+  @Override\n+  public void incRegionClearCount() {\n+    stats.incLong(regionClearsId, 1L);\n+    cachePerfStats.incClearCount();\n+  }\n+\n   @Override\n   public void incClearCount() {\n-    stats.incLong(clearsId, 1L);\n+    stats.incLong(bucketClearsId, 1L);", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDkyNg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461220926", "bodyText": "It took me awhile to understand what you meant here - but you were correct. There was some weird inheretance going on here stemming from the fact that I didn't understand the relationship between RegionStats, RegionPerfStats, and CachePerfStats. These should be fixed now.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/RegionPerfStats.java b/geode-core/src/main/java/org/apache/geode/internal/cache/RegionPerfStats.java\nindex cb89e9d38c..30d60bf797 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/RegionPerfStats.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/RegionPerfStats.java\n\n@@ -522,13 +522,13 @@ class RegionPerfStats extends CachePerfStats implements RegionStats {\n   @Override\n   public void incRegionClearCount() {\n     stats.incLong(regionClearsId, 1L);\n-    cachePerfStats.incClearCount();\n+    cachePerfStats.incRegionClearCount();\n   }\n \n   @Override\n-  public void incClearCount() {\n+  public void incBucketClearCount() {\n     stats.incLong(bucketClearsId, 1L);\n-    cachePerfStats.incClearCount();\n+    cachePerfStats.incBucketClearCount();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjg1OQ==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459616859", "bodyText": "This method should have remained as incClearCount(), I think, to remain consistent with CachePerfStats.", "author": "DonalEvans", "createdAt": "2020-07-23T17:37:15Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/RegionStats.java", "diffHunk": "@@ -135,7 +135,9 @@\n \n   void incEvictWorkTime(long delta);\n \n-  void incClearCount();\n+  void incBucketClearCount();\n+\n+  void incRegionClearCount();", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTMwMw==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461221303", "bodyText": "RegionPerfStats and other classes which used \"incClearCount()\" have been replaced with \"incRegionClearCount()\" as that is more descriptive and you're right - they should be consistent. This was being blocked previously by the error you identified in your previous comment.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d7b48dfd3343d2324b6bd67b3b33d3c7bab797ec", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/RegionStats.java b/geode-core/src/main/java/org/apache/geode/internal/cache/RegionStats.java\nindex 4c0e446255..2fe6cc14b8 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/RegionStats.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/RegionStats.java\n\n@@ -135,9 +135,7 @@ public interface RegionStats {\n \n   void incEvictWorkTime(long delta);\n \n-  void incBucketClearCount();\n-\n-  void incRegionClearCount();\n+  void incClearCount();\n \n   void incPRQueryRetries();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxODM2OA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459618368", "bodyText": "This method is never used.", "author": "DonalEvans", "createdAt": "2020-07-23T17:39:56Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -170,6 +170,13 @@ private void verifyClientRegionSize(int expectedNum) {\n     return destroys;\n   };\n \n+  SerializableCallableIF<Integer> getStatClearCount = () -> {", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTQzNg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461221436", "bodyText": "Removed.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxODM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex f4ab91ea1d..409e70452a 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -170,13 +196,6 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n     return destroys;\n   };\n \n-  SerializableCallableIF<Integer> getStatClearCount = () -> {\n-    Region region = getRegion(false);\n-    long clearCount = ((LocalRegion) region).getCachePerfStats().getRegionClearCount();\n-\n-    return (int) clearCount;\n-  };\n-\n   SerializableCallableIF<Integer> getBucketRegionWriterClears = () -> {\n     int clears = 0;\n     for (int i = 0; i < TOTAL_BUCKET_NUM; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMjY2NQ==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459622665", "bodyText": "Rather than just comparing the clear counts of the buckets between eachother, it might be better to compare all of them to the expected clear count. The current check just asserts that the clear counts for all the buckets are equal, but not that that value is necessarily correct.", "author": "DonalEvans", "createdAt": "2020-07-23T17:47:11Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -330,6 +337,101 @@ public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n         .isEqualTo(0);\n   }\n \n+  @Test\n+  public void normalClearFromDataStoreUpdatesStats() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    // Verify no clears have been recorded in stats\n+    dataStore1.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+\n+      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n+        long clearCount = bucket.getCachePerfStats().getRegionClearCount();\n+        assertThat(clearCount).isEqualTo(0);\n+      }\n+    });\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore1.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+\n+    // Verify the stats were properly updated for the bucket regions\n+    dataStore1.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+      long clearCount = 0L;", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjM4OA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461222388", "bodyText": "The trick here is that we don't know exactly how many buckets will be in each datastore for sure. In the current iteration of the test, 2 members will have 7 and one member will have 6 buckets (although I'd imagine you could end up with slightly different balance in specific scenarios). Originally I changed the test to have a number of total buckets across all members that was evenly divisible by the number of datastores - but this felt like a hardcoded trap for anyone trying to modify the test in the future. In the end I decided that it was good enough to determine that the count was incrementing to a consistent non-zero value even if I couldn't make sure that value matched up to a hardcoded expectation - but if you feel this is insufficient I can take another shot at this check.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMjY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNzAzMw==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461227033", "bodyText": "If it's safe to assume that buckets aren't moving around during the clear (which in this test seems to be the case) then it should be possible to get the number of buckets on each member with region.getDataStore().getAllLocalBucketRegions() and use that for verification.", "author": "DonalEvans", "createdAt": "2020-07-27T23:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMjY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MjA5Mw==", "url": "https://github.com/apache/geode/pull/5391#discussion_r462642093", "bodyText": "Done.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-29T23:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMjY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex f4ab91ea1d..409e70452a 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -359,51 +378,9 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n     verifyServerRegionSize(0);\n \n     // Verify the stats were properly updated for the bucket regions\n-    dataStore1.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-      assertThat(region.getCachePerfStats().getPartitionedRegionClearDuration()).isGreaterThan(0);\n-    });\n-\n-    dataStore2.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-    });\n-\n-    dataStore3.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-    });\n+    verifyDatastoreStats(dataStore1, true);\n+    verifyDatastoreStats(dataStore2, false);\n+    verifyDatastoreStats(dataStore3, false);\n \n \n     // The accessor shouldn't increment the region clear count\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMzQ1OA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459623458", "bodyText": "This invocation is executed on all three datastores. It might simplify the test to extract it to a method.", "author": "DonalEvans", "createdAt": "2020-07-23T17:48:30Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -330,6 +337,101 @@ public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n         .isEqualTo(0);\n   }\n \n+  @Test\n+  public void normalClearFromDataStoreUpdatesStats() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    // Verify no clears have been recorded in stats\n+    dataStore1.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+\n+      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n+        long clearCount = bucket.getCachePerfStats().getRegionClearCount();\n+        assertThat(clearCount).isEqualTo(0);\n+      }\n+    });\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore1.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+\n+    // Verify the stats were properly updated for the bucket regions\n+    dataStore1.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+      long clearCount = 0L;\n+\n+      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n+        if (clearCount == 0) {\n+          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n+        }\n+        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n+            .isNotEqualTo(0);\n+      }\n+\n+      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n+      assertThat(region.getCachePerfStats().getPartitionedRegionClearDuration()).isGreaterThan(0);\n+    });\n+\n+    dataStore2.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+      long clearCount = 0L;\n+\n+      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n+        if (clearCount == 0) {\n+          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n+        }\n+        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n+            .isNotEqualTo(0);\n+      }\n+\n+      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjUzMQ==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461222531", "bodyText": "Good call - done.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMzQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex f4ab91ea1d..409e70452a 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -359,51 +378,9 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n     verifyServerRegionSize(0);\n \n     // Verify the stats were properly updated for the bucket regions\n-    dataStore1.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-      assertThat(region.getCachePerfStats().getPartitionedRegionClearDuration()).isGreaterThan(0);\n-    });\n-\n-    dataStore2.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-    });\n-\n-    dataStore3.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-    });\n+    verifyDatastoreStats(dataStore1, true);\n+    verifyDatastoreStats(dataStore2, false);\n+    verifyDatastoreStats(dataStore3, false);\n \n \n     // The accessor shouldn't increment the region clear count\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNDQxOA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r459624418", "bodyText": "I'm not sure what this section has to do with stats. I think it can safely be removed from this test case.", "author": "DonalEvans", "createdAt": "2020-07-23T17:50:13Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -330,6 +337,101 @@ public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n         .isEqualTo(0);\n   }\n \n+  @Test\n+  public void normalClearFromDataStoreUpdatesStats() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    // Verify no clears have been recorded in stats\n+    dataStore1.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+\n+      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n+        long clearCount = bucket.getCachePerfStats().getRegionClearCount();\n+        assertThat(clearCount).isEqualTo(0);\n+      }\n+    });\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore1.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+\n+    // Verify the stats were properly updated for the bucket regions\n+    dataStore1.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+      long clearCount = 0L;\n+\n+      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n+        if (clearCount == 0) {\n+          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n+        }\n+        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n+            .isNotEqualTo(0);\n+      }\n+\n+      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n+      assertThat(region.getCachePerfStats().getPartitionedRegionClearDuration()).isGreaterThan(0);\n+    });\n+\n+    dataStore2.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+      long clearCount = 0L;\n+\n+      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n+        if (clearCount == 0) {\n+          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n+        }\n+        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n+            .isNotEqualTo(0);\n+      }\n+\n+      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n+    });\n+\n+    dataStore3.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+      long clearCount = 0L;\n+\n+      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n+        if (clearCount == 0) {\n+          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n+        }\n+        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n+            .isNotEqualTo(0);\n+      }\n+\n+      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n+    });\n+\n+\n+    // The accessor shouldn't increment the region clear count\n+    accessor.invoke(() -> {\n+      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n+      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(0);\n+    });\n+\n+    // do the region destroy to compare that the same callbacks will be triggered\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(dataStore1.invoke(getWriterClears))\n+        .isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(dataStore2.invoke(getWriterClears))\n+        .isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(dataStore3.invoke(getWriterClears))\n+        .isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(accessor.invoke(getWriterClears))\n+        .isEqualTo(1);\n+\n+    assertThat(accessor.invoke(getBucketRegionWriterDestroys))\n+        .isEqualTo(accessor.invoke(getBucketRegionWriterClears))\n+        .isEqualTo(0);", "originalCommit": "cdfafa122b8744bc4e667dd8fd506c8f3af386dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMzg1NA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461223854", "bodyText": "These assertions mostly just check that the cache writer behaved as expected. While they're not specifically necessary, they're present in every other test in this suite so I opted to leave them in.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-27T23:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNDQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNjAxMA==", "url": "https://github.com/apache/geode/pull/5391#discussion_r461236010", "bodyText": "I think that the rest of the tests in the class are specifically testing clear's interaction with writers (at least judging by test names) so it's appropriate for these checks to be present in them, but in a test specifically about stats, they risk causing confusion.", "author": "DonalEvans", "createdAt": "2020-07-27T23:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNDQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MjE5NQ==", "url": "https://github.com/apache/geode/pull/5391#discussion_r462642195", "bodyText": "Done.", "author": "BenjaminPerryRoss", "createdAt": "2020-07-29T23:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNDQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex f4ab91ea1d..409e70452a 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -359,51 +378,9 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n     verifyServerRegionSize(0);\n \n     // Verify the stats were properly updated for the bucket regions\n-    dataStore1.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-      assertThat(region.getCachePerfStats().getPartitionedRegionClearDuration()).isGreaterThan(0);\n-    });\n-\n-    dataStore2.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-    });\n-\n-    dataStore3.invoke(() -> {\n-      PartitionedRegion region = (PartitionedRegion) getRegion(false);\n-      long clearCount = 0L;\n-\n-      for (BucketRegion bucket : region.getDataStore().getAllLocalBucketRegions()) {\n-        if (clearCount == 0) {\n-          clearCount = bucket.getCachePerfStats().getBucketClearCount();\n-        }\n-        assertThat(bucket.getCachePerfStats().getBucketClearCount()).isEqualTo(clearCount)\n-            .isNotEqualTo(0);\n-      }\n-\n-      assertThat(region.getCachePerfStats().getRegionClearCount()).isEqualTo(1);\n-    });\n+    verifyDatastoreStats(dataStore1, true);\n+    verifyDatastoreStats(dataStore2, false);\n+    verifyDatastoreStats(dataStore3, false);\n \n \n     // The accessor shouldn't increment the region clear count\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0Mzc0Ng==", "url": "https://github.com/apache/geode/pull/5391#discussion_r462643746", "bodyText": "Changing this from Long to long will fix the LGTM alert introduced by this PR.", "author": "DonalEvans", "createdAt": "2020-07-29T23:18:31Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -123,6 +123,7 @@ protected void waitForPrimary(PartitionedRegion.RetryTimeKeeper retryTimer) {\n \n   public Set<Integer> clearRegionLocal(RegionEventImpl regionEvent) {\n     Set<Integer> clearedBuckets = new HashSet<>();\n+    Long clearStartTime = System.nanoTime();", "originalCommit": "e244dd930a2dabc3eb0e56dc81ca0ad89d4243f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2146ae992aea620646301cba893be8b64ff23593", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\nindex 4d7ee7b984..ccd8dab759 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n\n@@ -123,7 +123,7 @@ public class PartitionedRegionClear {\n \n   public Set<Integer> clearRegionLocal(RegionEventImpl regionEvent) {\n     Set<Integer> clearedBuckets = new HashSet<>();\n-    Long clearStartTime = System.nanoTime();\n+    long clearStartTime = System.nanoTime();\n     setMembershipChange(false);\n     // Synchronized to handle the requester departure.\n     synchronized (lockForListenerAndClientNotification) {\n"}}, {"oid": "2146ae992aea620646301cba893be8b64ff23593", "url": "https://github.com/apache/geode/commit/2146ae992aea620646301cba893be8b64ff23593", "message": "Added new durtation stat and addressed additional feedback", "committedDate": "2020-07-30T21:24:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MTE5Mg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r464551192", "bodyText": "Usually we use:  if (owner.isUsedForPartitionedRegionBucket()) { instead.", "author": "gesterzhou", "createdAt": "2020-08-03T17:19:46Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/AbstractRegionMap.java", "diffHunk": "@@ -344,7 +344,12 @@ void incClearCount(LocalRegion lr) {\n     if (lr != null && !(lr instanceof HARegion)) {\n       CachePerfStats stats = lr.getCachePerfStats();\n       if (stats != null) {\n-        stats.incClearCount();\n+        if (lr instanceof BucketRegion) {", "originalCommit": "4c1c3244da4a391135fdf0d2a2f1feab0f3623f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28582c867edb75e0592e253b5918654af5bde113", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/AbstractRegionMap.java b/geode-core/src/main/java/org/apache/geode/internal/cache/AbstractRegionMap.java\nindex 082c50c233..dc26126a54 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/AbstractRegionMap.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/AbstractRegionMap.java\n\n@@ -344,7 +344,7 @@ public abstract class AbstractRegionMap extends BaseRegionMap\n     if (lr != null && !(lr instanceof HARegion)) {\n       CachePerfStats stats = lr.getCachePerfStats();\n       if (stats != null) {\n-        if (lr instanceof BucketRegion) {\n+        if (lr.isUsedForPartitionedRegionBucket()) {\n           stats.incBucketClearCount();\n         } else {\n           stats.incRegionClearCount();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MzUwMg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r464583502", "bodyText": "we have to follow other duration stats's timeunit. If other duration stats used nanoseconds, we use it too. Otherwise, we should not.", "author": "gesterzhou", "createdAt": "2020-08-03T18:17:32Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java", "diffHunk": "@@ -274,7 +278,14 @@\n         \"Current number of regions configured for reliablity that are missing required roles with Limited access\";\n     final String reliableRegionsMissingNoAccessDesc =\n         \"Current number of regions configured for reliablity that are missing required roles with No access\";\n-    final String clearsDesc = \"The total number of times a clear has been done on this cache.\";\n+    final String regionClearsDesc =\n+        \"The total number of times a clear has been done on this cache.\";\n+    final String bucketClearsDesc =\n+        \"The total number of times a clear has been done on this region and it's bucket regions\";\n+    final String partitionedRegionClearLocalDurationDesc =\n+        \"The time in nanoseconds partitioned region clear has been running for the region on this member\";", "originalCommit": "4c1c3244da4a391135fdf0d2a2f1feab0f3623f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwOTQzMg==", "url": "https://github.com/apache/geode/pull/5391#discussion_r464609432", "bodyText": "I actually switched this from the original metric I used to nanoseconds because other stats in the file seem to be using them and I wanted to be consistent (such as EventQueueThrottleTime or any of the tx lifetime stats in that class).", "author": "BenjaminPerryRoss", "createdAt": "2020-08-03T19:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MzUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "d7b48dfd3343d2324b6bd67b3b33d3c7bab797ec", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java b/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java\nindex 5851b3fbe0..7371ec01e2 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java\n\n@@ -278,14 +274,7 @@ public class CachePerfStats {\n         \"Current number of regions configured for reliablity that are missing required roles with Limited access\";\n     final String reliableRegionsMissingNoAccessDesc =\n         \"Current number of regions configured for reliablity that are missing required roles with No access\";\n-    final String regionClearsDesc =\n-        \"The total number of times a clear has been done on this cache.\";\n-    final String bucketClearsDesc =\n-        \"The total number of times a clear has been done on this region and it's bucket regions\";\n-    final String partitionedRegionClearLocalDurationDesc =\n-        \"The time in nanoseconds partitioned region clear has been running for the region on this member\";\n-    final String partitionedRegionClearTotalDurationDesc =\n-        \"The time in nanoseconds partitioned region clear has been running for the region with this member as coordinator.\";\n+    final String clearsDesc = \"The total number of times a clear has been done on this cache.\";\n     final String metaDataRefreshCountDesc =\n         \"Total number of times the meta data is refreshed due to hopping observed.\";\n     final String conflatedEventsDesc =\n"}}, {"oid": "28582c867edb75e0592e253b5918654af5bde113", "url": "https://github.com/apache/geode/commit/28582c867edb75e0592e253b5918654af5bde113", "message": "Made changes based on feedback", "committedDate": "2020-08-03T21:06:40Z", "type": "forcePushed"}, {"oid": "7607ba71c4f8a9ffbbaa7b558c27a4defed6a66f", "url": "https://github.com/apache/geode/commit/7607ba71c4f8a9ffbbaa7b558c27a4defed6a66f", "message": "Fixed issue with stats being added to cache instead of region stats", "committedDate": "2020-08-12T20:54:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTgwMw==", "url": "https://github.com/apache/geode/pull/5391#discussion_r469611803", "bodyText": "I think that the null check on partitionedRegion.getCachePerfStats() is no longer necessary with this change, since it's not them we're updating.", "author": "DonalEvans", "createdAt": "2020-08-12T23:58:39Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -378,8 +378,11 @@ void doClear(RegionEventImpl regionEvent, boolean cacheWrite) {\n     } finally {\n       releaseDistributedClearLock(lockName);\n       if (partitionedRegion.getCachePerfStats() != null) {", "originalCommit": "32d82faa466b2067e6c556a403979e5528870385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7b48dfd3343d2324b6bd67b3b33d3c7bab797ec", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\nindex 82e40eff9c..1c9d5b272e 100644\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java\n\n@@ -375,15 +367,9 @@ public class PartitionedRegionClear {\n           releaseLockForClear(regionEvent);\n         }\n       }\n+\n     } finally {\n       releaseDistributedClearLock(lockName);\n-      if (partitionedRegion.getCachePerfStats() != null) {\n-        CachePerfStats stats = partitionedRegion.getRegionCachePerfStats();\n-        if (stats != null) {\n-          partitionedRegion.getRegionCachePerfStats()\n-              .incPartitionedRegionClearTotalDuration(System.nanoTime() - clearStartTime);\n-        }\n-      }\n     }\n   }\n \n"}}, {"oid": "861980078d73e34d675cee9ec448427cf3cd5535", "url": "https://github.com/apache/geode/commit/861980078d73e34d675cee9ec448427cf3cd5535", "message": "Fixed NPE in test", "committedDate": "2020-08-13T16:09:33Z", "type": "forcePushed"}, {"oid": "d7b48dfd3343d2324b6bd67b3b33d3c7bab797ec", "url": "https://github.com/apache/geode/commit/d7b48dfd3343d2324b6bd67b3b33d3c7bab797ec", "message": "Added test for clear count stats and debug output for issues", "committedDate": "2020-08-17T21:48:44Z", "type": "commit"}, {"oid": "fab8d657e50f875db7f5a67487c1c7e15c0dd67e", "url": "https://github.com/apache/geode/commit/fab8d657e50f875db7f5a67487c1c7e15c0dd67e", "message": "Added stats and improved testing", "committedDate": "2020-08-17T21:48:44Z", "type": "commit"}, {"oid": "3bc3ad0b458f7e5230833cf5ebfe59269f6d5690", "url": "https://github.com/apache/geode/commit/3bc3ad0b458f7e5230833cf5ebfe59269f6d5690", "message": "Updated Unit test for CachePerfStats", "committedDate": "2020-08-17T21:48:45Z", "type": "commit"}, {"oid": "d2302667037cafc15965e659d8bb5883956e5306", "url": "https://github.com/apache/geode/commit/d2302667037cafc15965e659d8bb5883956e5306", "message": "Fixed test failure and made changes based on PR feedback", "committedDate": "2020-08-17T21:48:45Z", "type": "commit"}, {"oid": "71f5ba26a81bf162ddd8941f8cb54f8c88f05403", "url": "https://github.com/apache/geode/commit/71f5ba26a81bf162ddd8941f8cb54f8c88f05403", "message": "Addressing PR feedback", "committedDate": "2020-08-17T21:48:45Z", "type": "commit"}, {"oid": "929d54912fe311759d57f80282080fdeb94dff5e", "url": "https://github.com/apache/geode/commit/929d54912fe311759d57f80282080fdeb94dff5e", "message": "Added new durtation stat and addressed additional feedback", "committedDate": "2020-08-17T21:48:45Z", "type": "commit"}, {"oid": "f0be44479bf8a0bcc97e849805e88e56e7ae1728", "url": "https://github.com/apache/geode/commit/f0be44479bf8a0bcc97e849805e88e56e7ae1728", "message": "Fix test issue", "committedDate": "2020-08-17T21:48:45Z", "type": "commit"}, {"oid": "47b7493d9bd2603621a8487a1cf5786b553c9f40", "url": "https://github.com/apache/geode/commit/47b7493d9bd2603621a8487a1cf5786b553c9f40", "message": "Made changes based on feedback", "committedDate": "2020-08-17T21:48:45Z", "type": "commit"}, {"oid": "b75133dcef1197d9a80ef3b76db203d4203eac3d", "url": "https://github.com/apache/geode/commit/b75133dcef1197d9a80ef3b76db203d4203eac3d", "message": "Fixed issue with stats being added to cache instead of region stats", "committedDate": "2020-08-17T21:48:45Z", "type": "commit"}, {"oid": "f06cb291a7f7d8b3c8b2103f84eba0ac44b8b025", "url": "https://github.com/apache/geode/commit/f06cb291a7f7d8b3c8b2103f84eba0ac44b8b025", "message": "Fixed NPE in test", "committedDate": "2020-08-17T21:48:45Z", "type": "commit"}, {"oid": "7416df4b531b0dae3078d840eff3ab408bdf55e6", "url": "https://github.com/apache/geode/commit/7416df4b531b0dae3078d840eff3ab408bdf55e6", "message": "Fixed unnessessary conditional", "committedDate": "2020-08-17T21:48:45Z", "type": "forcePushed"}, {"oid": "ed8848f4e5f7c06008938af18225e0bac755ffb2", "url": "https://github.com/apache/geode/commit/ed8848f4e5f7c06008938af18225e0bac755ffb2", "message": "Fixed unnessessary conditional", "committedDate": "2020-08-19T16:21:12Z", "type": "forcePushed"}, {"oid": "a94b7cfe2e1b82cd50ac7a88a86405de5cdcd2ce", "url": "https://github.com/apache/geode/commit/a94b7cfe2e1b82cd50ac7a88a86405de5cdcd2ce", "message": "Fixed unnessessary conditional", "committedDate": "2020-08-19T18:32:22Z", "type": "commit"}, {"oid": "a94b7cfe2e1b82cd50ac7a88a86405de5cdcd2ce", "url": "https://github.com/apache/geode/commit/a94b7cfe2e1b82cd50ac7a88a86405de5cdcd2ce", "message": "Fixed unnessessary conditional", "committedDate": "2020-08-19T18:32:22Z", "type": "forcePushed"}]}