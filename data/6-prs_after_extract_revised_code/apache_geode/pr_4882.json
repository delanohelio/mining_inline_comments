{"pr_number": 4882, "pr_title": "GEODE-7912: cacheWriter should be triggered when PR.clear", "pr_createdAt": "2020-03-30T07:08:17Z", "pr_url": "https://github.com/apache/geode/pull/4882", "timeline": [{"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "url": "https://github.com/apache/geode/commit/b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "message": "GEODE-7912: cacheWriter should be triggered when PR.clear\n\n        Co-authored-by: Anil <agingade@pivotal.io>\n        Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>", "committedDate": "2020-03-30T07:06:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MzMzMw==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400363333", "bodyText": "Typo here, this should be destroysByRegion.", "author": "DonalEvans", "createdAt": "2020-03-30T17:22:58Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -211,8 +357,52 @@ public void afterRegionClear(RegionEvent event) {\n       clears.incrementAndGet();\n     }\n \n+    @Override\n+    public void afterRegionDestroy(RegionEvent event) {\n+      Region region = event.getRegion();\n+      logger.info(\"Region \" + region.getFullPath() + \" is destroyed.\");\n+      destroyes.incrementAndGet();\n+    }\n+\n     int getClears() {\n       return clears.get();\n     }\n+\n+    int getDestroys() {\n+      return destroyes.get();\n+    }\n+  }\n+\n+  public static HashMap<String, AtomicInteger> clearsByRegion = new HashMap<>();\n+  public static HashMap<String, AtomicInteger> destroyesByRegion = new HashMap<>();", "originalCommit": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDAyNg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400380026", "bodyText": "I will fix it.", "author": "gesterzhou", "createdAt": "2020-03-30T17:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MzMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 27c4c4d367..82cd28bd97 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -374,7 +374,7 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n   }\n \n   public static HashMap<String, AtomicInteger> clearsByRegion = new HashMap<>();\n-  public static HashMap<String, AtomicInteger> destroyesByRegion = new HashMap<>();\n+  public static HashMap<String, AtomicInteger> destroysByRegion = new HashMap<>();\n \n   private static class CountingCacheWriter extends CacheWriterAdapter {\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzYxMQ==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400367611", "bodyText": "It seems inefficient and confusing to set the cache writer for all three data stores, then to immediately remove the writers for datastores1 and 2. Could you instead just pass false as the second argument for initDataStore() for those datastores?", "author": "DonalEvans", "createdAt": "2020-03-30T17:29:30Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });", "originalCommit": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDg5OQ==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400380899", "bodyText": "I don't have to remove them. But I want to make sure the test is more deterministic.", "author": "gesterzhou", "createdAt": "2020-03-30T17:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMDEzMg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400410132", "bodyText": "I agree with Donal, doing this we are testing the behavior of AttributesMutator, not for clear.", "author": "agingade", "createdAt": "2020-03-30T18:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 27c4c4d367..82cd28bd97 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -191,7 +191,7 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n \n   SerializableCallableIF<Integer> getWriterDestroys = () -> {\n     int destroys =\n-        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n     return destroys;\n   };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODU3OA==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400368578", "bodyText": "Typo here, this should be destroys.", "author": "DonalEvans", "createdAt": "2020-03-30T17:30:58Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    accessor.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n   }\n \n   @Test\n   public void normalClearFromClient() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     client1.invoke(() -> feed(true));\n     verifyClientRegionSize(NUM_ENTRIES);\n     verifyServerRegionSize(NUM_ENTRIES);\n \n     client1.invoke(() -> getRegion(true).clear());\n     verifyServerRegionSize(0);\n     verifyClientRegionSize(0);\n-    verifyCacheListenerTriggerCount(null);\n+    // verifyCacheListenerTriggerCount(null);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    client1.invoke(() -> {\n+      Region region = getRegion(true);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n   }\n \n   private static class CountingCacheListener extends CacheListenerAdapter {\n     private final AtomicInteger clears = new AtomicInteger();\n+    private final AtomicInteger destroyes = new AtomicInteger();", "originalCommit": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMzkwNg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400413906", "bodyText": "Does this PR requires CacheListener testing.", "author": "agingade", "createdAt": "2020-03-30T18:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 27c4c4d367..82cd28bd97 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -191,7 +191,7 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n \n   SerializableCallableIF<Integer> getWriterDestroys = () -> {\n     int destroys =\n-        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n     return destroys;\n   };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2OTYzMg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400369632", "bodyText": "Is there something missing here, or can this comment be removed?", "author": "DonalEvans", "createdAt": "2020-03-30T17:32:40Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);", "originalCommit": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTgyMA==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400381820", "bodyText": "The listener verification will also pass. But since the whole listener parts maybe refactoring, I comment it out for now. But we will revisit it.", "author": "gesterzhou", "createdAt": "2020-03-30T17:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2OTYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 27c4c4d367..82cd28bd97 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -191,7 +191,7 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n \n   SerializableCallableIF<Integer> getWriterDestroys = () -> {\n     int destroys =\n-        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n     return destroys;\n   };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjQ1Mw==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400372453", "bodyText": "Remove commented code.", "author": "DonalEvans", "createdAt": "2020-03-30T17:36:59Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);", "originalCommit": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 27c4c4d367..82cd28bd97 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -191,7 +191,7 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n \n   SerializableCallableIF<Integer> getWriterDestroys = () -> {\n     int destroys =\n-        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n     return destroys;\n   };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjU3Mg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400372572", "bodyText": "Remove commented code.", "author": "DonalEvans", "createdAt": "2020-03-30T17:37:12Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);", "originalCommit": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjAzMg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400382032", "bodyText": "It's kind of \"TODO\".", "author": "gesterzhou", "createdAt": "2020-03-30T17:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 27c4c4d367..82cd28bd97 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -191,7 +191,7 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n \n   SerializableCallableIF<Integer> getWriterDestroys = () -> {\n     int destroys =\n-        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n     return destroys;\n   };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjczMw==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400372733", "bodyText": "Remove commented code.", "author": "DonalEvans", "createdAt": "2020-03-30T17:37:26Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    accessor.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(accessor);", "originalCommit": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 27c4c4d367..82cd28bd97 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -191,7 +191,7 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n \n   SerializableCallableIF<Integer> getWriterDestroys = () -> {\n     int destroys =\n-        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n     return destroys;\n   };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjgxMw==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400372813", "bodyText": "Remove commented code.", "author": "DonalEvans", "createdAt": "2020-03-30T17:37:35Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    accessor.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n   }\n \n   @Test\n   public void normalClearFromClient() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     client1.invoke(() -> feed(true));\n     verifyClientRegionSize(NUM_ENTRIES);\n     verifyServerRegionSize(NUM_ENTRIES);\n \n     client1.invoke(() -> getRegion(true).clear());\n     verifyServerRegionSize(0);\n     verifyClientRegionSize(0);\n-    verifyCacheListenerTriggerCount(null);\n+    // verifyCacheListenerTriggerCount(null);", "originalCommit": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 27c4c4d367..82cd28bd97 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -191,7 +191,7 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n \n   SerializableCallableIF<Integer> getWriterDestroys = () -> {\n     int destroys =\n-        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n     return destroys;\n   };\n \n"}}, {"oid": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "url": "https://github.com/apache/geode/commit/3437617085ff9416bcf5c163a692a2bc45a2d9c5", "message": "fix based on review comments", "committedDate": "2020-03-30T18:13:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMTcxMA==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400411710", "bodyText": "There is \"PartitionedRegionLoaderWriterDUnitTest\" specific to testing loader and writers on PR. Probably we should move these tests over there.", "author": "agingade", "createdAt": "2020-03-30T18:40:51Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -104,14 +102,21 @@ private void initClientCache() {\n     region.registerInterestForAllKeys(InterestResultPolicy.KEYS);\n   }\n \n-  private void initDataStore() {\n-    getCache().createRegionFactory(getRegionShortCut())\n-        .setPartitionAttributes(new PartitionAttributesFactory().setTotalNumBuckets(10).create())\n-        .addCacheListener(new CountingCacheListener())\n-        .create(REGION_NAME);\n+  private void initDataStore(boolean withListener, boolean withWriter) {", "originalCommit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTY5Ng==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400491696", "bodyText": "I read the PartitionedRegionLoaderWriterDUnitTest. That is only to verify compatibility when creating region. We are testing the clear() operation's behavior.", "author": "gesterzhou", "createdAt": "2020-03-30T21:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMTcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1ODA1Mw==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400558053", "bodyText": "You can add/extend the test as per your needs. The tests seems to be added for CacheLaderWriter and may be during that time, the need is to test create region.", "author": "agingade", "createdAt": "2020-03-30T23:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMTcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "7c28688d0ffa8a107251430d9422551e644c7649", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 82cd28bd97..a5a22b9ac2 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -102,12 +101,9 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n     region.registerInterestForAllKeys(InterestResultPolicy.KEYS);\n   }\n \n-  private void initDataStore(boolean withListener, boolean withWriter) {\n+  private void initDataStore(boolean withWriter) {\n     RegionFactory factory = getCache().createRegionFactory(getRegionShortCut())\n         .setPartitionAttributes(new PartitionAttributesFactory().setTotalNumBuckets(10).create());\n-    if (withListener) {\n-      factory.addCacheListener(new CountingCacheListener());\n-    }\n     if (withWriter) {\n       factory.setCacheWriter(new CountingCacheWriter());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMjM4NQ==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400412385", "bodyText": "The test is doing region destroy but the name suggests it is for clear. All the tests are doing region destroy, rather than clear.", "author": "agingade", "createdAt": "2020-03-30T18:42:03Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,26 +183,146 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    verifyCacheListenerTriggerCount(dataStore3);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();", "originalCommit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MjMwNg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400492306", "bodyText": "I use destroy to compare. I can add a comments in the case. If I removed the destroy part, it's hard to show what's the expected behavior.", "author": "gesterzhou", "createdAt": "2020-03-30T21:03:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMjM4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1ODMzNg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400558336", "bodyText": "Probably separating test may be good idea. One for destroy and one for Clear.", "author": "agingade", "createdAt": "2020-03-30T23:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMjM4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c28688d0ffa8a107251430d9422551e644c7649", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\nindex 82cd28bd97..a5a22b9ac2 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java\n\n@@ -164,25 +157,6 @@ public class PartitionedRegionClearDUnitTest implements Serializable {\n     // client2.invoke(()->verifyRegionSize(true, expectedNum));\n   }\n \n-  private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n-    SerializableCallableIF<Integer> getListenerTriggerCount = () -> {\n-      CountingCacheListener countingCacheListener =\n-          (CountingCacheListener) getRegion(false).getAttributes()\n-              .getCacheListeners()[0];\n-      return countingCacheListener.getClears();\n-    };\n-\n-    int count = accessor.invoke(getListenerTriggerCount)\n-        + dataStore1.invoke(getListenerTriggerCount)\n-        + dataStore2.invoke(getListenerTriggerCount)\n-        + dataStore3.invoke(getListenerTriggerCount);\n-    assertThat(count).isEqualTo(1);\n-\n-    if (serverVM != null) {\n-      assertThat(serverVM.invoke(getListenerTriggerCount)).isEqualTo(1);\n-    }\n-  }\n-\n   SerializableCallableIF<Integer> getWriterClears = () -> {\n     int clears =\n         clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzc2Ng==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400417766", "bodyText": "Can the caller pass in the Processor. We could avoid checking for operation.\nAlso is paction -> processorAction ? can we make it clear. Sorry for nitpicking. Just wanted to be clear with what we are doing.", "author": "agingade", "createdAt": "2020-03-30T18:51:11Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "diffHunk": "@@ -4428,6 +4431,35 @@ public Object getFromLocalBucket(int bucketId, final Object key, final Object aC\n     return null;\n   }\n \n+  boolean triggerWriter(RegionEventImpl event) {\n+    CacheWriter localWriter = basicGetWriter();\n+    Set netWriteRecipients = localWriter == null ? this.distAdvisor.adviseNetWrite() : null;\n+\n+    if (localWriter == null && (netWriteRecipients == null || netWriteRecipients.isEmpty())) {\n+      return false;\n+    }\n+\n+    final long start = getCachePerfStats().startCacheWriterCall();\n+    try {\n+      SearchLoadAndWriteProcessor processor = SearchLoadAndWriteProcessor.getProcessor();\n+      String theKey = \"preDestroyRegion\";\n+      int paction = 0;\n+      if (event.getOperation().isRegionDestroy()) {\n+        theKey = \"preDestroyRegion\";\n+        paction = SearchLoadAndWriteProcessor.BEFOREREGIONDESTROY;", "originalCommit": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MzM5Mg==", "url": "https://github.com/apache/geode/pull/4882#discussion_r400553392", "bodyText": "fixed and I removed all the listener part tests", "author": "gesterzhou", "createdAt": "2020-03-30T23:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7c28688d0ffa8a107251430d9422551e644c7649", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java\nindex 6514fddc78..9f52824611 100755\n--- a/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java\n+++ b/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java\n\n@@ -4431,7 +4431,8 @@ public class PartitionedRegion extends LocalRegion\n     return null;\n   }\n \n-  boolean triggerWriter(RegionEventImpl event) {\n+  boolean triggerWriter(RegionEventImpl event, SearchLoadAndWriteProcessor processor, int paction,\n+      String theKey) {\n     CacheWriter localWriter = basicGetWriter();\n     Set netWriteRecipients = localWriter == null ? this.distAdvisor.adviseNetWrite() : null;\n \n"}}, {"oid": "7c28688d0ffa8a107251430d9422551e644c7649", "url": "https://github.com/apache/geode/commit/7c28688d0ffa8a107251430d9422551e644c7649", "message": "adjust the test case and remove the listener part", "committedDate": "2020-03-30T23:35:13Z", "type": "commit"}]}