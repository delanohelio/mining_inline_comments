{"pr_number": 5476, "pr_title": "GEODE-8455: Fix difference between create region with gw sender and a\u2026", "pr_createdAt": "2020-08-25T08:18:43Z", "pr_url": "https://github.com/apache/geode/pull/5476", "timeline": [{"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "url": "https://github.com/apache/geode/commit/948e07e81a4b316b00d99cd2f329f7618e71aec1", "message": "GEODE-8455: Fix difference between create region with gw sender and alter region with gw sender\n\nGeode behaves differently with respect to transactions when\ncreating a partitioned region with a parallel gateway sender to\nwhen first the partitioned region is created and then the\nparallel gateway sender is added by altering the region.\n\nIn the first case (create region with gateway sender), when\nsending a transaction for the region, an event is sent\nto each server hosting the bucket for the data in the transaction.\n\nIn the second case (create region + alter region),\nwhen sending a transaction for the region, an event\nis sent to every cache member and not only to those hosting\nthe bucket for the data in the transaction. This leads to,\nin the servers not hosting the bucket for the data,\nthat the events are stored in the\nbucketToTempQueueMap member variable of the\nParallelGatewaySenderQueue.\n\nThe behavior in the first case is the right one.\n\nThe wrong behavior is provoked by the setting to true of the\nrequiresNotification variable of the PartitionedRegion\nby the distributeUpdatedProfileOnSenderCreation method.\nThis method should only set this variable to true\nin case the sender is serial as it is done when\na partitioned region is initialized.", "committedDate": "2020-08-25T08:14:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwOTA0OQ==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477509049", "bodyText": "This method almost entirely duplicates the existing getGatewaySender() method, so it can be removed and calls to it replaced with (AbstractGatewaySender) getGatewaySender(senderId)", "author": "DonalEvans", "createdAt": "2020-08-26T18:40:33Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -3197,6 +3114,18 @@ public static Boolean killSender(String senderId) {\n     }\n   }\n \n+  private static AbstractGatewaySender getAbstractGatewaySender(String senderId) {", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\nindex 1d19d92f13..58e6a07db8 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n\n@@ -3114,18 +3114,6 @@ public class WANTestBase extends DistributedTestCase {\n     }\n   }\n \n-  private static AbstractGatewaySender getAbstractGatewaySender(String senderId) {\n-    Set<GatewaySender> senders = cache.getGatewaySenders();\n-    AbstractGatewaySender sender = null;\n-    for (GatewaySender s : senders) {\n-      if (s.getId().equals(senderId)) {\n-        sender = (AbstractGatewaySender) s;\n-        break;\n-      }\n-    }\n-    return sender;\n-  }\n-\n   public static void killSender() {\n     logger.info(\"Gateway sender is going to be killed by a test\");\n     cache.close();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyMjczMg==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477522732", "bodyText": "These methods are very similar. Would it be possible to replace them with one method which takes an int argument for the desired redundancy level?", "author": "DonalEvans", "createdAt": "2020-08-26T19:03:17Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -190,6 +190,16 @@ protected SerializableRunnableIF createPartitionedRegionRedundancy1Runnable() {\n         isOffHeap());\n   }\n \n+  protected SerializableRunnableIF createPartitionedRegionRedundancy1RunnableNoSenders() {\n+    return () -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", null, 1, 100,\n+        isOffHeap());\n+  }\n+\n+  protected SerializableRunnableIF createPartitionedRegionRedundancy0RunnableNoSenders() {\n+    return () -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", null, 0, 100,\n+        isOffHeap());\n+  }\n+", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex e19c1d4239..7423dbc455 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -185,18 +185,10 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n         isOffHeap());\n   }\n \n-  protected SerializableRunnableIF createPartitionedRegionRedundancy1Runnable() {\n-    return () -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n-        isOffHeap());\n-  }\n-\n-  protected SerializableRunnableIF createPartitionedRegionRedundancy1RunnableNoSenders() {\n-    return () -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", null, 1, 100,\n-        isOffHeap());\n-  }\n-\n-  protected SerializableRunnableIF createPartitionedRegionRedundancy0RunnableNoSenders() {\n-    return () -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", null, 0, 100,\n+  protected SerializableRunnableIF createPartitionedRegionRunnable(String senderIds,\n+      int redundantCopies) {\n+    return () -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", senderIds,\n+        redundantCopies, 100,\n         isOffHeap());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyNTM0NA==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477525344", "bodyText": "This should be Set<RegionQueue> to avoid compiler warnings.", "author": "DonalEvans", "createdAt": "2020-08-26T19:05:41Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -3599,21 +3444,42 @@ public static Long getNumberOfEntriesInVM(final String senderId) {\n   }\n \n   public static void verifyTmpDroppedEventSize(String senderId, int size) {\n-    Set<GatewaySender> senders = cache.getGatewaySenders();\n-    GatewaySender sender = null;\n-    for (GatewaySender s : senders) {\n-      if (s.getId().equals(senderId)) {\n-        sender = s;\n-        break;\n-      }\n-    }\n+    GatewaySender sender = getGatewaySender(senderId);\n \n     AbstractGatewaySender ags = (AbstractGatewaySender) sender;\n     await().untilAsserted(() -> assertEquals(\"Expected tmpDroppedEvents size: \" + size\n         + \" but actual size: \" + ags.getTmpDroppedEventSize(), size, ags.getTmpDroppedEventSize()));\n   }\n \n-  public static void verifyQueueSize(String senderId, int size) {\n+  /**\n+   * Checks that the bucketToTempQueueMap for a partitioned region\n+   * that holds events for buckets that are not available locally, is empty.\n+   */\n+  public static void validateEmptyBucketToTempQueueMap(String senderId) {\n+    GatewaySender sender = getGatewaySender(senderId);\n+\n+    int size = 0;\n+    Set queues = ((AbstractGatewaySender) sender).getQueues();", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\nindex 1d19d92f13..58e6a07db8 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n\n@@ -3459,14 +3447,14 @@ public class WANTestBase extends DistributedTestCase {\n     GatewaySender sender = getGatewaySender(senderId);\n \n     int size = 0;\n-    Set queues = ((AbstractGatewaySender) sender).getQueues();\n+    Set<RegionQueue> queues = ((AbstractGatewaySender) sender).getQueues();\n     for (Object queue : queues) {\n       PartitionedRegion region =\n           (PartitionedRegion) ((ConcurrentParallelGatewaySenderQueue) queue).getRegion();\n       int buckets = region.getTotalNumberOfBuckets();\n       for (int bucket = 0; bucket < buckets; bucket++) {\n-        BlockingQueue newQueue =\n-            ((ConcurrentParallelGatewaySenderQueue) queue).getBucketTmpQueue((int) bucket);\n+        BlockingQueue<GatewaySenderEventImpl> newQueue =\n+            ((ConcurrentParallelGatewaySenderQueue) queue).getBucketTmpQueue(bucket);\n         if (newQueue != null) {\n           size += newQueue.size();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyNTg2NQ==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477525865", "bodyText": "This should be BlockingQueue<GatewaySenderEventImpl> to avoid compiler warnings.", "author": "DonalEvans", "createdAt": "2020-08-26T19:06:10Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -3599,21 +3444,42 @@ public static Long getNumberOfEntriesInVM(final String senderId) {\n   }\n \n   public static void verifyTmpDroppedEventSize(String senderId, int size) {\n-    Set<GatewaySender> senders = cache.getGatewaySenders();\n-    GatewaySender sender = null;\n-    for (GatewaySender s : senders) {\n-      if (s.getId().equals(senderId)) {\n-        sender = s;\n-        break;\n-      }\n-    }\n+    GatewaySender sender = getGatewaySender(senderId);\n \n     AbstractGatewaySender ags = (AbstractGatewaySender) sender;\n     await().untilAsserted(() -> assertEquals(\"Expected tmpDroppedEvents size: \" + size\n         + \" but actual size: \" + ags.getTmpDroppedEventSize(), size, ags.getTmpDroppedEventSize()));\n   }\n \n-  public static void verifyQueueSize(String senderId, int size) {\n+  /**\n+   * Checks that the bucketToTempQueueMap for a partitioned region\n+   * that holds events for buckets that are not available locally, is empty.\n+   */\n+  public static void validateEmptyBucketToTempQueueMap(String senderId) {\n+    GatewaySender sender = getGatewaySender(senderId);\n+\n+    int size = 0;\n+    Set queues = ((AbstractGatewaySender) sender).getQueues();\n+    for (Object queue : queues) {\n+      PartitionedRegion region =\n+          (PartitionedRegion) ((ConcurrentParallelGatewaySenderQueue) queue).getRegion();\n+      int buckets = region.getTotalNumberOfBuckets();\n+      for (int bucket = 0; bucket < buckets; bucket++) {\n+        BlockingQueue newQueue =", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\nindex 1d19d92f13..58e6a07db8 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n\n@@ -3459,14 +3447,14 @@ public class WANTestBase extends DistributedTestCase {\n     GatewaySender sender = getGatewaySender(senderId);\n \n     int size = 0;\n-    Set queues = ((AbstractGatewaySender) sender).getQueues();\n+    Set<RegionQueue> queues = ((AbstractGatewaySender) sender).getQueues();\n     for (Object queue : queues) {\n       PartitionedRegion region =\n           (PartitionedRegion) ((ConcurrentParallelGatewaySenderQueue) queue).getRegion();\n       int buckets = region.getTotalNumberOfBuckets();\n       for (int bucket = 0; bucket < buckets; bucket++) {\n-        BlockingQueue newQueue =\n-            ((ConcurrentParallelGatewaySenderQueue) queue).getBucketTmpQueue((int) bucket);\n+        BlockingQueue<GatewaySenderEventImpl> newQueue =\n+            ((ConcurrentParallelGatewaySenderQueue) queue).getBucketTmpQueue(bucket);\n         if (newQueue != null) {\n           size += newQueue.size();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyNjE5MA==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477526190", "bodyText": "The cast to int here is unnecessary.", "author": "DonalEvans", "createdAt": "2020-08-26T19:06:26Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -3599,21 +3444,42 @@ public static Long getNumberOfEntriesInVM(final String senderId) {\n   }\n \n   public static void verifyTmpDroppedEventSize(String senderId, int size) {\n-    Set<GatewaySender> senders = cache.getGatewaySenders();\n-    GatewaySender sender = null;\n-    for (GatewaySender s : senders) {\n-      if (s.getId().equals(senderId)) {\n-        sender = s;\n-        break;\n-      }\n-    }\n+    GatewaySender sender = getGatewaySender(senderId);\n \n     AbstractGatewaySender ags = (AbstractGatewaySender) sender;\n     await().untilAsserted(() -> assertEquals(\"Expected tmpDroppedEvents size: \" + size\n         + \" but actual size: \" + ags.getTmpDroppedEventSize(), size, ags.getTmpDroppedEventSize()));\n   }\n \n-  public static void verifyQueueSize(String senderId, int size) {\n+  /**\n+   * Checks that the bucketToTempQueueMap for a partitioned region\n+   * that holds events for buckets that are not available locally, is empty.\n+   */\n+  public static void validateEmptyBucketToTempQueueMap(String senderId) {\n+    GatewaySender sender = getGatewaySender(senderId);\n+\n+    int size = 0;\n+    Set queues = ((AbstractGatewaySender) sender).getQueues();\n+    for (Object queue : queues) {\n+      PartitionedRegion region =\n+          (PartitionedRegion) ((ConcurrentParallelGatewaySenderQueue) queue).getRegion();\n+      int buckets = region.getTotalNumberOfBuckets();\n+      for (int bucket = 0; bucket < buckets; bucket++) {\n+        BlockingQueue newQueue =\n+            ((ConcurrentParallelGatewaySenderQueue) queue).getBucketTmpQueue((int) bucket);", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\nindex 1d19d92f13..58e6a07db8 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java\n\n@@ -3459,14 +3447,14 @@ public class WANTestBase extends DistributedTestCase {\n     GatewaySender sender = getGatewaySender(senderId);\n \n     int size = 0;\n-    Set queues = ((AbstractGatewaySender) sender).getQueues();\n+    Set<RegionQueue> queues = ((AbstractGatewaySender) sender).getQueues();\n     for (Object queue : queues) {\n       PartitionedRegion region =\n           (PartitionedRegion) ((ConcurrentParallelGatewaySenderQueue) queue).getRegion();\n       int buckets = region.getTotalNumberOfBuckets();\n       for (int bucket = 0; bucket < buckets; bucket++) {\n-        BlockingQueue newQueue =\n-            ((ConcurrentParallelGatewaySenderQueue) queue).getBucketTmpQueue((int) bucket);\n+        BlockingQueue<GatewaySenderEventImpl> newQueue =\n+            ((ConcurrentParallelGatewaySenderQueue) queue).getBucketTmpQueue(bucket);\n         if (newQueue != null) {\n           size += newQueue.size();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODExMg==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477528112", "bodyText": "No exception is thrown from this method, so this can be removed.", "author": "DonalEvans", "createdAt": "2020-08-26T19:08:42Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1131,6 +1141,111 @@ public void testParallelPropagationWithFilter_AfterAck() throws Exception {\n \n   }\n \n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * Redundancy = 1 in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutator()\n+      throws Exception {", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex e19c1d4239..7423dbc455 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -1132,10 +1124,10 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n     vm6.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName(), 1000));\n     vm7.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName(), 1000));\n \n-    Integer vm2Acks = (Integer) vm2.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm3Acks = (Integer) vm3.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm4Acks = (Integer) vm4.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm5Acks = (Integer) vm5.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm2Acks = vm2.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm3Acks = vm3.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm4Acks = vm4.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm5Acks = vm5.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n \n     assertEquals(2000, (vm2Acks + vm3Acks + vm4Acks + vm5Acks));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODI0Mg==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477528242", "bodyText": "These casts to Integer are redundant and can be removed.", "author": "DonalEvans", "createdAt": "2020-08-26T19:08:57Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1131,6 +1141,111 @@ public void testParallelPropagationWithFilter_AfterAck() throws Exception {\n \n   }\n \n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * Redundancy = 1 in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutator()\n+      throws Exception {\n+    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex e19c1d4239..7423dbc455 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -1132,10 +1124,10 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n     vm6.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName(), 1000));\n     vm7.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName(), 1000));\n \n-    Integer vm2Acks = (Integer) vm2.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm3Acks = (Integer) vm3.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm4Acks = (Integer) vm4.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm5Acks = (Integer) vm5.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm2Acks = vm2.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm3Acks = vm3.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm4Acks = vm4.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm5Acks = vm5.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n \n     assertEquals(2000, (vm2Acks + vm3Acks + vm4Acks + vm5Acks));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODk2Ng==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477528966", "bodyText": "No exception is thrown from this method, so this can be removed.", "author": "DonalEvans", "createdAt": "2020-08-26T19:10:19Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1131,6 +1141,111 @@ public void testParallelPropagationWithFilter_AfterAck() throws Exception {\n \n   }\n \n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * Redundancy = 1 in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutator()\n+      throws Exception {\n+    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm6.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm7.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm4.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm5.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm6.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm7.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+\n+    vm2.invoke(createReceiverPartitionedRegionRedundancy1());\n+    vm3.invoke(createReceiverPartitionedRegionRedundancy1());\n+\n+    vm4.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm5.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm6.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm7.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(waitForSenderRunnable());\n+    vm5.invoke(waitForSenderRunnable());\n+    vm6.invoke(waitForSenderRunnable());\n+    vm7.invoke(waitForSenderRunnable());\n+\n+    vm4.invoke(() -> WANTestBase.doTxPuts(getTestMethodName() + \"_PR\"));\n+\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 3));\n+    vm4.invoke(() -> WANTestBase.verifyQueueSize(\"ln\", 3));\n+\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    vm4.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm6.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm7.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * No redundancy in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutatorNoRedundancy()\n+      throws Exception {", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex e19c1d4239..7423dbc455 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -1132,10 +1124,10 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n     vm6.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName(), 1000));\n     vm7.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName(), 1000));\n \n-    Integer vm2Acks = (Integer) vm2.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm3Acks = (Integer) vm3.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm4Acks = (Integer) vm4.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm5Acks = (Integer) vm5.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm2Acks = vm2.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm3Acks = vm3.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm4Acks = vm4.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm5Acks = vm5.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n \n     assertEquals(2000, (vm2Acks + vm3Acks + vm4Acks + vm5Acks));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyOTA5OQ==", "url": "https://github.com/apache/geode/pull/5476#discussion_r477529099", "bodyText": "These casts to Integer are redundant and can be removed.", "author": "DonalEvans", "createdAt": "2020-08-26T19:10:32Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1131,6 +1141,111 @@ public void testParallelPropagationWithFilter_AfterAck() throws Exception {\n \n   }\n \n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * Redundancy = 1 in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutator()\n+      throws Exception {\n+    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm6.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm7.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm4.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm5.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm6.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm7.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+\n+    vm2.invoke(createReceiverPartitionedRegionRedundancy1());\n+    vm3.invoke(createReceiverPartitionedRegionRedundancy1());\n+\n+    vm4.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm5.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm6.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm7.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(waitForSenderRunnable());\n+    vm5.invoke(waitForSenderRunnable());\n+    vm6.invoke(waitForSenderRunnable());\n+    vm7.invoke(waitForSenderRunnable());\n+\n+    vm4.invoke(() -> WANTestBase.doTxPuts(getTestMethodName() + \"_PR\"));\n+\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 3));\n+    vm4.invoke(() -> WANTestBase.verifyQueueSize(\"ln\", 3));\n+\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    vm4.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm6.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm7.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * No redundancy in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutatorNoRedundancy()\n+      throws Exception {\n+    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));", "originalCommit": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "chunk": "diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\nindex e19c1d4239..7423dbc455 100644\n--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java\n\n@@ -1132,10 +1124,10 @@ public class ParallelWANPropagationDUnitTest extends WANTestBase {\n     vm6.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName(), 1000));\n     vm7.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName(), 1000));\n \n-    Integer vm2Acks = (Integer) vm2.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm3Acks = (Integer) vm3.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm4Acks = (Integer) vm4.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n-    Integer vm5Acks = (Integer) vm5.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm2Acks = vm2.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm3Acks = vm3.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm4Acks = vm4.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n+    Integer vm5Acks = vm5.invoke(() -> WANTestBase.validateAfterAck(\"ln\"));\n \n     assertEquals(2000, (vm2Acks + vm3Acks + vm4Acks + vm5Acks));\n \n"}}, {"oid": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "url": "https://github.com/apache/geode/commit/92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "message": "feature/GEODE-8455: Fix bug shown in dist tests and minor changes after review", "committedDate": "2020-08-27T11:56:23Z", "type": "commit"}, {"oid": "dde720b6166623e92bfe15c1fbeab7fef5b54e3e", "url": "https://github.com/apache/geode/commit/dde720b6166623e92bfe15c1fbeab7fef5b54e3e", "message": "GEODE-8455: Remove unused parameter from helper method in WANTestBase support test class", "committedDate": "2020-08-27T12:39:55Z", "type": "commit"}]}