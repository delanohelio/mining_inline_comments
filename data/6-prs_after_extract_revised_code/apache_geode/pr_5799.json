{"pr_number": 5799, "pr_title": "GEODE-8634: Fix AsyncInvocationTimeoutDistributedTest flakiness", "pr_createdAt": "2020-12-01T23:06:05Z", "pr_url": "https://github.com/apache/geode/pull/5799", "timeline": [{"oid": "09b1e4bf79ca3918c5310a561ffffc9d03cf34e4", "url": "https://github.com/apache/geode/commit/09b1e4bf79ca3918c5310a561ffffc9d03cf34e4", "message": "GEODE-8634: Fix AsyncInvocationTimeoutDistributedTest flakiness\n\nNull out latch and threadId before each test.", "committedDate": "2020-12-03T19:13:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU3NjAyMQ==", "url": "https://github.com/apache/geode/pull/5799#discussion_r535576021", "bodyText": "Is it better to initialize latch to CountDownLatch(0) instead of null? Also initialize it in line 45, when latch is declared?", "author": "jchen21", "createdAt": "2020-12-03T20:32:34Z", "path": "geode-dunit/src/distributedTest/java/org/apache/geode/test/dunit/tests/AsyncInvocationTimeoutDistributedTest.java", "diffHunk": "@@ -40,12 +41,20 @@\n \n   private static final long TIMEOUT_MILLIS = getTimeout().toMillis();\n \n-  private static final AtomicReference<Long> threadId = new AtomicReference<>();\n+  private static final AtomicReference<Long> threadId = new AtomicReference<>(0L);\n   private static final AtomicReference<CountDownLatch> latch = new AtomicReference<>();\n \n   @Rule\n   public DistributedRule distributedRule = new DistributedRule();\n \n+  @Before\n+  public void setUp() {\n+    getVM(0).invoke(() -> {\n+      latch.set(null);", "originalCommit": "09b1e4bf79ca3918c5310a561ffffc9d03cf34e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1MjU1OQ==", "url": "https://github.com/apache/geode/pull/5799#discussion_r535752559", "bodyText": "Yes, it would be better to avoid nulls and use CountDownLatch(0). Thanks!", "author": "kirklund", "createdAt": "2020-12-04T00:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU3NjAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4OTU0Nw==", "url": "https://github.com/apache/geode/pull/5799#discussion_r536289547", "bodyText": "I think I've resolved this. Please take a look. Thanks!", "author": "kirklund", "createdAt": "2020-12-04T18:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU3NjAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ae9198c5e9cda8d3fa3a2d3659f53e89815aed7", "chunk": "diff --git a/geode-dunit/src/distributedTest/java/org/apache/geode/test/dunit/tests/AsyncInvocationTimeoutDistributedTest.java b/geode-dunit/src/distributedTest/java/org/apache/geode/test/dunit/tests/AsyncInvocationTimeoutDistributedTest.java\nindex 99c1cf3e14..fbbf8365a4 100644\n--- a/geode-dunit/src/distributedTest/java/org/apache/geode/test/dunit/tests/AsyncInvocationTimeoutDistributedTest.java\n+++ b/geode-dunit/src/distributedTest/java/org/apache/geode/test/dunit/tests/AsyncInvocationTimeoutDistributedTest.java\n\n@@ -39,43 +39,37 @@ import org.apache.geode.test.dunit.rules.DistributedRule;\n @SuppressWarnings(\"serial\")\n public class AsyncInvocationTimeoutDistributedTest implements Serializable {\n \n-  private static final long TIMEOUT_MILLIS = getTimeout().toMillis();\n-\n-  private static final AtomicReference<Long> threadId = new AtomicReference<>(0L);\n-  private static final AtomicReference<CountDownLatch> latch = new AtomicReference<>();\n+  private static final AtomicReference<Long> THREAD_ID =\n+      new AtomicReference<>(0L);\n+  private static final AtomicReference<CountDownLatch> LATCH =\n+      new AtomicReference<>(new CountDownLatch(0));\n \n   @Rule\n-  public DistributedRule distributedRule = new DistributedRule();\n+  public DistributedRule distributedRule = new DistributedRule(1);\n \n   @Before\n   public void setUp() {\n     getVM(0).invoke(() -> {\n-      latch.set(null);\n-      threadId.set(0L);\n+      LATCH.set(new CountDownLatch(1));\n+      THREAD_ID.set(0L);\n     });\n   }\n \n   @After\n   public void tearDown() {\n-    getVM(0).invoke(() -> {\n-      CountDownLatch latchInVM0 = latch.get();\n-      while (latchInVM0 != null && latchInVM0.getCount() > 0) {\n-        latchInVM0.countDown();\n-      }\n-    });\n+    getVM(0).invoke(() -> LATCH.get().countDown());\n   }\n \n   @Test\n-  public void await_runnable_timeout_includesStackTraceAsCause() {\n+  public void awaitWithRunnableTimeoutExceptionIncludesRemoteStackTraceAsCause() {\n     AsyncInvocation<Void> hangInVM0 = getVM(0).invokeAsync(() -> {\n-      latch.set(new CountDownLatch(1));\n-      threadId.set(Thread.currentThread().getId());\n-      latch.get().await(TIMEOUT_MILLIS, MILLISECONDS);\n+      THREAD_ID.set(Thread.currentThread().getId());\n+      LATCH.get().await(getTimeout().toMillis(), MILLISECONDS);\n     });\n \n     long remoteThreadId = getVM(0).invoke(() -> {\n-      await().until(() -> threadId.get() > 0);\n-      return threadId.get();\n+      await().until(() -> THREAD_ID.get() > 0);\n+      return THREAD_ID.get();\n     });\n \n     Throwable thrown = catchThrowable(() -> hangInVM0.await(1, SECONDS));\n"}}, {"oid": "8ae9198c5e9cda8d3fa3a2d3659f53e89815aed7", "url": "https://github.com/apache/geode/commit/8ae9198c5e9cda8d3fa3a2d3659f53e89815aed7", "message": "GEODE-8634: Fix AsyncInvocationTimeoutDistributedTest flakiness\n\nReset latch and threadId before each test.", "committedDate": "2020-12-04T18:17:46Z", "type": "commit"}, {"oid": "8ae9198c5e9cda8d3fa3a2d3659f53e89815aed7", "url": "https://github.com/apache/geode/commit/8ae9198c5e9cda8d3fa3a2d3659f53e89815aed7", "message": "GEODE-8634: Fix AsyncInvocationTimeoutDistributedTest flakiness\n\nReset latch and threadId before each test.", "committedDate": "2020-12-04T18:17:46Z", "type": "forcePushed"}]}