{"pr_number": 4692, "pr_title": "GEODE-7799: Distribute rebalance status to other locators", "pr_createdAt": "2020-02-12T06:33:04Z", "pr_url": "https://github.com/apache/geode/pull/4692", "timeline": [{"oid": "f17212f8de49c4625a8782079f2acf5d88bc30c4", "url": "https://github.com/apache/geode/commit/f17212f8de49c4625a8782079f2acf5d88bc30c4", "message": "WIP\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-07T14:58:25Z", "type": "commit"}, {"oid": "0e38bc6a7cf8e6815fed6d2710ccaabc4d02518d", "url": "https://github.com/apache/geode/commit/0e38bc6a7cf8e6815fed6d2710ccaabc4d02518d", "message": "Added test that uses a second client to verify with a second locator\nthat the aysnc operation is currently not visible.", "committedDate": "2020-02-07T15:00:15Z", "type": "commit"}, {"oid": "c70f287e2712e22dfcae9442dc707731bd722c61", "url": "https://github.com/apache/geode/commit/c70f287e2712e22dfcae9442dc707731bd722c61", "message": "Introduced persistence service\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-07T15:00:15Z", "type": "commit"}, {"oid": "90d11a620c1733a1606177bc38497400eb119b3b", "url": "https://github.com/apache/geode/commit/90d11a620c1733a1606177bc38497400eb119b3b", "message": "WIP: started refactoring of future code in OperationHistoryManager. Added more persistent state to OperationInstance", "committedDate": "2020-02-07T15:00:15Z", "type": "commit"}, {"oid": "2293deb34f6aa70852516736258c664b6e01492e", "url": "https://github.com/apache/geode/commit/2293deb34f6aa70852516736258c664b6e01492e", "message": "Adapt InternalOperationHistoryPersistenceService\n\n- to changed OperationHistoryPersistenceService interface", "committedDate": "2020-02-07T15:00:15Z", "type": "commit"}, {"oid": "b3abb3f089e56f03e644424958e557e32ad24cce", "url": "https://github.com/apache/geode/commit/b3abb3f089e56f03e644424958e557e32ad24cce", "message": "WIP - get code to compile again\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-07T15:00:15Z", "type": "commit"}, {"oid": "4556e42c788703309f520b537ff921ba008e7932", "url": "https://github.com/apache/geode/commit/4556e42c788703309f520b537ff921ba008e7932", "message": "WIP: removed some of the client support for async futures", "committedDate": "2020-02-07T15:00:15Z", "type": "commit"}, {"oid": "9ab2b49ddb14653951165d0feb12df0328b00c8d", "url": "https://github.com/apache/geode/commit/9ab2b49ddb14653951165d0feb12df0328b00c8d", "message": "WIP - more test updates\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "e8be02c4bad0a7976c16a2ddb4ae555037de19df", "url": "https://github.com/apache/geode/commit/e8be02c4bad0a7976c16a2ddb4ae555037de19df", "message": "WIP - Push creation of Future down to OperationHistoryManager", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "eff94ff0f3c675b82482d5b4f968dcbaaa822ee1", "url": "https://github.com/apache/geode/commit/eff94ff0f3c675b82482d5b4f968dcbaaa822ee1", "message": "WIP - re-do OperationHistoryManager tests\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "db1afa78e8bafb762b3680e120bfd5e9e19928f3", "url": "https://github.com/apache/geode/commit/db1afa78e8bafb762b3680e120bfd5e9e19928f3", "message": "WIP - OperationHistoryManagerTest completish\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "18b75de77c85aea0bfb28967fc6d89cceffcf26e", "url": "https://github.com/apache/geode/commit/18b75de77c85aea0bfb28967fc6d89cceffcf26e", "message": "WIP - test refinement\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "10979008bb7bcf6b1c745ddf3ce3100758728092", "url": "https://github.com/apache/geode/commit/10979008bb7bcf6b1c745ddf3ce3100758728092", "message": "Simplify tests; op hist.mgr extracts cause\n\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "5f04f67a074f0ad240618bc499fcc413a6fc6df3", "url": "https://github.com/apache/geode/commit/5f04f67a074f0ad240618bc499fcc413a6fc6df3", "message": "WIP - remove Future map\n\n- spotless Apply\n- remove unused CountDownLatch instances\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "2d370d6ce3a1d0ac39a3a2e7943446a45028d2d7", "url": "https://github.com/apache/geode/commit/2d370d6ce3a1d0ac39a3a2e7943446a45028d2d7", "message": "operation expiration test now has some instances that have finished but are not expired", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "3b4ef06bf4e8864b940d3a351d74eb78277b6cc8", "url": "https://github.com/apache/geode/commit/3b4ef06bf4e8864b940d3a351d74eb78277b6cc8", "message": "WIP - start work on persistence\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "0d0477c7c09810d411289b48ea364da86b415fbb", "url": "https://github.com/apache/geode/commit/0d0477c7c09810d411289b48ea364da86b415fbb", "message": "renamed OperationInstance to OperationState and made it a top level class", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "c990f6866f5ef9da7d9bb1a26041a8d778462077", "url": "https://github.com/apache/geode/commit/c990f6866f5ef9da7d9bb1a26041a8d778462077", "message": "changed supplyer to a region", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "d5118ff056969266be5258cc5b500aa3ab06328c", "url": "https://github.com/apache/geode/commit/d5118ff056969266be5258cc5b500aa3ab06328c", "message": "save now uses the new version of create", "committedDate": "2020-02-07T15:03:21Z", "type": "commit"}, {"oid": "acf55529fc864acdbe17cd21d45679a2d4d0fffa", "url": "https://github.com/apache/geode/commit/acf55529fc864acdbe17cd21d45679a2d4d0fffa", "message": "Operation persistence service recordEnd()\n\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "962d9e4274c57640788d55c331d9f0a489d8161d", "url": "https://github.com/apache/geode/commit/962d9e4274c57640788d55c331d9f0a489d8161d", "message": "Remove update() method (replaced by recordEnd())", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "9eb4b85464f5142ab52bff8d8d2c0982014b22d5", "url": "https://github.com/apache/geode/commit/9eb4b85464f5142ab52bff8d8d2c0982014b22d5", "message": "ROHPS.get()", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "33a4133703505eb8a282d3de7aaa8382f6acbc7c", "url": "https://github.com/apache/geode/commit/33a4133703505eb8a282d3de7aaa8382f6acbc7c", "message": "WIP - start on Region creation\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "7a7a0e15ea02b907f063e542cc78728dd07a3be4", "url": "https://github.com/apache/geode/commit/7a7a0e15ea02b907f063e542cc78728dd07a3be4", "message": "WIP - make code compile after rebase to develop\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "73e2d52b72b145c259162a5e8e4daf55241a794a", "url": "https://github.com/apache/geode/commit/73e2d52b72b145c259162a5e8e4daf55241a794a", "message": "WIP - start to add Region creation\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "6e875f1c8951570e2b587b3bcd670517182514b9", "url": "https://github.com/apache/geode/commit/6e875f1c8951570e2b587b3bcd670517182514b9", "message": "WIP continued test coverage, moved thread start to OperationManager\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "fb9b3ecf64d46eecd68faa876869221d082d81c1", "url": "https://github.com/apache/geode/commit/fb9b3ecf64d46eecd68faa876869221d082d81c1", "message": "RegionOperationHistoryPersistenceServiceTest now passes", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "ee4716098f3cff0feb93f45aac3f9576e90b0840", "url": "https://github.com/apache/geode/commit/ee4716098f3cff0feb93f45aac3f9576e90b0840", "message": "RegionOperationHistoryPersistenceService \"list\" is now implemented and unit tested.\nAlso OperationState now has equals and hashCode", "committedDate": "2020-02-07T15:03:22Z", "type": "commit"}, {"oid": "24d00eb3c875469feac05f3c59e02a2505be96db", "url": "https://github.com/apache/geode/commit/24d00eb3c875469feac05f3c59e02a2505be96db", "message": "WIP - Fixed serialization of OperationState\n\n- Added creation of Region code and unit tests\n- Rebase on develop and subsequent push -f to branch\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-07T15:04:05Z", "type": "commit"}, {"oid": "2ed85c64676cbe2e669b2d891a1cc6db874d581e", "url": "https://github.com/apache/geode/commit/2ed85c64676cbe2e669b2d891a1cc6db874d581e", "message": "WIP - minor updates after second rebase on develop\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-07T17:20:24Z", "type": "commit"}, {"oid": "01aaa706e2f539bd99b2debcab9c587c38be3901", "url": "https://github.com/apache/geode/commit/01aaa706e2f539bd99b2debcab9c587c38be3901", "message": "WIP: cleaned up checkStatus on the locator", "committedDate": "2020-02-07T18:05:10Z", "type": "commit"}, {"oid": "6a25bf51dc4235b35fccf9575bf5e7596c27f67b", "url": "https://github.com/apache/geode/commit/6a25bf51dc4235b35fccf9575bf5e7596c27f67b", "message": "WIP: changed the return type of checkStatus and added it to the interface", "committedDate": "2020-02-07T18:34:04Z", "type": "commit"}, {"oid": "3c4f9a7515d1c6cd1cf939559037077885579867", "url": "https://github.com/apache/geode/commit/3c4f9a7515d1c6cd1cf939559037077885579867", "message": "Change operation list filter to allow for extension\n\n- Fix rest test to follow new operation status format\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-07T20:12:56Z", "type": "commit"}, {"oid": "d1d796c84ae4d29d74c1af53970bc555a033b3c7", "url": "https://github.com/apache/geode/commit/d1d796c84ae4d29d74c1af53970bc555a033b3c7", "message": "Add tests for ClientClusterManagementService and related classes\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-07T23:10:39Z", "type": "commit"}, {"oid": "4756553c4e6793aac3782ef1003dd496c9f4faed", "url": "https://github.com/apache/geode/commit/4756553c4e6793aac3782ef1003dd496c9f4faed", "message": "WIP - start of transport testing\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-10T22:51:58Z", "type": "commit"}, {"oid": "8f230daaecfd8277f4a909373a653dd4e3fd9812", "url": "https://github.com/apache/geode/commit/8f230daaecfd8277f4a909373a653dd4e3fd9812", "message": "WIP - start updating RebalanceManagementDunitTest\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-11T17:42:30Z", "type": "commit"}, {"oid": "cebe51050705fa3ef6357416657986180b2fb445", "url": "https://github.com/apache/geode/commit/cebe51050705fa3ef6357416657986180b2fb445", "message": "cleaned up some new test code", "committedDate": "2020-02-11T18:56:26Z", "type": "commit"}, {"oid": "13434c7428590f0e44f373edfa60d022e68ba03c", "url": "https://github.com/apache/geode/commit/13434c7428590f0e44f373edfa60d022e68ba03c", "message": "WIP - refactor everything\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-11T23:26:21Z", "type": "commit"}, {"oid": "6a3281897bbe4f7ffdf2074a6ea8b2c4be3db746", "url": "https://github.com/apache/geode/commit/6a3281897bbe4f7ffdf2074a6ea8b2c4be3db746", "message": "WIP - make RebalanceManagementDunitTest work", "committedDate": "2020-02-12T05:04:23Z", "type": "commit"}, {"oid": "813e4445a8766340b66694f68f044ff89ff0904c", "url": "https://github.com/apache/geode/commit/813e4445a8766340b66694f68f044ff89ff0904c", "message": "renamed checkStatus to get", "committedDate": "2020-02-12T06:51:14Z", "type": "commit"}, {"oid": "2f82c36a1d605eba123f98c017141a00b59092e1", "url": "https://github.com/apache/geode/commit/2f82c36a1d605eba123f98c017141a00b59092e1", "message": "WIP - fix failing tests in pipeline\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-12T16:05:56Z", "type": "commit"}, {"oid": "28fbd5e06c0469e851b52831eb742fdef3012a28", "url": "https://github.com/apache/geode/commit/28fbd5e06c0469e851b52831eb742fdef3012a28", "message": "WIP - fix ClusterManagementServiceBuilderTest\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-12T16:54:58Z", "type": "commit"}, {"oid": "e78e979c1faa6b993d4d66bc8ab6b3505a1205f8", "url": "https://github.com/apache/geode/commit/e78e979c1faa6b993d4d66bc8ab6b3505a1205f8", "message": "WIP - spA\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-12T17:18:54Z", "type": "commit"}, {"oid": "9c705868f56cc111d3e66ef447adf3b62cb44cf1", "url": "https://github.com/apache/geode/commit/9c705868f56cc111d3e66ef447adf3b62cb44cf1", "message": "WIP - fix core serializables test\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-12T18:53:23Z", "type": "commit"}, {"oid": "9d5724f82948c6a7b6e0ad7a508950b35a28622a", "url": "https://github.com/apache/geode/commit/9d5724f82948c6a7b6e0ad7a508950b35a28622a", "message": "removed OperationState from sanctioned-geode-management-serializables.txt (it is in the core .txt file)", "committedDate": "2020-02-12T18:56:51Z", "type": "commit"}, {"oid": "96d0213b9920fe4698690f7bcf51601ad9f5e5ca", "url": "https://github.com/apache/geode/commit/96d0213b9920fe4698690f7bcf51601ad9f5e5ca", "message": "Test refinements\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-12T21:57:42Z", "type": "commit"}, {"oid": "236a3e0c776aa5233aca0a53fc62748b60d08369", "url": "https://github.com/apache/geode/commit/236a3e0c776aa5233aca0a53fc62748b60d08369", "message": "changed history region to no longer be persistent. Wanted to see how many of the test failures are caused by the extra disk store", "committedDate": "2020-02-12T23:14:06Z", "type": "commit"}, {"oid": "8c18596f5b59bd03f15abfa4e5e75128e0ab7172", "url": "https://github.com/apache/geode/commit/8c18596f5b59bd03f15abfa4e5e75128e0ab7172", "message": "Fix ClusterManagementServiceBuilderDUnitTest", "committedDate": "2020-02-13T14:07:06Z", "type": "commit"}, {"oid": "bb4144e332348bf017410d63475e250096f1163e", "url": "https://github.com/apache/geode/commit/bb4144e332348bf017410d63475e250096f1163e", "message": "Remove surplus interface\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-13T16:33:59Z", "type": "commit"}, {"oid": "6a980b48545e4a28483ea41e7d139e1c6395df62", "url": "https://github.com/apache/geode/commit/6a980b48545e4a28483ea41e7d139e1c6395df62", "message": "cleaned up removal of persistence for operation history region", "committedDate": "2020-02-13T17:34:58Z", "type": "commit"}, {"oid": "41410eee4646045f61f0319b454d05ad81f78752", "url": "https://github.com/apache/geode/commit/41410eee4646045f61f0319b454d05ad81f78752", "message": "more cleanup of removing persistence\nrenamed classes with \"OperationHistoryPersistence\" to be \"OperationStateDistribution\"", "committedDate": "2020-02-13T17:47:37Z", "type": "commit"}, {"oid": "640f1260965d3e9f0015f983880e94e5823081ba", "url": "https://github.com/apache/geode/commit/640f1260965d3e9f0015f983880e94e5823081ba", "message": "Added OperationStateTest", "committedDate": "2020-02-13T19:27:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NjY4NA==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379556684", "bodyText": "why do we need this requireNonNull here?", "author": "jinmeiliao", "createdAt": "2020-02-14T17:34:46Z", "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClientClusterManagementServiceDunitTest.java", "diffHunk": "@@ -115,7 +119,8 @@ public void createRegionWithGroup() {\n \n     locator.invoke(() -> {\n       InternalConfigurationPersistenceService persistenceService =\n-          ClusterStartupRule.getLocator().getConfigurationPersistenceService();\n+          Objects.requireNonNull(ClusterStartupRule.getLocator())", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNTM3Ng==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379605376", "bodyText": "why do we need this requireNonNull here?\n\nIt's just to reduce the warnings you get in the code.", "author": "jmelchio", "createdAt": "2020-02-14T19:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NjY4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4MjYyMQ==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379582621", "bodyText": "looks like this change is prompted by similar code in InternalConfigurationPersistenceService to create the internal region. Would be nice to change that code to use this method as well.", "author": "jinmeiliao", "createdAt": "2020-02-14T18:35:09Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/RegionFactoryImpl.java", "diffHunk": "@@ -43,4 +53,22 @@ public RegionFactoryImpl(InternalCache cache, String regionAttributesId) {\n   public RegionFactoryImpl(RegionFactory<K, V> regionFactory) {\n     super(regionFactory);\n   }\n+\n+  public void setInternalRegionArguments(\n+      InternalRegionArguments internalRegionArguments) {\n+    this.internalRegionArguments = internalRegionArguments;\n+  }\n+\n+  @Override\n+  public Region<K, V> create(String name)", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMjYxNQ==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379602615", "bodyText": "That is a good idea but I think we should do it in another pull request. I will file a refactor ticket about not using the deprecated AttributesFactory to create internal regions. So this PR introduces the new RegionFactoryImpl but will only use it in the new code in this PR. The other ticket can look for other places in the code (like the one you mention) that use deprecated apis to create internal regions.", "author": "dschneider-pivotal", "createdAt": "2020-02-14T19:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4MjYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0MDY3Ng==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379640676", "bodyText": "I filed: https://issues.apache.org/jira/browse/GEODE-7803 for this", "author": "dschneider-pivotal", "createdAt": "2020-02-14T20:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4MjYyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4NjI1Mw==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379586253", "bodyText": "looks like this is only used in the test now. Should be removed.", "author": "jinmeiliao", "createdAt": "2020-02-14T18:43:41Z", "path": "geode-management/src/main/java/org/apache/geode/management/internal/ClusterManagementOperationStatusResult.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.apache.geode.management.runtime.OperationResult;\n \n @Experimental\n+// TODO can this class be removed?", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzU0Mw==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379603543", "bodyText": "Thanks for catching this! We intended to remove it but forgot to do so", "author": "dschneider-pivotal", "createdAt": "2020-02-14T19:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4NjI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ec4726be03dabf414c51e495d909e9c1336018df", "chunk": "diff --git a/geode-management/src/main/java/org/apache/geode/management/internal/ClusterManagementOperationStatusResult.java b/geode-management/src/main/java/org/apache/geode/management/internal/ClusterManagementOperationStatusResult.java\ndeleted file mode 100644\nindex bbb88cf7a3..0000000000\n--- a/geode-management/src/main/java/org/apache/geode/management/internal/ClusterManagementOperationStatusResult.java\n+++ /dev/null\n\n@@ -1,75 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.geode.management.internal;\n-\n-import java.util.Date;\n-\n-import com.fasterxml.jackson.annotation.JsonFormat;\n-\n-import org.apache.geode.annotations.Experimental;\n-import org.apache.geode.management.api.ClusterManagementResult;\n-import org.apache.geode.management.runtime.OperationResult;\n-\n-@Experimental\n-// TODO can this class be removed?\n-public class ClusterManagementOperationStatusResult<V extends OperationResult>\n-    extends ClusterManagementResult {\n-  public ClusterManagementOperationStatusResult() {}\n-\n-  public ClusterManagementOperationStatusResult(ClusterManagementResult status) {\n-    super(status);\n-  }\n-\n-  private V operationResult;\n-  private String operator;\n-\n-  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\")\n-  private Date operationStart;\n-\n-  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\")\n-  private Date operationEnded;\n-\n-  public V getResult() {\n-    return operationResult;\n-  }\n-\n-  public void setResult(V operationResult) {\n-    this.operationResult = operationResult;\n-  }\n-\n-  public Date getOperationStart() {\n-    return operationStart;\n-  }\n-\n-  public void setOperationStart(Date operationStart) {\n-    this.operationStart = operationStart;\n-  }\n-\n-  public Date getOperationEnded() {\n-    return operationEnded;\n-  }\n-\n-  public void setOperationEnded(Date operationEnded) {\n-    this.operationEnded = operationEnded;\n-  }\n-\n-  public String getOperator() {\n-    return operator;\n-  }\n-\n-  public void setOperator(String operator) {\n-    this.operator = operator;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4OTk0Mw==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379589943", "bodyText": "I am always not a fan of  \"Impl\" class. Wondering why we couldn't make RebalanceResult a concrete class directly.", "author": "jinmeiliao", "createdAt": "2020-02-14T18:52:26Z", "path": "geode-management/src/test/java/org/apache/geode/management/api/ClusterManagementOperationResultTest.java", "diffHunk": "@@ -37,20 +39,32 @@ public void setUp() {\n \n   @Test\n   public void serialize() throws Exception {\n-    CompletableFuture<TestOperationResult> operationResult =\n-        new CompletableFuture<>();\n     ClusterManagementResult result1 = new ClusterManagementResult();\n     result1.setStatus(StatusCode.OK, \"Success!!\");\n-    ClusterManagementOperationResult<TestOperationResult> result =\n-        new ClusterManagementOperationResult<>(result1, operationResult, new Date(),\n-            new CompletableFuture<>(), \"operator\", \"id\");\n+    ClusterManagementOperationResult<ClusterManagementOperation<OperationResult>, OperationResult> result =\n+        new ClusterManagementOperationResult<>(result1, new Date(), new Date(),\n+            null, \"id\", null, null);\n     String json = mapper.writeValueAsString(result);\n     System.out.println(json);\n-    ClusterManagementOperationResult value =\n+    ClusterManagementOperationResult<ClusterManagementOperation<OperationResult>, OperationResult> value =\n         mapper.readValue(json, ClusterManagementOperationResult.class);\n     assertThat(value.getStatusMessage()).isEqualTo(\"Success!!\");\n   }\n \n-  static class TestOperationResult implements OperationResult {\n+  @Test\n+  public void serializeRebal() throws Exception {\n+    ClusterManagementResult result1 = new ClusterManagementResult();\n+    result1.setStatus(StatusCode.OK, \"Success!!\");\n+    RebalanceOperation rebalanceOperation = new RebalanceOperation();\n+    rebalanceOperation.setOperator(\"operator\");\n+    ClusterManagementOperationResult<RebalanceOperation, RebalanceResult> result =\n+        new ClusterManagementOperationResult(result1, new Date(), new Date(),\n+            rebalanceOperation, \"id\", new RebalanceResultImpl(), null);", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYxNDE2NQ==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379614165", "bodyText": "Yes, let us look at that. Agree that given that we're extending an interface already in RebalanceResult it makes sense to make RebalanceResult the implemenation.", "author": "jmelchio", "createdAt": "2020-02-14T19:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4OTk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNzYxNg==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379637616", "bodyText": "This PR did not introduce RebalanceResult nor RebalanceResultImpl.\nI prefer keeping the current interface and having an internal implementation class. This prevents our external apis from having internal things exposed. For example, in this case, the external api does not need a constructor nor settors.\nI think it would be good to have more of our external api contract defined by interfaces and try to minimize the number of classes in it.", "author": "dschneider-pivotal", "createdAt": "2020-02-14T20:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4OTk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzODUyMg==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379638522", "bodyText": "ps: I'm fine with some other name for the class that implements the RebalanceResult.\nI also find it odd that RebalanceResult has \"getSuccess()\" and \"getStatusMessage()\" but its super interface \"OperationResult\" is empty. It seems like both of these would be reasonable things to expect from every OperationResult.", "author": "dschneider-pivotal", "createdAt": "2020-02-14T20:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4OTk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMzgwMQ==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379703801", "bodyText": "I filed a geode ticket about moving those methods up to OperationResult.\nThe team talked and we decided it would be best to keep the impl class", "author": "dschneider-pivotal", "createdAt": "2020-02-15T00:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4OTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a14e5ca6ca50daccfc9cba24e0398e23d73aac5a", "chunk": "diff --git a/geode-management/src/test/java/org/apache/geode/management/api/ClusterManagementOperationResultTest.java b/geode-management/src/test/java/org/apache/geode/management/api/ClusterManagementOperationResultTest.java\nindex 14c3c00177..5819253842 100644\n--- a/geode-management/src/test/java/org/apache/geode/management/api/ClusterManagementOperationResultTest.java\n+++ b/geode-management/src/test/java/org/apache/geode/management/api/ClusterManagementOperationResultTest.java\n\n@@ -39,10 +39,8 @@ public class ClusterManagementOperationResultTest {\n \n   @Test\n   public void serialize() throws Exception {\n-    ClusterManagementResult result1 = new ClusterManagementResult();\n-    result1.setStatus(StatusCode.OK, \"Success!!\");\n     ClusterManagementOperationResult<ClusterManagementOperation<OperationResult>, OperationResult> result =\n-        new ClusterManagementOperationResult<>(result1, new Date(), new Date(),\n+        new ClusterManagementOperationResult<>(StatusCode.OK, \"Success!!\", new Date(), new Date(),\n             null, \"id\", null, null);\n     String json = mapper.writeValueAsString(result);\n     System.out.println(json);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NTIyNg==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379595226", "bodyText": "I know this isn't introduced by this PR, but now I am wondering: V really isn't used by this interface, why do we need to declare it here?", "author": "jinmeiliao", "createdAt": "2020-02-14T19:04:27Z", "path": "geode-management/src/main/java/org/apache/geode/management/api/ClusterManagementOperation.java", "diffHunk": "@@ -29,12 +31,15 @@\n  * @param <V> the result type of the operation\n  */\n @SuppressWarnings(\"unused\")\n-public interface ClusterManagementOperation<V extends OperationResult> {\n+public interface ClusterManagementOperation<V extends OperationResult>", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYxNTIxMw==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379615213", "bodyText": "I know this isn't introduced by this PR, but now I am wondering: V really isn't used by this interface, why do we need to declare it here?\n\nWe need this to maintain the coupling between the operation and the result in the implementations of ClusterManagementOperation.", "author": "jmelchio", "createdAt": "2020-02-14T19:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NTIyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTIwNQ==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379599205", "bodyText": "this is something that I had hoped that could be built in the result that's coming back from the \"start\" operation.", "author": "jinmeiliao", "createdAt": "2020-02-14T19:13:42Z", "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/RebalanceManagementDunitTest.java", "diffHunk": "@@ -36,92 +37,110 @@\n import org.apache.geode.management.operation.RebalanceOperation;\n import org.apache.geode.management.runtime.RebalanceRegionResult;\n import org.apache.geode.management.runtime.RebalanceResult;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n import org.apache.geode.test.dunit.IgnoredException;\n import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n import org.apache.geode.test.dunit.rules.MemberVM;\n-import org.apache.geode.test.junit.rules.GfshCommandRule;\n import org.apache.geode.test.junit.rules.MemberStarterRule;\n \n public class RebalanceManagementDunitTest {\n \n   @ClassRule\n   public static ClusterStartupRule cluster = new ClusterStartupRule();\n \n-  private static MemberVM locator, server1, server2;\n-\n-  private static ClusterManagementService client;\n-\n-  @ClassRule\n-  public static GfshCommandRule gfsh = new GfshCommandRule();\n+  private static ClusterManagementService client1, client2;\n \n   @BeforeClass\n-  public static void beforeClass() throws Exception {\n-    locator = cluster.startLocatorVM(0, MemberStarterRule::withHttpService);\n-    server1 = cluster.startServerVM(1, \"group1\", locator.getPort());\n-    server2 = cluster.startServerVM(2, \"group2\", locator.getPort());\n-\n-    client = new ClusterManagementServiceBuilder()\n-        .setPort(locator.getHttpPort())\n+  public static void beforeClass() {\n+    MemberVM locator1 = cluster.startLocatorVM(0, MemberStarterRule::withHttpService);\n+    int locator1Port = locator1.getPort();\n+    MemberVM locator2 =\n+        cluster.startLocatorVM(1, l -> l.withHttpService().withConnectionToLocator(locator1Port));\n+    cluster.startServerVM(2, \"group1\", locator1Port);\n+    cluster.startServerVM(3, \"group2\", locator1Port);\n+\n+    client1 = new ClusterManagementServiceBuilder()\n+        .setHost(\"localhost\")\n+        .setPort(locator1.getHttpPort())\n+        .build();\n+    client2 = new ClusterManagementServiceBuilder()\n+        .setHost(\"localhost\")\n+        .setPort(locator2.getHttpPort())\n         .build();\n-    gfsh.connect(locator);\n \n     // create regions\n     Region regionConfig = new Region();\n     regionConfig.setName(\"customers1\");\n     regionConfig.setType(RegionType.PARTITION);\n-    client.create(regionConfig);\n-    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/customers1\", 2);\n+    client1.create(regionConfig);\n+    locator1.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/customers1\", 2);\n \n     regionConfig = new Region();\n     regionConfig.setName(\"customers2\");\n     regionConfig.setType(RegionType.PARTITION);\n-    client.create(regionConfig);\n-    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/customers2\", 2);\n+    client1.create(regionConfig);\n+    locator1.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/customers2\", 2);\n   }\n \n   @Test\n-  public void rebalance() throws Exception {\n-    ClusterManagementOperationResult<RebalanceResult> cmr =\n-        client.start(new RebalanceOperation());\n-    assertThat(cmr.isSuccessful()).isTrue();\n+  public void rebalance() {\n+    ClusterManagementOperationResult<RebalanceOperation, RebalanceResult> startResult =\n+        client1.start(new RebalanceOperation());\n+    assertThat(startResult.isSuccessful()).isTrue();\n     long now = System.currentTimeMillis();\n-    assertThat(cmr.getOperationStart().getTime()).isBetween(now - 60000, now);\n+    assertThat(startResult.getOperationStart().getTime()).isBetween(now - 60000, now);\n \n-    RebalanceResult result = cmr.getFutureResult().get();\n-    long end = cmr.getFutureOperationEnded().get().getTime();\n+    ClusterManagementOperationResult<RebalanceOperation, RebalanceResult> endResult =\n+        waitForStartToEnd(client1, startResult.getOperationId());\n+    long end = endResult.getOperationEnd().getTime();\n     now = System.currentTimeMillis();\n     assertThat(end).isBetween(now - 60000, now)\n-        .isGreaterThanOrEqualTo(cmr.getOperationStart().getTime());\n+        .isGreaterThanOrEqualTo(endResult.getOperationStart().getTime());\n+    RebalanceResult result = endResult.getOperationResult();\n     assertThat(result.getRebalanceRegionResults().size()).isEqualTo(2);\n     RebalanceRegionResult firstRegionSummary = result.getRebalanceRegionResults().get(0);\n     assertThat(firstRegionSummary.getRegionName()).isIn(\"customers1\", \"customers2\");\n   }\n \n+  private ClusterManagementOperationResult<RebalanceOperation, RebalanceResult> waitForStartToEnd(", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMzkxNA==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379703914", "bodyText": "We decided as a team to look into adding a way for the java api user to block until the started op has completed.", "author": "dschneider-pivotal", "createdAt": "2020-02-15T00:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NTY5NA==", "url": "https://github.com/apache/geode/pull/4692#discussion_r380985694", "bodyText": "We added \"getFuture\" to the ClusterManagementService. We thought this was cleaner than adding \"getFuture\" to ClusterManagementOperationResult because if we did that it would need to have a reference to the ClusterManagementService to repeatedly call \"get\".", "author": "dschneider-pivotal", "createdAt": "2020-02-18T22:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3897cb63b4df008e78541fc2f7416992a40b683f", "chunk": "diff --git a/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/RebalanceManagementDunitTest.java b/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/RebalanceManagementDunitTest.java\nindex 4f15fc5540..352f3014ee 100644\n--- a/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/RebalanceManagementDunitTest.java\n+++ b/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/RebalanceManagementDunitTest.java\n\n@@ -83,7 +83,7 @@ public class RebalanceManagementDunitTest {\n   }\n \n   @Test\n-  public void rebalance() {\n+  public void rebalance() throws Exception {\n     ClusterManagementOperationResult<RebalanceOperation, RebalanceResult> startResult =\n         client1.start(new RebalanceOperation());\n     assertThat(startResult.isSuccessful()).isTrue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDY1Ng==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379660656", "bodyText": "Gang: please change it to one week.", "author": "jinmeiliao", "createdAt": "2020-02-14T21:49:17Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java", "diffHunk": "@@ -38,146 +33,88 @@\n  */\n @Experimental\n public class OperationHistoryManager {\n-  private final ConcurrentMap<String, OperationInstance> history;\n   private final long keepCompletedMillis;\n+  private final OperationStateDistributionService operationStateDistributionService;\n \n   /**\n    * set a default retention policy to keep results for 2 hours after completion\n    */\n-  public OperationHistoryManager() {\n-    this(2, TimeUnit.HOURS);\n+  public OperationHistoryManager(\n+      OperationStateDistributionService operationStateDistributionService) {\n+    this(2, TimeUnit.HOURS, operationStateDistributionService);", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxMjA2MQ==", "url": "https://github.com/apache/geode/pull/4692#discussion_r381012061", "bodyText": "done", "author": "dschneider-pivotal", "createdAt": "2020-02-19T00:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0c4acb60e6c50d8a453809e9b9c4359b688f3e70", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java b/geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java\nindex efa47b96ba..1eecbfff9e 100644\n--- a/geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java\n+++ b/geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java\n\n@@ -34,23 +34,23 @@ import org.apache.geode.management.runtime.OperationResult;\n @Experimental\n public class OperationHistoryManager {\n   private final long keepCompletedMillis;\n-  private final OperationStateDistributionService operationStateDistributionService;\n+  private final OperationStateStore operationStateStore;\n \n   /**\n    * set a default retention policy to keep results for 2 hours after completion\n    */\n   public OperationHistoryManager(\n-      OperationStateDistributionService operationStateDistributionService) {\n-    this(2, TimeUnit.HOURS, operationStateDistributionService);\n+      OperationStateStore operationStateStore) {\n+    this(2, TimeUnit.HOURS, operationStateStore);\n   }\n \n   /**\n    * set a custom retention policy to keep results for X amount of time after completion\n    */\n   public OperationHistoryManager(long keepCompleted, TimeUnit timeUnit,\n-      OperationStateDistributionService operationStateDistributionService) {\n+      OperationStateStore operationStateStore) {\n     keepCompletedMillis = timeUnit.toMillis(keepCompleted);\n-    this.operationStateDistributionService = operationStateDistributionService;\n+    this.operationStateStore = operationStateStore;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjEzOQ==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379662139", "bodyText": "internal region needs to be started with \"_\" or \"__\".", "author": "jinmeiliao", "createdAt": "2020-02-14T21:53:30Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RegionOperationStateDistributionService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.annotations.VisibleForTesting;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.InternalRegionArguments;\n+import org.apache.geode.internal.cache.RegionFactoryImpl;\n+import org.apache.geode.management.api.ClusterManagementOperation;\n+import org.apache.geode.management.runtime.OperationResult;\n+\n+public class RegionOperationStateDistributionService\n+    implements OperationStateDistributionService {\n+  private final Supplier<String> uniqueIdSupplier;\n+  private final Region<String, OperationState<ClusterManagementOperation<OperationResult>, OperationResult>> region;\n+\n+  public static final String OPERATION_STATE_REGION_NAME = \"OperationStateRegion\";", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNDAwNg==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379704006", "bodyText": "This has been changed to start with \"\". I found a validator that does not allow names to start with \"\".", "author": "dschneider-pivotal", "createdAt": "2020-02-15T00:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c4acb60e6c50d8a453809e9b9c4359b688f3e70", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/management/internal/operation/RegionOperationStateDistributionService.java b/geode-core/src/main/java/org/apache/geode/management/internal/operation/RegionOperationStateStore.java\nsimilarity index 89%\nrename from geode-core/src/main/java/org/apache/geode/management/internal/operation/RegionOperationStateDistributionService.java\nrename to geode-core/src/main/java/org/apache/geode/management/internal/operation/RegionOperationStateStore.java\nindex 16a4ad8ccf..038184f20c 100644\n--- a/geode-core/src/main/java/org/apache/geode/management/internal/operation/RegionOperationStateDistributionService.java\n+++ b/geode-core/src/main/java/org/apache/geode/management/internal/operation/RegionOperationStateStore.java\n\n@@ -31,22 +31,27 @@ import org.apache.geode.internal.cache.RegionFactoryImpl;\n import org.apache.geode.management.api.ClusterManagementOperation;\n import org.apache.geode.management.runtime.OperationResult;\n \n-public class RegionOperationStateDistributionService\n-    implements OperationStateDistributionService {\n+/**\n+ * This store uses a geode region to implement the storage of operation state.\n+ * It is a REPLICATE region so that the storage will be shared on each member\n+ * that hosts this region. Currently each locator hosts this region.\n+ */\n+public class RegionOperationStateStore\n+    implements OperationStateStore {\n   private final Supplier<String> uniqueIdSupplier;\n   private final Region<String, OperationState<ClusterManagementOperation<OperationResult>, OperationResult>> region;\n \n-  public static final String OPERATION_STATE_REGION_NAME = \"OperationStateRegion\";\n+  public static final String OPERATION_STATE_REGION_NAME = \"__OperationStateRegion\";\n \n   @VisibleForTesting\n-  RegionOperationStateDistributionService(\n+  RegionOperationStateStore(\n       Supplier<String> uniqueIdSupplier,\n       Region<String, OperationState<ClusterManagementOperation<OperationResult>, OperationResult>> region) {\n     this.uniqueIdSupplier = uniqueIdSupplier;\n     this.region = region;\n   }\n \n-  public RegionOperationStateDistributionService(InternalCache cache) {\n+  public RegionOperationStateStore(InternalCache cache) {\n     this(() -> UUID.randomUUID().toString(), getRegion(cache));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NjQ5MA==", "url": "https://github.com/apache/geode/pull/4692#discussion_r379676490", "bodyText": "Consider using Java's very nice Duration and Instant classes to carry information about durations and instants.", "author": "demery-pivotal", "createdAt": "2020-02-14T22:38:51Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java", "diffHunk": "@@ -38,146 +33,88 @@\n  */\n @Experimental\n public class OperationHistoryManager {\n-  private final ConcurrentMap<String, OperationInstance> history;\n   private final long keepCompletedMillis;\n+  private final OperationStateDistributionService operationStateDistributionService;\n \n   /**\n    * set a default retention policy to keep results for 2 hours after completion\n    */\n-  public OperationHistoryManager() {\n-    this(2, TimeUnit.HOURS);\n+  public OperationHistoryManager(\n+      OperationStateDistributionService operationStateDistributionService) {\n+    this(2, TimeUnit.HOURS, operationStateDistributionService);\n   }\n \n   /**\n    * set a custom retention policy to keep results for X amount of time after completion\n    */\n-  public OperationHistoryManager(long keepCompleted, TimeUnit timeUnit) {", "originalCommit": "640f1260965d3e9f0015f983880e94e5823081ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxMjE2Ng==", "url": "https://github.com/apache/geode/pull/4692#discussion_r381012166", "bodyText": "constructor now takes a Duration instead of a long and a TimeUnit", "author": "dschneider-pivotal", "createdAt": "2020-02-19T00:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NjQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0c4acb60e6c50d8a453809e9b9c4359b688f3e70", "chunk": "diff --git a/geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java b/geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java\nindex efa47b96ba..1eecbfff9e 100644\n--- a/geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java\n+++ b/geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java\n\n@@ -34,23 +34,23 @@ import org.apache.geode.management.runtime.OperationResult;\n @Experimental\n public class OperationHistoryManager {\n   private final long keepCompletedMillis;\n-  private final OperationStateDistributionService operationStateDistributionService;\n+  private final OperationStateStore operationStateStore;\n \n   /**\n    * set a default retention policy to keep results for 2 hours after completion\n    */\n   public OperationHistoryManager(\n-      OperationStateDistributionService operationStateDistributionService) {\n-    this(2, TimeUnit.HOURS, operationStateDistributionService);\n+      OperationStateStore operationStateStore) {\n+    this(2, TimeUnit.HOURS, operationStateStore);\n   }\n \n   /**\n    * set a custom retention policy to keep results for X amount of time after completion\n    */\n   public OperationHistoryManager(long keepCompleted, TimeUnit timeUnit,\n-      OperationStateDistributionService operationStateDistributionService) {\n+      OperationStateStore operationStateStore) {\n     keepCompletedMillis = timeUnit.toMillis(keepCompleted);\n-    this.operationStateDistributionService = operationStateDistributionService;\n+    this.operationStateStore = operationStateStore;\n   }\n \n   /**\n"}}, {"oid": "0c4acb60e6c50d8a453809e9b9c4359b688f3e70", "url": "https://github.com/apache/geode/commit/0c4acb60e6c50d8a453809e9b9c4359b688f3e70", "message": "renamed OperationStateDistributionService to OperationStateStore\nthe region that stores operation state now has a name that starts with \"__\"", "committedDate": "2020-02-15T00:55:20Z", "type": "commit"}, {"oid": "ec4726be03dabf414c51e495d909e9c1336018df", "url": "https://github.com/apache/geode/commit/ec4726be03dabf414c51e495d909e9c1336018df", "message": "removed ClusterManagementOperationStatusResult", "committedDate": "2020-02-15T01:03:23Z", "type": "commit"}, {"oid": "3897cb63b4df008e78541fc2f7416992a40b683f", "url": "https://github.com/apache/geode/commit/3897cb63b4df008e78541fc2f7416992a40b683f", "message": "Add synchronous get for operation results\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>", "committedDate": "2020-02-18T22:50:25Z", "type": "commit"}, {"oid": "21d3324c0de6022cdced624c6c280515263e5981", "url": "https://github.com/apache/geode/commit/21d3324c0de6022cdced624c6c280515263e5981", "message": "changed completed operation timeout from 2 hours to 7 days.\nThe Duration class is also used now instead of TimeUnit.", "committedDate": "2020-02-18T23:43:09Z", "type": "commit"}, {"oid": "3d80d7af2ab2c07a99d18e4e7c7fe6c23ee9510b", "url": "https://github.com/apache/geode/commit/3d80d7af2ab2c07a99d18e4e7c7fe6c23ee9510b", "message": "removed dead code: executor was never a ExecutorService instance", "committedDate": "2020-02-18T23:56:04Z", "type": "commit"}, {"oid": "a14e5ca6ca50daccfc9cba24e0398e23d73aac5a", "url": "https://github.com/apache/geode/commit/a14e5ca6ca50daccfc9cba24e0398e23d73aac5a", "message": "cleaned up ClusterManagementOperationResult", "committedDate": "2020-02-19T00:19:20Z", "type": "commit"}, {"oid": "17e9a4b623dd0fc65ec8bfa4e19721eff9e886e8", "url": "https://github.com/apache/geode/commit/17e9a4b623dd0fc65ec8bfa4e19721eff9e886e8", "message": "Merge branch 'develop' into distributed-rebalance-status", "committedDate": "2020-02-19T17:24:46Z", "type": "commit"}, {"oid": "02f971da5dc3510f386dd028bfa47ea2f345f67c", "url": "https://github.com/apache/geode/commit/02f971da5dc3510f386dd028bfa47ea2f345f67c", "message": "Merge branch 'develop' into distributed-rebalance-status", "committedDate": "2020-02-19T18:31:56Z", "type": "commit"}, {"oid": "be7d797398965dd935dc78f0eaa028896107133b", "url": "https://github.com/apache/geode/commit/be7d797398965dd935dc78f0eaa028896107133b", "message": "Fix RebalanceManagementDunitTest test for repeated run fail\n\nAuthored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-02-20T15:23:11Z", "type": "commit"}]}