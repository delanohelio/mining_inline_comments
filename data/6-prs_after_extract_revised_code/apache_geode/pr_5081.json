{"pr_number": 5081, "pr_title": "GEODE-8043 - Created JBossModuleService and implemented loadModule.", "pr_createdAt": "2020-05-08T22:00:42Z", "pr_url": "https://github.com/apache/geode/pull/5081", "timeline": [{"oid": "aa91bae9b12e1890bc678dec51bd1844226c78d5", "url": "https://github.com/apache/geode/commit/aa91bae9b12e1890bc678dec51bd1844226c78d5", "message": "GEODE-8043 - Update return type of loadService.", "committedDate": "2020-05-19T16:38:33Z", "type": "forcePushed"}, {"oid": "5641421a53db27ca03933109447815f1babb9caa", "url": "https://github.com/apache/geode/commit/5641421a53db27ca03933109447815f1babb9caa", "message": "GEODE-8043 - Create JBossModuleService and implement loadModule.", "committedDate": "2020-05-19T16:53:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMjcyMg==", "url": "https://github.com/apache/geode/pull/5081#discussion_r427502722", "bodyText": "possibly we need to remove these add them into their respective JIRA", "author": "kohlmu-pivotal", "createdAt": "2020-05-19T18:12:07Z", "path": "geode-modules/src/main/java/org/apache/geode/services/module/impl/JBossModuleService.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.services.module.impl;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.jar.JarFile;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.modules.LocalDependencySpecBuilder;\n+import org.jboss.modules.Module;\n+import org.jboss.modules.ModuleDependencySpecBuilder;\n+import org.jboss.modules.ModuleLoadException;\n+import org.jboss.modules.ModuleSpec;\n+import org.jboss.modules.ResourceLoader;\n+import org.jboss.modules.ResourceLoaderSpec;\n+import org.jboss.modules.ResourceLoaders;\n+import org.jboss.modules.Version;\n+\n+import org.apache.geode.annotations.Experimental;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.services.module.ModuleDescriptor;\n+import org.apache.geode.services.module.ModuleService;\n+\n+/**\n+ * Implementation of {@link ModuleService} using JBoss-Modules.\n+ */\n+@Experimental\n+public class JBossModuleService implements ModuleService {\n+\n+  private final Map<String, Module> modules = new HashMap<>();\n+\n+  private final GeodeModuleLoader moduleLoader = new GeodeModuleLoader();\n+\n+  private final Logger logger;\n+\n+  public JBossModuleService() {\n+    this(LogService.getLogger());\n+  }\n+\n+  public JBossModuleService(Logger logger) {\n+    this.logger = logger;\n+  }\n+\n+  public Module getModule(String name) {\n+    return modules.get(name);\n+  }\n+\n+  @Override\n+  public boolean loadModule(ModuleDescriptor moduleDescriptor) {\n+    logger.debug(String.format(\"Beginning to load module %s\", moduleDescriptor.getVersionedName()));\n+\n+    if (modules.containsKey(moduleDescriptor.getVersionedName())) {\n+      logger\n+          .warn(String.format(\"Module %s is already loaded.\", moduleDescriptor.getVersionedName()));\n+      return false;\n+    }\n+\n+    ModuleSpec.Builder builder = ModuleSpec.build(moduleDescriptor.getVersionedName());\n+    builder.setVersion(Version.parse(moduleDescriptor.getVersion()));\n+    builder.addDependency(new LocalDependencySpecBuilder()\n+        .setImportServices(true)\n+        .setExport(true)\n+        .build());\n+\n+    moduleDescriptor.getDependedOnModules().forEach(dependency -> {\n+      logger.debug(String.format(\"Adding dependency on module %s\", dependency));\n+      builder.addDependency(new ModuleDependencySpecBuilder()\n+          .setName(dependency)\n+          .build());\n+    });\n+\n+    try {\n+      for (String source : moduleDescriptor.getSources()) {\n+        logger.debug(String.format(\"Adding resource %s to module\", source));\n+        ResourceLoader resourceLoader =\n+            ResourceLoaders.createJarResourceLoader(new JarFile(source));\n+        builder.addResourceRoot(ResourceLoaderSpec.createResourceLoaderSpec(resourceLoader));\n+      }\n+    } catch (IOException e) {\n+      logger.error(e);\n+      return false;\n+    }\n+\n+    ModuleSpec moduleSpec = builder.create();\n+    moduleLoader.addModuleSpec(moduleSpec);\n+\n+    try {\n+      modules.put(moduleDescriptor.getVersionedName(),\n+          moduleLoader.loadModule(moduleSpec.getName()));\n+    } catch (ModuleLoadException e) {\n+      logger.error(e);\n+      return false;\n+    }\n+\n+    logger\n+        .debug(String.format(\"Module %s successfully loaded\", moduleDescriptor.getVersionedName()));\n+\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean unloadModule(String moduleName) {\n+    return false;\n+  }\n+\n+  @Override\n+  public <T> List<T> loadService(Class<T> service) {\n+    return null;\n+  }\n+\n+  @Override\n+  public <T> List<T> loadService(String serviceName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public boolean unloadService(String serviceName) {\n+    return false;\n+  }", "originalCommit": "5641421a53db27ca03933109447815f1babb9caa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNDkzOA==", "url": "https://github.com/apache/geode/pull/5081#discussion_r427524938", "bodyText": "Removed.", "author": "yozaner1324", "createdAt": "2020-05-19T18:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMjcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "f43b312957ec4ee4137dd348cb92709bcb278b55", "chunk": "diff --git a/geode-modules/src/main/java/org/apache/geode/services/module/impl/JBossModuleService.java b/geode-modules/src/main/java/org/apache/geode/services/module/impl/JBossModuleService.java\nindex f0bd46a865..9715709168 100644\n--- a/geode-modules/src/main/java/org/apache/geode/services/module/impl/JBossModuleService.java\n+++ b/geode-modules/src/main/java/org/apache/geode/services/module/impl/JBossModuleService.java\n\n@@ -17,7 +17,6 @@ package org.apache.geode.services.module.impl;\n \n import java.io.IOException;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.jar.JarFile;\n \n"}}, {"oid": "f43b312957ec4ee4137dd348cb92709bcb278b55", "url": "https://github.com/apache/geode/commit/f43b312957ec4ee4137dd348cb92709bcb278b55", "message": "GEODE-8043 - Create JBossModuleService and implement loadModule.", "committedDate": "2020-05-19T18:38:19Z", "type": "commit"}, {"oid": "f43b312957ec4ee4137dd348cb92709bcb278b55", "url": "https://github.com/apache/geode/commit/f43b312957ec4ee4137dd348cb92709bcb278b55", "message": "GEODE-8043 - Create JBossModuleService and implement loadModule.", "committedDate": "2020-05-19T18:38:19Z", "type": "forcePushed"}]}