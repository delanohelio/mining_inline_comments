{"pr_number": 4925, "pr_title": "GEODE-7852: test SNI client agin a geode (2-node) cluster", "pr_createdAt": "2020-04-08T00:07:19Z", "pr_url": "https://github.com/apache/geode/pull/4925", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMjkyOQ==", "url": "https://github.com/apache/geode/pull/4925#discussion_r405732929", "bodyText": "I would not have spelled that name correctly, kudos William", "author": "echobravopapa", "createdAt": "2020-04-08T18:36:45Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -87,7 +87,7 @@ public void connectToSNIProxyDocker() {\n         .port(15443)\n         .getExternalPort();\n     ClientCache cache = new ClientCacheFactory(gemFireProps)\n-        .addPoolLocator(\"locator\", 10334)\n+        .addPoolLocator(\"locator-maeve\", 10334)", "originalCommit": "5f2e10550267faf00c85d4fc259779cd6d202555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MTYxOQ==", "url": "https://github.com/apache/geode/pull/4925#discussion_r405741619", "bodyText": "\ud83e\udd20", "author": "Bill", "createdAt": "2020-04-08T18:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMjkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "be80c3a93e6592547d646558342b06768a15dba5", "chunk": "diff --git a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java\nindex d2d4c76104..b0495eb8a4 100644\n--- a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java\n+++ b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java\n\n@@ -91,11 +91,17 @@ public class ClientSNIAcceptanceTest {\n         .setPoolSocketFactory(ProxySocketFactories.sni(\"localhost\",\n             proxyPort))\n         .create();\n+    // the geode-starter.gfsh script has created a Region named \"jellyfish\" on the\n+    // server sitting behind the haproxy gateway. Show that an empty client cache can\n+    // put something in that region and then retrieve it.\n     Region<String, String> region =\n         cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n             .create(\"jellyfish\");\n     region.destroy(\"hello\");\n     region.put(\"hello\", \"world\");\n     assertThat(region.get(\"hello\")).isEqualTo(\"world\");\n+    // the geode-starter.gfsh script put an entry named \"foo\" into the region with the\n+    // value \"bar\"\n+    assertThat(region.get(\"foo\")).isEqualTo(\"bar\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNjA5Ng==", "url": "https://github.com/apache/geode/pull/4925#discussion_r405736096", "bodyText": "other than a reason to reference clementine what is dualServerTest2 accomplishing?\nI wonder if a test that is meant to fail where we attempt to cross the streams would be a useful addition....", "author": "echobravopapa", "createdAt": "2020-04-08T18:42:02Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class DualServerSNIAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private Properties gemFireProps;\n+  private ClientCache cache;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter-2.gfsh\"));\n+\n+    final String trustStorePath =\n+        createTempFileFromResource(ClientSNIAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+\n+    gemFireProps = new Properties();\n+    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    gemFireProps.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    gemFireProps.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    gemFireProps.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+  }\n+\n+\n+  @After\n+  public void after() {\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+  }\n+\n+  @Test\n+  public void dualServerTest() {\n+    verifyPutAndGet(\"group-dolores\", \"region-dolores\");\n+  }\n+\n+  @Test\n+  public void dualServerTest2() {", "originalCommit": "5f2e10550267faf00c85d4fc259779cd6d202555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTEzOQ==", "url": "https://github.com/apache/geode/pull/4925#discussion_r405831139", "bodyText": "ok @echobravopapa I added a couple \"unreachability\" tests in the latest commit", "author": "Bill", "createdAt": "2020-04-08T21:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNjA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNjU0Ng==", "url": "https://github.com/apache/geode/pull/4925#discussion_r405836546", "bodyText": "test the test", "author": "Bill", "createdAt": "2020-04-08T21:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNjA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "be80c3a93e6592547d646558342b06768a15dba5", "chunk": "diff --git a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java\nindex 22e0fdeb3e..04169c91c7 100644\n--- a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java\n+++ b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java\n\n@@ -1,17 +1,3 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\n- * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n package org.apache.geode.client.sni;\n \n import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n"}}, {"oid": "be80c3a93e6592547d646558342b06768a15dba5", "url": "https://github.com/apache/geode/commit/be80c3a93e6592547d646558342b06768a15dba5", "message": "GEODE-7852-test-cluster: 2 node docker test cluster running", "committedDate": "2020-04-09T15:55:28Z", "type": "commit"}, {"oid": "ec4a62192d074a4ad4218e8fb9c3f1a1f552798d", "url": "https://github.com/apache/geode/commit/ec4a62192d074a4ad4218e8fb9c3f1a1f552798d", "message": "GEODE-7852-test-cluster: using groups to target servers", "committedDate": "2020-04-09T15:55:28Z", "type": "commit"}, {"oid": "c46e22e78689c93bf0e5ea4d4904e9af46d3483b", "url": "https://github.com/apache/geode/commit/c46e22e78689c93bf0e5ea4d4904e9af46d3483b", "message": "GEODE-7852-test-cluster: add license header", "committedDate": "2020-04-09T15:55:28Z", "type": "commit"}, {"oid": "da42ab845271028ec400be66a81143e5a21e217f", "url": "https://github.com/apache/geode/commit/da42ab845271028ec400be66a81143e5a21e217f", "message": "GEODE_7852-test-cluster: added negative (unreachability) tests", "committedDate": "2020-04-09T15:55:28Z", "type": "commit"}, {"oid": "80435bb2c8b082fdfa2b546e4fc9369928e217f2", "url": "https://github.com/apache/geode/commit/80435bb2c8b082fdfa2b546e4fc9369928e217f2", "message": "GEODE-7852-test-cluster: added documentation describing two tests", "committedDate": "2020-04-09T15:55:28Z", "type": "commit"}, {"oid": "80435bb2c8b082fdfa2b546e4fc9369928e217f2", "url": "https://github.com/apache/geode/commit/80435bb2c8b082fdfa2b546e4fc9369928e217f2", "message": "GEODE-7852-test-cluster: added documentation describing two tests", "committedDate": "2020-04-09T15:55:28Z", "type": "forcePushed"}]}