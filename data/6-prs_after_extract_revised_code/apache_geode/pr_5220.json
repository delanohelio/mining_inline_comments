{"pr_number": 5220, "pr_title": "GEODE-8233: added equals and hashCode to RedisData classes", "pr_createdAt": "2020-06-07T00:33:42Z", "pr_url": "https://github.com/apache/geode/pull/5220", "timeline": [{"oid": "27482df8e32af494a5d8b4b2e40dea20068e08d3", "url": "https://github.com/apache/geode/commit/27482df8e32af494a5d8b4b2e40dea20068e08d3", "message": "added equals and hashCode to RedisData classes", "committedDate": "2020-06-07T00:32:55Z", "type": "commit"}, {"oid": "c54ecbd5283473e23d4b8b8f3d761e19c2fa4aae", "url": "https://github.com/apache/geode/commit/c54ecbd5283473e23d4b8b8f3d761e19c2fa4aae", "message": "fixed LBTM warning", "committedDate": "2020-06-08T19:17:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1MzQxMg==", "url": "https://github.com/apache/geode/pull/5220#discussion_r436953412", "bodyText": "is an object's expiration time sufficiently unique to act as a hash?  I assume you've thought through this, but just curious...seems like in a concurrent world, 2 objects of different redistypes could be added concurrently and set to expire at the same time.  Or does our StripedExecutor somehow guard against this?", "author": "jhutchison", "createdAt": "2020-06-08T19:35:11Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/data/AbstractRedisData.java", "diffHunk": "@@ -183,4 +184,20 @@ protected void storeChanges(Region<ByteArrayWrapper, RedisData> region, ByteArra\n \n   protected abstract boolean removeFromRegion();\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AbstractRedisData)) {\n+      return false;\n+    }\n+    AbstractRedisData that = (AbstractRedisData) o;\n+    return getExpirationTimestamp() == that.getExpirationTimestamp();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(getExpirationTimestamp());", "originalCommit": "c54ecbd5283473e23d4b8b8f3d761e19c2fa4aae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzg2Ng==", "url": "https://github.com/apache/geode/pull/5220#discussion_r437037866", "bodyText": "It is but that is not all that is used. That is all we have on AbstractRedisData. Look at its subclasses and you will see they call super.hashCode (this method) and then mix in their own fields to the hash.", "author": "dschneider-pivotal", "createdAt": "2020-06-08T22:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1MzQxMg=="}], "type": "inlineReview", "revised_code": null}]}