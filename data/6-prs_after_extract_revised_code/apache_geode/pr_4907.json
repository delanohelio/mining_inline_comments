{"pr_number": 4907, "pr_title": "GEODE-7949: Geode Redis - Get/Set commands for RedisString datatype to cover new parameters", "pr_createdAt": "2020-04-06T14:38:55Z", "pr_url": "https://github.com/apache/geode/pull/4907", "timeline": [{"oid": "1268b2d23a34bd52f0fc91b4423b74de67fc0255", "url": "https://github.com/apache/geode/commit/1268b2d23a34bd52f0fc91b4423b74de67fc0255", "message": "GEODE-7949: Geode Redis - Get/Set commands for RedisString datatype to cover new\nparameters", "committedDate": "2020-04-06T14:36:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5OTEwNw==", "url": "https://github.com/apache/geode/pull/4907#discussion_r404199107", "bodyText": "Setting a key here seems unnecessary since the setting with XX  on line 215 should clear TTL.", "author": "sabbey37", "createdAt": "2020-04-06T15:50:44Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -92,13 +92,282 @@ public static void tearDown() {\n     server.shutdown();\n   }\n \n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenEmptyKey() {\n+\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    String result = jedis.get(key);\n+    assertThat(result).isNull();\n+\n+    jedis.set(key, value);\n+    result = jedis.get(key);\n+    assertThat(result).isEqualTo(value);\n+  }\n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenKeyContainingOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+\n+    jedis.set(key, stringValue);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorNX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.nx();\n+\n+    String result = jedis.set(key, stringValue, setParams);\n+    assertThat(result).isNull();\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorXX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.xx();\n+\n+    jedis.set(key, stringValue, setParams);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_EX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = 20000;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    jedis.set(key, \"other value\");\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onXXSuccess() {\n+    String key = \"xx_key\";\n+    String value = \"did exist\";\n+    int secondsUntilExpiration = 20;\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+    String result_EX = jedis.set(key, value, setParamsEX);\n+    assertThat(result_EX).isEqualTo(\"OK\");\n+    assertThat(jedis.ttl(key)).isGreaterThan(15L);\n+    jedis.set(key, value);", "originalCommit": "1268b2d23a34bd52f0fc91b4423b74de67fc0255", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b5d64d1e4702427d2a324c63c34f9be5959456b", "chunk": "diff --git a/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java b/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\nindex cff04067ff..4dd9188c63 100755\n--- a/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\n+++ b/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\n\n@@ -164,6 +165,20 @@ public class StringsIntegrationTest {\n     assertThat(result).isGreaterThan(15l);\n   }\n \n+  @Test\n+  public void testSET_with_Negative_EX_time_shouldReturnError() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = -1;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(millisecondsUntilExpiration);\n+\n+    assertThatThrownBy(() -> jedis.set(key, value, setParams))\n+        .isInstanceOf(JedisDataException.class)\n+        .hasMessageContaining(RedisConstants.ERROR_INVALID_EXPIRE_TIME);\n+  }\n+\n   @Test\n   public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n     String key = \"key\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5OTU5Nw==", "url": "https://github.com/apache/geode/pull/4907#discussion_r404199597", "bodyText": "This parameter is not used.", "author": "sabbey37", "createdAt": "2020-04-06T15:51:27Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -92,13 +92,282 @@ public static void tearDown() {\n     server.shutdown();\n   }\n \n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenEmptyKey() {\n+\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    String result = jedis.get(key);\n+    assertThat(result).isNull();\n+\n+    jedis.set(key, value);\n+    result = jedis.get(key);\n+    assertThat(result).isEqualTo(value);\n+  }\n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenKeyContainingOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+\n+    jedis.set(key, stringValue);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorNX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.nx();\n+\n+    String result = jedis.set(key, stringValue, setParams);\n+    assertThat(result).isNull();\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorXX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.xx();\n+\n+    jedis.set(key, stringValue, setParams);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_EX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = 20000;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    jedis.set(key, \"other value\");\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onXXSuccess() {\n+    String key = \"xx_key\";\n+    String value = \"did exist\";\n+    int secondsUntilExpiration = 20;\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+    String result_EX = jedis.set(key, value, setParamsEX);\n+    assertThat(result_EX).isEqualTo(\"OK\");\n+    assertThat(jedis.ttl(key)).isGreaterThan(15L);\n+    jedis.set(key, value);\n+\n+    String result_XX = jedis.set(key, value, setParamsXX);\n+\n+    assertThat(result_XX).isEqualTo(\"OK\");\n+    Long result = jedis.ttl(key);\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_should_not_clearPreviousTTL_onFailure() {\n+    String key_NX = \"nx_key\";\n+    String value_NX = \"set only if key did not exist\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();", "originalCommit": "1268b2d23a34bd52f0fc91b4423b74de67fc0255", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b5d64d1e4702427d2a324c63c34f9be5959456b", "chunk": "diff --git a/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java b/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\nindex cff04067ff..4dd9188c63 100755\n--- a/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\n+++ b/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\n\n@@ -164,6 +165,20 @@ public class StringsIntegrationTest {\n     assertThat(result).isGreaterThan(15l);\n   }\n \n+  @Test\n+  public void testSET_with_Negative_EX_time_shouldReturnError() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = -1;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(millisecondsUntilExpiration);\n+\n+    assertThatThrownBy(() -> jedis.set(key, value, setParams))\n+        .isInstanceOf(JedisDataException.class)\n+        .hasMessageContaining(RedisConstants.ERROR_INVALID_EXPIRE_TIME);\n+  }\n+\n   @Test\n   public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n     String key = \"key\";\n"}}, {"oid": "74794bcc74902affcd65bcd062731297d9ce451e", "url": "https://github.com/apache/geode/commit/74794bcc74902affcd65bcd062731297d9ce451e", "message": "Addresses failing integration tests.", "committedDate": "2020-04-07T15:18:57Z", "type": "commit"}, {"oid": "4b5d64d1e4702427d2a324c63c34f9be5959456b", "url": "https://github.com/apache/geode/commit/4b5d64d1e4702427d2a324c63c34f9be5959456b", "message": "Adds \n- integration tests for negative expiration values\n- unit tests for getExecutor", "committedDate": "2020-04-07T21:27:19Z", "type": "commit"}, {"oid": "c6df310608d549f6e0482e53d285a732c61f8dba", "url": "https://github.com/apache/geode/commit/c6df310608d549f6e0482e53d285a732c61f8dba", "message": "CI Trigger", "committedDate": "2020-04-08T13:59:12Z", "type": "commit"}, {"oid": "c721945a1199359d33654a6d2f1259a60c40f0d9", "url": "https://github.com/apache/geode/commit/c721945a1199359d33654a6d2f1259a60c40f0d9", "message": "CI trigger part II", "committedDate": "2020-04-08T16:12:44Z", "type": "commit"}, {"oid": "fe28f03732f06454b8a0dc76ba37907e6717f512", "url": "https://github.com/apache/geode/commit/fe28f03732f06454b8a0dc76ba37907e6717f512", "message": "Fix CI Build issue", "committedDate": "2020-04-08T17:50:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NzQ5MA==", "url": "https://github.com/apache/geode/pull/4907#discussion_r406247490", "bodyText": "the names of these tests are inconsistent:\nhere Does_not_Exist has underscores when the convention suggests no underscores and camelCase\nthe word HONOR used above seems inconsistent with the other language of the the test names.", "author": "prettyClouds", "createdAt": "2020-04-09T14:31:17Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -92,13 +93,328 @@ public static void tearDown() {\n     server.shutdown();\n   }\n \n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenEmptyKey() {\n+\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    String result = jedis.get(key);\n+    assertThat(result).isNull();\n+\n+    jedis.set(key, value);\n+    result = jedis.get(key);\n+    assertThat(result).isEqualTo(value);\n+  }\n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenKeyContainingOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+\n+    jedis.set(key, stringValue);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorNX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.nx();\n+\n+    String result = jedis.set(key, stringValue, setParams);\n+    assertThat(result).isNull();\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorXX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.xx();\n+\n+    jedis.set(key, stringValue, setParams);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_EX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_with_Negative_EX_time_shouldReturnError() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = -1;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(millisecondsUntilExpiration);\n+\n+    assertThatThrownBy(() -> jedis.set(key, value, setParams))\n+        .isInstanceOf(JedisDataException.class)\n+        .hasMessageContaining(RedisConstants.ERROR_INVALID_EXPIRE_TIME);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = 20000;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_with_Negative_PX_time_shouldReturnError() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = -1;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    assertThatThrownBy(() -> jedis.set(key, value, setParams))\n+        .isInstanceOf(JedisDataException.class)\n+        .hasMessageContaining(RedisConstants.ERROR_INVALID_EXPIRE_TIME);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    jedis.set(key, \"other value\");\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onXXSuccess() {\n+    String key = \"xx_key\";\n+    String value = \"did exist\";\n+    int secondsUntilExpiration = 20;\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+    String result_EX = jedis.set(key, value, setParamsEX);\n+    assertThat(result_EX).isEqualTo(\"OK\");\n+    assertThat(jedis.ttl(key)).isGreaterThan(15L);\n+\n+    String result_XX = jedis.set(key, value, setParamsXX);\n+\n+    assertThat(result_XX).isEqualTo(\"OK\");\n+    Long result = jedis.ttl(key);\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_should_not_clearPreviousTTL_onFailure() {\n+    String key_NX = \"nx_key\";\n+    String value_NX = \"set only if key did not exist\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+\n+    SetParams setParamsNX = new SetParams();\n+    setParamsNX.nx();\n+\n+    jedis.set(key_NX, value_NX, setParamsEX);\n+    String result_NX = jedis.set(key_NX, value_NX, setParamsNX);\n+    assertThat(result_NX).isNull();\n+\n+    Long result = jedis.ttl(key_NX);\n+    assertThat(result).isGreaterThan(15L);\n+  }\n+\n+  @Test\n+  @Ignore\n+  public void testSET_with_KEEPTTL_shouldRetainPreviousTTL_OnSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsToExpire = 30;\n+\n+    SetParams setParamsEx = new SetParams();\n+    setParamsEx.ex(secondsToExpire);\n+\n+    jedis.set(key, value, setParamsEx);\n+\n+    SetParams setParamsKeepTTL = new SetParams();\n+    // setParamsKeepTTL.keepTtl();\n+    // Jedis Doesn't support KEEPTTL yet.\n+\n+    jedis.set(key, \"newValue\", setParamsKeepTTL);\n+\n+    Long result = jedis.ttl(key);\n+    assertThat(result).isGreaterThan(15L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_NX_argumentToOnlySetKeyIfIt_Does_not_Exist() {", "originalCommit": "fe28f03732f06454b8a0dc76ba37907e6717f512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MjkwNw==", "url": "https://github.com/apache/geode/pull/4907#discussion_r406282907", "bodyText": "done", "author": "xtreme-prasath", "createdAt": "2020-04-09T15:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NzQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "4c0cb2547a5cfe35ad031c4bf428afcf2b858442", "chunk": "diff --git a/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java b/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\nindex 4dd9188c63..84de03f50e 100755\n--- a/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\n+++ b/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\n\n@@ -93,7 +94,6 @@ public class StringsIntegrationTest {\n     server.shutdown();\n   }\n \n-\n   @Test\n   public void testSET_shouldSetStringValueToKey_givenEmptyKey() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0OTcyNg==", "url": "https://github.com/apache/geode/pull/4907#discussion_r406249726", "bodyText": "i think this test belongs in the HSET tests, not in the strings.\nConsider moving it?\nAnother option might be moving all the tests that re-write keys into a single test, so that context is in one place.", "author": "prettyClouds", "createdAt": "2020-04-09T14:34:20Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -270,10 +586,10 @@ public void testGetSet_whenWrongType_shouldReturnError() {\n \n   @Test\n   public void testSet_keyExistsWithDifferentDataType_returnsRedisDataTypeMismatchException() {", "originalCommit": "fe28f03732f06454b8a0dc76ba37907e6717f512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDU3NQ==", "url": "https://github.com/apache/geode/pull/4907#discussion_r406250575", "bodyText": "also, we might want to test that set overrides the hset, if we are not doing so already", "author": "prettyClouds", "createdAt": "2020-04-09T14:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0OTcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MjkzNw==", "url": "https://github.com/apache/geode/pull/4907#discussion_r406282937", "bodyText": "done", "author": "xtreme-prasath", "createdAt": "2020-04-09T15:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0OTcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "4c0cb2547a5cfe35ad031c4bf428afcf2b858442", "chunk": "diff --git a/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java b/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\nindex 4dd9188c63..84de03f50e 100755\n--- a/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\n+++ b/geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java\n\n@@ -584,15 +597,6 @@ public class StringsIntegrationTest {\n         .hasMessageContaining(RedisConstants.ERROR_WRONG_TYPE);\n   }\n \n-  @Test\n-  public void testSet_keyExistsWithDifferentDataType_returnsRedisDataTypeMismatchException() {\n-    jedis.set(\"key\", \"value\");\n-\n-    assertThatThrownBy(\n-        () -> jedis.hset(\"key\", \"field\", \"something else\")).isInstanceOf(JedisDataException.class)\n-            .hasMessageContaining(\"WRONGTYPE\");\n-  }\n-\n   @Test\n   public void testSet_protectedRedisDataType_throwsRedisDataTypeMismatchException() {\n     assertThatThrownBy(\n"}}, {"oid": "4c0cb2547a5cfe35ad031c4bf428afcf2b858442", "url": "https://github.com/apache/geode/commit/4c0cb2547a5cfe35ad031c4bf428afcf2b858442", "message": "Renaming Tests for consistency", "committedDate": "2020-04-09T15:20:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMDUwNA==", "url": "https://github.com/apache/geode/pull/4907#discussion_r406300504", "bodyText": "I think the extra containsKey call is not needed in this method. Region.get will return null if a region does not contain the key and null will not be equal to REDIS_PROTECTED.\nSo I advise you get rid of the containsKey call.", "author": "dschneider-pivotal", "createdAt": "2020-04-09T15:46:12Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/KeyRegistrar.java", "diffHunk": "@@ -76,16 +76,26 @@ public void validate(ByteArrayWrapper key, RedisDataType type) {\n     }\n   }\n \n+  /**\n+   * Checks if the given key is a protected string in GeodeRedis\n+   *\n+   * @param key Key to check\n+   */\n+  public boolean isProtected(ByteArrayWrapper key) {\n+    return redisMetaRegion.containsKey(key.toString())", "originalCommit": "4c0cb2547a5cfe35ad031c4bf428afcf2b858442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMzg3OQ==", "url": "https://github.com/apache/geode/pull/4907#discussion_r406433879", "bodyText": "Good call Darrel. Addressed that.", "author": "xtreme-prasath", "createdAt": "2020-04-09T19:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMDUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "6d391d0da617401c4979a750e450f0ea150c56b2", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/KeyRegistrar.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/KeyRegistrar.java\nindex 37d6775b4a..76df13e66b 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/KeyRegistrar.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/KeyRegistrar.java\n\n@@ -82,8 +82,7 @@ public class KeyRegistrar {\n    * @param key Key to check\n    */\n   public boolean isProtected(ByteArrayWrapper key) {\n-    return redisMetaRegion.containsKey(key.toString())\n-        && RedisDataType.REDIS_PROTECTED.equals(redisMetaRegion.get(key.toString()));\n+    return RedisDataType.REDIS_PROTECTED.equals(redisMetaRegion.get(key.toString()));\n   }\n \n   private boolean isValidDataType(RedisDataType actualDataType, RedisDataType expectedDataType) {\n"}}, {"oid": "6d391d0da617401c4979a750e450f0ea150c56b2", "url": "https://github.com/apache/geode/commit/6d391d0da617401c4979a750e450f0ea150c56b2", "message": "Removing a redundant safety check and fixing formatting", "committedDate": "2020-04-09T19:35:29Z", "type": "commit"}]}