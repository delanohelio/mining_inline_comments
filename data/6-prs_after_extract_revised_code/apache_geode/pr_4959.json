{"pr_number": 4959, "pr_title": "GEODE-7852:  Create test for running cache operations with a dropped \u2026", "pr_createdAt": "2020-04-14T18:40:32Z", "pr_url": "https://github.com/apache/geode/pull/4959", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1NTUwOA==", "url": "https://github.com/apache/geode/pull/4959#discussion_r408355508", "bodyText": "without the bind of the port this will not match when the proxy is restarted", "author": "echobravopapa", "createdAt": "2020-04-14T18:42:24Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.NoAvailableLocatorsException;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class ClientSNIDropProxyAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIDropProxyAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private ClientCache cache;\n+\n+  private String trustStorePath;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    trustStorePath =\n+        createTempFileFromResource(ClientSNIDropProxyAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+  }\n+\n+  @Test\n+  public void performSimpleOperationsDropSNIProxy()\n+      throws IOException,\n+      InterruptedException {\n+    final Region<String, Integer> region = getRegion();\n+\n+    region.put(\"Roy Hobbs\", 9);\n+    assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9);\n+\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .stop();\n+\n+    assertThatThrownBy(() -> region.get(\"Roy Hobbs\"))\n+        .isInstanceOf(NoAvailableLocatorsException.class)\n+        .hasMessageContaining(\"Unable to connect to any locators in the list\");\n+\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .start();\n+\n+    assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9);\n+\n+    region.put(\"Bennie Rodriquez\", 30);\n+    assertThat(region.get(\"Bennie Rodriquez\")).isEqualTo(30);\n+\n+    region.put(\"Jake Taylor\", 7);\n+    region.put(\"Crash Davis\", 8);\n+\n+    region.put(\"Ricky Vaughn\", 99);\n+    region.put(\"Ebbie Calvin LaLoosh\", 37);\n+\n+  }\n+\n+  public Region<String, Integer> getRegion() {\n+    Properties gemFireProps = new Properties();\n+    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    gemFireProps.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    gemFireProps.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    gemFireProps.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+\n+    int proxyPort = docker.containers()\n+        .container(\"haproxy\")\n+        .port(15443)\n+        .getExternalPort();", "originalCommit": "0378b4f38c66cf945535f4b5996765447feecbe4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NjUzOQ==", "url": "https://github.com/apache/geode/pull/4959#discussion_r412386539", "bodyText": "outdated comment", "author": "Bill", "createdAt": "2020-04-21T18:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1NTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "393c4d890af962eefc1d001750f5f5c2e6d572c1", "chunk": "diff --git a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\nindex b3d92cd768..d8a2696fbb 100644\n--- a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\n+++ b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\n\n@@ -31,6 +31,8 @@ import java.net.URL;\n import java.util.Properties;\n \n import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.execution.DockerComposeRunArgument;\n+import com.palantir.docker.compose.execution.DockerComposeRunOption;\n import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1Njc2NQ==", "url": "https://github.com/apache/geode/pull/4959#discussion_r408356765", "bodyText": "another possibility would be to sub-class the sniSocketFactory and allow the port to be reset as needed, which is the class most under test here and that makes me not a fan of that approach", "author": "echobravopapa", "createdAt": "2020-04-14T18:44:31Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.NoAvailableLocatorsException;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class ClientSNIDropProxyAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIDropProxyAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private ClientCache cache;\n+\n+  private String trustStorePath;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    trustStorePath =\n+        createTempFileFromResource(ClientSNIDropProxyAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+  }\n+\n+  @Test\n+  public void performSimpleOperationsDropSNIProxy()\n+      throws IOException,\n+      InterruptedException {\n+    final Region<String, Integer> region = getRegion();\n+\n+    region.put(\"Roy Hobbs\", 9);\n+    assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9);\n+\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .stop();\n+\n+    assertThatThrownBy(() -> region.get(\"Roy Hobbs\"))\n+        .isInstanceOf(NoAvailableLocatorsException.class)\n+        .hasMessageContaining(\"Unable to connect to any locators in the list\");\n+\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .start();\n+", "originalCommit": "0378b4f38c66cf945535f4b5996765447feecbe4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4Njc4Nw==", "url": "https://github.com/apache/geode/pull/4959#discussion_r412386787", "bodyText": "we elected not to go this way (socket factory)", "author": "Bill", "createdAt": "2020-04-21T18:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1Njc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "393c4d890af962eefc1d001750f5f5c2e6d572c1", "chunk": "diff --git a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\nindex b3d92cd768..d8a2696fbb 100644\n--- a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\n+++ b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\n\n@@ -31,6 +31,8 @@ import java.net.URL;\n import java.util.Properties;\n \n import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.execution.DockerComposeRunArgument;\n+import com.palantir.docker.compose.execution.DockerComposeRunOption;\n import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNDU0Nw==", "url": "https://github.com/apache/geode/pull/4959#discussion_r408414547", "bodyText": "Maybe use the new NotOnWindowsDockerRule?", "author": "upthewaterspout", "createdAt": "2020-04-14T20:27:57Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.NoAvailableLocatorsException;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class ClientSNIDropProxyAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIDropProxyAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();", "originalCommit": "0378b4f38c66cf945535f4b5996765447feecbe4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NTUzMA==", "url": "https://github.com/apache/geode/pull/4959#discussion_r408945530", "bodyText": "We should standardize on using NotOnWindowsDockerRule in the SNI tests.", "author": "bschuchardt", "createdAt": "2020-04-15T15:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNDU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MTY5Mg==", "url": "https://github.com/apache/geode/pull/4959#discussion_r412391692", "bodyText": "agreed! it's coming\u2026", "author": "Bill", "createdAt": "2020-04-21T18:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNDU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "393c4d890af962eefc1d001750f5f5c2e6d572c1", "chunk": "diff --git a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\nindex b3d92cd768..d8a2696fbb 100644\n--- a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\n+++ b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\n\n@@ -31,6 +31,8 @@ import java.net.URL;\n import java.util.Properties;\n \n import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.execution.DockerComposeRunArgument;\n+import com.palantir.docker.compose.execution.DockerComposeRunOption;\n import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n"}}, {"oid": "068736287a618920807629db78aa545f22cff868", "url": "https://github.com/apache/geode/commit/068736287a618920807629db78aa545f22cff868", "message": "GEODE-7852:  Create test for running cache operations with a dropped proxy.", "committedDate": "2020-04-20T22:43:43Z", "type": "commit"}, {"oid": "393c4d890af962eefc1d001750f5f5c2e6d572c1", "url": "https://github.com/apache/geode/commit/393c4d890af962eefc1d001750f5f5c2e6d572c1", "message": "store proxPort as Field and then use DockerComposeRun to restart HAProxy", "committedDate": "2020-04-20T22:43:43Z", "type": "commit"}, {"oid": "190a11a0d1650355873023117c3c58013fc64698", "url": "https://github.com/apache/geode/commit/190a11a0d1650355873023117c3c58013fc64698", "message": "spa", "committedDate": "2020-04-20T22:43:43Z", "type": "commit"}, {"oid": "58d3938f1004eb1bab01a4e3c898451872b77433", "url": "https://github.com/apache/geode/commit/58d3938f1004eb1bab01a4e3c898451872b77433", "message": "GEODE-7852-drop-proxy: daemonize re-run container", "committedDate": "2020-04-20T22:43:43Z", "type": "commit"}, {"oid": "58d3938f1004eb1bab01a4e3c898451872b77433", "url": "https://github.com/apache/geode/commit/58d3938f1004eb1bab01a4e3c898451872b77433", "message": "GEODE-7852-drop-proxy: daemonize re-run container", "committedDate": "2020-04-20T22:43:43Z", "type": "forcePushed"}, {"oid": "ab6c1bfc67e029602032ade36e64d429a3e2ade1", "url": "https://github.com/apache/geode/commit/ab6c1bfc67e029602032ade36e64d429a3e2ade1", "message": "GEODE-7852-drop-proxy: awaitility after restarting SNI proxy", "committedDate": "2020-04-21T16:34:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4MTYyMg==", "url": "https://github.com/apache/geode/pull/4959#discussion_r412381622", "bodyText": "It would be nice to have a comment describing what the string.format() arguments are about.  Otherwise someone working on this in the future will have to do some digging to figure it out.", "author": "bschuchardt", "createdAt": "2020-04-21T18:11:58Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.execution.DockerComposeRunArgument;\n+import com.palantir.docker.compose.execution.DockerComposeRunOption;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.NoAvailableLocatorsException;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class ClientSNIDropProxyAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIDropProxyAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private ClientCache cache;\n+\n+  private String trustStorePath;\n+  private int proxyPort;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    trustStorePath =\n+        createTempFileFromResource(ClientSNIDropProxyAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+  }\n+\n+  @After\n+  public void after() {\n+    ensureCacheClosed();\n+  }\n+\n+  @Test\n+  public void performSimpleOperationsDropSNIProxy()\n+      throws IOException,\n+      InterruptedException {\n+    final Region<String, Integer> region = getRegion();\n+\n+    region.put(\"Roy Hobbs\", 9);\n+    assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9);\n+\n+    stopProxy();\n+\n+    assertThatThrownBy(() -> region.get(\"Roy Hobbs\"))\n+        .isInstanceOf(NoAvailableLocatorsException.class)\n+        .hasMessageContaining(\"Unable to connect to any locators in the list\");\n+\n+\n+    restartProxy();\n+\n+    await().untilAsserted(() -> assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9));\n+\n+    region.put(\"Bennie Rodriquez\", 30);\n+    assertThat(region.get(\"Bennie Rodriquez\")).isEqualTo(30);\n+\n+    region.put(\"Jake Taylor\", 7);\n+    region.put(\"Crash Davis\", 8);\n+\n+    region.put(\"Ricky Vaughn\", 99);\n+    region.put(\"Ebbie Calvin LaLoosh\", 37);\n+\n+  }\n+\n+  private void stopProxy() throws IOException, InterruptedException {\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .stop();\n+  }\n+\n+  private void restartProxy() throws IOException, InterruptedException {\n+    restartProxyOnPreviousPort();\n+    // Leave this commented here in case you need it for troubleshooting\n+    // restartProxyOnDockerComposePort();\n+  }\n+\n+  /**\n+   * Use this variant to (re)start the container on whatever port(s) is specified in\n+   * docker-compose.yml. Usually that would look something like:\n+   *\n+   * ports:\n+   * - \"15443:15443\"\n+   *\n+   * Leave this unused method here for troubleshooting.\n+   */\n+  private void restartProxyOnDockerComposePort() throws IOException, InterruptedException {\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .start();\n+  }\n+\n+  /**\n+   * Use this variant to (re)start the container whatever host port it was bound to before\n+   * it was stopped. Usually you'll want the ports spec in docker-compose.yml to look like\n+   * this when using this method (allowing Docker to initially choose a random host port\n+   * to bind to):\n+   *\n+   * ports:\n+   * - \"15443\"\n+   */\n+  private void restartProxyOnPreviousPort() throws IOException, InterruptedException {\n+    docker.run(", "originalCommit": "ab6c1bfc67e029602032ade36e64d429a3e2ade1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d25d5077786065f9e5ee713aeedefc3e34981c4d", "chunk": "diff --git a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\nindex 4f5240ab2d..309f381a1e 100644\n--- a/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\n+++ b/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java\n\n@@ -37,9 +37,7 @@ import com.palantir.docker.compose.execution.DockerComposeRunOption;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.ClassRule;\n-import org.junit.Rule;\n import org.junit.Test;\n-import org.junit.rules.TestRule;\n \n import org.apache.geode.cache.Region;\n import org.apache.geode.cache.client.ClientCache;\n"}}, {"oid": "d25d5077786065f9e5ee713aeedefc3e34981c4d", "url": "https://github.com/apache/geode/commit/d25d5077786065f9e5ee713aeedefc3e34981c4d", "message": "GEODE-7852-drop-proxy: use NotOnWindowsDockerRule and improve comments", "committedDate": "2020-04-21T18:44:01Z", "type": "commit"}]}