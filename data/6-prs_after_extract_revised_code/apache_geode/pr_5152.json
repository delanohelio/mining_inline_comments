{"pr_number": 5152, "pr_title": "GEODE-8147: key commands implement Function-Delta", "pr_createdAt": "2020-05-22T22:13:09Z", "pr_url": "https://github.com/apache/geode/pull/5152", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NzU3Nw==", "url": "https://github.com/apache/geode/pull/5152#discussion_r429477577", "bodyText": "remove this deadcode", "author": "dschneider-pivotal", "createdAt": "2020-05-22T22:22:32Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java", "diffHunk": "@@ -84,10 +88,32 @@ protected Object compute(Region localRegion, ByteArrayWrapper key,\n         callable = () -> new RedisSetInRegion(localRegion).srem(key, membersToRemove);\n         break;\n       }\n-      case DEL:\n-        RedisDataType delType = (RedisDataType) args[1];\n-        callable = executeDel(key, localRegion, delType);\n+      case DEL: {\n+        callable = () -> new RedisKeyInRegion(localRegion, regionProvider).del(key);\n         break;\n+      }\n+      case EXISTS: {\n+        callable = () -> new RedisKeyInRegion(localRegion, regionProvider).exists(key);\n+        break;\n+      }\n+//      case RENAME: {", "originalCommit": "ad81b1f93a4c0ee3d83706d351a92ad9b2f0147c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d6db7d79bf00e377b4142370b342122a64f1a35", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java\nindex 6da601b3c2..264eb9fa33 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java\n\n@@ -88,32 +88,11 @@ public class CommandFunction extends SingleResultRedisFunction {\n         callable = () -> new RedisSetInRegion(localRegion).srem(key, membersToRemove);\n         break;\n       }\n-      case DEL: {\n+      case DEL:\n         callable = () -> new RedisKeyInRegion(localRegion, regionProvider).del(key);\n         break;\n-      }\n-      case EXISTS: {\n+      case EXISTS:\n         callable = () -> new RedisKeyInRegion(localRegion, regionProvider).exists(key);\n-        break;\n-      }\n-//      case RENAME: {\n-//        if (args[1] instanceof Object[]) {\n-//          ByteArrayWrapper oldKey = (ByteArrayWrapper) ((Object[]) args[1])[0];\n-//          if (PartitionRegionHelper.getPrimaryMemberForKey(localRegion, key).equals(\n-//              PartitionRegionHelper.getPrimaryMemberForKey(localRegion, oldKey)) &&\n-//              stripedExecutor.areSameStripe(key, oldKey)) {\n-//            return new RedisKeyInRegion(localRegion, regionProvider)\n-//                .doRename(oldKey, key);\n-//          } else {\n-//            callable =\n-//                () -> new RedisKeyInRegion(localRegion, regionProvider)\n-//                    .doRename(oldKey, key);\n-//          }\n-//        } else {\n-//          callable = () -> new RedisKeyInRegion(localRegion, regionProvider).rename(key, args[1]);\n-//        }\n-//        break;\n-//      }\n       case SMEMBERS:\n         callable = () -> new RedisSetInRegion(localRegion).smembers(key);\n         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3Nzg0Mw==", "url": "https://github.com/apache/geode/pull/5152#discussion_r429477843", "bodyText": "remove this deadcode", "author": "dschneider-pivotal", "createdAt": "2020-05-22T22:23:56Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java", "diffHunk": "@@ -46,12 +38,22 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n \n     ByteArrayWrapper key = command.getKey();\n     ByteArrayWrapper newKey = new ByteArrayWrapper(commandElems.get(2));\n+    RedisKeyCommands\n+        redisKeyCommands =\n+        new RedisKeyCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());\n \n-    try (@SuppressWarnings(\"unused\")\n-    AutoCloseableLock lockForOldKey = context.getLockService().lock(key)) {\n-      try (@SuppressWarnings(\"unused\")\n-      AutoCloseableLock lockForNewKey = context.getLockService().lock(newKey)) {\n+    List<ByteArrayWrapper> keysToLock = Arrays.asList(key,newKey);\n+    keysToLock.sort(ByteArrayWrapper::compareTo);\n+\n+\n+//    try (@SuppressWarnings(\"unused\")", "originalCommit": "ad81b1f93a4c0ee3d83706d351a92ad9b2f0147c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d6db7d79bf00e377b4142370b342122a64f1a35", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\nindex 85315a5235..1975096549 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\n\n@@ -38,64 +37,35 @@ public class RenameExecutor extends AbstractExecutor {\n \n     ByteArrayWrapper key = command.getKey();\n     ByteArrayWrapper newKey = new ByteArrayWrapper(commandElems.get(2));\n-    RedisKeyCommands\n-        redisKeyCommands =\n+    RedisKeyCommands redisKeyCommands =\n         new RedisKeyCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());\n \n-    List<ByteArrayWrapper> keysToLock = Arrays.asList(key,newKey);\n-    keysToLock.sort(ByteArrayWrapper::compareTo);\n+    RedisDataType redisDataType = context.getKeyRegistrar().getType(key);\n \n-\n-//    try (@SuppressWarnings(\"unused\")\n-//         AutoCloseableLock lockForOldKey = context.getLockService().lock(keysToLock.get(0))) {\n-//      LogService.getLogger().error(\"locking on old key:\" + key.toString() );\n-//      try (@SuppressWarnings(\"unused\")\n-//           AutoCloseableLock lockForNewKey = context.getLockService().lock(keysToLock.get(1))) {\n-//        LogService.getLogger().error(\"locking on new key lock:\" + key.toString() );\n-        RedisDataType redisDataType = context.getKeyRegistrar().getType(key);\n-\n-        if (redisDataType == null) {\n-          command.setResponse(\n-              Coder.getErrorResponse(context.getByteBufAllocator(),\n-                  RedisConstants.ERROR_NO_SUCH_KEY));\n-          return;\n-        }\n-        switch (redisDataType) {\n-          case REDIS_STRING:\n-            @SuppressWarnings(\"unchecked\")\n-            Region<ByteArrayWrapper, Object> region =\n-                (Region<ByteArrayWrapper, Object>) context.getRegionProvider()\n-                    .getRegionForType(redisDataType);\n-            Object value = region.get(key);\n-            context.getKeyRegistrar().register(newKey, redisDataType);\n-            region.put(newKey, value);\n-            removeEntry(key, context);\n-            break;\n-          case REDIS_HASH:\n-          case REDIS_SET:\n-            // TODO this all needs to be done atomically. Add RENAME support to RedisSetCommands\n-            redisKeyCommands.rename(key, newKey);\n-            break;\n-          case REDIS_LIST:\n-            throw new RuntimeException(\"Renaming List isn't supported\");\n-          case REDIS_SORTEDSET:\n-            throw new RuntimeException(\"Renaming SortedSet isn't supported\");\n-          case NONE:\n-          default:\n-            break;\n-        }\n-//      } catch (InterruptedException e) {\n-//        Thread.currentThread().interrupt();\n-//        command.setResponse(\n-//            Coder.getErrorResponse(context.getByteBufAllocator(), \"Thread interrupted.\"));\n-//        return;\n-//      }\n-//    } catch (InterruptedException e) {\n-//      Thread.currentThread().interrupt();\n-//      command.setResponse(\n-//          Coder.getErrorResponse(context.getByteBufAllocator(), \"Thread interrupted.\"));\n-//      return;\n-//    }\n+    if (redisDataType == null) {\n+      command.setResponse(\n+          Coder.getErrorResponse(context.getByteBufAllocator(),\n+              RedisConstants.ERROR_NO_SUCH_KEY));\n+      return;\n+    }\n+    switch (redisDataType) {\n+      case REDIS_STRING:\n+        @SuppressWarnings(\"unchecked\")\n+        Region<ByteArrayWrapper, Object> region =\n+            (Region<ByteArrayWrapper, Object>) context.getRegionProvider()\n+                .getRegionForType(redisDataType);\n+        Object value = region.get(key);\n+        context.getKeyRegistrar().register(newKey, redisDataType);\n+        region.put(newKey, value);\n+        removeEntry(key, context);\n+        break;\n+      case REDIS_HASH:\n+      case REDIS_SET:\n+        redisKeyCommands.rename(key, newKey);\n+        break;\n+      default:\n+        break;\n+    }\n \n     command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), \"OK\"));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3Nzk0MA==", "url": "https://github.com/apache/geode/pull/5152#discussion_r429477940", "bodyText": "remove this deadcode", "author": "dschneider-pivotal", "createdAt": "2020-05-22T22:24:23Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java", "diffHunk": "@@ -95,18 +84,18 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n           default:\n             break;\n         }\n-      } catch (InterruptedException e) {\n-        Thread.currentThread().interrupt();\n-        command.setResponse(\n-            Coder.getErrorResponse(context.getByteBufAllocator(), \"Thread interrupted.\"));\n-        return;\n-      }\n-    } catch (InterruptedException e) {\n-      Thread.currentThread().interrupt();\n-      command.setResponse(\n-          Coder.getErrorResponse(context.getByteBufAllocator(), \"Thread interrupted.\"));\n-      return;\n-    }\n+//      } catch (InterruptedException e) {", "originalCommit": "ad81b1f93a4c0ee3d83706d351a92ad9b2f0147c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d6db7d79bf00e377b4142370b342122a64f1a35", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\nindex 85315a5235..1975096549 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\n\n@@ -38,64 +37,35 @@ public class RenameExecutor extends AbstractExecutor {\n \n     ByteArrayWrapper key = command.getKey();\n     ByteArrayWrapper newKey = new ByteArrayWrapper(commandElems.get(2));\n-    RedisKeyCommands\n-        redisKeyCommands =\n+    RedisKeyCommands redisKeyCommands =\n         new RedisKeyCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());\n \n-    List<ByteArrayWrapper> keysToLock = Arrays.asList(key,newKey);\n-    keysToLock.sort(ByteArrayWrapper::compareTo);\n+    RedisDataType redisDataType = context.getKeyRegistrar().getType(key);\n \n-\n-//    try (@SuppressWarnings(\"unused\")\n-//         AutoCloseableLock lockForOldKey = context.getLockService().lock(keysToLock.get(0))) {\n-//      LogService.getLogger().error(\"locking on old key:\" + key.toString() );\n-//      try (@SuppressWarnings(\"unused\")\n-//           AutoCloseableLock lockForNewKey = context.getLockService().lock(keysToLock.get(1))) {\n-//        LogService.getLogger().error(\"locking on new key lock:\" + key.toString() );\n-        RedisDataType redisDataType = context.getKeyRegistrar().getType(key);\n-\n-        if (redisDataType == null) {\n-          command.setResponse(\n-              Coder.getErrorResponse(context.getByteBufAllocator(),\n-                  RedisConstants.ERROR_NO_SUCH_KEY));\n-          return;\n-        }\n-        switch (redisDataType) {\n-          case REDIS_STRING:\n-            @SuppressWarnings(\"unchecked\")\n-            Region<ByteArrayWrapper, Object> region =\n-                (Region<ByteArrayWrapper, Object>) context.getRegionProvider()\n-                    .getRegionForType(redisDataType);\n-            Object value = region.get(key);\n-            context.getKeyRegistrar().register(newKey, redisDataType);\n-            region.put(newKey, value);\n-            removeEntry(key, context);\n-            break;\n-          case REDIS_HASH:\n-          case REDIS_SET:\n-            // TODO this all needs to be done atomically. Add RENAME support to RedisSetCommands\n-            redisKeyCommands.rename(key, newKey);\n-            break;\n-          case REDIS_LIST:\n-            throw new RuntimeException(\"Renaming List isn't supported\");\n-          case REDIS_SORTEDSET:\n-            throw new RuntimeException(\"Renaming SortedSet isn't supported\");\n-          case NONE:\n-          default:\n-            break;\n-        }\n-//      } catch (InterruptedException e) {\n-//        Thread.currentThread().interrupt();\n-//        command.setResponse(\n-//            Coder.getErrorResponse(context.getByteBufAllocator(), \"Thread interrupted.\"));\n-//        return;\n-//      }\n-//    } catch (InterruptedException e) {\n-//      Thread.currentThread().interrupt();\n-//      command.setResponse(\n-//          Coder.getErrorResponse(context.getByteBufAllocator(), \"Thread interrupted.\"));\n-//      return;\n-//    }\n+    if (redisDataType == null) {\n+      command.setResponse(\n+          Coder.getErrorResponse(context.getByteBufAllocator(),\n+              RedisConstants.ERROR_NO_SUCH_KEY));\n+      return;\n+    }\n+    switch (redisDataType) {\n+      case REDIS_STRING:\n+        @SuppressWarnings(\"unchecked\")\n+        Region<ByteArrayWrapper, Object> region =\n+            (Region<ByteArrayWrapper, Object>) context.getRegionProvider()\n+                .getRegionForType(redisDataType);\n+        Object value = region.get(key);\n+        context.getKeyRegistrar().register(newKey, redisDataType);\n+        region.put(newKey, value);\n+        removeEntry(key, context);\n+        break;\n+      case REDIS_HASH:\n+      case REDIS_SET:\n+        redisKeyCommands.rename(key, newKey);\n+        break;\n+      default:\n+        break;\n+    }\n \n     command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), \"OK\"));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3ODkzOQ==", "url": "https://github.com/apache/geode/pull/5152#discussion_r429478939", "bodyText": "Why was this change made? getLocalDataSet seems like what we want.", "author": "dschneider-pivotal", "createdAt": "2020-05-22T22:29:20Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/SingleResultRedisFunction.java", "diffHunk": "@@ -40,7 +40,7 @@ public void execute(FunctionContext<Object[]> context) {\n         regionFunctionContext.getLocalDataSet(regionFunctionContext.getDataSet());\n     Object[] args = context.getArguments();\n     RedisCommandType command = (RedisCommandType) args[0];\n-    Object result = compute(localRegion, key, command, args);\n+    Object result = compute(regionFunctionContext.getDataSet(), key, command, args);", "originalCommit": "ad81b1f93a4c0ee3d83706d351a92ad9b2f0147c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1d3b9adc8680988ad7fa49650d033979e303ff", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/SingleResultRedisFunction.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/SingleResultRedisFunction.java\nindex 68d15fdc17..56ab5779e8 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/SingleResultRedisFunction.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/SingleResultRedisFunction.java\n\n@@ -32,16 +34,25 @@ public abstract class SingleResultRedisFunction implements Function<Object[]> {\n \n   @Override\n   public void execute(FunctionContext<Object[]> context) {\n+\n     RegionFunctionContextImpl regionFunctionContext =\n         (RegionFunctionContextImpl) context;\n+\n     ByteArrayWrapper key =\n         (ByteArrayWrapper) regionFunctionContext.getFilter().iterator().next();\n+\n     Region<ByteArrayWrapper, RedisSet> localRegion =\n         regionFunctionContext.getLocalDataSet(regionFunctionContext.getDataSet());\n+\n     Object[] args = context.getArguments();\n     RedisCommandType command = (RedisCommandType) args[0];\n-    Object result = compute(regionFunctionContext.getDataSet(), key, command, args);\n-    context.getResultSender().lastResult(result);\n+\n+    Runnable computation = () -> {\n+      Object result = compute(localRegion, key, command, args);\n+      context.getResultSender().lastResult(result);\n+    };\n+\n+    computeWithPrimaryLocked(key, (LocalDataSet) localRegion, computation);\n   }\n \n   @Override\n"}}, {"oid": "2d6db7d79bf00e377b4142370b342122a64f1a35", "url": "https://github.com/apache/geode/commit/2d6db7d79bf00e377b4142370b342122a64f1a35", "message": "rename now uses the new data model", "committedDate": "2020-05-23T01:52:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyMjM0Mw==", "url": "https://github.com/apache/geode/pull/5152#discussion_r429522343", "bodyText": "What if get returns null? I think in that case rename should immediately return false.", "author": "dschneider-pivotal", "createdAt": "2020-05-23T07:18:19Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java", "diffHunk": "@@ -46,4 +47,13 @@ public boolean del(ByteArrayWrapper key) {\n   public boolean exists(ByteArrayWrapper key) {\n     return localRegion.containsKey(key);\n   }\n+\n+  public boolean rename(ByteArrayWrapper oldKey, ByteArrayWrapper newKey) {\n+\n+    Object value = localRegion.get(oldKey);", "originalCommit": "92ba7d039687ff29efb50bae1be3a263419db0bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1d3b9adc8680988ad7fa49650d033979e303ff", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java\nindex bc2cffa0bd..f11c1e8eff 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java\n\n@@ -18,40 +18,95 @@ package org.apache.geode.redis.internal.executor;\n import org.apache.geode.cache.Region;\n import org.apache.geode.redis.internal.ByteArrayWrapper;\n import org.apache.geode.redis.internal.RedisData;\n-import org.apache.geode.redis.internal.RegionProvider;\n \n-@SuppressWarnings(\"unchecked\")\n-class RedisKeyInRegion {\n-  private Region localRegion;\n-  private RegionProvider regionProvider;\n+public class RedisKeyInRegion implements RedisKeyCommands {\n+  protected final Region<ByteArrayWrapper, RedisData> region;\n \n-  public RedisKeyInRegion(Region localRegion, RegionProvider regionProvider) {\n-    this.localRegion = localRegion;\n-    this.regionProvider = regionProvider;\n+  @SuppressWarnings(\"unchecked\")\n+  public RedisKeyInRegion(Region region) {\n+    this.region = region;\n   }\n \n+  @Override\n   public boolean del(ByteArrayWrapper key) {\n-    RedisData redisData = (RedisData) localRegion.get(key);\n+    RedisData redisData = getRedisData(key);\n     if (redisData == null) {\n       return false;\n     }\n-    switch (redisData.getType()) {\n-      case REDIS_SET:\n-      case REDIS_HASH:\n-        return localRegion.remove(key) != null;\n-      default:\n-        return regionProvider.removeKey(key);\n-    }\n+    return region.remove(key) != null;\n   }\n \n+  @Override\n   public boolean exists(ByteArrayWrapper key) {\n-    return localRegion.containsKey(key);\n+    return getRedisData(key) != null;\n+  }\n+\n+  @Override\n+  public long pttl(ByteArrayWrapper key) {\n+    RedisData redisData = getRedisData(key);\n+    if (redisData == null) {\n+      return -2;\n+    }\n+    return redisData.pttl(region, key);\n+  }\n+\n+  @Override\n+  public int pexpireat(ByteArrayWrapper key, long timestamp) {\n+    RedisData redisData = getRedisData(key);\n+    if (redisData == null) {\n+      return 0;\n+    }\n+    long now = System.currentTimeMillis();\n+    if (now >= timestamp) {\n+      // already expired\n+      del(key);\n+    } else {\n+      redisData.setExpirationTimestamp(region, key, timestamp);\n+    }\n+    return 1;\n+  }\n+\n+  @Override\n+  public int persist(ByteArrayWrapper key) {\n+    RedisData redisData = getRedisData(key);\n+    if (redisData == null) {\n+      return 0;\n+    }\n+    return redisData.persist(region, key);\n+  }\n+\n+  @Override\n+  public String type(ByteArrayWrapper key) {\n+    RedisData redisData = getRedisData(key);\n+    if (redisData == null) {\n+      return \"none\";\n+    }\n+    return redisData.getType().toString();\n+  }\n+\n+  protected RedisData getRedisData(ByteArrayWrapper key) {\n+    return getRedisDataOrDefault(key, null);\n+  }\n+\n+  protected RedisData getRedisDataOrDefault(ByteArrayWrapper key, RedisData defaultValue) {\n+    RedisData result = region.get(key);\n+    if (result != null) {\n+      if (result.hasExpired()) {\n+        region.remove(key);\n+        result = null;\n+      }\n+    }\n+    if (result == null) {\n+      return defaultValue;\n+    } else {\n+      return result;\n+    }\n   }\n \n   public boolean rename(ByteArrayWrapper oldKey, ByteArrayWrapper newKey) {\n \n-    Object value = localRegion.get(oldKey);\n-    localRegion.put(newKey, value);\n+    RedisData value = region.get(oldKey);\n+    region.put(newKey, value);\n     del(oldKey);\n \n     return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyMjM3OQ==", "url": "https://github.com/apache/geode/pull/5152#discussion_r429522379", "bodyText": "It looks like this impl will not work on String since they do not yet store their data in the region.\nIt might be best just to wait for the String work to complete", "author": "dschneider-pivotal", "createdAt": "2020-05-23T07:19:13Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java", "diffHunk": "@@ -46,4 +47,13 @@ public boolean del(ByteArrayWrapper key) {\n   public boolean exists(ByteArrayWrapper key) {\n     return localRegion.containsKey(key);\n   }\n+\n+  public boolean rename(ByteArrayWrapper oldKey, ByteArrayWrapper newKey) {\n+\n+    Object value = localRegion.get(oldKey);", "originalCommit": "92ba7d039687ff29efb50bae1be3a263419db0bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1d3b9adc8680988ad7fa49650d033979e303ff", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java\nindex bc2cffa0bd..f11c1e8eff 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java\n\n@@ -18,40 +18,95 @@ package org.apache.geode.redis.internal.executor;\n import org.apache.geode.cache.Region;\n import org.apache.geode.redis.internal.ByteArrayWrapper;\n import org.apache.geode.redis.internal.RedisData;\n-import org.apache.geode.redis.internal.RegionProvider;\n \n-@SuppressWarnings(\"unchecked\")\n-class RedisKeyInRegion {\n-  private Region localRegion;\n-  private RegionProvider regionProvider;\n+public class RedisKeyInRegion implements RedisKeyCommands {\n+  protected final Region<ByteArrayWrapper, RedisData> region;\n \n-  public RedisKeyInRegion(Region localRegion, RegionProvider regionProvider) {\n-    this.localRegion = localRegion;\n-    this.regionProvider = regionProvider;\n+  @SuppressWarnings(\"unchecked\")\n+  public RedisKeyInRegion(Region region) {\n+    this.region = region;\n   }\n \n+  @Override\n   public boolean del(ByteArrayWrapper key) {\n-    RedisData redisData = (RedisData) localRegion.get(key);\n+    RedisData redisData = getRedisData(key);\n     if (redisData == null) {\n       return false;\n     }\n-    switch (redisData.getType()) {\n-      case REDIS_SET:\n-      case REDIS_HASH:\n-        return localRegion.remove(key) != null;\n-      default:\n-        return regionProvider.removeKey(key);\n-    }\n+    return region.remove(key) != null;\n   }\n \n+  @Override\n   public boolean exists(ByteArrayWrapper key) {\n-    return localRegion.containsKey(key);\n+    return getRedisData(key) != null;\n+  }\n+\n+  @Override\n+  public long pttl(ByteArrayWrapper key) {\n+    RedisData redisData = getRedisData(key);\n+    if (redisData == null) {\n+      return -2;\n+    }\n+    return redisData.pttl(region, key);\n+  }\n+\n+  @Override\n+  public int pexpireat(ByteArrayWrapper key, long timestamp) {\n+    RedisData redisData = getRedisData(key);\n+    if (redisData == null) {\n+      return 0;\n+    }\n+    long now = System.currentTimeMillis();\n+    if (now >= timestamp) {\n+      // already expired\n+      del(key);\n+    } else {\n+      redisData.setExpirationTimestamp(region, key, timestamp);\n+    }\n+    return 1;\n+  }\n+\n+  @Override\n+  public int persist(ByteArrayWrapper key) {\n+    RedisData redisData = getRedisData(key);\n+    if (redisData == null) {\n+      return 0;\n+    }\n+    return redisData.persist(region, key);\n+  }\n+\n+  @Override\n+  public String type(ByteArrayWrapper key) {\n+    RedisData redisData = getRedisData(key);\n+    if (redisData == null) {\n+      return \"none\";\n+    }\n+    return redisData.getType().toString();\n+  }\n+\n+  protected RedisData getRedisData(ByteArrayWrapper key) {\n+    return getRedisDataOrDefault(key, null);\n+  }\n+\n+  protected RedisData getRedisDataOrDefault(ByteArrayWrapper key, RedisData defaultValue) {\n+    RedisData result = region.get(key);\n+    if (result != null) {\n+      if (result.hasExpired()) {\n+        region.remove(key);\n+        result = null;\n+      }\n+    }\n+    if (result == null) {\n+      return defaultValue;\n+    } else {\n+      return result;\n+    }\n   }\n \n   public boolean rename(ByteArrayWrapper oldKey, ByteArrayWrapper newKey) {\n \n-    Object value = localRegion.get(oldKey);\n-    localRegion.put(newKey, value);\n+    RedisData value = region.get(oldKey);\n+    region.put(newKey, value);\n     del(oldKey);\n \n     return true;\n"}}, {"oid": "9a1d3b9adc8680988ad7fa49650d033979e303ff", "url": "https://github.com/apache/geode/commit/9a1d3b9adc8680988ad7fa49650d033979e303ff", "message": "WIP", "committedDate": "2020-06-01T21:49:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0OTM1Nw==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434749357", "bodyText": "use AbstractExecutor.getRedisKeyCommands(context) instead", "author": "dschneider-pivotal", "createdAt": "2020-06-03T17:51:52Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java", "diffHunk": "@@ -47,47 +35,15 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n \n     ByteArrayWrapper key = command.getKey();\n     ByteArrayWrapper newKey = new ByteArrayWrapper(commandElems.get(2));\n+    RedisKeyCommands redisKeyCommands =\n+        new RedisKeyCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());", "originalCommit": "088633993ef84ab893bbf8348fe7ab26cc272e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MTgxMA==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434781810", "bodyText": "oh cool, just updated it!", "author": "sabbey37", "createdAt": "2020-06-03T18:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0OTM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6d59710e8132cc6456de513ea0e89842e165ee4f", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\nindex a43e93a0fb..79165b7396 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameExecutor.java\n\n@@ -26,18 +26,16 @@ import org.apache.geode.redis.internal.RedisConstants;\n public class RenameExecutor extends AbstractExecutor {\n   @Override\n   public void executeCommand(Command command, ExecutionHandlerContext context) {\n-    List<byte[]> commandElems = command.getProcessedCommand();\n-    if (commandElems.size() < 3) {\n-      command.setResponse(\n-          Coder.getErrorResponse(context.getByteBufAllocator(), RedisConstants.ArityDef.KEYS));\n+    List<ByteArrayWrapper> commandElems = command.getProcessedCommandWrappers();\n+    ByteArrayWrapper key = command.getKey();\n+    ByteArrayWrapper newKey = commandElems.get(2);\n+    RedisKeyCommands redisKeyCommands = getRedisKeyCommands(context);\n+\n+    if (key.equals(newKey)) {\n+      command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), \"OK\"));\n       return;\n     }\n \n-    ByteArrayWrapper key = command.getKey();\n-    ByteArrayWrapper newKey = new ByteArrayWrapper(commandElems.get(2));\n-    RedisKeyCommands redisKeyCommands =\n-        new RedisKeyCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());\n-\n     if (!redisKeyCommands.rename(key, newKey)) {\n       command.setResponse(\n           Coder.getErrorResponse(context.getByteBufAllocator(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0OTk3Nw==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434749977", "bodyText": "get rid of RegionProvider on this function. I think this is left over from when we had multiple regions.", "author": "dschneider-pivotal", "createdAt": "2020-06-03T17:52:57Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameFunction.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.executor;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.LocalDataSet;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.execute.RegionFunctionContextImpl;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.RegionProvider;\n+import org.apache.geode.redis.internal.executor.set.RedisSet;\n+import org.apache.geode.redis.internal.executor.set.SingleResultCollector;\n+import org.apache.geode.redis.internal.executor.set.StripedExecutor;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class RenameFunction implements Function {\n+\n+  public static final String ID = \"REDIS_RENAME_FUNCTION\";\n+\n+  private final transient StripedExecutor stripedExecutor;\n+  private final RegionProvider regionProvider;", "originalCommit": "088633993ef84ab893bbf8348fe7ab26cc272e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MjUwNw==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434782507", "bodyText": "It is! Thank you for catching that.", "author": "sabbey37", "createdAt": "2020-06-03T18:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0OTk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6d59710e8132cc6456de513ea0e89842e165ee4f", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameFunction.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameFunction.java\nindex ba7349a0d7..01ffd300bb 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameFunction.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RenameFunction.java\n\n@@ -30,7 +30,6 @@ import org.apache.geode.internal.cache.LocalDataSet;\n import org.apache.geode.internal.cache.PartitionedRegion;\n import org.apache.geode.internal.cache.execute.RegionFunctionContextImpl;\n import org.apache.geode.redis.internal.ByteArrayWrapper;\n-import org.apache.geode.redis.internal.RegionProvider;\n import org.apache.geode.redis.internal.executor.set.RedisSet;\n import org.apache.geode.redis.internal.executor.set.SingleResultCollector;\n import org.apache.geode.redis.internal.executor.set.StripedExecutor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDkxNw==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434750917", "bodyText": "change \"this associations\" to one of the following \"these associations\" or \"this association\".", "author": "dschneider-pivotal", "createdAt": "2020-06-03T17:54:37Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java", "diffHunk": "@@ -18,10 +18,11 @@\n \n import java.util.concurrent.Callable;\n \n+\n /**\n  * Allows users to \"stripe\" their execution in such a way that all tasks belonging to one stripe are\n  * executed in-order. A stripe is somehow associated with an Object called the \"stripeId\".\n- * It is upto the implementor of this interface to decide how to do this assocations.\n+ * It is up to the implementor of this interface to decide how to do this associations.", "originalCommit": "088633993ef84ab893bbf8348fe7ab26cc272e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MzQ4OA==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434783488", "bodyText": "good catch, I'll update it.", "author": "sabbey37", "createdAt": "2020-06-03T18:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "6d59710e8132cc6456de513ea0e89842e165ee4f", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java\nindex 9d416ad646..a2c6fceab7 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java\n\n@@ -21,8 +21,8 @@ import java.util.concurrent.Callable;\n \n /**\n  * Allows users to \"stripe\" their execution in such a way that all tasks belonging to one stripe are\n- * executed in-order. A stripe is somehow associated with an Object called the \"stripeId\".\n- * It is up to the implementor of this interface to decide how to do this associations.\n+ * executed in order. A stripe is associated with an Object called the \"stripeId\".\n+ * It is up to the implementor of this interface to decide how to do this association.\n  * For example it could use the hashCode of the stripeId or use the equals method.\n  * Work submitted for the same stripe is guaranteed to be executed sequentially.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MzI3MQ==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434753271", "bodyText": "consider getting rid of \"areSameStripe\" in favor of \"compareStripes(o1, o2) == 0\".", "author": "dschneider-pivotal", "createdAt": "2020-06-03T17:58:39Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java", "diffHunk": "@@ -35,4 +36,8 @@\n    */\n   public <T> T execute(Object stripeId,\n       Callable<T> callable);\n+\n+  public boolean areSameStripe(Object object1, Object object2);", "originalCommit": "088633993ef84ab893bbf8348fe7ab26cc272e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTI3Mg==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434789272", "bodyText": "Sounds good, I'll update it", "author": "sabbey37", "createdAt": "2020-06-03T19:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MzI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d59710e8132cc6456de513ea0e89842e165ee4f", "chunk": "diff --git a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java\nindex 9d416ad646..a2c6fceab7 100644\n--- a/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java\n+++ b/geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java\n\n@@ -37,7 +37,5 @@ public interface StripedExecutor {\n   public <T> T execute(Object stripeId,\n       Callable<T> callable);\n \n-  public boolean areSameStripe(Object object1, Object object2);\n-\n   int compareStripes(Object object1, Object object2);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1Njg3MQ==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434756871", "bodyText": "If newKey is equal to oldKey it looks like this code will do the wrong thing. The redis rename docs say: \"<= 3.2.0: Before Redis 3.2.0, an error is returned if source and destination names are the same.\". Perhaps the best way to handle this is to check in the renameExecutor for equal keys and return \"OK\".", "author": "dschneider-pivotal", "createdAt": "2020-06-03T18:04:45Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/RedisKeyInRegion.java", "diffHunk": "@@ -102,4 +102,16 @@ protected RedisData getRedisDataOrDefault(ByteArrayWrapper key, RedisData defaul\n       return result;\n     }\n   }\n+\n+  public boolean rename(ByteArrayWrapper oldKey, ByteArrayWrapper newKey) {\n+    RedisData value = getRedisData(oldKey);\n+    if (value == null) {\n+      return false;\n+    }\n+\n+    region.put(newKey, value);\n+    region.remove(oldKey);", "originalCommit": "088633993ef84ab893bbf8348fe7ab26cc272e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MzgyNQ==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434773825", "bodyText": "we actually added some logic into the RedisKeyCommandsFunctionExecutor for if the key does not exist...we can probably add this here", "author": "prettyClouds", "createdAt": "2020-06-03T18:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1Njg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwMzQ5Nw==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434803497", "bodyText": "Updating this and adding a test.", "author": "sabbey37", "createdAt": "2020-06-03T19:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1Njg3MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4fb8b5eff346d6d54f8739a011611b10ee653689", "url": "https://github.com/apache/geode/commit/4fb8b5eff346d6d54f8739a011611b10ee653689", "message": "Change Redis Rename Functions to Make use of Striped Executor", "committedDate": "2020-06-03T18:07:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwNzI1NA==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434807254", "bodyText": "It would probably be better for you just to wait for: #5209. Otherwise this ignore will need to be removed in yet another pr.", "author": "dschneider-pivotal", "createdAt": "2020-06-03T19:37:12Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ShutdownIntegrationTest.java", "diffHunk": "@@ -56,6 +57,7 @@ public void shutdownActuallyShutsDownTheServer() {\n   }\n \n   @Test\n+  @Ignore(\"will be remedied in: https://github.com/apache/geode/pull/5204\")", "originalCommit": "2093d4f9d792a74900c5b2170db36abdd92f7239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyODM3NA==", "url": "https://github.com/apache/geode/pull/5152#discussion_r434828374", "bodyText": "Merged it in!", "author": "sabbey37", "createdAt": "2020-06-03T20:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwNzI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "6d59710e8132cc6456de513ea0e89842e165ee4f", "chunk": "diff --git a/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ShutdownIntegrationTest.java b/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ShutdownIntegrationTest.java\nindex 2fdaf8b13e..9c0ef3af48 100644\n--- a/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ShutdownIntegrationTest.java\n+++ b/geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ShutdownIntegrationTest.java\n\n@@ -63,11 +63,7 @@ public class ShutdownIntegrationTest {\n \n     // Unfortunately Jedis' shutdown() doesn't seem to throw a JedisDataException when the command\n     // returns an error.\n-    try {\n-      jedis.shutdown();\n-    } catch (JedisConnectionException ignore) {\n-      // Sometimes it throws sometimes it does not.\n-    }\n+    jedis.shutdown();\n \n     // the old jedis client may be closed by shutdown even though disabled on server\n \n"}}, {"oid": "6d59710e8132cc6456de513ea0e89842e165ee4f", "url": "https://github.com/apache/geode/commit/6d59710e8132cc6456de513ea0e89842e165ee4f", "message": "Change Redis Rename Functions to Make use of Striped Executor", "committedDate": "2020-06-03T20:06:54Z", "type": "commit"}, {"oid": "891f17aa780963e584ccbe1c2e39be6f81ebf374", "url": "https://github.com/apache/geode/commit/891f17aa780963e584ccbe1c2e39be6f81ebf374", "message": "Unignores formerly flaky shutdown test", "committedDate": "2020-06-03T20:11:02Z", "type": "commit"}, {"oid": "891f17aa780963e584ccbe1c2e39be6f81ebf374", "url": "https://github.com/apache/geode/commit/891f17aa780963e584ccbe1c2e39be6f81ebf374", "message": "Unignores formerly flaky shutdown test", "committedDate": "2020-06-03T20:11:02Z", "type": "forcePushed"}, {"oid": "80d4b8e2cec85168c9b8991ea300f13106395c6a", "url": "https://github.com/apache/geode/commit/80d4b8e2cec85168c9b8991ea300f13106395c6a", "message": "Re-ignores flaky shutdown test", "committedDate": "2020-06-03T20:51:49Z", "type": "commit"}]}