{"pr_number": 5000, "pr_title": "GEODE-7963: solution for faulty bucket metrics", "pr_createdAt": "2020-04-26T13:08:43Z", "pr_url": "https://github.com/apache/geode/pull/5000", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NTQwMA==", "url": "https://github.com/apache/geode/pull/5000#discussion_r418545400", "bodyText": "The exception is never thrown, it can be deleted.", "author": "jujoramos", "createdAt": "2020-05-01T13:41:31Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements\n+    Serializable {\n+\n+  private static MemberVM locator, server1, server2, server3, server4;\n+\n+  @ClassRule\n+  public static ClusterStartupRule lsRule = new ClusterStartupRule();\n+\n+  @ClassRule\n+  public static GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public TestName testName = new SerializableTestName();\n+\n+  @BeforeClass\n+  public static void before() throws Exception {\n+    locator = lsRule.startLocatorVM(0);\n+    server1 = lsRule.startServerVM(1, \"\", locator.getPort());\n+    server2 = lsRule.startServerVM(2, \"\", locator.getPort());\n+    server3 = lsRule.startServerVM(3, \"\", locator.getPort());\n+    server4 = lsRule.startServerVM(4, \"\", locator.getPort());\n+\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void testBucketCount() throws InterruptedException {", "originalCommit": "a68648b49231d55077094f888ab3e58547f03510", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56088a4b2917eb05e08d33ab587c66f5d8866631", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\nindex ade040f5e9..80d42d2101 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\n\n@@ -29,6 +29,7 @@ import org.junit.experimental.categories.Category;\n import org.junit.rules.TestName;\n \n import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n import org.apache.geode.distributed.DistributedMember;\n import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n import org.apache.geode.test.dunit.rules.MemberVM;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NTkyNQ==", "url": "https://github.com/apache/geode/pull/5000#discussion_r418545925", "bodyText": "Unused variable, it can be deleted.", "author": "jujoramos", "createdAt": "2020-05-01T13:42:45Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements\n+    Serializable {\n+\n+  private static MemberVM locator, server1, server2, server3, server4;\n+\n+  @ClassRule\n+  public static ClusterStartupRule lsRule = new ClusterStartupRule();\n+\n+  @ClassRule\n+  public static GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public TestName testName = new SerializableTestName();\n+\n+  @BeforeClass\n+  public static void before() throws Exception {\n+    locator = lsRule.startLocatorVM(0);\n+    server1 = lsRule.startServerVM(1, \"\", locator.getPort());\n+    server2 = lsRule.startServerVM(2, \"\", locator.getPort());\n+    server3 = lsRule.startServerVM(3, \"\", locator.getPort());\n+    server4 = lsRule.startServerVM(4, \"\", locator.getPort());\n+\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void testBucketCount() throws InterruptedException {\n+    String regionName = \"testCreateRegion\";\n+\n+    gfsh.executeAndAssertThat(\"create region\"\n+        + \" --name=\" + regionName\n+        + \" --type=PARTITION_PERSISTENT\"\n+        + \" --total-num-buckets=1000\").statusIsSuccess();\n+\n+    gfsh.executeAndAssertThat(\"query --query=\\\"select * from /\" + regionName + \"\\\"\")\n+        .statusIsSuccess();\n+\n+    server1.invoke(() -> waitBucketsToInitialize(245));\n+    server2.invoke(() -> waitBucketsToInitialize(245));\n+    server3.invoke(() -> waitBucketsToInitialize(245));\n+    server4.invoke(() -> waitBucketsToInitialize(245));\n+\n+    for (int i = 1; i < 4; i++) {\n+      final String tempname = \"/\" + regionName + i;", "originalCommit": "a68648b49231d55077094f888ab3e58547f03510", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56088a4b2917eb05e08d33ab587c66f5d8866631", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\nindex ade040f5e9..80d42d2101 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\n\n@@ -29,6 +29,7 @@ import org.junit.experimental.categories.Category;\n import org.junit.rules.TestName;\n \n import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n import org.apache.geode.distributed.DistributedMember;\n import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n import org.apache.geode.test.dunit.rules.MemberVM;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NjgyMg==", "url": "https://github.com/apache/geode/pull/5000#discussion_r418546822", "bodyText": "You don't need to execute the query for buckets to get created, it's easier (and cleaner) to execute PartitionRegionHelper.assignBucketsToPartitions(Region<?, ?> region).\nYou can have a look at PartitionedRegionAttributesMutatorDUnitTest for examples.", "author": "jujoramos", "createdAt": "2020-05-01T13:44:54Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements\n+    Serializable {\n+\n+  private static MemberVM locator, server1, server2, server3, server4;\n+\n+  @ClassRule\n+  public static ClusterStartupRule lsRule = new ClusterStartupRule();\n+\n+  @ClassRule\n+  public static GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public TestName testName = new SerializableTestName();\n+\n+  @BeforeClass\n+  public static void before() throws Exception {\n+    locator = lsRule.startLocatorVM(0);\n+    server1 = lsRule.startServerVM(1, \"\", locator.getPort());\n+    server2 = lsRule.startServerVM(2, \"\", locator.getPort());\n+    server3 = lsRule.startServerVM(3, \"\", locator.getPort());\n+    server4 = lsRule.startServerVM(4, \"\", locator.getPort());\n+\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void testBucketCount() throws InterruptedException {\n+    String regionName = \"testCreateRegion\";\n+\n+    gfsh.executeAndAssertThat(\"create region\"\n+        + \" --name=\" + regionName\n+        + \" --type=PARTITION_PERSISTENT\"\n+        + \" --total-num-buckets=1000\").statusIsSuccess();\n+\n+    gfsh.executeAndAssertThat(\"query --query=\\\"select * from /\" + regionName + \"\\\"\")\n+        .statusIsSuccess();", "originalCommit": "a68648b49231d55077094f888ab3e58547f03510", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56088a4b2917eb05e08d33ab587c66f5d8866631", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\nindex ade040f5e9..80d42d2101 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\n\n@@ -29,6 +29,7 @@ import org.junit.experimental.categories.Category;\n import org.junit.rules.TestName;\n \n import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n import org.apache.geode.distributed.DistributedMember;\n import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n import org.apache.geode.test.dunit.rules.MemberVM;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0ODg0Mw==", "url": "https://github.com/apache/geode/pull/5000#discussion_r418548843", "bodyText": "The test might become flaky due to the assertions used (waitBucketsToInitialize(X) -> getTotalBucketCount() >= X). Maybe it's better to assert the total number of buckets instead?.", "author": "jujoramos", "createdAt": "2020-05-01T13:49:43Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements", "originalCommit": "a68648b49231d55077094f888ab3e58547f03510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NzIyOQ==", "url": "https://github.com/apache/geode/pull/5000#discussion_r418587229", "bodyText": "Thanx for comments.", "author": "mivanac", "createdAt": "2020-05-01T15:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0ODg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "56088a4b2917eb05e08d33ab587c66f5d8866631", "chunk": "diff --git a/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java b/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\nindex ade040f5e9..80d42d2101 100644\n--- a/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\n+++ b/geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java\n\n@@ -29,6 +29,7 @@ import org.junit.experimental.categories.Category;\n import org.junit.rules.TestName;\n \n import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n import org.apache.geode.distributed.DistributedMember;\n import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n import org.apache.geode.test.dunit.rules.MemberVM;\n"}}, {"oid": "56088a4b2917eb05e08d33ab587c66f5d8866631", "url": "https://github.com/apache/geode/commit/56088a4b2917eb05e08d33ab587c66f5d8866631", "message": "GEODE-7963: update after comments", "committedDate": "2020-05-01T15:14:45Z", "type": "forcePushed"}, {"oid": "12918b96629e12db658e1b5d384e97147d0ec58a", "url": "https://github.com/apache/geode/commit/12918b96629e12db658e1b5d384e97147d0ec58a", "message": "GEODE-7963: update after comments", "committedDate": "2020-05-01T18:18:00Z", "type": "forcePushed"}, {"oid": "31d1d6b12d9faa564faab828f8971193e69114cd", "url": "https://github.com/apache/geode/commit/31d1d6b12d9faa564faab828f8971193e69114cd", "message": "GEODE-7963: update after comments", "committedDate": "2020-05-01T19:10:30Z", "type": "forcePushed"}, {"oid": "345739e1ddc54c7d405802b23f1a41f4fc7974cb", "url": "https://github.com/apache/geode/commit/345739e1ddc54c7d405802b23f1a41f4fc7974cb", "message": "GEODE-7963: small updates", "committedDate": "2020-05-08T18:36:25Z", "type": "forcePushed"}, {"oid": "1bee2251a89f6a9551a316d1786205569f05b621", "url": "https://github.com/apache/geode/commit/1bee2251a89f6a9551a316d1786205569f05b621", "message": "GEODE-7963: solution for faulty bucket metrics", "committedDate": "2020-05-09T05:38:08Z", "type": "commit"}, {"oid": "ed13ac3a24849f87ba62bca51587e9db027e9d3f", "url": "https://github.com/apache/geode/commit/ed13ac3a24849f87ba62bca51587e9db027e9d3f", "message": "GEODE-7963: added test to reproduce fault", "committedDate": "2020-05-09T05:38:08Z", "type": "commit"}, {"oid": "4e880fd8bda96f87afaeb1ae5bd869c25964a211", "url": "https://github.com/apache/geode/commit/4e880fd8bda96f87afaeb1ae5bd869c25964a211", "message": "GEODE-7963: added UT", "committedDate": "2020-05-09T05:38:08Z", "type": "commit"}, {"oid": "27d41badf1e18acec110ab84f8c6a23ba3f09b2b", "url": "https://github.com/apache/geode/commit/27d41badf1e18acec110ab84f8c6a23ba3f09b2b", "message": "GEODE-7963: update after comments", "committedDate": "2020-05-09T05:38:08Z", "type": "commit"}, {"oid": "28e2ad159ef0a884ea6b785788764eb47b5a2d81", "url": "https://github.com/apache/geode/commit/28e2ad159ef0a884ea6b785788764eb47b5a2d81", "message": "GEODE-7963: small updates", "committedDate": "2020-05-09T05:53:19Z", "type": "commit"}, {"oid": "28e2ad159ef0a884ea6b785788764eb47b5a2d81", "url": "https://github.com/apache/geode/commit/28e2ad159ef0a884ea6b785788764eb47b5a2d81", "message": "GEODE-7963: small updates", "committedDate": "2020-05-09T05:53:19Z", "type": "forcePushed"}]}