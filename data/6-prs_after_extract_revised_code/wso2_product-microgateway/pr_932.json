{"pr_number": 932, "pr_title": "API Key Feature", "pr_createdAt": "2020-01-14T10:42:17Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/932", "timeline": [{"oid": "de956453ee5245248fbce16c5b11e9568a488da4", "url": "https://github.com/wso2/product-microgateway/commit/de956453ee5245248fbce16c5b11e9568a488da4", "message": "Improve code", "committedDate": "2020-01-16T04:44:53Z", "type": "forcePushed"}, {"oid": "2f8b68b9167af60afef9a259a2f488b57664076c", "url": "https://github.com/wso2/product-microgateway/commit/2f8b68b9167af60afef9a259a2f488b57664076c", "message": "improve code", "committedDate": "2020-01-16T12:05:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNDUxNQ==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368434515", "bodyText": "Missing License", "author": "praminda", "createdAt": "2020-01-20T09:10:33Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.wso2.apimgt.gateway.cli.model.config;", "originalCommit": "f151c236635f87eefea59362c47324d236e1eca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb2461ef2161e6f254eaa186107075786bb766e", "chunk": "diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java\nindex a582dbb58..e8da1353c 100644\n--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java\n+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java\n\n@@ -1,3 +1,20 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n package org.wso2.apimgt.gateway.cli.model.config;\n \n import io.swagger.v3.oas.models.security.SecurityScheme.In;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MDY5Nw==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368440697", "bodyText": "I still have my doubts on why we need to pass a built json to mustache. We do this even now by creating the json structure from the mustache templates.\nSo you just pass the DTO to template and from the template you build the json by iterating the DTO properties.", "author": "praminda", "createdAt": "2020-01-20T09:23:31Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -89,8 +90,8 @@ public BallerinaOperation buildContext(Operation operation, ExtendedAPI api) thr\n         this.externalDocs = operation.getExternalDocs();\n         this.parameters = new ArrayList<>();\n         //to provide resource level security in dev-first approach\n-        this.basicAuth = OpenAPICodegenUtils.getMgwResourceBasicAuth(operation);\n-        this.authProviders = OpenAPICodegenUtils.setAuthProviders(this.basicAuth);\n+        this.apiKeys = new Gson().toJson(OpenAPICodegenUtils.generateAPIKeysFromSecurity(operation.getSecurity()));", "originalCommit": "f151c236635f87eefea59362c47324d236e1eca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb2461ef2161e6f254eaa186107075786bb766e", "chunk": "diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\nindex 1e4e237a2..70d82c68f 100644\n--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\n+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\n\n@@ -90,7 +92,7 @@ public class BallerinaOperation implements BallerinaOpenAPIObject<BallerinaOpera\n         this.externalDocs = operation.getExternalDocs();\n         this.parameters = new ArrayList<>();\n         //to provide resource level security in dev-first approach\n-        this.apiKeys = new Gson().toJson(OpenAPICodegenUtils.generateAPIKeysFromSecurity(operation.getSecurity()));\n+        this.apiKeys = OpenAPICodegenUtils.generateAPIKeysFromSecurity(operation.getSecurity());\n         this.authProviders = OpenAPICodegenUtils.getMgwResourceSecurity(operation);\n         //to set resource level scopes in dev-first approach\n         this.scope = OpenAPICodegenUtils.getMgwResourceScope(operation);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MjI3OQ==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368442279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n          \n          \n            \n            \n          \n          \n            \n                @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")", "author": "praminda", "createdAt": "2020-01-20T09:26:37Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -60,7 +60,8 @@\n     private String responseInterceptor;\n     private String apiRequestInterceptor;\n     private String apiResponseInterceptor;\n-    private BasicAuth basicAuth;\n+    @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")", "originalCommit": "f151c236635f87eefea59362c47324d236e1eca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb2461ef2161e6f254eaa186107075786bb766e", "chunk": "diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\nindex 1e4e237a2..70d82c68f 100644\n--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\n+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\n\n@@ -60,8 +60,10 @@ public class BallerinaOperation implements BallerinaOpenAPIObject<BallerinaOpera\n     private String responseInterceptor;\n     private String apiRequestInterceptor;\n     private String apiResponseInterceptor;\n+\n     @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private String apiKeys;\n+    private List<APIKey> apiKeys;\n+\n     @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n     private List<String> authProviders;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MjUwMg==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368442502", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String apiKeys;\n          \n          \n            \n                private String apiKeys;", "author": "praminda", "createdAt": "2020-01-20T09:27:06Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -60,7 +60,8 @@\n     private String responseInterceptor;\n     private String apiRequestInterceptor;\n     private String apiResponseInterceptor;\n-    private BasicAuth basicAuth;\n+    @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+    private String apiKeys;", "originalCommit": "f151c236635f87eefea59362c47324d236e1eca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb2461ef2161e6f254eaa186107075786bb766e", "chunk": "diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\nindex 1e4e237a2..70d82c68f 100644\n--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\n+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java\n\n@@ -60,8 +60,10 @@ public class BallerinaOperation implements BallerinaOpenAPIObject<BallerinaOpera\n     private String responseInterceptor;\n     private String apiRequestInterceptor;\n     private String apiResponseInterceptor;\n+\n     @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private String apiKeys;\n+    private List<APIKey> apiKeys;\n+\n     @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n     private List<String> authProviders;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0NzEzNA==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368447134", "bodyText": "This looks like an util method. Shall we move this method to a util class?\n// returns APIKey formatted json string of {@code securityRequirementList}\nprivate String setAPIKeySecuritySchemes(List<SecurityRequirement> securityRequirementList) {...}", "author": "praminda", "createdAt": "2020-01-20T09:36:21Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaService.java", "diffHunk": "@@ -263,8 +267,11 @@ public void setBasepath(String basepath) {\n     }\n \n     private void setSecuritySchemas(String schemas) {\n-        BasicAuth basicAuth = OpenAPICodegenUtils.generateBasicAuthFromSecurity(schemas);\n-        authProviders = OpenAPICodegenUtils.setAuthProviders(basicAuth);\n+        authProviders = OpenAPICodegenUtils.getAuthProviders(schemas);\n+    }\n+\n+    private void setAPIKeySecuritySchemes(List<SecurityRequirement> securityRequirementList) {", "originalCommit": "f151c236635f87eefea59362c47324d236e1eca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb2461ef2161e6f254eaa186107075786bb766e", "chunk": "diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaService.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaService.java\nindex 71ac197b4..6dcaccb51 100644\n--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaService.java\n+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaService.java\n\n@@ -266,14 +265,6 @@ public class BallerinaService implements BallerinaOpenAPIObject<BallerinaService\n         this.basepath = basepath;\n     }\n \n-    private void setSecuritySchemas(String schemas) {\n-        authProviders = OpenAPICodegenUtils.getAuthProviders(schemas);\n-    }\n-\n-    private void setAPIKeySecuritySchemes(List<SecurityRequirement> securityRequirementList) {\n-        apiKeys = new Gson().toJson(OpenAPICodegenUtils.generateAPIKeysFromSecurity(securityRequirementList));\n-    }\n-\n     public void setIsDevFirst(boolean value) {\n         isDevFirst = value;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0OTM2OQ==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368449369", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-01-20T09:41:17Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -774,35 +777,23 @@ public static String getMgwResourceScope(Operation operation) {\n     }\n \n     /**\n-     * When the security schema string is provided as a comma separated set of values\n-     * generate the corresponding schema string.\n+     * Provide api keys for a given security requirement list\n      *\n-     * @param schemas comma separated security security schema types (ex. basic,oauth2)\n-     * @return {@link BasicAuth} object\n+     * @param securityRequirementList {@link List<SecurityRequirement>} object\n+     * @return list of API Keys\n      */\n-    public static BasicAuth generateBasicAuthFromSecurity(String schemas) {\n-        BasicAuth basicAuth = new BasicAuth();\n-        boolean basic = false;\n-        boolean oauth2 = false;\n-        String[] schemasArray = schemas.trim().split(\"\\\\s*,\\\\s*\");\n-        for (String s : schemasArray) {\n-            if (s.equalsIgnoreCase(\"basic\")) {\n-                basic = true;\n-            } else if (s.equalsIgnoreCase(\"oauth2\")) {\n-                oauth2 = true;\n-            }\n-        }\n-        if (basic && oauth2) {\n-            basicAuth.setOptional(true);\n-            basicAuth.setRequired(false);\n-        } else if (basic) {\n-            basicAuth.setRequired(true);\n-            basicAuth.setOptional(false);\n-        } else if (oauth2) {\n-            basicAuth.setOptional(false);\n-            basicAuth.setRequired(false);\n+    public static List<APIKey> generateAPIKeysFromSecurity(List<SecurityRequirement> securityRequirementList) {\n+        List<APIKey> apiKeys = new ArrayList<>();\n+        if (securityRequirementList != null) {\n+            securityRequirementList.forEach(value -> value.forEach((k, v) -> {\n+                //check if the key is in apikey list\n+                if (apiKeySecuritySchemaMap.containsKey(k)) {\n+                    apiKeys.add((APIKey) apiKeySecuritySchemaMap.get(k));\n+                }\n+", "originalCommit": "f151c236635f87eefea59362c47324d236e1eca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb2461ef2161e6f254eaa186107075786bb766e", "chunk": "diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java\nindex a7fc32810..2db4308dc 100644\n--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java\n+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java\n\n@@ -790,7 +790,6 @@ public class OpenAPICodegenUtils {\n                 if (apiKeySecuritySchemaMap.containsKey(k)) {\n                     apiKeys.add((APIKey) apiKeySecuritySchemaMap.get(k));\n                 }\n-\n             }));\n         }\n         return apiKeys;\n"}}, {"oid": "4fb2461ef2161e6f254eaa186107075786bb766e", "url": "https://github.com/wso2/product-microgateway/commit/4fb2461ef2161e6f254eaa186107075786bb766e", "message": "api key auth support and api key issue feature", "committedDate": "2020-01-23T09:11:04Z", "type": "commit"}, {"oid": "296bad497f5ae649b2e124f612f396484e75d483", "url": "https://github.com/wso2/product-microgateway/commit/296bad497f5ae649b2e124f612f396484e75d483", "message": "Merge remote-tracking branch 'upstream/master' into my-jwt-r3\n\n# Conflicts:\n#\tcomponents/micro-gateway-cli/src/main/resources/templates/listeners.mustache\n#\tcomponents/micro-gateway-core/src/main/ballerina/src/gateway/filters/subscription_filter.bal\n#\tcomponents/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal\n#\tcomponents/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_secure_listener.bal\n#\tdistribution/resources/conf/micro-gw.conf", "committedDate": "2020-01-23T09:33:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyMDkzOQ==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r370020939", "bodyText": "Missing license", "author": "praminda", "createdAt": "2020-01-23T09:52:11Z", "path": "tests/src/test/java/org/wso2/micro/gateway/tests/apikey/APIKeyTestCase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.wso2.micro.gateway.tests.apikey;", "originalCommit": "59daeab349cc8a99f89084b26f6eb15a75442eec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74736b78f13a43a540553c67f9d8b6323c2c973a", "chunk": "diff --git a/tests/src/test/java/org/wso2/micro/gateway/tests/apikey/APIKeyTestCase.java b/tests/src/test/java/org/wso2/micro/gateway/tests/apikey/APIKeyTestCase.java\nindex 4fb0454c7..59ce2f1af 100644\n--- a/tests/src/test/java/org/wso2/micro/gateway/tests/apikey/APIKeyTestCase.java\n+++ b/tests/src/test/java/org/wso2/micro/gateway/tests/apikey/APIKeyTestCase.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.micro.gateway.tests.apikey;\n \n import io.netty.handler.codec.http.HttpHeaderNames;\n"}}, {"oid": "74736b78f13a43a540553c67f9d8b6323c2c973a", "url": "https://github.com/wso2/product-microgateway/commit/74736b78f13a43a540553c67f9d8b6323c2c973a", "message": "Fix review comments", "committedDate": "2020-01-23T10:33:30Z", "type": "commit"}, {"oid": "74736b78f13a43a540553c67f9d8b6323c2c973a", "url": "https://github.com/wso2/product-microgateway/commit/74736b78f13a43a540553c67f9d8b6323c2c973a", "message": "Fix review comments", "committedDate": "2020-01-23T10:33:30Z", "type": "forcePushed"}, {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882", "url": "https://github.com/wso2/product-microgateway/commit/5a3a925d4ae74bf0e3649c5768bcebd093e09882", "message": "Clean test configs", "committedDate": "2020-01-24T04:56:01Z", "type": "commit"}, {"oid": "2fceecd13672a578b2e52d85cdaed356129f9a59", "url": "https://github.com/wso2/product-microgateway/commit/2fceecd13672a578b2e52d85cdaed356129f9a59", "message": "Merge upstream", "committedDate": "2020-01-27T10:07:53Z", "type": "commit"}, {"oid": "80d66417f6156d77e0396413735e126f5b839df6", "url": "https://github.com/wso2/product-microgateway/commit/80d66417f6156d77e0396413735e126f5b839df6", "message": "Fix review comments.", "committedDate": "2020-01-27T10:08:04Z", "type": "commit"}, {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f", "url": "https://github.com/wso2/product-microgateway/commit/49a919a7d998b9a3860ef14bfb312f9d6a724f1f", "message": "Merge remote-tracking branch 'upstream/master' into my-jwt-r3\n\n# Conflicts:\n#\tdistribution/resources/conf/micro-gw-default.conf\n#\tdistribution/resources/conf/micro-gw.conf", "committedDate": "2020-01-28T05:16:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NTg5Mw==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r374495893", "bodyText": "can we use isEmpty() here?", "author": "ruks", "createdAt": "2020-02-04T06:38:26Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -271,11 +274,10 @@ public void setApiResponseInterceptor(String responseInterceptor) {\n         }\n     }\n \n-    public void setBasicAuth(BasicAuth basicAuth) {\n-        //update the ResourceBasicAuth property only if there is no security scheme provided during instantiation\n-        if (this.basicAuth == null) {\n-            this.basicAuth = basicAuth;\n-            authProviders = OpenAPICodegenUtils.setAuthProviders(basicAuth);\n+    public void setSecuritySchemas(String schemas) {\n+        //update the Resource auth providers property only if there is no security scheme provided during instantiation\n+        if (this.authProviders.size() < 1) {", "originalCommit": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzA2NA==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r376357064", "bodyText": "Fixed in #973", "author": "AmaliMatharaarachchi", "createdAt": "2020-02-07T12:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NTg5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjE0OA==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r374496148", "bodyText": "please use isEmpty()", "author": "ruks", "createdAt": "2020-02-04T06:39:24Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -953,15 +949,24 @@ private static boolean isResourceEpUnavailable(Operation operation) {\n         return false;\n     }\n \n-    public static List<String> setAuthProviders(BasicAuth basicAuth) {\n+    public static List<String> getAuthProviders(String schemas) {\n         List<String> authProviders = new ArrayList<>();\n-        if (basicAuth != null && basicAuth.isOptional()) {\n-            authProviders.add(APISecurity.basic.name());\n-            authProviders.add(APISecurity.oauth2.name());\n-            authProviders.add(APISecurity.jwt.name());\n-        } else if (basicAuth != null && basicAuth.isRequired()) {\n-            authProviders.add(APISecurity.basic.name());\n-        } else {\n+        boolean basic = false;\n+        boolean oauth2 = false;\n+        if (schemas != null) {\n+            String[] schemasArray = schemas.trim().split(\"\\\\s*,\\\\s*\");\n+            for (String s : schemasArray) {\n+                if (s.equalsIgnoreCase(APISecurity.basic.name())) {\n+                    authProviders.add(APISecurity.basic.name());\n+                } else if (s.equalsIgnoreCase(APISecurity.apikey.name())) {\n+                    authProviders.add(APISecurity.apikey.name());\n+                } else if (s.equalsIgnoreCase(APISecurity.oauth2.name())) {\n+                    authProviders.add(APISecurity.oauth2.name());\n+                    authProviders.add(APISecurity.jwt.name());\n+                }\n+            }\n+        }\n+        if (authProviders.size() < 1) {", "originalCommit": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzEzNw==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r376357137", "bodyText": "Fixed in #973", "author": "AmaliMatharaarachchi", "createdAt": "2020-02-07T12:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjE0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NzA3MQ==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r374497071", "bodyText": "better to explain what is 'in' here in comments or use a descriptive name.", "author": "ruks", "createdAt": "2020-02-04T06:43:04Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java", "diffHunk": "@@ -17,28 +17,29 @@\n  */\n package org.wso2.apimgt.gateway.cli.model.config;\n \n+import io.swagger.v3.oas.models.security.SecurityScheme.In;\n+\n /**\n- * Definition of basic authentication passed in to mustache\n+ * Definition of APIKey passed in to mustache\n  * templates.\n  */\n-public class BasicAuth {\n-\n-    private boolean isOptional;\n-    private boolean isRequired;\n+public class APIKey {\n+    private In in;", "originalCommit": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NTkxNg==", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r375755916", "bodyText": "It is the standard type \"In\" in swagger. io.swagger.v3.oas.models.security.SecurityScheme.In https://swagger.io/docs/specification/authentication/api-keys/", "author": "AmaliMatharaarachchi", "createdAt": "2020-02-06T10:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NzA3MQ=="}], "type": "inlineReview", "revised_code": null}]}