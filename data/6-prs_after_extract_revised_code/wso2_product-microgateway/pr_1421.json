{"pr_number": 1421, "pr_title": "Add caching capability for JWT Token validation.", "pr_createdAt": "2020-09-25T13:00:44Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1421", "timeline": [{"oid": "fab5b7abf2825f241f70911f703087425b529a44", "url": "https://github.com/wso2/product-microgateway/commit/fab5b7abf2825f241f70911f703087425b529a44", "message": "Add token caching", "committedDate": "2020-09-25T12:51:13Z", "type": "commit"}, {"oid": "542c3c214b761e8cc2c3c4d0f2fc75ebc00db865", "url": "https://github.com/wso2/product-microgateway/commit/542c3c214b761e8cc2c3c4d0f2fc75ebc00db865", "message": "Correct formatting issues", "committedDate": "2020-09-25T12:54:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NDE2MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1421#discussion_r495074161", "bodyText": "Lets read this from environment variable, so we can run perf without code changes for cache enable and disable cases", "author": "Rajith90", "createdAt": "2020-09-25T15:42:51Z", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -33,14 +33,43 @@\n import java.util.Base64;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n import com.nimbusds.jose.JOSEException;\n import com.nimbusds.jose.JWSHeader;\n import com.nimbusds.jwt.JWTClaimsSet;\n import com.nimbusds.jwt.JWTParser;\n import com.nimbusds.jwt.SignedJWT;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n \n public class JWTValidator{\n     private static RSAPublicKey publicKey = readPublicKey();\n+    private static JWSVerifier jwsVerifier = new RSASSAVerifier(publicKey);\n+    private static boolean enableCache = true;", "originalCommit": "542c3c214b761e8cc2c3c4d0f2fc75ebc00db865", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5088d76a9b98edc9402375345efb70c881c43556", "chunk": "diff --git a/java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java b/java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java\nindex 1b3adccf9..6474c2af6 100644\n--- a/java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java\n+++ b/java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java\n\n@@ -47,7 +47,7 @@ import com.google.common.cache.LoadingCache;\n public class JWTValidator{\n     private static RSAPublicKey publicKey = readPublicKey();\n     private static JWSVerifier jwsVerifier = new RSASSAVerifier(publicKey);\n-    private static boolean enableCache = true;\n+    private static String enableCache = (String) System.getenv(\"ENVOY_GW_CACHE_ENABLE\");\n     private static LoadingCache<String, String> GatewayApiKeyCache =\n             CacheBuilder.newBuilder()\n                     .maximumSize(100)                                     // maximum 100 tokens can be cached\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NDcxNA==", "url": "https://github.com/wso2/product-microgateway/pull/1421#discussion_r495074714", "bodyText": "Lets remove the logs(sout), in order to run the perf tests. Check other places as well", "author": "Rajith90", "createdAt": "2020-09-25T15:43:51Z", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -81,11 +110,38 @@ public static boolean validateSignature(String jwtToken, String signature){\n         JWTClaimsSet payload = null;\n         SignedJWT parsedJWTToken;\n         boolean isVerified = false;\n-        try{\n-            parsedJWTToken = (SignedJWT) JWTParser.parse(jwtToken);\n-            isVerified = verifyTokenSignature(parsedJWTToken);\n-        }catch (ParseException e) {\n-            System.out.println(\"Invalid JWT token. Failed to decode the token.\");\n+        try {\n+            if (enableCache) {\n+                if(GatewayApiKeyCache.get(signature) != JWTConstants.UNAVAILABLE){\n+                    System.out.println(\"Api Key retrieved from the Api Key cache.\");", "originalCommit": "542c3c214b761e8cc2c3c4d0f2fc75ebc00db865", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5088d76a9b98edc9402375345efb70c881c43556", "chunk": "diff --git a/java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java b/java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java\nindex 1b3adccf9..6474c2af6 100644\n--- a/java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java\n+++ b/java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java\n\n@@ -90,36 +90,35 @@ public class JWTValidator{\n         String[] tokenContent = accessToken.split(\"\\\\.\");\n \n         if(tokenContent.length != 3){\n-            System.out.println(\"Invalid JWT token received, token must have 3 parts\");\n+            //System.out.println(\"Invalid JWT token received, token must have 3 parts\");\n         }\n         String signedContent = tokenContent[0] + \".\" + tokenContent[1];\n         //System.out.println(signedContent);\n         boolean isVerified = validateSignature(accessToken, tokenContent[2]);\n         if(isVerified){\n-            System.out.println(\"JWT Token is valid\");\n+            //System.out.println(\"JWT Token is valid\");\n         } else {\n-            System.out.println(\"JWT Token is not valid\");\n+            //System.out.println(\"JWT Token is not valid\");\n         }\n         return isVerified;\n     }\n \n     // validate the signature\n     public static boolean validateSignature(String jwtToken, String signature){\n-        System.out.println(\"Inside validateSignature\");\n         JWSHeader header;\n         JWTClaimsSet payload = null;\n         SignedJWT parsedJWTToken;\n         boolean isVerified = false;\n         try {\n-            if (enableCache) {\n+            if (enableCache.equals(\"true\")) {\n                 if(GatewayApiKeyCache.get(signature) != JWTConstants.UNAVAILABLE){\n-                    System.out.println(\"Api Key retrieved from the Api Key cache.\");\n+                    //System.out.println(\"Api Key retrieved from the Api Key cache.\");\n                     isVerified = true;\n                 } else if (InvalidGatewayApiKeyCache.get(signature) != JWTConstants.UNAVAILABLE){\n-                    System.out.println(\"Api Key retrieved from the invalid Api Key cache.\");\n+                    //System.out.println(\"Api Key retrieved from the invalid Api Key cache.\");\n                     isVerified = false;\n                 } else {\n-                    System.out.println(\"Token is not available in the cache.\");\n+                    //System.out.println(\"Token is not available in the cache.\");\n                     try{\n                         parsedJWTToken = (SignedJWT) JWTParser.parse(jwtToken);\n                         isVerified = verifyTokenSignature(parsedJWTToken);\n"}}, {"oid": "5088d76a9b98edc9402375345efb70c881c43556", "url": "https://github.com/wso2/product-microgateway/commit/5088d76a9b98edc9402375345efb70c881c43556", "message": "Add changes to read a variable from environment variable", "committedDate": "2020-09-28T05:57:52Z", "type": "commit"}]}