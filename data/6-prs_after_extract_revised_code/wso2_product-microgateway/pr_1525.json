{"pr_number": 1525, "pr_title": "Production Sandbox Endpoints and Upstream TLS configurations", "pr_createdAt": "2020-12-18T10:54:23Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1525", "timeline": [{"oid": "56245c6ca2f8caf9a6fbf1af72c6b1813de6df1d", "url": "https://github.com/wso2/product-microgateway/commit/56245c6ca2f8caf9a6fbf1af72c6b1813de6df1d", "message": "basic adapter implementation done", "committedDate": "2020-11-25T20:10:20Z", "type": "commit"}, {"oid": "a1de6549f72e44414bc688f34f65288d18787246", "url": "https://github.com/wso2/product-microgateway/commit/a1de6549f72e44414bc688f34f65288d18787246", "message": "Init analytics filter and update ext_authz filter to v3", "committedDate": "2020-11-30T16:53:57Z", "type": "commit"}, {"oid": "0842dbaf65bafa8ae2ab99458d79bcd451fda87a", "url": "https://github.com/wso2/product-microgateway/commit/0842dbaf65bafa8ae2ab99458d79bcd451fda87a", "message": "Implement adapter implementation", "committedDate": "2020-11-30T18:34:04Z", "type": "commit"}, {"oid": "6f364aa3e661b88e12fcf9b98ebdafa8f1fbd12e", "url": "https://github.com/wso2/product-microgateway/commit/6f364aa3e661b88e12fcf9b98ebdafa8f1fbd12e", "message": "temp-commit: Completed functionality but not working due to ext-authz injected headers are not utiliized at the router", "committedDate": "2020-12-01T14:41:45Z", "type": "commit"}, {"oid": "deb25459fcfb22b6b9bed10d079c4714f7bb9016", "url": "https://github.com/wso2/product-microgateway/commit/deb25459fcfb22b6b9bed10d079c4714f7bb9016", "message": "Add analytics filter to envoy config", "committedDate": "2020-12-02T06:21:34Z", "type": "commit"}, {"oid": "e526270c446b90297895b84133501da86f3cfbbc", "url": "https://github.com/wso2/product-microgateway/commit/e526270c446b90297895b84133501da86f3cfbbc", "message": "Fix comments", "committedDate": "2020-12-02T07:50:21Z", "type": "commit"}, {"oid": "9a7dc9918abf308635a409425013cba1981c3fe4", "url": "https://github.com/wso2/product-microgateway/commit/9a7dc9918abf308635a409425013cba1981c3fe4", "message": "disable route cache to make the injected cluster-header http header from ext-authz filter", "committedDate": "2020-12-02T08:17:16Z", "type": "commit"}, {"oid": "b7ab55c86d24d9c80de881ff9280ae464488fc9c", "url": "https://github.com/wso2/product-microgateway/commit/b7ab55c86d24d9c80de881ff9280ae464488fc9c", "message": "add clear route cache to the listener configuration for production-sandbox endpoint scenario", "committedDate": "2020-12-04T19:23:49Z", "type": "commit"}, {"oid": "125bdb922f22958a6555c313f4488732748ebc7f", "url": "https://github.com/wso2/product-microgateway/commit/125bdb922f22958a6555c313f4488732748ebc7f", "message": "bug fix: all the request context's headers are added to the response from enforcer", "committedDate": "2020-12-04T19:28:40Z", "type": "commit"}, {"oid": "0de937ba26bbdee4e8374bc12a850b40f62573e8", "url": "https://github.com/wso2/product-microgateway/commit/0de937ba26bbdee4e8374bc12a850b40f62573e8", "message": "fix existing test cases", "committedDate": "2020-12-06T13:25:26Z", "type": "commit"}, {"oid": "54f1609b9d7dc49636794f31fe7bcf569d3e4833", "url": "https://github.com/wso2/product-microgateway/commit/54f1609b9d7dc49636794f31fe7bcf569d3e4833", "message": "Add unit tests for route creation", "committedDate": "2020-12-06T19:41:25Z", "type": "commit"}, {"oid": "148925e15594bd1fd8d9708660b1fc66ead53ee7", "url": "https://github.com/wso2/product-microgateway/commit/148925e15594bd1fd8d9708660b1fc66ead53ee7", "message": "Merge branch 'amali-pr-2' into envoy-sand-2-route-cache-disable-2", "committedDate": "2020-12-07T03:17:04Z", "type": "commit"}, {"oid": "ff61d662a80a7ae554c6c11ec3c67865b90fa04f", "url": "https://github.com/wso2/product-microgateway/commit/ff61d662a80a7ae554c6c11ec3c67865b90fa04f", "message": "remove unused properties from route-cluster creation method", "committedDate": "2020-12-07T03:22:52Z", "type": "commit"}, {"oid": "f86227a006e9d8827fb2dad6144fcff28eadb4c0", "url": "https://github.com/wso2/product-microgateway/commit/f86227a006e9d8827fb2dad6144fcff28eadb4c0", "message": "Sandbox endpoint cluster unit tests", "committedDate": "2020-12-07T04:05:47Z", "type": "commit"}, {"oid": "93e8166145f0478d92533a3f6b5d1a6dd6b10697", "url": "https://github.com/wso2/product-microgateway/commit/93e8166145f0478d92533a3f6b5d1a6dd6b10697", "message": "Add unit tests for extAuthz Context generation", "committedDate": "2020-12-07T04:55:03Z", "type": "commit"}, {"oid": "981575227c5235b146453baae8d24ea1c890d612", "url": "https://github.com/wso2/product-microgateway/commit/981575227c5235b146453baae8d24ea1c890d612", "message": "unit tests for production/sandbox endpoints in api level and resource level", "committedDate": "2020-12-07T05:46:11Z", "type": "commit"}, {"oid": "1156f967f3edf248753780baac766f79d8190662", "url": "https://github.com/wso2/product-microgateway/commit/1156f967f3edf248753780baac766f79d8190662", "message": "bug fix: RoutesConfiguration is not accepted", "committedDate": "2020-12-07T08:29:04Z", "type": "commit"}, {"oid": "b002c599befc2ade66113e815052024f4f38daea", "url": "https://github.com/wso2/product-microgateway/commit/b002c599befc2ade66113e815052024f4f38daea", "message": "temp commit: Configuration change", "committedDate": "2020-12-08T17:22:37Z", "type": "commit"}, {"oid": "670a126f5586d774079ad3ded90d0288145f6a08", "url": "https://github.com/wso2/product-microgateway/commit/670a126f5586d774079ad3ded90d0288145f6a08", "message": "read endpoint certs from a file", "committedDate": "2020-12-08T18:12:13Z", "type": "commit"}, {"oid": "0934647af5824211c20576e238b207d1181ae171", "url": "https://github.com/wso2/product-microgateway/commit/0934647af5824211c20576e238b207d1181ae171", "message": "change the certs,key location to router rather than adapter: fix existing test cases", "committedDate": "2020-12-10T03:20:19Z", "type": "commit"}, {"oid": "66ded9273f68b23c4282540025478a5bed821e25", "url": "https://github.com/wso2/product-microgateway/commit/66ded9273f68b23c4282540025478a5bed821e25", "message": "add unit tests for upstream tls context", "committedDate": "2020-12-10T09:02:46Z", "type": "commit"}, {"oid": "5143abf50e5bddaeb25048b19dd0a916baf9ba6e", "url": "https://github.com/wso2/product-microgateway/commit/5143abf50e5bddaeb25048b19dd0a916baf9ba6e", "message": "Merge branch 'chashika-pr' into backendTLS-2", "committedDate": "2020-12-14T05:09:48Z", "type": "commit"}, {"oid": "1a3bfa3109383ed47376b16c1d7e567eb9a1b219", "url": "https://github.com/wso2/product-microgateway/commit/1a3bfa3109383ed47376b16c1d7e567eb9a1b219", "message": "bug fix: router listener cert is not set", "committedDate": "2020-12-14T09:15:29Z", "type": "commit"}, {"oid": "18a712df8136712d52424691756d6217a89dacca", "url": "https://github.com/wso2/product-microgateway/commit/18a712df8136712d52424691756d6217a89dacca", "message": "bug fix: move the certs from keystore to truststore", "committedDate": "2020-12-14T17:44:20Z", "type": "commit"}, {"oid": "d9cb92383c42db4503923a846008b1a1a83e5912", "url": "https://github.com/wso2/product-microgateway/commit/d9cb92383c42db4503923a846008b1a1a83e5912", "message": "implement integration tests for backend tls scenario", "committedDate": "2020-12-16T12:09:57Z", "type": "commit"}, {"oid": "95b8441bf2e5608fb976fcca0b1d071c871661e2", "url": "https://github.com/wso2/product-microgateway/commit/95b8441bf2e5608fb976fcca0b1d071c871661e2", "message": "make microgateway compatible with apictl m2 related changes", "committedDate": "2020-12-17T03:40:06Z", "type": "commit"}, {"oid": "7d59e966ebc5bd7064efa42287e23c8ff92dee38", "url": "https://github.com/wso2/product-microgateway/commit/7d59e966ebc5bd7064efa42287e23c8ff92dee38", "message": "Revert \"Add analytics filter to envoy config\"", "committedDate": "2020-12-17T05:02:25Z", "type": "commit"}, {"oid": "5179c13ee58726acc4b0f5a80a2973be14012d17", "url": "https://github.com/wso2/product-microgateway/commit/5179c13ee58726acc4b0f5a80a2973be14012d17", "message": "update the adapter rest api basepath and path", "committedDate": "2020-12-17T08:54:58Z", "type": "commit"}, {"oid": "f11a8d3fb3ce42137cb4debdc8fef00f0a209733", "url": "https://github.com/wso2/product-microgateway/commit/f11a8d3fb3ce42137cb4debdc8fef00f0a209733", "message": "temp fix: keytype is not populated when self contained token is used", "committedDate": "2020-12-17T19:56:53Z", "type": "commit"}, {"oid": "82b2fd1f8e6192b1210979295a46a58a36110a57", "url": "https://github.com/wso2/product-microgateway/commit/82b2fd1f8e6192b1210979295a46a58a36110a57", "message": "temp fix: external auth failure response's http status code is incorrect", "committedDate": "2020-12-17T19:57:32Z", "type": "commit"}, {"oid": "a70ff87d8700648ca4894846dc3477c7d5d5b442", "url": "https://github.com/wso2/product-microgateway/commit/a70ff87d8700648ca4894846dc3477c7d5d5b442", "message": "integration tests for production-sandbox endpoints", "committedDate": "2020-12-17T19:59:38Z", "type": "commit"}, {"oid": "1d2d9716fb7de60a0aafa6bf7c92e6cb295cfaa9", "url": "https://github.com/wso2/product-microgateway/commit/1d2d9716fb7de60a0aafa6bf7c92e6cb295cfaa9", "message": "bug fix: when production endpoints does not available and sandbox endpoint has a basepath, request fails", "committedDate": "2020-12-18T04:12:46Z", "type": "commit"}, {"oid": "19cc886c5c2c3bffcbd5be31cbe1481cb768b771", "url": "https://github.com/wso2/product-microgateway/commit/19cc886c5c2c3bffcbd5be31cbe1481cb768b771", "message": "remove unnecessary todo statements", "committedDate": "2020-12-18T05:59:20Z", "type": "commit"}, {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe", "url": "https://github.com/wso2/product-microgateway/commit/71ab8d74e1eafe168bcc80899b931405ad98eabe", "message": "Merge branch 'envoy-gw' into backendTLS-2", "committedDate": "2020-12-18T10:46:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5NjAzNA==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545796034", "bodyText": "Constants", "author": "VirajSalaka", "createdAt": "2020-12-18T12:19:54Z", "path": "enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java", "diffHunk": "@@ -46,15 +49,65 @@ public boolean handleRequest(RequestContext requestContext) {\n                 if (authenticator.canAuthenticate(requestContext)) {\n                     AuthenticationContext authenticate = authenticator.authenticate(requestContext);\n                     if (authenticate.isAuthenticated()) {\n+                        updateClusterHeaderAndCheckEnv(requestContext, authenticate);\n                         return true;\n                     }\n                 }\n             }\n         } catch (APISecurityException e) {\n-            requestContext.getProperties().put(\"code\", e.getErrorCode());\n+            //TODO: (VirajSalaka) provide the error code properly based on exception (401, 403, 429 etc)\n+            requestContext.getProperties().put(\"code\", \"401\");\n             requestContext.getProperties().put(\"error_code\", e.getErrorCode());\n             requestContext.getProperties().put(\"error_description\", e.getMessage());\n         }\n         return false;\n     }\n+\n+    /**\n+     * Update the cluster header based on the keyType and authenticate the token against its respective endpoint\n+     * environment.\n+     * \n+     * @param requestContext request Context \n+     * @param authContext authentication context\n+     * @throws APISecurityException if the environment and \n+     */\n+    private void updateClusterHeaderAndCheckEnv(RequestContext requestContext, AuthenticationContext authContext)\n+            throws APISecurityException {\n+\n+        String keyType = authContext.getKeyType();\n+        if (StringUtils.isEmpty(authContext.getKeyType())) {\n+            keyType = \"PRODUCTION\";", "originalCommit": "71ab8d74e1eafe168bcc80899b931405ad98eabe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxNjc2Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r552416766", "bodyText": "fixed via a4c0595", "author": "VirajSalaka", "createdAt": "2021-01-06T07:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5NjAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "a4c0595ae454ec89caaf825f56270c2bae29e4c8", "chunk": "diff --git a/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java b/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\nindex 651f092ca..7a7fe5983 100644\n--- a/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\n+++ b/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\n\n@@ -76,37 +77,44 @@ public class AuthFilter implements Filter {\n \n         String keyType = authContext.getKeyType();\n         if (StringUtils.isEmpty(authContext.getKeyType())) {\n-            keyType = \"PRODUCTION\";\n+            keyType = APIConstants.API_KEY_TYPE_PRODUCTION;\n         } \n \n         // Header needs to be set only if the relevant cluster is available for the resource and the key type is\n         // matched.\n         if (requestContext.isClusterHeaderEnabled()) {\n-            if (keyType.equalsIgnoreCase(\"PRODUCTION\") &&\n+            if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION) &&\n                     !StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n                 requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n                         requestContext.getProdClusterHeader());\n-            } else if (keyType.equalsIgnoreCase(\"SANDBOX\") &&\n+            } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX) &&\n                     !StringUtils.isEmpty(requestContext.getSandClusterHeader())) {\n                 requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n                         requestContext.getSandClusterHeader());\n             } else {\n+                if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION)) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n+                        \"Production key offered to the API with no production endpoint\");\n+                } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX)) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n+                        \"Sandbox key offered to the API with no sandbox endpoint\");\n+                }\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access production/sandbox environment.\");\n+                        \"Invalid key type.\");\n             }\n         } else {\n             // Even if the header flag is false, it is required to check if the relevant resource has a defined cluster\n             // based on environment. \n             // If not it should provide authentication error.\n             // Always at least one of the cluster header values should be set.\n-            if (keyType.equalsIgnoreCase(\"PRODUCTION\")\n+            if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION)\n                     && StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access sandbox environment.\");\n-            } else if (keyType.equalsIgnoreCase(\"SANDBOX\")\n+                        \"Production key offered to the API with no production endpoint\");\n+            } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX)\n                     && StringUtils.isEmpty(requestContext.getSandClusterHeader())) {\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access production environment.\");\n+                        \"Sandbox key offered to the API with no sandbox endpoint\");\n             }   \n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5Njk1OA==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545796958", "bodyText": "Remove the redundant isEmpty check", "author": "VirajSalaka", "createdAt": "2020-12-18T12:21:58Z", "path": "enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java", "diffHunk": "@@ -46,15 +49,65 @@ public boolean handleRequest(RequestContext requestContext) {\n                 if (authenticator.canAuthenticate(requestContext)) {\n                     AuthenticationContext authenticate = authenticator.authenticate(requestContext);\n                     if (authenticate.isAuthenticated()) {\n+                        updateClusterHeaderAndCheckEnv(requestContext, authenticate);\n                         return true;\n                     }\n                 }\n             }\n         } catch (APISecurityException e) {\n-            requestContext.getProperties().put(\"code\", e.getErrorCode());\n+            //TODO: (VirajSalaka) provide the error code properly based on exception (401, 403, 429 etc)\n+            requestContext.getProperties().put(\"code\", \"401\");\n             requestContext.getProperties().put(\"error_code\", e.getErrorCode());\n             requestContext.getProperties().put(\"error_description\", e.getMessage());\n         }\n         return false;\n     }\n+\n+    /**\n+     * Update the cluster header based on the keyType and authenticate the token against its respective endpoint\n+     * environment.\n+     * \n+     * @param requestContext request Context \n+     * @param authContext authentication context\n+     * @throws APISecurityException if the environment and \n+     */\n+    private void updateClusterHeaderAndCheckEnv(RequestContext requestContext, AuthenticationContext authContext)\n+            throws APISecurityException {\n+\n+        String keyType = authContext.getKeyType();\n+        if (StringUtils.isEmpty(authContext.getKeyType())) {\n+            keyType = \"PRODUCTION\";\n+        } \n+\n+        // Header needs to be set only if the relevant cluster is available for the resource and the key type is\n+        // matched.\n+        if (requestContext.isClusterHeaderEnabled()) {\n+            if (keyType.equalsIgnoreCase(\"PRODUCTION\") &&\n+                    !StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n+                requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n+                        requestContext.getProdClusterHeader());\n+            } else if (keyType.equalsIgnoreCase(\"SANDBOX\") &&\n+                    !StringUtils.isEmpty(requestContext.getSandClusterHeader())) {", "originalCommit": "71ab8d74e1eafe168bcc80899b931405ad98eabe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxNzAzMg==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r552417032", "bodyText": "fixed via 452e70d", "author": "VirajSalaka", "createdAt": "2021-01-06T07:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5Njk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "a4c0595ae454ec89caaf825f56270c2bae29e4c8", "chunk": "diff --git a/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java b/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\nindex 651f092ca..7a7fe5983 100644\n--- a/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\n+++ b/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\n\n@@ -76,37 +77,44 @@ public class AuthFilter implements Filter {\n \n         String keyType = authContext.getKeyType();\n         if (StringUtils.isEmpty(authContext.getKeyType())) {\n-            keyType = \"PRODUCTION\";\n+            keyType = APIConstants.API_KEY_TYPE_PRODUCTION;\n         } \n \n         // Header needs to be set only if the relevant cluster is available for the resource and the key type is\n         // matched.\n         if (requestContext.isClusterHeaderEnabled()) {\n-            if (keyType.equalsIgnoreCase(\"PRODUCTION\") &&\n+            if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION) &&\n                     !StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n                 requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n                         requestContext.getProdClusterHeader());\n-            } else if (keyType.equalsIgnoreCase(\"SANDBOX\") &&\n+            } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX) &&\n                     !StringUtils.isEmpty(requestContext.getSandClusterHeader())) {\n                 requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n                         requestContext.getSandClusterHeader());\n             } else {\n+                if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION)) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n+                        \"Production key offered to the API with no production endpoint\");\n+                } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX)) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n+                        \"Sandbox key offered to the API with no sandbox endpoint\");\n+                }\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access production/sandbox environment.\");\n+                        \"Invalid key type.\");\n             }\n         } else {\n             // Even if the header flag is false, it is required to check if the relevant resource has a defined cluster\n             // based on environment. \n             // If not it should provide authentication error.\n             // Always at least one of the cluster header values should be set.\n-            if (keyType.equalsIgnoreCase(\"PRODUCTION\")\n+            if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION)\n                     && StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access sandbox environment.\");\n-            } else if (keyType.equalsIgnoreCase(\"SANDBOX\")\n+                        \"Production key offered to the API with no production endpoint\");\n+            } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX)\n                     && StringUtils.isEmpty(requestContext.getSandClusterHeader())) {\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access production environment.\");\n+                        \"Sandbox key offered to the API with no sandbox endpoint\");\n             }   \n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5Nzc0Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545797747", "bodyText": "Error message should be as same as the one presents in API Manager", "author": "VirajSalaka", "createdAt": "2020-12-18T12:23:48Z", "path": "enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java", "diffHunk": "@@ -46,15 +49,65 @@ public boolean handleRequest(RequestContext requestContext) {\n                 if (authenticator.canAuthenticate(requestContext)) {\n                     AuthenticationContext authenticate = authenticator.authenticate(requestContext);\n                     if (authenticate.isAuthenticated()) {\n+                        updateClusterHeaderAndCheckEnv(requestContext, authenticate);\n                         return true;\n                     }\n                 }\n             }\n         } catch (APISecurityException e) {\n-            requestContext.getProperties().put(\"code\", e.getErrorCode());\n+            //TODO: (VirajSalaka) provide the error code properly based on exception (401, 403, 429 etc)\n+            requestContext.getProperties().put(\"code\", \"401\");\n             requestContext.getProperties().put(\"error_code\", e.getErrorCode());\n             requestContext.getProperties().put(\"error_description\", e.getMessage());\n         }\n         return false;\n     }\n+\n+    /**\n+     * Update the cluster header based on the keyType and authenticate the token against its respective endpoint\n+     * environment.\n+     * \n+     * @param requestContext request Context \n+     * @param authContext authentication context\n+     * @throws APISecurityException if the environment and \n+     */\n+    private void updateClusterHeaderAndCheckEnv(RequestContext requestContext, AuthenticationContext authContext)\n+            throws APISecurityException {\n+\n+        String keyType = authContext.getKeyType();\n+        if (StringUtils.isEmpty(authContext.getKeyType())) {\n+            keyType = \"PRODUCTION\";\n+        } \n+\n+        // Header needs to be set only if the relevant cluster is available for the resource and the key type is\n+        // matched.\n+        if (requestContext.isClusterHeaderEnabled()) {\n+            if (keyType.equalsIgnoreCase(\"PRODUCTION\") &&\n+                    !StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n+                requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n+                        requestContext.getProdClusterHeader());\n+            } else if (keyType.equalsIgnoreCase(\"SANDBOX\") &&\n+                    !StringUtils.isEmpty(requestContext.getSandClusterHeader())) {\n+                requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n+                        requestContext.getSandClusterHeader());\n+            } else {\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n+                        \"Invalid Token to access production/sandbox environment.\");\n+            }\n+        } else {\n+            // Even if the header flag is false, it is required to check if the relevant resource has a defined cluster\n+            // based on environment. \n+            // If not it should provide authentication error.\n+            // Always at least one of the cluster header values should be set.\n+            if (keyType.equalsIgnoreCase(\"PRODUCTION\")\n+                    && StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,", "originalCommit": "71ab8d74e1eafe168bcc80899b931405ad98eabe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxNjU5MA==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r552416590", "bodyText": "fixed via a4c0595", "author": "VirajSalaka", "createdAt": "2021-01-06T07:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5Nzc0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a4c0595ae454ec89caaf825f56270c2bae29e4c8", "chunk": "diff --git a/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java b/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\nindex 651f092ca..7a7fe5983 100644\n--- a/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\n+++ b/enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java\n\n@@ -76,37 +77,44 @@ public class AuthFilter implements Filter {\n \n         String keyType = authContext.getKeyType();\n         if (StringUtils.isEmpty(authContext.getKeyType())) {\n-            keyType = \"PRODUCTION\";\n+            keyType = APIConstants.API_KEY_TYPE_PRODUCTION;\n         } \n \n         // Header needs to be set only if the relevant cluster is available for the resource and the key type is\n         // matched.\n         if (requestContext.isClusterHeaderEnabled()) {\n-            if (keyType.equalsIgnoreCase(\"PRODUCTION\") &&\n+            if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION) &&\n                     !StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n                 requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n                         requestContext.getProdClusterHeader());\n-            } else if (keyType.equalsIgnoreCase(\"SANDBOX\") &&\n+            } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX) &&\n                     !StringUtils.isEmpty(requestContext.getSandClusterHeader())) {\n                 requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n                         requestContext.getSandClusterHeader());\n             } else {\n+                if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION)) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n+                        \"Production key offered to the API with no production endpoint\");\n+                } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX)) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n+                        \"Sandbox key offered to the API with no sandbox endpoint\");\n+                }\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access production/sandbox environment.\");\n+                        \"Invalid key type.\");\n             }\n         } else {\n             // Even if the header flag is false, it is required to check if the relevant resource has a defined cluster\n             // based on environment. \n             // If not it should provide authentication error.\n             // Always at least one of the cluster header values should be set.\n-            if (keyType.equalsIgnoreCase(\"PRODUCTION\")\n+            if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_PRODUCTION)\n                     && StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access sandbox environment.\");\n-            } else if (keyType.equalsIgnoreCase(\"SANDBOX\")\n+                        \"Production key offered to the API with no production endpoint\");\n+            } else if (keyType.equalsIgnoreCase(APIConstants.API_KEY_TYPE_SANDBOX)\n                     && StringUtils.isEmpty(requestContext.getSandClusterHeader())) {\n                 throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                        \"Invalid Token to access production environment.\");\n+                        \"Sandbox key offered to the API with no sandbox endpoint\");\n             }   \n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwMjA2NQ==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545802065", "bodyText": "check if an argument could be passed and start tls, mtls backends only for the required test cases.", "author": "VirajSalaka", "createdAt": "2020-12-18T12:32:51Z", "path": "test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -32,35 +43,68 @@\n     private static final Logger logger = Logger.getLogger(MockBackEndServer.class.getName());\n     private HttpServer httpServer;\n     private String backEndServerUrl;\n-    private static int backEndServerPort;\n+    private int backEndServerPort;\n     private static boolean retryDone = false;\n-\n-\n+    private boolean secured = false;\n+    private boolean mtlsEnabled = false;\n \n     public static void main(String[] args) {", "originalCommit": "71ab8d74e1eafe168bcc80899b931405ad98eabe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxNzU3NA==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r552417574", "bodyText": "fixed via fa0f667", "author": "VirajSalaka", "createdAt": "2021-01-06T07:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwMjA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE0MzY2Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r553143667", "bodyText": "change default backend to tls based server", "author": "VirajSalaka", "createdAt": "2021-01-07T07:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwMjA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa0f6674a8e4097018eeb0810dd73ae1a7ef5b90", "chunk": "diff --git a/test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java b/test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java\nindex 01f4654ed..76492219f 100644\n--- a/test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java\n+++ b/test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java\n\n@@ -50,25 +50,26 @@ public class MockBackEndServer extends Thread {\n \n     public static void main(String[] args) {\n         MockBackEndServer mockBackEndServer = new MockBackEndServer(Constants.MOCK_BACKEND_SERVER_PORT);\n-        MockBackEndServer securedMockBackEndServer = new MockBackEndServer(Constants.SECURED_MOCK_BACKEND_SERVER_PORT,\n-                true, false);\n-        MockBackEndServer mtlsMockBackEndServer = new MockBackEndServer(Constants.MTLS_MOCK_BACKEND_SERVER_PORT,\n-                true, true);\n-        MockSandboxServer mockSandboxServer = new MockSandboxServer(Constants.MOCK_SANDBOX_SERVER);\n+        MockSandboxServer mockSandboxServer = new MockSandboxServer(Constants.MOCK_SANDBOX_SERVER_PORT);\n         mockBackEndServer.start();\n-        securedMockBackEndServer.start();\n-        mtlsMockBackEndServer.start();\n         mockSandboxServer.start();\n+        if (args.length > 0 && args[0].equals(\"-tls-enabled\")) {\n+            MockBackEndServer securedMockBackEndServer = new MockBackEndServer(Constants.SECURED_MOCK_BACKEND_SERVER_PORT,\n+                    true, false);\n+            MockBackEndServer mtlsMockBackEndServer = new MockBackEndServer(Constants.MTLS_MOCK_BACKEND_SERVER_PORT,\n+                    true, true);\n+            securedMockBackEndServer.start();\n+            mtlsMockBackEndServer.start();\n+        }\n     }\n \n     public MockBackEndServer(int port) {\n-\n-        backEndServerPort = port;\n+        this.backEndServerPort = port;\n     }\n \n     public MockBackEndServer(int port, boolean isSecured, boolean mtlsEnabled) {\n-        secured = isSecured;\n-        backEndServerPort = port;\n+        this.secured = isSecured;\n+        this.backEndServerPort = port;\n         this.mtlsEnabled = mtlsEnabled;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMTQyNg==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545821426", "bodyText": "SAN validation based on verifyHostName\nGateway Types (Prod-sand, prod only, sand only)\nUnsecure https communication.", "author": "VirajSalaka", "createdAt": "2020-12-18T13:11:20Z", "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/endpoints/ProductionSandboxTestCase.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.endpoints;\n+\n+import com.github.dockerjava.zerodep.shaded.org.apache.hc.core5.http.HttpStatus;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2am.micro.gw.tests.common.BaseTestCase;\n+import org.wso2am.micro.gw.tests.common.model.API;\n+import org.wso2am.micro.gw.tests.common.model.ApplicationDTO;\n+import org.wso2am.micro.gw.tests.util.ApiDeployment;\n+import org.wso2am.micro.gw.tests.util.ApiProjectGenerator;\n+import org.wso2am.micro.gw.tests.util.HttpResponse;\n+import org.wso2am.micro.gw.tests.util.HttpsClientRequest;\n+import org.wso2am.micro.gw.tests.util.TestConstant;\n+import org.wso2am.micro.gw.mockbackend.ResponseConstants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ProductionSandboxTestCase extends BaseTestCase {\n+    protected String jwtTokenProd;\n+    protected String jwtTokenSand;\n+\n+    @BeforeClass(description = \"initialise the setup\")\n+    void start() throws Exception {\n+        super.startMGW();\n+\n+        //deploy the api\n+        //api yaml file should put to the resources/apis/openApis folder\n+        String prodSandApiZipfile = ApiProjectGenerator.createApictlProjZip(\n+                \"prod-sand/prodSandOpenAPI.yaml\");\n+        String prodOnlyApiZipfile = ApiProjectGenerator.createApictlProjZip(\n+                \"prod-sand/prodOpenAPI.yaml\");\n+        String sandOnlyApiZipfile = ApiProjectGenerator.createApictlProjZip(\n+                \"prod-sand/sandOpenAPI.yaml\");\n+        ApiDeployment.deployAPI(prodSandApiZipfile);\n+        ApiDeployment.deployAPI(prodOnlyApiZipfile);\n+        ApiDeployment.deployAPI(sandOnlyApiZipfile);\n+\n+        //TODO: (VirajSalaka) change the token\n+        //generate JWT token from APIM\n+        API api = new API();\n+        api.setName(\"PetStoreAPI\");\n+        api.setContext(\"petstore/v1\");\n+        api.setProdEndpoint(getMockServiceURLHttp(\"/echo/prod\"));\n+        api.setVersion(\"1.0.0\");\n+        api.setProvider(\"admin\");\n+\n+        //Define application info\n+        ApplicationDTO application = new ApplicationDTO();\n+        application.setName(\"jwtApp\");\n+        application.setTier(\"Unlimited\");\n+        application.setId((int) (Math.random() * 1000));\n+\n+        jwtTokenProd = getJWT(api, application, \"Unlimited\", TestConstant.KEY_TYPE_PRODUCTION, 3600);\n+        jwtTokenSand = getJWT(api, application, \"Unlimited\", TestConstant.KEY_TYPE_SANDBOX, 3600);\n+    }\n+\n+    @Test(description = \"Invoke Production and Sandbox endpoint when both endpoints provided\")\n+    public void invokeProdSandEndpoints() throws Exception {\n+        Map<String, String> prodHeaders = new HashMap<String, String>();\n+        prodHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenProd);\n+        HttpResponse prodResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/pet/findByStatus\") , prodHeaders);\n+\n+        Assert.assertNotNull(prodResponse);\n+        Assert.assertEquals(prodResponse.getResponseCode(), HttpStatus.SC_OK,\"Response code mismatched\");\n+        Assert.assertEquals(prodResponse.getData(), ResponseConstants.RESPONSE_BODY,\n+                \"Response message mismatch.\");\n+\n+        Map<String, String> sandHeaders = new HashMap<String, String>();\n+        sandHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenSand);\n+        HttpResponse sandResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/pet/findByStatus\"), sandHeaders);\n+\n+        Assert.assertNotNull(sandResponse);\n+        Assert.assertEquals(sandResponse.getResponseCode(), HttpStatus.SC_OK,\"Response code mismatched\");\n+        Assert.assertEquals(sandResponse.getData(), ResponseConstants.API_SANDBOX_RESPONSE,\n+                \"Response message mismatch.\");\n+    }\n+\n+    @Test(description = \"Invoke Sandbox endpoint when sandbox endpoints provided alone\")\n+    public void invokeSandboxEndpointOnly() throws Exception {\n+        Map<String, String> sandHeaders = new HashMap<String, String>();\n+        sandHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenSand);\n+        HttpResponse sandResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/sand/pet/findByStatus\") , sandHeaders);\n+\n+        Assert.assertNotNull(sandResponse, \"Sandbox endpoint response should not be null\");\n+        Assert.assertEquals(sandResponse.getResponseCode(), HttpStatus.SC_OK,\"Response code mismatched\");\n+        Assert.assertEquals(sandResponse.getData(), ResponseConstants.API_SANDBOX_RESPONSE,\n+                \"Response message mismatch.\");\n+\n+        Map<String, String> prodHeaders = new HashMap<String, String>();\n+        prodHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenProd);\n+        HttpResponse prodResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/sand/pet/findByStatus\") , prodHeaders);\n+\n+        Assert.assertNotNull(prodResponse, \"Production endoint response should not be null\");\n+        Assert.assertEquals(prodResponse.getResponseCode(), HttpStatus.SC_UNAUTHORIZED,\"Response code mismatched\");\n+    }\n+\n+    @Test(description = \"Invoke Production endpoint when production endpoints provided alone\")\n+    public void invokeProdEndpointOnly() throws Exception {\n+        Map<String, String> headers = new HashMap<String, String>();\n+        headers.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenProd);\n+        HttpResponse response = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/prod/pet/findByStatus\") , headers);\n+\n+        Assert.assertNotNull(response, \"Production endpoint response should not be null\");\n+        Assert.assertEquals(response.getResponseCode(), HttpStatus.SC_OK,\"Response code mismatched\");\n+        Assert.assertEquals(response.getData(), ResponseConstants.RESPONSE_BODY,\n+                \"Response message mismatch.\");\n+\n+        Map<String, String> sandHeaders = new HashMap<String, String>();\n+        sandHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenSand);\n+        HttpResponse sandResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/prod/pet/findByStatus\"), sandHeaders);\n+\n+        Assert.assertNotNull(sandResponse, \"Sandbox endoint response should not be null\");\n+        Assert.assertEquals(sandResponse.getResponseCode(), HttpStatus.SC_UNAUTHORIZED,\"Response code mismatched\");\n+    }\n+\n+}", "originalCommit": "71ab8d74e1eafe168bcc80899b931405ad98eabe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxNTkwMA==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r552415900", "bodyText": "VerifyHostName is added via 5ccd375", "author": "VirajSalaka", "createdAt": "2021-01-06T07:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMTQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY1NDU2MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r552654561", "bodyText": "Unsecure HTTPS Upstreams are added via c571daa", "author": "VirajSalaka", "createdAt": "2021-01-06T14:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMTQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNzUyOA==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r553117528", "bodyText": "Created a separate issue to keep track of Prod only/ sand only gateways : #1535", "author": "VirajSalaka", "createdAt": "2021-01-07T05:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMTQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE0NDc1MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r553144751", "bodyText": "change verifyhostname string to regex based one rather than exact match.", "author": "VirajSalaka", "createdAt": "2021-01-07T07:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMTQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3Mzc0OQ==", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r553573749", "bodyText": "https://www.envoyproxy.io/docs/envoy/v1.16.2/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-certificatevalidationcontext\nThe wildcard SAN is accepted when using exact keyword\nSAN : *.test.com\nHOST: abc.test.com (exact match) works\nTested and verified.", "author": "VirajSalaka", "createdAt": "2021-01-07T20:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMTQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "a4c0595ae454ec89caaf825f56270c2bae29e4c8", "chunk": "diff --git a/test/test-integration/src/test/java/org/wso2am/micro/gw/tests/endpoints/ProductionSandboxTestCase.java b/test/test-integration/src/test/java/org/wso2am/micro/gw/tests/endpoints/ProductionSandboxTestCase.java\nindex 9ec80b19b..f55ddf3cb 100644\n--- a/test/test-integration/src/test/java/org/wso2am/micro/gw/tests/endpoints/ProductionSandboxTestCase.java\n+++ b/test/test-integration/src/test/java/org/wso2am/micro/gw/tests/endpoints/ProductionSandboxTestCase.java\n\n@@ -117,6 +117,8 @@ public class ProductionSandboxTestCase extends BaseTestCase {\n \n         Assert.assertNotNull(prodResponse, \"Production endoint response should not be null\");\n         Assert.assertEquals(prodResponse.getResponseCode(), HttpStatus.SC_UNAUTHORIZED,\"Response code mismatched\");\n+        Assert.assertEquals(prodResponse.getData(), \"{\\\"errorDescription\\\":\\\"Production \" +\n+                \"key offered to the API with no production endpoint\\\",\\\"errorCode\\\":\\\"900901\\\"}\");\n     }\n \n     @Test(description = \"Invoke Production endpoint when production endpoints provided alone\")\n"}}, {"oid": "342713069cbd72aa063300e9e3220425dc4262a5", "url": "https://github.com/wso2/product-microgateway/commit/342713069cbd72aa063300e9e3220425dc4262a5", "message": "validate certificate file content via BEGIN Certificate and End Certificate strings", "committedDate": "2021-01-04T07:44:00Z", "type": "commit"}, {"oid": "f1442ebc609d8cae72391d928268f8ae1e9fd183", "url": "https://github.com/wso2/product-microgateway/commit/f1442ebc609d8cae72391d928268f8ae1e9fd183", "message": "Rest API Generation Guide", "committedDate": "2021-01-04T09:05:56Z", "type": "commit"}, {"oid": "5ccd375c928646a871c20c086e1f43f984028d6f", "url": "https://github.com/wso2/product-microgateway/commit/5ccd375c928646a871c20c086e1f43f984028d6f", "message": "Add verify hostname feature", "committedDate": "2021-01-05T04:55:09Z", "type": "commit"}, {"oid": "a4c0595ae454ec89caaf825f56270c2bae29e4c8", "url": "https://github.com/wso2/product-microgateway/commit/a4c0595ae454ec89caaf825f56270c2bae29e4c8", "message": "fix error message for production/sandbox endpoints being unavailable", "committedDate": "2021-01-06T05:02:28Z", "type": "commit"}, {"oid": "452e70df3c574001865304cc59dcf25ad30a79e9", "url": "https://github.com/wso2/product-microgateway/commit/452e70df3c574001865304cc59dcf25ad30a79e9", "message": "Reduce the minimum tls version to 1.1 and refactor code", "committedDate": "2021-01-06T05:18:22Z", "type": "commit"}, {"oid": "ea0fb028303ed596ba97d346872706aed1fb410e", "url": "https://github.com/wso2/product-microgateway/commit/ea0fb028303ed596ba97d346872706aed1fb410e", "message": "refactor file name router certificate and private key", "committedDate": "2021-01-06T05:27:13Z", "type": "commit"}, {"oid": "fa0f6674a8e4097018eeb0810dd73ae1a7ef5b90", "url": "https://github.com/wso2/product-microgateway/commit/fa0f6674a8e4097018eeb0810dd73ae1a7ef5b90", "message": "integration tests: tls, mtls enabled backends will started only for the tls test case", "committedDate": "2021-01-06T07:37:37Z", "type": "commit"}, {"oid": "c571daa34be2a80e114c4f9633517a3ac5b45d32", "url": "https://github.com/wso2/product-microgateway/commit/c571daa34be2a80e114c4f9633517a3ac5b45d32", "message": "disable ssl verification for upstream connections", "committedDate": "2021-01-06T14:13:23Z", "type": "commit"}, {"oid": "1ff77d619517df6df377c7fff06b2ba3bb0acf3b", "url": "https://github.com/wso2/product-microgateway/commit/1ff77d619517df6df377c7fff06b2ba3bb0acf3b", "message": "Merge branch 'envoy-gw' into backendTLS-2", "committedDate": "2021-01-08T02:47:36Z", "type": "commit"}, {"oid": "4bc5a35e2dc7d91079205d039e7db0298543a2c2", "url": "https://github.com/wso2/product-microgateway/commit/4bc5a35e2dc7d91079205d039e7db0298543a2c2", "message": "comment out a test case, due to intermittent failure", "committedDate": "2021-01-08T03:16:41Z", "type": "commit"}, {"oid": "cc4597e0ad6c65d0282963e44caa53d14905b49b", "url": "https://github.com/wso2/product-microgateway/commit/cc4597e0ad6c65d0282963e44caa53d14905b49b", "message": "add todo statement", "committedDate": "2021-01-08T03:19:06Z", "type": "commit"}]}