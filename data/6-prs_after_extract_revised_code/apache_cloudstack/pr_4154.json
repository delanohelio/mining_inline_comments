{"pr_number": 4154, "pr_title": "server: fix for wrong affinity group count", "pr_createdAt": "2020-06-18T08:28:34Z", "pr_url": "https://github.com/apache/cloudstack/pull/4154", "timeline": [{"oid": "f538db3949166bc11d9b7324e8028ca9e48bf489", "url": "https://github.com/apache/cloudstack/commit/f538db3949166bc11d9b7324e8028ca9e48bf489", "message": "server: fix for wrong affinity group count\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>", "committedDate": "2020-06-18T08:22:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODczNg==", "url": "https://github.com/apache/cloudstack/pull/4154#discussion_r442808736", "bodyText": "Could this return Ids that are already there in affinityGroups ?", "author": "davidjumani", "createdAt": "2020-06-19T12:23:19Z", "path": "server/src/main/java/com/cloud/api/query/QueryManagerImpl.java", "diffHunk": "@@ -3624,25 +3624,30 @@ private void fillVMOrTemplateDetailOptions(final Map<String, List<String>> optio\n             if (domainId != null) {\n                 SearchCriteria<AffinityGroupJoinVO> scDomain = buildAffinityGroupSearchCriteria(null, isRecursive, new ArrayList<Long>(), listProjectResourcesCriteria, affinityGroupId,\n                         affinityGroupName, affinityGroupType, keyword);\n-                affinityGroups.addAll(listDomainLevelAffinityGroups(scDomain, searchFilter, domainId));\n+                List<AffinityGroupJoinVO> groups = listDomainLevelAffinityGroups(scDomain, searchFilter, domainId);\n+                affinityGroups.addAll(groups);\n+                count += groups.size();\n             } else {\n \n                 for (Long permAcctId : permittedAccounts) {\n                     Account permittedAcct = _accountDao.findById(permAcctId);\n                     SearchCriteria<AffinityGroupJoinVO> scDomain = buildAffinityGroupSearchCriteria(null, isRecursive, new ArrayList<Long>(), listProjectResourcesCriteria, affinityGroupId,\n                             affinityGroupName, affinityGroupType, keyword);\n-\n-                    affinityGroups.addAll(listDomainLevelAffinityGroups(scDomain, searchFilter, permittedAcct.getDomainId()));\n+                    List<AffinityGroupJoinVO> groups = listDomainLevelAffinityGroups(scDomain, searchFilter, permittedAcct.getDomainId());", "originalCommit": "f538db3949166bc11d9b7324e8028ca9e48bf489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwMjM4MA==", "url": "https://github.com/apache/cloudstack/pull/4154#discussion_r443102380", "bodyText": "@shwstppr ?", "author": "rhtyd", "createdAt": "2020-06-20T05:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwMjUyOA==", "url": "https://github.com/apache/cloudstack/pull/4154#discussion_r443102528", "bodyText": "@davidjumani I think it might. Will check and fix if needed cc @rhtyd", "author": "shwstppr", "createdAt": "2020-06-20T05:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODczNg=="}], "type": "inlineReview", "revised_code": {"commit": "d06e769277842a6a41f5f2663fb09a05ec4de063", "chunk": "diff --git a/server/src/main/java/com/cloud/api/query/QueryManagerImpl.java b/server/src/main/java/com/cloud/api/query/QueryManagerImpl.java\nindex f8e4f77c1c..33ca1bb258 100644\n--- a/server/src/main/java/com/cloud/api/query/QueryManagerImpl.java\n+++ b/server/src/main/java/com/cloud/api/query/QueryManagerImpl.java\n\n@@ -3624,27 +3624,27 @@ public class QueryManagerImpl extends MutualExclusiveIdsManagerBase implements Q\n             if (domainId != null) {\n                 SearchCriteria<AffinityGroupJoinVO> scDomain = buildAffinityGroupSearchCriteria(null, isRecursive, new ArrayList<Long>(), listProjectResourcesCriteria, affinityGroupId,\n                         affinityGroupName, affinityGroupType, keyword);\n-                List<AffinityGroupJoinVO> groups = listDomainLevelAffinityGroups(scDomain, searchFilter, domainId);\n-                affinityGroups.addAll(groups);\n-                count += groups.size();\n+                Pair<List<AffinityGroupJoinVO>, Integer> groupsPair = listDomainLevelAffinityGroups(scDomain, searchFilter, domainId);\n+                affinityGroups.addAll(groupsPair.first());\n+                count += groupsPair.second();\n             } else {\n \n                 for (Long permAcctId : permittedAccounts) {\n                     Account permittedAcct = _accountDao.findById(permAcctId);\n                     SearchCriteria<AffinityGroupJoinVO> scDomain = buildAffinityGroupSearchCriteria(null, isRecursive, new ArrayList<Long>(), listProjectResourcesCriteria, affinityGroupId,\n                             affinityGroupName, affinityGroupType, keyword);\n-                    List<AffinityGroupJoinVO> groups = listDomainLevelAffinityGroups(scDomain, searchFilter, permittedAcct.getDomainId());\n-                    affinityGroups.addAll(groups);\n-                    count += groups.size();\n+                    Pair<List<AffinityGroupJoinVO>, Integer> groupsPair = listDomainLevelAffinityGroups(scDomain, searchFilter, permittedAcct.getDomainId());\n+                    affinityGroups.addAll(groupsPair.first());\n+                    count += groupsPair.second();\n                 }\n             }\n         } else if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {\n             // list all domain level affinity groups for the domain admin case\n             SearchCriteria<AffinityGroupJoinVO> scDomain = buildAffinityGroupSearchCriteria(null, isRecursive, new ArrayList<Long>(), listProjectResourcesCriteria, affinityGroupId, affinityGroupName,\n                     affinityGroupType, keyword);\n-            List<AffinityGroupJoinVO> groups = listDomainLevelAffinityGroups(scDomain, searchFilter, domainId);\n-            affinityGroups.addAll(groups);\n-            count += groups.size();\n+            Pair<List<AffinityGroupJoinVO>, Integer> groupsPair = listDomainLevelAffinityGroups(scDomain, searchFilter, domainId);\n+            affinityGroups.addAll(groupsPair.first());\n+            count += groupsPair.second();\n         }\n \n         return new Pair<List<AffinityGroupJoinVO>, Integer>(affinityGroups, count);\n"}}, {"oid": "d06e769277842a6a41f5f2663fb09a05ec4de063", "url": "https://github.com/apache/cloudstack/commit/d06e769277842a6a41f5f2663fb09a05ec4de063", "message": "fix for correct unique domain level AG count\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>", "committedDate": "2020-06-22T05:08:04Z", "type": "commit"}]}