{"pr_number": 4040, "pr_title": "[KVM] Enable PVLAN support on L2 networks", "pr_createdAt": "2020-04-21T11:23:59Z", "pr_url": "https://github.com/apache/cloudstack/pull/4040", "timeline": [{"oid": "e908b90affe5a5f1d5cbf4cbe96913362a48b5f0", "url": "https://github.com/apache/cloudstack/commit/e908b90affe5a5f1d5cbf4cbe96913362a48b5f0", "message": "Adding l2 pvlan support for vms on kvm and xen", "committedDate": "2020-04-21T12:21:34Z", "type": "forcePushed"}, {"oid": "bae74f8152f1f3bb5e0cc64596afdd9634f1a53d", "url": "https://github.com/apache/cloudstack/commit/bae74f8152f1f3bb5e0cc64596afdd9634f1a53d", "message": "Adding l2 pvlan support for vms on kvm and xen", "committedDate": "2020-04-21T14:31:30Z", "type": "forcePushed"}, {"oid": "9251cf5718e4726cfc1a75823380f077cce9083b", "url": "https://github.com/apache/cloudstack/commit/9251cf5718e4726cfc1a75823380f077cce9083b", "message": "Adding l2 pvlan support for vms on kvm and xen", "committedDate": "2020-04-23T08:48:41Z", "type": "forcePushed"}, {"oid": "c14dbf654dca43804f553604a773d9477c4509fb", "url": "https://github.com/apache/cloudstack/commit/c14dbf654dca43804f553604a773d9477c4509fb", "message": "Adding l2 pvlan for kvm", "committedDate": "2020-04-24T11:19:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyNTEyMg==", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r417125122", "bodyText": "no pokemon catch-um-all", "author": "DaanHoogland", "createdAt": "2020-04-29T07:44:18Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPvlanSetupCommandWrapper.java", "diffHunk": "@@ -66,41 +58,29 @@ public Answer execute(final PvlanSetupCommand command, final LibvirtComputingRes\n                 final String ovsPvlanDhcpHostPath = libvirtComputingResource.getOvsPvlanDhcpHostPath();\n                 final Script script = new Script(ovsPvlanDhcpHostPath, timeout, s_logger);\n \n-                if (add) {\n-                    final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n-                    final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(dhcpName);\n-\n-                    final List<InterfaceDef> ifaces = libvirtComputingResource.getInterfaces(conn, dhcpName);\n-                    final InterfaceDef guestNic = ifaces.get(0);\n-                    script.add(opr, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-i\", isolatedPvlan, \"-n\", dhcpName, \"-d\", dhcpIp, \"-m\", dhcpMac, \"-I\",\n-                            guestNic.getDevName());\n-                } else {\n-                    script.add(opr, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-i\", isolatedPvlan, \"-n\", dhcpName, \"-d\", dhcpIp, \"-m\", dhcpMac);\n-                }\n-\n+                script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", dhcpMac, \"-d\", dhcpIp);\n                 result = script.execute();\n \n                 if (result != null) {\n                     s_logger.warn(\"Failed to program pvlan for dhcp server with mac \" + dhcpMac);\n-                    return new Answer(command, false, result);\n                 } else {\n                     s_logger.info(\"Programmed pvlan for dhcp server with mac \" + dhcpMac);\n                 }\n-            } else if (command.getType() == PvlanSetupCommand.Type.VM) {\n-                final String ovsPvlanVmPath = libvirtComputingResource.getOvsPvlanVmPath();\n-\n-                final Script script = new Script(ovsPvlanVmPath, timeout, s_logger);\n-                script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-v\", vmMac);\n-                result = script.execute();\n+            }\n \n-                if (result != null) {\n-                    s_logger.warn(\"Failed to program pvlan for vm with mac \" + vmMac);\n-                    return new Answer(command, false, result);\n-                } else {\n-                    s_logger.info(\"Programmed pvlan for vm with mac \" + vmMac);\n-                }\n+            // We run this even for DHCP servers since they're all vms after all\n+            final String ovsPvlanVmPath = libvirtComputingResource.getOvsPvlanVmPath();\n+            final Script script = new Script(ovsPvlanVmPath, timeout, s_logger);\n+            script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", vmMac);\n+            result = script.execute();\n+\n+            if (result != null) {\n+                s_logger.warn(\"Failed to program pvlan for vm with mac \" + vmMac);\n+                return new Answer(command, false, result);\n+            } else {\n+                s_logger.info(\"Programmed pvlan for vm with mac \" + vmMac);\n             }\n-        } catch (final LibvirtException e) {\n+        } catch (final Exception e) {", "originalCommit": "e163c775a125951f4318c2c765dcbcc5ba2c307d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg3MzA0MA==", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r419873040", "bodyText": "fixed!", "author": "davidjumani", "createdAt": "2020-05-05T05:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyNTEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPvlanSetupCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPvlanSetupCommandWrapper.java\nindex 781aede742..23722a535e 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPvlanSetupCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPvlanSetupCommandWrapper.java\n\n@@ -50,40 +50,38 @@ public final class LibvirtPvlanSetupCommandWrapper extends CommandWrapper<PvlanS\n         }\n \n         String result = null;\n-        try {\n-            final String guestBridgeName = libvirtComputingResource.getGuestBridgeName();\n-            final Duration timeout = libvirtComputingResource.getTimeout();\n \n-            if (command.getType() == PvlanSetupCommand.Type.DHCP) {\n-                final String ovsPvlanDhcpHostPath = libvirtComputingResource.getOvsPvlanDhcpHostPath();\n-                final Script script = new Script(ovsPvlanDhcpHostPath, timeout, s_logger);\n+        final String guestBridgeName = libvirtComputingResource.getGuestBridgeName();\n+        final Duration timeout = libvirtComputingResource.getTimeout();\n \n-                script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", dhcpMac, \"-d\", dhcpIp);\n-                result = script.execute();\n+        if (command.getType() == PvlanSetupCommand.Type.DHCP) {\n+            final String ovsPvlanDhcpHostPath = libvirtComputingResource.getOvsPvlanDhcpHostPath();\n+            final Script script = new Script(ovsPvlanDhcpHostPath, timeout, s_logger);\n \n-                if (result != null) {\n-                    s_logger.warn(\"Failed to program pvlan for dhcp server with mac \" + dhcpMac);\n-                } else {\n-                    s_logger.info(\"Programmed pvlan for dhcp server with mac \" + dhcpMac);\n-                }\n-            }\n-\n-            // We run this even for DHCP servers since they're all vms after all\n-            final String ovsPvlanVmPath = libvirtComputingResource.getOvsPvlanVmPath();\n-            final Script script = new Script(ovsPvlanVmPath, timeout, s_logger);\n-            script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", vmMac);\n+            script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", dhcpMac,\n+                    \"-d\", dhcpIp);\n             result = script.execute();\n \n             if (result != null) {\n-                s_logger.warn(\"Failed to program pvlan for vm with mac \" + vmMac);\n-                return new Answer(command, false, result);\n+                s_logger.warn(\"Failed to program pvlan for dhcp server with mac \" + dhcpMac);\n             } else {\n-                s_logger.info(\"Programmed pvlan for vm with mac \" + vmMac);\n+                s_logger.info(\"Programmed pvlan for dhcp server with mac \" + dhcpMac);\n             }\n-        } catch (final Exception e) {\n-            s_logger.error(\"Error whislt executing OVS Setup command! ==> \" + e.getMessage());\n-            return new Answer(command, false, e.getMessage());\n         }\n+\n+        // We run this even for DHCP servers since they're all vms after all\n+        final String ovsPvlanVmPath = libvirtComputingResource.getOvsPvlanVmPath();\n+        final Script script = new Script(ovsPvlanVmPath, timeout, s_logger);\n+        script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", vmMac);\n+        result = script.execute();\n+\n+        if (result != null) {\n+            s_logger.warn(\"Failed to program pvlan for vm with mac \" + vmMac);\n+            return new Answer(command, false, result);\n+        } else {\n+            s_logger.info(\"Programmed pvlan for vm with mac \" + vmMac);\n+        }\n+\n         return new Answer(command, true, result);\n     }\n }\n\\ No newline at end of file\n"}}, {"oid": "ee3d29472a19ca3ba2ade83381ae04c1a0530994", "url": "https://github.com/apache/cloudstack/commit/ee3d29472a19ca3ba2ade83381ae04c1a0530994", "message": "Fixing shared network pvlan", "committedDate": "2020-04-30T12:58:48Z", "type": "forcePushed"}, {"oid": "d5660f5f9f294ab3b400e0b2c15e57d2ae69dc99", "url": "https://github.com/apache/cloudstack/commit/d5660f5f9f294ab3b400e0b2c15e57d2ae69dc99", "message": "Fixing shared network pvlan", "committedDate": "2020-05-04T09:03:11Z", "type": "forcePushed"}, {"oid": "3ebb7439751d1089cf7ad3f33cb404ca8bb4c85e", "url": "https://github.com/apache/cloudstack/commit/3ebb7439751d1089cf7ad3f33cb404ca8bb4c85e", "message": "Fixing shared network pvlan", "committedDate": "2020-05-04T10:33:04Z", "type": "forcePushed"}, {"oid": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164", "url": "https://github.com/apache/cloudstack/commit/83ac17250c78f5dcfeb7d2af4a26b6fd0e079164", "message": "Fixing shared network pvlan", "committedDate": "2020-05-04T10:35:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjgzNA==", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420086834", "bodyText": "why is this test no longer sensible?", "author": "DaanHoogland", "createdAt": "2020-05-05T12:56:41Z", "path": "plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java", "diffHunk": "@@ -4403,68 +4381,23 @@ public void testPvlanSetupCommandVm() {\n         assertFalse(answer.getResult());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Test\n-    public void testPvlanSetupCommandDhcpException() {", "originalCommit": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5MTk0MQ==", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420091941", "bodyText": "Since the old way used to call the libvirt library, it could potentially throw a LibvirtException. Now that it doesn't, theres no need to catch or test whether the exception has occoured", "author": "davidjumani", "createdAt": "2020-05-05T13:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "fcda7d15db2e2eae97474a42c20ef66ad61b7b66", "chunk": "diff --git a/plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java b/plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java\nindex e7807d4005..4debb3ad2d 100644\n--- a/plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java\n+++ b/plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java\n\n@@ -4381,10 +4404,52 @@ public class LibvirtComputingResourceTest {\n         assertFalse(answer.getResult());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testPvlanSetupCommandDhcpException() {\n+        final String op = \"add\";\n+        final URI uri = URI.create(\"http://localhost\");\n+        final String networkTag = \"/105\";\n+        final String dhcpName = \"dhcp\";\n+        final String dhcpMac = \"00:00:00:00\";\n+        final String dhcpIp = \"127.0.0.1\";\n+\n+        final PvlanSetupCommand command = PvlanSetupCommand.createDhcpSetup(op, uri, networkTag, dhcpName, dhcpMac, dhcpIp);\n+\n+        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n+\n+        final String guestBridgeName = \"br0\";\n+        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n+\n+        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n+        final String ovsPvlanDhcpHostPath = \"/pvlan\";\n+        when(libvirtComputingResource.getOvsPvlanDhcpHostPath()).thenReturn(ovsPvlanDhcpHostPath);\n+        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n+\n+        try {\n+            when(libvirtUtilitiesHelper.getConnectionByVmName(dhcpName)).thenThrow(LibvirtException.class);\n+        } catch (final LibvirtException e) {\n+            fail(e.getMessage());\n+        }\n+\n+        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n+        assertNotNull(wrapper);\n+\n+        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n+        assertFalse(answer.getResult());\n+\n+        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n+        try {\n+            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(dhcpName);\n+        } catch (final LibvirtException e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n     @Test\n     public void testPvlanSetupCommandDhcpDelete() {\n         final String op = \"delete\";\n-        final URI uri = URI.create(\"pvlan://200-p200\");\n+        final URI uri = URI.create(\"http://localhost\");\n         final String networkTag = \"/105\";\n         final String dhcpName = \"dhcp\";\n         final String dhcpMac = \"00:00:00:00\";\n"}}, {"oid": "076d2d71afe405e5274bde8489e82a7e07ce0a04", "url": "https://github.com/apache/cloudstack/commit/076d2d71afe405e5274bde8489e82a7e07ce0a04", "message": "Fixing shared network pvlan", "committedDate": "2020-05-05T13:05:49Z", "type": "forcePushed"}, {"oid": "23d2f48f418ae79c729c0130984a2d332f8a71e2", "url": "https://github.com/apache/cloudstack/commit/23d2f48f418ae79c729c0130984a2d332f8a71e2", "message": "Fixing smoke tests to run only if kvm and ovs", "committedDate": "2020-05-27T10:58:18Z", "type": "forcePushed"}, {"oid": "fcda7d15db2e2eae97474a42c20ef66ad61b7b66", "url": "https://github.com/apache/cloudstack/commit/fcda7d15db2e2eae97474a42c20ef66ad61b7b66", "message": "Adding l2 pvlan for kvm", "committedDate": "2020-08-17T08:36:02Z", "type": "commit"}, {"oid": "506645b072cd3dbe0268c0a2b647278593920b6c", "url": "https://github.com/apache/cloudstack/commit/506645b072cd3dbe0268c0a2b647278593920b6c", "message": "Fixing shared network pvlan", "committedDate": "2020-08-17T08:36:06Z", "type": "commit"}, {"oid": "910d9f7f991bf9e202c4fac3f3aab6547e02ec47", "url": "https://github.com/apache/cloudstack/commit/910d9f7f991bf9e202c4fac3f3aab6547e02ec47", "message": "Fixing smoke tests to run only if kvm and ovs", "committedDate": "2020-08-17T08:36:12Z", "type": "commit"}, {"oid": "2cc200d07f9451f07e46e1d70fd2ca3a9981d2f0", "url": "https://github.com/apache/cloudstack/commit/2cc200d07f9451f07e46e1d70fd2ca3a9981d2f0", "message": "Fixing vlan allowed to be created with existing pvlan id", "committedDate": "2020-08-17T08:36:41Z", "type": "commit"}, {"oid": "2cc200d07f9451f07e46e1d70fd2ca3a9981d2f0", "url": "https://github.com/apache/cloudstack/commit/2cc200d07f9451f07e46e1d70fd2ca3a9981d2f0", "message": "Fixing vlan allowed to be created with existing pvlan id", "committedDate": "2020-08-17T08:36:41Z", "type": "forcePushed"}, {"oid": "bb5086beedad9e32a503c83bbde243b9445a3bc2", "url": "https://github.com/apache/cloudstack/commit/bb5086beedad9e32a503c83bbde243b9445a3bc2", "message": "Adding pvlan rules when nic added or removed", "committedDate": "2020-08-17T08:41:09Z", "type": "commit"}, {"oid": "5c022f1ff2a8c0bb88068c8b65ff9a7adbdf7687", "url": "https://github.com/apache/cloudstack/commit/5c022f1ff2a8c0bb88068c8b65ff9a7adbdf7687", "message": "Handle null", "committedDate": "2020-08-17T08:42:53Z", "type": "commit"}, {"oid": "2c6144884d0ea06d608013384df5b9603aad1ef2", "url": "https://github.com/apache/cloudstack/commit/2c6144884d0ea06d608013384df5b9603aad1ef2", "message": "Migrating pvlan ovs rules for L2", "committedDate": "2020-08-17T13:00:25Z", "type": "commit"}, {"oid": "8c41853c25799ff1b2f5e8b94b7c6e7f158fe4b9", "url": "https://github.com/apache/cloudstack/commit/8c41853c25799ff1b2f5e8b94b7c6e7f158fe4b9", "message": "Cleanup rules migration", "committedDate": "2020-08-19T15:47:32Z", "type": "commit"}]}