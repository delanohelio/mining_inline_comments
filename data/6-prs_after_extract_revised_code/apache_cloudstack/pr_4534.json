{"pr_number": 4534, "pr_title": "Migrate vm across clusters", "pr_createdAt": "2020-12-11T13:14:43Z", "pr_url": "https://github.com/apache/cloudstack/pull/4534", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNDY4MQ==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r541024681", "bodyText": "I know i sound like a broken record , but I see four methods here. Can you extract these pieces of code please?", "author": "DaanHoogland", "createdAt": "2020-12-11T15:23:56Z", "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "diffHunk": "@@ -5787,6 +5789,50 @@ public VirtualMachine migrateVirtualMachine(Long vmId, Host destinationHost) thr\n \n         // check if migrating to same host\n         long srcHostId = vm.getHostId();\n+\n+        DeployDestination dest = null;\n+        if (destinationHost == null) {\n+            vm.setLastHostId(null); // Do not check last host\n+            final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+            final Host host = _hostDao.findById(srcHostId);\n+            final DataCenterDeployment plan = new DataCenterDeployment(host.getDataCenterId(), null, null, null, null, null);\n+            ExcludeList excludes = new ExcludeList();\n+            excludes.addHost(srcHostId);\n+            try {\n+                dest = _planningMgr.planDeployment(profile, plan, excludes, null);\n+            } catch (final AffinityConflictException e2) {\n+                s_logger.warn(\"Unable to create deployment, affinity rules associted to the VM conflict\", e2);\n+                throw new CloudRuntimeException(\"Unable to create deployment, affinity rules associted to the VM conflict\");\n+            } catch (final InsufficientServerCapacityException e3) {\n+                throw new CloudRuntimeException(\"Unable to find a server to migrate the vm to\");\n+            }\n+        } else {\n+            dest = checkVmMigrationDestination(vm, srcHostId, destinationHost);\n+        }\n+\n+        // If no suitable destination found then throw exception\n+        if (dest == null) {\n+            throw new RuntimeException(\"Unable to find suitable destination to migrate VM \" + vm.getInstanceName());\n+        }\n+\n+        UserVmVO uservm = _vmDao.findById(vmId);\n+        if (uservm != null) {\n+            collectVmDiskStatistics(uservm);\n+            collectVmNetworkStatistics(uservm);\n+        }\n+        _itMgr.migrate(vm.getUuid(), srcHostId, dest);\n+        VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n+        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {\n+            return _vmDao.findById(vmId);\n+        } else {\n+            return vmInstance;\n+        }", "originalCommit": "2687ffd9b9ebf590a18adc6d36962a367530cb7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bfeed083c2ff65dd7d1acebd862ef5666297621", "chunk": "diff --git a/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java b/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\nindex 65d6ee3a9c..c13ceda2f7 100644\n--- a/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\n+++ b/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\n\n@@ -5792,12 +5792,13 @@ public class UserVmManagerImpl extends ManagerBase implements UserVmManager, Vir\n \n         DeployDestination dest = null;\n         if (destinationHost == null) {\n-            vm.setLastHostId(null); // Do not check last host\n-            final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+            vm.setLastHostId(null); // Last host does not have higher priority in vm migration\n+            final ServiceOfferingVO offering = _offeringDao.findById(vm.getId(), vm.getServiceOfferingId());\n+            final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm, null, offering, null, null);\n             final Host host = _hostDao.findById(srcHostId);\n-            final DataCenterDeployment plan = new DataCenterDeployment(host.getDataCenterId(), null, null, null, null, null);\n             ExcludeList excludes = new ExcludeList();\n             excludes.addHost(srcHostId);\n+            final DataCenterDeployment plan = _itMgr.getMigrationDeployment(vm.getId(), host, null, excludes);\n             try {\n                 dest = _planningMgr.planDeployment(profile, plan, excludes, null);\n             } catch (final AffinityConflictException e2) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNjMxMw==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r541026313", "bodyText": "\ud83d\udc4d", "author": "DaanHoogland", "createdAt": "2020-12-11T15:26:09Z", "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "diffHunk": "@@ -5812,7 +5814,7 @@ public VirtualMachine migrateVirtualMachine(Long vmId, Host destinationHost) thr\n \n         // If no suitable destination found then throw exception\n         if (dest == null) {\n-            throw new RuntimeException(\"Unable to find suitable destination to migrate VM \" + vm.getInstanceName());\n+            throw new CloudRuntimeException(\"Unable to find suitable destination to migrate VM \" + vm.getInstanceName());", "originalCommit": "d2266e85299f708413bf077c48e755769203cea5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a54284c07a51d62fec82a1e45279075b211cd5b1", "chunk": "diff --git a/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java b/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\nindex ffd85525d9..8cdef534ae 100644\n--- a/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\n+++ b/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\n\n@@ -5809,7 +5872,7 @@ public class UserVmManagerImpl extends ManagerBase implements UserVmManager, Vir\n                 throw new CloudRuntimeException(\"Unable to find a server to migrate the vm to\");\n             }\n         } else {\n-            dest = checkVmMigrationDestination(vm, srcHostId, destinationHost);\n+            dest = checkVmMigrationDestination(vm, srcHost, destinationHost);\n         }\n \n         // If no suitable destination found then throw exception\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMzYyNw==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r541033627", "bodyText": "sugestion:\nif (! clusterWideMigrationSupported(...)) return false;\nand extract this code to\nboolean clusterWideMigrationSupported(...)", "author": "DaanHoogland", "createdAt": "2020-12-11T15:36:11Z", "path": "server/src/main/java/com/cloud/resource/ResourceManagerImpl.java", "diffHunk": "@@ -1262,7 +1263,29 @@ private boolean doMaintain(final long hostId) {\n                 return true;\n             }\n \n-            final List<HostVO> hosts = listAllUpAndEnabledHosts(Host.Type.Routing, host.getClusterId(), host.getPodId(), host.getDataCenterId());\n+            List<HostVO> hosts = listAllUpAndEnabledHosts(Host.Type.Routing, host.getClusterId(), host.getPodId(), host.getDataCenterId());\n+            if (hosts == null || hosts.isEmpty()) {\n+                s_logger.warn(\"Unable to find a host for vm migration in cluster: \" + host.getClusterId());\n+                if (MIGRATE_VM_ACROSS_CLUSTERS.value()) {\n+                    s_logger.info(\"Looking for hosts across different clusters in zone: \" + host.getDataCenterId());\n+                    hosts = listAllUpAndEnabledHosts(Host.Type.Routing, null, null, host.getDataCenterId());\n+                    if (hosts == null || hosts.isEmpty()) {\n+                        s_logger.warn(\"Unable to find a host for vm migration in zone: \" + host.getDataCenterId());\n+                        return false;\n+                    }\n+                    // Dont migrate vm if it has volumes on cluster-wide pool\n+                    for (final VMInstanceVO vm : vms) {\n+                        if (_vmMgr.checkIfVmHasClusterWideVolumes(vm.getId())) {\n+                            s_logger.warn(\"Unable to migrate vm \" + vm.getInstanceName() + \" as it has volumes on cluster-wide pool\");\n+                            return false;\n+                        }\n+                    }\n+                } else {\n+                    s_logger.warn(\"Not migrating VM across cluster since \" + MIGRATE_VM_ACROSS_CLUSTERS.key() + \" is false\");\n+                    return false;\n+                }\n+            }", "originalCommit": "ecb2808d4c0e5b81e7c0c861b94513d55c490569", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bfeed083c2ff65dd7d1acebd862ef5666297621", "chunk": "diff --git a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\nindex 611725d892..0ae8441307 100755\n--- a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n+++ b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n\n@@ -1266,7 +1266,7 @@ public class ResourceManagerImpl extends ManagerBase implements ResourceManager,\n             List<HostVO> hosts = listAllUpAndEnabledHosts(Host.Type.Routing, host.getClusterId(), host.getPodId(), host.getDataCenterId());\n             if (hosts == null || hosts.isEmpty()) {\n                 s_logger.warn(\"Unable to find a host for vm migration in cluster: \" + host.getClusterId());\n-                if (MIGRATE_VM_ACROSS_CLUSTERS.value()) {\n+                if (MIGRATE_VM_ACROSS_CLUSTERS.valueIn(host.getDataCenterId())) {\n                     s_logger.info(\"Looking for hosts across different clusters in zone: \" + host.getDataCenterId());\n                     hosts = listAllUpAndEnabledHosts(Host.Type.Routing, null, null, host.getDataCenterId());\n                     if (hosts == null || hosts.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNTEwNA==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r541035104", "bodyText": "sugest you name this clustersToExclude without the d on the end", "author": "DaanHoogland", "createdAt": "2020-12-11T15:38:08Z", "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -3268,6 +3226,22 @@ public boolean checkIfVmHasClusterWideVolumes(Long vmId) {\n \n     }\n \n+    private DataCenterDeployment getMigrationDeployment(final Long vmId, final Host host, final Long poolId, final ExcludeList excludes) {\n+        if (MIGRATE_VM_ACROSS_CLUSTERS.value() && !checkIfVmHasClusterWideVolumes(vmId)) {\n+            s_logger.info(\"Searching for hosts in the zone for vm migration\");\n+            List<Long> clustersToExcluded = _clusterDao.listAllClusters(host.getDataCenterId());", "originalCommit": "267fcd4936c31bd42cacef705fefaddfd79d84b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bfeed083c2ff65dd7d1acebd862ef5666297621", "chunk": "diff --git a/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java b/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\nindex 5b213df49f..ab823f55bf 100755\n--- a/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\n+++ b/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\n\n@@ -3226,8 +3226,9 @@ public class VirtualMachineManagerImpl extends ManagerBase implements VirtualMac\n \n     }\n \n-    private DataCenterDeployment getMigrationDeployment(final Long vmId, final Host host, final Long poolId, final ExcludeList excludes) {\n-        if (MIGRATE_VM_ACROSS_CLUSTERS.value() && !checkIfVmHasClusterWideVolumes(vmId)) {\n+    @Override\n+    public DataCenterDeployment getMigrationDeployment(final Long vmId, final Host host, final Long poolId, final ExcludeList excludes) {\n+        if (MIGRATE_VM_ACROSS_CLUSTERS.valueIn(host.getDataCenterId()) && !checkIfVmHasClusterWideVolumes(vmId)) {\n             s_logger.info(\"Searching for hosts in the zone for vm migration\");\n             List<Long> clustersToExcluded = _clusterDao.listAllClusters(host.getDataCenterId());\n             List<ClusterVO> clusterList = _clusterDao.listByDcHyType(host.getDataCenterId(), host.getHypervisorType().toString());\n"}}, {"oid": "2bfeed083c2ff65dd7d1acebd862ef5666297621", "url": "https://github.com/apache/cloudstack/commit/2bfeed083c2ff65dd7d1acebd862ef5666297621", "message": " #4534 Fix Vms are migrated to same clusters in CloudStack caused by dedicated resources.", "committedDate": "2021-01-26T13:36:10Z", "type": "forcePushed"}, {"oid": "a54284c07a51d62fec82a1e45279075b211cd5b1", "url": "https://github.com/apache/cloudstack/commit/a54284c07a51d62fec82a1e45279075b211cd5b1", "message": "Check MIGRATE_VM_ACROSS_CLUSTERS in zone setting", "committedDate": "2021-02-18T22:27:59Z", "type": "forcePushed"}, {"oid": "51ea345a076a72cfeefecbf12ef7bc7b84569a0f", "url": "https://github.com/apache/cloudstack/commit/51ea345a076a72cfeefecbf12ef7bc7b84569a0f", "message": "server: Optional destination host when migrate a vm", "committedDate": "2021-03-15T13:37:40Z", "type": "commit"}, {"oid": "9bdc324d860acfc074fa94707467f9131bdbc88a", "url": "https://github.com/apache/cloudstack/commit/9bdc324d860acfc074fa94707467f9131bdbc88a", "message": " #4378: migrate systemvms/routers with optional host", "committedDate": "2021-03-15T13:44:25Z", "type": "commit"}, {"oid": "b6c444969d999bb3c21dceab52fc61fc26fefd9f", "url": "https://github.com/apache/cloudstack/commit/b6c444969d999bb3c21dceab52fc61fc26fefd9f", "message": "Migrate vms across clusters\n\nAfter enabling maintenance mode on host, if no suitable hosts\nare found in the same cluster then search for hosts in\ndifferent clusters having the same hypervisor type\n\nset global setting migrate.vm.across.clusters to true", "committedDate": "2021-03-15T13:49:45Z", "type": "commit"}, {"oid": "8e85f028982e004deeb54b4ece1a0ff8425138f3", "url": "https://github.com/apache/cloudstack/commit/8e85f028982e004deeb54b4ece1a0ff8425138f3", "message": "search all clusters in zone when migrate vm across clusters if applicable", "committedDate": "2021-03-15T13:50:27Z", "type": "commit"}, {"oid": "8e36c02d6d92789d1255506d04552235828abfd3", "url": "https://github.com/apache/cloudstack/commit/8e36c02d6d92789d1255506d04552235828abfd3", "message": "Honor migrate.vm.across.clusters when migrate vm without destination", "committedDate": "2021-03-15T13:50:28Z", "type": "commit"}, {"oid": "f6f8cfc6f7a58a636512c7334c5b5b4dfa081174", "url": "https://github.com/apache/cloudstack/commit/f6f8cfc6f7a58a636512c7334c5b5b4dfa081174", "message": "Check MIGRATE_VM_ACROSS_CLUSTERS in zone setting", "committedDate": "2021-03-15T13:50:28Z", "type": "commit"}, {"oid": "d4d80807681993c9090e8b024deb973bdcc7f1ee", "url": "https://github.com/apache/cloudstack/commit/d4d80807681993c9090e8b024deb973bdcc7f1ee", "message": " #4534 Fix Vms are migrated to same clusters in CloudStack caused by dedicated resources.", "committedDate": "2021-03-15T13:50:28Z", "type": "commit"}, {"oid": "3250cf9da7853de0689ed8c298e78e6608c0af3a", "url": "https://github.com/apache/cloudstack/commit/3250cf9da7853de0689ed8c298e78e6608c0af3a", "message": " #4534 extract some codes to methods", "committedDate": "2021-03-15T13:52:41Z", "type": "commit"}, {"oid": "3250cf9da7853de0689ed8c298e78e6608c0af3a", "url": "https://github.com/apache/cloudstack/commit/3250cf9da7853de0689ed8c298e78e6608c0af3a", "message": " #4534 extract some codes to methods", "committedDate": "2021-03-15T13:52:41Z", "type": "forcePushed"}, {"oid": "5633d301ea2865678ef36ab7c8c824cd5ba8ff12", "url": "https://github.com/apache/cloudstack/commit/5633d301ea2865678ef36ab7c8c824cd5ba8ff12", "message": "Merge remote-tracking branch 'apache/main' into 4.15-migrate-vm-across-cluster", "committedDate": "2021-08-19T07:07:18Z", "type": "commit"}, {"oid": "ddfd602e75099c416f3bd8bb2191846118423d3d", "url": "https://github.com/apache/cloudstack/commit/ddfd602e75099c416f3bd8bb2191846118423d3d", "message": "Merge branch 'main' into 4.15-migrate-vm-across-cluster", "committedDate": "2021-08-23T08:07:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTU2NTI4OQ==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r701565289", "bodyText": "@weizhouapache these methods are not used?", "author": "shwstppr", "createdAt": "2021-09-03T03:50:50Z", "path": "server/src/main/java/com/cloud/deploy/FirstFitPlanner.java", "diffHunk": "@@ -441,7 +441,22 @@ protected void removeClustersCrossingThreshold(List<Long> clusterListForVmAlloca\n         return podIdsByCapacity;\n     }\n \n-    protected Pair<List<Long>, Map<Long, Double>> listClustersByCapacity(long id, int requiredCpu, long requiredRam, ExcludeList avoid, boolean isZone) {\n+    private List<Long> listDisabledClusters(long zoneId, Long podId) {\n+        List<Long> disabledClusters = clusterDao.listDisabledClusters(zoneId, podId);\n+        if (podId == null) {\n+            //list all disabled clusters under this zone + clusters under any disabled pod of this zone\n+            List<Long> clustersWithDisabledPods = clusterDao.listClustersWithDisabledPods(zoneId);\n+            disabledClusters.addAll(clustersWithDisabledPods);\n+        }\n+        return disabledClusters;\n+    }\n+\n+    private List<Long> listDisabledPods(long zoneId) {\n+        List<Long> disabledPods = podDao.listDisabledPods(zoneId);\n+        return disabledPods;\n+    }", "originalCommit": "ddfd602e75099c416f3bd8bb2191846118423d3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca3d0cc510683ede46aa9956ea030839a8961201", "chunk": "diff --git a/server/src/main/java/com/cloud/deploy/FirstFitPlanner.java b/server/src/main/java/com/cloud/deploy/FirstFitPlanner.java\nindex 8aba02e11c..f5263e2104 100644\n--- a/server/src/main/java/com/cloud/deploy/FirstFitPlanner.java\n+++ b/server/src/main/java/com/cloud/deploy/FirstFitPlanner.java\n\n@@ -441,21 +441,6 @@ public class FirstFitPlanner extends AdapterBase implements DeploymentClusterPla\n         return podIdsByCapacity;\n     }\n \n-    private List<Long> listDisabledClusters(long zoneId, Long podId) {\n-        List<Long> disabledClusters = clusterDao.listDisabledClusters(zoneId, podId);\n-        if (podId == null) {\n-            //list all disabled clusters under this zone + clusters under any disabled pod of this zone\n-            List<Long> clustersWithDisabledPods = clusterDao.listClustersWithDisabledPods(zoneId);\n-            disabledClusters.addAll(clustersWithDisabledPods);\n-        }\n-        return disabledClusters;\n-    }\n-\n-    private List<Long> listDisabledPods(long zoneId) {\n-        List<Long> disabledPods = podDao.listDisabledPods(zoneId);\n-        return disabledPods;\n-    }\n-\n     protected Pair<List<Long>, Map<Long, Double>> listClustersByCapacity(long id, long vmId, int requiredCpu, long requiredRam, ExcludeList avoid, boolean isZone) {\n         //look at the aggregate available cpu and ram per cluster\n         //although an aggregate value may be false indicator that a cluster can host a vm, it will at the least eliminate those clusters which definitely cannot\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTYyODM1Mg==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r701628352", "bodyText": "Are you deliberately trying to change hosts arg here to have the new list available to the caller?", "author": "shwstppr", "createdAt": "2021-09-03T06:51:53Z", "path": "server/src/main/java/com/cloud/resource/ResourceManagerImpl.java", "diffHunk": "@@ -1336,6 +1344,28 @@ private boolean doMaintain(final long hostId) {\n         return true;\n     }\n \n+    private boolean isClusterWideMigrationSupported(Host host, List<VMInstanceVO> vms, List<HostVO> hosts) {", "originalCommit": "ddfd602e75099c416f3bd8bb2191846118423d3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31e24e68a9f212d1d26e7982f72dba3e8f14ed8", "chunk": "diff --git a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\nindex 6a4509cefb..06a38a4c79 100755\n--- a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n+++ b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n\n@@ -1344,23 +1344,24 @@ public class ResourceManagerImpl extends ManagerBase implements ResourceManager,\n         return true;\n     }\n \n-    private boolean isClusterWideMigrationSupported(Host host, List<VMInstanceVO> vms, List<HostVO> hosts) {\n-        if (MIGRATE_VM_ACROSS_CLUSTERS.valueIn(host.getDataCenterId())) {\n-            s_logger.info(\"Looking for hosts across different clusters in zone: \" + host.getDataCenterId());\n-            hosts = listAllUpAndEnabledHosts(Host.Type.Routing, null, null, host.getDataCenterId());\n-            if (hosts == null || hosts.isEmpty()) {\n-                s_logger.warn(\"Unable to find a host for vm migration in zone: \" + host.getDataCenterId());\n+    private boolean isClusterWideMigrationPossible(long zoneId, List<VMInstanceVO> vms, List<HostVO> hosts) {\n+        if (MIGRATE_VM_ACROSS_CLUSTERS.valueIn(zoneId)) {\n+            s_logger.info(\"Looking for hosts across different clusters in zone: \" + zoneId);\n+            hosts.addAll(listAllUpAndEnabledHosts(Host.Type.Routing, null, null, zoneId));\n+            if (CollectionUtils.isEmpty(hosts)) {\n+                s_logger.warn(\"Unable to find a host for vm migration in zone: \" + zoneId);\n                 return false;\n             }\n-            // Dont migrate vm if it has volumes on cluster-wide pool\n+            s_logger.info(\"Found hosts in the zone for vm migration: \" + hosts);\n+            // Don't migrate vm if it has volumes on cluster-wide pool\n             for (final VMInstanceVO vm : vms) {\n                 if (_vmMgr.checkIfVmHasClusterWideVolumes(vm.getId())) {\n-                    s_logger.warn(\"Unable to migrate vm \" + vm.getInstanceName() + \" as it has volumes on cluster-wide pool\");\n+                    s_logger.warn(String.format(\"VM %s cannot be migrated across cluster as it has volumes on cluster-wide pool\", vm));\n                     return false;\n                 }\n             }\n         } else {\n-            s_logger.warn(\"Not migrating VM across cluster since \" + MIGRATE_VM_ACROSS_CLUSTERS.key() + \" is false\");\n+            s_logger.warn(String.format(\"VMs cannot be migrated across cluster since %s is false for zone ID: %d\", MIGRATE_VM_ACROSS_CLUSTERS.key(), zoneId));\n             return false;\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTYyOTM5MQ==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r701629391", "bodyText": "@weizhouapache do we need to re-list hosts here for getting hosts from other clusters else VM will be stopped instead of migration.\nI've tested on KVM with one host each in two different clusters and the VM just stops and doesn't migrate. Global setting was set to true.\nI was able to get it working with some changes though\ndiff --git a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\nindex 6a4509cefb..ef3585650a 100755\n--- a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n+++ b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n@@ -33,18 +33,6 @@ import java.util.Random;\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.deploy.DataCenterDeployment;\n-import com.cloud.deploy.DeployDestination;\n-import com.cloud.deploy.DeploymentPlanner;\n-import com.cloud.deploy.DeploymentPlanningManager;\n-import com.cloud.exception.InsufficientServerCapacityException;\n-import com.cloud.exception.ResourceUnavailableException;\n-import com.cloud.service.ServiceOfferingVO;\n-import com.cloud.service.dao.ServiceOfferingDao;\n-import com.cloud.storage.dao.DiskOfferingDao;\n-import com.cloud.vm.UserVmManager;\n-import com.cloud.vm.VirtualMachineProfile;\n-import com.cloud.vm.VirtualMachineProfileImpl;\n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.command.admin.cluster.AddClusterCmd;\n import org.apache.cloudstack.api.command.admin.cluster.DeleteClusterCmd;\n@@ -53,12 +41,11 @@ import org.apache.cloudstack.api.command.admin.host.AddHostCmd;\n import org.apache.cloudstack.api.command.admin.host.AddSecondaryStorageCmd;\n import org.apache.cloudstack.api.command.admin.host.CancelHostAsDegradedCmd;\n import org.apache.cloudstack.api.command.admin.host.CancelMaintenanceCmd;\n-import org.apache.cloudstack.api.command.admin.host.PrepareForMaintenanceCmd;\n import org.apache.cloudstack.api.command.admin.host.DeclareHostAsDegradedCmd;\n+import org.apache.cloudstack.api.command.admin.host.PrepareForMaintenanceCmd;\n import org.apache.cloudstack.api.command.admin.host.ReconnectHostCmd;\n import org.apache.cloudstack.api.command.admin.host.UpdateHostCmd;\n import org.apache.cloudstack.api.command.admin.host.UpdateHostPasswordCmd;\n-\n import org.apache.cloudstack.context.CallContext;\n import org.apache.cloudstack.framework.config.ConfigKey;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n@@ -113,6 +100,10 @@ import com.cloud.dc.dao.DataCenterDao;\n import com.cloud.dc.dao.DataCenterIpAddressDao;\n import com.cloud.dc.dao.DedicatedResourceDao;\n import com.cloud.dc.dao.HostPodDao;\n+import com.cloud.deploy.DataCenterDeployment;\n+import com.cloud.deploy.DeployDestination;\n+import com.cloud.deploy.DeploymentPlanner;\n+import com.cloud.deploy.DeploymentPlanningManager;\n import com.cloud.deploy.PlannerHostReservationVO;\n import com.cloud.deploy.dao.PlannerHostReservationDao;\n import com.cloud.event.ActionEvent;\n@@ -121,9 +112,11 @@ import com.cloud.event.EventTypes;\n import com.cloud.event.EventVO;\n import com.cloud.exception.AgentUnavailableException;\n import com.cloud.exception.DiscoveryException;\n+import com.cloud.exception.InsufficientServerCapacityException;\n import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.exception.PermissionDeniedException;\n import com.cloud.exception.ResourceInUseException;\n+import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.gpu.GPU;\n import com.cloud.gpu.HostGpuGroupsVO;\n import com.cloud.gpu.VGPUTypesVO;\n@@ -150,6 +143,8 @@ import com.cloud.org.Cluster;\n import com.cloud.org.Grouping;\n import com.cloud.org.Managed;\n import com.cloud.serializer.GsonHelper;\n+import com.cloud.service.ServiceOfferingVO;\n+import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n import com.cloud.storage.GuestOSCategoryVO;\n import com.cloud.storage.StorageManager;\n@@ -158,6 +153,7 @@ import com.cloud.storage.StoragePoolHostVO;\n import com.cloud.storage.StoragePoolStatus;\n import com.cloud.storage.StorageService;\n import com.cloud.storage.VMTemplateVO;\n+import com.cloud.storage.dao.DiskOfferingDao;\n import com.cloud.storage.dao.GuestOSCategoryDao;\n import com.cloud.storage.dao.StoragePoolHostDao;\n import com.cloud.storage.dao.VMTemplateDao;\n@@ -189,10 +185,13 @@ import com.cloud.utils.net.Ip;\n import com.cloud.utils.net.NetUtils;\n import com.cloud.utils.ssh.SSHCmdHelper;\n import com.cloud.utils.ssh.SshException;\n+import com.cloud.vm.UserVmManager;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachine.State;\n import com.cloud.vm.VirtualMachineManager;\n+import com.cloud.vm.VirtualMachineProfile;\n+import com.cloud.vm.VirtualMachineProfileImpl;\n import com.cloud.vm.VmDetailConstants;\n import com.cloud.vm.dao.UserVmDetailsDao;\n import com.cloud.vm.dao.VMInstanceDao;\n@@ -1307,12 +1306,18 @@ public class ResourceManagerImpl extends ManagerBase implements ResourceManager,\n                 return true;\n             }\n \n-            List<HostVO> hosts = listAllUpAndEnabledHosts(Host.Type.Routing, host.getClusterId(), host.getPodId(), host.getDataCenterId());\n-            if (hosts == null || hosts.isEmpty()) {\n-                s_logger.warn(\"Unable to find a host for vm migration in cluster: \" + host.getClusterId());\n-                if (! isClusterWideMigrationSupported(host, vms, hosts)) {\n-                    return false;\n-                }\n+\n+            List<HostVO> hosts;\n+            Long clusterId = null;\n+            if (isClusterWideMigrationPossible(host.getDataCenterId(), vms)) {\n+                s_logger.info(String.format(\"Looking for hosts for VM migration across different clusters in pod ID: %d\", host.getPodId()));\n+            } else {\n+                clusterId = host.getClusterId();\n+                s_logger.info(String.format(\"Looking for hosts for VM migration in cluster ID: %d\", clusterId));\n+            }\n+            hosts = listAllUpAndEnabledHosts(Host.Type.Routing, clusterId, host.getPodId(), host.getDataCenterId());\n+            if (CollectionUtils.isEmpty(hosts)) {\n+                s_logger.warn(String.format(\"Unable to find a host for VM migration away from host: %s\", host));\n             }\n \n             for (final VMInstanceVO vm : vms) {\n@@ -1344,23 +1349,17 @@ public class ResourceManagerImpl extends ManagerBase implements ResourceManager,\n         return true;\n     }\n \n-    private boolean isClusterWideMigrationSupported(Host host, List<VMInstanceVO> vms, List<HostVO> hosts) {\n-        if (MIGRATE_VM_ACROSS_CLUSTERS.valueIn(host.getDataCenterId())) {\n-            s_logger.info(\"Looking for hosts across different clusters in zone: \" + host.getDataCenterId());\n-            hosts = listAllUpAndEnabledHosts(Host.Type.Routing, null, null, host.getDataCenterId());\n-            if (hosts == null || hosts.isEmpty()) {\n-                s_logger.warn(\"Unable to find a host for vm migration in zone: \" + host.getDataCenterId());\n-                return false;\n-            }\n-            // Dont migrate vm if it has volumes on cluster-wide pool\n+    private boolean isClusterWideMigrationPossible(long zoneId, List<VMInstanceVO> vms) {\n+        if (MIGRATE_VM_ACROSS_CLUSTERS.valueIn(zoneId)) {\n+            // Don't migrate vm if it has volumes on cluster-wide pool\n             for (final VMInstanceVO vm : vms) {\n                 if (_vmMgr.checkIfVmHasClusterWideVolumes(vm.getId())) {\n-                    s_logger.warn(\"Unable to migrate vm \" + vm.getInstanceName() + \" as it has volumes on cluster-wide pool\");\n+                    s_logger.warn(String.format(\"VM %s cannot be migrated across cluster as it has volumes on cluster-wide pool\", vm));\n                     return false;\n                 }\n             }\n         } else {\n-            s_logger.warn(\"Not migrating VM across cluster since \" + MIGRATE_VM_ACROSS_CLUSTERS.key() + \" is false\");\n+            s_logger.warn(String.format(\"VMs cannot be migrated across cluster since %s is false for zone ID: %d\", MIGRATE_VM_ACROSS_CLUSTERS.key(), zoneId));\n             return false;\n         }\n         return true;", "author": "shwstppr", "createdAt": "2021-09-03T06:53:58Z", "path": "server/src/main/java/com/cloud/resource/ResourceManagerImpl.java", "diffHunk": "@@ -1306,7 +1307,14 @@ private boolean doMaintain(final long hostId) {\n                 return true;\n             }\n \n-            final List<HostVO> hosts = listAllUpAndEnabledHosts(Host.Type.Routing, host.getClusterId(), host.getPodId(), host.getDataCenterId());\n+            List<HostVO> hosts = listAllUpAndEnabledHosts(Host.Type.Routing, host.getClusterId(), host.getPodId(), host.getDataCenterId());\n+            if (hosts == null || hosts.isEmpty()) {\n+                s_logger.warn(\"Unable to find a host for vm migration in cluster: \" + host.getClusterId());\n+                if (! isClusterWideMigrationSupported(host, vms, hosts)) {\n+                    return false;\n+                }\n+            }\n+\n             for (final VMInstanceVO vm : vms) {\n                 if (hosts == null || hosts.isEmpty() || !answer.getMigrate()", "originalCommit": "ddfd602e75099c416f3bd8bb2191846118423d3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31e24e68a9f212d1d26e7982f72dba3e8f14ed8", "chunk": "diff --git a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\nindex 6a4509cefb..06a38a4c79 100755\n--- a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n+++ b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n\n@@ -1308,9 +1308,9 @@ public class ResourceManagerImpl extends ManagerBase implements ResourceManager,\n             }\n \n             List<HostVO> hosts = listAllUpAndEnabledHosts(Host.Type.Routing, host.getClusterId(), host.getPodId(), host.getDataCenterId());\n-            if (hosts == null || hosts.isEmpty()) {\n+            if (CollectionUtils.isEmpty(hosts)) {\n                 s_logger.warn(\"Unable to find a host for vm migration in cluster: \" + host.getClusterId());\n-                if (! isClusterWideMigrationSupported(host, vms, hosts)) {\n+                if (! isClusterWideMigrationPossible(host.getDataCenterId(), vms, hosts)) {\n                     return false;\n                 }\n             }\n"}}, {"oid": "404cd34c15644c600ff3f55e39bfec82bc302b6a", "url": "https://github.com/apache/cloudstack/commit/404cd34c15644c600ff3f55e39bfec82bc302b6a", "message": "fix #4534: an error in 'git merge'", "committedDate": "2021-09-06T06:32:38Z", "type": "commit"}, {"oid": "ca3d0cc510683ede46aa9956ea030839a8961201", "url": "https://github.com/apache/cloudstack/commit/ca3d0cc510683ede46aa9956ea030839a8961201", "message": "fix #4534: remove useless methods in FirstFitPlanner.java", "committedDate": "2021-09-06T06:32:58Z", "type": "commit"}, {"oid": "a31e24e68a9f212d1d26e7982f72dba3e8f14ed8", "url": "https://github.com/apache/cloudstack/commit/a31e24e68a9f212d1d26e7982f72dba3e8f14ed8", "message": "fix #4534: vms are stopped in host maintenance", "committedDate": "2021-09-06T06:33:07Z", "type": "commit"}, {"oid": "beeee5e2931fc20ae904e73e23776324e9aa5cc9", "url": "https://github.com/apache/cloudstack/commit/beeee5e2931fc20ae904e73e23776324e9aa5cc9", "message": "fix #4534: across-cluster migration of vms with cluster-scoped pools is supported by vmware vmotion", "committedDate": "2021-09-06T06:38:00Z", "type": "commit"}, {"oid": "75a8b0dcc9028b56b633065f36e62e2274ff13a7", "url": "https://github.com/apache/cloudstack/commit/75a8b0dcc9028b56b633065f36e62e2274ff13a7", "message": "fix #4534: migrate systemvms is only possible across clusters in same pod to avoid potential network errors.", "committedDate": "2021-09-06T06:40:12Z", "type": "commit"}, {"oid": "708bd73b90943349844d6cc89ff82d5bb14b9879", "url": "https://github.com/apache/cloudstack/commit/708bd73b90943349844d6cc89ff82d5bb14b9879", "message": "Merge remote-tracking branch 'apache/main' into 4.15-migrate-vm-across-cluster", "committedDate": "2021-09-06T06:42:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjgwOTAzNA==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r702809034", "bodyText": "Minor nit: this block can be moved to start of if to fail early", "author": "shwstppr", "createdAt": "2021-09-06T10:55:37Z", "path": "server/src/main/java/com/cloud/resource/ResourceManagerImpl.java", "diffHunk": "@@ -1345,6 +1353,37 @@ private boolean doMaintain(final long hostId) {\n         return true;\n     }\n \n+    private boolean isClusterWideMigrationPossible(Host host, List<VMInstanceVO> vms, List<HostVO> hosts) {\n+        if (MIGRATE_VM_ACROSS_CLUSTERS.valueIn(host.getDataCenterId())) {\n+            s_logger.info(\"Looking for hosts across different clusters in zone: \" + host.getDataCenterId());\n+            Long podId = null;\n+            for (final VMInstanceVO vm : vms) {\n+                if (VirtualMachine.systemVMs.contains(vm.getType())) {\n+                    // SystemVMs can only be migrated to same pod\n+                    podId = host.getPodId();\n+                    break;\n+                }\n+            }\n+            hosts.addAll(listAllUpAndEnabledHosts(Host.Type.Routing, null, podId, host.getDataCenterId()));\n+            if (CollectionUtils.isEmpty(hosts)) {\n+                s_logger.warn(\"Unable to find a host for vm migration in zone: \" + host.getDataCenterId());\n+                return false;\n+            }\n+            s_logger.info(\"Found hosts in the zone for vm migration: \" + hosts);\n+            // Don't migrate vm if it has volumes on cluster-wide pool\n+            for (final VMInstanceVO vm : vms) {\n+                if (! HypervisorType.VMware.equals(host.getHypervisorType()) && _vmMgr.checkIfVmHasClusterWideVolumes(vm.getId())) {\n+                    s_logger.warn(String.format(\"VM %s cannot be migrated across cluster as it has volumes on cluster-wide pool\", vm));\n+                    return false;\n+                }\n+            }", "originalCommit": "708bd73b90943349844d6cc89ff82d5bb14b9879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjg4ODc1Nw==", "url": "https://github.com/apache/cloudstack/pull/4534#discussion_r702888757", "bodyText": "@shwstppr\nmoved the hypervisor type check.\nI have considered the order of checks. in my opinion, the checks of vm volumes have more db queries than listAllUpAndEnabledHosts so I put the check prior to volume pool check.", "author": "weizhouapache", "createdAt": "2021-09-06T13:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjgwOTAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "13086b1b9f16224aae1a7da003837f2b0b8eeecf", "chunk": "diff --git a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\nindex 5ecd132cbe..2b4e233487 100755\n--- a/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n+++ b/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n\n@@ -1370,9 +1370,13 @@ public class ResourceManagerImpl extends ManagerBase implements ResourceManager,\n                 return false;\n             }\n             s_logger.info(\"Found hosts in the zone for vm migration: \" + hosts);\n+            if (HypervisorType.VMware.equals(host.getHypervisorType())) {\n+                s_logger.debug(\"Skipping pool check of volumes on VMware environment because across-cluster vm migration is supported by vMotion\");\n+                return true;\n+            }\n             // Don't migrate vm if it has volumes on cluster-wide pool\n             for (final VMInstanceVO vm : vms) {\n-                if (! HypervisorType.VMware.equals(host.getHypervisorType()) && _vmMgr.checkIfVmHasClusterWideVolumes(vm.getId())) {\n+                if (_vmMgr.checkIfVmHasClusterWideVolumes(vm.getId())) {\n                     s_logger.warn(String.format(\"VM %s cannot be migrated across cluster as it has volumes on cluster-wide pool\", vm));\n                     return false;\n                 }\n"}}, {"oid": "13086b1b9f16224aae1a7da003837f2b0b8eeecf", "url": "https://github.com/apache/cloudstack/commit/13086b1b9f16224aae1a7da003837f2b0b8eeecf", "message": "fix #4534: code optimization", "committedDate": "2021-09-06T13:00:58Z", "type": "commit"}]}