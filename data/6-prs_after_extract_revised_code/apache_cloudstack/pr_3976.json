{"pr_number": 3976, "pr_title": "Enable sending hypervior host name via metadata - VR and Config Drive", "pr_createdAt": "2020-03-17T07:37:24Z", "pr_url": "https://github.com/apache/cloudstack/pull/3976", "timeline": [{"oid": "04b6bee46ced5a93212adc8d29fed3b5a57b14c8", "url": "https://github.com/apache/cloudstack/commit/04b6bee46ced5a93212adc8d29fed3b5a57b14c8", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-17T08:34:18Z", "type": "forcePushed"}, {"oid": "f4c218ea08043beb519141740313f187c964c1e7", "url": "https://github.com/apache/cloudstack/commit/f4c218ea08043beb519141740313f187c964c1e7", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-17T08:58:36Z", "type": "forcePushed"}, {"oid": "af40d471388bb967c855ed45d45eb12dd6b340d5", "url": "https://github.com/apache/cloudstack/commit/af40d471388bb967c855ed45d45eb12dd6b340d5", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-17T17:14:46Z", "type": "forcePushed"}, {"oid": "e333053f82b81109f0d8fee69fb453d092a9e936", "url": "https://github.com/apache/cloudstack/commit/e333053f82b81109f0d8fee69fb453d092a9e936", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-17T18:44:10Z", "type": "forcePushed"}, {"oid": "2d11a073fdd66e2c1d7dd4e9d9661b6f4875cc5b", "url": "https://github.com/apache/cloudstack/commit/2d11a073fdd66e2c1d7dd4e9d9661b6f4875cc5b", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-19T08:37:13Z", "type": "forcePushed"}, {"oid": "767a8d01c37169c4029ce4e7701aa655a5829ab4", "url": "https://github.com/apache/cloudstack/commit/767a8d01c37169c4029ce4e7701aa655a5829ab4", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-19T09:07:54Z", "type": "forcePushed"}, {"oid": "8cd446d7c281263e3b80ab82f66c94b4eab53ea9", "url": "https://github.com/apache/cloudstack/commit/8cd446d7c281263e3b80ab82f66c94b4eab53ea9", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-19T10:21:14Z", "type": "forcePushed"}, {"oid": "e98ff37001662738c82b18c08f43a2f30cd2a5ab", "url": "https://github.com/apache/cloudstack/commit/e98ff37001662738c82b18c08f43a2f30cd2a5ab", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-19T13:51:06Z", "type": "forcePushed"}, {"oid": "2af957a46b095b8bb4a5bcc5471acb2a0b2887b9", "url": "https://github.com/apache/cloudstack/commit/2af957a46b095b8bb4a5bcc5471acb2a0b2887b9", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-20T06:32:48Z", "type": "forcePushed"}, {"oid": "1262fa26d67261922b591fcc7021c114aa71f66b", "url": "https://github.com/apache/cloudstack/commit/1262fa26d67261922b591fcc7021c114aa71f66b", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-23T07:16:59Z", "type": "commit"}, {"oid": "1262fa26d67261922b591fcc7021c114aa71f66b", "url": "https://github.com/apache/cloudstack/commit/1262fa26d67261922b591fcc7021c114aa71f66b", "message": "Enable sending hypervior host name via metadata", "committedDate": "2020-03-23T07:16:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNTQ2Ng==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r396505466", "bodyText": "Minor comment: will you consider removing 'account' from the config name?", "author": "nvazquez", "createdAt": "2020-03-23T14:46:35Z", "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname.account\",", "originalCommit": "1262fa26d67261922b591fcc7021c114aa71f66b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "760f9afb07c2e28e3b4c973af82dddb0660ab9be", "chunk": "diff --git a/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java b/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\nindex 19f7d559f3..e87aaa13e4 100644\n--- a/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\n+++ b/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\n\n@@ -61,7 +61,7 @@ public interface VirtualMachineManager extends Manager {\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n-    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname.account\",\n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n             \"false\", \"If set to true, it allows the hypervisor host name on which the VM is spawned on to be exposed to the VM\", true, ConfigKey.Scope.Account);\n \n     ConfigKey<Boolean> AllowExposeHypervisorHostname = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n"}}, {"oid": "74205ae7330dcbad19c760d0f7e86ef4d3f3926a", "url": "https://github.com/apache/cloudstack/commit/74205ae7330dcbad19c760d0f7e86ef4d3f3926a", "message": "Merge branch 'FR44_master' of github.com:shapeblue/cloudstack into FR44_master", "committedDate": "2020-03-24T13:26:31Z", "type": "commit"}, {"oid": "760f9afb07c2e28e3b4c973af82dddb0660ab9be", "url": "https://github.com/apache/cloudstack/commit/760f9afb07c2e28e3b4c973af82dddb0660ab9be", "message": "modify global setting + handle attachment of iso for vmware", "committedDate": "2020-03-24T14:54:13Z", "type": "commit"}, {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "url": "https://github.com/apache/cloudstack/commit/6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "message": "Reverted ISO attachment for VMware", "committedDate": "2020-03-26T07:14:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5ODQ5Ng==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399198496", "bodyText": "\ud83d\udc4d", "author": "DaanHoogland", "createdAt": "2020-03-27T11:26:35Z", "path": "core/src/main/java/com/cloud/agent/api/routing/VmDataCommand.java", "diffHunk": "@@ -72,5 +72,4 @@ public String getVmIpAddress() {\n     public void addVmData(String folder, String file, String contents) {\n         vmData.add(new String[] {folder, file, contents});\n     }\n-", "originalCommit": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6833d8b1d0f91c78c509dccd063788c66e8b5dcc", "chunk": "diff --git a/core/src/main/java/com/cloud/agent/api/routing/VmDataCommand.java b/core/src/main/java/com/cloud/agent/api/routing/VmDataCommand.java\nindex dfcdcfd879..c74c7cf7d8 100644\n--- a/core/src/main/java/com/cloud/agent/api/routing/VmDataCommand.java\n+++ b/core/src/main/java/com/cloud/agent/api/routing/VmDataCommand.java\n\n@@ -72,4 +72,5 @@ public class VmDataCommand extends NetworkElementCommand {\n     public void addVmData(String folder, String file, String contents) {\n         vmData.add(new String[] {folder, file, contents});\n     }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTI5MQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399199291", "bodyText": "spello : var name ending in AccoutLevel, missing an 'n'", "author": "DaanHoogland", "createdAt": "2020-03-27T11:28:21Z", "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",", "originalCommit": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1NTk5Mg==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399255992", "bodyText": "also, I know this was countered before, but I woud like to see account in the name of this setting. i.e. \"account.allow.expose.host.hostname\" and \"general.allow.expose.host.hostname\"", "author": "DaanHoogland", "createdAt": "2020-03-27T13:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "chunk": "diff --git a/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java b/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\nindex e87aaa13e4..6b866cf55c 100644\n--- a/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\n+++ b/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\n\n@@ -61,7 +61,7 @@ public interface VirtualMachineManager extends Manager {\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n-    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccountLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n             \"false\", \"If set to true, it allows the hypervisor host name on which the VM is spawned on to be exposed to the VM\", true, ConfigKey.Scope.Account);\n \n     ConfigKey<Boolean> AllowExposeHypervisorHostname = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n"}}, {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "url": "https://github.com/apache/cloudstack/commit/c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "message": "Fixed typo in variable name", "committedDate": "2020-03-27T13:17:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTkxOQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399199919", "bodyText": "Two config keys at different scopes, with the same name. I will want to see tests for that (unit and integration)\nIt might work but is not by design and we need to protect this or signal if it fails after any kind of refactor.", "author": "DaanHoogland", "createdAt": "2020-03-27T11:29:35Z", "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n+            \"false\", \"If set to true, it allows the hypervisor host name on which the VM is spawned on to be exposed to the VM\", true, ConfigKey.Scope.Account);\n+\n+    ConfigKey<Boolean> AllowExposeHypervisorHostname = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",", "originalCommit": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NDEzNg==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401144136", "bodyText": "This is why I asked to remove the 'account' name from the configuration. It was only one configuration with scope = 'Account' so it could be overridden per account, and if not, the global value is used", "author": "nvazquez", "createdAt": "2020-03-31T18:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NjEzMQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401146131", "bodyText": "Ignore my comment, went through the requirements and both are needed", "author": "nvazquez", "createdAt": "2020-03-31T19:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "chunk": "diff --git a/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java b/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\nindex e87aaa13e4..6b866cf55c 100644\n--- a/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\n+++ b/engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java\n\n@@ -61,7 +61,7 @@ public interface VirtualMachineManager extends Manager {\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n-    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccountLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n             \"false\", \"If set to true, it allows the hypervisor host name on which the VM is spawned on to be exposed to the VM\", true, ConfigKey.Scope.Account);\n \n     ConfigKey<Boolean> AllowExposeHypervisorHostname = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1ODkyMg==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399258922", "bodyText": "it looks like both must be true so the account level cannot be used to override the global setting. Is that intentional? (this is both a functional as well as a technical question)", "author": "DaanHoogland", "createdAt": "2020-03-27T13:21:52Z", "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -2802,9 +2802,10 @@ private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHo\n                 if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                     final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                     boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-\n+                    final Account caller = CallContext.current().getCallingAccount();\n+                    String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccoutLevel.valueIn(caller.getId())) ? destination.getHost().getName() : null;", "originalCommit": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MzQzMw==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399343433", "bodyText": "Yes @DaanHoogland , both need to be true (i.e., the Global value and the account scope level) for it to show the hypervisor hostname", "author": "Pearl1594", "createdAt": "2020-03-27T15:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1ODkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java b/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\nindex 6c871154eb..460512a4f1 100755\n--- a/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\n+++ b/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\n\n@@ -2802,10 +2802,8 @@ public class VirtualMachineManagerImpl extends ManagerBase implements VirtualMac\n                 if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                     final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                     boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-                    final Account caller = CallContext.current().getCallingAccount();\n-                    String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccoutLevel.valueIn(caller.getId())) ? destination.getHost().getName() : null;\n                     vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n-                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n+                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, VirtualMachineManager.getHypervisorHostname(destination.getHost().getName()));\n                     String vmName = vm.getInstanceName();\n                     String configDriveIsoRootFolder = \"/tmp\";\n                     String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NzI1OQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399267259", "bodyText": "in view of what this method does, the name \"addNewDisk\" seems completely wrong. Why is it named like this?", "author": "DaanHoogland", "createdAt": "2020-03-27T13:34:10Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1610,6 +1612,26 @@ public void finalizeUpdateInSequence(Network network, boolean success) {\n         }\n     }\n \n+    @Override\n+    public void addNewDisk(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {", "originalCommit": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NDMzNg==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399344336", "bodyText": "I'll change the name of this function - meant for mainly configDrive , but it's part of UserDataServiceProvider - will make it more meaningful.", "author": "Pearl1594", "createdAt": "2020-03-27T15:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NzI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex af177a279f..c27faf7a9e 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -1625,7 +1625,7 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n                         && element instanceof UserDataServiceProvider &&\n                         (element instanceof ConfigDriveNetworkElement || element instanceof VirtualRouterElement)) {\n                     final UserDataServiceProvider sp = (UserDataServiceProvider) element;\n-                    if (!sp.addNewDisk(profile, network, vm, dest)) {\n+                    if (!sp.saveHypervisorHostname(profile, network, vm, dest)) {\n                         throw new CloudRuntimeException(\"Failed to create New Iso Disk\");\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3MjQxOA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399272418", "bodyText": "please add javadoc. the purpose of this method is not obvious from the name, parameters or return type.", "author": "DaanHoogland", "createdAt": "2020-03-27T13:42:02Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "diffHunk": "@@ -294,6 +294,8 @@ void implementNetworkElementsAndResources(DeployDestination dest, ReservationCon\n \n     void finalizeUpdateInSequence(Network network, boolean success);\n \n+    void addNewDisk(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;", "originalCommit": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "699661d73e3df09a6b6a53fef04682dc1678933a", "chunk": "diff --git a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\nindex 46da3b7f14..825035ad03 100644\n--- a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\n+++ b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\n\n@@ -294,7 +294,7 @@ public interface NetworkOrchestrationService {\n \n     void finalizeUpdateInSequence(Network network, boolean success);\n \n-    void addNewDisk(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;\n+    void addHypervisorHostname(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;\n \n     List<NetworkGuru> getNetworkGurus();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3NjExOQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399276119", "bodyText": "so if we have an element that fits, do we still iterate over the rest, or should we break on the outer if? which makes me think this method has a high complexity can you disect it for readability, please?", "author": "DaanHoogland", "createdAt": "2020-03-27T13:47:48Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1610,6 +1612,26 @@ public void finalizeUpdateInSequence(Network network, boolean success) {\n         }\n     }\n \n+    @Override\n+    public void addNewDisk(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {\n+        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n+        for (final NicVO nic : nics) {\n+            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n+            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n+            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate, _networkModel.isSecurityGroupSupportedInNetwork(network),\n+                    _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n+            for (final NetworkElement element : networkElements) {\n+                if (_networkModel.areServicesSupportedInNetwork(network.getId(), Service.UserData)\n+                        && element instanceof UserDataServiceProvider &&\n+                        (element instanceof ConfigDriveNetworkElement || element instanceof VirtualRouterElement)) {\n+                    final UserDataServiceProvider sp = (UserDataServiceProvider) element;\n+                    if (!sp.addNewDisk(profile, network, vm, dest)) {\n+                        throw new CloudRuntimeException(\"Failed to create New Iso Disk\");\n+                    }\n+                }\n+            }", "originalCommit": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex af177a279f..c27faf7a9e 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -1625,7 +1625,7 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n                         && element instanceof UserDataServiceProvider &&\n                         (element instanceof ConfigDriveNetworkElement || element instanceof VirtualRouterElement)) {\n                     final UserDataServiceProvider sp = (UserDataServiceProvider) element;\n-                    if (!sp.addNewDisk(profile, network, vm, dest)) {\n+                    if (!sp.saveHypervisorHostname(profile, network, vm, dest)) {\n                         throw new CloudRuntimeException(\"Failed to create New Iso Disk\");\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3NjcyOA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399276728", "bodyText": "space spilled over in the file ;)", "author": "DaanHoogland", "createdAt": "2020-03-27T13:48:37Z", "path": "engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n+    // Licensed to the Apache Software Foundation (ASF) under one", "originalCommit": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5fa897d3e3e1f9a132636d13aee3135d8513f02", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java b/engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java\nindex 75cb4af9d9..c07582f696 100644\n--- a/engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java\n+++ b/engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java\n\n@@ -1,4 +1,4 @@\n-    // Licensed to the Apache Software Foundation (ASF) under one\n+// Licensed to the Apache Software Foundation (ASF) under one\n // or more contributor license agreements.  See the NOTICE file\n // distributed with this work for additional information\n // regarding copyright ownership.  The ASF licenses this file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3OTY4NA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399279684", "bodyText": "this method is already 200 lines, please add your logic in a new method/class or module.", "author": "DaanHoogland", "createdAt": "2020-03-27T13:53:03Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -115,6 +118,30 @@ public Answer execute(final MigrateCommand command, final LibvirtComputingResour\n             conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n             ifaces = libvirtComputingResource.getInterfaces(conn, vmName);\n             disks = libvirtComputingResource.getDisks(conn, vmName);\n+\n+            String oldIsoVolumePath = null;\n+            for (DiskDef disk : disks) {\n+                if (disk.getDiskPath() != null && disk.getDiskPath().contains(vmName)) {\n+                    oldIsoVolumePath = disk.getDiskPath();\n+                    break;\n+                }\n+            }\n+\n+            VirtualMachineTO to = command.getVirtualMachine();\n+\n+            DiskTO newDisk = null;\n+            for (DiskTO disk : to.getDisks()) {\n+                if (disk.getPath() != null && disk.getPath().contains(\"configdrive\")) {\n+                    newDisk = disk;\n+                    break;\n+                }\n+            }\n+\n+            String newIsoVolumePath = null;\n+            if (newDisk != null) {\n+                 newIsoVolumePath = libvirtComputingResource.getVolumePath(conn, newDisk);\n+            }\n+", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -119,29 +118,8 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n             ifaces = libvirtComputingResource.getInterfaces(conn, vmName);\n             disks = libvirtComputingResource.getDisks(conn, vmName);\n \n-            String oldIsoVolumePath = null;\n-            for (DiskDef disk : disks) {\n-                if (disk.getDiskPath() != null && disk.getDiskPath().contains(vmName)) {\n-                    oldIsoVolumePath = disk.getDiskPath();\n-                    break;\n-                }\n-            }\n-\n             VirtualMachineTO to = command.getVirtualMachine();\n \n-            DiskTO newDisk = null;\n-            for (DiskTO disk : to.getDisks()) {\n-                if (disk.getPath() != null && disk.getPath().contains(\"configdrive\")) {\n-                    newDisk = disk;\n-                    break;\n-                }\n-            }\n-\n-            String newIsoVolumePath = null;\n-            if (newDisk != null) {\n-                 newIsoVolumePath = libvirtComputingResource.getVolumePath(conn, newDisk);\n-            }\n-\n             dm = conn.domainLookupByName(vmName);\n             /*\n                 We replace the private IP address with the address of the destination host.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4NDY4Nw==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399284687", "bodyText": "this means the VM could not have another iso mounted?", "author": "DaanHoogland", "createdAt": "2020-03-27T14:00:18Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -115,6 +118,30 @@ public Answer execute(final MigrateCommand command, final LibvirtComputingResour\n             conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n             ifaces = libvirtComputingResource.getInterfaces(conn, vmName);\n             disks = libvirtComputingResource.getDisks(conn, vmName);\n+\n+            String oldIsoVolumePath = null;\n+            for (DiskDef disk : disks) {\n+                if (disk.getDiskPath() != null && disk.getDiskPath().contains(vmName)) {\n+                    oldIsoVolumePath = disk.getDiskPath();\n+                    break;\n+                }", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1OTIwNQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399359205", "bodyText": "@DaanHoogland This actually tries to address an issue that exists which is that when there is more than 1 datastore to chose from and the disk gets added to one that isn't the same as before, it'll change the following mount point to the new value:", "author": "Pearl1594", "createdAt": "2020-03-27T15:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4NDY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -119,29 +118,8 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n             ifaces = libvirtComputingResource.getInterfaces(conn, vmName);\n             disks = libvirtComputingResource.getDisks(conn, vmName);\n \n-            String oldIsoVolumePath = null;\n-            for (DiskDef disk : disks) {\n-                if (disk.getDiskPath() != null && disk.getDiskPath().contains(vmName)) {\n-                    oldIsoVolumePath = disk.getDiskPath();\n-                    break;\n-                }\n-            }\n-\n             VirtualMachineTO to = command.getVirtualMachine();\n \n-            DiskTO newDisk = null;\n-            for (DiskTO disk : to.getDisks()) {\n-                if (disk.getPath() != null && disk.getPath().contains(\"configdrive\")) {\n-                    newDisk = disk;\n-                    break;\n-                }\n-            }\n-\n-            String newIsoVolumePath = null;\n-            if (newDisk != null) {\n-                 newIsoVolumePath = libvirtComputingResource.getVolumePath(conn, newDisk);\n-            }\n-\n             dm = conn.domainLookupByName(vmName);\n             /*\n                 We replace the private IP address with the address of the destination host.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4ODQ0Nw==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399288447", "bodyText": "please extract, and if not to much trouble other bits as well.", "author": "DaanHoogland", "createdAt": "2020-03-27T14:05:51Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -141,6 +168,10 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n+            if (newIsoVolumePath != null && oldIsoVolumePath != newIsoVolumePath) {\n+                s_logger.debug(\"editing mount path\");\n+                xmlDesc = replaceDiskSourceFile(xmlDesc, newIsoVolumePath, vmName);\n+            }", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -168,8 +146,10 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n-            if (newIsoVolumePath != null && oldIsoVolumePath != newIsoVolumePath) {\n-                s_logger.debug(\"editing mount path\");\n+            String oldIsoVolumePath = getOldVolumePath(disks, vmName);\n+            String newIsoVolumePath = getNewVolumePathIfDatastoreHasChanged(libvirtComputingResource, conn, to);\n+            if (newIsoVolumePath != null && !newIsoVolumePath.equals(oldIsoVolumePath)) {\n+                s_logger.debug(\"Editing mount path\");\n                 xmlDesc = replaceDiskSourceFile(xmlDesc, newIsoVolumePath, vmName);\n             }\n             // delete the metadata of vm snapshots before migration\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5OTY4OQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399299689", "bodyText": "this is a c&p of a bad pattern for two reasons:\n\nthe message if available should be explaining that it is a uri syntax issue.\nas in most of the other catch clauses this can be replaced by something like String.format(\"%s: %s\", e.getClass().getSimpleName(), e.getMessage()). And we should then unify the catch clauses.\n\nI suggest replacing with (something like):\n        } catch (final TimeoutException e) {\n            s_logger.debug(\"Timed out while migrating domain: \" + e.getMessage());\n            result = e.getMessage();\n        } catch (final IOException\n                | ParserConfigurationException\n                | SAXException\n                | TransformerException\n                | URISyntaxException e) {\n            s_logger.debug(String.format(\"%s: %s\", e.getClass().getSimpleName(), e.getMessage()));\n            result = \"Exception during migrate, see hypervisor for details; \" + e.getMessage();\n        } finally {", "author": "DaanHoogland", "createdAt": "2020-03-27T14:22:05Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -250,6 +281,9 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n         } catch (final TransformerException e) {\n             s_logger.debug(\"TransformerException: \" + e.getMessage());\n             result = e.getMessage();\n+        } catch (URISyntaxException e) {\n+            s_logger.debug(\"UriSyntaxException: \"+ e.getMessage());\n+            result = e.getMessage();", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -257,33 +237,16 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n             if (result.startsWith(\"unable to connect to server\") && result.endsWith(\"refused\")) {\n                 result = String.format(\"Migration was refused connection to destination: %s. Please check libvirt configuration compatibility and firewall rules on the source and destination hosts.\", destinationUri);\n             }\n-        } catch (final InterruptedException e) {\n-            s_logger.debug(\"Interrupted while migrating domain: \" + e.getMessage());\n-            result = e.getMessage();\n-        } catch (final ExecutionException e) {\n-            s_logger.debug(\"Failed to execute while migrating domain: \" + e.getMessage());\n-            result = e.getMessage();\n-        } catch (final TimeoutException e) {\n-            s_logger.debug(\"Timed out while migrating domain: \" + e.getMessage());\n-            result = e.getMessage();\n-        } catch (final IOException e) {\n-            s_logger.debug(\"IOException: \" + e.getMessage());\n-            result = e.getMessage();\n-        } catch (final ParserConfigurationException e) {\n-            s_logger.debug(\"ParserConfigurationException: \" + e.getMessage());\n-            result = e.getMessage();\n-        } catch (final SAXException e) {\n-            s_logger.debug(\"SAXException: \" + e.getMessage());\n-            result = e.getMessage();\n-        } catch (final TransformerConfigurationException e) {\n-            s_logger.debug(\"TransformerConfigurationException: \" + e.getMessage());\n-            result = e.getMessage();\n-        } catch (final TransformerException e) {\n-            s_logger.debug(\"TransformerException: \" + e.getMessage());\n-            result = e.getMessage();\n-        } catch (URISyntaxException e) {\n-            s_logger.debug(\"UriSyntaxException: \"+ e.getMessage());\n-            result = e.getMessage();\n+        } catch (final InterruptedException\n+            | ExecutionException\n+            | TimeoutException\n+            | IOException\n+            | ParserConfigurationException\n+            | SAXException\n+            | TransformerException\n+            | URISyntaxException e) {\n+            s_logger.debug(String.format(\"%s : %s\", e.getClass().getSimpleName(), e.getMessage()));\n+            result = \"Exception during migrate: \" + e.getMessage();\n         } finally {\n             try {\n                 if (dm != null && result != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDk4NA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399300984", "bodyText": "for - if - for - if - for - if - if, this should definitely be dissected and simplified.", "author": "DaanHoogland", "createdAt": "2020-03-27T14:23:55Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                        Node diskNode = deviceChildNode;\n+                        String sourceText = getSourceText(diskNode);\n+                        NodeList diskChildNodes = diskNode.getChildNodes();\n+                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+                            Node diskChildNode = diskChildNodes.item(z);\n+                            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                                Node sourceNode = diskChildNode;\n+                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                                    diskNode.removeChild(diskChildNode);\n+                                    Element newChildSourceNode = doc.createElement(\"source\");\n+                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                                    diskNode.appendChild(newChildSourceNode);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return getXml(doc);\n+    }", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -624,31 +614,44 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n \n             if (\"devices\".equals(domainChildNode.getNodeName())) {\n                 NodeList devicesChildNodes = domainChildNode.getChildNodes();\n-\n-                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n-                    Node deviceChildNode = devicesChildNodes.item(x);\n-                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n-                        Node diskNode = deviceChildNode;\n-                        String sourceText = getSourceText(diskNode);\n-                        NodeList diskChildNodes = diskNode.getChildNodes();\n-                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n-                            Node diskChildNode = diskChildNodes.item(z);\n-                            if (\"source\".equals(diskChildNode.getNodeName())) {\n-                                Node sourceNode = diskChildNode;\n-                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n-                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n-                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n-                                    diskNode.removeChild(diskChildNode);\n-                                    Element newChildSourceNode = doc.createElement(\"source\");\n-                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n-                                    diskNode.appendChild(newChildSourceNode);\n-                                }\n-                            }\n-                        }\n-                    }\n+                if (findDiskNode(doc, devicesChildNodes, vmName, isoPath)) {\n+                    break;\n                 }\n             }\n         }\n         return getXml(doc);\n     }\n+\n+    private boolean findDiskNode(Document doc, NodeList devicesChildNodes, String vmName, String isoPath) {\n+        for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+            Node deviceChildNode = devicesChildNodes.item(x);\n+            if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                Node diskNode = deviceChildNode;\n+                if (findSourceNode(doc, diskNode, vmName, isoPath)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean findSourceNode(Document doc, Node diskNode, String vmName, String isoPath) {\n+        NodeList diskChildNodes = diskNode.getChildNodes();\n+        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+            Node diskChildNode = diskChildNodes.item(z);\n+            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                Node sourceNode = diskChildNode;\n+                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                    diskNode.removeChild(diskChildNode);\n+                    Element newChildSourceNode = doc.createElement(\"source\");\n+                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                    diskNode.appendChild(newChildSourceNode);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMzczMA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399303730", "bodyText": "and finally for (Node diskChildNode : diskChildNodes)", "author": "DaanHoogland", "createdAt": "2020-03-27T14:27:36Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                        Node diskNode = deviceChildNode;\n+                        String sourceText = getSourceText(diskNode);\n+                        NodeList diskChildNodes = diskNode.getChildNodes();\n+                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+                            Node diskChildNode = diskChildNodes.item(z);", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -624,31 +614,44 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n \n             if (\"devices\".equals(domainChildNode.getNodeName())) {\n                 NodeList devicesChildNodes = domainChildNode.getChildNodes();\n-\n-                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n-                    Node deviceChildNode = devicesChildNodes.item(x);\n-                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n-                        Node diskNode = deviceChildNode;\n-                        String sourceText = getSourceText(diskNode);\n-                        NodeList diskChildNodes = diskNode.getChildNodes();\n-                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n-                            Node diskChildNode = diskChildNodes.item(z);\n-                            if (\"source\".equals(diskChildNode.getNodeName())) {\n-                                Node sourceNode = diskChildNode;\n-                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n-                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n-                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n-                                    diskNode.removeChild(diskChildNode);\n-                                    Element newChildSourceNode = doc.createElement(\"source\");\n-                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n-                                    diskNode.appendChild(newChildSourceNode);\n-                                }\n-                            }\n-                        }\n-                    }\n+                if (findDiskNode(doc, devicesChildNodes, vmName, isoPath)) {\n+                    break;\n                 }\n             }\n         }\n         return getXml(doc);\n     }\n+\n+    private boolean findDiskNode(Document doc, NodeList devicesChildNodes, String vmName, String isoPath) {\n+        for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+            Node deviceChildNode = devicesChildNodes.item(x);\n+            if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                Node diskNode = deviceChildNode;\n+                if (findSourceNode(doc, diskNode, vmName, isoPath)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean findSourceNode(Document doc, Node diskNode, String vmName, String isoPath) {\n+        NodeList diskChildNodes = diskNode.getChildNodes();\n+        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+            Node diskChildNode = diskChildNodes.item(z);\n+            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                Node sourceNode = diskChildNode;\n+                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                    diskNode.removeChild(diskChildNode);\n+                    Element newChildSourceNode = doc.createElement(\"source\");\n+                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                    diskNode.appendChild(newChildSourceNode);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwNTAyMQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399305021", "bodyText": "extract from here? by name of process- or search- or replaceChildDevices()?", "author": "DaanHoogland", "createdAt": "2020-03-27T14:29:10Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -624,31 +614,44 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n \n             if (\"devices\".equals(domainChildNode.getNodeName())) {\n                 NodeList devicesChildNodes = domainChildNode.getChildNodes();\n-\n-                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n-                    Node deviceChildNode = devicesChildNodes.item(x);\n-                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n-                        Node diskNode = deviceChildNode;\n-                        String sourceText = getSourceText(diskNode);\n-                        NodeList diskChildNodes = diskNode.getChildNodes();\n-                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n-                            Node diskChildNode = diskChildNodes.item(z);\n-                            if (\"source\".equals(diskChildNode.getNodeName())) {\n-                                Node sourceNode = diskChildNode;\n-                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n-                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n-                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n-                                    diskNode.removeChild(diskChildNode);\n-                                    Element newChildSourceNode = doc.createElement(\"source\");\n-                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n-                                    diskNode.appendChild(newChildSourceNode);\n-                                }\n-                            }\n-                        }\n-                    }\n+                if (findDiskNode(doc, devicesChildNodes, vmName, isoPath)) {\n+                    break;\n                 }\n             }\n         }\n         return getXml(doc);\n     }\n+\n+    private boolean findDiskNode(Document doc, NodeList devicesChildNodes, String vmName, String isoPath) {\n+        for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+            Node deviceChildNode = devicesChildNodes.item(x);\n+            if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                Node diskNode = deviceChildNode;\n+                if (findSourceNode(doc, diskNode, vmName, isoPath)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean findSourceNode(Document doc, Node diskNode, String vmName, String isoPath) {\n+        NodeList diskChildNodes = diskNode.getChildNodes();\n+        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+            Node diskChildNode = diskChildNodes.item(z);\n+            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                Node sourceNode = diskChildNode;\n+                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                    diskNode.removeChild(diskChildNode);\n+                    Element newChildSourceNode = doc.createElement(\"source\");\n+                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                    diskNode.appendChild(newChildSourceNode);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwNjExOA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399306118", "bodyText": "extract here again (as process, search, replaceChildDisks())?", "author": "DaanHoogland", "createdAt": "2020-03-27T14:30:35Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -624,31 +614,44 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n \n             if (\"devices\".equals(domainChildNode.getNodeName())) {\n                 NodeList devicesChildNodes = domainChildNode.getChildNodes();\n-\n-                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n-                    Node deviceChildNode = devicesChildNodes.item(x);\n-                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n-                        Node diskNode = deviceChildNode;\n-                        String sourceText = getSourceText(diskNode);\n-                        NodeList diskChildNodes = diskNode.getChildNodes();\n-                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n-                            Node diskChildNode = diskChildNodes.item(z);\n-                            if (\"source\".equals(diskChildNode.getNodeName())) {\n-                                Node sourceNode = diskChildNode;\n-                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n-                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n-                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n-                                    diskNode.removeChild(diskChildNode);\n-                                    Element newChildSourceNode = doc.createElement(\"source\");\n-                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n-                                    diskNode.appendChild(newChildSourceNode);\n-                                }\n-                            }\n-                        }\n-                    }\n+                if (findDiskNode(doc, devicesChildNodes, vmName, isoPath)) {\n+                    break;\n                 }\n             }\n         }\n         return getXml(doc);\n     }\n+\n+    private boolean findDiskNode(Document doc, NodeList devicesChildNodes, String vmName, String isoPath) {\n+        for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+            Node deviceChildNode = devicesChildNodes.item(x);\n+            if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                Node diskNode = deviceChildNode;\n+                if (findSourceNode(doc, diskNode, vmName, isoPath)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean findSourceNode(Document doc, Node diskNode, String vmName, String isoPath) {\n+        NodeList diskChildNodes = diskNode.getChildNodes();\n+        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+            Node diskChildNode = diskChildNodes.item(z);\n+            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                Node sourceNode = diskChildNode;\n+                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                    diskNode.removeChild(diskChildNode);\n+                    Element newChildSourceNode = doc.createElement(\"source\");\n+                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                    diskNode.appendChild(newChildSourceNode);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwODg5OA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399308898", "bodyText": "are we sure there will be only one? how about a VM with multiple disks/isos mounted? are we sure this contains() is selective enough?", "author": "DaanHoogland", "createdAt": "2020-03-27T14:34:29Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                        Node diskNode = deviceChildNode;\n+                        String sourceText = getSourceText(diskNode);\n+                        NodeList diskChildNodes = diskNode.getChildNodes();\n+                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+                            Node diskChildNode = diskChildNodes.item(z);\n+                            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                                Node sourceNode = diskChildNode;\n+                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -624,31 +614,44 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n \n             if (\"devices\".equals(domainChildNode.getNodeName())) {\n                 NodeList devicesChildNodes = domainChildNode.getChildNodes();\n-\n-                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n-                    Node deviceChildNode = devicesChildNodes.item(x);\n-                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n-                        Node diskNode = deviceChildNode;\n-                        String sourceText = getSourceText(diskNode);\n-                        NodeList diskChildNodes = diskNode.getChildNodes();\n-                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n-                            Node diskChildNode = diskChildNodes.item(z);\n-                            if (\"source\".equals(diskChildNode.getNodeName())) {\n-                                Node sourceNode = diskChildNode;\n-                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n-                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n-                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n-                                    diskNode.removeChild(diskChildNode);\n-                                    Element newChildSourceNode = doc.createElement(\"source\");\n-                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n-                                    diskNode.appendChild(newChildSourceNode);\n-                                }\n-                            }\n-                        }\n-                    }\n+                if (findDiskNode(doc, devicesChildNodes, vmName, isoPath)) {\n+                    break;\n                 }\n             }\n         }\n         return getXml(doc);\n     }\n+\n+    private boolean findDiskNode(Document doc, NodeList devicesChildNodes, String vmName, String isoPath) {\n+        for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+            Node deviceChildNode = devicesChildNodes.item(x);\n+            if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                Node diskNode = deviceChildNode;\n+                if (findSourceNode(doc, diskNode, vmName, isoPath)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean findSourceNode(Document doc, Node diskNode, String vmName, String isoPath) {\n+        NodeList diskChildNodes = diskNode.getChildNodes();\n+        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+            Node diskChildNode = diskChildNodes.item(z);\n+            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                Node sourceNode = diskChildNode;\n+                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                    diskNode.removeChild(diskChildNode);\n+                    Element newChildSourceNode = doc.createElement(\"source\");\n+                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                    diskNode.appendChild(newChildSourceNode);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwOTUxOA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399309518", "bodyText": "and how about when we are sure we have the right disk, do we just continue processing or should we escape somehow and not process the rest?", "author": "DaanHoogland", "createdAt": "2020-03-27T14:35:25Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                        Node diskNode = deviceChildNode;\n+                        String sourceText = getSourceText(diskNode);\n+                        NodeList diskChildNodes = diskNode.getChildNodes();\n+                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+                            Node diskChildNode = diskChildNodes.item(z);\n+                            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                                Node sourceNode = diskChildNode;\n+                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                                    diskNode.removeChild(diskChildNode);\n+                                    Element newChildSourceNode = doc.createElement(\"source\");\n+                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                                    diskNode.appendChild(newChildSourceNode);", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0cdaf7b59e..0524be7961 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -624,31 +614,44 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n \n             if (\"devices\".equals(domainChildNode.getNodeName())) {\n                 NodeList devicesChildNodes = domainChildNode.getChildNodes();\n-\n-                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n-                    Node deviceChildNode = devicesChildNodes.item(x);\n-                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n-                        Node diskNode = deviceChildNode;\n-                        String sourceText = getSourceText(diskNode);\n-                        NodeList diskChildNodes = diskNode.getChildNodes();\n-                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n-                            Node diskChildNode = diskChildNodes.item(z);\n-                            if (\"source\".equals(diskChildNode.getNodeName())) {\n-                                Node sourceNode = diskChildNode;\n-                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n-                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n-                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n-                                    diskNode.removeChild(diskChildNode);\n-                                    Element newChildSourceNode = doc.createElement(\"source\");\n-                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n-                                    diskNode.appendChild(newChildSourceNode);\n-                                }\n-                            }\n-                        }\n-                    }\n+                if (findDiskNode(doc, devicesChildNodes, vmName, isoPath)) {\n+                    break;\n                 }\n             }\n         }\n         return getXml(doc);\n     }\n+\n+    private boolean findDiskNode(Document doc, NodeList devicesChildNodes, String vmName, String isoPath) {\n+        for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+            Node deviceChildNode = devicesChildNodes.item(x);\n+            if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                Node diskNode = deviceChildNode;\n+                if (findSourceNode(doc, diskNode, vmName, isoPath)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean findSourceNode(Document doc, Node diskNode, String vmName, String isoPath) {\n+        NodeList diskChildNodes = diskNode.getChildNodes();\n+        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+            Node diskChildNode = diskChildNodes.item(z);\n+            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                Node sourceNode = diskChildNode;\n+                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                    diskNode.removeChild(diskChildNode);\n+                    Element newChildSourceNode = doc.createElement(\"source\");\n+                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                    diskNode.appendChild(newChildSourceNode);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMTUyMg==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399311522", "bodyText": "again, no override but a double condition. It also constitutes double code, this is a value that should be returned by the VirtualMachineManager and not be implemented in two places, obviously.", "author": "DaanHoogland", "createdAt": "2020-03-27T14:38:17Z", "path": "server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java", "diffHunk": "@@ -217,11 +220,12 @@ public boolean addPasswordAndUserdata(Network network, NicProfile nic, VirtualMa\n             }\n             String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(uservm.getServiceOfferingId()).getDisplayText();\n             String zoneName = _dcDao.findById(network.getDataCenterId()).getName();\n-\n+            final Account caller = CallContext.current().getCallingAccount();\n+            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java b/server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java\nindex ad23d082ed..3ed5fcc7d4 100644\n--- a/server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java\n+++ b/server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java\n\n@@ -220,8 +218,7 @@ public class CloudZonesNetworkElement extends AdapterBase implements NetworkElem\n             }\n             String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(uservm.getServiceOfferingId()).getDisplayText();\n             String zoneName = _dcDao.findById(network.getDataCenterId()).getName();\n-            final Account caller = CallContext.current().getCallingAccount();\n-            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;\n+            String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost().getName());\n             cmds.addCommand(\n                 \"vmdata\",\n                 generateVmDataCommand(nic.getIPv4Address(), userData, serviceOffering, zoneName, nic.getIPv4Address(), uservm.getHostName(), uservm.getInstanceName(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMzkxNA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399313914", "bodyText": "triple code ;)", "author": "DaanHoogland", "createdAt": "2020-03-27T14:41:28Z", "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -327,6 +355,30 @@ public void rollbackMigration(NicProfile nic, Network network, VirtualMachinePro\n     public void commitMigration(NicProfile nic, Network network, VirtualMachineProfile vm, ReservationContext src, ReservationContext dst) {\n     }\n \n+    private void recreateConfigDriveIso(NicProfile nic, Network network, VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {\n+        if (nic.isDefaultNic() && _networkModel.getUserDataUpdateProvider(network).getProvider().equals(Provider.ConfigDrive)) {\n+            DiskTO diskToUse = null;\n+            for (DiskTO disk : vm.getDisks()) {\n+                if (disk.getType() == Volume.Type.ISO && disk.getPath() != null && disk.getPath().contains(\"configdrive\")) {\n+                    diskToUse = disk;\n+                    break;\n+                }\n+            }\n+            final UserVmVO userVm = _userVmDao.findById(vm.getId());\n+            final Account caller = CallContext.current().getCallingAccount();\n+\n+            if (userVm != null) {\n+                final boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(userVm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n+                String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java b/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\nindex 9cd525ce95..2a74af2d2d 100644\n--- a/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\n+++ b/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\n\n@@ -365,16 +371,21 @@ public class ConfigDriveNetworkElement extends AdapterBase implements NetworkEle\n                 }\n             }\n             final UserVmVO userVm = _userVmDao.findById(vm.getId());\n-            final Account caller = CallContext.current().getCallingAccount();\n \n             if (userVm != null) {\n                 final boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(userVm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-                String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;\n                 List<String[]> vmData = _networkModel.generateVmData(userVm.getUserData(), _serviceOfferingDao.findById(userVm.getServiceOfferingId()).getName(), userVm.getDataCenterId(), userVm.getInstanceName(), vm.getHostName(), vm.getId(),\n-                        vm.getUuid(), nic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) vm.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n+                        vm.getUuid(), nic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) vm.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, VirtualMachineManager.getHypervisorHostname(dest.getHost().getName()));\n                 vm.setVmData(vmData);\n                 vm.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                 createConfigDriveIso(vm, dest, diskToUse);\n+                if (vm.getHypervisorType().equals(Hypervisor.HypervisorType.KVM)) {\n+                    if (!VirtualMachineManager.VmConfigDriveOnPrimaryPool.value()) {\n+                        detachAndAttachDiskForKvm(vm, dest, diskToUse);\n+                    }\n+                } else {\n+                    detachAndAttachDiskForOtherHypervisors(vm, dest, diskToUse);\n+                }\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNDc1OA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399314758", "bodyText": "seems like this statement could do with its own method for readability (will be optimised out by the compiler anyway).", "author": "DaanHoogland", "createdAt": "2020-03-27T14:42:35Z", "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -327,6 +355,30 @@ public void rollbackMigration(NicProfile nic, Network network, VirtualMachinePro\n     public void commitMigration(NicProfile nic, Network network, VirtualMachineProfile vm, ReservationContext src, ReservationContext dst) {\n     }\n \n+    private void recreateConfigDriveIso(NicProfile nic, Network network, VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {\n+        if (nic.isDefaultNic() && _networkModel.getUserDataUpdateProvider(network).getProvider().equals(Provider.ConfigDrive)) {\n+            DiskTO diskToUse = null;\n+            for (DiskTO disk : vm.getDisks()) {\n+                if (disk.getType() == Volume.Type.ISO && disk.getPath() != null && disk.getPath().contains(\"configdrive\")) {\n+                    diskToUse = disk;\n+                    break;\n+                }\n+            }\n+            final UserVmVO userVm = _userVmDao.findById(vm.getId());\n+            final Account caller = CallContext.current().getCallingAccount();\n+\n+            if (userVm != null) {\n+                final boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(userVm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java b/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\nindex 9cd525ce95..2a74af2d2d 100644\n--- a/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\n+++ b/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\n\n@@ -365,16 +371,21 @@ public class ConfigDriveNetworkElement extends AdapterBase implements NetworkEle\n                 }\n             }\n             final UserVmVO userVm = _userVmDao.findById(vm.getId());\n-            final Account caller = CallContext.current().getCallingAccount();\n \n             if (userVm != null) {\n                 final boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(userVm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-                String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;\n                 List<String[]> vmData = _networkModel.generateVmData(userVm.getUserData(), _serviceOfferingDao.findById(userVm.getServiceOfferingId()).getName(), userVm.getDataCenterId(), userVm.getInstanceName(), vm.getHostName(), vm.getId(),\n-                        vm.getUuid(), nic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) vm.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n+                        vm.getUuid(), nic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) vm.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, VirtualMachineManager.getHypervisorHostname(dest.getHost().getName()));\n                 vm.setVmData(vmData);\n                 vm.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                 createConfigDriveIso(vm, dest, diskToUse);\n+                if (vm.getHypervisorType().equals(Hypervisor.HypervisorType.KVM)) {\n+                    if (!VirtualMachineManager.VmConfigDriveOnPrimaryPool.value()) {\n+                        detachAndAttachDiskForKvm(vm, dest, diskToUse);\n+                    }\n+                } else {\n+                    detachAndAttachDiskForOtherHypervisors(vm, dest, diskToUse);\n+                }\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMDEwNA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399320104", "bodyText": "can you put in getOrDecideOnWhichDataStoreToUseOrSomeNameLikeThat()?", "author": "DaanHoogland", "createdAt": "2020-03-27T14:49:42Z", "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -424,8 +476,25 @@ private Long findAgentId(VirtualMachineProfile profile, DeployDestination dest,\n         return agentId;\n     }\n \n-    private boolean createConfigDriveIso(VirtualMachineProfile profile, DeployDestination dest) throws ResourceUnavailableException {\n-        final DataStore dataStore = findDataStore(profile, dest);\n+    private boolean createConfigDriveIso(VirtualMachineProfile profile, DeployDestination dest, DiskTO disk) throws ResourceUnavailableException {\n+        DataStore dataStore = null;\n+        if (disk != null) {\n+            String dId = disk.getData().getDataStore().getUuid();\n+            if (VirtualMachineManager.VmConfigDriveOnPrimaryPool.value()) {\n+                dataStore = _dataStoreMgr.getDataStore(dId, DataStoreRole.Primary);\n+            } else {\n+                List<DataStore> dataStores = _dataStoreMgr.listImageStores();\n+                String url = disk.getData().getDataStore().getUrl();\n+                for(DataStore ds : dataStores) {\n+                    if (url.equals(ds.getUri()) && DataStoreRole.Image.equals(ds.getRole())) {\n+                        dataStore = ds;\n+                        break;\n+                    }\n+                }\n+            }\n+        } else {\n+            dataStore = findDataStore(profile, dest);\n+        }", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java b/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\nindex 9cd525ce95..2a74af2d2d 100644\n--- a/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\n+++ b/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\n\n@@ -477,24 +525,8 @@ public class ConfigDriveNetworkElement extends AdapterBase implements NetworkEle\n     }\n \n     private boolean createConfigDriveIso(VirtualMachineProfile profile, DeployDestination dest, DiskTO disk) throws ResourceUnavailableException {\n-        DataStore dataStore = null;\n-        if (disk != null) {\n-            String dId = disk.getData().getDataStore().getUuid();\n-            if (VirtualMachineManager.VmConfigDriveOnPrimaryPool.value()) {\n-                dataStore = _dataStoreMgr.getDataStore(dId, DataStoreRole.Primary);\n-            } else {\n-                List<DataStore> dataStores = _dataStoreMgr.listImageStores();\n-                String url = disk.getData().getDataStore().getUrl();\n-                for(DataStore ds : dataStores) {\n-                    if (url.equals(ds.getUri()) && DataStoreRole.Image.equals(ds.getRole())) {\n-                        dataStore = ds;\n-                        break;\n-                    }\n-                }\n-            }\n-        } else {\n-            dataStore = findDataStore(profile, dest);\n-        }\n+        DataStore dataStore = getDatastoreForConfigDriveIso(disk, profile, dest);\n+\n         final Long agentId = findAgentId(profile, dest, dataStore);\n         if (agentId == null || dataStore == null) {\n             throw new ResourceUnavailableException(\"Config drive iso creation failed, agent or datastore not available\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMDYxNw==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399320617", "bodyText": "quadruple code...", "author": "DaanHoogland", "createdAt": "2020-03-27T14:50:24Z", "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -514,9 +584,11 @@ private boolean configureConfigDriveData(final VirtualMachineProfile profile, fi\n             final String sshPublicKey = getSshKey(profile);\n             final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n             boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-\n+            String hostname = _hostDao.findById(vm.getHostId()).getName();\n+            final Account caller = CallContext.current().getCallingAccount();\n+            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? hostname : null;", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMTE5OQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399321199", "bodyText": "maybe the hostname retrieval and caller account should be added inside the call as well.", "author": "DaanHoogland", "createdAt": "2020-03-27T14:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMDYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java b/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\nindex 9cd525ce95..2a74af2d2d 100644\n--- a/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\n+++ b/server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java\n\n@@ -585,8 +639,7 @@ public class ConfigDriveNetworkElement extends AdapterBase implements NetworkEle\n             final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n             boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n             String hostname = _hostDao.findById(vm.getHostId()).getName();\n-            final Account caller = CallContext.current().getCallingAccount();\n-            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? hostname : null;\n+            String destHostname = VirtualMachineManager.getHypervisorHostname(hostname);\n             final List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                     vm.getUuid(), nic.getIPv4Address(), sshPublicKey, (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n             profile.setVmData(vmData);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNjI3MA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399326270", "bodyText": "this one is certainly not adding any disk. we need to change that name.", "author": "DaanHoogland", "createdAt": "2020-03-27T14:58:03Z", "path": "server/src/main/java/com/cloud/network/element/VirtualRouterElement.java", "diffHunk": "@@ -765,6 +772,33 @@ public boolean saveSSHKey(final Network network, final NicProfile nic, final Vir\n         return result;\n     }\n \n+    @Override\n+    public boolean addNewDisk(NicProfile nicProfile, Network network, VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/element/VirtualRouterElement.java b/server/src/main/java/com/cloud/network/element/VirtualRouterElement.java\nindex aeb4930c7a..dec2893e67 100644\n--- a/server/src/main/java/com/cloud/network/element/VirtualRouterElement.java\n+++ b/server/src/main/java/com/cloud/network/element/VirtualRouterElement.java\n\n@@ -773,7 +773,7 @@ NetworkMigrationResponder, AggregatedCommandExecutor, RedundantResource, DnsServ\n     }\n \n     @Override\n-    public boolean addNewDisk(NicProfile nicProfile, Network network, VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {\n+    public boolean saveHypervisorHostname(NicProfile nicProfile, Network network, VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {\n         if (_networkModel.getUserDataUpdateProvider(network).getProvider().equals(Provider.VirtualRouter) && vm.getVirtualMachine().getType() == VirtualMachine.Type.User) {\n             VirtualMachine uvm = vm.getVirtualMachine();\n             UserVmVO destVm = _userVmDao.findById(uvm.getId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNzU0Ng==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399327546", "bodyText": "\ud83d\udc4e", "author": "DaanHoogland", "createdAt": "2020-03-27T14:59:49Z", "path": "server/src/main/java/com/cloud/network/element/VpcVirtualRouterElement.java", "diffHunk": "@@ -711,4 +711,5 @@ public boolean stopVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableExce\n         }\n         return result;\n     }\n-}\n\\ No newline at end of file\n+", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6833d8b1d0f91c78c509dccd063788c66e8b5dcc", "chunk": "diff --git a/server/src/main/java/com/cloud/network/element/VpcVirtualRouterElement.java b/server/src/main/java/com/cloud/network/element/VpcVirtualRouterElement.java\nindex 634954c8f8..165cb7d28d 100644\n--- a/server/src/main/java/com/cloud/network/element/VpcVirtualRouterElement.java\n+++ b/server/src/main/java/com/cloud/network/element/VpcVirtualRouterElement.java\n\n@@ -711,5 +711,4 @@ public class VpcVirtualRouterElement extends VirtualRouterElement implements Vpc\n         }\n         return result;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyODQ1NA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399328454", "bodyText": "fifth", "author": "DaanHoogland", "createdAt": "2020-03-27T15:01:02Z", "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -177,23 +180,30 @@\n     private VlanDao _vlanDao;\n     @Inject\n     private IPAddressDao _ipAddressDao;\n-\n     @Inject\n     private RouterControlHelper _routerControlHelper;\n+    @Inject\n+    private HostDao _hostDao;\n \n     @Autowired\n     @Qualifier(\"networkHelper\")\n     protected NetworkHelper _networkHelper;\n \n     public void createVmDataCommand(final VirtualRouter router, final UserVm vm, final NicVO nic, final String publicKey, final Commands cmds) {\n-        final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n-        final String zoneName = _dcDao.findById(router.getDataCenterId()).getName();\n-        final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n-        cmds.addCommand(\n-                \"vmdata\",\n-                generateVmDataCommand(router, nic.getIPv4Address(), vm.getUserData(), serviceOffering, zoneName,\n-                        staticNatIp == null || staticNatIp.getState() != IpAddress.State.Allocated ? null : staticNatIp.getAddress().addr(), vm.getHostName(), vm.getInstanceName(),\n-                        vm.getId(), vm.getUuid(), publicKey, nic.getNetworkId()));\n+        if (vm != null && router != null && nic != null) {\n+            final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n+            final String zoneName = _dcDao.findById(router.getDataCenterId()).getName();\n+            final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n+\n+            Host host = _hostDao.findById(vm.getHostId());\n+            final Account caller = CallContext.current().getCallingAccount();\n+            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? host.getName() : null;", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java b/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java\nindex 37e3fb0307..00da0d3a10 100644\n--- a/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java\n+++ b/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java\n\n@@ -196,8 +195,7 @@ public class CommandSetupHelper {\n             final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n \n             Host host = _hostDao.findById(vm.getHostId());\n-            final Account caller = CallContext.current().getCallingAccount();\n-            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? host.getName() : null;\n+            String destHostname = VirtualMachineManager.getHypervisorHostname(host.getName());\n             cmds.addCommand(\n                     \"vmdata\",\n                     generateVmDataCommand(router, nic.getIPv4Address(), vm.getUserData(), serviceOffering, zoneName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyOTQ2NQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399329465", "bodyText": "so why wasn't this needed before?", "author": "DaanHoogland", "createdAt": "2020-03-27T15:02:18Z", "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -177,23 +180,30 @@\n     private VlanDao _vlanDao;\n     @Inject\n     private IPAddressDao _ipAddressDao;\n-\n     @Inject\n     private RouterControlHelper _routerControlHelper;\n+    @Inject\n+    private HostDao _hostDao;\n \n     @Autowired\n     @Qualifier(\"networkHelper\")\n     protected NetworkHelper _networkHelper;\n \n     public void createVmDataCommand(final VirtualRouter router, final UserVm vm, final NicVO nic, final String publicKey, final Commands cmds) {\n-        final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n-        final String zoneName = _dcDao.findById(router.getDataCenterId()).getName();\n-        final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n-        cmds.addCommand(\n-                \"vmdata\",\n-                generateVmDataCommand(router, nic.getIPv4Address(), vm.getUserData(), serviceOffering, zoneName,\n-                        staticNatIp == null || staticNatIp.getState() != IpAddress.State.Allocated ? null : staticNatIp.getAddress().addr(), vm.getHostName(), vm.getInstanceName(),\n-                        vm.getId(), vm.getUuid(), publicKey, nic.getNetworkId()));\n+        if (vm != null && router != null && nic != null) {", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjA3Nw==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399346077", "bodyText": "I put this check because I noticed a NPE during migration of Routers after adding my changes, as I'm calling \"saveUserDataToRouter\"", "author": "Pearl1594", "createdAt": "2020-03-27T15:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyOTQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java b/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java\nindex 37e3fb0307..00da0d3a10 100644\n--- a/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java\n+++ b/server/src/main/java/com/cloud/network/router/CommandSetupHelper.java\n\n@@ -196,8 +195,7 @@ public class CommandSetupHelper {\n             final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n \n             Host host = _hostDao.findById(vm.getHostId());\n-            final Account caller = CallContext.current().getCallingAccount();\n-            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? host.getName() : null;\n+            String destHostname = VirtualMachineManager.getHypervisorHostname(host.getName());\n             cmds.addCommand(\n                     \"vmdata\",\n                     generateVmDataCommand(router, nic.getIPv4Address(), vm.getUserData(), serviceOffering, zoneName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyOTg1NA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399329854", "bodyText": "Why?", "author": "DaanHoogland", "createdAt": "2020-03-27T15:02:50Z", "path": "server/src/main/java/com/cloud/network/rules/UserdataToRouterRules.java", "diffHunk": "@@ -50,6 +50,7 @@ public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter\n \n         UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n         _userVM = userVmDao.findById(_profile.getVirtualMachine().getId());\n+", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/network/rules/UserdataToRouterRules.java b/server/src/main/java/com/cloud/network/rules/UserdataToRouterRules.java\nindex 04a5fad80a..e47dc7fdd8 100644\n--- a/server/src/main/java/com/cloud/network/rules/UserdataToRouterRules.java\n+++ b/server/src/main/java/com/cloud/network/rules/UserdataToRouterRules.java\n\n@@ -50,7 +50,6 @@ public class UserdataToRouterRules extends RuleApplier {\n \n         UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n         _userVM = userVmDao.findById(_profile.getVirtualMachine().getId());\n-\n         userVmDao.loadDetails(_userVM);\n \n         // for basic zone, send vm data/password information only to the router in the same pod\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMDQ4OQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399330489", "bodyText": "method (sixth use)", "author": "DaanHoogland", "createdAt": "2020-03-27T15:03:38Z", "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "diffHunk": "@@ -4352,9 +4352,10 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, Depl\n             if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                 final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                 boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-\n+                final Account caller = CallContext.current().getCallingAccount();\n+                String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;", "originalCommit": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "chunk": "diff --git a/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java b/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\nindex 8eaad75396..0b8372b64c 100644\n--- a/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\n+++ b/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\n\n@@ -4352,8 +4352,7 @@ public class UserVmManagerImpl extends ManagerBase implements UserVmManager, Vir\n             if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                 final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                 boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-                final Account caller = CallContext.current().getCallingAccount();\n-                String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;\n+                String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost().getName());\n                 List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                         vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n                 String vmName = vm.getInstanceName();\n"}}, {"oid": "105b8974a9ab73118fd4323a66bb4424bb04b1b6", "url": "https://github.com/apache/cloudstack/commit/105b8974a9ab73118fd4323a66bb4424bb04b1b6", "message": "Addressed Comments and fixed issues with ISO attachment when secondary storage is used", "committedDate": "2020-03-30T06:19:42Z", "type": "commit"}, {"oid": "e5fa897d3e3e1f9a132636d13aee3135d8513f02", "url": "https://github.com/apache/cloudstack/commit/e5fa897d3e3e1f9a132636d13aee3135d8513f02", "message": "formatting code", "committedDate": "2020-03-30T13:50:06Z", "type": "commit"}, {"oid": "699661d73e3df09a6b6a53fef04682dc1678933a", "url": "https://github.com/apache/cloudstack/commit/699661d73e3df09a6b6a53fef04682dc1678933a", "message": "Changed addNewDisk() to addHypervisorHostname", "committedDate": "2020-03-31T06:20:49Z", "type": "commit"}, {"oid": "6833d8b1d0f91c78c509dccd063788c66e8b5dcc", "url": "https://github.com/apache/cloudstack/commit/6833d8b1d0f91c78c509dccd063788c66e8b5dcc", "message": "Fixed null pointer and deployment issue on configDrive network", "committedDate": "2020-03-31T08:20:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NzU4MQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401147581", "bodyText": "Javadoc still missing - suggested on prior comment from Daan", "author": "nvazquez", "createdAt": "2020-03-31T19:05:29Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "diffHunk": "@@ -294,6 +294,8 @@ void implementNetworkElementsAndResources(DeployDestination dest, ReservationCon\n \n     void finalizeUpdateInSequence(Network network, boolean success);\n \n+    void addHypervisorHostname(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;", "originalCommit": "699661d73e3df09a6b6a53fef04682dc1678933a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb12eaed23ab1f98b1bb18dec36b146d4ab9edfd", "chunk": "diff --git a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\nindex 825035ad03..d4839f2348 100644\n--- a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\n+++ b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\n\n@@ -294,6 +294,13 @@ public interface NetworkOrchestrationService {\n \n     void finalizeUpdateInSequence(Network network, boolean success);\n \n+    /**\n+     * Adds hypervisor hostname to a file - hypervisor-host-name if the userdata\n+     * service provider is ConfigDrive or VirtualRouter\n+     * @param vm\n+     * @param dest\n+     * @throws ResourceUnavailableException\n+     */\n     void addHypervisorHostname(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;\n \n     List<NetworkGuru> getNetworkGurus();\n"}}, {"oid": "b38ef407a5ad062ba1314143054e7c81b4362fba", "url": "https://github.com/apache/cloudstack/commit/b38ef407a5ad062ba1314143054e7c81b4362fba", "message": "Added javadoc", "committedDate": "2020-04-01T04:10:56Z", "type": "commit"}, {"oid": "832e90d6e58c84f5ab22c3371b46a2eb80ac4aa9", "url": "https://github.com/apache/cloudstack/commit/832e90d6e58c84f5ab22c3371b46a2eb80ac4aa9", "message": "Code refactor", "committedDate": "2020-04-01T06:23:20Z", "type": "commit"}, {"oid": "cb12eaed23ab1f98b1bb18dec36b146d4ab9edfd", "url": "https://github.com/apache/cloudstack/commit/cb12eaed23ab1f98b1bb18dec36b146d4ab9edfd", "message": "added comments explaining function usage", "committedDate": "2020-04-01T06:33:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3MzI5OQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401873299", "bodyText": "please remove or add description of use/reason for throwing", "author": "DaanHoogland", "createdAt": "2020-04-01T19:58:07Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "diffHunk": "@@ -294,6 +294,15 @@ void implementNetworkElementsAndResources(DeployDestination dest, ReservationCon\n \n     void finalizeUpdateInSequence(Network network, boolean success);\n \n+    /**\n+     * Adds hypervisor hostname to a file - hypervisor-host-name if the userdata\n+     * service provider is ConfigDrive or VirtualRouter\n+     * @param vm\n+     * @param dest\n+     * @throws ResourceUnavailableException", "originalCommit": "cb12eaed23ab1f98b1bb18dec36b146d4ab9edfd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d223178815332fa786395259c4f199f509587ad9", "chunk": "diff --git a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\nindex d4839f2348..819352c492 100644\n--- a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\n+++ b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\n\n@@ -299,7 +299,7 @@ public interface NetworkOrchestrationService {\n      * service provider is ConfigDrive or VirtualRouter\n      * @param vm\n      * @param dest\n-     * @throws ResourceUnavailableException\n+     * @throws ResourceUnavailableException in case Datastore or agent to which a command is to be sent is unavailable\n      */\n     void addHypervisorHostname(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3Nzk2Ng==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401877966", "bodyText": "I think even this part could be factorred out. the method is still almost 200 lines. (no biggy)", "author": "DaanHoogland", "createdAt": "2020-04-01T20:06:59Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -141,6 +146,12 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n+            String oldIsoVolumePath = getOldVolumePath(disks, vmName);\n+            String newIsoVolumePath = getNewVolumePathIfDatastoreHasChanged(libvirtComputingResource, conn, to);\n+            if (newIsoVolumePath != null && !newIsoVolumePath.equals(oldIsoVolumePath)) {\n+                s_logger.debug(\"Editing mount path\");\n+                xmlDesc = replaceDiskSourceFile(xmlDesc, newIsoVolumePath, vmName);\n+            }", "originalCommit": "cb12eaed23ab1f98b1bb18dec36b146d4ab9edfd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "412694c5676f5b5d0e6667826e832d6bcab5a662", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\nindex 0524be7961..f0eb287c5e 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java\n\n@@ -146,12 +141,6 @@ public final class LibvirtMigrateCommandWrapper extends CommandWrapper<MigrateCo\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n-            String oldIsoVolumePath = getOldVolumePath(disks, vmName);\n-            String newIsoVolumePath = getNewVolumePathIfDatastoreHasChanged(libvirtComputingResource, conn, to);\n-            if (newIsoVolumePath != null && !newIsoVolumePath.equals(oldIsoVolumePath)) {\n-                s_logger.debug(\"Editing mount path\");\n-                xmlDesc = replaceDiskSourceFile(xmlDesc, newIsoVolumePath, vmName);\n-            }\n             // delete the metadata of vm snapshots before migration\n             vmsnapshots = libvirtComputingResource.cleanVMSnapshotMetadata(dm);\n \n"}}, {"oid": "d223178815332fa786395259c4f199f509587ad9", "url": "https://github.com/apache/cloudstack/commit/d223178815332fa786395259c4f199f509587ad9", "message": "Added javadoc", "committedDate": "2020-04-02T08:29:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0MzIxMQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r402943211", "bodyText": "please add descriptions or remove", "author": "DaanHoogland", "createdAt": "2020-04-03T11:35:15Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "diffHunk": "@@ -299,7 +299,7 @@ void implementNetworkElementsAndResources(DeployDestination dest, ReservationCon\n      * service provider is ConfigDrive or VirtualRouter\n      * @param vm\n      * @param dest", "originalCommit": "d223178815332fa786395259c4f199f509587ad9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1da2803cef51dd3bfcfa1c68b4551fe7a6c78b50", "chunk": "diff --git a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\nindex 819352c492..597530d8d6 100644\n--- a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\n+++ b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java\n\n@@ -297,8 +297,8 @@ public interface NetworkOrchestrationService {\n     /**\n      * Adds hypervisor hostname to a file - hypervisor-host-name if the userdata\n      * service provider is ConfigDrive or VirtualRouter\n-     * @param vm\n-     * @param dest\n+     * @param vm holds the details of the Virtual Machine\n+     * @param dest holds information of the destination\n      * @throws ResourceUnavailableException in case Datastore or agent to which a command is to be sent is unavailable\n      */\n     void addHypervisorHostname(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;\n"}}, {"oid": "1da2803cef51dd3bfcfa1c68b4551fe7a6c78b50", "url": "https://github.com/apache/cloudstack/commit/1da2803cef51dd3bfcfa1c68b4551fe7a6c78b50", "message": "javadoc addition", "committedDate": "2020-04-03T11:40:23Z", "type": "commit"}, {"oid": "412694c5676f5b5d0e6667826e832d6bcab5a662", "url": "https://github.com/apache/cloudstack/commit/412694c5676f5b5d0e6667826e832d6bcab5a662", "message": "Review changes - Created const value for user device id and refactored disk prepare method.", "committedDate": "2020-04-17T08:07:37Z", "type": "commit"}, {"oid": "0c2773c82f85c9c0169eefa4c409c078ff7b4fcc", "url": "https://github.com/apache/cloudstack/commit/0c2773c82f85c9c0169eefa4c409c078ff7b4fcc", "message": "Fixed vm with configdrive migration error", "committedDate": "2020-04-20T09:57:45Z", "type": "commit"}, {"oid": "ea077bcfb221f0d42342615a91e6418c4249ecc2", "url": "https://github.com/apache/cloudstack/commit/ea077bcfb221f0d42342615a91e6418c4249ecc2", "message": "Fixed iso not attaching after migration", "committedDate": "2020-05-04T08:20:22Z", "type": "commit"}, {"oid": "f1779e3653b69d192e128d989e09d76d4b1ed021", "url": "https://github.com/apache/cloudstack/commit/f1779e3653b69d192e128d989e09d76d4b1ed021", "message": "Added static string", "committedDate": "2020-05-04T08:26:09Z", "type": "commit"}, {"oid": "cbbaad89991c667d58cfb3a8e46079d725146273", "url": "https://github.com/apache/cloudstack/commit/cbbaad89991c667d58cfb3a8e46079d725146273", "message": "Added static string", "committedDate": "2020-05-04T08:42:00Z", "type": "commit"}, {"oid": "74f8488bbdf3402b9ebed123c11d5175f2ecde13", "url": "https://github.com/apache/cloudstack/commit/74f8488bbdf3402b9ebed123c11d5175f2ecde13", "message": "Merge branch 'FR44_master' of github.com:shapeblue/cloudstack into FR44_master", "committedDate": "2020-05-08T05:54:40Z", "type": "commit"}, {"oid": "637ba955363e31f94691df8f9674cc0bb7cff1e9", "url": "https://github.com/apache/cloudstack/commit/637ba955363e31f94691df8f9674cc0bb7cff1e9", "message": "modified global setting name", "committedDate": "2020-05-28T10:06:45Z", "type": "commit"}, {"oid": "637ba955363e31f94691df8f9674cc0bb7cff1e9", "url": "https://github.com/apache/cloudstack/commit/637ba955363e31f94691df8f9674cc0bb7cff1e9", "message": "modified global setting name", "committedDate": "2020-05-28T10:06:45Z", "type": "forcePushed"}, {"oid": "1f5df355fc02a8e43ed7567b5311c56d16fda86e", "url": "https://github.com/apache/cloudstack/commit/1f5df355fc02a8e43ed7567b5311c56d16fda86e", "message": "Removed public modifier", "committedDate": "2020-06-02T07:24:02Z", "type": "commit"}, {"oid": "0018999f5b232fc4e63d5e80baf922eba0fd775d", "url": "https://github.com/apache/cloudstack/commit/0018999f5b232fc4e63d5e80baf922eba0fd775d", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into FR44_master", "committedDate": "2020-06-11T10:44:21Z", "type": "commit"}, {"oid": "d1482686e07e1589223df5fe09670c3d03e6870e", "url": "https://github.com/apache/cloudstack/commit/d1482686e07e1589223df5fe09670c3d03e6870e", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into FR44_master", "committedDate": "2020-06-17T03:14:37Z", "type": "commit"}, {"oid": "565ed58a9c91f8826f3cc26365450bc8c04f2e60", "url": "https://github.com/apache/cloudstack/commit/565ed58a9c91f8826f3cc26365450bc8c04f2e60", "message": "Merge branch 'null-pointer-on-xen-instance' of github.com:shapeblue/cloudstack into 44_test_4004", "committedDate": "2020-06-17T03:16:46Z", "type": "commit"}, {"oid": "7b7ce2741a463b453538fb3ee2166801ba6ad068", "url": "https://github.com/apache/cloudstack/commit/7b7ce2741a463b453538fb3ee2166801ba6ad068", "message": "refactored code", "committedDate": "2020-06-19T07:34:41Z", "type": "commit"}, {"oid": "9f121f3c9b5f4d0fee2855caf1a458a737d6a91b", "url": "https://github.com/apache/cloudstack/commit/9f121f3c9b5f4d0fee2855caf1a458a737d6a91b", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into 44_test_4004", "committedDate": "2020-06-19T07:47:33Z", "type": "commit"}, {"oid": "56a3d8c1fced61c430862d0280021d03e473edaf", "url": "https://github.com/apache/cloudstack/commit/56a3d8c1fced61c430862d0280021d03e473edaf", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into FR44_master", "committedDate": "2020-06-23T07:09:05Z", "type": "commit"}, {"oid": "66ad63f23b6a9a39c887c28fb7d224e825fc8e94", "url": "https://github.com/apache/cloudstack/commit/66ad63f23b6a9a39c887c28fb7d224e825fc8e94", "message": "addressed conflicts/ discrepency due to xenserver bug fix", "committedDate": "2020-06-23T16:32:58Z", "type": "commit"}, {"oid": "66ad63f23b6a9a39c887c28fb7d224e825fc8e94", "url": "https://github.com/apache/cloudstack/commit/66ad63f23b6a9a39c887c28fb7d224e825fc8e94", "message": "addressed conflicts/ discrepency due to xenserver bug fix", "committedDate": "2020-06-23T16:32:58Z", "type": "forcePushed"}, {"oid": "1d616ddd7bac2e0fefa2fd93ef97c1a7e57af053", "url": "https://github.com/apache/cloudstack/commit/1d616ddd7bac2e0fefa2fd93ef97c1a7e57af053", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into FR44_master", "committedDate": "2020-06-29T19:29:50Z", "type": "commit"}, {"oid": "7ec609a5334adc597ac0973cc1b4ef7985e58345", "url": "https://github.com/apache/cloudstack/commit/7ec609a5334adc597ac0973cc1b4ef7985e58345", "message": "Merge remote-tracking branch 'upstream/master' into FR44_master", "committedDate": "2020-06-29T19:38:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNzI5MQ==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r448237291", "bodyText": "this part aims to fix another issue, right ?", "author": "weizhouapache", "createdAt": "2020-07-01T09:28:41Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -141,6 +146,12 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n+            String oldIsoVolumePath = getOldVolumePath(disks, vmName);\n+            String newIsoVolumePath = getNewVolumePathIfDatastoreHasChanged(libvirtComputingResource, conn, to);", "originalCommit": "7ec609a5334adc597ac0973cc1b4ef7985e58345", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NDUwOA==", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r448254508", "bodyText": "@weizhouapache Yes, it does... (identified while working on this feature)", "author": "Pearl1594", "createdAt": "2020-07-01T09:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNzI5MQ=="}], "type": "inlineReview", "revised_code": null}]}