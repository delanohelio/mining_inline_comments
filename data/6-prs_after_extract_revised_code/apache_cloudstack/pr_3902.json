{"pr_number": 3902, "pr_title": "vrouter: Save PlaceHolder nic for VR if network does not have source nat", "pr_createdAt": "2020-02-20T10:20:28Z", "pr_url": "https://github.com/apache/cloudstack/pull/3902", "timeline": [{"oid": "93123a95cd5008d94f3daf4764a99a2a49312387", "url": "https://github.com/apache/cloudstack/commit/93123a95cd5008d94f3daf4764a99a2a49312387", "message": "server: do not save Placeholder ip for vpc routers", "committedDate": "2020-03-12T09:37:55Z", "type": "forcePushed"}, {"oid": "60b7848544aebd45fc25a82382518f09ff638636", "url": "https://github.com/apache/cloudstack/commit/60b7848544aebd45fc25a82382518f09ff638636", "message": "vrouter: Save PlaceHolder nic for VR if network does not have source nat", "committedDate": "2020-03-16T10:08:55Z", "type": "commit"}, {"oid": "60b7848544aebd45fc25a82382518f09ff638636", "url": "https://github.com/apache/cloudstack/commit/60b7848544aebd45fc25a82382518f09ff638636", "message": "vrouter: Save PlaceHolder nic for VR if network does not have source nat", "committedDate": "2020-03-16T10:08:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MzIyMQ==", "url": "https://github.com/apache/cloudstack/pull/3902#discussion_r461593221", "bodyText": "allocateRegularVrNic(...)", "author": "DaanHoogland", "createdAt": "2020-07-28T13:47:46Z", "path": "server/src/main/java/com/cloud/network/guru/ExternalGuestNetworkGuru.java", "diffHunk": "@@ -261,6 +265,17 @@ public NicProfile allocate(Network config, NicProfile nic, VirtualMachineProfile\n             profile.setIPv4Netmask(null);\n         }\n \n+        if (config.getVpcId() == null && vm.getType() == VirtualMachine.Type.DomainRouter) {\n+            boolean isPublicNetwork = _networkModel.isProviderSupportServiceInNetwork(config.getId(), Service.SourceNat, Provider.VirtualRouter);\n+            if (!isPublicNetwork) {\n+                Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(config, null);\n+                if (placeholderNic == null) {\n+                    s_logger.debug(\"Saving placeholder nic with ip4 address \" + profile.getIPv4Address() +\n+                            \" and ipv6 address \" + profile.getIPv6Address() + \" for the network \" + config);\n+                    _networkMgr.savePlaceholderNic(config, profile.getIPv4Address(), profile.getIPv6Address(), VirtualMachine.Type.DomainRouter);\n+                }\n+            }\n+        }", "originalCommit": "60b7848544aebd45fc25a82382518f09ff638636", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5Mzg2MQ==", "url": "https://github.com/apache/cloudstack/pull/3902#discussion_r461593861", "bodyText": "allocateRegularVrNic(...)", "author": "DaanHoogland", "createdAt": "2020-07-28T13:48:40Z", "path": "server/src/main/java/com/cloud/network/guru/GuestNetworkGuru.java", "diffHunk": "@@ -372,15 +373,25 @@ public NicProfile allocate(final Network network, NicProfile nic, final VirtualM\n \n                 if (isGateway) {\n                     guestIp = network.getGateway();\n-                } else if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {\n-                    guestIp = _ipAddrMgr.acquireGuestIpAddressByPlacement(network, nic.getRequestedIPv4());\n                 } else {\n-                    guestIp = _ipAddrMgr.acquireGuestIpAddress(network, nic.getRequestedIPv4());\n-                }\n-\n-                if (!isGateway && guestIp == null && network.getGuestType() != GuestType.L2 && !_networkModel.listNetworkOfferingServices(network.getNetworkOfferingId()).isEmpty()) {\n-                    throw new InsufficientVirtualNetworkCapacityException(\"Unable to acquire Guest IP\" + \" address for network \" + network, DataCenter.class,\n-                            dc.getId());\n+                    if (network.getGuestType() != GuestType.L2 && vm.getType() == VirtualMachine.Type.DomainRouter) {\n+                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n+                        if (placeholderNic != null) {\n+                            s_logger.debug(\"Nic got an ip address \" + placeholderNic.getIPv4Address() + \" stored in placeholder nic for the network \" + network);\n+                            guestIp = placeholderNic.getIPv4Address();\n+                        }\n+                    }\n+                    if (guestIp == null) {\n+                        if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {\n+                            guestIp = _ipAddrMgr.acquireGuestIpAddressByPlacement(network, nic.getRequestedIPv4());\n+                        } else {\n+                            guestIp = _ipAddrMgr.acquireGuestIpAddress(network, nic.getRequestedIPv4());\n+                        }\n+                    }\n+                    if (guestIp == null && network.getGuestType() != GuestType.L2 && !_networkModel.listNetworkOfferingServices(network.getNetworkOfferingId()).isEmpty()) {\n+                        throw new InsufficientVirtualNetworkCapacityException(\"Unable to acquire Guest IP\" + \" address for network \" + network, DataCenter.class,\n+                                dc.getId());\n+                    }", "originalCommit": "60b7848544aebd45fc25a82382518f09ff638636", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}