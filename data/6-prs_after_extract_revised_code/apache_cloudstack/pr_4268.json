{"pr_number": 4268, "pr_title": "Prevent NullPointerException on GenericDaoBase", "pr_createdAt": "2020-08-15T19:25:16Z", "pr_url": "https://github.com/apache/cloudstack/pull/4268", "timeline": [{"oid": "fd2abd1a43344e09b277b45bec85b2be8a2e172c", "url": "https://github.com/apache/cloudstack/commit/fd2abd1a43344e09b277b45bec85b2be8a2e172c", "message": "Prevent NullPointerException on GenericDaoBase", "committedDate": "2020-08-15T19:18:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNjI3Nw==", "url": "https://github.com/apache/cloudstack/pull/4268#discussion_r471026277", "bodyText": "Previous  MockitoJUnitRunner got Deprecated; changed to a non-deprecated one.", "author": "GabrielBrascher", "createdAt": "2020-08-15T19:26:04Z", "path": "framework/db/src/test/java/com/cloud/utils/db/GenericDaoBaseTest.java", "diffHunk": "@@ -20,132 +20,166 @@\n import java.sql.SQLException;\n \n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n-import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.junit.MockitoJUnitRunner;", "originalCommit": "fd2abd1a43344e09b277b45bec85b2be8a2e172c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNjUyMQ==", "url": "https://github.com/apache/cloudstack/pull/4268#discussion_r471026521", "bodyText": "Despite all tests pass, the Process finished with exit code 255 due to unnecessary stubbings.\nI fixed this issue by extracting all into a @Before method and tests are looking good.\nThe output of tests before this PR:\nProcess finished with exit code 255\n\norg.mockito.exceptions.misusing.UnnecessaryStubbingException: \nUnnecessary stubbings detected in test class: GenericDaoBaseTest\nClean & maintainable test code requires zero unnecessary code.\nFollowing stubbings are unnecessary (click to navigate to relevant line of code):\n  1. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveByte(GenericDaoBaseTest.java:144)\n  2. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveLong(GenericDaoBaseTest.java:117)\n  3. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveInt(GenericDaoBaseTest.java:126)\n  4. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveDouble(GenericDaoBaseTest.java:90)\n  5. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveFloat(GenericDaoBaseTest.java:81)\n  6. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveShort(GenericDaoBaseTest.java:54)\n  7. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveBoolean(GenericDaoBaseTest.java:45)\nPlease remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.\n\n\tat org.mockito.internal.runners.StrictRunner.run(StrictRunner.java:49)\n\tat org.mockito.junit.MockitoJUnitRunner.run(MockitoJUnitRunner.java:163)\n\tat org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:54)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)", "author": "GabrielBrascher", "createdAt": "2020-08-15T19:29:44Z", "path": "framework/db/src/test/java/com/cloud/utils/db/GenericDaoBaseTest.java", "diffHunk": "@@ -20,132 +20,166 @@\n import java.sql.SQLException;\n \n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n-import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.persistence.EntityExistsException;\n \n @RunWith(MockitoJUnitRunner.class)\n public class GenericDaoBaseTest {\n     @Mock\n     ResultSet resultSet;\n+    @Mock\n+    SQLException mockedSQLException;\n \n-    @Test\n-    public void getObjectBoolean() throws SQLException {\n+    private static final String INTEGRITY_CONSTRAINT_VIOLATION = \"23000\";\n+    private static final int DUPLICATE_ENTRY_ERRO_CODE = 1062;\n+\n+    @Before\n+    public void prepareTests() throws SQLException {\n         Mockito.when(resultSet.getObject(1)).thenReturn(false);\n         Mockito.when(resultSet.getBoolean(1)).thenReturn(false);\n+        Mockito.when(resultSet.getObject(1)).thenReturn((short) 1);", "originalCommit": "fd2abd1a43344e09b277b45bec85b2be8a2e172c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "576021bb97a4b42793351178019b92a6753363d5", "url": "https://github.com/apache/cloudstack/commit/576021bb97a4b42793351178019b92a6753363d5", "message": "Fix checkstyle: remove unused import", "committedDate": "2020-08-15T19:41:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzMTM1NQ==", "url": "https://github.com/apache/cloudstack/pull/4268#discussion_r471031355", "bodyText": "+1 to this pattern to check contant.equals(potentially-nullable-obj)", "author": "rhtyd", "createdAt": "2020-08-15T20:33:55Z", "path": "framework/db/src/main/java/com/cloud/utils/db/GenericDaoBase.java", "diffHunk": "@@ -850,13 +853,23 @@ public int update(UpdateBuilder ub, final SearchCriteria<?> sc, Integer rows) {\n             ub.clear();\n             return result;\n         } catch (final SQLException e) {\n-            if (e.getSQLState().equals(\"23000\") && e.getErrorCode() == 1062) {\n-                throw new EntityExistsException(\"Entity already exists \", e);\n-            }\n+            handleEntityExistsException(e);\n             throw new CloudRuntimeException(\"DB Exception on: \" + pstmt, e);\n         }\n     }\n \n+    /**\n+     * If the SQLException.getSQLState is of 23000 (Integrity Constraint Violation), and the Error Code is 1062 (Duplicate Entry), throws EntityExistsException.\n+     * @throws EntityExistsException\n+     */\n+    protected static void handleEntityExistsException(SQLException e) throws EntityExistsException {\n+        boolean isIntegrityConstantViolation = INTEGRITY_CONSTRAINT_VIOLATION.equals(e.getSQLState());", "originalCommit": "576021bb97a4b42793351178019b92a6753363d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}