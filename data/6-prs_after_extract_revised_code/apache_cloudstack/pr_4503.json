{"pr_number": 4503, "pr_title": "Specify IP for VR in shared networks", "pr_createdAt": "2020-11-25T08:24:46Z", "pr_url": "https://github.com/apache/cloudstack/pull/4503", "timeline": [{"oid": "cd2e9db76c33931136303dcc8c0f0731ec1ead02", "url": "https://github.com/apache/cloudstack/commit/cd2e9db76c33931136303dcc8c0f0731ec1ead02", "message": "Specify IP for VR in shared networks", "committedDate": "2020-11-25T08:57:31Z", "type": "forcePushed"}, {"oid": "e987ec3cb9661dee0c9a5ba327a6081962e3f60c", "url": "https://github.com/apache/cloudstack/commit/e987ec3cb9661dee0c9a5ba327a6081962e3f60c", "message": "Specify IP for VR in shared networks", "committedDate": "2020-11-27T05:49:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNDAwOQ==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531524009", "bodyText": "can add validator \"ApiArgValidator.NotNullOrEmpty\" for both args ?", "author": "sureshanaparti", "createdAt": "2020-11-27T10:45:13Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/network/CreateNetworkCmdByAdmin.java", "diffHunk": "@@ -42,6 +42,12 @@\n     @Parameter(name=ApiConstants.HIDE_IP_ADDRESS_USAGE, type=CommandType.BOOLEAN, description=\"when true ip address usage for the network will not be exported by the listUsageRecords API\")\n     private Boolean hideIpAddressUsage;\n \n+    @Parameter(name = ApiConstants.ROUTER_IP, type = CommandType.STRING, description = \"IPV4 address to be assigned to a router in a shared network\", since = \"4.16\")\n+    private String routerIp;\n+\n+    @Parameter(name = ApiConstants.ROUTER_IPV6, type = CommandType.STRING, description = \"IPV6 address to be assigned to a router in a shared network\", since = \"4.16\")\n+    private String routerIpv6;", "originalCommit": "e987ec3cb9661dee0c9a5ba327a6081962e3f60c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NjIzMA==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531576230", "bodyText": "Wouldn't  adding such a validator make the field/ parameter mandatory?", "author": "Pearl1594", "createdAt": "2020-11-27T12:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNDAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MDUyNw==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531580527", "bodyText": "Wouldn't adding such a validator make the field/ parameter mandatory?\n\nI think it is for validating the parameter value when it is specified in the cmd, nothing to do with required - true/false.", "author": "sureshanaparti", "createdAt": "2020-11-27T12:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNDAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "chunk": "diff --git a/api/src/main/java/org/apache/cloudstack/api/command/admin/network/CreateNetworkCmdByAdmin.java b/api/src/main/java/org/apache/cloudstack/api/command/admin/network/CreateNetworkCmdByAdmin.java\nindex b0e019b6cb..53b02718ea 100644\n--- a/api/src/main/java/org/apache/cloudstack/api/command/admin/network/CreateNetworkCmdByAdmin.java\n+++ b/api/src/main/java/org/apache/cloudstack/api/command/admin/network/CreateNetworkCmdByAdmin.java\n\n@@ -42,10 +43,12 @@ public class CreateNetworkCmdByAdmin extends CreateNetworkCmd implements AdminCm\n     @Parameter(name=ApiConstants.HIDE_IP_ADDRESS_USAGE, type=CommandType.BOOLEAN, description=\"when true ip address usage for the network will not be exported by the listUsageRecords API\")\n     private Boolean hideIpAddressUsage;\n \n-    @Parameter(name = ApiConstants.ROUTER_IP, type = CommandType.STRING, description = \"IPV4 address to be assigned to a router in a shared network\", since = \"4.16\")\n+    @Parameter(name = ApiConstants.ROUTER_IP, type = CommandType.STRING, description = \"IPV4 address to be assigned to a router in a shared network\", since = \"4.16\",\n+            validations = {ApiArgValidator.NotNullOrEmpty})\n     private String routerIp;\n \n-    @Parameter(name = ApiConstants.ROUTER_IPV6, type = CommandType.STRING, description = \"IPV6 address to be assigned to a router in a shared network\", since = \"4.16\")\n+    @Parameter(name = ApiConstants.ROUTER_IPV6, type = CommandType.STRING, description = \"IPV6 address to be assigned to a router in a shared network\", since = \"4.16\",\n+            validations = {ApiArgValidator.NotNullOrEmpty})\n     private String routerIpv6;\n \n     /////////////////////////////////////////////////////\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNTc3MA==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531525770", "bodyText": "extra tab space, may be not required.", "author": "sureshanaparti", "createdAt": "2020-11-27T10:48:36Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -718,10 +731,12 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n                         networks.add(networkPersisted);\n \n                         if (network.getPvlanType() != null) {\n-                            NetworkDetailVO detailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ISOLATED_PVLAN_TYPE, network.getPvlanType().toString(), true);\n+                                NetworkDetailVO detailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ISOLATED_PVLAN_TYPE, network.getPvlanType().toString(), true);", "originalCommit": "e987ec3cb9661dee0c9a5ba327a6081962e3f60c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 4797622a9e..1c02c3417b 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -731,11 +727,11 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n                         networks.add(networkPersisted);\n \n                         if (network.getPvlanType() != null) {\n-                                NetworkDetailVO detailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ISOLATED_PVLAN_TYPE, network.getPvlanType().toString(), true);\n+                            NetworkDetailVO detailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ISOLATED_PVLAN_TYPE, network.getPvlanType().toString(), true);\n                             networkDetailsDao.persist(detailVO);\n                         }\n \n-                        updateNetworkDetails(networkPersisted, network);\n+                        updateRouterIpInNetworkDetails(networkPersisted.getId(), network.getRouterIp(), network.getRouterIpv6());\n \n                         if (predefined instanceof NetworkVO && guru instanceof NetworkGuruAdditionalFunctions){\n                             final NetworkGuruAdditionalFunctions functions = (NetworkGuruAdditionalFunctions) guru;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyODM1OA==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531528358", "bodyText": "may be updateRouterIpInNetworkDetails(networkId, routerIp, routerIpv6) , not required to pass entire network object.", "author": "sureshanaparti", "createdAt": "2020-11-27T10:53:31Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -640,6 +640,19 @@ protected NetworkOrchestrator() {\n         setStateMachine();\n     }\n \n+    private void updateNetworkDetails(NetworkVO networkPersisted, Network network) {", "originalCommit": "e987ec3cb9661dee0c9a5ba327a6081962e3f60c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 4797622a9e..1c02c3417b 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -640,16 +640,12 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n         setStateMachine();\n     }\n \n-    private void updateNetworkDetails(NetworkVO networkPersisted, Network network) {\n-        NetworkDetailVO networkDetailVO = null;\n-        if (isNotBlank(network.getRouterIp())) {\n-            networkDetailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ROUTER_IP, network.getRouterIp().toString(), true);\n+    private void updateRouterIpInNetworkDetails(Long networkId, String routerIp, String routerIpv6) {\n+        if (isNotBlank(routerIp)) {\n+            networkDetailsDao.addDetail(networkId, ApiConstants.ROUTER_IP, routerIp, true);\n         }\n-        if (isNotBlank(network.getRouterIpv6())) {\n-            networkDetailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ROUTER_IPV6, network.getRouterIpv6().toString(), true);\n-        }\n-        if (networkDetailVO != null) {\n-            networkDetailsDao.persist(networkDetailVO);\n+        if (isNotBlank(routerIpv6)) {\n+            networkDetailsDao.addDetail(networkId, ApiConstants.ROUTER_IPV6, routerIpv6, true);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMDA3OA==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531530078", "bodyText": "this will override the above networkDetailVO , as per the code when both are not blank and always the latest one is persisted. I understand, at any given point, IPv4 or IPv6 is used, not both. From code perspective, either keep if-else for IPv4 & IPv6, or move the network details persist to respective if block.", "author": "sureshanaparti", "createdAt": "2020-11-27T10:56:45Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -640,6 +640,19 @@ protected NetworkOrchestrator() {\n         setStateMachine();\n     }\n \n+    private void updateNetworkDetails(NetworkVO networkPersisted, Network network) {\n+        NetworkDetailVO networkDetailVO = null;\n+        if (isNotBlank(network.getRouterIp())) {\n+            networkDetailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ROUTER_IP, network.getRouterIp().toString(), true);\n+        }\n+        if (isNotBlank(network.getRouterIpv6())) {\n+            networkDetailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ROUTER_IPV6, network.getRouterIpv6().toString(), true);", "originalCommit": "e987ec3cb9661dee0c9a5ba327a6081962e3f60c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NjE5OA==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531576198", "bodyText": "But based on the code for persisting placeholder record, it seems like one can specify both ipv4 and ipv6 details:\nhttps://github.com/apache/cloudstack/blob/master/server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java#L715\n(and L732)", "author": "Pearl1594", "createdAt": "2020-11-27T12:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMDA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 4797622a9e..1c02c3417b 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -640,16 +640,12 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n         setStateMachine();\n     }\n \n-    private void updateNetworkDetails(NetworkVO networkPersisted, Network network) {\n-        NetworkDetailVO networkDetailVO = null;\n-        if (isNotBlank(network.getRouterIp())) {\n-            networkDetailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ROUTER_IP, network.getRouterIp().toString(), true);\n+    private void updateRouterIpInNetworkDetails(Long networkId, String routerIp, String routerIpv6) {\n+        if (isNotBlank(routerIp)) {\n+            networkDetailsDao.addDetail(networkId, ApiConstants.ROUTER_IP, routerIp, true);\n         }\n-        if (isNotBlank(network.getRouterIpv6())) {\n-            networkDetailVO = new NetworkDetailVO(networkPersisted.getId(), ApiConstants.ROUTER_IPV6, network.getRouterIpv6().toString(), true);\n-        }\n-        if (networkDetailVO != null) {\n-            networkDetailsDao.persist(networkDetailVO);\n+        if (isNotBlank(routerIpv6)) {\n+            networkDetailsDao.addDetail(networkId, ApiConstants.ROUTER_IPV6, routerIpv6, true);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NjU4Mg==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531576582", "bodyText": "I see most of the calls, routerips are passed null , can you add another public method with routerip params and use it wherever required ?", "author": "sureshanaparti", "createdAt": "2020-11-27T12:33:57Z", "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "diffHunk": "@@ -3471,7 +3471,7 @@ private NetworkVO createDefaultNetworkForAccount(DataCenter zone, Account owner,\n         s_logger.debug(\"Creating network for account \" + owner + \" from the network offering id=\" + requiredOfferings.get(0).getId() + \" as a part of deployVM process\");\n         Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), owner.getAccountName() + \"-network\", owner.getAccountName() + \"-network\",\n                 null, null, null, false, null, owner, null, physicalNetwork, zone.getId(), ACLType.Account, null, null, null, null, true, null, null,\n-                null);\n+                null, null, null);", "originalCommit": "e987ec3cb9661dee0c9a5ba327a6081962e3f60c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMjc0MA==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531612740", "bodyText": "routerIp => routerIpv6", "author": "sureshanaparti", "createdAt": "2020-11-27T13:49:12Z", "path": "server/src/main/java/com/cloud/network/NetworkServiceImpl.java", "diffHunk": "@@ -1029,6 +1029,26 @@ private void checkSharedNetworkCidrOverlap(Long zoneId, long physicalNetworkId,\n         }\n     }\n \n+    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String startIpv6, String endIpv6) {\n+        if (isNotBlank(routerIp)) {\n+            if (!NetUtils.isValidIp4(routerIp)) {\n+                throw new CloudRuntimeException(\"Router IPv4 IP provided is of incorrect format\");\n+            }\n+            if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n+                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+            }\n+        }\n+        if (isNotBlank(routerIpv6)) {\n+            String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+            if (!NetUtils.isValidIp6(routerIpv6)) {\n+                throw new CloudRuntimeException(\"Router IPv6 IP provided is of incorrect format\");\n+            }\n+            if (!NetUtils.isIp6InRange(routerIp, ipv6Range)) {", "originalCommit": "fa3b786d8daf7c1fff49da82128f35022845d3ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "chunk": "diff --git a/server/src/main/java/com/cloud/network/NetworkServiceImpl.java b/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\nindex 23aa55e6ce..21d07243aa 100644\n--- a/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\n+++ b/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\n\n@@ -1029,22 +1029,42 @@ public class NetworkServiceImpl extends ManagerBase implements NetworkService, C\n         }\n     }\n \n-    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String startIpv6, String endIpv6) {\n+    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String gateway,\n+                                   String netmask, String startIpv6, String endIpv6, String ip6Cidr) {\n         if (isNotBlank(routerIp)) {\n+            if (startIp != null && endIp == null) {\n+                endIp = startIp;\n+            }\n             if (!NetUtils.isValidIp4(routerIp)) {\n                 throw new CloudRuntimeException(\"Router IPv4 IP provided is of incorrect format\");\n             }\n-            if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n-                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+            if (isNotBlank(startIp) && isNotBlank(endIp)) {\n+                if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n+                    throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+                }\n+            } else {\n+                String cidr = NetUtils.ipAndNetMaskToCidr(gateway, netmask);\n+                if (!NetUtils.isIpWithInCidrRange(routerIp, cidr)) {\n+                    throw new CloudRuntimeException(\"Router IP provided in not within the network range\");\n+                }\n             }\n         }\n         if (isNotBlank(routerIpv6)) {\n-            String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+            if (startIpv6 != null && endIpv6 == null) {\n+                endIpv6 = startIpv6;\n+            }\n             if (!NetUtils.isValidIp6(routerIpv6)) {\n-                throw new CloudRuntimeException(\"Router IPv6 IP provided is of incorrect format\");\n+                throw new CloudRuntimeException(\"Router IPv6 address provided is of incorrect format\");\n             }\n-            if (!NetUtils.isIp6InRange(routerIp, ipv6Range)) {\n-                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+            if (isNotBlank(startIpv6) && isNotBlank(endIpv6)) {\n+                String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+                if (!NetUtils.isIp6InRange(routerIpv6, ipv6Range)) {\n+                    throw new CloudRuntimeException(\"Router IPv6 address provided is not within the specified range: \" + startIpv6 + \" - \" + endIpv6);\n+                }\n+            } else {\n+                if (!NetUtils.isIp6InNetwork(routerIpv6, ip6Cidr)) {\n+                    throw new CloudRuntimeException(\"Router IPv6 address provided is not with the network range\");\n+                }\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMzExOQ==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r531613119", "bodyText": "IPv4 => IPv6  and same for start/end ip", "author": "sureshanaparti", "createdAt": "2020-11-27T13:49:59Z", "path": "server/src/main/java/com/cloud/network/NetworkServiceImpl.java", "diffHunk": "@@ -1029,6 +1029,26 @@ private void checkSharedNetworkCidrOverlap(Long zoneId, long physicalNetworkId,\n         }\n     }\n \n+    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String startIpv6, String endIpv6) {\n+        if (isNotBlank(routerIp)) {\n+            if (!NetUtils.isValidIp4(routerIp)) {\n+                throw new CloudRuntimeException(\"Router IPv4 IP provided is of incorrect format\");\n+            }\n+            if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n+                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+            }\n+        }\n+        if (isNotBlank(routerIpv6)) {\n+            String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+            if (!NetUtils.isValidIp6(routerIpv6)) {\n+                throw new CloudRuntimeException(\"Router IPv6 IP provided is of incorrect format\");\n+            }\n+            if (!NetUtils.isIp6InRange(routerIp, ipv6Range)) {\n+                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);", "originalCommit": "fa3b786d8daf7c1fff49da82128f35022845d3ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "chunk": "diff --git a/server/src/main/java/com/cloud/network/NetworkServiceImpl.java b/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\nindex 23aa55e6ce..21d07243aa 100644\n--- a/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\n+++ b/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\n\n@@ -1029,22 +1029,42 @@ public class NetworkServiceImpl extends ManagerBase implements NetworkService, C\n         }\n     }\n \n-    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String startIpv6, String endIpv6) {\n+    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String gateway,\n+                                   String netmask, String startIpv6, String endIpv6, String ip6Cidr) {\n         if (isNotBlank(routerIp)) {\n+            if (startIp != null && endIp == null) {\n+                endIp = startIp;\n+            }\n             if (!NetUtils.isValidIp4(routerIp)) {\n                 throw new CloudRuntimeException(\"Router IPv4 IP provided is of incorrect format\");\n             }\n-            if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n-                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+            if (isNotBlank(startIp) && isNotBlank(endIp)) {\n+                if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n+                    throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+                }\n+            } else {\n+                String cidr = NetUtils.ipAndNetMaskToCidr(gateway, netmask);\n+                if (!NetUtils.isIpWithInCidrRange(routerIp, cidr)) {\n+                    throw new CloudRuntimeException(\"Router IP provided in not within the network range\");\n+                }\n             }\n         }\n         if (isNotBlank(routerIpv6)) {\n-            String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+            if (startIpv6 != null && endIpv6 == null) {\n+                endIpv6 = startIpv6;\n+            }\n             if (!NetUtils.isValidIp6(routerIpv6)) {\n-                throw new CloudRuntimeException(\"Router IPv6 IP provided is of incorrect format\");\n+                throw new CloudRuntimeException(\"Router IPv6 address provided is of incorrect format\");\n             }\n-            if (!NetUtils.isIp6InRange(routerIp, ipv6Range)) {\n-                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+            if (isNotBlank(startIpv6) && isNotBlank(endIpv6)) {\n+                String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+                if (!NetUtils.isIp6InRange(routerIpv6, ipv6Range)) {\n+                    throw new CloudRuntimeException(\"Router IPv6 address provided is not within the specified range: \" + startIpv6 + \" - \" + endIpv6);\n+                }\n+            } else {\n+                if (!NetUtils.isIp6InNetwork(routerIpv6, ip6Cidr)) {\n+                    throw new CloudRuntimeException(\"Router IPv6 address provided is not with the network range\");\n+                }\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MTMzOQ==", "url": "https://github.com/apache/cloudstack/pull/4503#discussion_r533091339", "bodyText": "IPv4 => IPv6  in the message string", "author": "sureshanaparti", "createdAt": "2020-12-01T06:01:17Z", "path": "server/src/main/java/com/cloud/network/NetworkServiceImpl.java", "diffHunk": "@@ -1029,6 +1029,26 @@ private void checkSharedNetworkCidrOverlap(Long zoneId, long physicalNetworkId,\n         }\n     }\n \n+    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String startIpv6, String endIpv6) {\n+        if (isNotBlank(routerIp)) {\n+            if (!NetUtils.isValidIp4(routerIp)) {\n+                throw new CloudRuntimeException(\"Router IPv4 IP provided is of incorrect format\");\n+            }\n+            if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n+                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+            }\n+        }\n+        if (isNotBlank(routerIpv6)) {\n+            String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+            if (!NetUtils.isValidIp6(routerIpv6)) {\n+                throw new CloudRuntimeException(\"Router IPv6 IP provided is of incorrect format\");\n+            }\n+            if (!NetUtils.isIp6InRange(routerIpv6, ipv6Range)) {\n+                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIpv6 + \" - \" + endIpv6);", "originalCommit": "e505f6dcb13e81c374036554133ac95339392f70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "chunk": "diff --git a/server/src/main/java/com/cloud/network/NetworkServiceImpl.java b/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\nindex abce82173e..21d07243aa 100644\n--- a/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\n+++ b/server/src/main/java/com/cloud/network/NetworkServiceImpl.java\n\n@@ -1029,22 +1029,42 @@ public class NetworkServiceImpl extends ManagerBase implements NetworkService, C\n         }\n     }\n \n-    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String startIpv6, String endIpv6) {\n+    private void validateRouterIps(String routerIp, String routerIpv6, String startIp, String endIp, String gateway,\n+                                   String netmask, String startIpv6, String endIpv6, String ip6Cidr) {\n         if (isNotBlank(routerIp)) {\n+            if (startIp != null && endIp == null) {\n+                endIp = startIp;\n+            }\n             if (!NetUtils.isValidIp4(routerIp)) {\n                 throw new CloudRuntimeException(\"Router IPv4 IP provided is of incorrect format\");\n             }\n-            if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n-                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+            if (isNotBlank(startIp) && isNotBlank(endIp)) {\n+                if (!NetUtils.isIpInRange(routerIp, startIp, endIp)) {\n+                    throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIp + \" - \" + endIp);\n+                }\n+            } else {\n+                String cidr = NetUtils.ipAndNetMaskToCidr(gateway, netmask);\n+                if (!NetUtils.isIpWithInCidrRange(routerIp, cidr)) {\n+                    throw new CloudRuntimeException(\"Router IP provided in not within the network range\");\n+                }\n             }\n         }\n         if (isNotBlank(routerIpv6)) {\n-            String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+            if (startIpv6 != null && endIpv6 == null) {\n+                endIpv6 = startIpv6;\n+            }\n             if (!NetUtils.isValidIp6(routerIpv6)) {\n-                throw new CloudRuntimeException(\"Router IPv6 IP provided is of incorrect format\");\n+                throw new CloudRuntimeException(\"Router IPv6 address provided is of incorrect format\");\n             }\n-            if (!NetUtils.isIp6InRange(routerIpv6, ipv6Range)) {\n-                throw new CloudRuntimeException(\"Router IPv4 IP provided is not within the specified range: \" + startIpv6 + \" - \" + endIpv6);\n+            if (isNotBlank(startIpv6) && isNotBlank(endIpv6)) {\n+                String ipv6Range = startIpv6 + \"-\" + endIpv6;\n+                if (!NetUtils.isIp6InRange(routerIpv6, ipv6Range)) {\n+                    throw new CloudRuntimeException(\"Router IPv6 address provided is not within the specified range: \" + startIpv6 + \" - \" + endIpv6);\n+                }\n+            } else {\n+                if (!NetUtils.isIp6InNetwork(routerIpv6, ip6Cidr)) {\n+                    throw new CloudRuntimeException(\"Router IPv6 address provided is not with the network range\");\n+                }\n             }\n         }\n     }\n"}}, {"oid": "9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "url": "https://github.com/apache/cloudstack/commit/9d4d308f597529cdf35e4dc2ed0bd531937d1d10", "message": "Fix IP address conflict", "committedDate": "2021-01-14T06:41:40Z", "type": "forcePushed"}, {"oid": "6432ac8df91029c7deccfa1951d154879344e12a", "url": "https://github.com/apache/cloudstack/commit/6432ac8df91029c7deccfa1951d154879344e12a", "message": "Specify IP for VR in shared networks", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "4645b0bac2d5b4df180cf3290a9b58476a693f7e", "url": "https://github.com/apache/cloudstack/commit/4645b0bac2d5b4df180cf3290a9b58476a693f7e", "message": "Addressed review comments", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "0271dd69f862a80d6b97fd7ecafc6a1c718ca9c0", "url": "https://github.com/apache/cloudstack/commit/0271dd69f862a80d6b97fd7ecafc6a1c718ca9c0", "message": "Add validator to API param", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "eebd71425a07ee374d16506fa1ec1b422ed8eb4f", "url": "https://github.com/apache/cloudstack/commit/eebd71425a07ee374d16506fa1ec1b422ed8eb4f", "message": "Fix IP version check", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "949acfbdd288d54d9a2bb65afcf80505cadaff8e", "url": "https://github.com/apache/cloudstack/commit/949acfbdd288d54d9a2bb65afcf80505cadaff8e", "message": "Update NetworkServiceImpl.java", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "d76c9c151bf24947bd26cdc641b8d6713ef2241b", "url": "https://github.com/apache/cloudstack/commit/d76c9c151bf24947bd26cdc641b8d6713ef2241b", "message": "Refactored code", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "491624f126f9112fa2bac23e6794d1d1a36fcdba", "url": "https://github.com/apache/cloudstack/commit/491624f126f9112fa2bac23e6794d1d1a36fcdba", "message": "Change the approach to get host details for different hypervisors - Marvin", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "f836200d422f85098fd68a66fece4b336e2a7258", "url": "https://github.com/apache/cloudstack/commit/f836200d422f85098fd68a66fece4b336e2a7258", "message": "Increase robustness of router IP address validation", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "102e2df1bb83af36f8c250a4473a926e1b95c68a", "url": "https://github.com/apache/cloudstack/commit/102e2df1bb83af36f8c250a4473a926e1b95c68a", "message": "Fix IP address conflict", "committedDate": "2021-02-12T07:22:05Z", "type": "commit"}, {"oid": "e09624bc73e60577ca19c19209bd2a3a946dc536", "url": "https://github.com/apache/cloudstack/commit/e09624bc73e60577ca19c19209bd2a3a946dc536", "message": "Port UI changes from https://github.com/apache/cloudstack-primate/pull/872", "committedDate": "2021-02-12T08:26:55Z", "type": "commit"}, {"oid": "e09624bc73e60577ca19c19209bd2a3a946dc536", "url": "https://github.com/apache/cloudstack/commit/e09624bc73e60577ca19c19209bd2a3a946dc536", "message": "Port UI changes from https://github.com/apache/cloudstack-primate/pull/872", "committedDate": "2021-02-12T08:26:55Z", "type": "forcePushed"}]}