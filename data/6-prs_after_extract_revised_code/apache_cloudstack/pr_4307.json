{"pr_number": 4307, "pr_title": "[VMware] vSphere advanced capabilities and Full OVF properties support", "pr_createdAt": "2020-09-07T18:03:12Z", "pr_url": "https://github.com/apache/cloudstack/pull/4307", "timeline": [{"oid": "bb4ce2118ddac69fda923208431a754ae5168dca", "url": "https://github.com/apache/cloudstack/commit/bb4ce2118ddac69fda923208431a754ae5168dca", "message": "Add new template and vm deploy as is details table and refactor", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "f73830acbbd5760dbea2acb43da357b2e8e6e2ab", "url": "https://github.com/apache/cloudstack/commit/f73830acbbd5760dbea2acb43da357b2e8e6e2ab", "message": "Refactor deploy as is constants", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "44bae9866428539b388578487364f3893f0951c1", "url": "https://github.com/apache/cloudstack/commit/44bae9866428539b388578487364f3893f0951c1", "message": "Fix daos issue", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "818981d8a7ef703125bc56d81c36b92653ba80a8", "url": "https://github.com/apache/cloudstack/commit/818981d8a7ef703125bc56d81c36b92653ba80a8", "message": "Fix typo", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "6ebfdc68545f66539010905b59973a3ed18c7b65", "url": "https://github.com/apache/cloudstack/commit/6ebfdc68545f66539010905b59973a3ed18c7b65", "message": "Dettached datadisk migration failed between NFS storages.\nFixed the issue of worker VM name being null", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "44dc0c607288cee1e2db4194ac106c3399ded064", "url": "https://github.com/apache/cloudstack/commit/44dc0c607288cee1e2db4194ac106c3399ded064", "message": "Fixed rat failure on new class DeployAsIsHelper.java\nAlso removed some unused imports during rebase", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "33ae2afc8979b0d9f6b749c5ab8ceb731050f7b1", "url": "https://github.com/apache/cloudstack/commit/33ae2afc8979b0d9f6b749c5ab8ceb731050f7b1", "message": "Removed few duplicate imports during rebase with master", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "745dd00c9aaaeeb9dc30eeb3959e29c997aea204", "url": "https://github.com/apache/cloudstack/commit/745dd00c9aaaeeb9dc30eeb3959e29c997aea204", "message": "Remove duplicate schema changes", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9c162c6de9d79cdd6f4aa50f95dfa0298bc57a65", "url": "https://github.com/apache/cloudstack/commit/9c162c6de9d79cdd6f4aa50f95dfa0298bc57a65", "message": "Fix ISO upload on Deploy OVF task", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "61e7625d49e484ba6af855ca7b19c9f0fc5521ac", "url": "https://github.com/apache/cloudstack/commit/61e7625d49e484ba6af855ca7b19c9f0fc5521ac", "message": "Do not set user-configurable details for deploy-as-is VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "a43d0a6085fe9bbcb84fdae92484355910060da0", "url": "https://github.com/apache/cloudstack/commit/a43d0a6085fe9bbcb84fdae92484355910060da0", "message": "Fix VM power sync NPE on system VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "edfbed34adb978e3798e2b84163d2a5b9b5e959e", "url": "https://github.com/apache/cloudstack/commit/edfbed34adb978e3798e2b84163d2a5b9b5e959e", "message": "Use network adapter from OVF on deploy-as-is", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "acf872cdabca544bf13e4d9bd7d0a447d52413f8", "url": "https://github.com/apache/cloudstack/commit/acf872cdabca544bf13e4d9bd7d0a447d52413f8", "message": "Relocate deploy-as-is cloned VM if does not end on the host receiving the start command and restore deployment logs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "c6c4bfe30ca3026ea1ca7cc32916460d912c0623", "url": "https://github.com/apache/cloudstack/commit/c6c4bfe30ca3026ea1ca7cc32916460d912c0623", "message": "Fix deploy as is with datadisks", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "89aa25d023608cc84aefb9dd229cb101f7e042a0", "url": "https://github.com/apache/cloudstack/commit/89aa25d023608cc84aefb9dd229cb101f7e042a0", "message": "VM deployment from ISO not working on VSAN65, fixed by adding a backup to create disk using old way", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "41354227e27c8b2bf3aaa3f05deaa7e18446620c", "url": "https://github.com/apache/cloudstack/commit/41354227e27c8b2bf3aaa3f05deaa7e18446620c", "message": "Handle guest OS read from deploy-as-is OVF descriptor", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "7a8dd46b326199db649f2abb54090556970cb0c7", "url": "https://github.com/apache/cloudstack/commit/7a8dd46b326199db649f2abb54090556970cb0c7", "message": "Fix deploy as-is disks cleanup", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "bb90ce5bd783687925c0b419582e94ad11957a9a", "url": "https://github.com/apache/cloudstack/commit/bb90ce5bd783687925c0b419582e94ad11957a9a", "message": "Fix for dettached disk migrations from vVols to other datastores", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "81b184877bc7287d32cd85dc2059e06f3df94e97", "url": "https://github.com/apache/cloudstack/commit/81b184877bc7287d32cd85dc2059e06f3df94e97", "message": "Added SesParse support which is an improved version of VMFSsparse virtual disk format", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "32d85b0fa23e36374e3a221f44420f6b3cb78c92", "url": "https://github.com/apache/cloudstack/commit/32d85b0fa23e36374e3a221f44420f6b3cb78c92", "message": "Display storage on logging when not deploy-as-is and guest OS small refactor", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "667cb53772104387576012c783435dc06865a0b6", "url": "https://github.com/apache/cloudstack/commit/667cb53772104387576012c783435dc06865a0b6", "message": "Fix mismatch from OVF nic adapter type and expected adapter type string", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "78aa3df440e6899724be4f805ddc2c65a46d506c", "url": "https://github.com/apache/cloudstack/commit/78aa3df440e6899724be4f805ddc2c65a46d506c", "message": "Fix reboot deploy-as-is VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "b0d3168e0b78085036c05245c638b3a0d7eb7750", "url": "https://github.com/apache/cloudstack/commit/b0d3168e0b78085036c05245c638b3a0d7eb7750", "message": "Fail template registration when guest OS not found", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "6e81efa2c97c37834368600fd62407c3d6677e67", "url": "https://github.com/apache/cloudstack/commit/6e81efa2c97c37834368600fd62407c3d6677e67", "message": "Start addressing review comments", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9543fd6e6abd976fd1cc2d49b913daf5431fa7b2", "url": "https://github.com/apache/cloudstack/commit/9543fd6e6abd976fd1cc2d49b913daf5431fa7b2", "message": "Fix startcommand on Datastore cluster when the volume datastore in CloudStack mismatches with vCenter datastore. Volume could have migrated with in datastore cluster which caused the mismatch\n\nFix dettach volume when volume is not on CloudStack intended datastore", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "2f0387772368cd4ca06d38658e696aaf90c1cb2e", "url": "https://github.com/apache/cloudstack/commit/2f0387772368cd4ca06d38658e696aaf90c1cb2e", "message": "Search in possible folders for volume while dettaching the volume", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9b51a706db75eb2fa5f463c44018b0af6f3ebb08", "url": "https://github.com/apache/cloudstack/commit/9b51a706db75eb2fa5f463c44018b0af6f3ebb08", "message": "Set deploy-as-is to default on VMware", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "46d412d998ee3331633242e2d2271995527a75a3", "url": "https://github.com/apache/cloudstack/commit/46d412d998ee3331633242e2d2271995527a75a3", "message": "Fix for system VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "94bebe8792ca061ddda7794f9cb28d029d1e77d2", "url": "https://github.com/apache/cloudstack/commit/94bebe8792ca061ddda7794f9cb28d029d1e77d2", "message": "Revert back deploy as is column on templates but keep it as default for new templates", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "897cc4bdba3d9d8d79a877c0389ff7a41746b8b0", "url": "https://github.com/apache/cloudstack/commit/897cc4bdba3d9d8d79a877c0389ff7a41746b8b0", "message": "Fix nested virt marvin test", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "588b7a1c90b7d7921dfcdc0a346f45ebc854f1d8", "url": "https://github.com/apache/cloudstack/commit/588b7a1c90b7d7921dfcdc0a346f45ebc854f1d8", "message": "Cleanup volume wrapper VM(ROOT-xxx) while deploying VM in case of any failure. since the same name will be used on retries and that will eventually fails saying volume wrapper VM already exists.", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9b923ba9dc0a63fa53ace11cc89b4c4c37c2c6b0", "url": "https://github.com/apache/cloudstack/commit/9b923ba9dc0a63fa53ace11cc89b4c4c37c2c6b0", "message": "Handle detach volume of datastore cluster if the volume name has changed at vCenter level and reconsile the chaininfo", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "388a9c2c6daf40a581658e091ed6f01a9120a619", "url": "https://github.com/apache/cloudstack/commit/388a9c2c6daf40a581658e091ed6f01a9120a619", "message": "Reconcile chaininfo after attaching volume", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9dd1d60db978806b84f021e841a09edb8cfbdf80", "url": "https://github.com/apache/cloudstack/commit/9dd1d60db978806b84f021e841a09edb8cfbdf80", "message": "Fix multidisk VM deployment on vVol datastore", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "db46a7ab210010a16f6b8d6f5e46a5e960e086c3", "url": "https://github.com/apache/cloudstack/commit/db46a7ab210010a16f6b8d6f5e46a5e960e086c3", "message": "Fix migrate root volume issue caused by regression from one of the commits", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "d69283a01337caf6b67a9409e9a673c7c17ba5b8", "url": "https://github.com/apache/cloudstack/commit/d69283a01337caf6b67a9409e9a673c7c17ba5b8", "message": "Fix reset/restore VM", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "3063b6cae5664581604849b247b75551bef2272d", "url": "https://github.com/apache/cloudstack/commit/3063b6cae5664581604849b247b75551bef2272d", "message": "Fixed import VM for NFS storage which added as presetup.\nPrevious code assumes the NFS storage is always added by CloudStack, but NFS can also be added as presetup storagepool.", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "dc4f913afaa3def370511bc47cb8eeab2002e20f", "url": "https://github.com/apache/cloudstack/commit/dc4f913afaa3def370511bc47cb8eeab2002e20f", "message": "Fix restrictions on attach and restore VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "cee71c67ea3673f1994f6db0cb3153a9d9b5369c", "url": "https://github.com/apache/cloudstack/commit/cee71c67ea3673f1994f6db0cb3153a9d9b5369c", "message": "Remove deploy as is option from the old UI", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "a54436b790b758800f8afe4d1c29fe278894e48b", "url": "https://github.com/apache/cloudstack/commit/a54436b790b758800f8afe4d1c29fe278894e48b", "message": "service offering response: added vsphere storage policy to response if exists", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "1e4e5cf4c03ece9e02097654d414563c7c91e499", "url": "https://github.com/apache/cloudstack/commit/1e4e5cf4c03ece9e02097654d414563c7c91e499", "message": "Disk offering response: added vsphere storage policy to response if exists", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "46b5322d9bb6631e3136f18f005624419c21a8c0", "url": "https://github.com/apache/cloudstack/commit/46b5322d9bb6631e3136f18f005624419c21a8c0", "message": "Adding vSphere storage policy to disk on start command and attach volume command", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "5fdabc1cb00d40f3277147599e4a894cf68d59f9", "url": "https://github.com/apache/cloudstack/commit/5fdabc1cb00d40f3277147599e4a894cf68d59f9", "message": "Added storage policy details to disk while creating disk and restricted migration of volumes to storage pools which are not storage policy compliance", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "048e8c8744bf82daf852dbdac42f1bb8bd64e58d", "url": "https://github.com/apache/cloudstack/commit/048e8c8744bf82daf852dbdac42f1bb8bd64e58d", "message": "Fixed the issue of VM deletion not cleaning the VM folder on vVols datastore. Fixed it by deleting the VM as complete entity including the extra root disks.", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "88c02efd2720047fee32788de64d1259e29767f0", "url": "https://github.com/apache/cloudstack/commit/88c02efd2720047fee32788de64d1259e29767f0", "message": "Fix deploy-as-is templates GC", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "3600b3c7bc5a03b1abf8ae6dde7c06b6faf2ec04", "url": "https://github.com/apache/cloudstack/commit/3600b3c7bc5a03b1abf8ae6dde7c06b6faf2ec04", "message": "Reconcile root disk controller fix", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "d81f05091837e161972dd687ac5b91387d2b0878", "url": "https://github.com/apache/cloudstack/commit/d81f05091837e161972dd687ac5b91387d2b0878", "message": "Check storage policy of disk offering if it suitable for storage pool while using migratevirtualmachinewithvolume API", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "950292dcb059f9c76ec196ffb5ce035ec5485277", "url": "https://github.com/apache/cloudstack/commit/950292dcb059f9c76ec196ffb5ce035ec5485277", "message": "Ensure deploy as is disks get allocated to the same storage pool", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "ee5b8763a6b7cafee7310304dcaad30bfbd8f453", "url": "https://github.com/apache/cloudstack/commit/ee5b8763a6b7cafee7310304dcaad30bfbd8f453", "message": "Fix remove VM and its volumes for deploy-as-is if have previously failed - restore cpu flags in nested virtualization test", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "38e119a09998a62fb40ae78fc56bec34f8af77bc", "url": "https://github.com/apache/cloudstack/commit/38e119a09998a62fb40ae78fc56bec34f8af77bc", "message": "Throwing error if ostypeid, nicAdapter, rootDiskController is passed for VMWare templates", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "6b715ecb532f22a67337d803408e48df68c0dc23", "url": "https://github.com/apache/cloudstack/commit/6b715ecb532f22a67337d803408e48df68c0dc23", "message": "Throwing error if boot type or boot mode specified while deploying VMs on VMware", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "b8a79aba9222f3b9bce865fb8fd4fca475b1bb63", "url": "https://github.com/apache/cloudstack/commit/b8a79aba9222f3b9bce865fb8fd4fca475b1bb63", "message": "Elaborating error", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "6e6d6d60b7946f5c4217b46aaf22442449936d5c", "url": "https://github.com/apache/cloudstack/commit/6e6d6d60b7946f5c4217b46aaf22442449936d5c", "message": "Fix template registration", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "50ab1b2fbe84aa60d8d7adc12919bebc83b5e003", "url": "https://github.com/apache/cloudstack/commit/50ab1b2fbe84aa60d8d7adc12919bebc83b5e003", "message": "Add missing guest OS entries for VMware", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "50ab1b2fbe84aa60d8d7adc12919bebc83b5e003", "url": "https://github.com/apache/cloudstack/commit/50ab1b2fbe84aa60d8d7adc12919bebc83b5e003", "message": "Add missing guest OS entries for VMware", "committedDate": "2020-10-19T09:35:58Z", "type": "forcePushed"}, {"oid": "67794aba232c592e685c56b4089e5f7bd893f43c", "url": "https://github.com/apache/cloudstack/commit/67794aba232c592e685c56b4089e5f7bd893f43c", "message": "Fix reinstall VM bug", "committedDate": "2020-10-20T06:00:21Z", "type": "commit"}, {"oid": "5797cf5e170c9b42e5d265c76126768c28b416dc", "url": "https://github.com/apache/cloudstack/commit/5797cf5e170c9b42e5d265c76126768c28b416dc", "message": "guest-os-GC (#67)", "committedDate": "2020-10-20T13:40:03Z", "type": "commit"}, {"oid": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "url": "https://github.com/apache/cloudstack/commit/ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "message": "Smoke test for VMWare storage policies.", "committedDate": "2020-10-20T15:37:56Z", "type": "commit"}, {"oid": "f1f490b1514aaebc2c3cd008c4e757e7c41934fc", "url": "https://github.com/apache/cloudstack/commit/f1f490b1514aaebc2c3cd008c4e757e7c41934fc", "message": "Fix restore VM workflow - clone and replace existing VM instead of cloning and moving disks", "committedDate": "2020-10-20T22:47:27Z", "type": "commit"}, {"oid": "17783cb22f0d438a836cf80c01a97e518994783b", "url": "https://github.com/apache/cloudstack/commit/17783cb22f0d438a836cf80c01a97e518994783b", "message": "Merge branch 'ovfprops-and-vsphere-adv-together' of github.com:shapeblue/cloudstack into ovfprops-and-vsphere-adv-together", "committedDate": "2020-10-20T22:47:58Z", "type": "commit"}, {"oid": "68d51cb333eeb303e9fa02a8448e34628812867f", "url": "https://github.com/apache/cloudstack/commit/68d51cb333eeb303e9fa02a8448e34628812867f", "message": "Remove unused code", "committedDate": "2020-10-20T22:57:42Z", "type": "commit"}, {"oid": "01013302133ea99f8576299faabb5240f6ac0525", "url": "https://github.com/apache/cloudstack/commit/01013302133ea99f8576299faabb5240f6ac0525", "message": "class object cleanup and append", "committedDate": "2020-10-21T07:26:30Z", "type": "commit"}, {"oid": "95816499d8be83b2436fbe8a9e41b2c3d0189b78", "url": "https://github.com/apache/cloudstack/commit/95816499d8be83b2436fbe8a9e41b2c3d0189b78", "message": "cleanup the right object list in the right order", "committedDate": "2020-10-21T07:27:43Z", "type": "commit"}, {"oid": "6db6660a0c9bb69a3297a83c1c402ac17a4fc0cb", "url": "https://github.com/apache/cloudstack/commit/6db6660a0c9bb69a3297a83c1c402ac17a4fc0cb", "message": "object creation seperated from filling it", "committedDate": "2020-10-21T07:29:07Z", "type": "commit"}, {"oid": "6cde21048a0fdca87890f248b50d302be755d0c2", "url": "https://github.com/apache/cloudstack/commit/6cde21048a0fdca87890f248b50d302be755d0c2", "message": "make sure dependencies get cleaned up after their depenedants", "committedDate": "2020-10-21T07:30:26Z", "type": "commit"}, {"oid": "ff197b2b56ff8280730e5079f4c7272e5bf78b78", "url": "https://github.com/apache/cloudstack/commit/ff197b2b56ff8280730e5079f4c7272e5bf78b78", "message": "readability/formatting", "committedDate": "2020-10-21T07:31:29Z", "type": "commit"}, {"oid": "8c68843142863735a9e868de8496f9c63ea66db7", "url": "https://github.com/apache/cloudstack/commit/8c68843142863735a9e868de8496f9c63ea66db7", "message": "Fix boot into hardware", "committedDate": "2020-10-21T14:47:15Z", "type": "commit"}, {"oid": "5d24e735f5d2ab699ed679cd1a9a9b317c5bb7ac", "url": "https://github.com/apache/cloudstack/commit/5d24e735f5d2ab699ed679cd1a9a9b317c5bb7ac", "message": "Fix smoke tests passing osTypeId parameter on VMware templates registration", "committedDate": "2020-10-22T04:26:54Z", "type": "commit"}, {"oid": "187813a20904fa363519374cef66ebb7c8ce3c61", "url": "https://github.com/apache/cloudstack/commit/187813a20904fa363519374cef66ebb7c8ce3c61", "message": "Fixes after smoke tests results on VMware", "committedDate": "2020-10-22T20:14:26Z", "type": "commit"}, {"oid": "0c6900e3bd47be005108c5b494de0518b93e978b", "url": "https://github.com/apache/cloudstack/commit/0c6900e3bd47be005108c5b494de0518b93e978b", "message": "Do not fail if osTypeId parameter or rootdiskcontroller/nicadapter details are set on template registration", "committedDate": "2020-10-23T13:39:21Z", "type": "commit"}, {"oid": "0d7c582e22d12e2bcca637967d5de201211248e4", "url": "https://github.com/apache/cloudstack/commit/0d7c582e22d12e2bcca637967d5de201211248e4", "message": "Fix macchinina checksums for VMware", "committedDate": "2020-10-24T15:59:59Z", "type": "commit"}, {"oid": "d119a5d19f3ea416482c53fe0570d2979e15c98d", "url": "https://github.com/apache/cloudstack/commit/d119a5d19f3ea416482c53fe0570d2979e15c98d", "message": "Merge branch 'master' into ovfprops-and-vsphere-adv-together", "committedDate": "2020-10-24T16:02:31Z", "type": "commit"}, {"oid": "a831ad125276208119379673f0ace7fbe3287d3c", "url": "https://github.com/apache/cloudstack/commit/a831ad125276208119379673f0ace7fbe3287d3c", "message": "Fix detach volume on stopped Vms", "committedDate": "2020-10-25T03:33:46Z", "type": "commit"}, {"oid": "c405e5dc31242e64fee2fd70b1df7f3f7209405a", "url": "https://github.com/apache/cloudstack/commit/c405e5dc31242e64fee2fd70b1df7f3f7209405a", "message": "Add new API to check storage policy compatible pools and fix marvin test for storage policies", "committedDate": "2020-10-25T05:19:22Z", "type": "commit"}, {"oid": "85f5512ec3bdde91792faa92e4210035bc71cbc1", "url": "https://github.com/apache/cloudstack/commit/85f5512ec3bdde91792faa92e4210035bc71cbc1", "message": "Fix unit test failure", "committedDate": "2020-10-25T05:53:43Z", "type": "commit"}, {"oid": "795dc01212afb8b3f3334f54af91883f40edaab7", "url": "https://github.com/apache/cloudstack/commit/795dc01212afb8b3f3334f54af91883f40edaab7", "message": "Fix for none type response error handling", "committedDate": "2020-10-25T18:14:04Z", "type": "commit"}, {"oid": "7d7e7f794125dafbfa483766b73e1a82edfad62a", "url": "https://github.com/apache/cloudstack/commit/7d7e7f794125dafbfa483766b73e1a82edfad62a", "message": "Check there is at least a host to verify pool compatibility for a storage policy", "committedDate": "2020-10-26T12:07:23Z", "type": "commit"}, {"oid": "75019442f6b484ec331622ec579de361257d083d", "url": "https://github.com/apache/cloudstack/commit/75019442f6b484ec331622ec579de361257d083d", "message": "Fix storage policy smoke test", "committedDate": "2020-10-26T12:45:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwOTA0Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r529209046", "bodyText": "these changes are reverted in the PR #4493 , as the data disks (which are not to be deleted) are being detached on destroy VM, which is breaking the existing behavior.", "author": "sureshanaparti", "createdAt": "2020-11-24T05:19:11Z", "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "diffHunk": "@@ -2899,14 +2899,20 @@ public UserVm destroyVm(DestroyVMCmd cmd) throws ResourceUnavailableException, C\n         }\n         s_logger.debug(\"Found no ongoing snapshots on volume of type ROOT, for the vm with id \" + vmId);\n \n-        List<VolumeVO> volumes = getVolumesFromIds(cmd);\n+        List<VolumeVO> volumesToBeDeleted = getVolumesFromIds(cmd);\n \n-        checkForUnattachedVolumes(vmId, volumes);\n-        validateVolumes(volumes);\n+        checkForUnattachedVolumes(vmId, volumesToBeDeleted);\n+        validateVolumes(volumesToBeDeleted);\n \n         stopVirtualMachine(vmId, VmDestroyForcestop.value());\n \n-        detachVolumesFromVm(volumes);\n+        if (vm.getHypervisorType() == HypervisorType.VMware) {\n+            List<VolumeVO> allVolumes = _volsDao.findByInstance(vm.getId());\n+            allVolumes.removeIf(vol -> vol.getVolumeType() == Volume.Type.ROOT);\n+            detachVolumesFromVm(allVolumes);\n+        } else {\n+            detachVolumesFromVm(volumesToBeDeleted);\n+        }", "originalCommit": "75019442f6b484ec331622ec579de361257d083d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "33346abdc20829b34cd8b71a0f22539124de639f", "url": "https://github.com/apache/cloudstack/commit/33346abdc20829b34cd8b71a0f22539124de639f", "message": "Fixed rat failure on new class DeployAsIsHelper.java\nAlso removed some unused imports during rebase", "committedDate": "2020-09-17T06:24:37Z", "type": "forcePushed"}, {"oid": "2cebfb784a40787abdc2a5509a8a517baffc0526", "url": "https://github.com/apache/cloudstack/commit/2cebfb784a40787abdc2a5509a8a517baffc0526", "message": "Removed few duplicate imports during rebase with master", "committedDate": "2020-09-17T08:19:31Z", "type": "forcePushed"}, {"oid": "e1d73adc137be2ea5853545224ccd6b1455be15b", "url": "https://github.com/apache/cloudstack/commit/e1d73adc137be2ea5853545224ccd6b1455be15b", "message": "Relocate deploy-as-is cloned VM if does not end on the host receiving the start command and restore deployment logs", "committedDate": "2020-09-22T06:48:06Z", "type": "forcePushed"}, {"oid": "5619879db62025324ae1ffa4002ca47a71a880b0", "url": "https://github.com/apache/cloudstack/commit/5619879db62025324ae1ffa4002ca47a71a880b0", "message": "Fix deploy as is with datadisks", "committedDate": "2020-09-24T10:09:42Z", "type": "forcePushed"}, {"oid": "2e5f6f58f80b90fd1edb3485afcfec7bc3530daa", "url": "https://github.com/apache/cloudstack/commit/2e5f6f58f80b90fd1edb3485afcfec7bc3530daa", "message": "Fix deploy as-is disks cleanup", "committedDate": "2020-09-25T06:42:39Z", "type": "forcePushed"}, {"oid": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "url": "https://github.com/apache/cloudstack/commit/0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "message": "Get allocated size for datastoreCluster from its child datastores to show the accumalated value for Datastore cluster", "committedDate": "2020-09-29T10:31:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNDEwNg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496704106", "bodyText": "add a since = \"4.15\"", "author": "DaanHoogland", "createdAt": "2020-09-29T13:11:51Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/template/ListTemplatesCmd.java", "diffHunk": "@@ -82,10 +86,35 @@\n     @Parameter(name = ApiConstants.PARENT_TEMPLATE_ID, type = CommandType.UUID, entityType = TemplateResponse.class, description = \"list datadisk templates by parent template id\", since = \"4.4\")\n     private Long parentTemplateId;\n \n+    @Parameter(name = ApiConstants.DETAILS,", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e81efa2c97c37834368600fd62407c3d6677e67", "chunk": "diff --git a/api/src/main/java/org/apache/cloudstack/api/command/user/template/ListTemplatesCmd.java b/api/src/main/java/org/apache/cloudstack/api/command/user/template/ListTemplatesCmd.java\nindex 157118285f..5ef66c50b9 100644\n--- a/api/src/main/java/org/apache/cloudstack/api/command/user/template/ListTemplatesCmd.java\n+++ b/api/src/main/java/org/apache/cloudstack/api/command/user/template/ListTemplatesCmd.java\n\n@@ -89,7 +89,8 @@ public class ListTemplatesCmd extends BaseListTaggedResourcesCmd implements User\n     @Parameter(name = ApiConstants.DETAILS,\n             type = CommandType.LIST,\n             collectionType = CommandType.STRING,\n-            description = \"comma separated list of template details requested, value can be a list of [ all, resource, min]\")\n+            since = \"4.15\",\n+            description = \"comma separated list of template details requested, value can be a list of [ all, min]\")\n     private List<String> viewDetails;\n \n     /////////////////////////////////////////////////////\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxMTk1MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496711951", "bodyText": "add since = \"4.15\"", "author": "DaanHoogland", "createdAt": "2020-09-29T13:22:57Z", "path": "api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java", "diffHunk": "@@ -194,12 +195,22 @@\n     @Param(description = \"KVM Only: true if template is directly downloaded to Primary Storage bypassing Secondary Storage\")\n     private Boolean directDownload;\n \n+    @SerializedName(ApiConstants.DEPLOY_AS_IS)\n+    @Param(description = \"VMware only: true if template is deployed without orchestrating disks and networks but \\\"as-is\\\" defined in the template.\")", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e81efa2c97c37834368600fd62407c3d6677e67", "chunk": "diff --git a/api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java b/api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java\nindex c733f37a9f..6e69923016 100644\n--- a/api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java\n+++ b/api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java\n\n@@ -196,11 +196,13 @@ public class TemplateResponse extends BaseResponseWithTagInformation implements\n     private Boolean directDownload;\n \n     @SerializedName(ApiConstants.DEPLOY_AS_IS)\n-    @Param(description = \"VMware only: true if template is deployed without orchestrating disks and networks but \\\"as-is\\\" defined in the template.\")\n+    @Param(description = \"VMware only: true if template is deployed without orchestrating disks and networks but \\\"as-is\\\" defined in the template.\",\n+            since = \"4.15\")\n     private Boolean deployAsIs;\n \n     @SerializedName(ApiConstants.DEPLOY_AS_IS_DETAILS)\n-    @Param(description = \"VMware only: additional key/value details tied with deploy-as-is template\")\n+    @Param(description = \"VMware only: additional key/value details tied with deploy-as-is template\",\n+            since = \"4.15\")\n     private Map<String, String> deployAsIsDetails;\n \n     @SerializedName(\"parenttemplateid\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxMjA1MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496712051", "bodyText": "add since = \"4.15\"", "author": "DaanHoogland", "createdAt": "2020-09-29T13:23:06Z", "path": "api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java", "diffHunk": "@@ -194,12 +195,22 @@\n     @Param(description = \"KVM Only: true if template is directly downloaded to Primary Storage bypassing Secondary Storage\")\n     private Boolean directDownload;\n \n+    @SerializedName(ApiConstants.DEPLOY_AS_IS)\n+    @Param(description = \"VMware only: true if template is deployed without orchestrating disks and networks but \\\"as-is\\\" defined in the template.\")\n+    private Boolean deployAsIs;\n+\n+    @SerializedName(ApiConstants.DEPLOY_AS_IS_DETAILS)\n+    @Param(description = \"VMware only: additional key/value details tied with deploy-as-is template\")", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e81efa2c97c37834368600fd62407c3d6677e67", "chunk": "diff --git a/api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java b/api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java\nindex c733f37a9f..6e69923016 100644\n--- a/api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java\n+++ b/api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java\n\n@@ -196,11 +196,13 @@ public class TemplateResponse extends BaseResponseWithTagInformation implements\n     private Boolean directDownload;\n \n     @SerializedName(ApiConstants.DEPLOY_AS_IS)\n-    @Param(description = \"VMware only: true if template is deployed without orchestrating disks and networks but \\\"as-is\\\" defined in the template.\")\n+    @Param(description = \"VMware only: true if template is deployed without orchestrating disks and networks but \\\"as-is\\\" defined in the template.\",\n+            since = \"4.15\")\n     private Boolean deployAsIs;\n \n     @SerializedName(ApiConstants.DEPLOY_AS_IS_DETAILS)\n-    @Param(description = \"VMware only: additional key/value details tied with deploy-as-is template\")\n+    @Param(description = \"VMware only: additional key/value details tied with deploy-as-is template\",\n+            since = \"4.15\")\n     private Map<String, String> deployAsIsDetails;\n \n     @SerializedName(\"parenttemplateid\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjA2OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496716069", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:28:23Z", "path": "core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.agent.api;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java b/core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java\ndeleted file mode 100644\nindex d1d1393efe..0000000000\n--- a/core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package com.cloud.agent.api;\n-\n-public class ValidateVcenterDetailsCommand extends Command {\n-\n-    String vCenterServerAddress;\n-\n-    public ValidateVcenterDetailsCommand(String vCenterServerAddress) {\n-        this.vCenterServerAddress = vCenterServerAddress;\n-    }\n-\n-    public String getvCenterServerAddress() {\n-        return vCenterServerAddress;\n-    }\n-\n-    public void setvCenterServerAddress(String vCenterServerAddress) {\n-        this.vCenterServerAddress = vCenterServerAddress;\n-    }\n-\n-    @Override\n-    public boolean executeInSequence() {\n-        return false;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjMzMg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496716332", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:28:44Z", "path": "api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java b/api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java\nindex d82a2975ea..cc0e1d01d0 100644\n--- a/api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java\n+++ b/api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java\n\n@@ -27,17 +27,14 @@ public class DeployAsIsInfoTO {\n     private String destStoragePool;\n     @LogLevel(LogLevel.Log4jLevel.Off)\n     private Map<String, String> properties = new HashMap<>();\n-    private Map<Integer, String> nicAdapterMap = new HashMap();\n \n     public DeployAsIsInfoTO() {\n     }\n \n-    public DeployAsIsInfoTO(String templatePath, String destStoragePool, Map<String, String> properties,\n-                            Map<Integer, String> nicAdapterMap) {\n+    public DeployAsIsInfoTO(String templatePath, String destStoragePool, Map<String, String> properties) {\n         this.templatePath = templatePath;\n         this.destStoragePool = destStoragePool;\n         this.properties = properties;\n-        this.nicAdapterMap = nicAdapterMap;\n     }\n \n     public String getTemplatePath() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjc4OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496716789", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:29:18Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java", "diffHunk": "@@ -0,0 +1,49 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java\ndeleted file mode 100644\nindex 893661782f..0000000000\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-package com.cloud.agent.api.to.deployasis;\n-\n-import com.cloud.agent.api.LogLevel;\n-\n-/**\n- * End-user licence agreement\n- */\n-public class OVFEulaSectionTO implements TemplateDeployAsIsInformationTO {\n-    private String info;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private byte[] compressedLicense;\n-    private int index;\n-\n-    public OVFEulaSectionTO(String info, byte[] license, int eulaIndex) {\n-        this.info = info;\n-        this.compressedLicense = license;\n-        this.index = eulaIndex;\n-    }\n-\n-    public String getInfo() {\n-        return this.info;\n-    }\n-\n-    public byte[] getCompressedLicense() {\n-        return this.compressedLicense;\n-    }\n-\n-    public int getIndex() {\n-        return index;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjkwNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496716904", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:29:28Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java", "diffHunk": "@@ -0,0 +1,61 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e81efa2c97c37834368600fd62407c3d6677e67", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java\nindex f3cb75089a..aa3c603f3d 100644\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java\n+++ b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java\n\n@@ -20,6 +20,9 @@ package com.cloud.agent.api.to.deployasis;\n \n import java.util.List;\n \n+/**\n+ * This class represents a template deployment option (configuration) parsed from the OVF\n+ */\n public class OVFConfigurationTO implements TemplateDeployAsIsInformationTO {\n \n     private final String id;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNzE1NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496717154", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:29:44Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFNetworkTO.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFNetworkTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFNetworkTO.java\ndeleted file mode 100644\nindex 9b05dbc186..0000000000\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFNetworkTO.java\n+++ /dev/null\n\n@@ -1,124 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.agent.api.to.deployasis;\n-\n-/**\n- * container for the network prerequisites as found in the appliance template\n- *\n- * for OVA:\n- * {code}\n- * <Network ovf:name=\"Management0-0\">\n- *   <Description>Management Network Interface</Description>\n- * </Network>\n- * {code}\n- * {code}\n- * <Item>\n- *   <rasd:AddressOnParent>7</rasd:AddressOnParent>\n- *   <rasd:AutomaticAllocation>true</rasd:AutomaticAllocation>\n- *   <rasd:Connection>Management0-0</rasd:Connection>\n- *   <rasd:Description>E1000 Ethernet adapter on \"Management Network\"</rasd:Description>\n- *   <rasd:ElementName>Network adapter 1</rasd:ElementName>\n- *   <rasd:InstanceID>6</rasd:InstanceID>\n- *   <rasd:ResourceSubType>E1000</rasd:ResourceSubType>\n- *   <rasd:ResourceType>10</rasd:ResourceType>\n- * </Item>\n- * {code}\n- */\n-public class OVFNetworkTO implements TemplateDeployAsIsInformationTO {\n-    String name;\n-    String networkDescription;\n-\n-    int addressOnParent;\n-    boolean automaticAllocation;\n-    String nicDescription;\n-    String elementName;\n-    int InstanceID;\n-    String resourceSubType;\n-    String resourceType;\n-\n-    public int getAddressOnParent() {\n-        return addressOnParent;\n-    }\n-\n-    public void setAddressOnParent(int addressOnParent) {\n-        this.addressOnParent = addressOnParent;\n-    }\n-\n-    public boolean isAutomaticAllocation() {\n-        return automaticAllocation;\n-    }\n-\n-    public void setAutomaticAllocation(boolean automaticAllocation) {\n-        this.automaticAllocation = automaticAllocation;\n-    }\n-\n-    public String getNicDescription() {\n-        return nicDescription;\n-    }\n-\n-    public void setNicDescription(String nicDescription) {\n-        this.nicDescription = nicDescription;\n-    }\n-\n-    public String getElementName() {\n-        return elementName;\n-    }\n-\n-    public void setElementName(String elementName) {\n-        this.elementName = elementName;\n-    }\n-\n-    public int getInstanceID() {\n-        return InstanceID;\n-    }\n-\n-    public void setInstanceID(int instanceID) {\n-        InstanceID = instanceID;\n-    }\n-\n-    public String getResourceSubType() {\n-        return resourceSubType;\n-    }\n-\n-    public void setResourceSubType(String resourceSubType) {\n-        this.resourceSubType = resourceSubType;\n-    }\n-\n-    public String getResourceType() {\n-        return resourceType;\n-    }\n-\n-    public void setResourceType(String resourceType) {\n-        this.resourceType = resourceType;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getNetworkDescription() {\n-        return networkDescription;\n-    }\n-\n-    public void setNetworkDescription(String networkDescription) {\n-        this.networkDescription = networkDescription;\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODQzNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496718437", "bodyText": "small javadoc ?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OVFConfigurationTO implements TemplateDeployAsIsInformationTO {\n          \n          \n            \n            /**\n          \n          \n            \n             * contains lists of configurations items, parsed from the OVF\n          \n          \n            \n             */\n          \n          \n            \n            public class OVFConfigurationTO implements TemplateDeployAsIsInformationTO {", "author": "DaanHoogland", "createdAt": "2020-09-29T13:31:23Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java", "diffHunk": "@@ -0,0 +1,61 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;\n+\n+import java.util.List;\n+\n+public class OVFConfigurationTO implements TemplateDeployAsIsInformationTO {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e81efa2c97c37834368600fd62407c3d6677e67", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java\nindex f3cb75089a..aa3c603f3d 100644\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java\n+++ b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java\n\n@@ -20,6 +20,9 @@ package com.cloud.agent.api.to.deployasis;\n \n import java.util.List;\n \n+/**\n+ * This class represents a template deployment option (configuration) parsed from the OVF\n+ */\n public class OVFConfigurationTO implements TemplateDeployAsIsInformationTO {\n \n     private final String id;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxOTExNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496719114", "bodyText": "\ud83d\udc4d \ud83c\udf89", "author": "DaanHoogland", "createdAt": "2020-09-29T13:32:22Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java", "diffHunk": "@@ -0,0 +1,49 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;\n+\n+import com.cloud.agent.api.LogLevel;\n+\n+/**", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java\ndeleted file mode 100644\nindex 893661782f..0000000000\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-package com.cloud.agent.api.to.deployasis;\n-\n-import com.cloud.agent.api.LogLevel;\n-\n-/**\n- * End-user licence agreement\n- */\n-public class OVFEulaSectionTO implements TemplateDeployAsIsInformationTO {\n-    private String info;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private byte[] compressedLicense;\n-    private int index;\n-\n-    public OVFEulaSectionTO(String info, byte[] license, int eulaIndex) {\n-        this.info = info;\n-        this.compressedLicense = license;\n-        this.index = eulaIndex;\n-    }\n-\n-    public String getInfo() {\n-        return this.info;\n-    }\n-\n-    public byte[] getCompressedLicense() {\n-        return this.compressedLicense;\n-    }\n-\n-    public int getIndex() {\n-        return index;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxOTMwOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496719309", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:32:38Z", "path": "api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java b/api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java\ndeleted file mode 100644\nindex 412d362441..0000000000\n--- a/api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-package com.cloud.agent.api.to;\n-\n-import com.cloud.agent.api.LogLevel;\n-import com.cloud.agent.api.to.deployasis.OVFEulaSectionTO;\n-import com.cloud.agent.api.to.deployasis.OVFNetworkTO;\n-import com.cloud.agent.api.to.deployasis.OVFPropertyTO;\n-import com.cloud.agent.api.to.deployasis.OVFVirtualHardwareSectionTO;\n-import com.cloud.utils.Pair;\n-\n-import java.util.List;\n-\n-public class OVFInformationTO {\n-\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private List<OVFPropertyTO> properties;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private List<OVFNetworkTO> networks;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private List<DatadiskTO> disks;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private OVFVirtualHardwareSectionTO hardwareSection;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private List<OVFEulaSectionTO> eulaSections;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private Pair<String, String> guestOsInfo;\n-\n-    public OVFInformationTO() {\n-    }\n-\n-    public List<OVFPropertyTO> getProperties() {\n-        return properties;\n-    }\n-\n-    public void setProperties(List<OVFPropertyTO> properties) {\n-        this.properties = properties;\n-    }\n-\n-    public List<OVFNetworkTO> getNetworks() {\n-        return networks;\n-    }\n-\n-    public void setNetworks(List<OVFNetworkTO> networks) {\n-        this.networks = networks;\n-    }\n-\n-    public List<DatadiskTO> getDisks() {\n-        return disks;\n-    }\n-\n-    public void setDisks(List<DatadiskTO> disks) {\n-        this.disks = disks;\n-    }\n-\n-    public OVFVirtualHardwareSectionTO getHardwareSection() {\n-        return hardwareSection;\n-    }\n-\n-    public void setHardwareSection(OVFVirtualHardwareSectionTO hardwareSection) {\n-        this.hardwareSection = hardwareSection;\n-    }\n-\n-    public List<OVFEulaSectionTO> getEulaSections() {\n-        return eulaSections;\n-    }\n-\n-    public void setEulaSections(List<OVFEulaSectionTO> eulaSections) {\n-        this.eulaSections = eulaSections;\n-    }\n-\n-    public Pair<String, String> getGuestOsInfo() {\n-        return guestOsInfo;\n-    }\n-\n-    public void setGuestOsInfo(Pair<String, String> guestOsInfo) {\n-        this.guestOsInfo = guestOsInfo;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxOTQ5NQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496719495", "bodyText": "small javadoc?", "author": "DaanHoogland", "createdAt": "2020-09-29T13:32:54Z", "path": "api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to;\n+\n+import com.cloud.agent.api.LogLevel;\n+import com.cloud.agent.api.to.deployasis.OVFEulaSectionTO;\n+import com.cloud.agent.api.to.deployasis.OVFNetworkTO;\n+import com.cloud.agent.api.to.deployasis.OVFPropertyTO;\n+import com.cloud.agent.api.to.deployasis.OVFVirtualHardwareSectionTO;\n+import com.cloud.utils.Pair;\n+\n+import java.util.List;\n+\n+public class OVFInformationTO {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java b/api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java\ndeleted file mode 100644\nindex 412d362441..0000000000\n--- a/api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-package com.cloud.agent.api.to;\n-\n-import com.cloud.agent.api.LogLevel;\n-import com.cloud.agent.api.to.deployasis.OVFEulaSectionTO;\n-import com.cloud.agent.api.to.deployasis.OVFNetworkTO;\n-import com.cloud.agent.api.to.deployasis.OVFPropertyTO;\n-import com.cloud.agent.api.to.deployasis.OVFVirtualHardwareSectionTO;\n-import com.cloud.utils.Pair;\n-\n-import java.util.List;\n-\n-public class OVFInformationTO {\n-\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private List<OVFPropertyTO> properties;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private List<OVFNetworkTO> networks;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private List<DatadiskTO> disks;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private OVFVirtualHardwareSectionTO hardwareSection;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private List<OVFEulaSectionTO> eulaSections;\n-    @LogLevel(LogLevel.Log4jLevel.Off)\n-    private Pair<String, String> guestOsInfo;\n-\n-    public OVFInformationTO() {\n-    }\n-\n-    public List<OVFPropertyTO> getProperties() {\n-        return properties;\n-    }\n-\n-    public void setProperties(List<OVFPropertyTO> properties) {\n-        this.properties = properties;\n-    }\n-\n-    public List<OVFNetworkTO> getNetworks() {\n-        return networks;\n-    }\n-\n-    public void setNetworks(List<OVFNetworkTO> networks) {\n-        this.networks = networks;\n-    }\n-\n-    public List<DatadiskTO> getDisks() {\n-        return disks;\n-    }\n-\n-    public void setDisks(List<DatadiskTO> disks) {\n-        this.disks = disks;\n-    }\n-\n-    public OVFVirtualHardwareSectionTO getHardwareSection() {\n-        return hardwareSection;\n-    }\n-\n-    public void setHardwareSection(OVFVirtualHardwareSectionTO hardwareSection) {\n-        this.hardwareSection = hardwareSection;\n-    }\n-\n-    public List<OVFEulaSectionTO> getEulaSections() {\n-        return eulaSections;\n-    }\n-\n-    public void setEulaSections(List<OVFEulaSectionTO> eulaSections) {\n-        this.eulaSections = eulaSections;\n-    }\n-\n-    public Pair<String, String> getGuestOsInfo() {\n-        return guestOsInfo;\n-    }\n-\n-    public void setGuestOsInfo(Pair<String, String> guestOsInfo) {\n-        this.guestOsInfo = guestOsInfo;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMDE1OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496720159", "bodyText": "javadoc, what on earth is an DeployAsIsInfoTO?", "author": "DaanHoogland", "createdAt": "2020-09-29T13:33:44Z", "path": "api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to;\n+\n+import com.cloud.agent.api.LogLevel;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DeployAsIsInfoTO {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java b/api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java\nindex d82a2975ea..cc0e1d01d0 100644\n--- a/api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java\n+++ b/api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java\n\n@@ -27,17 +27,14 @@ public class DeployAsIsInfoTO {\n     private String destStoragePool;\n     @LogLevel(LogLevel.Log4jLevel.Off)\n     private Map<String, String> properties = new HashMap<>();\n-    private Map<Integer, String> nicAdapterMap = new HashMap();\n \n     public DeployAsIsInfoTO() {\n     }\n \n-    public DeployAsIsInfoTO(String templatePath, String destStoragePool, Map<String, String> properties,\n-                            Map<Integer, String> nicAdapterMap) {\n+    public DeployAsIsInfoTO(String templatePath, String destStoragePool, Map<String, String> properties) {\n         this.templatePath = templatePath;\n         this.destStoragePool = destStoragePool;\n         this.properties = properties;\n-        this.nicAdapterMap = nicAdapterMap;\n     }\n \n     public String getTemplatePath() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMTAzNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496721037", "bodyText": "please change to javadoc, adding two or three words? nothing special", "author": "DaanHoogland", "createdAt": "2020-09-29T13:34:53Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java", "diffHunk": "@@ -0,0 +1,365 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to.deployasis;\n+\n+// From: https://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData.xsd", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e81efa2c97c37834368600fd62407c3d6677e67", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java\nindex 5257750665..f178c23e32 100644\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java\n+++ b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java\n\n@@ -16,10 +16,16 @@\n // under the License.\n package com.cloud.agent.api.to.deployasis;\n \n-// From: https://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData.xsd\n+/**\n+ * A hardware item class representing a hardware item read from the OVF.\n+ * From: https://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData.xsd\n+ */\n public class OVFVirtualHardwareItemTO implements TemplateDeployAsIsInformationTO{\n \n-    //From: https://schemas.dmtf.org/wbem/cim-html/2/CIM_ResourceAllocationSettingData.html\n+    /**\n+     * The hardware item type\n+     * From: https://schemas.dmtf.org/wbem/cim-html/2/CIM_ResourceAllocationSettingData.html\n+     */\n     public enum HardwareResourceType {\n         Other(\"Other\", 1),\n         ComputerSystem (\"Computer System\", 2),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMTQ5Nw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496721497", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:35:28Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java", "diffHunk": "@@ -0,0 +1,365 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e81efa2c97c37834368600fd62407c3d6677e67", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java\nindex 5257750665..f178c23e32 100644\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java\n+++ b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java\n\n@@ -16,10 +16,16 @@\n // under the License.\n package com.cloud.agent.api.to.deployasis;\n \n-// From: https://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData.xsd\n+/**\n+ * A hardware item class representing a hardware item read from the OVF.\n+ * From: https://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData.xsd\n+ */\n public class OVFVirtualHardwareItemTO implements TemplateDeployAsIsInformationTO{\n \n-    //From: https://schemas.dmtf.org/wbem/cim-html/2/CIM_ResourceAllocationSettingData.html\n+    /**\n+     * The hardware item type\n+     * From: https://schemas.dmtf.org/wbem/cim-html/2/CIM_ResourceAllocationSettingData.html\n+     */\n     public enum HardwareResourceType {\n         Other(\"Other\", 1),\n         ComputerSystem (\"Computer System\", 2),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMTc2OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496721769", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:35:49Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java\ndeleted file mode 100644\nindex 9080b92f59..0000000000\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-package com.cloud.agent.api.to.deployasis;\n-\n-import java.io.Serializable;\n-\n-public interface TemplateDeployAsIsInformationTO extends Serializable {\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjAxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496722010", "bodyText": "what is this needed for?", "author": "DaanHoogland", "createdAt": "2020-09-29T13:36:07Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;\n+\n+import java.io.Serializable;\n+\n+public interface TemplateDeployAsIsInformationTO extends Serializable {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java\ndeleted file mode 100644\nindex 9080b92f59..0000000000\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-package com.cloud.agent.api.to.deployasis;\n-\n-import java.io.Serializable;\n-\n-public interface TemplateDeployAsIsInformationTO extends Serializable {\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIwNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496722207", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:36:21Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java\nindex 4cdbf68ed9..2698f8c5e1 100644\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java\n+++ b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java\n\n@@ -25,15 +25,12 @@ public class OVFVirtualHardwareSectionTO implements TemplateDeployAsIsInformatio\n     public OVFVirtualHardwareSectionTO() {\n     }\n \n-    private String minimiumHardwareVersion;\n     private List<OVFConfigurationTO> configurations;\n     private List<OVFVirtualHardwareItemTO> commonHardwareItems;\n \n-    public OVFVirtualHardwareSectionTO(List<OVFConfigurationTO> configurations, List<OVFVirtualHardwareItemTO> commonHardwareItems,\n-                                       String minimumHardwareVersion) {\n+    public OVFVirtualHardwareSectionTO(List<OVFConfigurationTO> configurations, List<OVFVirtualHardwareItemTO> commonHardwareItems) {\n         this.configurations = configurations;\n         this.commonHardwareItems = commonHardwareItems;\n-        this.minimiumHardwareVersion = minimumHardwareVersion;\n     }\n \n     public List<OVFConfigurationTO> getConfigurations() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjU5OA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496722598", "bodyText": "good name ==> no javadoc needed", "author": "DaanHoogland", "createdAt": "2020-09-29T13:36:50Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;\n+\n+import java.util.List;\n+\n+public class OVFVirtualHardwareSectionTO implements TemplateDeployAsIsInformationTO {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMzE5NQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496723195", "bodyText": "though it has contents that might need explanation to the new...", "author": "DaanHoogland", "createdAt": "2020-09-29T13:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java\nindex 4cdbf68ed9..2698f8c5e1 100644\n--- a/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java\n+++ b/api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java\n\n@@ -25,15 +25,12 @@ public class OVFVirtualHardwareSectionTO implements TemplateDeployAsIsInformatio\n     public OVFVirtualHardwareSectionTO() {\n     }\n \n-    private String minimiumHardwareVersion;\n     private List<OVFConfigurationTO> configurations;\n     private List<OVFVirtualHardwareItemTO> commonHardwareItems;\n \n-    public OVFVirtualHardwareSectionTO(List<OVFConfigurationTO> configurations, List<OVFVirtualHardwareItemTO> commonHardwareItems,\n-                                       String minimumHardwareVersion) {\n+    public OVFVirtualHardwareSectionTO(List<OVFConfigurationTO> configurations, List<OVFVirtualHardwareItemTO> commonHardwareItems) {\n         this.configurations = configurations;\n         this.commonHardwareItems = commonHardwareItems;\n-        this.minimiumHardwareVersion = minimumHardwareVersion;\n     }\n \n     public List<OVFConfigurationTO> getConfigurations() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNDUwMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496724500", "bodyText": "what is it for?", "author": "DaanHoogland", "createdAt": "2020-09-29T13:39:17Z", "path": "core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.agent.api;\n+\n+public class ValidateVcenterDetailsCommand extends Command {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java b/core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java\ndeleted file mode 100644\nindex d1d1393efe..0000000000\n--- a/core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package com.cloud.agent.api;\n-\n-public class ValidateVcenterDetailsCommand extends Command {\n-\n-    String vCenterServerAddress;\n-\n-    public ValidateVcenterDetailsCommand(String vCenterServerAddress) {\n-        this.vCenterServerAddress = vCenterServerAddress;\n-    }\n-\n-    public String getvCenterServerAddress() {\n-        return vCenterServerAddress;\n-    }\n-\n-    public void setvCenterServerAddress(String vCenterServerAddress) {\n-        this.vCenterServerAddress = vCenterServerAddress;\n-    }\n-\n-    @Override\n-    public boolean executeInSequence() {\n-        return false;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMTQ5Nw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496731497", "bodyText": "short javadoc with descrition of this command-answer pattern? at least what is returned under what condition? just by the name it might be a boolean or a List<StoragePolicy> that is expected.", "author": "DaanHoogland", "createdAt": "2020-09-29T13:47:55Z", "path": "core/src/main/java/org/apache/cloudstack/storage/command/CheckDataStoreStoragePolicyComplainceCommand.java", "diffHunk": "@@ -0,0 +1,61 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package org.apache.cloudstack.storage.command;\n+\n+import com.cloud.agent.api.to.StorageFilerTO;\n+\n+public class CheckDataStoreStoragePolicyComplainceCommand extends StorageSubSystemCommand {\n+\n+    String storagePolicyId;\n+    private StorageFilerTO storagePool;\n+\n+    public CheckDataStoreStoragePolicyComplainceCommand(String storagePolicyId, StorageFilerTO storagePool) {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/core/src/main/java/org/apache/cloudstack/storage/command/CheckDataStoreStoragePolicyComplainceCommand.java b/core/src/main/java/org/apache/cloudstack/storage/command/CheckDataStoreStoragePolicyComplainceCommand.java\ndeleted file mode 100644\nindex f9544b873e..0000000000\n--- a/core/src/main/java/org/apache/cloudstack/storage/command/CheckDataStoreStoragePolicyComplainceCommand.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-\n-package org.apache.cloudstack.storage.command;\n-\n-import com.cloud.agent.api.to.StorageFilerTO;\n-\n-public class CheckDataStoreStoragePolicyComplainceCommand extends StorageSubSystemCommand {\n-\n-    String storagePolicyId;\n-    private StorageFilerTO storagePool;\n-\n-    public CheckDataStoreStoragePolicyComplainceCommand(String storagePolicyId, StorageFilerTO storagePool) {\n-        super();\n-\n-        this.storagePolicyId = storagePolicyId;\n-        this.storagePool = storagePool;\n-    }\n-\n-    @Override\n-    public void setExecuteInSequence(boolean inSeq) {\n-    }\n-\n-    @Override\n-    public boolean executeInSequence() {\n-        return false;\n-    }\n-\n-\n-    public String getStoragePolicyId() {\n-        return storagePolicyId;\n-    }\n-\n-    public void setStoragePolicyId(String storagePolicyId) {\n-        this.storagePolicyId = storagePolicyId;\n-    }\n-\n-    public StorageFilerTO getStoragePool() {\n-        return storagePool;\n-    }\n-\n-    public void setStoragePool(StorageFilerTO storagePool) {\n-        this.storagePool = storagePool;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMjMxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496732310", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:48:49Z", "path": "core/src/test/java/com/cloud/agent/api/storage/DownloadAnswerTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.storage;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/core/src/test/java/com/cloud/agent/api/storage/DownloadAnswerTest.java b/core/src/test/java/com/cloud/agent/api/storage/DownloadAnswerTest.java\nindex ded45f819f..c7dcc22572 100644\n--- a/core/src/test/java/com/cloud/agent/api/storage/DownloadAnswerTest.java\n+++ b/core/src/test/java/com/cloud/agent/api/storage/DownloadAnswerTest.java\n\n@@ -17,7 +17,6 @@\n package com.cloud.agent.api.storage;\n \n import com.cloud.agent.api.Answer;\n-import com.cloud.agent.api.to.OVFInformationTO;\n import com.cloud.agent.api.to.deployasis.OVFPropertyTO;\n import com.cloud.serializer.GsonHelper;\n import com.cloud.storage.VMTemplateStorageResourceAssoc;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMzg1NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496733854", "bodyText": "\ud83d\udc4d", "author": "DaanHoogland", "createdAt": "2020-09-29T13:50:49Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/VolumeOrchestrationService.java", "diffHunk": "@@ -117,8 +120,11 @@ DiskProfile allocateRawVolume(Type type, String name, DiskOffering offering, Lon\n \n     boolean canVmRestartOnAnotherServer(long vmId);\n \n-    DiskProfile allocateTemplatedVolume(Type type, String name, DiskOffering offering, Long rootDisksize, Long minIops, Long maxIops, VirtualMachineTemplate template, VirtualMachine vm,\n-        Account owner);\n+    /**", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/VolumeOrchestrationService.java b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/VolumeOrchestrationService.java\nindex 9baea60f29..9458de7635 100644\n--- a/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/VolumeOrchestrationService.java\n+++ b/engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/VolumeOrchestrationService.java\n\n@@ -120,11 +117,8 @@ public interface VolumeOrchestrationService {\n \n     boolean canVmRestartOnAnotherServer(long vmId);\n \n-    /**\n-     * Allocate a volume or multiple volumes in case of template is registered with the 'deploy-as-is' option, allowing multiple disks\n-     */\n-    List<DiskProfile> allocateTemplatedVolumes(Type type, String name, DiskOffering offering, Long rootDisksize, Long minIops, Long maxIops, VirtualMachineTemplate template, VirtualMachine vm,\n-                                               Account owner);\n+    DiskProfile allocateTemplatedVolume(Type type, String name, DiskOffering offering, Long rootDisksize, Long minIops, Long maxIops, VirtualMachineTemplate template, VirtualMachine vm,\n+        Account owner);\n \n     String getVmNameFromVolumeId(long volumeId);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MDMwMw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496740303", "bodyText": "i would like a javadoc about what this string entails", "author": "DaanHoogland", "createdAt": "2020-09-29T13:58:42Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateDataFactory.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n     TemplateInfo getReadyTemplateOnImageStore(long templateId, Long zoneId);\n \n-    TemplateInfo getTemplate(DataObject obj, DataStore store);\n+    TemplateInfo getTemplate(DataObject obj, DataStore store, String configuration);", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateDataFactory.java b/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateDataFactory.java\nindex 4d258f3b6d..b213625efa 100644\n--- a/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateDataFactory.java\n+++ b/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateDataFactory.java\n\n@@ -27,7 +27,7 @@ public interface TemplateDataFactory {\n \n     TemplateInfo getReadyTemplateOnImageStore(long templateId, Long zoneId);\n \n-    TemplateInfo getTemplate(DataObject obj, DataStore store, String configuration);\n+    TemplateInfo getTemplate(DataObject obj, DataStore store);\n \n     TemplateInfo getTemplate(long templateId, DataStoreRole storeRole);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MjAwNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496742007", "bodyText": "here the string is configurationId instead of configuration. would be nice to javadoc the difference", "author": "DaanHoogland", "createdAt": "2020-09-29T14:00:46Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateService.java", "diffHunk": "@@ -72,4 +75,6 @@ public TemplateInfo getTemplate() {\n     void associateCrosszoneTemplatesToZone(long dcId);\n \n     AsyncCallFuture<TemplateApiResult> createDatadiskTemplateAsync(TemplateInfo parentTemplate, TemplateInfo dataDiskTemplate, String path, String diskId, long fileSize, boolean bootable);\n+\n+    List<DatadiskTO> getTemplateDatadisksOnImageStore(TemplateInfo templateInfo, String configurationId);", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateService.java b/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateService.java\nindex df13f951a4..f70a7813ae 100644\n--- a/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateService.java\n+++ b/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateService.java\n\n@@ -75,6 +72,4 @@ public interface TemplateService {\n     void associateCrosszoneTemplatesToZone(long dcId);\n \n     AsyncCallFuture<TemplateApiResult> createDatadiskTemplateAsync(TemplateInfo parentTemplate, TemplateInfo dataDiskTemplate, String path, String diskId, long fileSize, boolean bootable);\n-\n-    List<DatadiskTO> getTemplateDatadisksOnImageStore(TemplateInfo templateInfo, String configurationId);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0NjE5MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496746191", "bodyText": "this comment could be the method-name of a member being called here.\nlong templateId should be scope protected to avoid confusion in this 114! line method.", "author": "DaanHoogland", "createdAt": "2020-09-29T14:06:10Z", "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -592,6 +597,13 @@ protected void advanceExpunge(VMInstanceVO vm) throws ResourceUnavailableExcepti\n         //remove the overcommit details from the uservm details\n         userVmDetailsDao.removeDetails(vm.getId());\n \n+        // Remove details if VM deploy as-is", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java b/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\nindex 458045828b..7ed090db9f 100755\n--- a/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\n+++ b/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\n\n@@ -597,13 +594,6 @@ public class VirtualMachineManagerImpl extends ManagerBase implements VirtualMac\n         //remove the overcommit details from the uservm details\n         userVmDetailsDao.removeDetails(vm.getId());\n \n-        // Remove details if VM deploy as-is\n-        long templateId = vm.getTemplateId();\n-        VMTemplateVO template = _templateDao.findById(templateId);\n-        if (template != null && template.isDeployAsIs()) {\n-            userVmDeployAsIsDetailsDao.removeDetails(vm.getId());\n-        }\n-\n         // send hypervisor-dependent commands before removing\n         final List<Command> finalizeExpungeCommands = hvGuru.finalizeExpunge(vm);\n         if (finalizeExpungeCommands != null && finalizeExpungeCommands.size() > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MDQwNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496750404", "bodyText": "fromat request\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n          \n          \n            \n                public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions)\n          \n          \n            \n                    throws InsufficientCapacityException, ConcurrentOperationException {\n          \n      \n    \n    \n  \n\nbut of course delete the next line (github sugestions are almost smart enough for this.", "author": "DaanHoogland", "createdAt": "2020-09-29T14:11:37Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -747,87 +751,168 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -751,96 +747,30 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-            ConcurrentOperationException {\n+    ConcurrentOperationException {\n \n         Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>() {\n             @Override\n             public void doInTransactionWithoutResult(final TransactionStatus status) throws InsufficientCapacityException {\n-                if (s_logger.isTraceEnabled()) {\n-                    s_logger.trace(String.format(\"allocating networks for %s(template %s); %d networks\",vm.getInstanceName(), vm.getTemplate().getUuid(), networks.size()));\n-                }\n                 int deviceId = 0;\n-                int size;\n-                size = determineNumberOfNicsRequired();\n+                int size = 0;\n+                for (final Network ntwk : networks.keySet()) {\n+                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n+                    if (profiles != null && !profiles.isEmpty()) {\n+                        size = size + profiles.size();\n+                    } else {\n+                        size = size + 1;\n+                    }\n+                }\n \n                 final boolean[] deviceIds = new boolean[size];\n                 Arrays.fill(deviceIds, false);\n \n-                List<Pair<Network, NicProfile>> profilesList = getOrderedNetworkNicProfileMapping(networks);\n                 final List<NicProfile> nics = new ArrayList<NicProfile>(size);\n                 NicProfile defaultNic = null;\n-                Network nextNetwork = null;\n-                for (Pair <Network, NicProfile> networkNicPair : profilesList) {\n-                    nextNetwork = networkNicPair.first();\n-                    Pair<NicProfile, Integer> newDeviceInfo = addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(networkNicPair.second(), deviceIds, deviceId, nextNetwork, nics, defaultNic);\n-                    defaultNic = newDeviceInfo.first();\n-                    deviceId = newDeviceInfo.second();\n-                }\n-                createExtraNics(size, nics, nextNetwork);\n-\n-                if (nics.size() == 1) {\n-                    nics.get(0).setDefaultNic(true);\n-                }\n-            }\n-\n-            /**\n-             * private transaction method to check and add devices to the nic list and update the info\n-             */\n-            Pair<NicProfile,Integer> addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(NicProfile requested, boolean[] deviceIds, int deviceId, Network nextNetwork, List<NicProfile> nics, NicProfile defaultNic)\n-                    throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapacityException {\n-                Pair<NicProfile, Integer> rc = new Pair<>(null,null);\n-                Boolean isDefaultNic = false;\n-                if (vm != null && requested != null && requested.isDefaultNic()) {\n-                    isDefaultNic = true;\n-                }\n-\n-                while (deviceIds[deviceId] && deviceId < deviceIds.length) {\n-                    deviceId++;\n-                }\n-\n-                final Pair<NicProfile, Integer> vmNicPair = allocateNic(requested, nextNetwork, isDefaultNic, deviceId, vm);\n-                NicProfile vmNic = null;\n-                if (vmNicPair != null) {\n-                    vmNic = vmNicPair.first();\n-                    if (vmNic == null) {\n-                        return rc;\n-                    }\n-                    deviceId = vmNicPair.second();\n-                }\n-\n-                final int devId = vmNic.getDeviceId();\n-                if (devId >= deviceIds.length) {\n-                    throw new IllegalArgumentException(\"Device id for nic is too large: \" + vmNic);\n-                }\n-                if (deviceIds[devId]) {\n-                    throw new IllegalArgumentException(\"Conflicting device id for two different nics: \" + vmNic);\n-                }\n-\n-                deviceIds[devId] = true;\n \n-                if (vmNic.isDefaultNic()) {\n-                    if (defaultNic != null) {\n-                        throw new IllegalArgumentException(\"You cannot specify two nics as default nics: nic 1 = \" + defaultNic + \"; nic 2 = \" + vmNic);\n-                    }\n-                    defaultNic = vmNic;\n-                }\n-\n-                nics.add(vmNic);\n-                vm.addNic(vmNic);\n-                saveExtraDhcpOptions(nextNetwork.getUuid(), vmNic.getId(), extraDhcpOptions);\n-                rc.first(defaultNic);\n-                rc.second(deviceId);\n-                return rc;\n-            }\n-\n-            /**\n-             * private transaction method to get oredered list of Network and NicProfile pair\n-             * @return ordered list of Network and NicProfile pair\n-             * @param networks the map od networks to nic profiles list\n-             */\n-            private List<Pair<Network, NicProfile>> getOrderedNetworkNicProfileMapping(final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks) {\n-                List<Pair<Network, NicProfile>> profilesList = new ArrayList<>();\n                 for (final Map.Entry<? extends Network, List<? extends NicProfile>> network : networks.entrySet()) {\n+                    final Network config = network.getKey();\n                     List<? extends NicProfile> requestedProfiles = network.getValue();\n                     if (requestedProfiles == null) {\n                         requestedProfiles = new ArrayList<NicProfile>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MjE4NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496752184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ConcurrentOperationException {\n          \n      \n    \n    \n  \n\nbut only in combination with above", "author": "DaanHoogland", "createdAt": "2020-09-29T14:13:50Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -747,87 +751,168 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-    ConcurrentOperationException {\n+            ConcurrentOperationException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -751,96 +747,30 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-            ConcurrentOperationException {\n+    ConcurrentOperationException {\n \n         Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>() {\n             @Override\n             public void doInTransactionWithoutResult(final TransactionStatus status) throws InsufficientCapacityException {\n-                if (s_logger.isTraceEnabled()) {\n-                    s_logger.trace(String.format(\"allocating networks for %s(template %s); %d networks\",vm.getInstanceName(), vm.getTemplate().getUuid(), networks.size()));\n-                }\n                 int deviceId = 0;\n-                int size;\n-                size = determineNumberOfNicsRequired();\n+                int size = 0;\n+                for (final Network ntwk : networks.keySet()) {\n+                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n+                    if (profiles != null && !profiles.isEmpty()) {\n+                        size = size + profiles.size();\n+                    } else {\n+                        size = size + 1;\n+                    }\n+                }\n \n                 final boolean[] deviceIds = new boolean[size];\n                 Arrays.fill(deviceIds, false);\n \n-                List<Pair<Network, NicProfile>> profilesList = getOrderedNetworkNicProfileMapping(networks);\n                 final List<NicProfile> nics = new ArrayList<NicProfile>(size);\n                 NicProfile defaultNic = null;\n-                Network nextNetwork = null;\n-                for (Pair <Network, NicProfile> networkNicPair : profilesList) {\n-                    nextNetwork = networkNicPair.first();\n-                    Pair<NicProfile, Integer> newDeviceInfo = addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(networkNicPair.second(), deviceIds, deviceId, nextNetwork, nics, defaultNic);\n-                    defaultNic = newDeviceInfo.first();\n-                    deviceId = newDeviceInfo.second();\n-                }\n-                createExtraNics(size, nics, nextNetwork);\n-\n-                if (nics.size() == 1) {\n-                    nics.get(0).setDefaultNic(true);\n-                }\n-            }\n-\n-            /**\n-             * private transaction method to check and add devices to the nic list and update the info\n-             */\n-            Pair<NicProfile,Integer> addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(NicProfile requested, boolean[] deviceIds, int deviceId, Network nextNetwork, List<NicProfile> nics, NicProfile defaultNic)\n-                    throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapacityException {\n-                Pair<NicProfile, Integer> rc = new Pair<>(null,null);\n-                Boolean isDefaultNic = false;\n-                if (vm != null && requested != null && requested.isDefaultNic()) {\n-                    isDefaultNic = true;\n-                }\n-\n-                while (deviceIds[deviceId] && deviceId < deviceIds.length) {\n-                    deviceId++;\n-                }\n-\n-                final Pair<NicProfile, Integer> vmNicPair = allocateNic(requested, nextNetwork, isDefaultNic, deviceId, vm);\n-                NicProfile vmNic = null;\n-                if (vmNicPair != null) {\n-                    vmNic = vmNicPair.first();\n-                    if (vmNic == null) {\n-                        return rc;\n-                    }\n-                    deviceId = vmNicPair.second();\n-                }\n-\n-                final int devId = vmNic.getDeviceId();\n-                if (devId >= deviceIds.length) {\n-                    throw new IllegalArgumentException(\"Device id for nic is too large: \" + vmNic);\n-                }\n-                if (deviceIds[devId]) {\n-                    throw new IllegalArgumentException(\"Conflicting device id for two different nics: \" + vmNic);\n-                }\n-\n-                deviceIds[devId] = true;\n \n-                if (vmNic.isDefaultNic()) {\n-                    if (defaultNic != null) {\n-                        throw new IllegalArgumentException(\"You cannot specify two nics as default nics: nic 1 = \" + defaultNic + \"; nic 2 = \" + vmNic);\n-                    }\n-                    defaultNic = vmNic;\n-                }\n-\n-                nics.add(vmNic);\n-                vm.addNic(vmNic);\n-                saveExtraDhcpOptions(nextNetwork.getUuid(), vmNic.getId(), extraDhcpOptions);\n-                rc.first(defaultNic);\n-                rc.second(deviceId);\n-                return rc;\n-            }\n-\n-            /**\n-             * private transaction method to get oredered list of Network and NicProfile pair\n-             * @return ordered list of Network and NicProfile pair\n-             * @param networks the map od networks to nic profiles list\n-             */\n-            private List<Pair<Network, NicProfile>> getOrderedNetworkNicProfileMapping(final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks) {\n-                List<Pair<Network, NicProfile>> profilesList = new ArrayList<>();\n                 for (final Map.Entry<? extends Network, List<? extends NicProfile>> network : networks.entrySet()) {\n+                    final Network config = network.getKey();\n                     List<? extends NicProfile> requestedProfiles = network.getValue();\n                     if (requestedProfiles == null) {\n                         requestedProfiles = new ArrayList<NicProfile>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NDgyNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496754824", "bodyText": "method name?", "author": "DaanHoogland", "createdAt": "2020-09-29T14:16:58Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -747,87 +751,168 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-    ConcurrentOperationException {\n+            ConcurrentOperationException {\n \n         Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>() {\n             @Override\n             public void doInTransactionWithoutResult(final TransactionStatus status) throws InsufficientCapacityException {\n-                int deviceId = 0;\n-                int size = 0;\n-                for (final Network ntwk : networks.keySet()) {\n-                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n-                    if (profiles != null && !profiles.isEmpty()) {\n-                        size = size + profiles.size();\n-                    } else {\n-                        size = size + 1;\n-                    }\n+                if (s_logger.isTraceEnabled()) {\n+                    s_logger.trace(String.format(\"allocating networks for %s(template %s); %d networks\",vm.getInstanceName(), vm.getTemplate().getUuid(), networks.size()));\n                 }\n+                int deviceId = 0;\n+                int size;\n+                size = determineNumberOfNicsRequired();\n \n                 final boolean[] deviceIds = new boolean[size];\n                 Arrays.fill(deviceIds, false);\n \n+                List<Pair<Network, NicProfile>> profilesList = getOrderedNetworkNicProfileMapping(networks);\n                 final List<NicProfile> nics = new ArrayList<NicProfile>(size);\n                 NicProfile defaultNic = null;\n+                Network nextNetwork = null;\n+                for (Pair <Network, NicProfile> networkNicPair : profilesList) {\n+                    nextNetwork = networkNicPair.first();\n+                    Pair<NicProfile, Integer> newDeviceInfo = addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(networkNicPair.second(), deviceIds, deviceId, nextNetwork, nics, defaultNic);\n+                    defaultNic = newDeviceInfo.first();\n+                    deviceId = newDeviceInfo.second();\n+                }\n+                createExtraNics(size, nics, nextNetwork);\n+\n+                if (nics.size() == 1) {\n+                    nics.get(0).setDefaultNic(true);\n+                }\n+            }\n+\n+            /**\n+             * private transaction method to check and add devices to the nic list and update the info\n+             */\n+            Pair<NicProfile,Integer> addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(NicProfile requested, boolean[] deviceIds, int deviceId, Network nextNetwork, List<NicProfile> nics, NicProfile defaultNic)\n+                    throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapacityException {\n+                Pair<NicProfile, Integer> rc = new Pair<>(null,null);\n+                Boolean isDefaultNic = false;\n+                if (vm != null && requested != null && requested.isDefaultNic()) {\n+                    isDefaultNic = true;\n+                }\n+\n+                while (deviceIds[deviceId] && deviceId < deviceIds.length) {\n+                    deviceId++;\n+                }\n+\n+                final Pair<NicProfile, Integer> vmNicPair = allocateNic(requested, nextNetwork, isDefaultNic, deviceId, vm);\n+                NicProfile vmNic = null;\n+                if (vmNicPair != null) {\n+                    vmNic = vmNicPair.first();\n+                    if (vmNic == null) {\n+                        return rc;\n+                    }\n+                    deviceId = vmNicPair.second();\n+                }\n+\n+                final int devId = vmNic.getDeviceId();\n+                if (devId >= deviceIds.length) {\n+                    throw new IllegalArgumentException(\"Device id for nic is too large: \" + vmNic);\n+                }\n+                if (deviceIds[devId]) {\n+                    throw new IllegalArgumentException(\"Conflicting device id for two different nics: \" + vmNic);\n+                }\n+\n+                deviceIds[devId] = true;\n \n+                if (vmNic.isDefaultNic()) {\n+                    if (defaultNic != null) {\n+                        throw new IllegalArgumentException(\"You cannot specify two nics as default nics: nic 1 = \" + defaultNic + \"; nic 2 = \" + vmNic);\n+                    }\n+                    defaultNic = vmNic;\n+                }\n+\n+                nics.add(vmNic);\n+                vm.addNic(vmNic);\n+                saveExtraDhcpOptions(nextNetwork.getUuid(), vmNic.getId(), extraDhcpOptions);\n+                rc.first(defaultNic);\n+                rc.second(deviceId);\n+                return rc;\n+            }\n+\n+            /**\n+             * private transaction method to get oredered list of Network and NicProfile pair\n+             * @return ordered list of Network and NicProfile pair\n+             * @param networks the map od networks to nic profiles list\n+             */\n+            private List<Pair<Network, NicProfile>> getOrderedNetworkNicProfileMapping(final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks) {\n+                List<Pair<Network, NicProfile>> profilesList = new ArrayList<>();\n                 for (final Map.Entry<? extends Network, List<? extends NicProfile>> network : networks.entrySet()) {\n-                    final Network config = network.getKey();\n                     List<? extends NicProfile> requestedProfiles = network.getValue();\n                     if (requestedProfiles == null) {\n                         requestedProfiles = new ArrayList<NicProfile>();\n                     }\n                     if (requestedProfiles.isEmpty()) {\n                         requestedProfiles.add(null);\n                     }\n-\n                     for (final NicProfile requested : requestedProfiles) {\n-                        Boolean isDefaultNic = false;\n-                        if (vm != null && requested != null && requested.isDefaultNic()) {\n-                            isDefaultNic = true;\n-                        }\n-\n-                        while (deviceIds[deviceId] && deviceId < deviceIds.length) {\n-                            deviceId++;\n-                        }\n-\n-                        final Pair<NicProfile, Integer> vmNicPair = allocateNic(requested, config, isDefaultNic, deviceId, vm);\n-                        NicProfile vmNic = null;\n-                        if (vmNicPair != null) {\n-                            vmNic = vmNicPair.first();\n-                            if (vmNic == null) {\n-                                continue;\n-                            }\n-                            deviceId = vmNicPair.second();\n-                        }\n-\n-                        final int devId = vmNic.getDeviceId();\n-                        if (devId >= deviceIds.length) {\n-                            throw new IllegalArgumentException(\"Device id for nic is too large: \" + vmNic);\n-                        }\n-                        if (deviceIds[devId]) {\n-                            throw new IllegalArgumentException(\"Conflicting device id for two different nics: \" + vmNic);\n+                        profilesList.add(new Pair<Network, NicProfile>(network.getKey(), requested));\n+                    }\n+                }\n+                profilesList.sort(new Comparator<Pair<Network, NicProfile>>() {\n+                    @Override\n+                    public int compare(Pair<Network, NicProfile> pair1, Pair<Network, NicProfile> pair2) {\n+                        int profile1Order = Integer.MAX_VALUE;\n+                        int profile2Order = Integer.MAX_VALUE;\n+                        if (pair1 != null && pair1.second() != null && pair1.second().getOrderIndex() != null) {\n+                            profile1Order = pair1.second().getOrderIndex();\n                         }\n-\n-                        deviceIds[devId] = true;\n-\n-                        if (vmNic.isDefaultNic()) {\n-                            if (defaultNic != null) {\n-                                throw new IllegalArgumentException(\"You cannot specify two nics as default nics: nic 1 = \" + defaultNic + \"; nic 2 = \" + vmNic);\n-                            }\n-                            defaultNic = vmNic;\n+                        if (pair2 != null && pair2.second() != null && pair2.second().getOrderIndex() != null) {\n+                            profile2Order = pair2.second().getOrderIndex();\n                         }\n+                        return profile1Order - profile2Order;\n+                    }\n+                });\n+                return profilesList;\n+            }\n \n-                        nics.add(vmNic);\n-                        vm.addNic(vmNic);\n-                        saveExtraDhcpOptions(config.getUuid(), vmNic.getId(), extraDhcpOptions);\n+            /**\n+             * private transaction method to run over the objects and determine nic requirements\n+             * @return the total numer of nics required\n+             */\n+            private int determineNumberOfNicsRequired() {\n+                int size = 0;\n+                for (final Network ntwk : networks.keySet()) {\n+                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n+                    if (profiles != null && !profiles.isEmpty()) {\n+                        size = size + profiles.size();\n+                    } else {\n+                        size = size + 1;\n                     }\n                 }\n+\n+                List<OVFNetworkTO> netprereqs = templateDeployAsIsDetailsDao.listNetworkRequirementsByTemplateId(vm.getTemplate().getId());\n+                if (size < netprereqs.size()) {\n+                    size = netprereqs.size();\n+                }\n+                return size;\n+            }\n+\n+            /**\n+             * private transaction method to add nics as required\n+             * @param size the number needed\n+             * @param nics the list of nics present\n+             * @param finalNetwork the network to add the nics to\n+             * @throws InsufficientVirtualNetworkCapacityException great\n+             * @throws InsufficientAddressCapacityException also magnificent, as the name sugests\n+             */\n+            private void createExtraNics(int size, List<NicProfile> nics, Network finalNetwork) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException {\n                 if (nics.size() != size) {\n                     s_logger.warn(\"Number of nics \" + nics.size() + \" doesn't match number of requested nics \" + size);\n-                    throw new CloudRuntimeException(\"Number of nics \" + nics.size() + \" doesn't match number of requested networks \" + size);\n-                }\n-\n-                if (nics.size() == 1) {\n-                    nics.get(0).setDefaultNic(true);\n+                    if (nics.size() > size) {\n+                        throw new CloudRuntimeException(\"Number of nics \" + nics.size() + \" doesn't match number of requested networks \" + size);\n+                    } else {\n+                        if (finalNetwork == null) {\n+                            throw new CloudRuntimeException(String.format(\"can not assign network to %d remaining required NICs\", size - nics.size()));\n+                        }\n+                        // create extra", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -751,96 +747,30 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-            ConcurrentOperationException {\n+    ConcurrentOperationException {\n \n         Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>() {\n             @Override\n             public void doInTransactionWithoutResult(final TransactionStatus status) throws InsufficientCapacityException {\n-                if (s_logger.isTraceEnabled()) {\n-                    s_logger.trace(String.format(\"allocating networks for %s(template %s); %d networks\",vm.getInstanceName(), vm.getTemplate().getUuid(), networks.size()));\n-                }\n                 int deviceId = 0;\n-                int size;\n-                size = determineNumberOfNicsRequired();\n+                int size = 0;\n+                for (final Network ntwk : networks.keySet()) {\n+                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n+                    if (profiles != null && !profiles.isEmpty()) {\n+                        size = size + profiles.size();\n+                    } else {\n+                        size = size + 1;\n+                    }\n+                }\n \n                 final boolean[] deviceIds = new boolean[size];\n                 Arrays.fill(deviceIds, false);\n \n-                List<Pair<Network, NicProfile>> profilesList = getOrderedNetworkNicProfileMapping(networks);\n                 final List<NicProfile> nics = new ArrayList<NicProfile>(size);\n                 NicProfile defaultNic = null;\n-                Network nextNetwork = null;\n-                for (Pair <Network, NicProfile> networkNicPair : profilesList) {\n-                    nextNetwork = networkNicPair.first();\n-                    Pair<NicProfile, Integer> newDeviceInfo = addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(networkNicPair.second(), deviceIds, deviceId, nextNetwork, nics, defaultNic);\n-                    defaultNic = newDeviceInfo.first();\n-                    deviceId = newDeviceInfo.second();\n-                }\n-                createExtraNics(size, nics, nextNetwork);\n-\n-                if (nics.size() == 1) {\n-                    nics.get(0).setDefaultNic(true);\n-                }\n-            }\n-\n-            /**\n-             * private transaction method to check and add devices to the nic list and update the info\n-             */\n-            Pair<NicProfile,Integer> addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(NicProfile requested, boolean[] deviceIds, int deviceId, Network nextNetwork, List<NicProfile> nics, NicProfile defaultNic)\n-                    throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapacityException {\n-                Pair<NicProfile, Integer> rc = new Pair<>(null,null);\n-                Boolean isDefaultNic = false;\n-                if (vm != null && requested != null && requested.isDefaultNic()) {\n-                    isDefaultNic = true;\n-                }\n-\n-                while (deviceIds[deviceId] && deviceId < deviceIds.length) {\n-                    deviceId++;\n-                }\n-\n-                final Pair<NicProfile, Integer> vmNicPair = allocateNic(requested, nextNetwork, isDefaultNic, deviceId, vm);\n-                NicProfile vmNic = null;\n-                if (vmNicPair != null) {\n-                    vmNic = vmNicPair.first();\n-                    if (vmNic == null) {\n-                        return rc;\n-                    }\n-                    deviceId = vmNicPair.second();\n-                }\n-\n-                final int devId = vmNic.getDeviceId();\n-                if (devId >= deviceIds.length) {\n-                    throw new IllegalArgumentException(\"Device id for nic is too large: \" + vmNic);\n-                }\n-                if (deviceIds[devId]) {\n-                    throw new IllegalArgumentException(\"Conflicting device id for two different nics: \" + vmNic);\n-                }\n-\n-                deviceIds[devId] = true;\n \n-                if (vmNic.isDefaultNic()) {\n-                    if (defaultNic != null) {\n-                        throw new IllegalArgumentException(\"You cannot specify two nics as default nics: nic 1 = \" + defaultNic + \"; nic 2 = \" + vmNic);\n-                    }\n-                    defaultNic = vmNic;\n-                }\n-\n-                nics.add(vmNic);\n-                vm.addNic(vmNic);\n-                saveExtraDhcpOptions(nextNetwork.getUuid(), vmNic.getId(), extraDhcpOptions);\n-                rc.first(defaultNic);\n-                rc.second(deviceId);\n-                return rc;\n-            }\n-\n-            /**\n-             * private transaction method to get oredered list of Network and NicProfile pair\n-             * @return ordered list of Network and NicProfile pair\n-             * @param networks the map od networks to nic profiles list\n-             */\n-            private List<Pair<Network, NicProfile>> getOrderedNetworkNicProfileMapping(final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks) {\n-                List<Pair<Network, NicProfile>> profilesList = new ArrayList<>();\n                 for (final Map.Entry<? extends Network, List<? extends NicProfile>> network : networks.entrySet()) {\n+                    final Network config = network.getKey();\n                     List<? extends NicProfile> requestedProfiles = network.getValue();\n                     if (requestedProfiles == null) {\n                         requestedProfiles = new ArrayList<NicProfile>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1Njk4MA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496756980", "bodyText": "\ud83d\udc4d this is the kind of formatting i'd  like to see for all methods (i.e. throws on a new line if the signature is (too) long", "author": "DaanHoogland", "createdAt": "2020-09-29T14:19:34Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -747,87 +751,168 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-    ConcurrentOperationException {\n+            ConcurrentOperationException {\n \n         Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>() {\n             @Override\n             public void doInTransactionWithoutResult(final TransactionStatus status) throws InsufficientCapacityException {\n-                int deviceId = 0;\n-                int size = 0;\n-                for (final Network ntwk : networks.keySet()) {\n-                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n-                    if (profiles != null && !profiles.isEmpty()) {\n-                        size = size + profiles.size();\n-                    } else {\n-                        size = size + 1;\n-                    }\n+                if (s_logger.isTraceEnabled()) {\n+                    s_logger.trace(String.format(\"allocating networks for %s(template %s); %d networks\",vm.getInstanceName(), vm.getTemplate().getUuid(), networks.size()));\n                 }\n+                int deviceId = 0;\n+                int size;\n+                size = determineNumberOfNicsRequired();\n \n                 final boolean[] deviceIds = new boolean[size];\n                 Arrays.fill(deviceIds, false);\n \n+                List<Pair<Network, NicProfile>> profilesList = getOrderedNetworkNicProfileMapping(networks);\n                 final List<NicProfile> nics = new ArrayList<NicProfile>(size);\n                 NicProfile defaultNic = null;\n+                Network nextNetwork = null;\n+                for (Pair <Network, NicProfile> networkNicPair : profilesList) {\n+                    nextNetwork = networkNicPair.first();\n+                    Pair<NicProfile, Integer> newDeviceInfo = addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(networkNicPair.second(), deviceIds, deviceId, nextNetwork, nics, defaultNic);\n+                    defaultNic = newDeviceInfo.first();\n+                    deviceId = newDeviceInfo.second();\n+                }\n+                createExtraNics(size, nics, nextNetwork);\n+\n+                if (nics.size() == 1) {\n+                    nics.get(0).setDefaultNic(true);\n+                }\n+            }\n+\n+            /**\n+             * private transaction method to check and add devices to the nic list and update the info\n+             */\n+            Pair<NicProfile,Integer> addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(NicProfile requested, boolean[] deviceIds, int deviceId, Network nextNetwork, List<NicProfile> nics, NicProfile defaultNic)\n+                    throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -751,96 +747,30 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-            ConcurrentOperationException {\n+    ConcurrentOperationException {\n \n         Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>() {\n             @Override\n             public void doInTransactionWithoutResult(final TransactionStatus status) throws InsufficientCapacityException {\n-                if (s_logger.isTraceEnabled()) {\n-                    s_logger.trace(String.format(\"allocating networks for %s(template %s); %d networks\",vm.getInstanceName(), vm.getTemplate().getUuid(), networks.size()));\n-                }\n                 int deviceId = 0;\n-                int size;\n-                size = determineNumberOfNicsRequired();\n+                int size = 0;\n+                for (final Network ntwk : networks.keySet()) {\n+                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n+                    if (profiles != null && !profiles.isEmpty()) {\n+                        size = size + profiles.size();\n+                    } else {\n+                        size = size + 1;\n+                    }\n+                }\n \n                 final boolean[] deviceIds = new boolean[size];\n                 Arrays.fill(deviceIds, false);\n \n-                List<Pair<Network, NicProfile>> profilesList = getOrderedNetworkNicProfileMapping(networks);\n                 final List<NicProfile> nics = new ArrayList<NicProfile>(size);\n                 NicProfile defaultNic = null;\n-                Network nextNetwork = null;\n-                for (Pair <Network, NicProfile> networkNicPair : profilesList) {\n-                    nextNetwork = networkNicPair.first();\n-                    Pair<NicProfile, Integer> newDeviceInfo = addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(networkNicPair.second(), deviceIds, deviceId, nextNetwork, nics, defaultNic);\n-                    defaultNic = newDeviceInfo.first();\n-                    deviceId = newDeviceInfo.second();\n-                }\n-                createExtraNics(size, nics, nextNetwork);\n-\n-                if (nics.size() == 1) {\n-                    nics.get(0).setDefaultNic(true);\n-                }\n-            }\n-\n-            /**\n-             * private transaction method to check and add devices to the nic list and update the info\n-             */\n-            Pair<NicProfile,Integer> addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(NicProfile requested, boolean[] deviceIds, int deviceId, Network nextNetwork, List<NicProfile> nics, NicProfile defaultNic)\n-                    throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapacityException {\n-                Pair<NicProfile, Integer> rc = new Pair<>(null,null);\n-                Boolean isDefaultNic = false;\n-                if (vm != null && requested != null && requested.isDefaultNic()) {\n-                    isDefaultNic = true;\n-                }\n-\n-                while (deviceIds[deviceId] && deviceId < deviceIds.length) {\n-                    deviceId++;\n-                }\n-\n-                final Pair<NicProfile, Integer> vmNicPair = allocateNic(requested, nextNetwork, isDefaultNic, deviceId, vm);\n-                NicProfile vmNic = null;\n-                if (vmNicPair != null) {\n-                    vmNic = vmNicPair.first();\n-                    if (vmNic == null) {\n-                        return rc;\n-                    }\n-                    deviceId = vmNicPair.second();\n-                }\n-\n-                final int devId = vmNic.getDeviceId();\n-                if (devId >= deviceIds.length) {\n-                    throw new IllegalArgumentException(\"Device id for nic is too large: \" + vmNic);\n-                }\n-                if (deviceIds[devId]) {\n-                    throw new IllegalArgumentException(\"Conflicting device id for two different nics: \" + vmNic);\n-                }\n-\n-                deviceIds[devId] = true;\n \n-                if (vmNic.isDefaultNic()) {\n-                    if (defaultNic != null) {\n-                        throw new IllegalArgumentException(\"You cannot specify two nics as default nics: nic 1 = \" + defaultNic + \"; nic 2 = \" + vmNic);\n-                    }\n-                    defaultNic = vmNic;\n-                }\n-\n-                nics.add(vmNic);\n-                vm.addNic(vmNic);\n-                saveExtraDhcpOptions(nextNetwork.getUuid(), vmNic.getId(), extraDhcpOptions);\n-                rc.first(defaultNic);\n-                rc.second(deviceId);\n-                return rc;\n-            }\n-\n-            /**\n-             * private transaction method to get oredered list of Network and NicProfile pair\n-             * @return ordered list of Network and NicProfile pair\n-             * @param networks the map od networks to nic profiles list\n-             */\n-            private List<Pair<Network, NicProfile>> getOrderedNetworkNicProfileMapping(final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks) {\n-                List<Pair<Network, NicProfile>> profilesList = new ArrayList<>();\n                 for (final Map.Entry<? extends Network, List<? extends NicProfile>> network : networks.entrySet()) {\n+                    final Network config = network.getKey();\n                     List<? extends NicProfile> requestedProfiles = network.getValue();\n                     if (requestedProfiles == null) {\n                         requestedProfiles = new ArrayList<NicProfile>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NzczNg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496757736", "bodyText": "with throws?", "author": "DaanHoogland", "createdAt": "2020-09-29T14:20:30Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1085,7 +1170,7 @@ boolean isNetworkImplemented(final NetworkVO network) {\n     }\n \n     Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context, final boolean isRouter) throws ConcurrentOperationException,\n-    ResourceUnavailableException, InsufficientCapacityException {\n+            ResourceUnavailableException, InsufficientCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -1170,7 +1085,7 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n     }\n \n     Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context, final boolean isRouter) throws ConcurrentOperationException,\n-            ResourceUnavailableException, InsufficientCapacityException {\n+    ResourceUnavailableException, InsufficientCapacityException {\n         Pair<NetworkGuru, NetworkVO> implemented = null;\n         if (!isRouter) {\n             implemented = implementNetwork(networkId, dest, context);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NzkwNQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496757905", "bodyText": "with throws?", "author": "DaanHoogland", "createdAt": "2020-09-29T14:20:42Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1105,7 +1190,7 @@ boolean isNetworkImplemented(final NetworkVO network) {\n     @Override\n     @DB\n     public Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context) throws ConcurrentOperationException,\n-    ResourceUnavailableException, InsufficientCapacityException {\n+            ResourceUnavailableException, InsufficientCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -1190,7 +1105,7 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n     @Override\n     @DB\n     public Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context) throws ConcurrentOperationException,\n-            ResourceUnavailableException, InsufficientCapacityException {\n+    ResourceUnavailableException, InsufficientCapacityException {\n         final Pair<NetworkGuru, NetworkVO> implemented = new Pair<NetworkGuru, NetworkVO>(null, null);\n \n         NetworkVO network = _networksDao.findById(networkId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTY2NQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496759665", "bodyText": "with throws?", "author": "DaanHoogland", "createdAt": "2020-09-29T14:22:52Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1661,7 +1746,7 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n \n     @Override\n     public void prepare(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context) throws InsufficientCapacityException, ConcurrentOperationException,\n-    ResourceUnavailableException {\n+            ResourceUnavailableException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -1746,7 +1661,7 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n \n     @Override\n     public void prepare(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context) throws InsufficientCapacityException, ConcurrentOperationException,\n-            ResourceUnavailableException {\n+    ResourceUnavailableException {\n         final List<NicVO> nics = _nicDao.listByVmId(vmProfile.getId());\n \n         // we have to implement default nics first - to ensure that default network elements start up first in multiple\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MTQ4OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496761489", "bodyText": "throws", "author": "DaanHoogland", "createdAt": "2020-09-29T14:25:08Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -3033,7 +3118,7 @@ public void reallyRun() {\n \n     @Override\n     public boolean startNetwork(final long networkId, final DeployDestination dest, final ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException,\n-    InsufficientCapacityException {\n+            InsufficientCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -3118,7 +3033,7 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n \n     @Override\n     public boolean startNetwork(final long networkId, final DeployDestination dest, final ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException,\n-            InsufficientCapacityException {\n+    InsufficientCapacityException {\n \n         // Check if network exists\n         final NetworkVO network = _networksDao.findById(networkId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MjI4Nw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496762287", "bodyText": "and this one (with throws)", "author": "DaanHoogland", "createdAt": "2020-09-29T14:26:00Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -3056,7 +3141,7 @@ public boolean startNetwork(final long networkId, final DeployDestination dest,\n \n     @Override\n     public boolean restartNetwork(final Long networkId, final Account callerAccount, final User callerUser, final boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException,\n-    InsufficientCapacityException {\n+            InsufficientCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\nindex 892ae2bac5..e12dca04e3 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\n@@ -3141,7 +3056,7 @@ public class NetworkOrchestrator extends ManagerBase implements NetworkOrchestra\n \n     @Override\n     public boolean restartNetwork(final Long networkId, final Account callerAccount, final User callerUser, final boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException,\n-            InsufficientCapacityException {\n+    InsufficientCapacityException {\n         boolean status = true;\n         boolean restartRequired = false;\n         final NetworkVO network = _networksDao.findById(networkId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwMjEwOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496802109", "bodyText": "newline:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "author": "DaanHoogland", "createdAt": "2020-09-29T15:15:33Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java", "diffHunk": "@@ -296,6 +315,34 @@ public StoragePool findStoragePool(DiskProfile dskCh, DataCenter dc, Pod pod, Lo\n         return null;\n     }\n \n+    @Override\n+    public StoragePool findChildDataStoreInDataStoreCluster(DataCenter dc, Pod pod, Long clusterId, Long hostId, VirtualMachine vm, Long datastoreClusterId) {\n+        Long podId = null;\n+        if (pod != null) {\n+            podId = pod.getId();\n+        } else if (clusterId != null) {\n+            Cluster cluster = _entityMgr.findById(Cluster.class, clusterId);\n+            if (cluster != null) {\n+                podId = cluster.getPodId();\n+            }\n+        }\n+        List<StoragePoolVO> childDatastores = _storagePoolDao.listChildStoragePoolsInDatastoreCluster(datastoreClusterId);\n+        List<StoragePool> suitablePools = new ArrayList<StoragePool>();\n+\n+        for (StoragePoolVO childDatastore: childDatastores)\n+            suitablePools.add((StoragePool)dataStoreMgr.getDataStore(childDatastore.getId(), DataStoreRole.Primary));\n+\n+        VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+        for (StoragePoolAllocator allocator : _storagePoolAllocators) {\n+            DataCenterDeployment plan = new DataCenterDeployment(dc.getId(), podId, clusterId, hostId, null, null);\n+            final List<StoragePool> poolList = allocator.reorderPools(suitablePools, profile, plan);\n+\n+            if (poolList != null && !poolList.isEmpty()) {\n+                return (StoragePool)dataStoreMgr.getDataStore(poolList.get(0).getId(), DataStoreRole.Primary);\n+            }\n+        }\n+        return null;\n+    }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java\nindex a51aae7c8f..3e68d3a4ab 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java\n\n@@ -315,34 +296,6 @@ public class VolumeOrchestrator extends ManagerBase implements VolumeOrchestrati\n         return null;\n     }\n \n-    @Override\n-    public StoragePool findChildDataStoreInDataStoreCluster(DataCenter dc, Pod pod, Long clusterId, Long hostId, VirtualMachine vm, Long datastoreClusterId) {\n-        Long podId = null;\n-        if (pod != null) {\n-            podId = pod.getId();\n-        } else if (clusterId != null) {\n-            Cluster cluster = _entityMgr.findById(Cluster.class, clusterId);\n-            if (cluster != null) {\n-                podId = cluster.getPodId();\n-            }\n-        }\n-        List<StoragePoolVO> childDatastores = _storagePoolDao.listChildStoragePoolsInDatastoreCluster(datastoreClusterId);\n-        List<StoragePool> suitablePools = new ArrayList<StoragePool>();\n-\n-        for (StoragePoolVO childDatastore: childDatastores)\n-            suitablePools.add((StoragePool)dataStoreMgr.getDataStore(childDatastore.getId(), DataStoreRole.Primary));\n-\n-        VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n-        for (StoragePoolAllocator allocator : _storagePoolAllocators) {\n-            DataCenterDeployment plan = new DataCenterDeployment(dc.getId(), podId, clusterId, hostId, null, null);\n-            final List<StoragePool> poolList = allocator.reorderPools(suitablePools, profile, plan);\n-\n-            if (poolList != null && !poolList.isEmpty()) {\n-                return (StoragePool)dataStoreMgr.getDataStore(poolList.get(0).getId(), DataStoreRole.Primary);\n-            }\n-        }\n-        return null;\n-    }\n     public Pair<Pod, Long> findPod(VirtualMachineTemplate template, ServiceOffering offering, DataCenter dc, long accountId, Set<Long> avoids) {\n         for (PodAllocator allocator : _podAllocators) {\n             final Pair<Pod, Long> pod = allocator.allocateTo(template, offering, dc, accountId, avoids);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNTMwNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496805307", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "DaanHoogland", "createdAt": "2020-09-29T15:19:46Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java", "diffHunk": "@@ -1704,4 +1801,4 @@ public void doInTransactionWithoutResult(TransactionStatus status) {\n             }\n         });\n     }\n-}\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java\nindex a51aae7c8f..3e68d3a4ab 100644\n--- a/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java\n+++ b/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java\n\n@@ -1801,4 +1704,4 @@ public class VolumeOrchestrator extends ManagerBase implements VolumeOrchestrati\n             }\n         });\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNjMxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496806310", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:20:43Z", "path": "engine/schema/src/main/java/com/cloud/dc/VsphereStoragePolicyVO.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.dc;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/dc/VsphereStoragePolicyVO.java b/engine/schema/src/main/java/com/cloud/dc/VsphereStoragePolicyVO.java\ndeleted file mode 100644\nindex 5324de63bb..0000000000\n--- a/engine/schema/src/main/java/com/cloud/dc/VsphereStoragePolicyVO.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.dc;\n-\n-import com.cloud.utils.DateUtil;\n-import com.cloud.utils.db.GenericDao;\n-\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.Table;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n-import java.util.Date;\n-import java.util.UUID;\n-\n-@Entity\n-@Table(name = \"vsphere_storage_policy\")\n-public class VsphereStoragePolicyVO implements VsphereStoragePolicy {\n-\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    @Column(name = \"id\")\n-    private long id;\n-\n-    @Column(name = \"uuid\")\n-    private String uuid;\n-\n-    @Column(name = \"zone_id\")\n-    private long zoneId;\n-\n-    @Column(name = \"policy_id\")\n-    private String policyId;\n-\n-    @Column(name = \"name\")\n-    private String name;\n-\n-    @Column(name = \"description\")\n-    private String description;\n-\n-    @Column(name = \"update_time\", updatable = true)\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    private Date updateTime;\n-\n-    @Column(name = GenericDao.REMOVED_COLUMN)\n-    private Date removed;\n-\n-    public VsphereStoragePolicyVO(long zoneId, String policyId, String name, String description) {\n-        this.uuid = UUID.randomUUID().toString();\n-        this.zoneId = zoneId;\n-        this.policyId = policyId;\n-        this.name = name;\n-        this.description = description;\n-        this.updateTime = DateUtil.currentGMTTime();\n-    }\n-\n-    public VsphereStoragePolicyVO() {\n-        uuid = UUID.randomUUID().toString();\n-    }\n-    public VsphereStoragePolicyVO(long id) {\n-        this.id = id;\n-        uuid = UUID.randomUUID().toString();\n-    }\n-\n-    @Override\n-    public long getId() {\n-        return id;\n-    }\n-\n-    @Override\n-    public String getUuid() {\n-        return uuid;\n-    }\n-\n-    @Override\n-    public long getZoneId() {\n-        return zoneId;\n-    }\n-\n-    @Override\n-    public String getPolicyId() {\n-        return policyId;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n-    public Date getUpdateTime() {\n-        return updateTime;\n-    }\n-\n-    public Date getRemoved() {\n-        return removed;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNzAyMw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496807023", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:21:23Z", "path": "engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDao.java", "diffHunk": "@@ -14,18 +14,17 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n+package com.cloud.dc.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDao.java b/engine/schema/src/main/java/com/cloud/storage/dao/TemplateOVFPropertiesDao.java\nsimilarity index 67%\nrename from engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDao.java\nrename to engine/schema/src/main/java/com/cloud/storage/dao/TemplateOVFPropertiesDao.java\nindex 6e79b5e6f6..eb78f2023a 100644\n--- a/engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDao.java\n+++ b/engine/schema/src/main/java/com/cloud/storage/dao/TemplateOVFPropertiesDao.java\n\n@@ -14,17 +14,18 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n-package com.cloud.dc.dao;\n \n-import com.cloud.dc.VsphereStoragePolicyVO;\n+package com.cloud.storage.dao;\n+\n+import com.cloud.storage.TemplateOVFPropertyVO;\n import com.cloud.utils.db.GenericDao;\n \n import java.util.List;\n \n-public interface VsphereStoragePolicyDao extends GenericDao<VsphereStoragePolicyVO, Long> {\n-\n-    public VsphereStoragePolicyVO findByPolicyId(Long zoneId, String policyId);\n-\n-    public List<VsphereStoragePolicyVO> findByZoneId(Long zoneId);\n+public interface TemplateOVFPropertiesDao extends GenericDao<TemplateOVFPropertyVO, Long> {\n \n+    boolean existsOption(long templateId, String key);\n+    TemplateOVFPropertyVO findByTemplateAndKey(long templateId, String key);\n+    void saveOptions(List<TemplateOVFPropertyVO> opts);\n+    List<TemplateOVFPropertyVO> listByTemplateId(long templateId);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNzU2Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496807566", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:21:55Z", "path": "engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDaoImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.dc.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDaoImpl.java b/engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDaoImpl.java\ndeleted file mode 100644\nindex 0cdb6ad742..0000000000\n--- a/engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDaoImpl.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.dc.dao;\n-\n-import com.cloud.dc.VsphereStoragePolicyVO;\n-import com.cloud.utils.db.GenericDaoBase;\n-import com.cloud.utils.db.SearchBuilder;\n-import com.cloud.utils.db.SearchCriteria;\n-import org.apache.log4j.Logger;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.List;\n-\n-@Component\n-public class VsphereStoragePolicyDaoImpl extends GenericDaoBase<VsphereStoragePolicyVO, Long> implements VsphereStoragePolicyDao {\n-\n-    protected static final Logger LOGGER = Logger.getLogger(VsphereStoragePolicyDaoImpl.class);\n-\n-    private final SearchBuilder<VsphereStoragePolicyVO> zoneSearch;\n-    private final SearchBuilder<VsphereStoragePolicyVO> policySearch;\n-\n-    public VsphereStoragePolicyDaoImpl() {\n-        super();\n-\n-        zoneSearch = createSearchBuilder();\n-        zoneSearch.and(\"zoneId\", zoneSearch.entity().getZoneId(), SearchCriteria.Op.EQ);\n-        zoneSearch.done();\n-\n-        policySearch = createSearchBuilder();\n-        policySearch.and(\"zoneId\", policySearch.entity().getZoneId(), SearchCriteria.Op.EQ);\n-        policySearch.and(\"policyId\", policySearch.entity().getPolicyId(), SearchCriteria.Op.EQ);\n-        policySearch.done();\n-    }\n-\n-    @Override\n-    public VsphereStoragePolicyVO findByPolicyId(Long zoneId, String policyId) {\n-        SearchCriteria<VsphereStoragePolicyVO> sc = policySearch.create();\n-        sc.setParameters(\"zoneId\", zoneId);\n-        sc.setParameters(\"policyId\", policyId);\n-        return findOneBy(sc);\n-    }\n-\n-    @Override\n-    public List<VsphereStoragePolicyVO> findByZoneId(Long zoneId) {\n-        SearchCriteria<VsphereStoragePolicyVO> sc = zoneSearch.create();\n-        sc.setParameters(\"zoneId\", zoneId);\n-\n-        return listBy(sc);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwODU4MA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496808580", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:22:57Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/TemplateDeployAsIsDetailVO.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/deployasis/TemplateDeployAsIsDetailVO.java b/engine/schema/src/main/java/com/cloud/deployasis/TemplateDeployAsIsDetailVO.java\nindex 047d985d0b..00a69cd0b0 100644\n--- a/engine/schema/src/main/java/com/cloud/deployasis/TemplateDeployAsIsDetailVO.java\n+++ b/engine/schema/src/main/java/com/cloud/deployasis/TemplateDeployAsIsDetailVO.java\n\n@@ -36,7 +36,7 @@ public class TemplateDeployAsIsDetailVO implements ResourceDetail {\n     private long id;\n \n     @Column(name = \"template_id\")\n-    private long resourceId;\n+    private long templateId;\n \n     @Column(name = \"name\")\n     private String name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwOTA1Nw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496809057", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:23:23Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/UserVmDeployAsIsDetailVO.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/deployasis/UserVmDeployAsIsDetailVO.java b/engine/schema/src/main/java/com/cloud/deployasis/UserVmDeployAsIsDetailVO.java\nindex b56b4a4946..6cbc22b6b3 100644\n--- a/engine/schema/src/main/java/com/cloud/deployasis/UserVmDeployAsIsDetailVO.java\n+++ b/engine/schema/src/main/java/com/cloud/deployasis/UserVmDeployAsIsDetailVO.java\n\n@@ -36,7 +36,7 @@ public class UserVmDeployAsIsDetailVO implements ResourceDetail {\n     private long id;\n \n     @Column(name = \"vm_id\")\n-    private long resourceId;\n+    private long vmId;\n \n     @Column(name = \"name\")\n     private String name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwOTM5MA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496809390", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:23:40Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDao.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDao.java b/engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDao.java\ndeleted file mode 100644\nindex ebbc1eabeb..0000000000\n--- a/engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDao.java\n+++ /dev/null\n\n@@ -1,32 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.deployasis.dao;\n-\n-import com.cloud.agent.api.to.deployasis.OVFPropertyTO;\n-import com.cloud.deployasis.TemplateDeployAsIsDetailVO;\n-import com.cloud.utils.db.GenericDao;\n-import com.cloud.agent.api.to.deployasis.OVFNetworkTO;\n-import org.apache.cloudstack.resourcedetail.ResourceDetailsDao;\n-\n-import java.util.List;\n-\n-public interface TemplateDeployAsIsDetailsDao extends GenericDao<TemplateDeployAsIsDetailVO, Long>, ResourceDetailsDao<TemplateDeployAsIsDetailVO> {\n-\n-    OVFPropertyTO findPropertyByTemplateAndKey(long templateId, String key);\n-    List<TemplateDeployAsIsDetailVO> listDetailsByTemplateIdMatchingPrefix(long templateId, String prefix);\n-    List<OVFNetworkTO> listNetworkRequirementsByTemplateId(long templateId);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwOTYxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496809610", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:23:54Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDaoImpl.java", "diffHunk": "@@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDaoImpl.java b/engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDaoImpl.java\nindex 198ef6db89..df21d4b487 100644\n--- a/engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDaoImpl.java\n+++ b/engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDaoImpl.java\n\n@@ -45,8 +45,8 @@ public class TemplateDeployAsIsDetailsDaoImpl extends ResourceDetailsDaoBase<Tem\n     @Override\n     public OVFPropertyTO findPropertyByTemplateAndKey(long templateId, String key) {\n         SearchCriteria<TemplateDeployAsIsDetailVO> sc = createSearchCriteria();\n-        sc.addAnd(\"resourceId\", SearchCriteria.Op.EQ, templateId);\n-        sc.addAnd(\"name\", SearchCriteria.Op.EQ, key.startsWith(DeployAsIsConstants.PROPERTY_PREFIX) ? key : DeployAsIsConstants.PROPERTY_PREFIX + key);\n+        sc.addAnd(\"templateId\", SearchCriteria.Op.EQ, templateId);\n+        sc.addAnd(\"name\", SearchCriteria.Op.EQ, key.startsWith(DeployAsIsConstants.ACS_PROPERTY_PREFIX) ? key : DeployAsIsConstants.ACS_PROPERTY_PREFIX + key);\n         OVFPropertyTO property = null;\n         TemplateDeployAsIsDetailVO detail = findOneBy(sc);\n         if (detail != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxMDAzOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496810039", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:24:17Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDao.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDao.java b/engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDao.java\ndeleted file mode 100644\nindex 4366e464c1..0000000000\n--- a/engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDao.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.deployasis.dao;\n-\n-import com.cloud.deployasis.UserVmDeployAsIsDetailVO;\n-import com.cloud.utils.db.GenericDao;\n-import org.apache.cloudstack.resourcedetail.ResourceDetailsDao;\n-\n-public interface UserVmDeployAsIsDetailsDao extends GenericDao<UserVmDeployAsIsDetailVO, Long>, ResourceDetailsDao<UserVmDeployAsIsDetailVO> {\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxMDMwMQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496810301", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:24:33Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDaoImpl.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDaoImpl.java b/engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDaoImpl.java\ndeleted file mode 100644\nindex 8dc5f4a120..0000000000\n--- a/engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDaoImpl.java\n+++ /dev/null\n\n@@ -1,30 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.deployasis.dao;\n-\n-import com.cloud.deployasis.UserVmDeployAsIsDetailVO;\n-import org.apache.cloudstack.resourcedetail.ResourceDetailsDaoBase;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserVmDeployAsIsDetailsDaoImpl extends ResourceDetailsDaoBase<UserVmDeployAsIsDetailVO> implements UserVmDeployAsIsDetailsDao {\n-\n-    @Override\n-    public void addDetail(long resourceId, String key, String value, boolean display) {\n-        super.addDetail(new UserVmDeployAsIsDetailVO(resourceId, key, value));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxMjcyNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496812724", "bodyText": "why this difference in name? what do either mean?", "author": "DaanHoogland", "createdAt": "2020-09-29T15:26:48Z", "path": "engine/schema/src/main/java/com/cloud/storage/VMTemplateStoragePoolVO.java", "diffHunk": "@@ -168,17 +171,18 @@ public Status getDownloadState() {\n         return downloadState;\n     }\n \n-    public VMTemplateStoragePoolVO(long poolId, long templateId) {\n+    public VMTemplateStoragePoolVO(long poolId, long templateId, String configuration) {\n         super();\n         this.poolId = poolId;\n         this.templateId = templateId;\n         this.downloadState = Status.NOT_DOWNLOADED;\n         this.state = ObjectInDataStoreStateMachine.State.Allocated;\n         this.markedForGC = false;\n+        this.deploymentOption = configuration;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/storage/VMTemplateStoragePoolVO.java b/engine/schema/src/main/java/com/cloud/storage/VMTemplateStoragePoolVO.java\nindex 69c9c85ab5..6dfe6eb3e8 100644\n--- a/engine/schema/src/main/java/com/cloud/storage/VMTemplateStoragePoolVO.java\n+++ b/engine/schema/src/main/java/com/cloud/storage/VMTemplateStoragePoolVO.java\n\n@@ -171,18 +168,17 @@ public class VMTemplateStoragePoolVO implements VMTemplateStorageResourceAssoc,\n         return downloadState;\n     }\n \n-    public VMTemplateStoragePoolVO(long poolId, long templateId, String configuration) {\n+    public VMTemplateStoragePoolVO(long poolId, long templateId) {\n         super();\n         this.poolId = poolId;\n         this.templateId = templateId;\n         this.downloadState = Status.NOT_DOWNLOADED;\n         this.state = ObjectInDataStoreStateMachine.State.Allocated;\n         this.markedForGC = false;\n-        this.deploymentOption = configuration;\n     }\n \n     public VMTemplateStoragePoolVO(long poolId, long templateId, Date lastUpdated, int downloadPercent, Status downloadState, String localDownloadPath,\n-            String errorString, String jobId, String installPath, long templateSize, String configuration) {\n+            String errorString, String jobId, String installPath, long templateSize) {\n         super();\n         this.poolId = poolId;\n         this.templateId = templateId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxNTgyOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496815829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "DaanHoogland", "createdAt": "2020-09-29T15:29:43Z", "path": "engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDetailsDaoImpl.java", "diffHunk": "@@ -30,4 +30,4 @@\n     public void addDetail(long resourceId, String key, String value, boolean display) {\n         super.addDetail(new VMTemplateDetailVO(resourceId, key, value, display));\n     }\n-}\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDetailsDaoImpl.java b/engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDetailsDaoImpl.java\nindex 60e583be3e..3e7072f6bf 100644\n--- a/engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDetailsDaoImpl.java\n+++ b/engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDetailsDaoImpl.java\n\n@@ -30,4 +30,4 @@ public class VMTemplateDetailsDaoImpl extends ResourceDetailsDaoBase<VMTemplateD\n     public void addDetail(long resourceId, String key, String value, boolean display) {\n         super.addDetail(new VMTemplateDetailVO(resourceId, key, value, display));\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgyNDE4OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496824189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "DaanHoogland", "createdAt": "2020-09-29T15:37:24Z", "path": "engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java", "diffHunk": "@@ -1280,4 +1290,4 @@ protected Void createDatadiskTemplateCallback(AsyncCallbackDispatcher<TemplateSe\n         future.complete(dataDiskTemplateResult);\n         return null;\n     }\n-}\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java b/engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java\nindex ed9359d952..00bc7e4208 100644\n--- a/engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java\n+++ b/engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java\n\n@@ -1290,4 +1280,4 @@ public class TemplateServiceImpl implements TemplateService {\n         future.complete(dataDiskTemplateResult);\n         return null;\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzNzc0MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496837741", "bodyText": "kind of surprising that the BaseImageStoreDriverImpl would be able to copy anything anymore in a PR that is Vmware specific... Why is this?", "author": "DaanHoogland", "createdAt": "2020-09-29T15:50:01Z", "path": "engine/storage/src/main/java/org/apache/cloudstack/storage/image/BaseImageStoreDriverImpl.java", "diffHunk": "@@ -413,25 +383,16 @@ private Answer sendToLeastBusyEndpoint(List<EndPoint> eps, CopyCommand cmd) {\n             return answer;\n         }  catch (AgentUnavailableException e) {\n             errMsg = e.toString();\n-            s_logger.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n+            LOGGER.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n         } catch (OperationTimedoutException e) {\n             errMsg = e.toString();\n-            s_logger.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n+            LOGGER.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n         }\n         throw new CloudRuntimeException(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + errMsg);\n     }\n \n     @Override\n     public boolean canCopy(DataObject srcData, DataObject destData) {\n-        DataStore srcStore = srcData.getDataStore();\n-        DataStore destStore = destData.getDataStore();\n-        if ((srcData.getDataStore().getTO() instanceof NfsTO && destData.getDataStore().getTO() instanceof NfsTO) &&\n-                (srcStore.getRole() == DataStoreRole.Image && destStore.getRole() == DataStoreRole.Image) &&\n-                ((srcData.getType() == DataObjectType.TEMPLATE && destData.getType() == DataObjectType.TEMPLATE) ||\n-                (srcData.getType() == DataObjectType.SNAPSHOT && destData.getType() == DataObjectType.SNAPSHOT) ||\n-                (srcData.getType() == DataObjectType.VOLUME && destData.getType() == DataObjectType.VOLUME))) {\n-            return true;\n-        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/storage/src/main/java/org/apache/cloudstack/storage/image/BaseImageStoreDriverImpl.java b/engine/storage/src/main/java/org/apache/cloudstack/storage/image/BaseImageStoreDriverImpl.java\nindex b72dd18e97..2341603803 100644\n--- a/engine/storage/src/main/java/org/apache/cloudstack/storage/image/BaseImageStoreDriverImpl.java\n+++ b/engine/storage/src/main/java/org/apache/cloudstack/storage/image/BaseImageStoreDriverImpl.java\n\n@@ -383,16 +414,25 @@ public abstract class BaseImageStoreDriverImpl implements ImageStoreDriver {\n             return answer;\n         }  catch (AgentUnavailableException e) {\n             errMsg = e.toString();\n-            LOGGER.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n+            s_logger.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n         } catch (OperationTimedoutException e) {\n             errMsg = e.toString();\n-            LOGGER.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n+            s_logger.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n         }\n         throw new CloudRuntimeException(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + errMsg);\n     }\n \n     @Override\n     public boolean canCopy(DataObject srcData, DataObject destData) {\n+        DataStore srcStore = srcData.getDataStore();\n+        DataStore destStore = destData.getDataStore();\n+        if ((srcData.getDataStore().getTO() instanceof NfsTO && destData.getDataStore().getTO() instanceof NfsTO) &&\n+                (srcStore.getRole() == DataStoreRole.Image && destStore.getRole() == DataStoreRole.Image) &&\n+                ((srcData.getType() == DataObjectType.TEMPLATE && destData.getType() == DataObjectType.TEMPLATE) ||\n+                (srcData.getType() == DataObjectType.SNAPSHOT && destData.getType() == DataObjectType.SNAPSHOT) ||\n+                (srcData.getType() == DataObjectType.VOLUME && destData.getType() == DataObjectType.VOLUME))) {\n+            return true;\n+        }\n         return false;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0MDkyOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496840929", "bodyText": "can we have some javadoc here? these are helper functions for use in... (storage drivers/network orchestrators/Virtualmachien orchestrators) ?", "author": "DaanHoogland", "createdAt": "2020-09-29T15:53:06Z", "path": "engine/storage/src/main/java/org/apache/cloudstack/storage/image/deployasis/DeployAsIsHelper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.storage.image.deployasis;\n+\n+import com.cloud.agent.api.storage.DownloadAnswer;\n+import com.cloud.agent.api.to.NicTO;\n+import com.cloud.vm.VirtualMachineProfile;\n+\n+import java.util.Map;\n+\n+public interface DeployAsIsHelper {\n+\n+    void persistTemplateDeployAsIsDetails(long templateId, DownloadAnswer answer);\n+    Map<String, String> getVirtualMachineDeployAsIsProperties(VirtualMachineProfile vmId);\n+\n+    String getAllocatedVirtualMachineTemplatePath(VirtualMachineProfile vm, String configuration, String destStoragePool);\n+    String getAllocatedVirtualMachineDestinationStoragePool(VirtualMachineProfile vm);\n+\n+    Map<Integer, String> getAllocatedVirtualMachineNicsAdapterMapping(VirtualMachineProfile vm, NicTO[] nics);\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/engine/storage/src/main/java/org/apache/cloudstack/storage/image/deployasis/DeployAsIsHelper.java b/engine/storage/src/main/java/org/apache/cloudstack/storage/image/deployasis/DeployAsIsHelper.java\nindex 303161c0c5..b23326b040 100644\n--- a/engine/storage/src/main/java/org/apache/cloudstack/storage/image/deployasis/DeployAsIsHelper.java\n+++ b/engine/storage/src/main/java/org/apache/cloudstack/storage/image/deployasis/DeployAsIsHelper.java\n\n@@ -1,23 +1,6 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n package org.apache.cloudstack.storage.image.deployasis;\n \n import com.cloud.agent.api.storage.DownloadAnswer;\n-import com.cloud.agent.api.to.NicTO;\n import com.cloud.vm.VirtualMachineProfile;\n \n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0NzIwMg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496847202", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:58:56Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/util/VcenterSessionHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.vmware.util;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/util/VcenterSessionHandler.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/util/VcenterSessionHandler.java\ndeleted file mode 100644\nindex 9efab7b8ec..0000000000\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/util/VcenterSessionHandler.java\n+++ /dev/null\n\n@@ -1,88 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.hypervisor.vmware.util;\n-\n-import java.util.Set;\n-\n-import javax.xml.namespace.QName;\n-import javax.xml.soap.SOAPElement;\n-import javax.xml.soap.SOAPException;\n-import javax.xml.soap.SOAPHeader;\n-import javax.xml.ws.handler.MessageContext;\n-import javax.xml.ws.handler.soap.SOAPHandler;\n-import javax.xml.ws.handler.soap.SOAPMessageContext;\n-\n-import org.apache.log4j.Logger;\n-import org.w3c.dom.DOMException;\n-\n-import com.cloud.utils.exception.CloudRuntimeException;\n-\n-public class VcenterSessionHandler implements SOAPHandler<SOAPMessageContext> {\n-    public static final Logger s_logger = Logger.getLogger(VcenterSessionHandler.class);\n-    private final String vcSessionCookie;\n-\n-    public VcenterSessionHandler(String vcSessionCookie) {\n-        this.vcSessionCookie = vcSessionCookie;\n-    }\n-\n-    @Override\n-    public boolean handleMessage(SOAPMessageContext smc) {\n-        if (isOutgoingMessage(smc)) {\n-            try {\n-                SOAPHeader header = getSOAPHeader(smc);\n-\n-                SOAPElement vcsessionHeader = header.addChildElement(new javax.xml.namespace.QName(\"#\",\n-                        \"vcSessionCookie\"));\n-                vcsessionHeader.setValue(vcSessionCookie);\n-\n-            } catch (DOMException e) {\n-                s_logger.debug(e);\n-                throw new CloudRuntimeException(e);\n-            } catch (SOAPException e) {\n-                s_logger.debug(e);\n-                throw new CloudRuntimeException(e);\n-            }\n-        }\n-        return true;\n-    }\n-\n-    @Override\n-    public void close(MessageContext arg0) {\n-    }\n-\n-    @Override\n-    public boolean handleFault(SOAPMessageContext arg0) {\n-        return false;\n-    }\n-\n-    @Override\n-    public Set<QName> getHeaders() {\n-        return null;\n-    }\n-\n-    SOAPHeader getSOAPHeader(SOAPMessageContext smc) throws SOAPException {\n-        return smc.getMessage().getSOAPPart().getEnvelope().getHeader() == null ? smc\n-                .getMessage().getSOAPPart().getEnvelope().addHeader()\n-                : smc.getMessage().getSOAPPart().getEnvelope().getHeader();\n-    }\n-\n-    boolean isOutgoingMessage(SOAPMessageContext smc) {\n-        Boolean outboundProperty = (Boolean)smc.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);\n-        return outboundProperty;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5MTgzMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496891830", "bodyText": "new method doSomeChildClusterStuff(ScopeType scopeType, ...)", "author": "DaanHoogland", "createdAt": "2020-09-29T16:50:49Z", "path": "engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java", "diffHunk": "@@ -161,6 +161,13 @@ public DataStore attachCluster(DataStore store) {\n         pool.setScope(ScopeType.CLUSTER);\n         pool.setStatus(StoragePoolStatus.Up);\n         this.dataStoreDao.update(pool.getId(), pool);\n+        if(pool.getPoolType() == StoragePoolType.DatastoreCluster && pool.getParent() == 0) {\n+            List<StoragePoolVO> childDatastores = dataStoreDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n+            for (StoragePoolVO child : childDatastores) {\n+                child.setScope(ScopeType.CLUSTER);\n+                this.dataStoreDao.update(child.getId(), child);\n+            }\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java b/engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java\nindex ac2c93567c..31b57080ae 100644\n--- a/engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java\n+++ b/engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java\n\n@@ -161,13 +161,6 @@ public class PrimaryDataStoreHelper {\n         pool.setScope(ScopeType.CLUSTER);\n         pool.setStatus(StoragePoolStatus.Up);\n         this.dataStoreDao.update(pool.getId(), pool);\n-        if(pool.getPoolType() == StoragePoolType.DatastoreCluster && pool.getParent() == 0) {\n-            List<StoragePoolVO> childDatastores = dataStoreDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n-            for (StoragePoolVO child : childDatastores) {\n-                child.setScope(ScopeType.CLUSTER);\n-                this.dataStoreDao.update(child.getId(), child);\n-            }\n-        }\n         return dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5MzI3Mg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496893272", "bodyText": "call of doSomeChildClusterStuff(ScopeType.ZONE, ...)", "author": "DaanHoogland", "createdAt": "2020-09-29T16:53:01Z", "path": "engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java", "diffHunk": "@@ -178,6 +185,13 @@ public DataStore attachZone(DataStore store, HypervisorType hypervisor) {\n         pool.setHypervisor(hypervisor);\n         pool.setStatus(StoragePoolStatus.Up);\n         this.dataStoreDao.update(pool.getId(), pool);\n+        if(pool.getPoolType() == StoragePoolType.DatastoreCluster && pool.getParent() == 0) {\n+            List<StoragePoolVO> childDatastores = dataStoreDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n+            for (StoragePoolVO child : childDatastores) {\n+                child.setScope(ScopeType.ZONE);\n+                this.dataStoreDao.update(child.getId(), child);\n+            }\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java b/engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java\nindex ac2c93567c..31b57080ae 100644\n--- a/engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java\n+++ b/engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java\n\n@@ -185,13 +178,6 @@ public class PrimaryDataStoreHelper {\n         pool.setHypervisor(hypervisor);\n         pool.setStatus(StoragePoolStatus.Up);\n         this.dataStoreDao.update(pool.getId(), pool);\n-        if(pool.getPoolType() == StoragePoolType.DatastoreCluster && pool.getParent() == 0) {\n-            List<StoragePoolVO> childDatastores = dataStoreDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n-            for (StoragePoolVO child : childDatastores) {\n-                child.setScope(ScopeType.ZONE);\n-                this.dataStoreDao.update(child.getId(), child);\n-            }\n-        }\n         return dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5NjYwNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496896604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "DaanHoogland", "createdAt": "2020-09-29T16:58:21Z", "path": "engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java", "diffHunk": "@@ -2125,4 +2132,4 @@ public void unmanageVolume(long volumeId) {\n             volDao.remove(vol.getId());\n         }\n     }\n-}\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java b/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java\nindex 3ccb7be8f6..77413ad6c2 100644\n--- a/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java\n+++ b/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java\n\n@@ -2132,4 +2125,4 @@ public class VolumeServiceImpl implements VolumeService {\n             volDao.remove(vol.getId());\n         }\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5ODkyOA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496898928", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T17:02:08Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualStorageObjectManagerMO.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.vmware.mo;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualStorageObjectManagerMO.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualStorageObjectManagerMO.java\ndeleted file mode 100644\nindex d5f4eb3af0..0000000000\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualStorageObjectManagerMO.java\n+++ /dev/null\n\n@@ -1,94 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.hypervisor.vmware.mo;\n-\n-import com.vmware.vim25.ID;\n-import com.vmware.vim25.TaskInfo;\n-import com.vmware.vim25.VStorageObject;\n-import com.vmware.vim25.VirtualDiskType;\n-import com.vmware.vim25.VslmCreateSpec;\n-import com.vmware.vim25.VslmCreateSpecDiskFileBackingSpec;\n-import org.apache.log4j.Logger;\n-\n-import com.vmware.vim25.ManagedObjectReference;\n-\n-import com.cloud.hypervisor.vmware.util.VmwareContext;\n-\n-public class VirtualStorageObjectManagerMO extends BaseMO {\n-    @SuppressWarnings(\"unused\")\n-    private static final Logger LOGGER = Logger.getLogger(VirtualStorageObjectManagerMO.class);\n-\n-    public VirtualStorageObjectManagerMO(VmwareContext context) {\n-        super(context, context.getServiceContent().getVStorageObjectManager());\n-    }\n-\n-    public VirtualStorageObjectManagerMO(VmwareContext context, ManagedObjectReference morDiskMgr) {\n-        super(context, morDiskMgr);\n-    }\n-\n-    public VirtualStorageObjectManagerMO(VmwareContext context, String morType, String morValue) {\n-        super(context, morType, morValue);\n-    }\n-\n-    public VStorageObject registerVirtualDisk(DatastoreFile datastoreFile, String name, String dcName) throws Exception {\n-        StringBuilder sb = new StringBuilder();\n-        //https://10.2.2.254/folder/i-2-4-VM/89e3756d9b7444dc92388eb36ddd026b.vmdk?dcPath=datacenter-21&dsName=c84e4af9b6ac33e887a25d9242650091\n-        sb.append(\"https://\").append(_context.getServerAddress()).append(\"/folder/\");\n-        sb.append(datastoreFile.getRelativePath());\n-        sb.append(\"?dcPath=\");\n-        sb.append(dcName);\n-        sb.append(\"&dsName=\");\n-        sb.append(datastoreFile.getDatastoreName());\n-        return _context.getService().registerDisk(_mor, sb.toString(), name);\n-    }\n-\n-    public VStorageObject retrieveVirtualDisk (ID id, ManagedObjectReference morDS) throws Exception {\n-        return _context.getService().retrieveVStorageObject(_mor, id, morDS);\n-    }\n-\n-    public VStorageObject createDisk(ManagedObjectReference morDS, VirtualDiskType diskType, long currentSizeInBytes, String datastoreFilepath, String filename) throws Exception {\n-        long currentSizeInMB = currentSizeInBytes/(1024*1024);\n-\n-        VslmCreateSpecDiskFileBackingSpec diskFileBackingSpec = new VslmCreateSpecDiskFileBackingSpec();\n-        diskFileBackingSpec.setDatastore(morDS);\n-        diskFileBackingSpec.setProvisioningType(diskType.value());\n-        // path should be just the folder name. For example, instead of '[datastore1] folder1/filename.vmdk' you would just do 'folder1'.\n-        // path is introduced from 6.7. In 6.5 disk will be created in the default folder \"fcd\"\n-        diskFileBackingSpec.setPath(null);\n-\n-        VslmCreateSpec vslmCreateSpec = new VslmCreateSpec();\n-        vslmCreateSpec.setBackingSpec(diskFileBackingSpec);\n-        vslmCreateSpec.setCapacityInMB(currentSizeInMB);\n-        vslmCreateSpec.setName(filename);\n-\n-        ManagedObjectReference morTask = _context.getService().createDiskTask(_mor, vslmCreateSpec);\n-        boolean result = _context.getVimClient().waitForTask(morTask);\n-\n-        VStorageObject vStorageObject = null;\n-        if (result) {\n-            _context.waitForTaskProgressDone(morTask);\n-            //_context.getService().reconcileDatastoreInventoryTask(_mor, morDS);\n-            TaskInfo taskInfo = TaskMO.getTaskInfo(_context, morTask);\n-            vStorageObject = (VStorageObject)taskInfo.getResult();\n-\n-        } else {\n-            LOGGER.error(\"VMware CreateDisk_Task failed due to \" + TaskMO.getTaskFailureInfo(_context, morTask));\n-        }\n-\n-        return vStorageObject;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMDY0NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496900644", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T17:05:07Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/StoragepodMO.java", "diffHunk": "@@ -0,0 +1,48 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.hypervisor.vmware.mo;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/StoragepodMO.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/StoragepodMO.java\ndeleted file mode 100644\nindex afa3a02212..0000000000\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/StoragepodMO.java\n+++ /dev/null\n\n@@ -1,48 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package com.cloud.hypervisor.vmware.mo;\n-\n-import com.cloud.hypervisor.vmware.util.VmwareContext;\n-import com.vmware.vim25.ManagedObjectReference;\n-import com.vmware.vim25.StoragePodSummary;\n-import org.apache.log4j.Logger;\n-\n-import java.util.List;\n-\n-public class StoragepodMO extends BaseMO {\n-\n-    private static final Logger LOGGER = Logger.getLogger(StoragepodMO.class);\n-\n-    public StoragepodMO(VmwareContext context, ManagedObjectReference mor) {\n-        super(context, mor);\n-    }\n-\n-    public StoragepodMO(VmwareContext context, String morType, String morValue) {\n-        super(context, morType, morValue);\n-    }\n-\n-    public StoragePodSummary getDatastoreClusterSummary() throws Exception {\n-        return (StoragePodSummary)_context.getVimClient().getDynamicProperty(_mor, \"summary\");\n-    }\n-\n-    public List<ManagedObjectReference> getDatastoresInDatastoreCluster() throws Exception {\n-        List<ManagedObjectReference> datastoresInCluster = _context.getVimClient().getDynamicProperty(_mor, \"childEntity\");\n-        return datastoresInCluster;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMTEwNg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496901106", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T17:05:53Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmProfileManagerMO.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.vmware.mo;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46b5322d9bb6631e3136f18f005624419c21a8c0", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmProfileManagerMO.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmProfileManagerMO.java\nindex a4142ecde8..38f18d7e83 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmProfileManagerMO.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmProfileManagerMO.java\n\n@@ -27,6 +27,7 @@ import com.vmware.pbm.PbmProfileResourceType;\n import com.vmware.pbm.PbmProfileResourceTypeEnum;\n import com.vmware.vim25.ManagedObjectReference;\n \n+import com.vmware.vim25.VirtualMachineDefinedProfileSpec;\n import org.apache.log4j.Logger;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMTU2Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496901566", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T17:06:42Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmPlacementSolverMO.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.vmware.mo;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmPlacementSolverMO.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmPlacementSolverMO.java\ndeleted file mode 100644\nindex 3eb909fc31..0000000000\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmPlacementSolverMO.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-package com.cloud.hypervisor.vmware.mo;\n-\n-import com.cloud.hypervisor.vmware.util.VmwareContext;\n-import com.vmware.pbm.PbmPlacementCompatibilityResult;\n-import com.vmware.pbm.PbmPlacementHub;\n-import com.vmware.pbm.PbmProfile;\n-import com.vmware.pbm.PbmProfileId;\n-import com.vmware.vim25.ManagedObjectReference;\n-import org.apache.commons.collections.CollectionUtils;\n-import org.apache.log4j.Logger;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class PbmPlacementSolverMO extends BaseMO {\n-\n-    private static final Logger LOGGER = Logger.getLogger(PbmPlacementSolverMO.class);\n-\n-    public PbmPlacementSolverMO (VmwareContext context) {\n-        super(context, context.getPbmServiceContent().getPlacementSolver());\n-    }\n-\n-    public PbmPlacementSolverMO(VmwareContext context, ManagedObjectReference morPlacementSolver) {\n-        super(context, morPlacementSolver);\n-    }\n-\n-    public PbmPlacementSolverMO(VmwareContext context, String morType, String morValue) {\n-        super(context, morType, morValue);\n-    }\n-\n-    public boolean isDatastoreCompatibleWithStorageProfile(ManagedObjectReference dsMor, PbmProfile profile) throws Exception {\n-        boolean isDatastoreCompatibleWithStorageProfile = false;\n-\n-        PbmPlacementHub placementHub = new PbmPlacementHub();\n-        placementHub.setHubId(dsMor.getValue());\n-        placementHub.setHubType(dsMor.getType());\n-\n-        List<PbmPlacementHub> placementHubList = new ArrayList<PbmPlacementHub>();\n-        placementHubList.add(placementHub);\n-        PbmProfileId profileId = profile.getProfileId();\n-        List<PbmPlacementCompatibilityResult> placementCompatibilityResultList = _context.getPbmService().pbmCheckCompatibility(_mor, placementHubList, profileId);\n-        if (CollectionUtils.isNotEmpty(placementCompatibilityResultList)) {\n-            for (PbmPlacementCompatibilityResult placementResult : placementCompatibilityResultList) {\n-                // Check for error and warning\n-                if (CollectionUtils.isEmpty(placementResult.getError()) && CollectionUtils.isEmpty(placementResult.getWarning())) {\n-                    isDatastoreCompatibleWithStorageProfile = true;\n-                }\n-            }\n-        }\n-        return isDatastoreCompatibleWithStorageProfile;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMjM3NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496902374", "bodyText": "\ud83d\udc4d", "author": "DaanHoogland", "createdAt": "2020-09-29T17:08:02Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1704,6 +1736,11 @@ public static String resolveHostNameInUrl(DatacenterMO dcMo, String url) {\n         return url;\n     }\n \n+    /**", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1736,11 +1711,6 @@ public class HypervisorHostHelper {\n         return url;\n     }\n \n-    /**\n-     * removes the NetworkSection element from the {ovfString} if it is an ovf xml file\n-     * @param ovfString input string\n-     * @return like the input string but if xml elements by name {NetworkSection} removed\n-     */\n     public static String removeOVFNetwork(final String ovfString)  {\n         if (ovfString == null || ovfString.isEmpty()) {\n             return ovfString;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMjYxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496902610", "bodyText": "\ud83d\udc4d", "author": "DaanHoogland", "createdAt": "2020-09-29T17:08:26Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1738,33 +1775,47 @@ public static String removeOVFNetwork(final String ovfString)  {\n         return ovfString;\n     }\n \n+    /**", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1775,12 +1745,8 @@ public class HypervisorHostHelper {\n         return ovfString;\n     }\n \n-    /**\n-     * deploys a new VM from a ovf spec. It ignores network, defaults locale to 'US'\n-     * @throws Exception shoud be a VmwareResourceException\n-     */\n     public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath, String vmName, DatastoreMO dsMo, String diskOption, ManagedObjectReference morRp,\n-                                       ManagedObjectReference morHost, String configurationId) throws CloudRuntimeException, IOException {\n+            ManagedObjectReference morHost) throws Exception {\n \n         assert (morRp != null);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMjc1MA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496902750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws Exception shoud be a VmwareResourceException\n          \n          \n            \n                 * @throws CloudRuntimeException should be a VmwareResourceException\n          \n          \n            \n                 * @throws IOException if ovfFilePath not valid?", "author": "DaanHoogland", "createdAt": "2020-09-29T17:08:40Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1738,33 +1775,47 @@ public static String removeOVFNetwork(final String ovfString)  {\n         return ovfString;\n     }\n \n+    /**\n+     * deploys a new VM from a ovf spec. It ignores network, defaults locale to 'US'\n+     * @throws Exception shoud be a VmwareResourceException", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1775,12 +1745,8 @@ public class HypervisorHostHelper {\n         return ovfString;\n     }\n \n-    /**\n-     * deploys a new VM from a ovf spec. It ignores network, defaults locale to 'US'\n-     * @throws Exception shoud be a VmwareResourceException\n-     */\n     public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath, String vmName, DatastoreMO dsMo, String diskOption, ManagedObjectReference morRp,\n-                                       ManagedObjectReference morHost, String configurationId) throws CloudRuntimeException, IOException {\n+            ManagedObjectReference morHost) throws Exception {\n \n         assert (morRp != null);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNTMyOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496905329", "bodyText": "factorred out in new method?", "author": "DaanHoogland", "createdAt": "2020-09-29T17:12:57Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1738,33 +1775,47 @@ public static String removeOVFNetwork(final String ovfString)  {\n         return ovfString;\n     }\n \n+    /**\n+     * deploys a new VM from a ovf spec. It ignores network, defaults locale to 'US'\n+     * @throws Exception shoud be a VmwareResourceException\n+     */\n     public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath, String vmName, DatastoreMO dsMo, String diskOption, ManagedObjectReference morRp,\n-            ManagedObjectReference morHost) throws Exception {\n+                                       ManagedObjectReference morHost, String configurationId) throws CloudRuntimeException, IOException {\n \n         assert (morRp != null);\n \n         OvfCreateImportSpecParams importSpecParams = new OvfCreateImportSpecParams();\n         importSpecParams.setHostSystem(morHost);\n         importSpecParams.setLocale(\"US\");\n         importSpecParams.setEntityName(vmName);\n-        importSpecParams.setDeploymentOption(\"\");\n+        String deploymentOption = StringUtils.isNotBlank(configurationId) ? configurationId : \"\";\n+        importSpecParams.setDeploymentOption(deploymentOption);\n         importSpecParams.setDiskProvisioning(diskOption); // diskOption: thin, thick, etc\n \n         String ovfDescriptor = removeOVFNetwork(HttpNfcLeaseMO.readOvfContent(ovfFilePath));\n         VmwareContext context = host.getContext();\n-        OvfCreateImportSpecResult ovfImportResult =\n-                context.getService().createImportSpec(context.getServiceContent().getOvfManager(), ovfDescriptor, morRp, dsMo.getMor(), importSpecParams);\n-\n+        OvfCreateImportSpecResult ovfImportResult = null;\n+        try {\n+            ovfImportResult = context.getService().createImportSpec(context.getServiceContent().getOvfManager(), ovfDescriptor, morRp, dsMo.getMor(), importSpecParams);\n+        } catch (ConcurrentAccessFaultMsg\n+                | FileFaultFaultMsg\n+                | InvalidDatastoreFaultMsg\n+                | InvalidStateFaultMsg\n+                | RuntimeFaultFaultMsg\n+                | TaskInProgressFaultMsg\n+                | VmConfigFaultFaultMsg error) {\n+            throw new CloudRuntimeException(\"ImportSpec creation failed\", error);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1775,12 +1745,8 @@ public class HypervisorHostHelper {\n         return ovfString;\n     }\n \n-    /**\n-     * deploys a new VM from a ovf spec. It ignores network, defaults locale to 'US'\n-     * @throws Exception shoud be a VmwareResourceException\n-     */\n     public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath, String vmName, DatastoreMO dsMo, String diskOption, ManagedObjectReference morRp,\n-                                       ManagedObjectReference morHost, String configurationId) throws CloudRuntimeException, IOException {\n+            ManagedObjectReference morHost) throws Exception {\n \n         assert (morRp != null);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNTc1Mw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496905753", "bodyText": "factor in new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:13:41Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1824,55 +1780,22 @@ public class HypervisorHostHelper {\n             }\n         }\n \n-        DatacenterMO dcMo = null;\n-        try {\n-            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n-        }\n-        ManagedObjectReference folderMO = null;\n-        try {\n-            folderMO = dcMo.getVmFolder();\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n-        }\n-        ManagedObjectReference morLease = null;\n-        try {\n-            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n-        } catch (DuplicateNameFaultMsg\n-                | FileFaultFaultMsg\n-                | InsufficientResourcesFaultFaultMsg\n-                | InvalidDatastoreFaultMsg\n-                | InvalidNameFaultMsg\n-                | OutOfBoundsFaultMsg\n-                | RuntimeFaultFaultMsg\n-                | VmConfigFaultFaultMsg fault) {\n-            throw new CloudRuntimeException(\"import vApp failed\",fault);\n-        }\n+        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new CloudRuntimeException(msg);\n+            throw new Exception(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = null;\n-        try {\n-            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n-        }\n+        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n         try {\n             if (state == HttpNfcLeaseState.READY) {\n                 final long totalBytes = HttpNfcLeaseMO.calcTotalBytes(ovfImportResult);\n                 File ovfFile = new File(ovfFilePath);\n \n-                HttpNfcLeaseInfo httpNfcLeaseInfo = null;\n-                try {\n-                    httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n-                } catch (Exception e) {\n-                    throw new CloudRuntimeException(\"error waiting for lease info\", e);\n-                }\n+                HttpNfcLeaseInfo httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n                 List<HttpNfcLeaseDeviceUrl> deviceUrls = httpNfcLeaseInfo.getDeviceUrl();\n                 long bytesAlreadyWritten = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNTkwMg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496905902", "bodyText": "factor in new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:13:58Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }\n+        ManagedObjectReference folderMO = null;\n+        try {\n+            folderMO = dcMo.getVmFolder();\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1824,55 +1780,22 @@ public class HypervisorHostHelper {\n             }\n         }\n \n-        DatacenterMO dcMo = null;\n-        try {\n-            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n-        }\n-        ManagedObjectReference folderMO = null;\n-        try {\n-            folderMO = dcMo.getVmFolder();\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n-        }\n-        ManagedObjectReference morLease = null;\n-        try {\n-            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n-        } catch (DuplicateNameFaultMsg\n-                | FileFaultFaultMsg\n-                | InsufficientResourcesFaultFaultMsg\n-                | InvalidDatastoreFaultMsg\n-                | InvalidNameFaultMsg\n-                | OutOfBoundsFaultMsg\n-                | RuntimeFaultFaultMsg\n-                | VmConfigFaultFaultMsg fault) {\n-            throw new CloudRuntimeException(\"import vApp failed\",fault);\n-        }\n+        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new CloudRuntimeException(msg);\n+            throw new Exception(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = null;\n-        try {\n-            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n-        }\n+        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n         try {\n             if (state == HttpNfcLeaseState.READY) {\n                 final long totalBytes = HttpNfcLeaseMO.calcTotalBytes(ovfImportResult);\n                 File ovfFile = new File(ovfFilePath);\n \n-                HttpNfcLeaseInfo httpNfcLeaseInfo = null;\n-                try {\n-                    httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n-                } catch (Exception e) {\n-                    throw new CloudRuntimeException(\"error waiting for lease info\", e);\n-                }\n+                HttpNfcLeaseInfo httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n                 List<HttpNfcLeaseDeviceUrl> deviceUrls = httpNfcLeaseInfo.getDeviceUrl();\n                 long bytesAlreadyWritten = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjA0Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496906046", "bodyText": "new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:14:12Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }\n+        ManagedObjectReference folderMO = null;\n+        try {\n+            folderMO = dcMo.getVmFolder();\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n+        }\n+        ManagedObjectReference morLease = null;\n+        try {\n+            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n+        } catch (DuplicateNameFaultMsg\n+                | FileFaultFaultMsg\n+                | InsufficientResourcesFaultFaultMsg\n+                | InvalidDatastoreFaultMsg\n+                | InvalidNameFaultMsg\n+                | OutOfBoundsFaultMsg\n+                | RuntimeFaultFaultMsg\n+                | VmConfigFaultFaultMsg fault) {\n+            throw new CloudRuntimeException(\"import vApp failed\",fault);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1824,55 +1780,22 @@ public class HypervisorHostHelper {\n             }\n         }\n \n-        DatacenterMO dcMo = null;\n-        try {\n-            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n-        }\n-        ManagedObjectReference folderMO = null;\n-        try {\n-            folderMO = dcMo.getVmFolder();\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n-        }\n-        ManagedObjectReference morLease = null;\n-        try {\n-            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n-        } catch (DuplicateNameFaultMsg\n-                | FileFaultFaultMsg\n-                | InsufficientResourcesFaultFaultMsg\n-                | InvalidDatastoreFaultMsg\n-                | InvalidNameFaultMsg\n-                | OutOfBoundsFaultMsg\n-                | RuntimeFaultFaultMsg\n-                | VmConfigFaultFaultMsg fault) {\n-            throw new CloudRuntimeException(\"import vApp failed\",fault);\n-        }\n+        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new CloudRuntimeException(msg);\n+            throw new Exception(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = null;\n-        try {\n-            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n-        }\n+        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n         try {\n             if (state == HttpNfcLeaseState.READY) {\n                 final long totalBytes = HttpNfcLeaseMO.calcTotalBytes(ovfImportResult);\n                 File ovfFile = new File(ovfFilePath);\n \n-                HttpNfcLeaseInfo httpNfcLeaseInfo = null;\n-                try {\n-                    httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n-                } catch (Exception e) {\n-                    throw new CloudRuntimeException(\"error waiting for lease info\", e);\n-                }\n+                HttpNfcLeaseInfo httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n                 List<HttpNfcLeaseDeviceUrl> deviceUrls = httpNfcLeaseInfo.getDeviceUrl();\n                 long bytesAlreadyWritten = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjIyNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496906227", "bodyText": "new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:14:27Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }\n+        ManagedObjectReference folderMO = null;\n+        try {\n+            folderMO = dcMo.getVmFolder();\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n+        }\n+        ManagedObjectReference morLease = null;\n+        try {\n+            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n+        } catch (DuplicateNameFaultMsg\n+                | FileFaultFaultMsg\n+                | InsufficientResourcesFaultFaultMsg\n+                | InvalidDatastoreFaultMsg\n+                | InvalidNameFaultMsg\n+                | OutOfBoundsFaultMsg\n+                | RuntimeFaultFaultMsg\n+                | VmConfigFaultFaultMsg fault) {\n+            throw new CloudRuntimeException(\"import vApp failed\",fault);\n+        }\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new Exception(msg);\n+            throw new CloudRuntimeException(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n+        HttpNfcLeaseState state = null;\n+        try {\n+            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1824,55 +1780,22 @@ public class HypervisorHostHelper {\n             }\n         }\n \n-        DatacenterMO dcMo = null;\n-        try {\n-            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n-        }\n-        ManagedObjectReference folderMO = null;\n-        try {\n-            folderMO = dcMo.getVmFolder();\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n-        }\n-        ManagedObjectReference morLease = null;\n-        try {\n-            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n-        } catch (DuplicateNameFaultMsg\n-                | FileFaultFaultMsg\n-                | InsufficientResourcesFaultFaultMsg\n-                | InvalidDatastoreFaultMsg\n-                | InvalidNameFaultMsg\n-                | OutOfBoundsFaultMsg\n-                | RuntimeFaultFaultMsg\n-                | VmConfigFaultFaultMsg fault) {\n-            throw new CloudRuntimeException(\"import vApp failed\",fault);\n-        }\n+        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new CloudRuntimeException(msg);\n+            throw new Exception(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = null;\n-        try {\n-            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n-        }\n+        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n         try {\n             if (state == HttpNfcLeaseState.READY) {\n                 final long totalBytes = HttpNfcLeaseMO.calcTotalBytes(ovfImportResult);\n                 File ovfFile = new File(ovfFilePath);\n \n-                HttpNfcLeaseInfo httpNfcLeaseInfo = null;\n-                try {\n-                    httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n-                } catch (Exception e) {\n-                    throw new CloudRuntimeException(\"error waiting for lease info\", e);\n-                }\n+                HttpNfcLeaseInfo httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n                 List<HttpNfcLeaseDeviceUrl> deviceUrls = httpNfcLeaseInfo.getDeviceUrl();\n                 long bytesAlreadyWritten = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjQxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496906410", "bodyText": "new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:14:43Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }\n+        ManagedObjectReference folderMO = null;\n+        try {\n+            folderMO = dcMo.getVmFolder();\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n+        }\n+        ManagedObjectReference morLease = null;\n+        try {\n+            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n+        } catch (DuplicateNameFaultMsg\n+                | FileFaultFaultMsg\n+                | InsufficientResourcesFaultFaultMsg\n+                | InvalidDatastoreFaultMsg\n+                | InvalidNameFaultMsg\n+                | OutOfBoundsFaultMsg\n+                | RuntimeFaultFaultMsg\n+                | VmConfigFaultFaultMsg fault) {\n+            throw new CloudRuntimeException(\"import vApp failed\",fault);\n+        }\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new Exception(msg);\n+            throw new CloudRuntimeException(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n+        HttpNfcLeaseState state = null;\n+        try {\n+            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n+        }\n         try {\n             if (state == HttpNfcLeaseState.READY) {\n                 final long totalBytes = HttpNfcLeaseMO.calcTotalBytes(ovfImportResult);\n                 File ovfFile = new File(ovfFilePath);\n \n-                HttpNfcLeaseInfo httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n+                HttpNfcLeaseInfo httpNfcLeaseInfo = null;\n+                try {\n+                    httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n+                } catch (Exception e) {\n+                    throw new CloudRuntimeException(\"error waiting for lease info\", e);\n+                }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1824,55 +1780,22 @@ public class HypervisorHostHelper {\n             }\n         }\n \n-        DatacenterMO dcMo = null;\n-        try {\n-            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n-        }\n-        ManagedObjectReference folderMO = null;\n-        try {\n-            folderMO = dcMo.getVmFolder();\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n-        }\n-        ManagedObjectReference morLease = null;\n-        try {\n-            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n-        } catch (DuplicateNameFaultMsg\n-                | FileFaultFaultMsg\n-                | InsufficientResourcesFaultFaultMsg\n-                | InvalidDatastoreFaultMsg\n-                | InvalidNameFaultMsg\n-                | OutOfBoundsFaultMsg\n-                | RuntimeFaultFaultMsg\n-                | VmConfigFaultFaultMsg fault) {\n-            throw new CloudRuntimeException(\"import vApp failed\",fault);\n-        }\n+        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new CloudRuntimeException(msg);\n+            throw new Exception(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = null;\n-        try {\n-            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n-        } catch (Exception e) {\n-            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n-        }\n+        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n         try {\n             if (state == HttpNfcLeaseState.READY) {\n                 final long totalBytes = HttpNfcLeaseMO.calcTotalBytes(ovfImportResult);\n                 File ovfFile = new File(ovfFilePath);\n \n-                HttpNfcLeaseInfo httpNfcLeaseInfo = null;\n-                try {\n-                    httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n-                } catch (Exception e) {\n-                    throw new CloudRuntimeException(\"error waiting for lease info\", e);\n-                }\n+                HttpNfcLeaseInfo httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n                 List<HttpNfcLeaseDeviceUrl> deviceUrls = httpNfcLeaseInfo.getDeviceUrl();\n                 long bytesAlreadyWritten = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNzAxOA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496907018", "bodyText": "cleanup/finalize method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:15:46Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1818,31 +1903,44 @@ public void action(Long param) {\n                     String erroMsg = \"File upload task failed to complete due to: \" + e.getMessage();\n                     s_logger.error(erroMsg);\n                     importSuccess = false; // Set flag to cleanup the stale template left due to failed import operation, if any\n-                    throw new Exception(erroMsg, e);\n+                    throw new CloudRuntimeException(erroMsg, e);\n                 } catch (Throwable th) {\n                     String errorMsg = \"throwable caught during file upload task: \" + th.getMessage();\n                     s_logger.error(errorMsg);\n                     importSuccess = false; // Set flag to cleanup the stale template left due to failed import operation, if any\n-                    throw new Exception(errorMsg, th);\n+                    throw new CloudRuntimeException(errorMsg, th);\n                 } finally {\n                     progressReporter.close();\n                 }\n                 if (bytesAlreadyWritten == totalBytes) {\n-                    leaseMo.updateLeaseProgress(100);\n+                    try {\n+                        leaseMo.updateLeaseProgress(100);\n+                    } catch (Exception e) {\n+                        throw new CloudRuntimeException(\"error while waiting for lease update\", e);\n+                    }\n                 }\n             } else if (state == HttpNfcLeaseState.ERROR) {\n-                LocalizedMethodFault error = leaseMo.getLeaseError();\n+                LocalizedMethodFault error = null;\n+                try {\n+                    error = leaseMo.getLeaseError();\n+                } catch (Exception e) {\n+                    throw new CloudRuntimeException(\"error getting lease error\", e);\n+                }\n                 MethodFault fault = error.getFault();\n                 String erroMsg = \"Object creation on vCenter failed due to: Exception: \" + fault.getClass().getName() + \", message: \" + error.getLocalizedMessage();\n                 s_logger.error(erroMsg);\n-                throw new Exception(erroMsg);\n+                throw new CloudRuntimeException(erroMsg);\n             }\n         } finally {\n-            if (!importSuccess) {\n-                s_logger.error(\"Aborting the lease on \" + vmName + \" after import operation failed.\");\n-                leaseMo.abortLease();\n-            } else {\n-                leaseMo.completeLease();\n+            try {\n+                if (!importSuccess) {\n+                    s_logger.error(\"Aborting the lease on \" + vmName + \" after import operation failed.\");\n+                    leaseMo.abortLease();\n+                } else {\n+                    leaseMo.completeLease();\n+                }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\nindex 9345da92d5..1242d25f90 100644\n--- a/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n+++ b/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java\n\n@@ -1903,44 +1825,31 @@ public class HypervisorHostHelper {\n                     String erroMsg = \"File upload task failed to complete due to: \" + e.getMessage();\n                     s_logger.error(erroMsg);\n                     importSuccess = false; // Set flag to cleanup the stale template left due to failed import operation, if any\n-                    throw new CloudRuntimeException(erroMsg, e);\n+                    throw new Exception(erroMsg, e);\n                 } catch (Throwable th) {\n                     String errorMsg = \"throwable caught during file upload task: \" + th.getMessage();\n                     s_logger.error(errorMsg);\n                     importSuccess = false; // Set flag to cleanup the stale template left due to failed import operation, if any\n-                    throw new CloudRuntimeException(errorMsg, th);\n+                    throw new Exception(errorMsg, th);\n                 } finally {\n                     progressReporter.close();\n                 }\n                 if (bytesAlreadyWritten == totalBytes) {\n-                    try {\n-                        leaseMo.updateLeaseProgress(100);\n-                    } catch (Exception e) {\n-                        throw new CloudRuntimeException(\"error while waiting for lease update\", e);\n-                    }\n+                    leaseMo.updateLeaseProgress(100);\n                 }\n             } else if (state == HttpNfcLeaseState.ERROR) {\n-                LocalizedMethodFault error = null;\n-                try {\n-                    error = leaseMo.getLeaseError();\n-                } catch (Exception e) {\n-                    throw new CloudRuntimeException(\"error getting lease error\", e);\n-                }\n+                LocalizedMethodFault error = leaseMo.getLeaseError();\n                 MethodFault fault = error.getFault();\n                 String erroMsg = \"Object creation on vCenter failed due to: Exception: \" + fault.getClass().getName() + \", message: \" + error.getLocalizedMessage();\n                 s_logger.error(erroMsg);\n-                throw new CloudRuntimeException(erroMsg);\n+                throw new Exception(erroMsg);\n             }\n         } finally {\n-            try {\n-                if (!importSuccess) {\n-                    s_logger.error(\"Aborting the lease on \" + vmName + \" after import operation failed.\");\n-                    leaseMo.abortLease();\n-                } else {\n-                    leaseMo.completeLease();\n-                }\n-            } catch (Exception e) {\n-                throw new CloudRuntimeException(\"error completing lease\", e);\n+            if (!importSuccess) {\n+                s_logger.error(\"Aborting the lease on \" + vmName + \" after import operation failed.\");\n+                leaseMo.abortLease();\n+            } else {\n+                leaseMo.completeLease();\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMDU4Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496910586", "bodyText": "internal project code in open source version. please remove/reformulate this comment.", "author": "DaanHoogland", "createdAt": "2020-09-29T17:21:51Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java", "diffHunk": "@@ -745,20 +752,38 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             } else if (newSize == oldSize) {\n                 return new ResizeVolumeAnswer(cmd, true, \"success\", newSize * ResourceType.bytesToKiB);\n             }\n+            /*\n+            // FR41 this is yet to fix", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java b/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java\nindex 92b3975d17..f4d2c6d424 100644\n--- a/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java\n+++ b/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java\n\n@@ -788,7 +824,7 @@ public class VmwareResource implements StoragePoolResource, ServerResource, Vmwa\n                 s_logger.info(\"Create worker VM \" + vmName);\n \n                 // OfflineVmwareMigration: 2. create the worker with access to the data(store)\n-                vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, vmName);\n+                vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, vmName, null);\n \n                 if (vmMo == null) {\n                     // OfflineVmwareMigration: don't throw a general Exception but think of a specific one\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMDc5MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496910791", "bodyText": "code in comment please remove", "author": "DaanHoogland", "createdAt": "2020-09-29T17:22:13Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java", "diffHunk": "@@ -745,20 +752,38 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             } else if (newSize == oldSize) {\n                 return new ResizeVolumeAnswer(cmd, true, \"success\", newSize * ResourceType.bytesToKiB);\n             }\n+            /*\n+            // FR41 this is yet to fix\n+            ManagedObjectReference morDS1 = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, cmd.getPoolUuid());\n+            DatastoreMO dsMo1 = new DatastoreMO(hyperHost.getContext(), morDS1);\n+            vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo1, path + VMDK_EXTENSION);\n+            DatastoreFile dsFile1 = new DatastoreFile(vmdkDataStorePath);\n+\n+            s_logger.debug(\"vDiskid does not exist for volume \" + vmdkDataStorePath + \" registering the disk now\");\n+            VirtualStorageObjectManagerMO vStorageObjectManagerMO = new VirtualStorageObjectManagerMO(getServiceContext());\n+            try {\n+                VStorageObject vStorageObject = vStorageObjectManagerMO.registerVirtualDisk(dsFile1, null, dsMo1.getOwnerDatacenter().second());\n+                VStorageObjectConfigInfo diskConfigInfo = vStorageObject.getConfig();\n+                ID vdiskId = diskConfigInfo.getId();\n+            } catch (Throwable e) {\n+                if (e instanceof AlreadyExistsFaultMsg) {\n+\n+                }\n+            }*/", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java b/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java\nindex 92b3975d17..f4d2c6d424 100644\n--- a/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java\n+++ b/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java\n\n@@ -788,7 +824,7 @@ public class VmwareResource implements StoragePoolResource, ServerResource, Vmwa\n                 s_logger.info(\"Create worker VM \" + vmName);\n \n                 // OfflineVmwareMigration: 2. create the worker with access to the data(store)\n-                vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, vmName);\n+                vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, vmName, null);\n \n                 if (vmMo == null) {\n                     // OfflineVmwareMigration: don't throw a general Exception but think of a specific one\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNjE5Mw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496916193", "bodyText": "long method, can you split it?", "author": "DaanHoogland", "createdAt": "2020-09-29T17:30:23Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java", "diffHunk": "@@ -891,6 +886,92 @@ public Answer cloneVolumeFromBaseTemplate(CopyCommand cmd) {\n         }\n     }\n \n+    private String cloneVMwithVMname(VmwareContext context, VmwareHypervisorHost hyperHost, TemplateObjectTO template,\n+                                     VirtualMachineMO vmTemplate, VolumeObjectTO volume, DatacenterMO dcMo, DatastoreMO dsMo) throws Exception {\n+        ManagedObjectReference morDatastore = dsMo.getMor();\n+        ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n+        ManagedObjectReference morCluster = hyperHost.getHyperHostCluster();\n+        if (template.getSize() != null) {\n+            _fullCloneFlag = volume.getSize() > template.getSize() ? true : _fullCloneFlag;\n+        }\n+        if (!_fullCloneFlag) {\n+            createVMLinkedClone(vmTemplate, dcMo, volume.getVmName(), morDatastore, morPool);\n+        } else {\n+            createVMFullClone(vmTemplate, dcMo, dsMo, volume.getVmName(), morDatastore, morPool);\n+        }\n+\n+        VirtualMachineMO vmMo = new ClusterMO(context, morCluster).findVmOnHyperHost(volume.getVmName());\n+        assert (vmMo != null);\n+\n+        return vmMo.getVmdkFileBaseNames().get(0);\n+    }\n+\n+    private String createVMFolderWithVMName(VmwareContext context, VmwareHypervisorHost hyperHost, TemplateObjectTO template,", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "588b7a1c90b7d7921dfcdc0a346f45ebc854f1d8", "chunk": "diff --git a/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java b/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\nindex 677be23a54..87cde221ea 100644\n--- a/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\n+++ b/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\n\n@@ -909,55 +910,63 @@ public class VmwareStorageProcessor implements StorageProcessor {\n     private String createVMFolderWithVMName(VmwareContext context, VmwareHypervisorHost hyperHost, TemplateObjectTO template,\n                                             VirtualMachineMO vmTemplate, VolumeObjectTO volume, DatacenterMO dcMo, DatastoreMO dsMo,\n                                             String searchExcludedFolders) throws Exception {\n-        ManagedObjectReference morDatastore = dsMo.getMor();\n-        ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n-        ManagedObjectReference morCluster = hyperHost.getHyperHostCluster();\n         String vmdkName = volume.getName();\n-        if (template.getSize() != null){\n-            _fullCloneFlag = volume.getSize() > template.getSize() ? true : _fullCloneFlag;\n-        }\n-        if (!_fullCloneFlag) {\n-            createVMLinkedClone(vmTemplate, dcMo, vmdkName, morDatastore, morPool);\n-        } else {\n-            createVMFullClone(vmTemplate, dcMo, dsMo,vmdkName, morDatastore, morPool);\n-        }\n+        try {\n+            ManagedObjectReference morDatastore = dsMo.getMor();\n+            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n+            ManagedObjectReference morCluster = hyperHost.getHyperHostCluster();\n+            if (template.getSize() != null){\n+                _fullCloneFlag = volume.getSize() > template.getSize() ? true : _fullCloneFlag;\n+            }\n+            if (!_fullCloneFlag) {\n+                createVMLinkedClone(vmTemplate, dcMo, vmdkName, morDatastore, morPool);\n+            } else {\n+                createVMFullClone(vmTemplate, dcMo, dsMo, vmdkName, morDatastore, morPool);\n+            }\n \n-        VirtualMachineMO vmMo = new ClusterMO(context, morCluster).findVmOnHyperHost(vmdkName);\n-        assert (vmMo != null);\n+            VirtualMachineMO vmMo = new ClusterMO(context, morCluster).findVmOnHyperHost(vmdkName);\n+            assert (vmMo != null);\n \n-        String vmdkFileBaseName = vmMo.getVmdkFileBaseNames().get(0);\n-        s_logger.info(\"Move volume out of volume-wrapper VM \" + vmdkFileBaseName);\n-        String[] vmwareLayoutFilePair = VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo, vmdkName, vmdkFileBaseName, VmwareStorageLayoutType.VMWARE, !_fullCloneFlag);\n-        String[] legacyCloudStackLayoutFilePair = VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo, vmdkName, vmdkFileBaseName, VmwareStorageLayoutType.CLOUDSTACK_LEGACY, !_fullCloneFlag);\n+            String vmdkFileBaseName = vmMo.getVmdkFileBaseNames().get(0);\n+            s_logger.info(\"Move volume out of volume-wrapper VM \" + vmdkFileBaseName);\n+            String[] vmwareLayoutFilePair = VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo, vmdkName, vmdkFileBaseName, VmwareStorageLayoutType.VMWARE, !_fullCloneFlag);\n+            String[] legacyCloudStackLayoutFilePair = VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo, vmdkName, vmdkFileBaseName, VmwareStorageLayoutType.CLOUDSTACK_LEGACY, !_fullCloneFlag);\n \n-        for (int i=0; i<vmwareLayoutFilePair.length; i++) {\n-            dsMo.moveDatastoreFile(vmwareLayoutFilePair[i], dcMo.getMor(), dsMo.getMor(), legacyCloudStackLayoutFilePair[i], dcMo.getMor(), true);\n-        }\n+            for (int i=0; i<vmwareLayoutFilePair.length; i++) {\n+                dsMo.moveDatastoreFile(vmwareLayoutFilePair[i], dcMo.getMor(), dsMo.getMor(), legacyCloudStackLayoutFilePair[i], dcMo.getMor(), true);\n+            }\n \n-        s_logger.info(\"detach disks from volume-wrapper VM \" + vmdkName);\n-        vmMo.detachAllDisks();\n+            s_logger.info(\"detach disks from volume-wrapper VM \" + vmdkName);\n+            vmMo.detachAllDisks();\n \n-        s_logger.info(\"destroy volume-wrapper VM \" + vmdkName);\n-        vmMo.destroy();\n+            s_logger.info(\"destroy volume-wrapper VM \" + vmdkName);\n+            vmMo.destroy();\n \n-        String srcFile = dsMo.getDatastorePath(vmdkName, true);\n+            String srcFile = dsMo.getDatastorePath(vmdkName, true);\n \n-        dsMo.deleteFile(srcFile, dcMo.getMor(), true, searchExcludedFolders);\n+            dsMo.deleteFile(srcFile, dcMo.getMor(), true, searchExcludedFolders);\n \n-        if (dsMo.folderExists(String.format(\"[%s]\", dsMo.getName()), vmdkName)) {\n-            dsMo.deleteFolder(srcFile, dcMo.getMor());\n-        }\n+            if (dsMo.folderExists(String.format(\"[%s]\", dsMo.getName()), vmdkName)) {\n+                dsMo.deleteFolder(srcFile, dcMo.getMor());\n+            }\n \n-        // restoreVM - move the new ROOT disk into corresponding VM folder\n-        VirtualMachineMO restoreVmMo = dcMo.findVm(volume.getVmName());\n-        if (restoreVmMo != null) {\n-            String vmNameInVcenter = restoreVmMo.getName(); // VM folder name in datastore will be VM's name in vCenter.\n-            if (dsMo.folderExists(String.format(\"[%s]\", dsMo.getName()), vmNameInVcenter)) {\n-                VmwareStorageLayoutHelper.syncVolumeToVmDefaultFolder(dcMo, vmNameInVcenter, dsMo, vmdkFileBaseName, searchExcludedFolders);\n+            // restoreVM - move the new ROOT disk into corresponding VM folder\n+            VirtualMachineMO restoreVmMo = dcMo.findVm(volume.getVmName());\n+            if (restoreVmMo != null) {\n+                String vmNameInVcenter = restoreVmMo.getName(); // VM folder name in datastore will be VM's name in vCenter.\n+                if (dsMo.folderExists(String.format(\"[%s]\", dsMo.getName()), vmNameInVcenter)) {\n+                    VmwareStorageLayoutHelper.syncVolumeToVmDefaultFolder(dcMo, vmNameInVcenter, dsMo, vmdkFileBaseName, searchExcludedFolders);\n+                }\n             }\n-        }\n \n-        return vmdkFileBaseName;\n+            return vmdkFileBaseName;\n+        } finally {\n+            // check if volume wrapper VM is cleaned, if not cleanup\n+            VirtualMachineMO vmdknamedVM = dcMo.findVm(vmdkName);\n+            if (vmdknamedVM != null) {\n+                vmdknamedVM.destroy();\n+            }\n+        }\n     }\n \n     private void createLinkedOrFullClone(TemplateObjectTO template, VolumeObjectTO volume, DatacenterMO dcMo, VirtualMachineMO vmMo, ManagedObjectReference morDatastore,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNjg0OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496916849", "bodyText": "internal project code in open source version, please remove.", "author": "DaanHoogland", "createdAt": "2020-09-29T17:31:22Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java", "diffHunk": "@@ -1124,6 +1203,12 @@ private void postCreatePrivateTemplate(String installFullPath, long templateId,\n                 throw new Exception(msg);\n             }\n \n+            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n+            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n+            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n+            clonedVm = dcMo.findVm(templateUniqueName);\n+\n+            /* FR41 THIS IS OLD way of creating template using snapshot", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java b/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\nindex 677be23a54..fe9262310e 100644\n--- a/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\n+++ b/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\n\n@@ -1215,9 +1215,11 @@ public class VmwareStorageProcessor implements StorageProcessor {\n                 throw new Exception(msg);\n             }\n \n+            String hardwareVersion = String.valueOf(vmMo.getVirtualHardwareVersion());\n+\n             // 4 MB is the minimum requirement for VM memory in VMware\n             Pair<VirtualMachineMO, String[]> cloneResult =\n-                    vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));\n+                    vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), hardwareVersion);\n             clonedVm = cloneResult.first();\n             * */\n             clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNzE1Mg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496917152", "bodyText": "code in comment, please remove.", "author": "DaanHoogland", "createdAt": "2020-09-29T17:31:53Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java", "diffHunk": "@@ -1134,7 +1219,7 @@ private void postCreatePrivateTemplate(String installFullPath, long templateId,\n             Pair<VirtualMachineMO, String[]> cloneResult =\n                     vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));\n             clonedVm = cloneResult.first();\n-\n+            * */", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java b/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\nindex 677be23a54..fe9262310e 100644\n--- a/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\n+++ b/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\n\n@@ -1215,9 +1215,11 @@ public class VmwareStorageProcessor implements StorageProcessor {\n                 throw new Exception(msg);\n             }\n \n+            String hardwareVersion = String.valueOf(vmMo.getVirtualHardwareVersion());\n+\n             // 4 MB is the minimum requirement for VM memory in VMware\n             Pair<VirtualMachineMO, String[]> cloneResult =\n-                    vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));\n+                    vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), hardwareVersion);\n             clonedVm = cloneResult.first();\n             * */\n             clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNzgyOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496917829", "bodyText": "is this comment still valid? not by hte looks of the code below.", "author": "DaanHoogland", "createdAt": "2020-09-29T17:33:02Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java", "diffHunk": "@@ -1720,13 +1801,19 @@ public Answer createTemplateFromSnapshot(CopyCommand cmd) {\n             String disks[] = vmMo.getCurrentSnapshotDiskChainDatastorePaths(diskDevice);\n             if (clonedWorkerVMNeeded) {\n                 // 4 MB is the minimum requirement for VM memory in VMware", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4ce2118ddac69fda923208431a754ae5168dca", "chunk": "diff --git a/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java b/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\nindex 677be23a54..fe9262310e 100644\n--- a/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\n+++ b/plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java\n\n@@ -1797,6 +1799,8 @@ public class VmwareStorageProcessor implements StorageProcessor {\n                 throw new Exception(msg);\n             }\n \n+            String virtualHardwareVersion = String.valueOf(vmMo.getVirtualHardwareVersion());\n+\n             String diskDevice = volumeDeviceInfo.second();\n             String disks[] = vmMo.getCurrentSnapshotDiskChainDatastorePaths(diskDevice);\n             if (clonedWorkerVMNeeded) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNDExOA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496924118", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @APICommand(name = ImportVsphereStoragePoliciesCmd.APINAME, description = \"Import vSphere storage policies\",\n          \n          \n            \n                    responseObject = VsphereStoragePoliciesResponse.class,\n          \n          \n            \n                    requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n          \n          \n            \n                    authorized = {RoleType.Admin})\n          \n          \n            \n            @APICommand(name = ImportVsphereStoragePoliciesCmd.APINAME, description = \"Import vSphere storage policies\",\n          \n          \n            \n                    responseObject = VsphereStoragePoliciesResponse.class,\n          \n          \n            \n                    requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n          \n          \n            \n                    since = \"4.15\", authorized = {RoleType.Admin})", "author": "DaanHoogland", "createdAt": "2020-09-29T17:43:26Z", "path": "plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ImportVsphereStoragePoliciesCmd.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.zone;\n+\n+import com.cloud.dc.DataCenter;\n+import com.cloud.dc.VsphereStoragePolicy;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.hypervisor.vmware.VmwareDatacenterService;\n+\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.VsphereStoragePoliciesResponse;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.ZoneResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@APICommand(name = ImportVsphereStoragePoliciesCmd.APINAME, description = \"Import vSphere storage policies\",\n+        responseObject = VsphereStoragePoliciesResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        authorized = {RoleType.Admin})", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ImportVsphereStoragePoliciesCmd.java b/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ImportVsphereStoragePoliciesCmd.java\ndeleted file mode 100644\nindex ea5bacfb1f..0000000000\n--- a/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ImportVsphereStoragePoliciesCmd.java\n+++ /dev/null\n\n@@ -1,111 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.cloudstack.api.command.admin.zone;\n-\n-import com.cloud.dc.DataCenter;\n-import com.cloud.dc.VsphereStoragePolicy;\n-import com.cloud.exception.ConcurrentOperationException;\n-import com.cloud.exception.InsufficientCapacityException;\n-import com.cloud.exception.NetworkRuleConflictException;\n-import com.cloud.exception.ResourceAllocationException;\n-import com.cloud.exception.ResourceUnavailableException;\n-import com.cloud.hypervisor.vmware.VmwareDatacenterService;\n-\n-import org.apache.cloudstack.acl.RoleType;\n-import org.apache.cloudstack.api.APICommand;\n-import org.apache.cloudstack.api.ApiConstants;\n-import org.apache.cloudstack.api.ApiErrorCode;\n-import org.apache.cloudstack.api.BaseCmd;\n-import org.apache.cloudstack.api.Parameter;\n-import org.apache.cloudstack.api.ServerApiException;\n-import org.apache.cloudstack.api.response.VsphereStoragePoliciesResponse;\n-import org.apache.cloudstack.api.response.ListResponse;\n-import org.apache.cloudstack.api.response.ZoneResponse;\n-import org.apache.cloudstack.context.CallContext;\n-import org.apache.log4j.Logger;\n-\n-import javax.inject.Inject;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@APICommand(name = ImportVsphereStoragePoliciesCmd.APINAME, description = \"Import vSphere storage policies\",\n-        responseObject = VsphereStoragePoliciesResponse.class,\n-        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n-        authorized = {RoleType.Admin})\n-public class ImportVsphereStoragePoliciesCmd extends BaseCmd {\n-\n-    public static final Logger LOGGER = Logger.getLogger(ImportVsphereStoragePoliciesCmd.class.getName());\n-\n-    public static final String APINAME = \"importVsphereStoragePolicies\";\n-\n-    @Inject\n-    public VmwareDatacenterService _vmwareDatacenterService;\n-\n-    /////////////////////////////////////////////////////\n-    //////////////// API parameters /////////////////////\n-    /////////////////////////////////////////////////////\n-\n-    @Parameter(name = ApiConstants.ZONE_ID, type = CommandType.UUID, entityType = ZoneResponse.class,\n-            description = \"ID of the zone\")\n-    private Long zoneId;\n-\n-    /////////////////////////////////////////////////////\n-    /////////////// API Implementation///////////////////\n-    /////////////////////////////////////////////////////\n-\n-    @Override\n-    public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException {\n-        final DataCenter dataCenter = _resourceService.getZone(getZoneId());\n-        if (dataCenter == null) {\n-            throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Unable to find zone by ID: \" + getZoneId());\n-        }\n-\n-        List<? extends VsphereStoragePolicy> storagePolicies = _vmwareDatacenterService.importVsphereStoragePolicies(this);\n-        final ListResponse<VsphereStoragePoliciesResponse> responseList = new ListResponse<>();\n-        final List<VsphereStoragePoliciesResponse> storagePoliciesResponseList = new ArrayList<>();\n-        for (VsphereStoragePolicy storagePolicy : storagePolicies) {\n-            final VsphereStoragePoliciesResponse storagePoliciesResponse = new VsphereStoragePoliciesResponse();\n-            storagePoliciesResponse.setZoneId(dataCenter.getUuid());\n-            storagePoliciesResponse.setId(storagePolicy.getUuid());\n-            storagePoliciesResponse.setName(storagePolicy.getName());\n-            storagePoliciesResponse.setPolicyId(storagePolicy.getPolicyId());\n-            storagePoliciesResponse.setDescription(storagePolicy.getDescription());\n-            storagePoliciesResponse.setObjectName(\"StoragePolicy\");\n-\n-            storagePoliciesResponseList.add(storagePoliciesResponse);\n-        }\n-        responseList.setResponses(storagePoliciesResponseList);\n-        responseList.setResponseName(getCommandName());\n-        setResponseObject(responseList);\n-    }\n-\n-    @Override\n-    public String getCommandName() {\n-        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n-    }\n-\n-    @Override\n-    public long getEntityOwnerId() {\n-        return CallContext.current().getCallingAccountId();\n-    }\n-\n-    public Long getZoneId() {\n-        return zoneId;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNTE2OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496925169", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @APICommand(name = ListVsphereStoragePoliciesCmd.APINAME, description = \"List vSphere storage policies\",\n          \n          \n            \n                    responseObject = VsphereStoragePoliciesResponse.class,\n          \n          \n            \n                    requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n          \n          \n            \n                    authorized = {RoleType.Admin})\n          \n          \n            \n            public class ListVsphereStoragePoliciesCmd extends BaseCmd {\n          \n          \n            \n            @APICommand(name = ListVsphereStoragePoliciesCmd.APINAME, description = \"List vSphere storage policies\",\n          \n          \n            \n                    responseObject = VsphereStoragePoliciesResponse.class,\n          \n          \n            \n                    requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n          \n          \n            \n                    since = \"4.15\", authorized = {RoleType.Admin})\n          \n          \n            \n            public class ListVsphereStoragePoliciesCmd extends BaseCmd {", "author": "DaanHoogland", "createdAt": "2020-09-29T17:45:06Z", "path": "plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ListVsphereStoragePoliciesCmd.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.zone;\n+\n+import com.cloud.dc.DataCenter;\n+import com.cloud.dc.VsphereStoragePolicy;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.hypervisor.vmware.VmwareDatacenterService;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.VsphereStoragePoliciesResponse;\n+import org.apache.cloudstack.api.response.ZoneResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@APICommand(name = ListVsphereStoragePoliciesCmd.APINAME, description = \"List vSphere storage policies\",\n+        responseObject = VsphereStoragePoliciesResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        authorized = {RoleType.Admin})\n+public class ListVsphereStoragePoliciesCmd extends BaseCmd {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ListVsphereStoragePoliciesCmd.java b/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ListVsphereStoragePoliciesCmd.java\ndeleted file mode 100644\nindex 90e8e88054..0000000000\n--- a/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ListVsphereStoragePoliciesCmd.java\n+++ /dev/null\n\n@@ -1,109 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.apache.cloudstack.api.command.admin.zone;\n-\n-import com.cloud.dc.DataCenter;\n-import com.cloud.dc.VsphereStoragePolicy;\n-import com.cloud.exception.ConcurrentOperationException;\n-import com.cloud.exception.InsufficientCapacityException;\n-import com.cloud.exception.NetworkRuleConflictException;\n-import com.cloud.exception.ResourceAllocationException;\n-import com.cloud.exception.ResourceUnavailableException;\n-import com.cloud.hypervisor.vmware.VmwareDatacenterService;\n-import org.apache.cloudstack.acl.RoleType;\n-import org.apache.cloudstack.api.APICommand;\n-import org.apache.cloudstack.api.ApiConstants;\n-import org.apache.cloudstack.api.ApiErrorCode;\n-import org.apache.cloudstack.api.BaseCmd;\n-import org.apache.cloudstack.api.Parameter;\n-import org.apache.cloudstack.api.ServerApiException;\n-import org.apache.cloudstack.api.response.ListResponse;\n-import org.apache.cloudstack.api.response.VsphereStoragePoliciesResponse;\n-import org.apache.cloudstack.api.response.ZoneResponse;\n-import org.apache.cloudstack.context.CallContext;\n-import org.apache.log4j.Logger;\n-\n-import javax.inject.Inject;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@APICommand(name = ListVsphereStoragePoliciesCmd.APINAME, description = \"List vSphere storage policies\",\n-        responseObject = VsphereStoragePoliciesResponse.class,\n-        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n-        authorized = {RoleType.Admin})\n-public class ListVsphereStoragePoliciesCmd extends BaseCmd {\n-\n-    public static final Logger LOGGER = Logger.getLogger(ListVsphereStoragePoliciesCmd.class.getName());\n-\n-    public static final String APINAME = \"listVsphereStoragePolicies\";\n-\n-    @Inject\n-    public VmwareDatacenterService _vmwareDatacenterService;\n-\n-    /////////////////////////////////////////////////////\n-    //////////////// API parameters /////////////////////\n-    /////////////////////////////////////////////////////\n-\n-    @Parameter(name = ApiConstants.ZONE_ID, type = CommandType.UUID, entityType = ZoneResponse.class,\n-            description = \"ID of the zone\")\n-    private Long zoneId;\n-\n-    /////////////////////////////////////////////////////\n-    /////////////// API Implementation///////////////////\n-    /////////////////////////////////////////////////////\n-\n-    @Override\n-    public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException {\n-        final DataCenter dataCenter = _resourceService.getZone(getZoneId());\n-        if (dataCenter == null) {\n-            throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Unable to find zone by ID: \" + getZoneId());\n-        }\n-\n-        List<? extends VsphereStoragePolicy> storagePolicies = _vmwareDatacenterService.listVsphereStoragePolicies(this);\n-        final ListResponse<VsphereStoragePoliciesResponse> responseList = new ListResponse<>();\n-        final List<VsphereStoragePoliciesResponse> storagePoliciesResponseList = new ArrayList<>();\n-        for (VsphereStoragePolicy storagePolicy : storagePolicies) {\n-            final VsphereStoragePoliciesResponse storagePoliciesResponse = new VsphereStoragePoliciesResponse();\n-            storagePoliciesResponse.setZoneId(dataCenter.getUuid());\n-            storagePoliciesResponse.setId(storagePolicy.getUuid());\n-            storagePoliciesResponse.setName(storagePolicy.getName());\n-            storagePoliciesResponse.setPolicyId(storagePolicy.getPolicyId());\n-            storagePoliciesResponse.setDescription(storagePolicy.getDescription());\n-            storagePoliciesResponse.setObjectName(\"StoragePolicy\");\n-\n-            storagePoliciesResponseList.add(storagePoliciesResponse);\n-        }\n-        responseList.setResponses(storagePoliciesResponseList);\n-        responseList.setResponseName(getCommandName());\n-        setResponseObject(responseList);\n-    }\n-\n-    @Override\n-    public String getCommandName() {\n-        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n-    }\n-\n-    @Override\n-    public long getEntityOwnerId() {\n-        return CallContext.current().getCallingAccountId();\n-    }\n-\n-    public Long getZoneId() {\n-        return zoneId;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NjU0Mg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496956542", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T18:38:34Z", "path": "utils/src/test/java/com/cloud/utils/compression/CompressionUtilTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.utils.compression;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/utils/src/test/java/com/cloud/utils/compression/CompressionUtilTest.java b/utils/src/test/java/com/cloud/utils/compression/CompressionUtilTest.java\ndeleted file mode 100644\nindex e247d6c943..0000000000\n--- a/utils/src/test/java/com/cloud/utils/compression/CompressionUtilTest.java\n+++ /dev/null\n\n@@ -1,128 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-package com.cloud.utils.compression;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-import java.io.IOException;\n-\n-public class CompressionUtilTest {\n-\n-    private CompressionUtil util = new CompressionUtil();\n-\n-    private String testEula = \"END USER LICENSE AGREEMENT\\n\" +\n-            \"\\n\" +\n-            \"IMPORTANT: PLEASE READ THIS END USER LICENSE AGREEMENT CAREFULLY. IT IS VERY IMPORTANT THAT YOU CHECK THAT YOU ARE PURCHASING CISCO SOFTWARE OR EQUIPMENT FROM AN APPROVED SOURCE AND THAT YOU, OR THE ENTITY YOU REPRESENT (COLLECTIVELY, THE \\\"CUSTOMER\\\") HAVE BEEN REGISTERED AS THE END USER FOR THE PURPOSES OF THIS CISCO END USER LICENSE AGREEMENT. IF YOU ARE NOT REGISTERED AS THE END USER YOU HAVE NO LICENSE TO USE THE SOFTWARE AND THE LIMITED WARRANTY IN THIS END USER LICENSE AGREEMENT DOES NOT APPLY. ASSUMING YOU HAVE PURCHASED FROM AN APPROVED SOURCE, DOWNLOADING, INSTALLING OR USING CISCO OR CISCO-SUPPLIED SOFTWARE CONSTITUTES ACCEPTANCE OF THIS AGREEMENT.\\n\" +\n-            \"\\n\" +\n-            \"CISCO SYSTEMS, INC. OR ITS AFFILIATE LICENSING THE SOFTWARE (\\\"CISCO\\\") IS WILLING TO LICENSE THIS SOFTWARE TO YOU ONLY UPON THE CONDITION THAT YOU PURCHASED THE SOFTWARE FROM AN APPROVED SOURCE AND THAT YOU ACCEPT ALL OF THE TERMS CONTAINED IN THIS END USER LICENSE AGREEMENT PLUS ANY ADDITIONAL LIMITATIONS ON THE LICENSE SET FORTH IN A SUPPLEMENTAL LICENSE AGREEMENT ACCOMPANYING THE PRODUCT, MADE AVAILABLE AT THE TIME OF YOUR ORDER, OR POSTED ON THE CISCO WEBSITE AT www.cisco.com/go/terms (COLLECTIVELY THE \\\"AGREEMENT\\\"). TO THE EXTENT OF ANY CONFLICT BETWEEN THE TERMS OF THIS END USER LICENSE AGREEMENT AND ANY SUPPLEMENTAL LICENSE AGREEMENT, THE SUPPLEMENTAL \" +\n-            \"LICENSE AGREEMENT SHALL APPLY. BY DOWNLOADING, INSTALLING, OR USING THE SOFTWARE, YOU ARE REPRESENTING THAT YOU PURCHASED THE SOFTWARE FROM AN APPROVED SOURCE AND BINDING YOURSELF TO THE AGREEMENT. IF YOU DO NOT AGREE TO ALL OF THE TERMS OF THE AGREEMENT, THEN CISCO IS UNWILLING TO LICENSE THE SOFTWARE TO YOU AND (A) YOU MAY NOT DOWNLOAD, INSTALL OR USE THE SOFTWARE, AND (B) YOU MAY RETURN THE SOFTWARE (INCLUDING ANY UNOPENED CD PACKAGE AND ANY WRITTEN MATERIALS) FOR A FULL REFUND, OR, IF THE SOFTWARE AND WRITTEN MATERIALS ARE SUPPLIED AS PART OF ANOTHER PRODUCT, YOU MAY RETURN THE ENTIRE PRODUCT FOR A FULL REFUND. YOUR RIGHT TO RETURN AND REFUND EXPIRES 30 \" +\n-            \"DAYS AFTER PURCHASE FROM AN APPROVED SOURCE, AND APPLIES ONLY IF YOU ARE THE ORIGINAL AND REGISTERED END USER PURCHASER. FOR THE PURPOSES OF THIS END USER LICENSE AGREEMENT, AN \\\"APPROVED SOURCE\\\" MEANS (A) CISCO; OR (B) A DISTRIBUTOR OR SYSTEMS INTEGRATOR AUTHORIZED BY CISCO TO DISTRIBUTE / SELL CISCO EQUIPMENT, SOFTWARE AND SERVICES WITHIN YOUR TERRITORY TO END USERS; OR (C) A RESELLER AUTHORIZED BY ANY SUCH DISTRIBUTOR OR SYSTEMS INTEGRATOR IN ACCORDANCE WITH THE TERMS OF THE DISTRIBUTOR'S AGREEMENT WITH CISCO TO DISTRIBUTE / SELL THE CISCO EQUIPMENT, SOFTWARE AND SERVICES WITHIN YOUR TERRITORY TO END USERS.\\n\" +\n-            \"\\n\" +\n-            \"THE FOLLOWING TERMS OF THE AGREEMENT GOVERN CUSTOMER'S USE OF THE SOFTWARE (DEFINED BELOW), EXCEPT TO THE EXTENT: (A) THERE IS A SEPARATE SIGNED CONTRACT BETWEEN CUSTOMER AND CISCO GOVERNING CUSTOMER'S USE OF THE SOFTWARE, OR (B) THE SOFTWARE INCLUDES A SEPARATE \\\"CLICK-ACCEPT\\\" LICENSE AGREEMENT OR THIRD PARTY LICENSE AGREEMENT AS PART OF THE INSTALLATION OR DOWNLOAD PROCESS GOVERNING CUSTOMER'S USE OF THE SOFTWARE. TO THE EXTENT OF A CONFLICT BETWEEN THE PROVISIONS OF THE FOREGOING DOCUMENTS, THE ORDER OF PRECEDENCE SHALL BE (1)THE SIGNED CONTRACT, (2) THE CLICK-ACCEPT AGREEMENT OR THIRD PARTY LICENSE AGREEMENT, AND (3) THE AGREEMENT. FOR PURPOSES OF THE \" +\n-            \"AGREEMENT, \\\"SOFTWARE\\\" SHALL MEAN COMPUTER PROGRAMS, INCLUDING FIRMWARE AND COMPUTER PROGRAMS EMBEDDED IN CISCO EQUIPMENT, AS PROVIDED TO CUSTOMER BY AN APPROVED SOURCE, AND ANY UPGRADES, UPDATES, BUG FIXES OR MODIFIED VERSIONS THERETO (COLLECTIVELY, \\\"UPGRADES\\\"), ANY OF THE SAME WHICH HAS BEEN RELICENSED UNDER THE CISCO SOFTWARE TRANSFER AND RE-LICENSING POLICY (AS MAY BE AMENDED BY CISCO FROM TIME TO TIME) OR BACKUP COPIES OF ANY OF THE FOREGOING.\\n\" +\n-            \"\\n\" +\n-            \"License. Conditioned upon compliance with the terms and conditions of the Agreement, Cisco grants to Customer a nonexclusive and nontransferable license to use for Customer's internal business purposes the Software and the Documentation for which Customer has paid the required license fees to an Approved Source. \\\"Documentation\\\" means written information (whether contained in user or technical manuals, training materials, specifications or otherwise) pertaining to the Software and made available by an Approved Source with the Software in any manner (including on CD-Rom, or on-line). In order to use the Software, Customer may be required to input a registration number or product authorization key and register Customer's copy of the Software online at Cisco's website to obtain the necessary license key or license file.\\n\" +\n-            \"\\n\" +\n-            \"Customer's license to use the Software shall be limited to, and Customer shall not use the Software in excess of, a single hardware chassis or card or such other limitations as are set forth in the applicable Supplemental License Agreement or in the applicable purchase order which has been accepted by an Approved Source and for which Customer has paid to an Approved Source the required license fee (the \\\"Purchase Order\\\").\\n\" +\n-            \"\\n\" +\n-            \"Unless otherwise expressly provided in the Documentation or any applicable Supplemental License Agreement, Customer shall use the Software solely as embedded in, for execution on, or (where the applicable Documentation permits installation on non-Cisco equipment) for communication with Cisco equipment owned or leased by Customer and used for Customer's internal business purposes. No other licenses are granted by implication, estoppel or otherwise.\\n\" +\n-            \"\\n\" +\n-            \"For evaluation or beta copies for which Cisco does not charge a license fee, the above requirement to pay license fees does not apply.\\n\" +\n-            \"\\n\" +\n-            \"General Limitations. This is a license, not a transfer of title, to the Software and Documentation, and Cisco retains ownership of all copies of the Software and Documentation. Customer acknowledges that the Software and Documentation contain trade secrets of Cisco or its suppliers or licensors, including but not limited to the specific internal design and structure of individual programs and associated interface information. Except as otherwise expressly provided under the Agreement, Customer shall only use the Software in connection with the use of Cisco equipment purchased by the Customer from an Approved Source and Customer shall have no right, and Customer specifically agrees not to:\\n\" +\n-            \"\\n\" +\n-            \"(i) transfer, assign or sublicense its license rights to any other person or entity (other than in compliance with any Cisco relicensing/transfer policy then in force), or use the Software on Cisco equipment not purchased by the Customer from an Approved Source or on secondhand Cisco equipment, and Customer acknowledges that any attempted transfer, assignment, sublicense or use shall be void;\\n\" +\n-            \"\\n\" +\n-            \"(ii) make error corrections to or otherwise modify or adapt the Software or create derivative works based upon the Software, or permit third parties to do the same;\\n\" +\n-            \"\\n\" +\n-            \"(iii) reverse engineer or decompile, decrypt, disassemble or otherwise reduce the Software to human-readable form, except to the extent otherwise expressly permitted under applicable law notwithstanding this restriction or except to the extent that Cisco is legally required to permit such specific activity pursuant to any applicable open source license;\\n\" +\n-            \"\\n\" +\n-            \"(iv) publish any results of benchmark tests run on the Software;\\n\" +\n-            \"\\n\" +\n-            \"(v) use or permit the Software to be used to perform services for third parties, whether on a service bureau or time sharing basis or otherwise, without the express written authorization of Cisco; or\\n\" +\n-            \"\\n\" +\n-            \"(vi) disclose, provide, or otherwise make available trade secrets contained within the Software and Documentation in any form to any third party without the prior written consent of Cisco. Customer shall implement reasonable security measures to protect such trade secrets.\\n\" +\n-            \"\\n\" +\n-            \"To the extent required by applicable law, and at Customer's written request, Cisco shall provide Customer with the interface information needed to achieve interoperability between the Software and another independently created program, on payment of Cisco's applicable fee, if any. Customer shall observe strict obligations of confidentiality with respect to such information and shall use such information in compliance with any applicable terms and conditions upon which Cisco makes such information available.\\n\" +\n-            \"\\n\" +\n-            \"Software, Upgrades and Additional Copies. NOTWITHSTANDING ANY OTHER PROVISION OF THE AGREEMENT: (1) CUSTOMER HAS NO LICENSE OR RIGHT TO MAKE OR USE ANY ADDITIONAL COPIES OR UPGRADES UNLESS CUSTOMER, AT THE TIME OF MAKING OR ACQUIRING SUCH COPY OR UPGRADE, ALREADY HOLDS A VALID LICENSE TO THE ORIGINAL SOFTWARE AND HAS PAID THE APPLICABLE FEE TO AN APPROVED SOURCE FOR THE UPGRADE OR ADDITIONAL COPIES; (2) USE OF UPGRADES IS LIMITED TO CISCO EQUIPMENT SUPPLIED BY AN APPROVED SOURCE FOR WHICH CUSTOMER IS THE ORIGINAL END USER PURCHASER OR LESSEE OR OTHERWISE HOLDS A VALID LICENSE TO USE THE SOFTWARE WHICH IS BEING UPGRADED; AND (3) THE MAKING AND USE OF ADDITIONAL COPIES IS LIMITED TO NECESSARY BACKUP PURPOSES ONLY.\\n\" +\n-            \"\\n\" +\n-            \"Proprietary Notices. Customer agrees to maintain and reproduce all copyright, proprietary, and other notices on all copies, in any form, of the Software in the same form and manner that such copyright and other proprietary notices are included on the Software. Except as expressly authorized in the Agreement, Customer shall not make any copies or duplicates of any Software without the prior written permission of Cisco.\\n\" +\n-            \"\\n\" +\n-            \"Term and Termination. The Agreement and the license granted herein shall remain effective until terminated. Customer may terminate the Agreement and the license at any time by destroying all copies of Software and any Documentation. Customer's rights under the Agreement will terminate immediately without notice from Cisco if Customer fails to comply with any provision of the Agreement. Upon termination, Customer shall destroy all copies of Software and Documentation in its possession or control. All confidentiality obligations of Customer, \" +\n-            \"all restrictions and limitations imposed on the Customer under the section titled \\\"General Limitations\\\" and all limitations of liability and disclaimers and restrictions of warranty shall survive termination of this Agreement. In addition, the provisions of the sections titled \\\"U.S. Government End User Purchasers\\\" and \\\"General Terms Applicable to the Limited Warranty Statement and End User License Agreement\\\" shall survive termination of the Agreement.\\n\" +\n-            \"\\n\" +\n-            \"Customer Records. Customer grants to Cisco and its independent accountants the right to examine Customer's books, records and accounts during Customer's normal business hours to verify compliance with this Agreement. In the event such audit discloses non-compliance with this Agreement, Customer shall promptly pay to Cisco the appropriate license fees, plus the reasonable cost of conducting the audit.\\n\" +\n-            \"\\n\" +\n-            \"Export, Re-Export, Transfer and Use Controls. The Software, Documentation and technology or direct products thereof (hereafter referred to as Software and Technology), supplied by Cisco under the Agreement are subject to export controls under the laws and regulations of the United States (\\\"U.S.\\\") and any other applicable countries' laws and regulations. Customer shall comply with such laws and regulations governing export, re-export, import, transfer and use of Cisco Software and Technology and will obtain all required U.S. and local authorizations, permits, or licenses. Cisco and Customer each agree to provide the other information, support documents, and assistance as may reasonably be required by the other in connection with securing authorizations or licenses. Information regarding compliance with export, re-export, transfer and use may be located at the following URL: www.cisco.com/web/about/doing_business/legal/global_export_trade/general_export/contract_compliance.html\\n\" +\n-            \"\\n\" +\n-            \"U.S. Government End User Purchasers. The Software and Documentation qualify as \\\"commercial items,\\\" as that term is defined at Federal Acquisition Regulation (\\\"FAR\\\") (48 C.F.R.) 2.101, consisting of \\\"commercial computer software\\\" and \\\"commercial computer software documentation\\\" as such terms are used in FAR 12.212. Consistent with FAR 12.212 and DoD FAR Supp. 227.7202-1 through 227.7202-4, and notwithstanding any other FAR or other contractual clause to the contrary in any agreement into which the Agreement may be incorporated, Customer may provide to Government end user or, if the Agreement is direct, Government end user will acquire, the Software and Documentation with only those rights set forth in the Agreement. Use of either the Software or Documentation or both constitutes agreement by the Government that the Software and Documentation are \\\"commercial computer software\\\" and \\\"commercial \" +\n-            \"computer software documentation,\\\" and constitutes acceptance of the rights and restrictions herein.\\n\" +\n-            \"\\n\" +\n-            \"Identified Components; Additional Terms. The Software may contain or be delivered with one or more components, which may include third-party components, identified by Cisco in the Documentation, readme.txt file, third-party click-accept or elsewhere (e.g. on www.cisco.com) (the \\\"Identified Component(s)\\\") as being subject to different license agreement terms, disclaimers of warranties, limited warranties or other terms and conditions (collectively, \\\"Additional Terms\\\") than those set forth herein. You agree to the applicable Additional Terms for any such Identified Component(s).\\n\" +\n-            \"\\n\" +\n-            \"Limited Warranty\\n\" +\n-            \"\\n\" +\n-            \"Subject to the limitations and conditions set forth herein, Cisco warrants that commencing from the date of shipment to Customer (but in case of resale by an Approved Source other than Cisco, commencing not more than ninety (90) days after original shipment by Cisco), and continuing for a period of the longer of (a) ninety (90) days or (b) the warranty period (if any) expressly set forth as applicable specifically to software in the warranty card accompanying the product of which the Software is a part (the \\\"Product\\\") (if any): (a) the media on which the Software is furnished will be free of defects in materials and workmanship under normal use; and (b) the Software substantially conforms to the Documentation. The date of shipment of a Product by Cisco is set forth \" +\n-            \"on the packaging material in which the Product is shipped. Except for the foregoing, the Software is provided \\\"AS IS\\\". This limited warranty extends only to the Software purchased from an Approved Source by a Customer who is the first registered end user. Customer's sole and exclusive remedy and the entire liability of Cisco and its suppliers under this limited warranty will be (i) replacement of defective media and/or (ii) at Cisco's option, repair, replacement, or refund of the purchase price of the Software, in both cases subject to the condition that any error or defect constituting a breach of this limited warranty is reported to the Approved Source supplying the Software to Customer, within the warranty period. Cisco or the Approved Source supplying the Software to Customer may, at its option, require return of the Software and/or Documentation as a condition to the remedy. \" +\n-            \"In no event does Cisco warrant that the Software is error free or that Customer will be able to operate the Software without problems or interruptions. In addition, due to the continual development of new techniques for intruding upon and attacking networks, Cisco does not warrant that the Software or any equipment, system or network on which the Software is used will be free of vulnerability to intrusion or attack.\\n\" +\n-            \"\\n\" +\n-            \"Restrictions. This warranty does not apply if the Software, Product or any other equipment upon which the Software is authorized to be used (a) has been altered, except by Cisco or its authorized representative, (b) has not been installed, operated, repaired, or maintained in accordance with instructions supplied by Cisco, (c) has been subjected to abnormal physical or electrical stress, abnormal environmental conditions, misuse, negligence, or accident; or (d) is licensed for beta, evaluation, testing or demonstration purposes. The Software warranty also does not apply to (e) any temporary Software modules; (f) any Software not posted on Cisco's Software Center; (g) any Software that Cisco expressly provides on an \\\"AS IS\\\" basis on Cisco's Software Center; (h) any Software for which an Approved Source does not receive a license fee; and (i) Software supplied by any third party which is not an Approved Source.\\n\" +\n-            \"\\n\" +\n-            \"DISCLAIMER OF WARRANTY\\n\" +\n-            \"\\n\" +\n-            \"EXCEPT AS SPECIFIED IN THIS WARRANTY SECTION, ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS, AND WARRANTIES INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTY OR CONDITION OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, SATISFACTORY QUALITY, NON-INTERFERENCE, ACCURACY OF INFORMATIONAL CONTENT, OR ARISING FROM A COURSE OF DEALING, LAW, USAGE, OR TRADE PRACTICE, ARE HEREBY EXCLUDED TO THE EXTENT ALLOWED BY APPLICABLE LAW AND ARE EXPRESSLY DISCLAIMED BY CISCO, ITS SUPPLIERS AND LICENSORS. TO THE EXTENT THAT ANY OF THE SAME CANNOT BE EXCLUDED, SUCH IMPLIED CONDITION, REPRESENTATION AND/OR WARRANTY IS LIMITED IN DURATION TO THE EXPRESS WARRANTY PERIOD REFERRED TO IN THE \\\"LIMITED WARRANTY\\\" SECTION ABOVE. BECAUSE SOME STATES OR JURISDICTIONS \" +\n-            \"DO NOT ALLOW LIMITATIONS ON HOW LONG AN IMPLIED WARRANTY LASTS, THE ABOVE LIMITATION MAY NOT APPLY IN SUCH STATES. THIS WARRANTY GIVES CUSTOMER SPECIFIC LEGAL RIGHTS, AND CUSTOMER MAY ALSO HAVE OTHER RIGHTS WHICH VARY FROM JURISDICTION TO JURISDICTION. This disclaimer and exclusion shall apply even if the express warranty set forth above fails of its essential purpose.\\n\" +\n-            \"\\n\" +\n-            \"Disclaimer of Liabilities-Limitation of Liability. IF YOU ACQUIRED THE SOFTWARE IN THE UNITED STATES, LATIN AMERICA, CANADA, JAPAN OR THE CARIBBEAN, NOTWITHSTANDING ANYTHING ELSE IN THE AGREEMENT TO THE CONTRARY, ALL LIABILITY OF CISCO, ITS AFFILIATES, OFFICERS, DIRECTORS, EMPLOYEES, AGENTS, SUPPLIERS AND LICENSORS COLLECTIVELY, TO CUSTOMER, WHETHER IN CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF WARRANTY OR OTHERWISE, SHALL NOT EXCEED THE PRICE PAID BY CUSTOMER TO ANY APPROVED SOURCE FOR THE SOFTWARE THAT GAVE RISE TO THE CLAIM OR IF THE SOFTWARE IS PART OF ANOTHER PRODUCT, THE PRICE PAID FOR SUCH OTHER PRODUCT. THIS LIMITATION OF LIABILITY FOR SOFTWARE IS CUMULATIVE AND NOT PER INCIDENT (I.E. THE EXISTENCE OF TWO OR MORE CLAIMS WILL NOT ENLARGE THIS LIMIT).\\n\" +\n-            \"\\n\" +\n-            \"IF YOU ACQUIRED THE SOFTWARE IN EUROPE, THE MIDDLE EAST, AFRICA, ASIA OR OCEANIA, NOTWITHSTANDING ANYTHING ELSE IN THE AGREEMENT TO THE CONTRARY, ALL LIABILITY OF CISCO, ITS AFFILIATES, OFFICERS, DIRECTORS, EMPLOYEES, AGENTS, SUPPLIERS AND LICENSORS COLLECTIVELY, TO CUSTOMER, WHETHER IN CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF WARRANTY OR OTHERWISE, SHALL NOT EXCEED THE PRICE PAID BY CUSTOMER TO CISCO FOR THE SOFTWARE THAT GAVE RISE TO THE CLAIM OR IF THE SOFTWARE IS PART OF ANOTHER PRODUCT, THE PRICE PAID FOR SUCH OTHER PRODUCT. THIS LIMITATION OF LIABILITY FOR SOFTWARE IS CUMULATIVE AND NOT PER INCIDENT (I.E. THE EXISTENCE OF TWO OR MORE CLAIMS WILL NOT ENLARGE THIS LIMIT). NOTHING IN THE AGREEMENT SHALL LIMIT (I) THE LIABILITY OF CISCO, ITS AFFILIATES, OFFICERS, DIRECTORS, EMPLOYEES, AGENTS, SUPPLIERS AND LICENSORS TO CUSTOMER FOR PERSONAL \" +\n-            \"INJURY OR DEATH CAUSED BY THEIR NEGLIGENCE, (II) CISCO'S LIABILITY FOR FRAUDULENT MISREPRESENTATION, OR (III) ANY LIABILITY OF CISCO WHICH CANNOT BE EXCLUDED UNDER APPLICABLE LAW.\\n\" +\n-            \"\\n\" +\n-            \"Disclaimer of Liabilities-Waiver of Consequential Damages and Other Losses. IF YOU ACQUIRED THE SOFTWARE IN THE UNITED STATES, LATIN AMERICA, THE CARIBBEAN OR CANADA, REGARDLESS OF WHETHER ANY REMEDY SET FORTH HEREIN FAILS OF ITS ESSENTIAL PURPOSE OR OTHERWISE, IN NO EVENT WILL CISCO OR ITS SUPPLIERS BE LIABLE FOR ANY LOST REVENUE, PROFIT, OR LOST OR DAMAGED DATA, BUSINESS INTERRUPTION, LOSS OF CAPITAL, OR FOR SPECIAL, INDIRECT, CONSEQUENTIAL, INCIDENTAL, OR PUNITIVE DAMAGES HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY OR WHETHER ARISING OUT OF THE USE OF OR INABILITY TO USE SOFTWARE OR OTHERWISE AND EVEN IF CISCO OR ITS SUPPLIERS OR LICENSORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. BECAUSE SOME STATES OR JURISDICTIONS DO NOT ALLOW LIMITATION OR EXCLUSION OF CONSEQUENTIAL OR INCIDENTAL DAMAGES, THE ABOVE LIMITATION MAY NOT APPLY TO YOU.\\n\" +\n-            \"\\n\" +\n-            \"IF YOU ACQUIRED THE SOFTWARE IN JAPAN, EXCEPT FOR LIABILITY ARISING OUT OF OR IN CONNECTION WITH DEATH OR PERSONAL INJURY, FRAUDULENT MISREPRESENTATION, AND REGARDLESS OF WHETHER ANY REMEDY SET FORTH HEREIN FAILS OF ITS ESSENTIAL PURPOSE OR OTHERWISE, IN NO EVENT WILL CISCO, ITS AFFILIATES, OFFICERS, DIRECTORS, EMPLOYEES, AGENTS, SUPPLIERS AND LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT, OR LOST OR DAMAGED DATA, BUSINESS INTERRUPTION, LOSS OF CAPITAL, OR FOR SPECIAL, INDIRECT, CONSEQUENTIAL, INCIDENTAL, OR PUNITIVE DAMAGES HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY OR WHETHER ARISING OUT OF THE USE OF OR INABILITY TO USE SOFTWARE OR OTHERWISE AND EVEN IF CISCO OR ANY APPROVED SOURCE OR THEIR SUPPLIERS OR LICENSORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\\n\" +\n-            \"\\n\" +\n-            \"IF YOU ACQUIRED THE SOFTWARE IN EUROPE, THE MIDDLE EAST, AFRICA, ASIA OR OCEANIA, IN NO EVENT WILL CISCO, ITS AFFILIATES, OFFICERS, DIRECTORS, EMPLOYEES, AGENTS, SUPPLIERS AND LICENSORS, BE LIABLE FOR ANY LOST REVENUE, LOST PROFIT, OR LOST OR DAMAGED DATA, BUSINESS INTERRUPTION, LOSS OF CAPITAL, OR FOR SPECIAL, INDIRECT, CONSEQUENTIAL, INCIDENTAL, OR PUNITIVE DAMAGES, HOWSOEVER ARISING, INCLUDING, WITHOUT LIMITATION, IN CONTRACT, TORT (INCLUDING NEGLIGENCE) OR WHETHER ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF, IN EACH CASE, CISCO, ITS AFFILIATES, OFFICERS, DIRECTORS, EMPLOYEES, AGENTS, SUPPLIERS AND LICENSORS, HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. BECAUSE SOME STATES OR JURISDICTIONS DO NOT ALLOW LIMITATION OR EXCLUSION OF CONSEQUENTIAL OR INCIDENTAL\" +\n-            \" DAMAGES, THE ABOVE LIMITATION MAY NOT FULLY APPLY TO YOU. THE FOREGOING EXCLUSION SHALL NOT APPLY TO ANY LIABILITY ARISING OUT OF OR IN CONNECTION WITH: (I) DEATH OR PERSONAL INJURY, (II) FRAUDULENT MISREPRESENTATION, OR (III) CISCO'S LIABILITY IN CONNECTION WITH ANY TERMS THAT CANNOT BE EXCLUDED UNDER APPLICABLE LAW.\\n\" +\n-            \"\\n\" +\n-            \"Customer acknowledges and agrees that Cisco has set its prices and entered into the Agreement in reliance upon the disclaimers of warranty and the limitations of liability set forth herein, that the same reflect an allocation of risk between the parties (including the risk that a contract remedy may fail of its essential purpose and cause consequential loss), and that the same form an essential basis of the bargain between the parties.\\n\" +\n-            \"\\n\" +\n-            \"Controlling Law, Jurisdiction. If you acquired, by reference to the address on the purchase order accepted by the Approved Source, the Software in the United States, Latin America, or the Caribbean, the Agreement and warranties (\\\"Warranties\\\") are controlled by and construed under the laws of the State of California, United States of America, notwithstanding any conflicts of law provisions; and the state and federal courts of California shall have exclusive jurisdiction over any claim arising under the Agreement or Warranties. If you acquired the Software in Canada, unless expressly prohibited by local law, the Agreement and Warranties are controlled by and construed under the laws of the Province of Ontario, Canada, notwithstanding any conflicts of law provisions; and the courts of the \" +\n-            \"Province of Ontario shall have exclusive jurisdiction over any claim arising under the Agreement or Warranties. If you acquired the Software in Europe, the Middle East, Africa, Asia or Oceania (excluding Australia), unless expressly prohibited by local law, the Agreement and Warranties are controlled by and construed under the laws of England, notwithstanding any conflicts of law provisions; and the English courts shall have exclusive jurisdiction over any \" +\n-            \"claim arising under the Agreement or Warranties. In addition, if the Agreement is controlled by the laws of England, no person who is not a party to the Agreement shall be entitled to enforce or take the benefit of any of its terms under the Contracts (Rights of Third Parties) Act 1999. If you acquired the Software in Japan, unless expressly prohibited by local law, the Agreement and Warranties are controlled by and construed under the laws of Japan, notwithstanding any conflicts of law provisions; and the Tokyo District Court of Japan shall have exclusive jurisdiction over any claim arising under the Agreement or Warranties. If you acquired the Software in Australia, unless expressly prohibited by local law, the Agreement and Warranties are controlled by and construed under the laws of the \" +\n-            \"State of New South Wales, Australia, notwithstanding any conflicts of law provisions; and the State and federal courts of New South Wales shall have exclusive jurisdiction over any claim arising under the Agreement or Warranties. If you acquired the Software in any other country, unless expressly prohibited by local law, the Agreement and Warranties are controlled by and construed under the laws of the State of California, United States of America, \" +\n-            \"notwithstanding any conflicts of law provisions; and the state and federal courts of California shall have exclusive jurisdiction over any claim arising under the Agreement or Warranties.\\n\" +\n-            \"\\n\" +\n-            \"For all countries referred to above, the parties specifically disclaim the application of the UN Convention on Contracts for the International Sale of Goods. Notwithstanding the foregoing, either party may seek interim injunctive relief in any court of appropriate jurisdiction with respect to any alleged breach of such party's intellectual property or proprietary rights. If any portion hereof is found to be void or unenforceable, the remaining provisions of the Agreement and Warranties shall remain in full force and effect. Except as expressly provided herein, the Agreement constitutes the entire agreement between the parties with respect to the license of the Software and Documentation and supersedes any conflicting or additional terms contained in any Purchase Order or elsewhere, all of which terms are excluded. The Agreement has been written in the English language, and the parties agree that the English version will govern.\\n\" +\n-            \"\\n\" +\n-            \"Product warranty terms and other information applicable to Cisco products are available at the following URL: www.cisco.com/go/warranty\\n\" +\n-            \"\\n\" +\n-            \"Cisco and the Cisco logo are trademarks or registered trademarks of Cisco and/or its affiliates in the U.S. and other countries. To view a list of Cisco trademarks, go to this URL: www.cisco.com/go/trademarks. Third-party trademarks mentioned are the property of their respective owners. The use of the word partner does not imply a partnership relationship between Cisco and any other company. (1110R)\\n\" +\n-            \"\\n\" +\n-            \"\u00a9 1998, 2001, 2003, 2008-2014 Cisco Systems, Inc. All rights reserved.\";\n-\n-    @Test\n-    public void testCompressDecompressString() throws IOException {\n-        byte[] compressed = util.compressString(testEula);\n-        String decompressed = util.decompressByteArary(compressed);\n-        Assert.assertEquals(decompressed, testEula);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NzQ3MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496957471", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T18:40:11Z", "path": "utils/src/main/java/com/cloud/utils/compression/CompressionUtil.java", "diffHunk": "@@ -0,0 +1,58 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.utils.compression;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/utils/src/main/java/com/cloud/utils/compression/CompressionUtil.java b/utils/src/main/java/com/cloud/utils/compression/CompressionUtil.java\ndeleted file mode 100644\nindex 20f0bc8eb7..0000000000\n--- a/utils/src/main/java/com/cloud/utils/compression/CompressionUtil.java\n+++ /dev/null\n\n@@ -1,58 +0,0 @@\n-//\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-//\n-package com.cloud.utils.compression;\n-\n-import org.apache.log4j.Logger;\n-\n-import java.io.BufferedReader;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.nio.charset.StandardCharsets;\n-import java.util.zip.GZIPInputStream;\n-import java.util.zip.GZIPOutputStream;\n-\n-public class CompressionUtil {\n-\n-    private static final Logger s_logger = Logger.getLogger(CompressionUtil.class);\n-\n-    public byte[] compressString(String inputStr) throws IOException {\n-        ByteArrayOutputStream obj = new ByteArrayOutputStream();\n-        GZIPOutputStream gzip = new GZIPOutputStream(obj);\n-        gzip.write(inputStr.getBytes(StandardCharsets.UTF_8));\n-        gzip.close();\n-        return obj.toByteArray();\n-    }\n-\n-    public String decompressByteArary(byte[] compressed) throws IOException {\n-        GZIPInputStream gis = new GZIPInputStream(new ByteArrayInputStream(compressed));\n-        BufferedReader bf = new BufferedReader(new InputStreamReader(gis, StandardCharsets.UTF_8));\n-        String line = bf.readLine();\n-        StringBuilder builder = new StringBuilder();\n-        while (line != null) {\n-            builder.append(line);\n-            line = bf.readLine();\n-            if (line != null) {\n-                builder.append(\"\\n\");\n-            }\n-        }\n-        return builder.toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NzYwOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496967609", "bodyText": "separate method", "author": "DaanHoogland", "createdAt": "2020-09-29T18:58:05Z", "path": "server/src/main/java/com/cloud/storage/StorageManagerImpl.java", "diffHunk": "@@ -1498,6 +1610,16 @@ public PrimaryDataStoreInfo cancelPrimaryStorageForMaintenance(CancelPrimaryStor\n         DataStoreProvider provider = _dataStoreProviderMgr.getDataStoreProvider(primaryStorage.getStorageProviderName());\n         DataStoreLifeCycle lifeCycle = provider.getDataStoreLifeCycle();\n         DataStore store = _dataStoreMgr.getDataStore(primaryStorage.getId(), DataStoreRole.Primary);\n+        if (primaryStorage.getPoolType() == StoragePoolType.DatastoreCluster) {\n+            primaryStorage.setStatus(StoragePoolStatus.Up);\n+            _storagePoolDao.update(primaryStorage.getId(), primaryStorage);\n+            //FR41 need to handle when one of the primary stores is unable to cancel the maintenance mode\n+            List<StoragePoolVO> childDatastores = _storagePoolDao.listChildStoragePoolsInDatastoreCluster(primaryStorageId);\n+            for (StoragePoolVO childDatastore : childDatastores) {\n+                DataStore childStore = _dataStoreMgr.getDataStore(childDatastore.getId(), DataStoreRole.Primary);\n+                lifeCycle.cancelMaintain(childStore);\n+            }\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "chunk": "diff --git a/server/src/main/java/com/cloud/storage/StorageManagerImpl.java b/server/src/main/java/com/cloud/storage/StorageManagerImpl.java\nindex 212f6938e6..c59a26d3bc 100644\n--- a/server/src/main/java/com/cloud/storage/StorageManagerImpl.java\n+++ b/server/src/main/java/com/cloud/storage/StorageManagerImpl.java\n\n@@ -1610,16 +1498,6 @@ public class StorageManagerImpl extends ManagerBase implements StorageManager, C\n         DataStoreProvider provider = _dataStoreProviderMgr.getDataStoreProvider(primaryStorage.getStorageProviderName());\n         DataStoreLifeCycle lifeCycle = provider.getDataStoreLifeCycle();\n         DataStore store = _dataStoreMgr.getDataStore(primaryStorage.getId(), DataStoreRole.Primary);\n-        if (primaryStorage.getPoolType() == StoragePoolType.DatastoreCluster) {\n-            primaryStorage.setStatus(StoragePoolStatus.Up);\n-            _storagePoolDao.update(primaryStorage.getId(), primaryStorage);\n-            //FR41 need to handle when one of the primary stores is unable to cancel the maintenance mode\n-            List<StoragePoolVO> childDatastores = _storagePoolDao.listChildStoragePoolsInDatastoreCluster(primaryStorageId);\n-            for (StoragePoolVO childDatastore : childDatastores) {\n-                DataStore childStore = _dataStoreMgr.getDataStore(childDatastore.getId(), DataStoreRole.Primary);\n-                lifeCycle.cancelMaintain(childStore);\n-            }\n-        }\n         lifeCycle.cancelMaintain(store);\n \n         return (PrimaryDataStoreInfo)_dataStoreMgr.getDataStore(primaryStorage.getId(), DataStoreRole.Primary);\n"}}, {"oid": "9b08369067dc6167e561d54073dccace44844202", "url": "https://github.com/apache/cloudstack/commit/9b08369067dc6167e561d54073dccace44844202", "message": "Added storage policy details to disk while creating disk and restricted migration of volumes to storage pools which are not storage policy compliance", "committedDate": "2020-10-12T05:12:23Z", "type": "forcePushed"}, {"oid": "09ae6cbce44c884d8f77a293391cd5f685415db0", "url": "https://github.com/apache/cloudstack/commit/09ae6cbce44c884d8f77a293391cd5f685415db0", "message": "Reconcile root disk controller fix", "committedDate": "2020-10-14T10:41:40Z", "type": "forcePushed"}, {"oid": "a359f3d6101239fcfa647db923e6c1b8e4251937", "url": "https://github.com/apache/cloudstack/commit/a359f3d6101239fcfa647db923e6c1b8e4251937", "message": "Fix remove VM and its volumes for deploy-as-is if have previously failed - restore cpu flags in nested virtualization test", "committedDate": "2020-10-16T09:31:42Z", "type": "forcePushed"}, {"oid": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "url": "https://github.com/apache/cloudstack/commit/0701dc9d9cfeaafbb957b46994826ef975c677e9", "message": "Initial commit adding few required managed object classes and added pbm sdk", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "f05b567d4c1335a16bfc8786eb9046a7815937f1", "url": "https://github.com/apache/cloudstack/commit/f05b567d4c1335a16bfc8786eb9046a7815937f1", "message": "Added PBM service connect", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "a72782f2e507d6d5c652ba2563aa7cda59fa257b", "url": "https://github.com/apache/cloudstack/commit/a72782f2e507d6d5c652ba2563aa7cda59fa257b", "message": "Fix root folder issue on datastore", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "b8b4f0f9adaec90c8032067fbc0fb6f428a6cd4b", "url": "https://github.com/apache/cloudstack/commit/b8b4f0f9adaec90c8032067fbc0fb6f428a6cd4b", "message": "Added importVsphereStoragePolicies API and scheme changes", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "037fcfd03221ef87a1bcb817fea01929bf3a8a04", "url": "https://github.com/apache/cloudstack/commit/037fcfd03221ef87a1bcb817fea01929bf3a8a04", "message": "Fixed bean creation errors on VsphereStoragePolicyDaoImpl", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "a4ec86a652dac8ca5d91cd7aa8b364123acd9627", "url": "https://github.com/apache/cloudstack/commit/a4ec86a652dac8ca5d91cd7aa8b364123acd9627", "message": "Added Storage policy id to VO", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "8b23ea90b8566b0f9e5ae7b6a17b0bf2f58728b5", "url": "https://github.com/apache/cloudstack/commit/8b23ea90b8566b0f9e5ae7b6a17b0bf2f58728b5", "message": "Moved Dao and VO files to different packages", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "2ff4989feb6d48ffaa4ed74b00425bff8ecd9cae", "url": "https://github.com/apache/cloudstack/commit/2ff4989feb6d48ffaa4ed74b00425bff8ecd9cae", "message": "Added gen_toc.py changes for API importvpsherestoragepolicies", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "a951e5f57fb2c8a867c8ace264d59d85e9011a5e", "url": "https://github.com/apache/cloudstack/commit/a951e5f57fb2c8a867c8ace264d59d85e9011a5e", "message": "Fixed unit test failure", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "27e5dfa633e2ddde2e89fa4cc2186332e1a4777e", "url": "https://github.com/apache/cloudstack/commit/27e5dfa633e2ddde2e89fa4cc2186332e1a4777e", "message": "Updated code to handle sync of storage policies when importVsphereStoragePolicies API is called multiple times", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "fb0a96e7fb04d012355c2efad972fb802e5c874d", "url": "https://github.com/apache/cloudstack/commit/fb0a96e7fb04d012355c2efad972fb802e5c874d", "message": "Check if datastore is complaince with the storagepolicy provided in the disk offering.\nAdded corresponding manager objects from PBM sdk to do the job.\nMade dao layer changes to read the storage policy in diskoffering", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "487bb03c4d6d23faa7142c5c8636d2b0839880cc", "url": "https://github.com/apache/cloudstack/commit/487bb03c4d6d23faa7142c5c8636d2b0839880cc", "message": "Added Storagepolicy while creating diskoffering. CreateDiskOffering API now takes storagepolicy as a parameter with UUID value", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "851b562e042575b5b39a2fdfe820bf3aea43d45f", "url": "https://github.com/apache/cloudstack/commit/851b562e042575b5b39a2fdfe820bf3aea43d45f", "message": "Unit test fix", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "6c314492e756b945c928b8f89104ef564a4b7a3e", "url": "https://github.com/apache/cloudstack/commit/6c314492e756b945c928b8f89104ef564a4b7a3e", "message": "Fix NPE in case of preparing secondarystorage on Host", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "aa07959f2adc77a471582a995af2aeb242d10dc0", "url": "https://github.com/apache/cloudstack/commit/aa07959f2adc77a471582a995af2aeb242d10dc0", "message": "Use VStorageObjectManager for disk operations.\n\nCreated disks using VStorageObjectManager\nRemoved redundant code around attach volume and create volumes", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "bef00b1cfb4df88c0778bbc3841650613e3ee025", "url": "https://github.com/apache/cloudstack/commit/bef00b1cfb4df88c0778bbc3841650613e3ee025", "message": "Added PBM jar dependency for vsphere 6.7 version", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "3d9edeeb9d2ecaba06573980dc48225cc126d628", "url": "https://github.com/apache/cloudstack/commit/3d9edeeb9d2ecaba06573980dc48225cc126d628", "message": "Bug fixing on default base folder", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "4bbb747b2300d8fa60e04ba3ab210020637be80f", "url": "https://github.com/apache/cloudstack/commit/4bbb747b2300d8fa60e04ba3ab210020637be80f", "message": "VMFS to presetup change", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "6df819028e472dd9801873857fe20133381ca0fe", "url": "https://github.com/apache/cloudstack/commit/6df819028e472dd9801873857fe20133381ca0fe", "message": "UI changes and accept any type of datastore as presetup in vmware", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "18340e96b101f84f702dbf9cb8921504666770ff", "url": "https://github.com/apache/cloudstack/commit/18340e96b101f84f702dbf9cb8921504666770ff", "message": "importVsphereStoragePolices improvements", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "778148ba167e1ee0fe64440e3ca4e54e811c2ee4", "url": "https://github.com/apache/cloudstack/commit/778148ba167e1ee0fe64440e3ca4e54e811c2ee4", "message": "Fix importstorage policies to update deleted policies on vcenter", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "233e665b34b8017e4fba2ca189a506a47644d0aa", "url": "https://github.com/apache/cloudstack/commit/233e665b34b8017e4fba2ca189a506a47644d0aa", "message": "Fix response list on importVsphereStoragePoliciescmd", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "586fa7eeaff92966c81b0963fd0f038f972e77a9", "url": "https://github.com/apache/cloudstack/commit/586fa7eeaff92966c81b0963fd0f038f972e77a9", "message": "Added listVsphereStoragePoliciesCmd", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "c45b83a158c48972a24c456b888d15cc9841c7d1", "url": "https://github.com/apache/cloudstack/commit/c45b83a158c48972a24c456b888d15cc9841c7d1", "message": "Logging variable name change", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "48786b2d312550e7b724783b9ac2f3ca5c58e186", "url": "https://github.com/apache/cloudstack/commit/48786b2d312550e7b724783b9ac2f3ca5c58e186", "message": "DataStore Clusters addition as a storage pool", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "bea31b85eed21f20beff31469f0f5bcbad9041d8", "url": "https://github.com/apache/cloudstack/commit/bea31b85eed21f20beff31469f0f5bcbad9041d8", "message": "Assetion fix in StorageTest.java", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "f858387b3c518af5a939416bfbdd833fbf76158f", "url": "https://github.com/apache/cloudstack/commit/f858387b3c518af5a939416bfbdd833fbf76158f", "message": "Import storagepolicies when vmware datacenter is added or updated", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "41b3fc19d69eddd8a70b3d14d0668c805572c2ae", "url": "https://github.com/apache/cloudstack/commit/41b3fc19d69eddd8a70b3d14d0668c805572c2ae", "message": "Add Datastore cluster and the child entities which are datastores in the cluster into CloudStack\n\nSetting scope is still pending.", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "53fa3beecf042c0ad6c7444e007d327f0c454fff", "url": "https://github.com/apache/cloudstack/commit/53fa3beecf042c0ad6c7444e007d327f0c454fff", "message": "Register Disk to first class disk whereever possible", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "b4a23ea5f6255af7e217c890bf6edbc7cb63cf0c", "url": "https://github.com/apache/cloudstack/commit/b4a23ea5f6255af7e217c890bf6edbc7cb63cf0c", "message": "Allocation logic to skip datastore cluster and consider only storagepools inside the datastore cluster", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "c9c38c0f37be784efd341374ceed05d167dc9995", "url": "https://github.com/apache/cloudstack/commit/c9c38c0f37be784efd341374ceed05d167dc9995", "message": "Handle datastore clusters in list storage pools to list only parent not the children in the Datastore cluster", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "75fb1d91eee6e18b2247d39ea4a3cfda04101c07", "url": "https://github.com/apache/cloudstack/commit/75fb1d91eee6e18b2247d39ea4a3cfda04101c07", "message": "Fix adding Datastore clusters and listing", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "873f9dd9ac629bd350068401470169d177aa3328", "url": "https://github.com/apache/cloudstack/commit/873f9dd9ac629bd350068401470169d177aa3328", "message": "Datastore Clusters operations on putting into maintenance mode, update storage pool with tags, cancelling mantenance mode and deleting storage pool", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "0335713738af0d9522b0c6645c404b0301821166", "url": "https://github.com/apache/cloudstack/commit/0335713738af0d9522b0c6645c404b0301821166", "message": "Fix NPE on one of the register disk usecases", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "fef39264693cedd4e7d50bc6938bb7c6ec2825eb", "url": "https://github.com/apache/cloudstack/commit/fef39264693cedd4e7d50bc6938bb7c6ec2825eb", "message": "Datastore cluster: update tag to the child storagepools also", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "ed7efdf4d214982c1f571707fbdbf9ea5064e232", "url": "https://github.com/apache/cloudstack/commit/ed7efdf4d214982c1f571707fbdbf9ea5064e232", "message": "Generalise linked clone formats which are different for each datastore type", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "5aac6c3f0fb2521142353cb65378ced0ee6b43ad", "url": "https://github.com/apache/cloudstack/commit/5aac6c3f0fb2521142353cb65378ced0ee6b43ad", "message": "Fix immutable list to add another entry to list", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "4178a7cd9057d76c0a3d763b7240a358e45ad550", "url": "https://github.com/apache/cloudstack/commit/4178a7cd9057d76c0a3d763b7240a358e45ad550", "message": "inter-cluster migration support", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "c8a28f34ee39bb2985c5ace6f96f36bda51ee1f8", "url": "https://github.com/apache/cloudstack/commit/c8a28f34ee39bb2985c5ace6f96f36bda51ee1f8", "message": "Use clonevm task while creating template from volume\n\nOld way is by taking snapshot of entire VM and then clone from that snapshot with the required disk", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "4b10c6116763bed6f853a2bfdfbfbb4c60c81696", "url": "https://github.com/apache/cloudstack/commit/4b10c6116763bed6f853a2bfdfbfbb4c60c81696", "message": "Datastore cluster maintenance failure case handling.", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "7932f63390f7b4eef953bea0c6c878e3bc8b3034", "url": "https://github.com/apache/cloudstack/commit/7932f63390f7b4eef953bea0c6c878e3bc8b3034", "message": "Add checks before actual deletion of datastore cluster", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "812d42ebaaa62ce98efd27207c03ae73ac275fbc", "url": "https://github.com/apache/cloudstack/commit/812d42ebaaa62ce98efd27207c03ae73ac275fbc", "message": "Fix updateconfiguration API to add settings to child datastores in case of datastore clusters", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "e700ad72e7ac81ceaf1d8005a4fc7c30f398d9fb", "url": "https://github.com/apache/cloudstack/commit/e700ad72e7ac81ceaf1d8005a4fc7c30f398d9fb", "message": "Fix prepare template API incase of Datastore cluster", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "fc05d3168f14584431a1a6b3c1f88cf04999cfaa", "url": "https://github.com/apache/cloudstack/commit/fc05d3168f14584431a1a6b3c1f88cf04999cfaa", "message": "Fix ListVMsCmd with storageid as datastore cluster", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "61dd85876b259be856568177cb7edb54f22a41fb", "url": "https://github.com/apache/cloudstack/commit/61dd85876b259be856568177cb7edb54f22a41fb", "message": "Fix migrate vm and volume APIs in case if datastore cluster", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "1244fca367a6249bdb75b2f19c49196db2ca91cb", "url": "https://github.com/apache/cloudstack/commit/1244fca367a6249bdb75b2f19c49196db2ca91cb", "message": "Handle listsystemvms cmd in case of datastore clusters", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "48dd0dae0795f8800508051857fb794a508a3b4a", "url": "https://github.com/apache/cloudstack/commit/48dd0dae0795f8800508051857fb794a508a3b4a", "message": "Adding Storagepolicies to the service offering for root disks", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "36d65905b1c732f20266de142ead6ae38736775a", "url": "https://github.com/apache/cloudstack/commit/36d65905b1c732f20266de142ead6ae38736775a", "message": "Base folder creation on datstores restrict only to primary storages, for secondary storage datastore it is not required", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "1b18554794d1891539844ecc72e8c14aa47bdd93", "url": "https://github.com/apache/cloudstack/commit/1b18554794d1891539844ecc72e8c14aa47bdd93", "message": "Fix test cases", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "e211b92324686a56c88b4cd3e02c7f50b502558b", "url": "https://github.com/apache/cloudstack/commit/e211b92324686a56c88b4cd3e02c7f50b502558b", "message": "Changed workflow for storing volumes in sec storage", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "70e19b28e6b2d5d5fb0e66da85e46b81b3939071", "url": "https://github.com/apache/cloudstack/commit/70e19b28e6b2d5d5fb0e66da85e46b81b3939071", "message": "fix some more test cases", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "a5531a9e8612d9511bca5b551811dc274f16a1f9", "url": "https://github.com/apache/cloudstack/commit/a5531a9e8612d9511bca5b551811dc274f16a1f9", "message": "Changed artifact id from pbm for vmware-pbm for policy based management", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "0483e299e60aa503cd581be992cb53c63ef49b3e", "url": "https://github.com/apache/cloudstack/commit/0483e299e60aa503cd581be992cb53c63ef49b3e", "message": "Deleted temporary files", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "295ea5028214de1cbcaa9320b985a14450492e60", "url": "https://github.com/apache/cloudstack/commit/295ea5028214de1cbcaa9320b985a14450492e60", "message": "Fixed unexpected token Exception", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "2dd6e184d5e23ca1f55129030dd3200d10b7c6ee", "url": "https://github.com/apache/cloudstack/commit/2dd6e184d5e23ca1f55129030dd3200d10b7c6ee", "message": "Fix simulator code for SimulatorStorageProcessor.java", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "ab171adfdd02c31ebff79199903bb54dd907bfd0", "url": "https://github.com/apache/cloudstack/commit/ab171adfdd02c31ebff79199903bb54dd907bfd0", "message": "Handle failure case of putting datastore cluster on maintenance mode", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "201ebe88681a30837d3a19cb3212649d5a54630d", "url": "https://github.com/apache/cloudstack/commit/201ebe88681a30837d3a19cb3212649d5a54630d", "message": "Simulator failures fixing", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "b88df5ee5b6c5aafdfaa581268be64300fa3e39c", "url": "https://github.com/apache/cloudstack/commit/b88df5ee5b6c5aafdfaa581268be64300fa3e39c", "message": "Fixed a smoke test while taking snapshot", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "f320cf3c597a3c88a231c7c249557899e08e5a60", "url": "https://github.com/apache/cloudstack/commit/f320cf3c597a3c88a231c7c249557899e08e5a60", "message": "Remove registering virtual disk code", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "af84743fd956b1dc63192d37196b35cc1e3ae95a", "url": "https://github.com/apache/cloudstack/commit/af84743fd956b1dc63192d37196b35cc1e3ae95a", "message": "Fix addition of datastore clusters not to configure it as non NFS storage", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "d4d372a9a4910a3afb527634963aed1c1a6d1e6d", "url": "https://github.com/apache/cloudstack/commit/d4d372a9a4910a3afb527634963aed1c1a6d1e6d", "message": "Fix addition of datastores with invalid vCenter server details", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "d48cab75ab44f34eecb1dcffda82e5570bb41288", "url": "https://github.com/apache/cloudstack/commit/d48cab75ab44f34eecb1dcffda82e5570bb41288", "message": "Fix findstoragepoolsformigration cmd not to list the parent datastore cluster as suitable storagepool", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "0a412ac6dad2541fde53dfb68208678e480d07ca", "url": "https://github.com/apache/cloudstack/commit/0a412ac6dad2541fde53dfb68208678e480d07ca", "message": "Handle volume copy from secondary to primary in case of vSAN", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "85d440d9738cd133230243558a7859e8306a926d", "url": "https://github.com/apache/cloudstack/commit/85d440d9738cd133230243558a7859e8306a926d", "message": "Fix list volume response to list datastore cluster name and id instead of child datastore", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "97ae846c1e10aba28db25a4eff8556f13b767f60", "url": "https://github.com/apache/cloudstack/commit/97ae846c1e10aba28db25a4eff8556f13b767f60", "message": "Removed unused imports caused due to some merge conflicts", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "570f3214b83c6210edc4ba01a6306c4757138f92", "url": "https://github.com/apache/cloudstack/commit/570f3214b83c6210edc4ba01a6306c4757138f92", "message": "Handle VMFS6 sesparse format disk files", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "ebe0e2bb24f02d5b3e547a6759a667965adbf5b9", "url": "https://github.com/apache/cloudstack/commit/ebe0e2bb24f02d5b3e547a6759a667965adbf5b9", "message": "Keep retry logic for make directory method which is returning false positive yet times", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "d2d9b3c72f625f1efcbe6f20032e6002da3004ae", "url": "https://github.com/apache/cloudstack/commit/d2d9b3c72f625f1efcbe6f20032e6002da3004ae", "message": "Fix proper error message on revert volume snapshot operation in case of any hypervisor other than KVM", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "c16b40e33712777ebcc2e32050ec4090956fe979", "url": "https://github.com/apache/cloudstack/commit/c16b40e33712777ebcc2e32050ec4090956fe979", "message": "Fix list volumes cmd and update volume cmd to accept datastore cluster as storgeid", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "38b9618e4b9b6484bfbd01ac6714a64ce33eecfe", "url": "https://github.com/apache/cloudstack/commit/38b9618e4b9b6484bfbd01ac6714a64ce33eecfe", "message": "Fix destination hostname for stopped VMs in case of reset ssh keys", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "19745ea0497e3f078151e0ba553c8fd9a83d069e", "url": "https://github.com/apache/cloudstack/commit/19745ea0497e3f078151e0ba553c8fd9a83d069e", "message": "Fix enable primary datastore maintenance command seriliaztion on it", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "40934ba9ff1b84e5dde559deabb4bc8e56193ce0", "url": "https://github.com/apache/cloudstack/commit/40934ba9ff1b84e5dde559deabb4bc8e56193ce0", "message": "Fix travis failures by removing dependency of vmware from storage.\nAdded a new command class to verify the vCenter details provided while adding primary storage", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "c11dc337be774af429a1eff0f02d94e4867f28f0", "url": "https://github.com/apache/cloudstack/commit/c11dc337be774af429a1eff0f02d94e4867f28f0", "message": "Set back the datastore cluster state to UP upon on failure in prepare maintenance", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "04d400f0553c502a56863b976d316753abfb5f8d", "url": "https://github.com/apache/cloudstack/commit/04d400f0553c502a56863b976d316753abfb5f8d", "message": "Handle import unmanaged VM into CloudStack to support any type of datastore", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "8ee17e19a02438d6d0cb977c31aee8f6acb005f2", "url": "https://github.com/apache/cloudstack/commit/8ee17e19a02438d6d0cb977c31aee8f6acb005f2", "message": "Fix fcd from being deleted when empty", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "d864e9dc39b69e590e3df898a03a874a8173fcc6", "url": "https://github.com/apache/cloudstack/commit/d864e9dc39b69e590e3df898a03a874a8173fcc6", "message": "[VMware] Full OVF properties support", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "cf2bb717920b56eb6e864e5b33b5cddbaf512623", "url": "https://github.com/apache/cloudstack/commit/cf2bb717920b56eb6e864e5b33b5cddbaf512623", "message": "Remove extra line after merging", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "5652097ef009dd19a1f6e97ce54bf2689616a308", "url": "https://github.com/apache/cloudstack/commit/5652097ef009dd19a1f6e97ce54bf2689616a308", "message": "Added backup on fail over scenrio in case of new create disk method", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "700ab1a5ef5716861b9721cf4e7a7e0a5e7f51a4", "url": "https://github.com/apache/cloudstack/commit/700ab1a5ef5716861b9721cf4e7a7e0a5e7f51a4", "message": "vVols datastore support added", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "f825a94dc459e49f43a5dfc30fec8da563281269", "url": "https://github.com/apache/cloudstack/commit/f825a94dc459e49f43a5dfc30fec8da563281269", "message": "Fixed volume migrations to and fro vVols datastorewq", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "f53f11b0103cce567c3aace5d9ee2d8e33b1337f", "url": "https://github.com/apache/cloudstack/commit/f53f11b0103cce567c3aace5d9ee2d8e33b1337f", "message": "Fix seeding template issue after PR merging", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "bc8ad6843458aae30f7af2b59cc8547444994ec1", "url": "https://github.com/apache/cloudstack/commit/bc8ad6843458aae30f7af2b59cc8547444994ec1", "message": "prepare for maintenance of storage pool of type datastore cluster should not try to cancel the maintenance upon failure, rather keep it in error in maintenance state", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "f74262b12a287db863c85a3b05d84824f0c7e82c", "url": "https://github.com/apache/cloudstack/commit/f74262b12a287db863c85a3b05d84824f0c7e82c", "message": "Snapshot on dettached volume considering wrong path, corrected it", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "fab6b41c9044d3a5dc3da59cea2ead02bfbdb71f", "url": "https://github.com/apache/cloudstack/commit/fab6b41c9044d3a5dc3da59cea2ead02bfbdb71f", "message": "Delete VM fix which does not move detached disks to fcd folder\nvVols attach disk fix", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "bb4ce2118ddac69fda923208431a754ae5168dca", "url": "https://github.com/apache/cloudstack/commit/bb4ce2118ddac69fda923208431a754ae5168dca", "message": "Add new template and vm deploy as is details table and refactor", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "f73830acbbd5760dbea2acb43da357b2e8e6e2ab", "url": "https://github.com/apache/cloudstack/commit/f73830acbbd5760dbea2acb43da357b2e8e6e2ab", "message": "Refactor deploy as is constants", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "44bae9866428539b388578487364f3893f0951c1", "url": "https://github.com/apache/cloudstack/commit/44bae9866428539b388578487364f3893f0951c1", "message": "Fix daos issue", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "818981d8a7ef703125bc56d81c36b92653ba80a8", "url": "https://github.com/apache/cloudstack/commit/818981d8a7ef703125bc56d81c36b92653ba80a8", "message": "Fix typo", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "6ebfdc68545f66539010905b59973a3ed18c7b65", "url": "https://github.com/apache/cloudstack/commit/6ebfdc68545f66539010905b59973a3ed18c7b65", "message": "Dettached datadisk migration failed between NFS storages.\nFixed the issue of worker VM name being null", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "19c83fef641954d0f8d4bd982444fc8d222fe9c9", "url": "https://github.com/apache/cloudstack/commit/19c83fef641954d0f8d4bd982444fc8d222fe9c9", "message": "Fix zone to zone scope volume migrations NPE", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}]}