{"pr_number": 3828, "pr_title": "[KVM] Direct download agnostic of the storage provider", "pr_createdAt": "2020-01-22T05:41:59Z", "pr_url": "https://github.com/apache/cloudstack/pull/3828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NDI3OQ==", "url": "https://github.com/apache/cloudstack/pull/3828#discussion_r369454279", "bodyText": "seems like a debug message to me. Why does the operator want to see this?", "author": "DaanHoogland", "createdAt": "2020-01-22T09:39:19Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "diffHunk": "@@ -1693,38 +1696,77 @@ private DirectTemplateDownloader getDirectTemplateDownloaderFromCommand(DirectDo\n     @Override\n     public Answer handleDownloadTemplateToPrimaryStorage(DirectDownloadCommand cmd) {\n         final PrimaryDataStoreTO pool = cmd.getDestPool();\n-        if (!pool.getPoolType().equals(StoragePoolType.NetworkFilesystem)) {\n-            return new DirectDownloadAnswer(false, \"Unsupported pool type \" + pool.getPoolType().toString(), true);\n-        }\n-        KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n         DirectTemplateDownloader downloader;\n+        KVMPhysicalDisk template;\n \n         try {\n-            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool);\n-        } catch (IllegalArgumentException e) {\n-            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n-        }\n+            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");", "originalCommit": "0881b2073f30e55f71f82cb8612d892c7b6b6880", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d48518330d282c8a147dcbd75d4fe0a857db92ce", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\nindex 87ba58f68f..714c8ea856 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\n\n@@ -1700,7 +1700,7 @@ public class KVMStorageProcessor implements StorageProcessor {\n         KVMPhysicalDisk template;\n \n         try {\n-            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            s_logger.debug(\"Verifying temporary location for downloading the template exists on the host\");\n             String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n             if (!isLocationAccessible(temporaryDownloadPath)) {\n                 String msg = \"The temporary location path for downloading templates does not exist: \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NDk2NA==", "url": "https://github.com/apache/cloudstack/pull/3828#discussion_r369454964", "bodyText": "in this case i would say that if the operator wants info it would be the actual size found and not an announcement that it is going to be calculated. also seems debug to me.", "author": "DaanHoogland", "createdAt": "2020-01-22T09:40:42Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "diffHunk": "@@ -1693,38 +1696,77 @@ private DirectTemplateDownloader getDirectTemplateDownloaderFromCommand(DirectDo\n     @Override\n     public Answer handleDownloadTemplateToPrimaryStorage(DirectDownloadCommand cmd) {\n         final PrimaryDataStoreTO pool = cmd.getDestPool();\n-        if (!pool.getPoolType().equals(StoragePoolType.NetworkFilesystem)) {\n-            return new DirectDownloadAnswer(false, \"Unsupported pool type \" + pool.getPoolType().toString(), true);\n-        }\n-        KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n         DirectTemplateDownloader downloader;\n+        KVMPhysicalDisk template;\n \n         try {\n-            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool);\n-        } catch (IllegalArgumentException e) {\n-            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n-        }\n+            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n+            if (!isLocationAccessible(temporaryDownloadPath)) {\n+                String msg = \"The temporary location path for downloading templates does not exist: \" +\n+                        temporaryDownloadPath + \" on this host\";\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n \n-        try {\n+            s_logger.info(\"Checking for free space on the host for downloading the template\");", "originalCommit": "0881b2073f30e55f71f82cb8612d892c7b6b6880", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d48518330d282c8a147dcbd75d4fe0a857db92ce", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\nindex 87ba58f68f..714c8ea856 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\n\n@@ -1700,7 +1700,7 @@ public class KVMStorageProcessor implements StorageProcessor {\n         KVMPhysicalDisk template;\n \n         try {\n-            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            s_logger.debug(\"Verifying temporary location for downloading the template exists on the host\");\n             String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n             if (!isLocationAccessible(temporaryDownloadPath)) {\n                 String msg = \"The temporary location path for downloading templates does not exist: \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NTM1MQ==", "url": "https://github.com/apache/cloudstack/pull/3828#discussion_r369455351", "bodyText": "maybe change this one to debug as well, or move and add the resulting path to the message", "author": "DaanHoogland", "createdAt": "2020-01-22T09:41:31Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "diffHunk": "@@ -1693,38 +1696,77 @@ private DirectTemplateDownloader getDirectTemplateDownloaderFromCommand(DirectDo\n     @Override\n     public Answer handleDownloadTemplateToPrimaryStorage(DirectDownloadCommand cmd) {\n         final PrimaryDataStoreTO pool = cmd.getDestPool();\n-        if (!pool.getPoolType().equals(StoragePoolType.NetworkFilesystem)) {\n-            return new DirectDownloadAnswer(false, \"Unsupported pool type \" + pool.getPoolType().toString(), true);\n-        }\n-        KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n         DirectTemplateDownloader downloader;\n+        KVMPhysicalDisk template;\n \n         try {\n-            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool);\n-        } catch (IllegalArgumentException e) {\n-            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n-        }\n+            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n+            if (!isLocationAccessible(temporaryDownloadPath)) {\n+                String msg = \"The temporary location path for downloading templates does not exist: \" +\n+                        temporaryDownloadPath + \" on this host\";\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n \n-        try {\n+            s_logger.info(\"Checking for free space on the host for downloading the template\");\n+            if (!isEnoughSpaceForDownloadTemplateOnTemporaryLocation(cmd.getTemplateSize())) {\n+                String msg = \"Not enough space on the defined temporary location to download the template \" + cmd.getTemplateId();\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n+\n+            KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n+            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool, temporaryDownloadPath);\n             s_logger.info(\"Trying to download template\");", "originalCommit": "0881b2073f30e55f71f82cb8612d892c7b6b6880", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d48518330d282c8a147dcbd75d4fe0a857db92ce", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\nindex 87ba58f68f..714c8ea856 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\n\n@@ -1700,7 +1700,7 @@ public class KVMStorageProcessor implements StorageProcessor {\n         KVMPhysicalDisk template;\n \n         try {\n-            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            s_logger.debug(\"Verifying temporary location for downloading the template exists on the host\");\n             String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n             if (!isLocationAccessible(temporaryDownloadPath)) {\n                 String msg = \"The temporary location path for downloading templates does not exist: \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NTY1MA==", "url": "https://github.com/apache/cloudstack/pull/3828#discussion_r369455650", "bodyText": "\ud83d\udc4d this one I agree is good for the operator to have.", "author": "DaanHoogland", "createdAt": "2020-01-22T09:42:10Z", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "diffHunk": "@@ -1693,38 +1696,77 @@ private DirectTemplateDownloader getDirectTemplateDownloaderFromCommand(DirectDo\n     @Override\n     public Answer handleDownloadTemplateToPrimaryStorage(DirectDownloadCommand cmd) {\n         final PrimaryDataStoreTO pool = cmd.getDestPool();\n-        if (!pool.getPoolType().equals(StoragePoolType.NetworkFilesystem)) {\n-            return new DirectDownloadAnswer(false, \"Unsupported pool type \" + pool.getPoolType().toString(), true);\n-        }\n-        KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n         DirectTemplateDownloader downloader;\n+        KVMPhysicalDisk template;\n \n         try {\n-            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool);\n-        } catch (IllegalArgumentException e) {\n-            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n-        }\n+            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n+            if (!isLocationAccessible(temporaryDownloadPath)) {\n+                String msg = \"The temporary location path for downloading templates does not exist: \" +\n+                        temporaryDownloadPath + \" on this host\";\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n \n-        try {\n+            s_logger.info(\"Checking for free space on the host for downloading the template\");\n+            if (!isEnoughSpaceForDownloadTemplateOnTemporaryLocation(cmd.getTemplateSize())) {\n+                String msg = \"Not enough space on the defined temporary location to download the template \" + cmd.getTemplateId();\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n+\n+            KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n+            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool, temporaryDownloadPath);\n             s_logger.info(\"Trying to download template\");\n-            if (!downloader.downloadTemplate()) {\n+            Pair<Boolean, String> result = downloader.downloadTemplate();\n+            if (!result.first()) {\n                 s_logger.warn(\"Couldn't download template\");\n                 return new DirectDownloadAnswer(false, \"Unable to download template\", true);\n             }\n+            String tempFilePath = result.second();\n             if (!downloader.validateChecksum()) {\n                 s_logger.warn(\"Couldn't validate template checksum\");\n                 return new DirectDownloadAnswer(false, \"Checksum validation failed\", false);\n             }\n-            if (!downloader.extractAndInstallDownloadedTemplate()) {\n-                s_logger.warn(\"Couldn't extract and install template\");\n-                return new DirectDownloadAnswer(false, \"Extraction and installation failed\", false);\n-            }\n+            template = storagePoolMgr.createPhysicalDiskFromDirectDownloadTemplate(tempFilePath, destPool, 100);\n         } catch (CloudRuntimeException e) {\n             s_logger.warn(\"Error downloading template \" + cmd.getTemplateId() + \" due to: \" + e.getMessage());\n             return new DirectDownloadAnswer(false, \"Unable to download template: \" + e.getMessage(), true);\n+        } catch (IllegalArgumentException e) {\n+            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n         }\n \n-        DirectTemplateInformation info = downloader.getTemplateInformation();\n-        return new DirectDownloadAnswer(true, info.getSize(), info.getInstallPath());\n+        return new DirectDownloadAnswer(true, template.getSize(), template.getName());\n+    }\n+\n+    /**\n+     * True if location exists\n+     */\n+    private boolean isLocationAccessible(String temporaryDownloadPath) {\n+        File dir = new File(temporaryDownloadPath);\n+        return dir.exists();\n+    }\n+\n+    /**\n+     * Perform a free space check on the host for downloading the direct download templates\n+     * @param templateSize template size obtained from remote server when registering the template (in bytes)\n+     */\n+    protected boolean isEnoughSpaceForDownloadTemplateOnTemporaryLocation(Long templateSize) {\n+        if (templateSize == null || templateSize == 0L) {\n+            s_logger.info(\"The server did not provide the template size, assuming there is enough space to download it\");", "originalCommit": "0881b2073f30e55f71f82cb8612d892c7b6b6880", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d48518330d282c8a147dcbd75d4fe0a857db92ce", "chunk": "diff --git a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\nindex 87ba58f68f..714c8ea856 100644\n--- a/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\n+++ b/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java\n\n@@ -1700,7 +1700,7 @@ public class KVMStorageProcessor implements StorageProcessor {\n         KVMPhysicalDisk template;\n \n         try {\n-            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            s_logger.debug(\"Verifying temporary location for downloading the template exists on the host\");\n             String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n             if (!isLocationAccessible(temporaryDownloadPath)) {\n                 String msg = \"The temporary location path for downloading templates does not exist: \" +\n"}}, {"oid": "d48518330d282c8a147dcbd75d4fe0a857db92ce", "url": "https://github.com/apache/cloudstack/commit/d48518330d282c8a147dcbd75d4fe0a857db92ce", "message": "Change default path for direct download", "committedDate": "2020-01-29T04:30:07Z", "type": "forcePushed"}, {"oid": "6e499e1e3b1ea39173105f1552967a8cfa905568", "url": "https://github.com/apache/cloudstack/commit/6e499e1e3b1ea39173105f1552967a8cfa905568", "message": "Fix ISO failure after retry", "committedDate": "2020-02-20T12:45:28Z", "type": "forcePushed"}, {"oid": "73570af55ca1182af5f0deda5827add3ab0a1e93", "url": "https://github.com/apache/cloudstack/commit/73570af55ca1182af5f0deda5827add3ab0a1e93", "message": "Fix iso direct download", "committedDate": "2020-02-21T11:17:48Z", "type": "forcePushed"}, {"oid": "0308c4dad41478124e1c0ed316074cf21149e891", "url": "https://github.com/apache/cloudstack/commit/0308c4dad41478124e1c0ed316074cf21149e891", "message": "Fix iso direct download", "committedDate": "2020-02-27T03:59:06Z", "type": "forcePushed"}, {"oid": "62d99cf3486fb1a7797ddf9c8980389b58800124", "url": "https://github.com/apache/cloudstack/commit/62d99cf3486fb1a7797ddf9c8980389b58800124", "message": "Refactor volume migration to remove secondary storage intermediate", "committedDate": "2020-03-04T04:49:19Z", "type": "forcePushed"}, {"oid": "caf6b100b698f3491f749e5dbb192c8909d16e3c", "url": "https://github.com/apache/cloudstack/commit/caf6b100b698f3491f749e5dbb192c8909d16e3c", "message": "Remove constraint for NFS storage", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "033d4f7bc62a59154dc88a5517a962617ec621fe", "url": "https://github.com/apache/cloudstack/commit/033d4f7bc62a59154dc88a5517a962617ec621fe", "message": "Add new property on agent.properties", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "e69cd3da2880bd82d3fa9c5f1735a0eb2f2985d7", "url": "https://github.com/apache/cloudstack/commit/e69cd3da2880bd82d3fa9c5f1735a0eb2f2985d7", "message": "Add free disk space on the host prior template download", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "8e11bf255265ea0b629edfbe473351255a77234c", "url": "https://github.com/apache/cloudstack/commit/8e11bf255265ea0b629edfbe473351255a77234c", "message": "Add unit tests for the free space check", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "cb2ee6f5e168197fe8ed8de3411e70558f780025", "url": "https://github.com/apache/cloudstack/commit/cb2ee6f5e168197fe8ed8de3411e70558f780025", "message": "Fix free space check - retrieve avaiable size in bytes", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "bc989e423b4e8997aa90fa7fc9ec59e8428a5e2c", "url": "https://github.com/apache/cloudstack/commit/bc989e423b4e8997aa90fa7fc9ec59e8428a5e2c", "message": "Update default location for direct download", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "989e3b8b5196353046f11b035d3d00b2d6852121", "url": "https://github.com/apache/cloudstack/commit/989e3b8b5196353046f11b035d3d00b2d6852121", "message": "Improve the method to retrieve hosts to retry on depending on the destination pool type and scope", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "cfe19ab9bea17cda54302eb172c7026a97689649", "url": "https://github.com/apache/cloudstack/commit/cfe19ab9bea17cda54302eb172c7026a97689649", "message": "Verify location for temporary download exists before checking free space", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "453bb895cce0cf40bbcee9c19a6eee53da555e8c", "url": "https://github.com/apache/cloudstack/commit/453bb895cce0cf40bbcee9c19a6eee53da555e8c", "message": "In progress - refactor and extension", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "6ce0a47aaab5cc88a3d3741d1b9f6be7b8aa760a", "url": "https://github.com/apache/cloudstack/commit/6ce0a47aaab5cc88a3d3741d1b9f6be7b8aa760a", "message": "Refactor and fix", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "ba5596851858e2682a37f4b5ad3058c47ca41704", "url": "https://github.com/apache/cloudstack/commit/ba5596851858e2682a37f4b5ad3058c47ca41704", "message": "Last fixes and marvin tests", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "83930c899b4aedfce4f8018bda417949b342d26f", "url": "https://github.com/apache/cloudstack/commit/83930c899b4aedfce4f8018bda417949b342d26f", "message": "Remove unused test file", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "c8264584c3f0e612bbf50c3da5d7ccfa32098e2f", "url": "https://github.com/apache/cloudstack/commit/c8264584c3f0e612bbf50c3da5d7ccfa32098e2f", "message": "Improve logging", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "e8a20d684dc85075184ba03f3a160489e54a21ce", "url": "https://github.com/apache/cloudstack/commit/e8a20d684dc85075184ba03f3a160489e54a21ce", "message": "Change default path for direct download", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "ef7f626ce3cd9cc47fb827ed32530fe393f1aec7", "url": "https://github.com/apache/cloudstack/commit/ef7f626ce3cd9cc47fb827ed32530fe393f1aec7", "message": "Fix upload certificate", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "09c2636a75adb0a6f9bc939e0d9275a524e894d2", "url": "https://github.com/apache/cloudstack/commit/09c2636a75adb0a6f9bc939e0d9275a524e894d2", "message": "Fix ISO failure after retry", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "ba202a3827acc42a2b9ac6b9706e61a12b056712", "url": "https://github.com/apache/cloudstack/commit/ba202a3827acc42a2b9ac6b9706e61a12b056712", "message": "Fix metalink filename mismatch error", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "2923518fe01808eb79a5034a8f5de78daf9598d9", "url": "https://github.com/apache/cloudstack/commit/2923518fe01808eb79a5034a8f5de78daf9598d9", "message": "Fix iso direct download", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "4f7a27176a57eed5c383205eec7ed8b5bb183fcc", "url": "https://github.com/apache/cloudstack/commit/4f7a27176a57eed5c383205eec7ed8b5bb183fcc", "message": "Fix for direct download ISOs on local storage and shared mount point", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "f3d814d8992f5caf7a243063f5a9a67873e0bfbc", "url": "https://github.com/apache/cloudstack/commit/f3d814d8992f5caf7a243063f5a9a67873e0bfbc", "message": "Last fix iso", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "2102864e8a57ae39a71d4839928923e43554bdff", "url": "https://github.com/apache/cloudstack/commit/2102864e8a57ae39a71d4839928923e43554bdff", "message": "Fix VM migration with ISO", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "9034a8a0b658cb6a1906a8b6e5701b71b314fe01", "url": "https://github.com/apache/cloudstack/commit/9034a8a0b658cb6a1906a8b6e5701b71b314fe01", "message": "Refactor volume migration to remove secondary storage intermediate", "committedDate": "2020-03-04T15:03:55Z", "type": "commit"}, {"oid": "9034a8a0b658cb6a1906a8b6e5701b71b314fe01", "url": "https://github.com/apache/cloudstack/commit/9034a8a0b658cb6a1906a8b6e5701b71b314fe01", "message": "Refactor volume migration to remove secondary storage intermediate", "committedDate": "2020-03-04T15:03:55Z", "type": "forcePushed"}, {"oid": "eef4c637b57c67c5e1ab1a12348b846ab9bd8159", "url": "https://github.com/apache/cloudstack/commit/eef4c637b57c67c5e1ab1a12348b846ab9bd8159", "message": "Fix simulator issue", "committedDate": "2020-03-05T12:38:26Z", "type": "commit"}]}