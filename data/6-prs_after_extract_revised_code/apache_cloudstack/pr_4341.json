{"pr_number": 4341, "pr_title": "Allow to configure root disk size via Service Offering (diskoffering of type Service).", "pr_createdAt": "2020-09-23T21:00:04Z", "pr_url": "https://github.com/apache/cloudstack/pull/4341", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2OTA0NQ==", "url": "https://github.com/apache/cloudstack/pull/4341#discussion_r509969045", "bodyText": "Do we need since parameter here?", "author": "ravening", "createdAt": "2020-10-22T08:19:40Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/offering/CreateServiceOfferingCmd.java", "diffHunk": "@@ -126,6 +126,9 @@\n     @Parameter(name = ApiConstants.SERVICE_OFFERING_DETAILS, type = CommandType.MAP, description = \"details for planner, used to store specific parameters\")\n     private Map details;\n \n+    @Parameter(name = ApiConstants.ROOT_DISK_SIZE, type = CommandType.LONG, required = false, description = \"the Root disk size in GB.\")", "originalCommit": "4f501f0624a44fe2414835f17f210bf977f08846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzIxOQ==", "url": "https://github.com/apache/cloudstack/pull/4341#discussion_r510187219", "bodyText": "Sounds like a good place to add since ;)\nThanks for the heads up @ravening!", "author": "GabrielBrascher", "createdAt": "2020-10-22T14:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2OTA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f6f7f024bec236a7229783a4d60dc8afa3b26d7", "chunk": "diff --git a/api/src/main/java/org/apache/cloudstack/api/command/admin/offering/CreateServiceOfferingCmd.java b/api/src/main/java/org/apache/cloudstack/api/command/admin/offering/CreateServiceOfferingCmd.java\nindex 840891b38c..3219422744 100644\n--- a/api/src/main/java/org/apache/cloudstack/api/command/admin/offering/CreateServiceOfferingCmd.java\n+++ b/api/src/main/java/org/apache/cloudstack/api/command/admin/offering/CreateServiceOfferingCmd.java\n\n@@ -126,7 +127,7 @@ public class CreateServiceOfferingCmd extends BaseCmd {\n     @Parameter(name = ApiConstants.SERVICE_OFFERING_DETAILS, type = CommandType.MAP, description = \"details for planner, used to store specific parameters\")\n     private Map details;\n \n-    @Parameter(name = ApiConstants.ROOT_DISK_SIZE, type = CommandType.LONG, required = false, description = \"the Root disk size in GB.\")\n+    @Parameter(name = ApiConstants.ROOT_DISK_SIZE, type = CommandType.LONG, since = \"4.15\", description = \"the Root disk size in GB.\")\n     private Long rootDiskSize;\n \n     @Parameter(name = ApiConstants.BYTES_READ_RATE, type = CommandType.LONG, required = false, description = \"bytes read rate of the disk offering\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MTY2NQ==", "url": "https://github.com/apache/cloudstack/pull/4341#discussion_r509971665", "bodyText": "An optimization suggestion here. You can write below one liner since rootDiskSizeInBytes is not used anywhere else\noffering.setDiskSize(rootDiskSizeInGiB * GiB_TO_BYTES)", "author": "ravening", "createdAt": "2020-10-22T08:23:22Z", "path": "server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java", "diffHunk": "@@ -2518,6 +2520,12 @@ protected ServiceOfferingVO createServiceOffering(final long userId, final boole\n             }\n         }\n \n+        if (rootDiskSizeInGiB != null && rootDiskSizeInGiB <= 0L) {\n+            throw new InvalidParameterValueException(String.format(\"The Root disk size is of %s GB but it must be greater than 0.\", rootDiskSizeInGiB));\n+        } else if (rootDiskSizeInGiB != null) {\n+            long rootDiskSizeInBytes = rootDiskSizeInGiB * GiB_TO_BYTES;\n+            offering.setDiskSize(rootDiskSizeInBytes);", "originalCommit": "4f501f0624a44fe2414835f17f210bf977f08846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NDkxNg==", "url": "https://github.com/apache/cloudstack/pull/4341#discussion_r510184916", "bodyText": "@ravening that does not make any difference. The JVM feeds its bytecodes to the Just-In-Time compiler (JIT) which will already take care of doing such optimization (among many others).\nI did that way because of 2 reasons, one tecnical and the other a personal option: (i) in case of remote debugging connected via JVM it helps on changing a variable value in runtime; (ii) I prefer that way for code readability.", "author": "GabrielBrascher", "createdAt": "2020-10-22T13:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MTY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f6f7f024bec236a7229783a4d60dc8afa3b26d7", "chunk": "diff --git a/server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java b/server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java\nindex cb353f0ffd..c664182f04 100755\n--- a/server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java\n+++ b/server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java\n\n@@ -2531,42 +2556,9 @@ public class ConfigurationManagerImpl extends ManagerBase implements Configurati\n         offering.setMinIops(minIops);\n         offering.setMaxIops(maxIops);\n \n-        if (bytesReadRate != null && bytesReadRate > 0) {\n-            offering.setBytesReadRate(bytesReadRate);\n-        }\n-        if (bytesReadRateMax != null && bytesReadRateMax > 0) {\n-            offering.setBytesReadRateMax(bytesReadRateMax);\n-        }\n-        if (bytesReadRateMaxLength != null && bytesReadRateMaxLength > 0) {\n-            offering.setBytesReadRateMaxLength(bytesReadRateMaxLength);\n-        }\n-        if (bytesWriteRate != null && bytesWriteRate > 0) {\n-            offering.setBytesWriteRate(bytesWriteRate);\n-        }\n-        if (bytesWriteRateMax != null && bytesWriteRateMax > 0) {\n-            offering.setBytesWriteRateMax(bytesWriteRateMax);\n-        }\n-        if (bytesWriteRateMaxLength != null && bytesWriteRateMaxLength > 0) {\n-            offering.setBytesWriteRateMaxLength(bytesWriteRateMaxLength);\n-        }\n-        if (iopsReadRate != null && iopsReadRate > 0) {\n-            offering.setIopsReadRate(iopsReadRate);\n-        }\n-        if (iopsReadRateMax != null && iopsReadRateMax > 0) {\n-            offering.setIopsReadRateMax(iopsReadRateMax);\n-        }\n-        if (iopsReadRateMaxLength != null && iopsReadRateMaxLength > 0) {\n-            offering.setIopsReadRateMaxLength(iopsReadRateMaxLength);\n-        }\n-        if (iopsWriteRate != null && iopsWriteRate > 0) {\n-            offering.setIopsWriteRate(iopsWriteRate);\n-        }\n-        if (iopsWriteRateMax != null && iopsWriteRateMax > 0) {\n-            offering.setIopsWriteRateMax(iopsWriteRateMax);\n-        }\n-        if (iopsWriteRateMaxLength != null && iopsWriteRateMaxLength > 0) {\n-            offering.setIopsWriteRateMaxLength(iopsWriteRateMaxLength);\n-        }\n+        setBytesRate(offering, bytesReadRate, bytesReadRateMax, bytesReadRateMaxLength, bytesWriteRate, bytesWriteRateMax, bytesWriteRateMaxLength);\n+        setIopsRate(offering, iopsReadRate, iopsReadRateMax, iopsReadRateMaxLength, iopsWriteRate, iopsWriteRateMax, iopsWriteRateMaxLength);\n+\n         if(cacheMode != null) {\n             offering.setCacheMode(DiskOffering.DiskCacheMode.valueOf(cacheMode.toUpperCase()));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NjIzMA==", "url": "https://github.com/apache/cloudstack/pull/4341#discussion_r509996230", "bodyText": "Any specific reason why we are not allowing resizing when vm is running?", "author": "ravening", "createdAt": "2020-10-22T08:59:36Z", "path": "server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java", "diffHunk": "@@ -1139,6 +1143,13 @@ public VolumeVO resizeVolume(ResizeVolumeCmd cmd) throws ResourceAllocationExcep\n                 shrinkOk);\n     }\n \n+    private void checkIfVolumeIsRootAndVmIsRunning(Long newSize, VolumeVO volume, VMInstanceVO vmInstanceVO) {\n+        if (!volume.getSize().equals(newSize) && volume.getVolumeType().equals(Volume.Type.ROOT) && !State.Stopped.equals(vmInstanceVO.getState())) {", "originalCommit": "4f501f0624a44fe2414835f17f210bf977f08846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA2MDczMg==", "url": "https://github.com/apache/cloudstack/pull/4341#discussion_r511060732", "bodyText": "@ravening good question.\nThis was done to avoid users thinking that the service offering was updated correctly. Unfortunatelly, it is necessary to Stop/Start the VM, otherwise IOps updates would not take effect, for example. Considering that this is a service offering update command, then we need to take such situations into account.\nAdditionally, not all operation systems support dynamic memory scaling.", "author": "GabrielBrascher", "createdAt": "2020-10-23T18:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NjIzMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4f6f7f024bec236a7229783a4d60dc8afa3b26d7", "url": "https://github.com/apache/cloudstack/commit/4f6f7f024bec236a7229783a4d60dc8afa3b26d7", "message": "Allow to resize root size via diskoffering of type service.\n\nService Offering can then have a root disk size configured. On such a case the Root Volume can only be resized when changing to another Service Offering with a Root disk size equals or larger than the current one.", "committedDate": "2020-10-29T10:31:27Z", "type": "commit"}, {"oid": "4f6f7f024bec236a7229783a4d60dc8afa3b26d7", "url": "https://github.com/apache/cloudstack/commit/4f6f7f024bec236a7229783a4d60dc8afa3b26d7", "message": "Allow to resize root size via diskoffering of type service.\n\nService Offering can then have a root disk size configured. On such a case the Root Volume can only be resized when changing to another Service Offering with a Root disk size equals or larger than the current one.", "committedDate": "2020-10-29T10:31:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyMjY0NA==", "url": "https://github.com/apache/cloudstack/pull/4341#discussion_r514922644", "bodyText": "this comment could be a method name instead canServiceOfferingBeAppliedToInstance(...)", "author": "DaanHoogland", "createdAt": "2020-10-30T07:54:10Z", "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "diffHunk": "@@ -1183,24 +1183,27 @@ private UserVm upgradeStoppedVirtualMachine(Long vmId, Long svcOffId, Map<String\n         // Check that the specified service offering ID is valid\n         _itMgr.checkIfCanUpgrade(vmInstance, newServiceOffering);\n \n-        DiskOfferingVO newROOTDiskOffering = _diskOfferingDao.findById(newServiceOffering.getId());\n+        // Check if the new service offering can be applied to vm instance", "originalCommit": "4f6f7f024bec236a7229783a4d60dc8afa3b26d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}