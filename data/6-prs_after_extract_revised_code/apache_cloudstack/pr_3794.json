{"pr_number": 3794, "pr_title": "create Volume Access Groups per cluster instead of CloudStack-RandomUUID()", "pr_createdAt": "2020-01-02T17:55:24Z", "pr_url": "https://github.com/apache/cloudstack/pull/3794", "timeline": [{"oid": "a9c85747a281bc645e1ca04f7a4d0a9b624450ec", "url": "https://github.com/apache/cloudstack/commit/a9c85747a281bc645e1ca04f7a4d0a9b624450ec", "message": "create vags per cluster", "committedDate": "2020-01-02T16:44:08Z", "type": "commit"}, {"oid": "fdfe871c9a7225bf0e6f51c1e24faaa7ad90db25", "url": "https://github.com/apache/cloudstack/commit/fdfe871c9a7225bf0e6f51c1e24faaa7ad90db25", "message": "vagname in solidfire utils vag object", "committedDate": "2020-01-02T20:22:39Z", "type": "commit"}, {"oid": "b2b4b91cb1e82487d493ac4300745a83d1fa5ed6", "url": "https://github.com/apache/cloudstack/commit/b2b4b91cb1e82487d493ac4300745a83d1fa5ed6", "message": "fix string compare", "committedDate": "2020-01-06T15:28:09Z", "type": "commit"}, {"oid": "3eec7d0472f9fd196fd0ff8e74762a73d7df89b6", "url": "https://github.com/apache/cloudstack/commit/3eec7d0472f9fd196fd0ff8e74762a73d7df89b6", "message": "refactor to make use of existing map", "committedDate": "2020-01-09T19:24:34Z", "type": "commit"}, {"oid": "550cb3bbcefe3b7f8aff8e6852b481be79e31663", "url": "https://github.com/apache/cloudstack/commit/550cb3bbcefe3b7f8aff8e6852b481be79e31663", "message": "fix typos", "committedDate": "2020-01-09T20:03:36Z", "type": "commit"}, {"oid": "849ef467a8828a4a225063140d5f2bcef8aea4b4", "url": "https://github.com/apache/cloudstack/commit/849ef467a8828a4a225063140d5f2bcef8aea4b4", "message": "rebuild vag to iqn map after creating cluster vag", "committedDate": "2020-01-09T22:05:57Z", "type": "commit"}, {"oid": "cce1cf24bf28f056be93f0bfe1da4cd28fe58af6", "url": "https://github.com/apache/cloudstack/commit/cce1cf24bf28f056be93f0bfe1da4cd28fe58af6", "message": "refactor loop using java 8 stream api", "committedDate": "2020-01-09T22:19:23Z", "type": "commit"}, {"oid": "ef939abc108ff1f3ef3c8e9a5f13363fe2addfab", "url": "https://github.com/apache/cloudstack/commit/ef939abc108ff1f3ef3c8e9a5f13363fe2addfab", "message": "update null entry in vag to iqn map", "committedDate": "2020-01-13T16:27:04Z", "type": "commit"}, {"oid": "fb89f26c5266e15335b93ee34904f50022e664e6", "url": "https://github.com/apache/cloudstack/commit/fb89f26c5266e15335b93ee34904f50022e664e6", "message": "remove null vag to iqn mapping when creating cluster id vag", "committedDate": "2020-01-13T18:48:24Z", "type": "commit"}, {"oid": "e657f867ef1f8f3f9b7b511f0f70cb6dff1f8b6c", "url": "https://github.com/apache/cloudstack/commit/e657f867ef1f8f3f9b7b511f0f70cb6dff1f8b6c", "message": "add initiator to sf vag when adding hosts", "committedDate": "2020-01-13T20:35:59Z", "type": "commit"}, {"oid": "42af5ebf42969bc54b6895778fb410ed9eda4c91", "url": "https://github.com/apache/cloudstack/commit/42af5ebf42969bc54b6895778fb410ed9eda4c91", "message": "use cluster uuid instead of cluster id and refactor", "committedDate": "2020-01-14T22:01:25Z", "type": "commit"}, {"oid": "d1383f636661d97c2634d257f26f00e5b5859571", "url": "https://github.com/apache/cloudstack/commit/d1383f636661d97c2634d257f26f00e5b5859571", "message": "update null entry in vagtoiqnmap", "committedDate": "2020-01-16T15:38:14Z", "type": "commit"}, {"oid": "6a0f917aed2c503cc47e10d7cf3e4d4c8cf5b313", "url": "https://github.com/apache/cloudstack/commit/6a0f917aed2c503cc47e10d7cf3e4d4c8cf5b313", "message": "update sfvag list after creating new vag", "committedDate": "2020-01-16T16:54:44Z", "type": "commit"}, {"oid": "8dfd308f70d07c3b2330c1cc7fe2abc1886d5139", "url": "https://github.com/apache/cloudstack/commit/8dfd308f70d07c3b2330c1cc7fe2abc1886d5139", "message": "pass clusterDao to handleVagForHost", "committedDate": "2020-01-16T17:53:55Z", "type": "commit"}, {"oid": "99d0ce73047b8fb9c18ddf1b97d147cfdd4ce982", "url": "https://github.com/apache/cloudstack/commit/99d0ce73047b8fb9c18ddf1b97d147cfdd4ce982", "message": "check if initiator is not already added to the vag", "committedDate": "2020-01-16T18:54:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzNDkzNQ==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r372334935", "bodyText": "can you make this a method with a good descriptive name?", "author": "DaanHoogland", "createdAt": "2020-01-29T11:42:58Z", "path": "plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java", "diffHunk": "@@ -513,12 +513,18 @@ public static void hostAddedToCluster(long hostId, long clusterId, String storag\n     // creating a new VAG won't exceed 4 VAGs for the computer cluster).\n     // If none of the hosts in the cluster are in a VAG, then leave this host out of a VAG.\n     // Place applicable volume IDs in VAG, if need be (account of volume starts with SF_CS_ACCOUNT_PREFIX).\n-    private static void handleVagForHost(SolidFireUtil.SolidFireConnection sfConnection, List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao) {\n+    private static void handleVagForHost(SolidFireUtil.SolidFireConnection sfConnection, List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao, ClusterDao clusterDao) {\n         List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n \n         if (hostVOs != null) {\n             int numVags = 0;\n \n+            String clusterUuId = clusterDao.findById(host.getClusterId()).getUuid();\n+            SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n+            if (sfVagMatchingClusterId != null && sfVagMatchingClusterId.getInitiators().length < MAX_NUM_INITIATORS_PER_VAG) {\n+                addInitiatorsToSolidFireVag(sfConnection, sfVagMatchingClusterId.getId(), new String[]{host.getStorageUrl()});\n+            }", "originalCommit": "99d0ce73047b8fb9c18ddf1b97d147cfdd4ce982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f77ea000048071089222313ba23d95813a53b7b", "chunk": "diff --git a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\nindex 84f45aa576..e33a80ad04 100644\n--- a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n+++ b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n\n@@ -519,11 +519,7 @@ public class SolidFireUtil {\n         if (hostVOs != null) {\n             int numVags = 0;\n \n-            String clusterUuId = clusterDao.findById(host.getClusterId()).getUuid();\n-            SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-            if (sfVagMatchingClusterId != null && sfVagMatchingClusterId.getInitiators().length < MAX_NUM_INITIATORS_PER_VAG) {\n-                addInitiatorsToSolidFireVag(sfConnection, sfVagMatchingClusterId.getId(), new String[]{host.getStorageUrl()});\n-            }\n+            addInitiatorsToExistingVag(clusterDao, host, sfVags, sfConnection);\n \n             Collections.shuffle(hostVOs, RANDOM);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzNTUzMQ==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r372335531", "bodyText": "\"Create cluster VAG if doesnt exist\", would make for a nice method name ;) CreateClusterVAGIfDoesntExist(); ;)", "author": "DaanHoogland", "createdAt": "2020-01-29T11:44:18Z", "path": "plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java", "diffHunk": "@@ -692,39 +699,63 @@ public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnect\n             throw new CloudRuntimeException(errMsg);\n         }\n \n+        // Get list of VAGs from solidfire\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n \n-        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = new HashMap<>();\n+        // Populate vag to iqn(host) map\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagtoIQNMap(hosts, sfVags);\n \n-        for (HostVO hostVO : hosts) {\n-            String iqn = hostVO.getStorageUrl();\n+        // throw exception if more than 4 VAGs\n+        if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n+            throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n+        }\n \n-            SolidFireUtil.SolidFireVag sfVag = getVolumeAccessGroup(iqn, sfVags);\n+        if (sfVagToIqnsMap.containsKey(null)) {\n \n-            List<String> iqnsInVag = sfVagToIqnsMap.computeIfAbsent(sfVag, k -> new ArrayList<>());\n+            //Check if cluster VAG exists\n+            SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n \n-            iqnsInVag.add(iqn);\n-        }\n+            if (sfVagMatchingClusterId == null) {\n+                // Create cluster VAG if doesnt exist\n+                LOGGER.info(\"Creating volume access group CloudStack-\"+clusterUuId);\n+                SolidFireUtil.createVag(sfConnection, \"CloudStack-\"+clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[] { sfVolumeId });\n+                sfVags = SolidFireUtil.getAllVags(sfConnection);\n+                sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n+            }", "originalCommit": "99d0ce73047b8fb9c18ddf1b97d147cfdd4ce982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f77ea000048071089222313ba23d95813a53b7b", "chunk": "diff --git a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\nindex 84f45aa576..e33a80ad04 100644\n--- a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n+++ b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n\n@@ -698,49 +702,48 @@ public class SolidFireUtil {\n \n             throw new CloudRuntimeException(errMsg);\n         }\n-\n-        // Get list of VAGs from solidfire\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n-\n-        // Populate vag to iqn(host) map\n-        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagtoIQNMap(hosts, sfVags);\n-\n-        // throw exception if more than 4 VAGs\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagToIQNMap(hosts, sfVags);\n         if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n             throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n         }\n-\n         if (sfVagToIqnsMap.containsKey(null)) {\n+            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n+        }\n+        addVoulumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n+    }\n \n-            //Check if cluster VAG exists\n-            SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-\n-            if (sfVagMatchingClusterId == null) {\n-                // Create cluster VAG if doesnt exist\n-                LOGGER.info(\"Creating volume access group CloudStack-\"+clusterUuId);\n-                SolidFireUtil.createVag(sfConnection, \"CloudStack-\"+clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[] { sfVolumeId });\n-                sfVags = SolidFireUtil.getAllVags(sfConnection);\n-                sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-            }\n+    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInsfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n+        SolidFireUtil.SolidFireVag sfVagMatchingClusterId = createClusterVagIfDoesntExist(sfVags, sfConnection, clusterUuId, sfVagToIqnsMap, sfVolumeId);\n+        sfVagToIqnsMap.put(sfVagMatchingClusterId, sfVagToIqnsMap.get(null));\n+        sfVagToIqnsMap.remove(null);\n+        return sfVagToIqnsMap;\n+    }\n \n-            //update null entry in vag to IQN Map\n-            sfVagToIqnsMap.put(sfVagMatchingClusterId,sfVagToIqnsMap.get(null));\n-            sfVagToIqnsMap.remove(null);\n+    private static SolidFireVag createClusterVagIfDoesntExist(List<SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap, long sfVolumeId) {\n+        SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\" + clusterUuId)).findFirst().orElse(null);\n+        if (sfVagMatchingClusterId == null) {\n+            LOGGER.info(\"Creating volume access group CloudStack-\" + clusterUuId);\n+            SolidFireUtil.createVag(sfConnection, \"CloudStack-\" + clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[]{sfVolumeId});\n+            sfVags = SolidFireUtil.getAllVags(sfConnection);\n+            return sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\" + clusterUuId)).findFirst().orElse(null);\n+        }else{\n+            return sfVagMatchingClusterId;\n         }\n+    }\n \n-\n-        // add volumeId to each VAG if not already present\n-        for (SolidFireUtil.SolidFireVag sfVag : sfVagToIqnsMap.keySet()) {\n+    private static void addVoulumestoVagIfNotPresent(Set<SolidFireUtil.SolidFireVag> sfVagSet, long sfVolumeId, SolidFireConnection sfConnection){\n+        for (SolidFireUtil.SolidFireVag sfVag : sfVagSet) {\n             if (sfVag != null) {\n                 if (!SolidFireUtil.isVolumeIdInSfVag(sfVolumeId, sfVag)) {\n                     SolidFireUtil.addVolumeIdsToSolidFireVag(sfConnection, sfVag.getId(), new Long[] { sfVolumeId });\n                 }\n             }\n-\n         }\n     }\n \n-    public static Map<SolidFireVag,List<String>> buildVagtoIQNMap(List<HostVO> hosts, List<SolidFireVag> sfVags) {\n+\n+    private static Map<SolidFireVag,List<String>> buildVagToIQNMap(List<HostVO> hosts, List<SolidFireVag> sfVags) {\n \n         Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = new HashMap<>();\n         for (HostVO hostVO : hosts) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzNTg4Nw==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r372335887", "bodyText": "This comment is a good reason to factor the next bit code out for cleanup.", "author": "DaanHoogland", "createdAt": "2020-01-29T11:45:11Z", "path": "plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java", "diffHunk": "@@ -692,39 +699,63 @@ public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnect\n             throw new CloudRuntimeException(errMsg);\n         }\n \n+        // Get list of VAGs from solidfire\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n \n-        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = new HashMap<>();\n+        // Populate vag to iqn(host) map\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagtoIQNMap(hosts, sfVags);\n \n-        for (HostVO hostVO : hosts) {\n-            String iqn = hostVO.getStorageUrl();\n+        // throw exception if more than 4 VAGs\n+        if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n+            throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n+        }\n \n-            SolidFireUtil.SolidFireVag sfVag = getVolumeAccessGroup(iqn, sfVags);\n+        if (sfVagToIqnsMap.containsKey(null)) {\n \n-            List<String> iqnsInVag = sfVagToIqnsMap.computeIfAbsent(sfVag, k -> new ArrayList<>());\n+            //Check if cluster VAG exists\n+            SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n \n-            iqnsInVag.add(iqn);\n-        }\n+            if (sfVagMatchingClusterId == null) {\n+                // Create cluster VAG if doesnt exist\n+                LOGGER.info(\"Creating volume access group CloudStack-\"+clusterUuId);\n+                SolidFireUtil.createVag(sfConnection, \"CloudStack-\"+clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[] { sfVolumeId });\n+                sfVags = SolidFireUtil.getAllVags(sfConnection);\n+                sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n+            }\n \n-        if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n-            throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n+            //update null entry in vag to IQN Map\n+            sfVagToIqnsMap.put(sfVagMatchingClusterId,sfVagToIqnsMap.get(null));\n+            sfVagToIqnsMap.remove(null);\n         }\n \n+\n+        // add volumeId to each VAG if not already present", "originalCommit": "99d0ce73047b8fb9c18ddf1b97d147cfdd4ce982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f77ea000048071089222313ba23d95813a53b7b", "chunk": "diff --git a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\nindex 84f45aa576..e33a80ad04 100644\n--- a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n+++ b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n\n@@ -698,49 +702,48 @@ public class SolidFireUtil {\n \n             throw new CloudRuntimeException(errMsg);\n         }\n-\n-        // Get list of VAGs from solidfire\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n-\n-        // Populate vag to iqn(host) map\n-        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagtoIQNMap(hosts, sfVags);\n-\n-        // throw exception if more than 4 VAGs\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagToIQNMap(hosts, sfVags);\n         if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n             throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n         }\n-\n         if (sfVagToIqnsMap.containsKey(null)) {\n+            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n+        }\n+        addVoulumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n+    }\n \n-            //Check if cluster VAG exists\n-            SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-\n-            if (sfVagMatchingClusterId == null) {\n-                // Create cluster VAG if doesnt exist\n-                LOGGER.info(\"Creating volume access group CloudStack-\"+clusterUuId);\n-                SolidFireUtil.createVag(sfConnection, \"CloudStack-\"+clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[] { sfVolumeId });\n-                sfVags = SolidFireUtil.getAllVags(sfConnection);\n-                sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-            }\n+    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInsfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n+        SolidFireUtil.SolidFireVag sfVagMatchingClusterId = createClusterVagIfDoesntExist(sfVags, sfConnection, clusterUuId, sfVagToIqnsMap, sfVolumeId);\n+        sfVagToIqnsMap.put(sfVagMatchingClusterId, sfVagToIqnsMap.get(null));\n+        sfVagToIqnsMap.remove(null);\n+        return sfVagToIqnsMap;\n+    }\n \n-            //update null entry in vag to IQN Map\n-            sfVagToIqnsMap.put(sfVagMatchingClusterId,sfVagToIqnsMap.get(null));\n-            sfVagToIqnsMap.remove(null);\n+    private static SolidFireVag createClusterVagIfDoesntExist(List<SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap, long sfVolumeId) {\n+        SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\" + clusterUuId)).findFirst().orElse(null);\n+        if (sfVagMatchingClusterId == null) {\n+            LOGGER.info(\"Creating volume access group CloudStack-\" + clusterUuId);\n+            SolidFireUtil.createVag(sfConnection, \"CloudStack-\" + clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[]{sfVolumeId});\n+            sfVags = SolidFireUtil.getAllVags(sfConnection);\n+            return sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\" + clusterUuId)).findFirst().orElse(null);\n+        }else{\n+            return sfVagMatchingClusterId;\n         }\n+    }\n \n-\n-        // add volumeId to each VAG if not already present\n-        for (SolidFireUtil.SolidFireVag sfVag : sfVagToIqnsMap.keySet()) {\n+    private static void addVoulumestoVagIfNotPresent(Set<SolidFireUtil.SolidFireVag> sfVagSet, long sfVolumeId, SolidFireConnection sfConnection){\n+        for (SolidFireUtil.SolidFireVag sfVag : sfVagSet) {\n             if (sfVag != null) {\n                 if (!SolidFireUtil.isVolumeIdInSfVag(sfVolumeId, sfVag)) {\n                     SolidFireUtil.addVolumeIdsToSolidFireVag(sfConnection, sfVag.getId(), new Long[] { sfVolumeId });\n                 }\n             }\n-\n         }\n     }\n \n-    public static Map<SolidFireVag,List<String>> buildVagtoIQNMap(List<HostVO> hosts, List<SolidFireVag> sfVags) {\n+\n+    private static Map<SolidFireVag,List<String>> buildVagToIQNMap(List<HostVO> hosts, List<SolidFireVag> sfVags) {\n \n         Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = new HashMap<>();\n         for (HostVO hostVO : hosts) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MTA4NA==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r372341084", "bodyText": "great name of method call below makes this comment obsolete", "author": "DaanHoogland", "createdAt": "2020-01-29T11:57:39Z", "path": "plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java", "diffHunk": "@@ -692,39 +699,63 @@ public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnect\n             throw new CloudRuntimeException(errMsg);\n         }\n \n+        // Get list of VAGs from solidfire\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n \n-        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = new HashMap<>();\n+        // Populate vag to iqn(host) map", "originalCommit": "99d0ce73047b8fb9c18ddf1b97d147cfdd4ce982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f77ea000048071089222313ba23d95813a53b7b", "chunk": "diff --git a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\nindex 84f45aa576..e33a80ad04 100644\n--- a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n+++ b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n\n@@ -698,49 +702,48 @@ public class SolidFireUtil {\n \n             throw new CloudRuntimeException(errMsg);\n         }\n-\n-        // Get list of VAGs from solidfire\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n-\n-        // Populate vag to iqn(host) map\n-        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagtoIQNMap(hosts, sfVags);\n-\n-        // throw exception if more than 4 VAGs\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagToIQNMap(hosts, sfVags);\n         if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n             throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n         }\n-\n         if (sfVagToIqnsMap.containsKey(null)) {\n+            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n+        }\n+        addVoulumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n+    }\n \n-            //Check if cluster VAG exists\n-            SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-\n-            if (sfVagMatchingClusterId == null) {\n-                // Create cluster VAG if doesnt exist\n-                LOGGER.info(\"Creating volume access group CloudStack-\"+clusterUuId);\n-                SolidFireUtil.createVag(sfConnection, \"CloudStack-\"+clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[] { sfVolumeId });\n-                sfVags = SolidFireUtil.getAllVags(sfConnection);\n-                sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-            }\n+    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInsfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n+        SolidFireUtil.SolidFireVag sfVagMatchingClusterId = createClusterVagIfDoesntExist(sfVags, sfConnection, clusterUuId, sfVagToIqnsMap, sfVolumeId);\n+        sfVagToIqnsMap.put(sfVagMatchingClusterId, sfVagToIqnsMap.get(null));\n+        sfVagToIqnsMap.remove(null);\n+        return sfVagToIqnsMap;\n+    }\n \n-            //update null entry in vag to IQN Map\n-            sfVagToIqnsMap.put(sfVagMatchingClusterId,sfVagToIqnsMap.get(null));\n-            sfVagToIqnsMap.remove(null);\n+    private static SolidFireVag createClusterVagIfDoesntExist(List<SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap, long sfVolumeId) {\n+        SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\" + clusterUuId)).findFirst().orElse(null);\n+        if (sfVagMatchingClusterId == null) {\n+            LOGGER.info(\"Creating volume access group CloudStack-\" + clusterUuId);\n+            SolidFireUtil.createVag(sfConnection, \"CloudStack-\" + clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[]{sfVolumeId});\n+            sfVags = SolidFireUtil.getAllVags(sfConnection);\n+            return sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\" + clusterUuId)).findFirst().orElse(null);\n+        }else{\n+            return sfVagMatchingClusterId;\n         }\n+    }\n \n-\n-        // add volumeId to each VAG if not already present\n-        for (SolidFireUtil.SolidFireVag sfVag : sfVagToIqnsMap.keySet()) {\n+    private static void addVoulumestoVagIfNotPresent(Set<SolidFireUtil.SolidFireVag> sfVagSet, long sfVolumeId, SolidFireConnection sfConnection){\n+        for (SolidFireUtil.SolidFireVag sfVag : sfVagSet) {\n             if (sfVag != null) {\n                 if (!SolidFireUtil.isVolumeIdInSfVag(sfVolumeId, sfVag)) {\n                     SolidFireUtil.addVolumeIdsToSolidFireVag(sfConnection, sfVag.getId(), new Long[] { sfVolumeId });\n                 }\n             }\n-\n         }\n     }\n \n-    public static Map<SolidFireVag,List<String>> buildVagtoIQNMap(List<HostVO> hosts, List<SolidFireVag> sfVags) {\n+\n+    private static Map<SolidFireVag,List<String>> buildVagToIQNMap(List<HostVO> hosts, List<SolidFireVag> sfVags) {\n \n         Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = new HashMap<>();\n         for (HostVO hostVO : hosts) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MzA2OQ==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r372343069", "bodyText": "in this case the code below is more descriptive than the comment above.", "author": "DaanHoogland", "createdAt": "2020-01-29T12:02:20Z", "path": "plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java", "diffHunk": "@@ -692,39 +699,63 @@ public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnect\n             throw new CloudRuntimeException(errMsg);\n         }\n \n+        // Get list of VAGs from solidfire\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n \n-        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = new HashMap<>();\n+        // Populate vag to iqn(host) map\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagtoIQNMap(hosts, sfVags);\n \n-        for (HostVO hostVO : hosts) {\n-            String iqn = hostVO.getStorageUrl();\n+        // throw exception if more than 4 VAGs", "originalCommit": "99d0ce73047b8fb9c18ddf1b97d147cfdd4ce982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f77ea000048071089222313ba23d95813a53b7b", "chunk": "diff --git a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\nindex 84f45aa576..e33a80ad04 100644\n--- a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n+++ b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n\n@@ -698,49 +702,48 @@ public class SolidFireUtil {\n \n             throw new CloudRuntimeException(errMsg);\n         }\n-\n-        // Get list of VAGs from solidfire\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n-\n-        // Populate vag to iqn(host) map\n-        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagtoIQNMap(hosts, sfVags);\n-\n-        // throw exception if more than 4 VAGs\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagToIQNMap(hosts, sfVags);\n         if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n             throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n         }\n-\n         if (sfVagToIqnsMap.containsKey(null)) {\n+            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n+        }\n+        addVoulumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n+    }\n \n-            //Check if cluster VAG exists\n-            SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-\n-            if (sfVagMatchingClusterId == null) {\n-                // Create cluster VAG if doesnt exist\n-                LOGGER.info(\"Creating volume access group CloudStack-\"+clusterUuId);\n-                SolidFireUtil.createVag(sfConnection, \"CloudStack-\"+clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[] { sfVolumeId });\n-                sfVags = SolidFireUtil.getAllVags(sfConnection);\n-                sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\"+clusterUuId)).findFirst().orElse(null);\n-            }\n+    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInsfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n+        SolidFireUtil.SolidFireVag sfVagMatchingClusterId = createClusterVagIfDoesntExist(sfVags, sfConnection, clusterUuId, sfVagToIqnsMap, sfVolumeId);\n+        sfVagToIqnsMap.put(sfVagMatchingClusterId, sfVagToIqnsMap.get(null));\n+        sfVagToIqnsMap.remove(null);\n+        return sfVagToIqnsMap;\n+    }\n \n-            //update null entry in vag to IQN Map\n-            sfVagToIqnsMap.put(sfVagMatchingClusterId,sfVagToIqnsMap.get(null));\n-            sfVagToIqnsMap.remove(null);\n+    private static SolidFireVag createClusterVagIfDoesntExist(List<SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap, long sfVolumeId) {\n+        SolidFireVag sfVagMatchingClusterId = sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\" + clusterUuId)).findFirst().orElse(null);\n+        if (sfVagMatchingClusterId == null) {\n+            LOGGER.info(\"Creating volume access group CloudStack-\" + clusterUuId);\n+            SolidFireUtil.createVag(sfConnection, \"CloudStack-\" + clusterUuId, sfVagToIqnsMap.get(null).toArray(new String[0]), new long[]{sfVolumeId});\n+            sfVags = SolidFireUtil.getAllVags(sfConnection);\n+            return sfVags.stream().filter(vag -> vag.getName().equals(\"CloudStack-\" + clusterUuId)).findFirst().orElse(null);\n+        }else{\n+            return sfVagMatchingClusterId;\n         }\n+    }\n \n-\n-        // add volumeId to each VAG if not already present\n-        for (SolidFireUtil.SolidFireVag sfVag : sfVagToIqnsMap.keySet()) {\n+    private static void addVoulumestoVagIfNotPresent(Set<SolidFireUtil.SolidFireVag> sfVagSet, long sfVolumeId, SolidFireConnection sfConnection){\n+        for (SolidFireUtil.SolidFireVag sfVag : sfVagSet) {\n             if (sfVag != null) {\n                 if (!SolidFireUtil.isVolumeIdInSfVag(sfVolumeId, sfVag)) {\n                     SolidFireUtil.addVolumeIdsToSolidFireVag(sfConnection, sfVag.getId(), new Long[] { sfVolumeId });\n                 }\n             }\n-\n         }\n     }\n \n-    public static Map<SolidFireVag,List<String>> buildVagtoIQNMap(List<HostVO> hosts, List<SolidFireVag> sfVags) {\n+\n+    private static Map<SolidFireVag,List<String>> buildVagToIQNMap(List<HostVO> hosts, List<SolidFireVag> sfVags) {\n \n         Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = new HashMap<>();\n         for (HostVO hostVO : hosts) {\n"}}, {"oid": "9f77ea000048071089222313ba23d95813a53b7b", "url": "https://github.com/apache/cloudstack/commit/9f77ea000048071089222313ba23d95813a53b7b", "message": "factor logic into methods", "committedDate": "2020-01-29T19:16:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNDI0NA==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r373234244", "bodyText": "\"Voulumes\" should be \"Volumes\"", "author": "mike-tutkowski", "createdAt": "2020-01-30T22:44:15Z", "path": "plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java", "diffHunk": "@@ -683,19 +694,58 @@ private static SolidFireVag getVagForRandomHostInCluster(List<SolidFireUtil.Soli\n         return null;\n     }\n \n-    public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnection, long sfVolumeId, List<HostVO> hosts) {\n+    public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnection, long sfVolumeId, List<HostVO> hosts, String clusterUuId) {\n         if (!SolidFireUtil.hostsSupport_iScsi(hosts)) {\n             String errMsg = \"Not all hosts in the compute cluster support iSCSI.\";\n \n             LOGGER.warn(errMsg);\n \n             throw new CloudRuntimeException(errMsg);\n         }\n-\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagToIQNMap(hosts, sfVags);\n+        if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n+            throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n+        }\n+        if (sfVagToIqnsMap.containsKey(null)) {\n+            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n+        }\n+        addVoulumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);", "originalCommit": "9f77ea000048071089222313ba23d95813a53b7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31cc8af1db475682ca9cffd42f647e776ba3f3e8", "chunk": "diff --git a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\nindex e33a80ad04..ae314cdb8c 100644\n--- a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n+++ b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n\n@@ -708,12 +708,12 @@ public class SolidFireUtil {\n             throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n         }\n         if (sfVagToIqnsMap.containsKey(null)) {\n-            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n+            sfVagToIqnsMap = updateNullKeyInSfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n         }\n-        addVoulumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n+        addVolumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n     }\n \n-    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInsfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n+    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInSfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n         SolidFireUtil.SolidFireVag sfVagMatchingClusterId = createClusterVagIfDoesntExist(sfVags, sfConnection, clusterUuId, sfVagToIqnsMap, sfVolumeId);\n         sfVagToIqnsMap.put(sfVagMatchingClusterId, sfVagToIqnsMap.get(null));\n         sfVagToIqnsMap.remove(null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNDY2Mw==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r373234663", "bodyText": "Do we want to pass in a List still if we can now retrieve that info from the cluster DAO using the cluster UUID?", "author": "mike-tutkowski", "createdAt": "2020-01-30T22:45:30Z", "path": "plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java", "diffHunk": "@@ -683,19 +694,58 @@ private static SolidFireVag getVagForRandomHostInCluster(List<SolidFireUtil.Soli\n         return null;\n     }\n \n-    public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnection, long sfVolumeId, List<HostVO> hosts) {\n+    public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnection, long sfVolumeId, List<HostVO> hosts, String clusterUuId) {", "originalCommit": "9f77ea000048071089222313ba23d95813a53b7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NDkxOQ==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r374164919", "bodyText": "we need the list of hosts to build the vag to iqn map, we need the hostDao to get the list of hosts. I think it is better to just pass the list of hosts in this case.", "author": "skattoju4", "createdAt": "2020-02-03T15:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNDY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMjIwNA==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r374402204", "bodyText": "Either way...my initial thoughts were that you could derive the list of hosts from using the cluster ID with the cluster DAO.", "author": "mike-tutkowski", "createdAt": "2020-02-03T23:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNDY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "31cc8af1db475682ca9cffd42f647e776ba3f3e8", "chunk": "diff --git a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\nindex e33a80ad04..ae314cdb8c 100644\n--- a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n+++ b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n\n@@ -708,12 +708,12 @@ public class SolidFireUtil {\n             throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n         }\n         if (sfVagToIqnsMap.containsKey(null)) {\n-            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n+            sfVagToIqnsMap = updateNullKeyInSfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n         }\n-        addVoulumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n+        addVolumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n     }\n \n-    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInsfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n+    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInSfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n         SolidFireUtil.SolidFireVag sfVagMatchingClusterId = createClusterVagIfDoesntExist(sfVags, sfConnection, clusterUuId, sfVagToIqnsMap, sfVolumeId);\n         sfVagToIqnsMap.put(sfVagMatchingClusterId, sfVagToIqnsMap.get(null));\n         sfVagToIqnsMap.remove(null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNTQwNA==", "url": "https://github.com/apache/cloudstack/pull/3794#discussion_r373235404", "bodyText": "Might want to maintain camel case here:\n\"updateNullKeyInsfVagToIqnsMap\" -> \"updateNullKeyInSfVagToIqnsMap\"", "author": "mike-tutkowski", "createdAt": "2020-01-30T22:47:31Z", "path": "plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java", "diffHunk": "@@ -683,19 +694,58 @@ private static SolidFireVag getVagForRandomHostInCluster(List<SolidFireUtil.Soli\n         return null;\n     }\n \n-    public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnection, long sfVolumeId, List<HostVO> hosts) {\n+    public static void placeVolumeInVolumeAccessGroups(SolidFireConnection sfConnection, long sfVolumeId, List<HostVO> hosts, String clusterUuId) {\n         if (!SolidFireUtil.hostsSupport_iScsi(hosts)) {\n             String errMsg = \"Not all hosts in the compute cluster support iSCSI.\";\n \n             LOGGER.warn(errMsg);\n \n             throw new CloudRuntimeException(errMsg);\n         }\n-\n         List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n+        Map<SolidFireUtil.SolidFireVag, List<String>> sfVagToIqnsMap = buildVagToIQNMap(hosts, sfVags);\n+        if (sfVagToIqnsMap.size() > MAX_NUM_VAGS_PER_VOLUME) {\n+            throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n+        }\n+        if (sfVagToIqnsMap.containsKey(null)) {\n+            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);", "originalCommit": "9f77ea000048071089222313ba23d95813a53b7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31cc8af1db475682ca9cffd42f647e776ba3f3e8", "chunk": "diff --git a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\nindex e33a80ad04..ae314cdb8c 100644\n--- a/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n+++ b/plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java\n\n@@ -708,12 +708,12 @@ public class SolidFireUtil {\n             throw new CloudRuntimeException(\"A SolidFire volume can be in at most four volume access groups simultaneously.\");\n         }\n         if (sfVagToIqnsMap.containsKey(null)) {\n-            sfVagToIqnsMap = updateNullKeyInsfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n+            sfVagToIqnsMap = updateNullKeyInSfVagToIqnsMap(sfVagToIqnsMap, sfVags, sfConnection, clusterUuId, sfVolumeId);\n         }\n-        addVoulumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n+        addVolumestoVagIfNotPresent(sfVagToIqnsMap.keySet(), sfVolumeId, sfConnection);\n     }\n \n-    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInsfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n+    private static Map<SolidFireUtil.SolidFireVag, List<String>> updateNullKeyInSfVagToIqnsMap(Map<SolidFireUtil.SolidFireVag,List<String>> sfVagToIqnsMap, List <SolidFireUtil.SolidFireVag> sfVags, SolidFireConnection sfConnection, String clusterUuId, long sfVolumeId){\n         SolidFireUtil.SolidFireVag sfVagMatchingClusterId = createClusterVagIfDoesntExist(sfVags, sfConnection, clusterUuId, sfVagToIqnsMap, sfVolumeId);\n         sfVagToIqnsMap.put(sfVagMatchingClusterId, sfVagToIqnsMap.get(null));\n         sfVagToIqnsMap.remove(null);\n"}}, {"oid": "31cc8af1db475682ca9cffd42f647e776ba3f3e8", "url": "https://github.com/apache/cloudstack/commit/31cc8af1db475682ca9cffd42f647e776ba3f3e8", "message": "fix typo and camel case", "committedDate": "2020-02-03T15:26:11Z", "type": "commit"}, {"oid": "e6714714ca68677f6d452163325c6adb31460c6f", "url": "https://github.com/apache/cloudstack/commit/e6714714ca68677f6d452163325c6adb31460c6f", "message": "fix listing clusters by zone id", "committedDate": "2020-05-15T17:57:40Z", "type": "commit"}]}