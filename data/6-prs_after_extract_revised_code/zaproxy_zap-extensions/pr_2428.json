{"pr_number": 2428, "pr_title": "wappalyzer: Persist enable state", "pr_createdAt": "2020-06-05T23:39:49Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2428", "timeline": [{"oid": "ca1a17bc61b32dca823c80193454b32cb93cc70d", "url": "https://github.com/zaproxy/zap-extensions/commit/ca1a17bc61b32dca823c80193454b32cb93cc70d", "message": "wappalyzer: Persist enable state\n\n* ExtensionWappalyzer - Add necessary variables and functionality to\nhandle enable state.\n* TechPanel - The enable toggle is associate with the param (enable\nstate).\n* WappalyzerParam - New class extending AbstractParam to handle the\nenable state.\n* wappalyzer.html - Updated help content to contain a short bit about\nthe toggle button and persistence.\n* CHANGELOG - Added change entry.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-06-07T12:25:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MTc1Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2428#discussion_r437281752", "bodyText": "The config should not be explicitly saved (it already is when ZAP shuts down).", "author": "thc202", "createdAt": "2020-06-09T09:44:36Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java", "diffHunk": "@@ -138,6 +144,34 @@ public void hook(ExtensionHook extensionHook) {\n         extPScan.addPassiveScanner(passiveScanner);\n     }\n \n+    @Override\n+    public void optionsLoaded() {\n+        super.optionsLoaded();\n+\n+        setWappalyzer(wappalyzerParam.isEnabled());\n+    }\n+\n+    void setWappalyzer(boolean enabled) {\n+        if (this.enabled == enabled) {\n+            return;\n+        }\n+        this.enabled = enabled;\n+\n+        wappalyzerParam.setEnabled(enabled);\n+        getPassiveScanner().setEnabled(enabled);\n+        try {\n+            wappalyzerParam.getConfig().save();", "originalCommit": "ca1a17bc61b32dca823c80193454b32cb93cc70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12bcb93182d7a4704995c15314f7709dc000dab0", "chunk": "diff --git a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java\nindex fddfdfa4d..3266287dc 100644\n--- a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java\n+++ b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java\n\n@@ -159,13 +158,10 @@ public class ExtensionWappalyzer extends ExtensionAdaptor\n \n         wappalyzerParam.setEnabled(enabled);\n         getPassiveScanner().setEnabled(enabled);\n-        try {\n-            wappalyzerParam.getConfig().save();\n-        } catch (ConfigurationException e) {\n-            logger.error(e.getMessage(), e);\n-        }\n \n-        getTechPanel().getEnableToggleButton().setSelected(enabled);\n+        if (View.isInitialised()) {\n+            getTechPanel().getEnableToggleButton().setSelected(enabled);\n+        }\n     }\n \n     boolean isWappalyzerEnabled() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MTc3OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2428#discussion_r437281778", "bodyText": "Should have view check.", "author": "thc202", "createdAt": "2020-06-09T09:44:39Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java", "diffHunk": "@@ -138,6 +144,34 @@ public void hook(ExtensionHook extensionHook) {\n         extPScan.addPassiveScanner(passiveScanner);\n     }\n \n+    @Override\n+    public void optionsLoaded() {\n+        super.optionsLoaded();\n+\n+        setWappalyzer(wappalyzerParam.isEnabled());\n+    }\n+\n+    void setWappalyzer(boolean enabled) {\n+        if (this.enabled == enabled) {\n+            return;\n+        }\n+        this.enabled = enabled;\n+\n+        wappalyzerParam.setEnabled(enabled);\n+        getPassiveScanner().setEnabled(enabled);\n+        try {\n+            wappalyzerParam.getConfig().save();\n+        } catch (ConfigurationException e) {\n+            logger.error(e.getMessage(), e);\n+        }\n+\n+        getTechPanel().getEnableToggleButton().setSelected(enabled);", "originalCommit": "ca1a17bc61b32dca823c80193454b32cb93cc70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12bcb93182d7a4704995c15314f7709dc000dab0", "chunk": "diff --git a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java\nindex fddfdfa4d..3266287dc 100644\n--- a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java\n+++ b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java\n\n@@ -159,13 +158,10 @@ public class ExtensionWappalyzer extends ExtensionAdaptor\n \n         wappalyzerParam.setEnabled(enabled);\n         getPassiveScanner().setEnabled(enabled);\n-        try {\n-            wappalyzerParam.getConfig().save();\n-        } catch (ConfigurationException e) {\n-            logger.error(e.getMessage(), e);\n-        }\n \n-        getTechPanel().getEnableToggleButton().setSelected(enabled);\n+        if (View.isInitialised()) {\n+            getTechPanel().getEnableToggleButton().setSelected(enabled);\n+        }\n     }\n \n     boolean isWappalyzerEnabled() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MTg1Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2428#discussion_r437281857", "bodyText": "Extend VersionedAbstractParam, makes it easier to migrate options if/when needed.", "author": "thc202", "createdAt": "2020-06-09T09:44:46Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.wappalyzer;\n+\n+import org.apache.commons.configuration.ConversionException;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.common.AbstractParam;\n+\n+public class WappalyzerParam extends AbstractParam {", "originalCommit": "ca1a17bc61b32dca823c80193454b32cb93cc70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12bcb93182d7a4704995c15314f7709dc000dab0", "chunk": "diff --git a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\nindex 4c93867b4..789e2797f 100644\n--- a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\n+++ b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\n\n@@ -19,13 +19,17 @@\n  */\n package org.zaproxy.zap.extension.wappalyzer;\n \n-import org.apache.commons.configuration.ConversionException;\n-import org.apache.log4j.Logger;\n-import org.parosproxy.paros.common.AbstractParam;\n+import org.zaproxy.zap.common.VersionedAbstractParam;\n \n-public class WappalyzerParam extends AbstractParam {\n+public class WappalyzerParam extends VersionedAbstractParam {\n \n-    private static final Logger LOGGER = Logger.getLogger(WappalyzerParam.class);\n+    /**\n+     * The version of the configurations. Used to keep track of configurations changes between\n+     * releases, if updates are needed.\n+     *\n+     * <p>It only needs to be updated for configurations changes (not releases of the add-on).\n+     */\n+    private static final int PARAM_CURRENT_VERSION = 1;\n     /** The base configuration key for all \"wappalyzer\" configurations. */\n     private static final String PARAM_BASE_KEY = \"wappalyzer\";\n     /** The configuration key for the state of wappalyzer functionality. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MTg4NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2428#discussion_r437281885", "bodyText": "private", "author": "thc202", "createdAt": "2020-06-09T09:44:48Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.wappalyzer;\n+\n+import org.apache.commons.configuration.ConversionException;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.common.AbstractParam;\n+\n+public class WappalyzerParam extends AbstractParam {\n+\n+    private static final Logger LOGGER = Logger.getLogger(WappalyzerParam.class);\n+    /** The base configuration key for all \"wappalyzer\" configurations. */\n+    private static final String PARAM_BASE_KEY = \"wappalyzer\";\n+    /** The configuration key for the state of wappalyzer functionality. */\n+    private static final String PARAM_WAPPALYZER_STATE = PARAM_BASE_KEY + \".enabled\";\n+\n+    private static final boolean PARAM_WAPPALYZER_STATE_DEFAULT_VALUE = true;\n+\n+    boolean enabled;", "originalCommit": "ca1a17bc61b32dca823c80193454b32cb93cc70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12bcb93182d7a4704995c15314f7709dc000dab0", "chunk": "diff --git a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\nindex 4c93867b4..789e2797f 100644\n--- a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\n+++ b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\n\n@@ -19,13 +19,17 @@\n  */\n package org.zaproxy.zap.extension.wappalyzer;\n \n-import org.apache.commons.configuration.ConversionException;\n-import org.apache.log4j.Logger;\n-import org.parosproxy.paros.common.AbstractParam;\n+import org.zaproxy.zap.common.VersionedAbstractParam;\n \n-public class WappalyzerParam extends AbstractParam {\n+public class WappalyzerParam extends VersionedAbstractParam {\n \n-    private static final Logger LOGGER = Logger.getLogger(WappalyzerParam.class);\n+    /**\n+     * The version of the configurations. Used to keep track of configurations changes between\n+     * releases, if updates are needed.\n+     *\n+     * <p>It only needs to be updated for configurations changes (not releases of the add-on).\n+     */\n+    private static final int PARAM_CURRENT_VERSION = 1;\n     /** The base configuration key for all \"wappalyzer\" configurations. */\n     private static final String PARAM_BASE_KEY = \"wappalyzer\";\n     /** The configuration key for the state of wappalyzer functionality. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MTkxOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2428#discussion_r437281918", "bodyText": "Could use AbstractParam#getBoolean(String, boolean) which already handles conversion issues.", "author": "thc202", "createdAt": "2020-06-09T09:44:51Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.wappalyzer;\n+\n+import org.apache.commons.configuration.ConversionException;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.common.AbstractParam;\n+\n+public class WappalyzerParam extends AbstractParam {\n+\n+    private static final Logger LOGGER = Logger.getLogger(WappalyzerParam.class);\n+    /** The base configuration key for all \"wappalyzer\" configurations. */\n+    private static final String PARAM_BASE_KEY = \"wappalyzer\";\n+    /** The configuration key for the state of wappalyzer functionality. */\n+    private static final String PARAM_WAPPALYZER_STATE = PARAM_BASE_KEY + \".enabled\";\n+\n+    private static final boolean PARAM_WAPPALYZER_STATE_DEFAULT_VALUE = true;\n+\n+    boolean enabled;\n+\n+    @Override\n+    protected void parse() {\n+        try {\n+            enabled =\n+                    getConfig()\n+                            .getBoolean(", "originalCommit": "ca1a17bc61b32dca823c80193454b32cb93cc70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12bcb93182d7a4704995c15314f7709dc000dab0", "chunk": "diff --git a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\nindex 4c93867b4..789e2797f 100644\n--- a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\n+++ b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\n\n@@ -19,13 +19,17 @@\n  */\n package org.zaproxy.zap.extension.wappalyzer;\n \n-import org.apache.commons.configuration.ConversionException;\n-import org.apache.log4j.Logger;\n-import org.parosproxy.paros.common.AbstractParam;\n+import org.zaproxy.zap.common.VersionedAbstractParam;\n \n-public class WappalyzerParam extends AbstractParam {\n+public class WappalyzerParam extends VersionedAbstractParam {\n \n-    private static final Logger LOGGER = Logger.getLogger(WappalyzerParam.class);\n+    /**\n+     * The version of the configurations. Used to keep track of configurations changes between\n+     * releases, if updates are needed.\n+     *\n+     * <p>It only needs to be updated for configurations changes (not releases of the add-on).\n+     */\n+    private static final int PARAM_CURRENT_VERSION = 1;\n     /** The base configuration key for all \"wappalyzer\" configurations. */\n     private static final String PARAM_BASE_KEY = \"wappalyzer\";\n     /** The configuration key for the state of wappalyzer functionality. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MTk2Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2428#discussion_r437281962", "bodyText": "Inline in the above method?", "author": "thc202", "createdAt": "2020-06-09T09:44:55Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.wappalyzer;\n+\n+import org.apache.commons.configuration.ConversionException;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.common.AbstractParam;\n+\n+public class WappalyzerParam extends AbstractParam {\n+\n+    private static final Logger LOGGER = Logger.getLogger(WappalyzerParam.class);\n+    /** The base configuration key for all \"wappalyzer\" configurations. */\n+    private static final String PARAM_BASE_KEY = \"wappalyzer\";\n+    /** The configuration key for the state of wappalyzer functionality. */\n+    private static final String PARAM_WAPPALYZER_STATE = PARAM_BASE_KEY + \".enabled\";\n+\n+    private static final boolean PARAM_WAPPALYZER_STATE_DEFAULT_VALUE = true;\n+\n+    boolean enabled;\n+\n+    @Override\n+    protected void parse() {\n+        try {\n+            enabled =\n+                    getConfig()\n+                            .getBoolean(\n+                                    PARAM_WAPPALYZER_STATE, PARAM_WAPPALYZER_STATE_DEFAULT_VALUE);\n+        } catch (ConversionException e) {\n+            LOGGER.error(\"Error while loading the wappalyzer state: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    public void setEnabled(boolean enabled) {\n+        if (this.enabled != enabled) {\n+            this.enabled = enabled;\n+\n+            saveWappalyzerStateParam();\n+        }\n+    }\n+\n+    private void saveWappalyzerStateParam() {\n+        getConfig().setProperty(PARAM_WAPPALYZER_STATE, Boolean.valueOf(enabled));", "originalCommit": "ca1a17bc61b32dca823c80193454b32cb93cc70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12bcb93182d7a4704995c15314f7709dc000dab0", "chunk": "diff --git a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\nindex 4c93867b4..789e2797f 100644\n--- a/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\n+++ b/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerParam.java\n\n@@ -19,13 +19,17 @@\n  */\n package org.zaproxy.zap.extension.wappalyzer;\n \n-import org.apache.commons.configuration.ConversionException;\n-import org.apache.log4j.Logger;\n-import org.parosproxy.paros.common.AbstractParam;\n+import org.zaproxy.zap.common.VersionedAbstractParam;\n \n-public class WappalyzerParam extends AbstractParam {\n+public class WappalyzerParam extends VersionedAbstractParam {\n \n-    private static final Logger LOGGER = Logger.getLogger(WappalyzerParam.class);\n+    /**\n+     * The version of the configurations. Used to keep track of configurations changes between\n+     * releases, if updates are needed.\n+     *\n+     * <p>It only needs to be updated for configurations changes (not releases of the add-on).\n+     */\n+    private static final int PARAM_CURRENT_VERSION = 1;\n     /** The base configuration key for all \"wappalyzer\" configurations. */\n     private static final String PARAM_BASE_KEY = \"wappalyzer\";\n     /** The configuration key for the state of wappalyzer functionality. */\n"}}, {"oid": "12bcb93182d7a4704995c15314f7709dc000dab0", "url": "https://github.com/zaproxy/zap-extensions/commit/12bcb93182d7a4704995c15314f7709dc000dab0", "message": "wappalyzer: Persist enable state\n\n* ExtensionWappalyzer - Add necessary variables and functionality to\nhandle enable state.\n* TechPanel - The enable toggle is associate with the param (enable\nstate).\n* WappalyzerParam - New class extending AbstractParam to handle the\nenable state.\n* wappalyzer.html - Updated help content to contain a short bit about\nthe toggle button and persistence.\n* CHANGELOG - Added change entry.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-06-09T11:26:25Z", "type": "forcePushed"}, {"oid": "fb9f155163d3ffbd2dfdf58ff8e9b7ce2c3350fe", "url": "https://github.com/zaproxy/zap-extensions/commit/fb9f155163d3ffbd2dfdf58ff8e9b7ce2c3350fe", "message": "wappalyzer: Persist enable state\n\n* ExtensionWappalyzer - Add necessary variables and functionality to\nhandle enable state.\n* TechPanel - The enable toggle is associate with the param (enable\nstate).\n* WappalyzerParam - New class extending AbstractParam to handle the\nenable state.\n* wappalyzer.html - Updated help content to contain a short bit about\nthe toggle button and persistence.\n* CHANGELOG - Added change entry.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-06-09T11:49:28Z", "type": "commit"}, {"oid": "fb9f155163d3ffbd2dfdf58ff8e9b7ce2c3350fe", "url": "https://github.com/zaproxy/zap-extensions/commit/fb9f155163d3ffbd2dfdf58ff8e9b7ce2c3350fe", "message": "wappalyzer: Persist enable state\n\n* ExtensionWappalyzer - Add necessary variables and functionality to\nhandle enable state.\n* TechPanel - The enable toggle is associate with the param (enable\nstate).\n* WappalyzerParam - New class extending AbstractParam to handle the\nenable state.\n* wappalyzer.html - Updated help content to contain a short bit about\nthe toggle button and persistence.\n* CHANGELOG - Added change entry.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-06-09T11:49:28Z", "type": "forcePushed"}]}