{"pr_number": 2599, "pr_title": "Handle SocketTimeoutExceptions in LDAP and Proxy Disclosure Scan Rules", "pr_createdAt": "2020-11-03T01:02:45Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2599", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3NzIwMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2599#discussion_r516377203", "bodyText": "I'm not sure what issue this is addressing. Instead of sending originalmsg (which is actually the message passed into the scan method) should this simply leverage getBaseMsg() and not resend the msg being passed in?", "author": "kingthorin", "createdAt": "2020-11-03T01:05:04Z", "path": "addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/LdapInjectionScanRule.java", "diffHunk": "@@ -222,7 +224,25 @@ public void scan(HttpMessage originalmsg, String paramname, String paramvalue) {\n             // get the response for the \"original\" unmodified request\n             // this fixes what seems to be a bug in the Zap core, where the request response is not\n             // actually available at this point via \"originalmsg\"\n-            sendAndReceive(originalmsg);", "originalCommit": "495d3196d85312c0b872a63ef9d22cda0b972e2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5MTczMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2599#discussion_r516791733", "bodyText": "This was added to make sure that the message had a response (e.g. messages of temporary nodes). This is no longer needed as core ensures that the messages have a response.", "author": "thc202", "createdAt": "2020-11-03T16:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3NzIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5Mjg4MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2599#discussion_r516792881", "bodyText": "And to answer your question, yes, it can use the base message.", "author": "thc202", "createdAt": "2020-11-03T16:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3NzIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "023ba15680b7f2a3b1f5157ac84ea13c05d612d7", "chunk": "diff --git a/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/LdapInjectionScanRule.java b/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/LdapInjectionScanRule.java\nindex 5e8ae0b5c..2a5b5edbf 100644\n--- a/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/LdapInjectionScanRule.java\n+++ b/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/LdapInjectionScanRule.java\n\n@@ -221,29 +219,6 @@ public class LdapInjectionScanRule extends AbstractAppParamPlugin {\n                                 + \"] for LDAP Injection\");\n             }\n \n-            // get the response for the \"original\" unmodified request\n-            // this fixes what seems to be a bug in the Zap core, where the request response is not\n-            // actually available at this point via \"originalmsg\"\n-            try {\n-                sendAndReceive(originalmsg);\n-            } catch (SocketTimeoutException ste) {\n-                log.warn(\n-                        \"A timeout occurred while checking [\"\n-                                + originalmsg.getRequestHeader().getMethod()\n-                                + \"] [\"\n-                                + originalmsg.getRequestHeader().getURI()\n-                                + \"] for Proxy Disclosure.\\n\"\n-                                + \"The currently configured timeout is: \"\n-                                + Integer.toString(\n-                                        Model.getSingleton()\n-                                                .getOptionsParam()\n-                                                .getConnectionParam()\n-                                                .getTimeoutInSecs()));\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Caught \" + ste.getClass().getName() + \" \" + ste.getMessage());\n-                }\n-            }\n-\n             // 1: try error based LDAP injection, for one of the LDAP implementations that we know\n             // about\n             HttpMessage attackMsg = getNewMsg();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5NDgwNg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2599#discussion_r516794806", "bodyText": "Should it return? If there's no response there's nothing to check?", "author": "thc202", "createdAt": "2020-11-03T16:25:30Z", "path": "addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ProxyDisclosureScanRule.java", "diffHunk": "@@ -674,7 +676,25 @@ public void scan() {\n             HttpMessage trackmsg = getNewMsg();\n             trackmsg.setRequestHeader(trackRequestHeader);\n \n-            sendAndReceive(trackmsg, false); // do not follow redirects.\n+            try {\n+                sendAndReceive(trackmsg, false); // do not follow redirects.\n+            } catch (SocketTimeoutException ste) {", "originalCommit": "495d3196d85312c0b872a63ef9d22cda0b972e2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "023ba15680b7f2a3b1f5157ac84ea13c05d612d7", "chunk": "diff --git a/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ProxyDisclosureScanRule.java b/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ProxyDisclosureScanRule.java\nindex 97507062b..a274444a8 100644\n--- a/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ProxyDisclosureScanRule.java\n+++ b/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ProxyDisclosureScanRule.java\n\n@@ -694,6 +694,7 @@ public class ProxyDisclosureScanRule extends AbstractAppPlugin {\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Caught \" + ste.getClass().getName() + \" \" + ste.getMessage());\n                 }\n+                return;\n             }\n \n             // TODO: fingerprint more origin web servers response to a TRACK request for a file that\n"}}, {"oid": "023ba15680b7f2a3b1f5157ac84ea13c05d612d7", "url": "https://github.com/zaproxy/zap-extensions/commit/023ba15680b7f2a3b1f5157ac84ea13c05d612d7", "message": "Handle SocketTimeoutExceptions in LDAP and Proxy Disclosure Scan Rules\n\n- Addressed STEs encountered in specific locations in these two scan\nrules.\n- Added Fix note to the CHANGELOGs.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-11-03T18:05:56Z", "type": "commit"}, {"oid": "023ba15680b7f2a3b1f5157ac84ea13c05d612d7", "url": "https://github.com/zaproxy/zap-extensions/commit/023ba15680b7f2a3b1f5157ac84ea13c05d612d7", "message": "Handle SocketTimeoutExceptions in LDAP and Proxy Disclosure Scan Rules\n\n- Addressed STEs encountered in specific locations in these two scan\nrules.\n- Added Fix note to the CHANGELOGs.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-11-03T18:05:56Z", "type": "forcePushed"}]}