{"pr_number": 2570, "pr_title": "Support Chrome, Perf improvements, Unit tests and promote to beta", "pr_createdAt": "2020-10-12T13:34:42Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2570", "timeline": [{"oid": "b9bdc844b29c78f0f4bde3c842b7d6028e54488f", "url": "https://github.com/zaproxy/zap-extensions/commit/b9bdc844b29c78f0f4bde3c842b7d6028e54488f", "message": "Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-12T15:16:23Z", "type": "forcePushed"}, {"oid": "ea23a032a584678c5b8f814502e1b0502533f91d", "url": "https://github.com/zaproxy/zap-extensions/commit/ea23a032a584678c5b8f814502e1b0502533f91d", "message": "Support Chrome, Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-12T15:20:28Z", "type": "forcePushed"}, {"oid": "7f8ebd42e2d5c5855128289fb69914e4f6d8a20b", "url": "https://github.com/zaproxy/zap-extensions/commit/7f8ebd42e2d5c5855128289fb69914e4f6d8a20b", "message": "Support Chrome, Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-12T15:59:34Z", "type": "forcePushed"}, {"oid": "677246beeab171f3c7bf74e3a15c8d3151136fda", "url": "https://github.com/zaproxy/zap-extensions/commit/677246beeab171f3c7bf74e3a15c8d3151136fda", "message": "Support Chrome, Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-13T10:15:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA5MzY5Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2570#discussion_r506093692", "bodyText": "Either this or the help should be updated, they both show different values...", "author": "ricekot", "createdAt": "2020-10-16T06:45:54Z", "path": "addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java", "diffHunk": "@@ -526,14 +530,14 @@ public void scan() {\n \n         switch (this.getAttackStrength()) {\n             case LOW:\n-                numberOfAttackStrings = 3;\n+                numberOfAttackStrings = 1;\n                 break;\n             case MEDIUM:\n             default:\n-                numberOfAttackStrings = 5;\n+                numberOfAttackStrings = 3;\n                 break;\n             case HIGH:\n-                numberOfAttackStrings = 7;\n+                numberOfAttackStrings = 6;", "originalCommit": "677246beeab171f3c7bf74e3a15c8d3151136fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNjQwMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2570#discussion_r510226403", "bodyText": "Could be renamed too.", "author": "thc202", "createdAt": "2020-10-22T14:51:04Z", "path": "addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java", "diffHunk": "@@ -249,12 +250,12 @@ private WebDriver createWebDriver() {\n     private WebDriverWrapper getWebDriver() {\n         WebDriverWrapper fxDriver;", "originalCommit": "677246beeab171f3c7bf74e3a15c8d3151136fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "chunk": "diff --git a/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java b/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\nindex d84257bd8..747a0b829 100644\n--- a/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\n+++ b/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\n\n@@ -248,14 +248,14 @@ public class DomXssScanRule extends AbstractAppParamPlugin {\n     }\n \n     private WebDriverWrapper getWebDriver() {\n-        WebDriverWrapper fxDriver;\n+        WebDriverWrapper driver;\n         try {\n-            fxDriver = freeDrivers.pop();\n+            driver = freeDrivers.pop();\n         } catch (Exception e) {\n-            fxDriver = new WebDriverWrapper(createWebDriver());\n+            driver = new WebDriverWrapper(createWebDriver());\n         }\n         synchronized (takenDrivers) {\n-            takenDrivers.add(fxDriver);\n+            takenDrivers.add(driver);\n         }\n \n         if (reaperThread == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNjUxMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2570#discussion_r510226512", "bodyText": "This needs to take into account the browser set, otherwise it might return a previous browser (e.g. if the user later changed to Chrome).", "author": "thc202", "createdAt": "2020-10-22T14:51:13Z", "path": "addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java", "diffHunk": "@@ -249,12 +250,12 @@ private WebDriver createWebDriver() {\n     private WebDriverWrapper getWebDriver() {\n         WebDriverWrapper fxDriver;\n         try {\n-            fxDriver = freeFirefoxDrivers.pop();\n+            fxDriver = freeDrivers.pop();", "originalCommit": "677246beeab171f3c7bf74e3a15c8d3151136fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "chunk": "diff --git a/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java b/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\nindex d84257bd8..747a0b829 100644\n--- a/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\n+++ b/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\n\n@@ -248,14 +248,14 @@ public class DomXssScanRule extends AbstractAppParamPlugin {\n     }\n \n     private WebDriverWrapper getWebDriver() {\n-        WebDriverWrapper fxDriver;\n+        WebDriverWrapper driver;\n         try {\n-            fxDriver = freeDrivers.pop();\n+            driver = freeDrivers.pop();\n         } catch (Exception e) {\n-            fxDriver = new WebDriverWrapper(createWebDriver());\n+            driver = new WebDriverWrapper(createWebDriver());\n         }\n         synchronized (takenDrivers) {\n-            takenDrivers.add(fxDriver);\n+            takenDrivers.add(driver);\n         }\n \n         if (reaperThread == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNjg4MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2570#discussion_r510226880", "bodyText": "Could be renamed.", "author": "thc202", "createdAt": "2020-10-22T14:51:40Z", "path": "addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java", "diffHunk": "@@ -326,12 +326,16 @@ private void returnFirefoxDriver(WebDriverWrapper fxDriver) {\n     @Override\n     public void setTimeFinished() {\n         super.setTimeFinished();\n+        tidyUp();\n+    }\n+\n+    static void tidyUp() {\n         // Tidy up...\n         // Dont kill drivers in the 'taken' list as there may be multiple scans\n         WebDriverWrapper fxDriver;", "originalCommit": "677246beeab171f3c7bf74e3a15c8d3151136fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "chunk": "diff --git a/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java b/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\nindex d84257bd8..747a0b829 100644\n--- a/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\n+++ b/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java\n\n@@ -332,11 +332,11 @@ public class DomXssScanRule extends AbstractAppParamPlugin {\n     static void tidyUp() {\n         // Tidy up...\n         // Dont kill drivers in the 'taken' list as there may be multiple scans\n-        WebDriverWrapper fxDriver;\n+        WebDriverWrapper driver;\n         while (!freeDrivers.isEmpty()) {\n             try {\n-                fxDriver = freeDrivers.pop();\n-                fxDriver.getDriver().quit();\n+                driver = freeDrivers.pop();\n+                driver.getDriver().quit();\n             } catch (Exception e) {\n                 // Ignore\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyOTYwMQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2570#discussion_r510229601", "bodyText": "Should call the equivalent for Chrome. It should also check that Chrome (and Firefox?) is really available (and return or not in testBrowsers).", "author": "thc202", "createdAt": "2020-10-22T14:55:07Z", "path": "addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.domxss;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import java.io.IOException;\n+import java.util.stream.Stream;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.selenium.Browser;\n+import org.zaproxy.zap.extension.selenium.SeleniumOptions;\n+import org.zaproxy.zap.testutils.ActiveScannerTestUtils;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+\n+public class DomXssScanRuleUnitTest extends ActiveScannerTestUtils<DomXssScanRule> {\n+\n+    @BeforeAll\n+    static void setup() {\n+        WebDriverManager.firefoxdriver().setup();", "originalCommit": "677246beeab171f3c7bf74e3a15c8d3151136fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "chunk": "diff --git a/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java b/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\nindex 19a2f07b3..2fad88230 100644\n--- a/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\n+++ b/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\n\n@@ -37,7 +37,6 @@ import org.junit.jupiter.params.provider.MethodSource;\n import org.parosproxy.paros.core.scanner.Alert;\n import org.parosproxy.paros.network.HttpMessage;\n import org.zaproxy.zap.extension.selenium.Browser;\n-import org.zaproxy.zap.extension.selenium.SeleniumOptions;\n import org.zaproxy.zap.testutils.ActiveScannerTestUtils;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyOTYyNQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2570#discussion_r510229625", "bodyText": "Should not be needed.", "author": "thc202", "createdAt": "2020-10-22T14:55:09Z", "path": "addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.domxss;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import java.io.IOException;\n+import java.util.stream.Stream;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.selenium.Browser;\n+import org.zaproxy.zap.extension.selenium.SeleniumOptions;\n+import org.zaproxy.zap.testutils.ActiveScannerTestUtils;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+\n+public class DomXssScanRuleUnitTest extends ActiveScannerTestUtils<DomXssScanRule> {\n+\n+    @BeforeAll\n+    static void setup() {\n+        WebDriverManager.firefoxdriver().setup();\n+        System.setProperty(\n+                SeleniumOptions.FIREFOX_DRIVER_SYSTEM_PROPERTY,\n+                System.getProperty(\"webdriver.gecko.driver\"));", "originalCommit": "677246beeab171f3c7bf74e3a15c8d3151136fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "chunk": "diff --git a/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java b/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\nindex 19a2f07b3..2fad88230 100644\n--- a/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\n+++ b/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\n\n@@ -37,7 +37,6 @@ import org.junit.jupiter.params.provider.MethodSource;\n import org.parosproxy.paros.core.scanner.Alert;\n import org.parosproxy.paros.network.HttpMessage;\n import org.zaproxy.zap.extension.selenium.Browser;\n-import org.zaproxy.zap.extension.selenium.SeleniumOptions;\n import org.zaproxy.zap.testutils.ActiveScannerTestUtils;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyOTY1NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2570#discussion_r510229654", "bodyText": "Remove?", "author": "thc202", "createdAt": "2020-10-22T14:55:12Z", "path": "addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.domxss;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import java.io.IOException;\n+import java.util.stream.Stream;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.selenium.Browser;\n+import org.zaproxy.zap.extension.selenium.SeleniumOptions;\n+import org.zaproxy.zap.testutils.ActiveScannerTestUtils;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+\n+public class DomXssScanRuleUnitTest extends ActiveScannerTestUtils<DomXssScanRule> {\n+\n+    @BeforeAll\n+    static void setup() {\n+        WebDriverManager.firefoxdriver().setup();\n+        System.setProperty(\n+                SeleniumOptions.FIREFOX_DRIVER_SYSTEM_PROPERTY,\n+                System.getProperty(\"webdriver.gecko.driver\"));\n+    }\n+\n+    static Stream<String> testBrowsers() {\n+        return Stream.of(\"firefox-headless\", \"chrome-headless\");\n+    }\n+\n+    @AfterAll\n+    static void tidyUp() {\n+        DomXssScanRule.tidyUp();\n+    }\n+\n+    @Override\n+    protected DomXssScanRule createScanner() {\n+        return new DomXssScanRule();\n+    }\n+\n+    @Override\n+    protected void setUpMessages() {\n+        mockMessages(new ExtensionDomXSS());\n+    }\n+\n+    @Test\n+    public void shouldUseDefaultWhenUnsupportedBrowser() throws IOException {\n+        // Given\n+        HttpMessage msg = this.getHttpMessage(\"\");\n+        this.rule.getConfig().setProperty(\"rules.domxss.browserid\", \"opera\");\n+        this.rule.init(msg, this.parent);\n+\n+        // When / Then\n+        assertThat(this.rule.getBrowser(), equalTo(Browser.FIREFOX_HEADLESS));\n+    }\n+\n+    @Test\n+    public void shouldUseDefaultWhenUnknownBrowser() throws IOException {\n+        // Given\n+        HttpMessage msg = this.getHttpMessage(\"\");\n+        this.rule.getConfig().setProperty(\"rules.domxss.browserid\", \"invalid\");\n+        this.rule.init(msg, this.parent);\n+\n+        // When / Then\n+        assertThat(this.rule.getBrowser(), equalTo(Browser.FIREFOX_HEADLESS));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testBrowsers\")\n+    public void shouldUseCorrectBrowser(String browser) throws IOException {\n+        // Given\n+        HttpMessage msg = this.getHttpMessage(\"\");\n+        // this.rule.setDefaultBrowser(Browser.getBrowserWithId(browser));", "originalCommit": "677246beeab171f3c7bf74e3a15c8d3151136fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "chunk": "diff --git a/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java b/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\nindex 19a2f07b3..2fad88230 100644\n--- a/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\n+++ b/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\n\n@@ -37,7 +37,6 @@ import org.junit.jupiter.params.provider.MethodSource;\n import org.parosproxy.paros.core.scanner.Alert;\n import org.parosproxy.paros.network.HttpMessage;\n import org.zaproxy.zap.extension.selenium.Browser;\n-import org.zaproxy.zap.extension.selenium.SeleniumOptions;\n import org.zaproxy.zap.testutils.ActiveScannerTestUtils;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMTM3OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2570#discussion_r510231379", "bodyText": "Worth extracting a class.", "author": "thc202", "createdAt": "2020-10-22T14:57:20Z", "path": "addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.domxss;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import java.io.IOException;\n+import java.util.stream.Stream;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.selenium.Browser;\n+import org.zaproxy.zap.extension.selenium.SeleniumOptions;\n+import org.zaproxy.zap.testutils.ActiveScannerTestUtils;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+\n+public class DomXssScanRuleUnitTest extends ActiveScannerTestUtils<DomXssScanRule> {\n+\n+    @BeforeAll\n+    static void setup() {\n+        WebDriverManager.firefoxdriver().setup();\n+        System.setProperty(\n+                SeleniumOptions.FIREFOX_DRIVER_SYSTEM_PROPERTY,\n+                System.getProperty(\"webdriver.gecko.driver\"));\n+    }\n+\n+    static Stream<String> testBrowsers() {\n+        return Stream.of(\"firefox-headless\", \"chrome-headless\");\n+    }\n+\n+    @AfterAll\n+    static void tidyUp() {\n+        DomXssScanRule.tidyUp();\n+    }\n+\n+    @Override\n+    protected DomXssScanRule createScanner() {\n+        return new DomXssScanRule();\n+    }\n+\n+    @Override\n+    protected void setUpMessages() {\n+        mockMessages(new ExtensionDomXSS());\n+    }\n+\n+    @Test\n+    public void shouldUseDefaultWhenUnsupportedBrowser() throws IOException {\n+        // Given\n+        HttpMessage msg = this.getHttpMessage(\"\");\n+        this.rule.getConfig().setProperty(\"rules.domxss.browserid\", \"opera\");\n+        this.rule.init(msg, this.parent);\n+\n+        // When / Then\n+        assertThat(this.rule.getBrowser(), equalTo(Browser.FIREFOX_HEADLESS));\n+    }\n+\n+    @Test\n+    public void shouldUseDefaultWhenUnknownBrowser() throws IOException {\n+        // Given\n+        HttpMessage msg = this.getHttpMessage(\"\");\n+        this.rule.getConfig().setProperty(\"rules.domxss.browserid\", \"invalid\");\n+        this.rule.init(msg, this.parent);\n+\n+        // When / Then\n+        assertThat(this.rule.getBrowser(), equalTo(Browser.FIREFOX_HEADLESS));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testBrowsers\")\n+    public void shouldUseCorrectBrowser(String browser) throws IOException {\n+        // Given\n+        HttpMessage msg = this.getHttpMessage(\"\");\n+        // this.rule.setDefaultBrowser(Browser.getBrowserWithId(browser));\n+        this.rule.getConfig().setProperty(\"rules.domxss.browserid\", browser);\n+        this.rule.init(msg, this.parent);\n+\n+        // When / Then\n+        assertThat(this.rule.getBrowser(), equalTo(Browser.getBrowserWithId(browser)));\n+    }\n+\n+    /** Test based on http://public-firing-range.appspot.com/address/location.hash/assign */\n+    @ParameterizedTest\n+    @MethodSource(\"testBrowsers\")\n+    public void shouldReportXssInLocationHashAssign(String browser)\n+            throws NullPointerException, IOException {\n+        // Given\n+        String test = \"/shouldReportXssInLocationHashAssign/\";\n+\n+        this.nano.addHandler(\n+                new NanoServerHandler(test) {", "originalCommit": "677246beeab171f3c7bf74e3a15c8d3151136fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "chunk": "diff --git a/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java b/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\nindex 19a2f07b3..2fad88230 100644\n--- a/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\n+++ b/addOns/domxss/src/test/java/org/zaproxy/zap/extension/domxss/DomXssScanRuleUnitTest.java\n\n@@ -37,7 +37,6 @@ import org.junit.jupiter.params.provider.MethodSource;\n import org.parosproxy.paros.core.scanner.Alert;\n import org.parosproxy.paros.network.HttpMessage;\n import org.zaproxy.zap.extension.selenium.Browser;\n-import org.zaproxy.zap.extension.selenium.SeleniumOptions;\n import org.zaproxy.zap.testutils.ActiveScannerTestUtils;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n \n"}}, {"oid": "a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "url": "https://github.com/zaproxy/zap-extensions/commit/a2d6ccf8d8e0371201658b061f0d77af491f7ea7", "message": "Support Chrome, Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-23T16:23:22Z", "type": "forcePushed"}, {"oid": "940c1f98c54572b1045450f9a89621ec0f245889", "url": "https://github.com/zaproxy/zap-extensions/commit/940c1f98c54572b1045450f9a89621ec0f245889", "message": "Support Chrome, Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-26T10:39:37Z", "type": "forcePushed"}, {"oid": "18f3f2d133a51b5befd92dd33129370a27cc1768", "url": "https://github.com/zaproxy/zap-extensions/commit/18f3f2d133a51b5befd92dd33129370a27cc1768", "message": "Support Chrome, Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-26T12:02:33Z", "type": "forcePushed"}, {"oid": "1d5dff97490ec12d60da88dcf319702d55650a82", "url": "https://github.com/zaproxy/zap-extensions/commit/1d5dff97490ec12d60da88dcf319702d55650a82", "message": "Support Chrome, Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-26T12:57:27Z", "type": "commit"}, {"oid": "1d5dff97490ec12d60da88dcf319702d55650a82", "url": "https://github.com/zaproxy/zap-extensions/commit/1d5dff97490ec12d60da88dcf319702d55650a82", "message": "Support Chrome, Perf improvements, Unit tests and promote to beta\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-26T12:57:27Z", "type": "forcePushed"}]}